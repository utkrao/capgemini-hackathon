import { Base, INotifyPropertyChanged, IEnumerable, Type, PropertyChangedEventArgs } from "igniteui-react-core";
import { IDataLegendTarget } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { BrushCollection } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { TrendLineType } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Series } from "./Series";
import { IDataLegend } from "igniteui-react-core";
import { DataSeries } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ObservableColorCollection } from "igniteui-react-core";
import { DataSeriesMarker } from "igniteui-react-core";
import { IDataLegendSeries } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged, IDataLegendTarget {
    static $t: Type;
    protected jt: any;
    provideContainer(a: any): void;
    destroy(): void;
    private rp;
    protected rq(): void;
    protected rm(a: XamDataChart): void;
    protected rj(): void;
    protected rs(a: Series, b: number): void;
    protected sd(a: string, b: any, c: any): void;
    private jr;
    get tooltipTemplate(): any;
    set tooltipTemplate(a: any);
    private f8;
    get tooltipTemplates(): List$1<any>;
    set tooltipTemplates(a: List$1<any>);
    private g0;
    get ia(): number;
    set ia(a: number);
    private jq;
    private get toolTip();
    private set toolTip(value);
    private hd;
    get ip(): number;
    set ip(a: number);
    private he;
    get iq(): number;
    set iq(a: number);
    private hf;
    get ir(): number;
    set ir(a: number);
    private hc;
    get io(): number;
    set io(a: number);
    private g8;
    get ij(): number;
    set ij(a: number);
    private ha;
    get il(): number;
    set il(a: number);
    private g9;
    get ik(): number;
    set ik(a: number);
    private g7;
    get ii(): number;
    set ii(a: number);
    private tr;
    get uj(): Brush;
    set uj(a: Brush);
    private ts;
    get uk(): Brush;
    set uk(a: Brush);
    private gx;
    protected get_h7(): number;
    protected set_h7(a: number): void;
    get h7(): number;
    set h7(a: number);
    private hg;
    get is(): number;
    set is(a: number);
    private g6;
    get ih(): number;
    set ih(a: number);
    private gk;
    get hu(): number;
    set hu(a: number);
    private je;
    get jm(): number;
    set jm(a: number);
    private dt;
    get du(): (time: number) => number;
    set du(a: (time: number) => number);
    protected rn(a: XamDataChart): void;
    protected rt(a: Series, b: number): void;
    protected rk(): void;
    private ru;
    i5: (arg1: HTMLElement) => any[];
    private s2;
    private jv;
    private fy;
    private i6;
    protected se(a: string, b: any, c: any): void;
    private b4;
    get b5(): IDomainChartWidget;
    set b5(a: IDomainChartWidget);
    private kn;
    get pr(): string;
    set pr(a: string);
    private kp;
    get p2(): string;
    set p2(a: string);
    private dl;
    get dataChart(): XamDataChart;
    set dataChart(a: XamDataChart);
    ba: DataSeriesAdapterImplementation;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected ro(): void;
    protected abstract get ge(): List$1<DataSeriesType>;
    protected abstract get gd(): List$1<IDataSeriesAdapterRule>;
    protected gc: List$1<MarkerType>;
    protected fu(a: DataSeriesType): boolean;
    notifyResized(): void;
    r2(): void;
    q9(): void;
    rh(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected sk(a: string): void;
    protected abstract ra(a: (arg1: Axis) => void, b: boolean): void;
    protected rb(a: (arg1: Series) => void): void;
    protected rc(a: (arg1: Series, arg2: number) => void): void;
    protected rf(a: (arg1: Series) => void): void;
    protected rg(a: (arg1: Series, arg2: number) => void): void;
    protected rd(a: (arg1: Series) => void): void;
    protected re(a: (arg1: Series, arg2: number) => void): void;
    st(): void;
    protected r4(a: (arg1: XamDataChart) => void): void;
    protected r5(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected r6(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected fv(a: DataSeries): boolean;
    protected fn(): boolean;
    private static readonly j3;
    private jd;
    protected ny(a: DataSeries): string;
    private static j2;
    protected nz(a: DataSeries, b: DataSeriesType): string;
    protected abstract a9(a: DataSeries): DataSeriesType;
    protected abstract cv(a: DataSeries, b: DataSeriesType): Series;
    nx(): string;
    private fs;
    protected sw(): void;
    protected cw(seriesType_: DataSeriesType): Series;
    private cp;
    private cr;
    private ct;
    private cu;
    private cq;
    private cs;
    private bz;
    protected get b0(): IAnnotationLayerProxy;
    private get fj();
    private fl;
    private s3;
    protected fo(): boolean;
    protected fp(): boolean;
    protected get_fm(): boolean;
    protected get fm(): boolean;
    protected ga(a: string, b: boolean): List$1<Series>;
    protected q3(a: Series, b: boolean): void;
    protected s1(a: Series, b: Series, c: DataSeries): void;
    protected abstract sv(a: DataSeries): void;
    protected abstract su(a: DataSeries): void;
    protected sy(): void;
    private sz;
    protected s0(a: Series): void;
    protected abstract sx(): void;
    private r7;
    protected q7(): void;
    protected uc(a: number): Brush;
    protected uf(a: number): Brush;
    protected ud(a: number): Brush;
    protected ue(a: number): Brush;
    protected un(a: number): Color;
    protected ed(a: Color): ObservableColorCollection;
    protected ab(a: Color): BrushCollection;
    protected f7: List$1<Color>;
    protected get f9(): List$1<Color>;
    protected get_f2(): boolean;
    protected get f2(): boolean;
    ju(): any;
    rv(a: string, b: string): void;
    rw(a: string, b: string, c: Series): void;
    ck(a: DataSeriesMarker): MarkerType;
    private b3;
    private eu;
    attachDataLegend(a: IDataLegend): void;
    protected q2(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    protected q6(a: IDataLegend): void;
    getDataLegendSeries(): IDataLegendSeries[];
    protected p(): IDataLegendSeries[];
    r1(source_: any, a: number, b: any, c: any): void;
    rx(source_: any): void;
    ry(source_: any, a: number, b: any): void;
    rz(source_: any, a: number, b: any): void;
    private br;
    get bs(): DataToolTipLayerGroupingMode;
    set bs(a: DataToolTipLayerGroupingMode);
    private go;
    get hy(): number;
    set hy(a: number);
    private gp;
    get hz(): number;
    set hz(a: number);
    private gm;
    get hw(): number;
    set hw(a: number);
    private gn;
    get hx(): number;
    set hx(a: number);
    private bn;
    get bo(): DataTooltipGroupedPositionX;
    set bo(a: DataTooltipGroupedPositionX);
    private bp;
    get bq(): DataTooltipGroupedPositionY;
    set bq(a: DataTooltipGroupedPositionY);
    private en;
    get fe(): boolean;
    set fe(a: boolean);
    static readonly mj: string;
    get m(): string[];
    set m(a: string[]);
    private e;
    get j(): string[];
    set j(a: string[]);
    private b;
    get l(): string[];
    set l(a: string[]);
    private d;
    get i(): string[];
    set i(a: string[]);
    private a;
    get a8(): DataAbbreviationMode;
    set a8(a: DataAbbreviationMode);
    private a7;
    get ji(): number;
    set ji(a: number);
    private i9;
    get jj(): number;
    set jj(a: number);
    private ja;
    get bm(): DataLegendValueMode;
    set bm(a: DataLegendValueMode);
    private bl;
    get nb(): string;
    set nb(a: string);
    private kf;
    get ff(): boolean;
    set ff(a: boolean);
    private eo;
    get nh(): string;
    set nh(a: string);
    private kg;
    get n(): any[];
    set n(a: any[]);
    private f;
    get u9(): Thickness;
    set u9(a: Thickness);
    private uz;
    get fg(): boolean;
    set fg(a: boolean);
    private ep;
    get nq(): string;
    set nq(a: string);
    private kh;
    get fh(): boolean;
    set fh(a: boolean);
    private eq;
    get va(): Thickness;
    set va(a: Thickness);
    private u0;
    get t9(): Brush;
    set t9(a: Brush);
    private tm;
    private d3;
    get ec(): FontInfo;
    set ec(a: FontInfo);
    get l1(): string;
    set l1(a: string);
    private j9;
    get k(): any[];
    set k(a: any[]);
    private c;
    get lx(): string;
    set lx(a: string);
    private j8;
    get bc(): DataLegendHeaderDateMode;
    set bc(a: DataLegendHeaderDateMode);
    private bb;
    get be(): DataLegendHeaderTimeMode;
    set be(a: DataLegendHeaderTimeMode);
    private bd;
    get l6(): string;
    set l6(a: string);
    private ka;
    get t1(): Brush;
    set t1(a: Brush);
    private te;
    get u3(): Thickness;
    set u3(a: Thickness);
    private ut;
    get u2(): Thickness;
    set u2(a: Thickness);
    private us;
    get fd(): boolean;
    set fd(a: boolean);
    private em;
    private dv;
    get d4(): FontInfo;
    set d4(a: FontInfo);
    get t4(): Brush;
    set t4(a: Brush);
    private th;
    private dy;
    get d7(): FontInfo;
    set d7(a: FontInfo);
    get bi(): DataLegendSummaryType;
    set bi(a: DataLegendSummaryType);
    private bh;
    get mp(): string;
    set mp(a: string);
    private kc;
    get u6(): Thickness;
    set u6(a: Thickness);
    private uw;
    get u5(): Thickness;
    set u5(a: Thickness);
    private uv;
    get t6(): Brush;
    set t6(a: Brush);
    private tj;
    private d0;
    get d9(): FontInfo;
    set d9(a: FontInfo);
    get mk(): string;
    set mk(a: string);
    private kb;
    get t3(): Brush;
    set t3(a: Brush);
    private tg;
    private dx;
    get d6(): FontInfo;
    set d6(a: FontInfo);
    get mv(): string;
    set mv(a: string);
    private kd;
    get t5(): Brush;
    set t5(a: Brush);
    private ti;
    private dz;
    get d8(): FontInfo;
    set d8(a: FontInfo);
    get u1(): Thickness;
    set u1(a: Thickness);
    private ur;
    get cc(): LegendItemBadgeShape;
    set cc(a: LegendItemBadgeShape);
    private ca;
    get bk(): DataLegendUnitsMode;
    set bk(a: DataLegendUnitsMode);
    private bj;
    get m5(): string;
    set m5(a: string);
    private ke;
    get t8(): Brush;
    set t8(a: Brush);
    private tl;
    get u8(): Thickness;
    set u8(a: Thickness);
    private uy;
    private d2;
    get eb(): FontInfo;
    set eb(a: FontInfo);
    get u7(): Thickness;
    set u7(a: Thickness);
    private ux;
    get t7(): Brush;
    set t7(a: Brush);
    private tk;
    private d1;
    get ea(): FontInfo;
    set ea(a: FontInfo);
    get bg(): DataLegendLabelMode;
    set bg(a: DataLegendLabelMode);
    private bf;
    get t2(): Brush;
    set t2(a: Brush);
    private tf;
    get u4(): Thickness;
    set u4(a: Thickness);
    private uu;
    private dw;
    get d5(): FontInfo;
    set d5(a: FontInfo);
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    sl(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    sr(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    sn(a: Series, b: any): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    so(a: Series, b: any): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    sp(a: Series, b: any): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    sm(a: Series, b: any): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    sq(a: Series, b: any): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    sj(a: any, b: CalloutStyleUpdatingEventArgs): void;
    calloutRenderStyleUpdating: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void;
    si(a: any, b: CalloutRenderStyleUpdatingEventArgs): void;
    private gb;
    sg(a: () => void): void;
    private ee;
    sh(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_fw(): boolean;
    protected get fw(): boolean;
    protected rl(a: XamDataChart): void;
    protected af(a: BrushCollection): BrushCollection;
    protected ui(a: Brush): Brush;
    protected rr(a: Series, b: number): void;
    protected abstract q4(): void;
    protected get e8(): boolean;
    private eh;
    protected q8(): void;
    protected ri(): void;
    protected ss(a: XamDataChart): void;
    protected q1(a: Series, b: number): void;
    protected abstract q0(a: Series, b: number): void;
    protected cm(a: Series, b: number): MarkerType;
    protected cl(a: Series): MarkerType;
    protected jy(): any;
    protected get_fq(): boolean;
    protected get fq(): boolean;
    protected gi(): IEnumerable;
    protected sc(a: string, b: any, c: any): void;
    private f5;
    private f6;
    private r8;
    private qz;
    private sa;
    abstract get by(): DomainType;
    private as;
    private ao;
    private an;
    private dn;
    private a0;
    private dr;
    private ds;
    private e2;
    private e1;
    private e3;
    private e0;
    private ar;
    private aq;
    private ap;
    private dp;
    private az;
    get ay(): ChartSortDescriptionCollection;
    get au(): ChartSortDescriptionCollection;
    get at(): ChartSortDescriptionCollection;
    get dq(): FilterExpressionCollection;
    get a2(): ChartSummaryDescriptionCollection;
    get ax(): ChartSortDescriptionCollection;
    get aw(): ChartSortDescriptionCollection;
    get av(): ChartSortDescriptionCollection;
    get a1(): ChartSummaryDescriptionCollection;
    private kk;
    get oj(): string;
    set oj(a: string);
    private ki;
    get n0(): string;
    set n0(a: string);
    private kj;
    get oh(): string;
    set oh(a: string);
    private kl;
    get ol(): string;
    set ol(a: string);
    private jp;
    get itemsSource(): any;
    set itemsSource(a: any);
    private jo;
    get actualItemsSource(): any;
    set actualItemsSource(a: any);
    private h;
    get q(): string[];
    set q(a: string[]);
    private g;
    get o(): string[];
    set o(a: string[]);
    private t;
    get aa(): BrushCollection;
    set aa(a: BrushCollection);
    private w;
    get ae(): BrushCollection;
    set ae(a: BrushCollection);
    private r;
    get y(): BrushCollection;
    set y(a: BrushCollection);
    private s;
    get z(): BrushCollection;
    set z(a: BrushCollection);
    private b1;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    private et;
    protected get_fr(): boolean;
    protected set_fr(a: boolean): void;
    get fr(): boolean;
    set fr(a: boolean);
    private ew;
    protected get_fx(): boolean;
    protected set_fx(a: boolean): void;
    get fx(): boolean;
    set fx(a: boolean);
    private ey;
    protected get_f0(): boolean;
    protected set_f0(a: boolean): void;
    get f0(): boolean;
    set f0(a: boolean);
    private e4;
    protected get_f3(): boolean;
    protected set_f3(a: boolean): void;
    get f3(): boolean;
    set f3(a: boolean);
    private ev;
    protected get_ft(): boolean;
    protected set_ft(a: boolean): void;
    get ft(): boolean;
    set ft(a: boolean);
    private uo;
    get uq(): Rect;
    set uq(a: Rect);
    get up(): Rect;
    private ko;
    get pv(): string;
    set pv(a: string);
    private km;
    get pk(): string;
    set pk(a: string);
    private s5;
    get s7(): HorizontalAlignment;
    set s7(a: HorizontalAlignment);
    private s4;
    get s6(): HorizontalAlignment;
    set s6(a: HorizontalAlignment);
    private dj;
    get dk(): UnknownValuePlotting;
    set dk(a: UnknownValuePlotting);
    private g5;
    protected get_ig(): number;
    protected set_ig(a: number): void;
    get ig(): number;
    set ig(a: number);
    private hb;
    get im(): number;
    set im(a: number);
    private c1;
    get c2(): SeriesOutlineMode;
    set c2(a: SeriesOutlineMode);
    private ci;
    get cj(): MarkerOutlineMode;
    set cj(a: MarkerOutlineMode);
    private cg;
    get ch(): MarkerFillMode;
    set ch(a: MarkerFillMode);
    private gy;
    get h8(): number;
    set h8(a: number);
    private gz;
    get h9(): number;
    set h9(a: number);
    private cn;
    get co(): MarkerTypeCollection;
    set co(a: MarkerTypeCollection);
    private ce;
    get cf(): MarkerAutomaticBehavior;
    set cf(a: MarkerAutomaticBehavior);
    private u;
    get ac(): BrushCollection;
    set ac(a: BrushCollection);
    private v;
    get ad(): BrushCollection;
    set ad(a: BrushCollection);
    private jc;
    get jl(): number;
    set jl(a: number);
    private gj;
    get ht(): number;
    set ht(a: number);
    private eg;
    get e7(): boolean;
    set e7(a: boolean);
    private x;
    get ag(): BrushCollection;
    set ag(a: BrushCollection);
    private dh;
    get di(): TrendLineType;
    set di(a: TrendLineType);
    private hh;
    get it(): number;
    set it(a: number);
    private ef;
    get e6(): boolean;
    set e6(a: boolean);
    private g2;
    get ic(): number;
    set ic(a: number);
    private g4;
    get ie(): number;
    set ie(a: number);
    private g3;
    get id(): number;
    set id(a: number);
    private g1;
    get ib(): number;
    set ib(a: number);
    protected sb(): void;
    private a3;
    get a4(): ComputedPlotAreaMarginMode;
    set a4(a: ComputedPlotAreaMarginMode);
    private c3;
    get c4(): SeriesPlotAreaMarginHorizontalMode;
    set c4(a: SeriesPlotAreaMarginHorizontalMode);
    private c5;
    get c6(): SeriesPlotAreaMarginVerticalMode;
    set c6(a: SeriesPlotAreaMarginVerticalMode);
    private cz;
    get c0(): SeriesHighlightingMode;
    set c0(a: SeriesHighlightingMode);
    private cx;
    get cy(): SeriesHighlightingBehavior;
    set cy(a: SeriesHighlightingBehavior);
    private b6;
    get b7(): LegendHighlightingMode;
    set b7(a: LegendHighlightingMode);
    private cb;
    get cd(): LegendItemBadgeShape;
    set cd(a: LegendItemBadgeShape);
    private b8;
    get b9(): LegendItemBadgeMode;
    set b9(a: LegendItemBadgeMode);
    private jf;
    get jn(): number;
    set jn(a: number);
    private df;
    get dg(): ToolTipType;
    set dg(a: ToolTipType);
    private a5;
    get a6(): CrosshairsDisplayMode;
    set a6(a: CrosshairsDisplayMode);
    private el;
    get fc(): boolean;
    set fc(a: boolean);
    private td;
    get t0(): Brush;
    set t0(a: Brush);
    private gl;
    get hv(): number;
    set hv(a: number);
    private tc;
    get tz(): Brush;
    set tz(a: Brush);
    private ek;
    get fb(): boolean;
    set fb(a: boolean);
    private s8;
    get tv(): Brush;
    set tv(a: Brush);
    private ta;
    get tx(): Brush;
    set tx(a: Brush);
    private s9;
    get tw(): Brush;
    set tw(a: Brush);
    private tb;
    get ty(): Brush;
    set ty(a: Brush);
    private i7;
    get jg(): number;
    set jg(a: number);
    private i8;
    get jh(): number;
    set jh(a: number);
    private ex;
    get fz(): boolean;
    set fz(a: boolean);
    private ez;
    get f1(): boolean;
    set f1(a: boolean);
    private er;
    get fi(): boolean;
    set fi(a: boolean);
    private tn;
    get ua(): Brush;
    set ua(a: Brush);
    private to;
    get ub(): Brush;
    set ub(a: Brush);
    private jb;
    get jk(): number;
    set jk(a: number);
    private ej;
    get fa(): boolean;
    set fa(a: boolean);
    private ei;
    get e9(): boolean;
    set e9(a: boolean);
    private gg;
    get calloutsItemsSource(): IEnumerable;
    set calloutsItemsSource(a: IEnumerable);
    private ah;
    get ai(): CalloutPlacementPositionsCollection;
    set ai(a: CalloutPlacementPositionsCollection);
    private j6;
    get k6(): string;
    set k6(a: string);
    private j7;
    get k8(): string;
    set k8(a: string);
    private j5;
    get k2(): string;
    set k2(a: string);
    private j4;
    get kz(): string;
    set kz(a: string);
    get db(): SeriesViewerScrollbarMode;
    set db(a: SeriesViewerScrollbarMode);
    private c9;
    get dc(): SeriesViewerScrollbarMode;
    set dc(a: SeriesViewerScrollbarMode);
    private da;
    get c8(): SeriesViewerHorizontalScrollbarPosition;
    set c8(a: SeriesViewerHorizontalScrollbarPosition);
    private c7;
    get de(): SeriesViewerVerticalScrollbarPosition;
    set de(a: SeriesViewerVerticalScrollbarPosition);
    private dd;
    get ug(): Brush;
    set ug(a: Brush);
    private tp;
    get uh(): Brush;
    set uh(a: Brush);
    private tq;
    get h4(): number;
    set h4(a: number);
    private gu;
    get h3(): number;
    set h3(a: number);
    private gt;
    get h0(): number;
    set h0(a: number);
    private gq;
    get h1(): number;
    set h1(a: number);
    private gr;
    get h2(): number;
    set h2(a: number);
    private gs;
    get h6(): number;
    set h6(a: number);
    private gw;
    get h5(): number;
    set h5(a: number);
    private gv;
    get fk(): boolean;
    set fk(a: boolean);
    private es;
    static readonly oc: string;
    get ul(): Brush;
    set ul(a: Brush);
    private tt;
    get um(): Brush;
    set um(a: Brush);
    private tu;
    get ix(): number;
    set ix(a: number);
    private hl;
    get iw(): number;
    set iw(a: number);
    private hk;
    get iu(): number;
    set iu(a: number);
    private hi;
    get i0(): number;
    set i0(a: number);
    private ho;
    get iv(): number;
    set iv(a: number);
    private hj;
    get iz(): number;
    set iz(a: number);
    private hn;
    get iy(): number;
    set iy(a: number);
    private hm;
    get f4(): boolean;
    set f4(a: boolean);
    private e5;
    static readonly qo: string;
    get i2(): number;
    set i2(a: number);
    private hq;
    get i1(): number;
    set i1(a: number);
    private hp;
    get i4(): number;
    set i4(a: number);
    private hs;
    get i3(): number;
    set i3(a: number);
    private hr;
}
