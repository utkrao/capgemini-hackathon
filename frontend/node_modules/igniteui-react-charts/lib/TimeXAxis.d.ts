import { TimeAxisBase } from "./TimeAxisBase";
import { ITimeRangeSelectorAxis } from "./ITimeRangeSelectorAxis";
import { TimeAxisBreakCollection } from "./TimeAxisBreakCollection";
import { TimeAxisLabellingMode } from "./TimeAxisLabellingMode";
import { TimeAxisLabelFormatCollection } from "./TimeAxisLabelFormatCollection";
import { TimeAxisIntervalCollection } from "./TimeAxisIntervalCollection";
import { Type, IList$1, EventArgs } from "igniteui-react-core";
import { TimeAxisLabelFormat } from "./TimeAxisLabelFormat";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { TimeRepetitionLevel } from "./TimeRepetitionLevel";
/**
 * @hidden
 */
export declare class TimeXAxis extends TimeAxisBase implements ITimeRangeSelectorAxis {
    static $t: Type;
    constructor();
    protected get_ck(): boolean;
    ei(a: number, b: ScalerParams): number;
    private od;
    hm(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    protected startCursor(): void;
    protected resetCursor(): void;
    private of;
    el(a: number, b: ScalerParams): number;
    private oe;
    private np;
    get breaks(): TimeAxisBreakCollection;
    private ny;
    get nz(): TimeAxisLabellingMode;
    set nz(a: TimeAxisLabellingMode);
    private nw;
    get labelFormats(): TimeAxisLabelFormatCollection;
    protected hv(a: any, b: string, c: any, d: any): void;
    protected ip(a: Rect, b: Rect): void;
    protected io(a: Rect, b: Rect): void;
    c2(): boolean;
    private _omission;
    private get omission();
    private set omission(value);
    private ow;
    private nn;
    private n2;
    private n8;
    private ov;
    gc(a: number): string;
    fy(a: any): any;
    static og(a: Date, b: boolean, c: Date, d: TimeAxisLabellingMode, e: number, f: IList$1<TimeAxisLabelFormat>, g: CultureInfo): any;
    static ol(a: Date, b: boolean, c: Date, d: TimeAxisLabellingMode, e: number, f: IList$1<TimeAxisLabelFormat>, g: CultureInfo): string;
    private static n0;
    protected get_mk(): boolean;
    protected set_mk(a: boolean): void;
    private nu;
    get intervals(): TimeAxisIntervalCollection;
    private oj;
    static ok(a: number, b: TimeRepetitionLevel, c: TimeAxisLabellingMode): string;
    private static nm;
    private static no;
    private ns;
    private nt;
    private oh;
    protected h8(a: boolean): void;
    private n1;
    private n3;
    private ou;
    private n7;
    get visibleMinimum(): Date;
    set visibleMinimum(a: Date);
    private n5;
    get oa(): Date;
    set oa(a: Date);
    private n4;
    get n9(): Date;
    set n9(a: Date);
    private n6;
    private nr;
    get visibleMaximum(): Date;
    set visibleMaximum(a: Date);
    protected nh(): void;
    k5(a: Rect, b: Rect, c: Rect, d: number, e: number): number;
    i$f(a: number): number;
    private ox;
    private oz;
    private oy;
    protected get_cb(): boolean;
    getWindowRectForSelection(a: Date, b: Date): Rect;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    private os;
    static or(a: (arg1: number) => Date, b: number): number;
    private oq;
    protected nd(): void;
    static on(a: number): string;
    itemLabelFormat(): string;
    visibleRangeChanged: (sender: any, e: EventArgs) => void;
    protected mz(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected m2(a: Rect, b: Rect, c: Rect, d: Rect): number;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
    get i$a(): boolean;
}
