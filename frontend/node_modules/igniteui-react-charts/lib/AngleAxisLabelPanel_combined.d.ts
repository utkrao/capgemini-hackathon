import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Point, Type, IList$1 } from "igniteui-react-core";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-react-core";
import { AxisOrientation } from "./AxisOrientation";
import { AxisView } from "./AxisView";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { Geometry } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericAxisRenderer } from "./NumericAxisRenderer";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { GeometryGroup } from "igniteui-react-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export declare class AngleAxisLabelPanel extends AxisLabelPanelBase {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    c9: AngleAxisLabelPanelView;
    constructor();
    da: boolean;
    dg: (arg1: number) => Point;
    at(a: number, b: Rect): boolean;
    de: number;
    db: number;
    dd: number;
    dc: number;
    a5(): List$1<Rect>;
    private df;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxis extends CategoryAxisBase implements IAngleScaler {
    static $t: Type;
    a3(): AxisView;
    hr(a: AxisView): void;
    mg: CategoryAngleAxisView;
    protected get_b8(): boolean;
    private ml;
    constructor();
    au(): AxisLabelPanelBase;
    mi: CategoryAxisRenderer;
    private mm;
    private m0;
    private mq;
    private mh;
    private nf;
    private mu;
    private mf;
    getMinMaxAngle(a: Rect, b: number, c: number): {
        p1: number;
        p2: number;
    };
    ac(): void;
    private mj;
    get mk(): NumericRadiusAxis;
    set mk(a: NumericRadiusAxis);
    aj(): Axis;
    m1: number;
    private mr;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    k3(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    mx(a: number): number;
    protected h8(a: boolean): void;
    mw(a: Rect, b: Rect): number;
    mv(a: Rect, b: Rect): number;
    getScaledAngle(a: number): number;
    getUnscaledAngle(a: number): number;
    ei(a: number, b: ScalerParams): number;
    el(a: number, b: ScalerParams): number;
    protected hv(a: any, b: string, c: any, d: any): void;
    private m9;
    nb(a: NumericRadiusAxis): void;
    static readonly nc: DependencyProperty;
    get my(): number;
    set my(a: number);
    private mo;
    get ms(): number;
    set ms(a: number);
    eu(): number;
    static readonly nd: DependencyProperty;
    get mz(): number;
    set mz(a: number);
    private mp;
    get mt(): number;
    set mt(a: number);
    protected mn(): boolean;
    protected get_a1(): AxisOrientation;
    get a1(): AxisOrientation;
    c2(): boolean;
    private m2;
    get m3(): number;
    set m3(a: number);
    j4(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericAngleAxis extends NumericAxisBase implements IAngleScaler {
    static $t: Type;
    a3(): AxisView;
    hr(a: AxisView): void;
    nf: NumericAngleAxisView;
    ni: PolarAxisRenderingManager;
    protected get_b8(): boolean;
    constructor();
    au(): AxisLabelPanelBase;
    private nm;
    private no;
    private nj;
    private nk;
    kw(): NumericAxisRenderer;
    private nv;
    ei(a: number, b: ScalerParams): number;
    getScaledAngle1(a: number, b: boolean, c: boolean): number;
    getScaledAngle(a: number): number;
    el(a: number, b: ScalerParams): number;
    getUnscaledAngle(a: number): number;
    np: number;
    private nl;
    protected hv(a: any, b: string, c: any, d: any): void;
    private nr;
    k0(): NumericAxisRenderingParameters;
    kz(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    getMinMaxAngle(a: Rect, b: number, c: number): {
        p1: number;
        p2: number;
    };
    protected h8(a: boolean): void;
    private ng;
    get nh(): NumericRadiusAxis;
    set nh(a: NumericRadiusAxis);
    aj(): Axis;
    nt(a: NumericRadiusAxis): void;
    protected io(a: Rect, b: Rect): void;
    protected get_a1(): AxisOrientation;
    get a1(): AxisOrientation;
    j4(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericRadiusAxis extends NumericAxisBase {
    static $t: Type;
    a3(): AxisView;
    hr(a: AxisView): void;
    nh: NumericRadiusAxisView;
    protected get_cl(): boolean;
    eh(): number;
    private nq;
    private np;
    private ni;
    constructor();
    au(): AxisLabelPanelBase;
    nj: boolean;
    private nn;
    private nk;
    kw(): NumericAxisRenderer;
    ei(a: number, b: ScalerParams): number;
    nt(a: number, b: boolean, c: boolean, d: number, e: number): number;
    ns(a: number): number;
    nu(a: number): number;
    el(a: number, b: ScalerParams): number;
    nw: number;
    nm: number;
    nv: number;
    nl: number;
    protected hv(a: any, b: string, c: any, d: any): void;
    protected no: number;
    n1(a: Axis): void;
    private nf;
    get ng(): Axis;
    set ng(a: Axis);
    aj(): Axis;
    k0(): NumericAxisRenderingParameters;
    kz(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    private n2;
    private nx;
    nr(): number;
    m0(a: AxisRangeChangedEventArgs): void;
    protected h8(a: boolean): void;
    protected io(a: Rect, b: Rect): void;
    n0(a: GeometryGroup, b: Rect, c: Rect, d: Rect, e: Rect): void;
    protected get_a1(): AxisOrientation;
    get a1(): AxisOrientation;
    j4(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AngleAxisLabelPanelView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected az: AngleAxisLabelPanel;
    constructor(a: AngleAxisLabelPanel);
    an(): void;
    a0(a: List$1<Rect>, b: List$1<boolean>): void;
    o(): number;
    p(): number;
    q(): number;
    r(): number;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxisView extends CategoryAxisBaseView {
    static $t: Type;
    protected bj: CategoryAngleAxis;
    constructor(a: CategoryAngleAxis);
    aj(): void;
}
/**
 * @hidden
 */
export declare class NumericAngleAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bj: NumericAngleAxis;
    constructor(a: NumericAngleAxis);
    aj(): void;
}
/**
 * @hidden
 */
export declare class NumericRadiusAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bj: NumericRadiusAxis;
    constructor(a: NumericRadiusAxis);
    aj(): void;
}
