import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { IndicatorDisplayType } from "./IndicatorDisplayType";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { SeriesView } from "./SeriesView";
import { CategoryFrame } from "./CategoryFrame";
import { Axis } from "./Axis";
import { Point, IList$1, Type } from "igniteui-react-core";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { Rect } from "igniteui-react-core";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { ITrendLineManager } from "./ITrendLineManager";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Clipper } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class FinancialIndicator extends FinancialSeries implements ITrendLineSeries {
    static $t: Type;
    protected get_dr(): boolean;
    protected bx(): SeriesView;
    l2(a: SeriesView): void;
    tr: FinancialIndicatorView;
    constructor();
    t4(a: boolean): void;
    protected tw(a: Point, b: Point, c: boolean): boolean;
    protected bp(): SeriesHitTestMode;
    pz(a: Point): Rect;
    ex(a: Point, b: boolean): boolean;
    protected k3(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    tt: IndicatorDisplayType;
    protected get_ts(): IndicatorDisplayType;
    get ts(): IndicatorDisplayType;
    tz: number;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get uh(): Brush;
    set uh(a: Brush);
    static readonly t7: DependencyProperty;
    trendLineThickness: number;
    uj: PenLineCap;
    ui: DoubleCollection;
    trendLinePeriod: number;
    protected t1(): number;
    t0: number;
    private _indicatorColumn;
    get indicatorColumn(): List$1<number>;
    set indicatorColumn(a: List$1<number>);
    protected tq: AxisRange;
    protected abstract tu(a: number, b: number): boolean;
    protected abstract tx(a: number, b: number): IList$1<string>;
    protected l7(a: any, b: string, c: any, d: any): void;
    gl(a: Point, b: boolean, c: boolean): number;
    hl(a: Point, b: boolean): number;
    hj(a: Point, b: boolean): number;
    protected get_fa(): boolean;
    private tv;
    private t6;
    ap(a: Axis): AxisRange;
    eo(a: any): boolean;
    fb(a: Rect, b: Rect, c: SeriesView): boolean;
    s7(a: CategoryFrame, b: FinancialSeriesView): void;
    k0(a: boolean, b: SeriesView): void;
    protected qq(): CategoryTransitionInMode;
    s9(a: CategoryFrame, b: FinancialSeriesView): void;
    protected mz(): void;
    protected t5(): void;
    protected la(a: any): void;
    protected ba(a: LegendItemBadgeShape): LegendItemBadgeShape;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialIndicatorBucketCalculator extends FinancialBucketCalculator {
    static $t: Type;
    constructor(a: FinancialSeriesView);
    protected f: FinancialIndicatorView;
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class FinancialIndicatorView extends FinancialSeriesView {
    static $t: Type;
    b3: FinancialIndicator;
    constructor(a: FinancialIndicator);
    protected by(): FinancialBucketCalculator;
    as(): void;
    private readonly b6;
    private cg;
    private b9;
    cu: Path;
    cq: Path;
    cv: Path;
    cr: Path;
    cw: Path;
    cs: Path;
    ct: Path;
    cp: Path;
    private b4;
    get b5(): ITrendLineManager;
    set b5(a: ITrendLineManager);
    get b7(): boolean;
    b8(a: boolean): void;
    ce(): void;
    cc(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: Clipper): void;
    ca(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: number, f: Clipper): void;
    cb(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: number): void;
    cf(): void;
    private cm;
    private co;
    private cn;
    private cl;
    private ci;
    private ck;
    private cj;
    private ch;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    protected a5(a: RenderingContext, b: boolean): void;
    al(a: any): void;
    cd(): void;
}
