import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { Axis } from "./Axis";
import { RadialFrame } from "./RadialFrame";
import { SeriesView } from "./SeriesView";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { RadialBaseView } from "./RadialBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { Clipper } from "igniteui-react-core";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { PointCollection } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    static $t: Type;
    private f;
    constructor(a: AnchoredRadialSeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare abstract class AnchoredRadialSeries extends RadialBase {
    static $t: Type;
    protected bx(): SeriesView;
    kx(): void;
    hy(a: any, b: string): any;
    l2(a: SeriesView): void;
    s2: AnchoredRadialSeriesView;
    constructor();
    s3: CategoryLineRasterizer;
    hl(a: Point, b: boolean): number;
    hj(a: Point, b: boolean): number;
    f5(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    gl(a: Point, b: boolean, c: boolean): number;
    pq(a: Point, b: boolean, c: boolean): Point;
    to: string;
    get s8(): IFastItemColumn$1<number>;
    set s8(a: IFastItemColumn$1<number>);
    private s7;
    tk: string;
    tm: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    s6: TrendLineType;
    t7: Brush;
    get t6(): Brush;
    set t6(a: Brush);
    static readonly tv: DependencyProperty;
    tg: number;
    t9: PenLineCap;
    t8: DoubleCollection;
    th: number;
    ti: number;
    ap(a: Axis): AxisRange;
    protected l7(a: any, b: string, c: any, d: any): void;
    protected k3(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    fb(a: Rect, b: Rect, c: SeriesView): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_tb(): boolean;
    protected get tb(): boolean;
    protected get_c6(): boolean;
    protected get_ek(): boolean;
    protected td(a: CategoryAngleAxis, b: Rect, c: Rect, d: Rect): number;
    sr(a: RadialFrame, b: RadialBaseView): void;
    private te;
    private tf;
    private tc;
    s1(a: List$1<number[]>, b: number, c: SeriesView): Clipper;
    protected ua: Point;
    tu(a: PointCollection, b: PointCollection, c: PointCollection, d: PointCollection, e: boolean): void;
    private ta;
    private s9;
    k0(a: boolean, b: SeriesView): void;
    su(a: RadialFrame, b: RadialBaseView): void;
    protected s0(a: number, b: number, c: Axis): any[];
    protected ts(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    protected tt(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    tr(a: RadialBaseView, b: RadialFrame): void;
    private tq;
    protected mz(): void;
    h1(a: any, b: Point): any;
    eo(a: any): boolean;
    s5: RadialFrame;
    mn(a: Rect, b: RenderSurface): void;
    private s4;
    mk(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected la(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredRadialSeriesView extends RadialBaseView {
    static $t: Type;
    cw: AnchoredRadialSeries;
    constructor(a: AnchoredRadialSeries);
    cx: RadialTrendLineManager;
    cy(a: Rect, b: Rect, c: Rect, d: Rect): void;
    cz(): void;
    protected a5(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
