import { Series } from "./Series";
import { Visibility } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { Type } from "igniteui-react-core";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
/**
 * @hidden
 */
export interface IAnnotationLayerProxy {
    matchesType(a: Series): boolean;
    setCrosshairUseInterpolation(a: Series, b: boolean): void;
    setCrosshairHorizontalLineVisibility(a: Series, b: Visibility): void;
    setCrosshairHorizontalLineStroke(a: Series, b: Brush): void;
    setCrosshairVerticalLineStroke(a: Series, b: Brush): void;
    setCrosshairVerticalLineVisibility(a: Series, b: Visibility): void;
    setCrosshairXAxisForeground(a: Series, b: Brush): void;
    setCrosshairXAxisBackground(a: Series, b: Brush): void;
    setCrosshairYAxisForeground(a: Series, b: Brush): void;
    setCrosshairYAxisBackground(a: Series, b: Brush): void;
    setCrosshairXAxisPrecision(a: Series, b: number): void;
    setCrosshairYAxisPrecision(a: Series, b: number): void;
    setCrosshairOnAxesEnabled(a: Series, b: boolean): void;
    setCrosshairThickness(a: Series, b: number): void;
    setFinalValuePrecision(a: Series, b: number): void;
    setFinalValueForeground(a: Series, b: Brush): void;
    setFinalValueBackground(a: Series, b: Brush): void;
    setXMemberPath(a: Series, b: string): void;
    setYMemberPath(a: Series, b: string): void;
    setLabelMemberPath(a: Series, b: string): void;
    setContentMemberPath(a: Series, b: string): void;
    setCalloutsAllowedPositions(a: Series, b: CalloutPlacementPositionsCollection): void;
    setTargetSeries(a: Series, b: Series): void;
    setCollisionChannel(a: Series, b: string): void;
    setIsAutoCalloutBehaviorEnabled(a: Series, b: boolean): void;
    setGreedyCollisionMode(a: Series, b: boolean): void;
    setUseDedicatedLanes(a: Series, b: boolean): void;
    isCalloutLayer(a: Series): boolean;
    addCalloutStyleUpdating(a: Series, b: (sender: any, args: CalloutStyleUpdatingEventArgs) => void): void;
    removeCalloutStyleUpdating(a: Series, b: (sender: any, args: CalloutStyleUpdatingEventArgs) => void): void;
    addCalloutRenderStyleUpdating(a: Series, b: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void): void;
    removeCalloutRenderStyleUpdating(a: Series, b: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void): void;
    setCalloutStyleUpdatingEventEnabled(a: Series, b: boolean): void;
    setCalloutRenderStyleUpdatingEventEnabled(a: Series, b: boolean): void;
    isDataToolTipLayer(a: Series): boolean;
    updateDataToolTipPropertyByName(a: Series, b: string, c: any): void;
    createCrosshairLayer(): any;
}
/**
 * @hidden
 */
export declare let IAnnotationLayerProxy_$type: Type;
