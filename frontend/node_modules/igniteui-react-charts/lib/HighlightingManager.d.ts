import { Base, Type } from "igniteui-react-core";
import { IHighlightingManager } from "./IHighlightingManager";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { IExecutionContext } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { HighlightingInfo } from "./HighlightingInfo";
import { IFastItemsSource } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class HighlightingManager extends Base implements IHighlightingManager {
    static $t: Type;
    constructor();
    private _highlightingBehavior;
    get highlightingBehavior(): SeriesHighlightingBehavior;
    set highlightingBehavior(a: SeriesHighlightingBehavior);
    private get d();
    private _executionContext;
    get executionContext(): IExecutionContext;
    set executionContext(a: IExecutionContext);
    private _ensureAnimator;
    get ensureAnimator(): () => void;
    set ensureAnimator(a: () => void);
    private e;
    private i;
    startHighlight(a: HighlightingInfo): void;
    private a;
    endHighlight(a: HighlightingInfo): void;
    private h;
    private j;
    private b;
    private c;
    private o;
    n: number;
    private r;
    private l;
    private p;
    private q;
    clear(): void;
    getHighlightingInfo(a: Series, b: IFastItemsSource, c: number, d: number, e: boolean): HighlightingInfo;
    private m;
    private _dirtySeries;
    get dirtySeries(): List$1<Series>;
    set dirtySeries(a: List$1<Series>);
    private _allDirty;
    get allDirty(): boolean;
    set allDirty(a: boolean);
    private f;
    private g;
    private k;
    tick(a: number): boolean;
    isCrossSeriesHighlight(a: Series): boolean;
    private _inProgress;
    get inProgress(): boolean;
    set inProgress(a: boolean);
    private _maxHighlightingProgress;
    get maxHighlightingProgress(): number;
    set maxHighlightingProgress(a: number);
    private _sumHighlightingProgress;
    get sumHighlightingProgress(): number;
    set sumHighlightingProgress(a: number);
    private _maxMarkerHighlightingProgress;
    get maxMarkerHighlightingProgress(): number;
    set maxMarkerHighlightingProgress(a: number);
    private _sumMarkerHighlightingProgress;
    get sumMarkerHighlightingProgress(): number;
    set sumMarkerHighlightingProgress(a: number);
    private _totalHighlightingProgress;
    get totalHighlightingProgress(): number;
    set totalHighlightingProgress(a: number);
}
