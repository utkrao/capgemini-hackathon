import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { SeriesView } from "./SeriesView";
import { Type, IList$1 } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { CategoryFrame } from "./CategoryFrame";
import { List$1 } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { Path } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Clipper } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class StepLineSeries extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    protected get_d2(): boolean;
    protected get_ei(): boolean;
    protected get_d3(): boolean;
    protected bx(): SeriesView;
    l2(a: SeriesView): void;
    vc: StepLineSeriesView;
    constructor();
    vb: CategoryLineRasterizer;
    ac(): void;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected get_de(): boolean;
    k0(a: boolean, b: SeriesView): void;
    protected bp(): SeriesHitTestMode;
    gb(a: number, b: IList$1<number>, c: number, d: number, e: number, f: number, g: number, h: boolean): number;
    private vd;
    tb(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class StepLineSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    protected da: StepLineSeries;
    constructor(a: StepLineSeries);
    as(): void;
    private dk;
    private dj;
    private dl;
    get dh(): Path;
    get di(): Path;
    get dg(): Path;
    db(): void;
    dc(a: number, b: List$1<number[]>, c: boolean, d: UnknownValuePlotting, e: Clipper, f: number, g: number): void;
    private df;
    private de;
    private dd;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    al(a: any): void;
    protected af(): void;
}
