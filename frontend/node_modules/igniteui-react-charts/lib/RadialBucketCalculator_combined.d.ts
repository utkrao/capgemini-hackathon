import { Base, Type, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { HighlightingInfo } from "./HighlightingInfo";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { AssigningRadialStyleEventArgs } from "./AssigningRadialStyleEventArgs";
import { AssigningRadialMarkerStyleEventArgs } from "./AssigningRadialMarkerStyleEventArgs";
import { RadialAxes } from "./RadialAxes";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class RadialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: RadialBaseView;
    constructor(a: RadialBaseView);
    c: number;
    d: number;
    b: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class RadialBase extends MarkerSeries implements IHasCategoryModePreference {
    static $t: Type;
    l2(a: SeriesView): void;
    ry: RadialBaseView;
    constructor();
    private sq;
    get categoryAxis(): CategoryAxisBase;
    ar(): CategoryAxisBase;
    rm(a: number, b: number): any[];
    protected r3: RadialSeriesRenderManager;
    c1(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    private sl;
    r4: SeriesRenderer$2<RadialFrame, RadialBaseView>;
    protected get_eb(): boolean;
    sb: boolean;
    sa: boolean;
    protected r6: boolean;
    protected r5: boolean;
    protected get_dy(): boolean;
    private ru;
    private rv;
    protected rr(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rs(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rt(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningRadialStyle: (sender: any, args: AssigningRadialStyleEventArgs) => void;
    assigningRadialMarkerStyle: (sender: any, args: AssigningRadialMarkerStyleEventArgs) => void;
    protected sf(): boolean;
    protected se(): boolean;
    protected st(a: AssigningRadialStyleEventArgs): void;
    protected ss(a: AssigningRadialMarkerStyleEventArgs): void;
    sh(a: SeriesView): number;
    si(a: SeriesView): number;
    rp: CategoryAngleAxis;
    rw: NumericRadiusAxis;
    ag(): Axis[];
    r9: boolean;
    protected m9(a: Rect, b: Rect): void;
    protected m8(a: Rect, b: Rect): void;
    abstract preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected l7(a: any, b: string, c: any, d: any): void;
    protected sd(): boolean;
    protected sc(): boolean;
    r8(a: any): boolean;
    r7(a: any): boolean;
    hv(a: Point): any;
    sg(a: Point): number;
    f7(a: Point): number;
    hf(a: Point): number;
    eo(a: any): boolean;
    r1: RadialFrame;
    r2: RadialFrame;
    rz: RadialFrame;
    r0(): RadialFrame;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    abstract sr(a: RadialFrame, b: RadialBaseView): void;
    abstract su(a: RadialFrame, b: RadialBaseView): void;
    rx: RadialAxes;
    li(): void;
    fb(a: Rect, b: Rect, c: SeriesView): boolean;
    mm(a: boolean): void;
    sj(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RadialBaseView extends MarkerSeriesView {
    static $t: Type;
    cs: RadialBucketCalculator;
    cr: RadialBase;
    constructor(a: RadialBase);
    ct: Pool$1<Marker>;
    cf(a: (arg1: Marker) => void): void;
    cu: number;
    cv: Point;
}
