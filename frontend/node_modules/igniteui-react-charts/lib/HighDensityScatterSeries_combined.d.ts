import { Series } from "./Series";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { SeriesView } from "./SeriesView";
import { ProgressiveLoadStatusEventArgs } from "./ProgressiveLoadStatusEventArgs";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class HighDensityScatterSeries extends Series {
    static $t: Type;
    protected get_d6(): boolean;
    protected gw(): number;
    constructor();
    protected get_ed(): boolean;
    qf: NumericXAxis;
    qh: NumericYAxis;
    si: string;
    protected get qm(): IFastItemColumn$1<number>;
    protected set qm(a: IFastItemColumn$1<number>);
    private ql;
    se: string;
    sm: string;
    sg: string;
    so: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    hy(a: any, b: string): any;
    sq: string;
    protected get qo(): IFastItemColumn$1<number>;
    protected set qo(a: IFastItemColumn$1<number>);
    private qn;
    qv: boolean;
    qu: boolean;
    rq: number;
    rp: number;
    to: Color;
    tn: Color;
    r2: number;
    private s5;
    protected l7(a: any, b: string, c: any, d: any): void;
    private sz;
    qt(a: any): boolean;
    qs(a: any): boolean;
    private sv;
    private rw;
    private qp;
    private rb;
    private ra;
    private q9;
    private q8;
    private q7;
    private q6;
    private q5;
    private q4;
    private get rf();
    private get re();
    private get rd();
    private get rc();
    private qd;
    private qi;
    private qj;
    private qe;
    private qg;
    private qr;
    fb(a: Rect, b: Rect, c: SeriesView): boolean;
    private rx;
    get r3(): number;
    set r3(a: number);
    mm(a: boolean): void;
    private sx;
    private rz;
    private rt;
    private rs;
    protected k3(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    private su;
    private s0;
    private sy;
    progressiveLoadStatusChanged: (sender: any, e: ProgressiveLoadStatusEventArgs) => void;
    private ss;
    private sw;
    private qw;
    private s7;
    private q2;
    private q1;
    private q3;
    private ri;
    private rg;
    private rh;
    private rj;
    private rl;
    private rn;
    private rm;
    private rk;
    private qy;
    private qz;
    private q0;
    private qx;
    private s2;
    eo(a: any): boolean;
    private s4;
    private r0;
    private r1;
    private ro;
    private s3;
    private s1;
    private rv;
    private ru;
    private qa;
    private ry;
    private st;
    protected bx(): SeriesView;
    l2(a: SeriesView): void;
    protected qc: HighDensityScatterSeriesView;
    ap(a: Axis): AxisRange;
    private qq;
    protected m8(a: Rect, b: Rect): void;
    protected m9(a: Rect, b: Rect): void;
    private _itemIndexes;
    private qb;
    private p8;
    hv(a: Point): any;
    private r4;
    s6(a: number[], b: number, c: number): void;
    protected get_e5(): boolean;
    protected set_e5(a: boolean): void;
    k0(a: boolean, b: SeriesView): void;
    mn(a: Rect, b: RenderSurface): void;
    private qk;
    mk(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    kx(): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class HighDensityScatterSeriesView extends SeriesView {
    static $t: Type;
    constructor(a: HighDensityScatterSeries);
    as(): void;
    ca(): void;
    protected bz: HighDensityScatterSeries;
    private bx;
    private b5;
    private b4;
    private b2;
    private b3;
    private b0;
    b6(): void;
    by(): number[];
    b9(): void;
    b8(a: () => void): void;
    protected a6(a: RenderingContext, b: boolean): void;
    b1(a: Color, b: Color): boolean;
    b7(): void;
    al(a: any): void;
}
