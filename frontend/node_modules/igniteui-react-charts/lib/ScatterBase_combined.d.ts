import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { Axis } from "./Axis";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "./HighlightingInfo";
import { ScatterFrame } from "./ScatterFrame";
import { SeriesView } from "./SeriesView";
import { Point, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { IErrorBarCalculator } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ScatterBase extends MarkerSeries implements ISupportsErrorBars, ITrendLineSeries {
    static $t: Type;
    protected bx(): SeriesView;
    kx(): void;
    l2(a: SeriesView): void;
    r2: ScatterBaseView;
    protected get_ed(): boolean;
    ag(): Axis[];
    hy(a: any, b: string): any;
    c1(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    protected bp(): SeriesHitTestMode;
    p1(a: Point): Rect;
    ex(a: Point, b: boolean): boolean;
    constructor();
    r1: ScatterAxisInfoCache;
    xAxis: NumericXAxis;
    yAxis: NumericYAxis;
    ti: string;
    get sh(): IFastItemColumn$1<number>;
    set sh(a: IFastItemColumn$1<number>);
    private sf;
    tq: string;
    get si(): IFastItemColumn$1<number>;
    set si(a: IFastItemColumn$1<number>);
    private sg;
    te: string;
    tm: string;
    tg: string;
    to: string;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get u1(): Brush;
    set u1(a: Brush);
    static readonly ue: DependencyProperty;
    trendLineThickness: number;
    u3: PenLineCap;
    u2: DoubleCollection;
    trendLinePeriod: number;
    rt: CollisionAvoidanceType;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    s3: number;
    s2: number;
    sd: ScatterItemSearchMode;
    s1: number;
    li(): void;
    r3: ScatterErrorBarSettings;
    protected l7(a: any, b: string, c: any, d: any): void;
    protected ss(): boolean;
    protected sr(): boolean;
    sm(a: any): boolean;
    sl(a: any): boolean;
    private ud;
    private u4;
    private u5;
    private ts;
    protected sq(a: string, b: FastItemsSourceEventAction): boolean;
    protected k3(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    t4(a: ScatterFrame): void;
    t5(a: ScatterFrame, b: Clipper): void;
    ap(a: Axis): AxisRange;
    hv(a: Point): any;
    private sa;
    get sb(): ScatterItemSearchMode;
    set sb(a: ScatterItemSearchMode);
    protected sc(): ScatterItemSearchMode;
    hf(a: Point): number;
    f7(a: Point): number;
    protected sx(a: Point): number;
    private rm;
    private rn;
    protected sw(a: Point): number;
    private tv;
    protected get_sp(): boolean;
    protected get sp(): boolean;
    private s0;
    protected sz(a: Point): number;
    protected sy(a: Point): number;
    pq(a: Point, b: boolean, c: boolean): Point;
    eo(a: any): boolean;
    protected m8(a: Rect, b: Rect): void;
    protected m9(a: Rect, b: Rect): void;
    r7: ScatterFrame;
    r9: ScatterFrame;
    r5: ScatterFrame;
    r6(): ScatterFrame;
    tt(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    t1(a: ScatterFrame, b: ScatterBaseView): void;
    k0(a: boolean, b: SeriesView): void;
    so: boolean;
    sn: boolean;
    protected sk: boolean;
    protected sj: boolean;
    protected get_dy(): boolean;
    private rx;
    private ry;
    protected rv(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rw(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    p5(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    protected ru(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningScatterStyle: (sender: any, args: AssigningScatterStyleEventArgs) => void;
    assigningScatterMarkerStyle: (sender: any, args: AssigningScatterMarkerStyleEventArgs) => void;
    protected su(): boolean;
    protected st(): boolean;
    uc(a: ScatterFrame, b: ScatterBaseView): void;
    rp(a: number, b: number): any[];
    protected rq(a: number, b: number): any[];
    protected se: ScatterSeriesRenderManager;
    tu(a: ScatterBaseView, b: ScatterFrame): void;
    protected tx(a: number, b: number, c: boolean): void;
    protected tw(a: number, b: number, c: boolean): void;
    protected t7(a: AssigningScatterStyleEventArgs): void;
    protected t6(a: AssigningScatterMarkerStyleEventArgs): void;
    tz(a: ScatterFrame, b: ScatterBaseView): void;
    t2(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    t0(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    ty(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: any, e: number, f: number, g: boolean): {
        p4?: number;
        p5?: number;
    };
    t3(a: ErrorBarsHelper, b: IErrorBarCalculator, c: number, d: number, e: number, f: boolean): {
        p2?: number;
        p3?: number;
        p4?: number;
    };
    t9(a: ScatterFrame, b: ScatterBaseView): void;
    private ua;
    private ub;
    fb(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    mm(a: boolean): void;
    protected mz(): void;
    r8: ScatterFrame;
    mn(a: Rect, b: RenderSurface): void;
    private r4;
    mk(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    t8(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    ro(a: ScatterBaseView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    sv(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    protected la(a: any): void;
    ge(): number;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    au: AssigningScatterMarkerStyleEventArgs;
    av: AssigningScatterStyleEventArgs;
    aw(a: ScatterBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ax(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ay(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class ScatterBaseView extends MarkerSeriesView {
    static $t: Type;
    cv: MarkerManagerBase;
    protected ct: Point[];
    protected cw: ScatterBase;
    protected c1: List$1<number>;
    constructor(a: ScatterBase);
    private dc;
    private dd;
    cx: ScatterTrendLineManager;
    as(): void;
    private db;
    de(a: Marker): Size;
    protected cu(): MarkerManagerBase;
    protected c9(a: IDictionary$2<any, OwnedPoint>): void;
    c0(): List$1<Marker>;
    cs(): Point[];
    protected cr(): Point[];
    protected cz(): List$1<number>;
    c2(): void;
    c7(a: PathGeometry): void;
    c3(): void;
    c8(a: PathGeometry): void;
    da(): void;
    cy: HashPool$2<any, Marker>;
    cf(a: (arg1: Marker) => void): void;
    c5(a: (arg1: Marker) => void): void;
    c6(): void;
    protected a5(a: RenderingContext, b: boolean): void;
    c4(a: boolean): void;
    getDefaultTooltipTemplate(): string;
}
