import { FinancialOverlay } from "./FinancialOverlay";
import { List$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { Rect } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class PriceChannelOverlay extends FinancialOverlay {
    static $t: Type;
    constructor();
    ty: number;
    protected l7(a: any, b: string, c: any, d: any): void;
    fb(a: Rect, b: Rect, c: SeriesView): boolean;
    protected tr(): boolean;
    s7(a: CategoryFrame, b: FinancialSeriesView): void;
    k0(a: boolean, b: SeriesView): void;
    s9(a: CategoryFrame, b: FinancialSeriesView): void;
    tx: List$1<number>;
    tw: List$1<number>;
    protected bx(): SeriesView;
    l2(a: SeriesView): void;
    private tv;
    gl(a: Point, b: boolean, c: boolean): number;
    hj(a: Point, b: boolean): number;
    hl(a: Point, b: boolean): number;
    ge(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PriceChannelBucketCalculator extends FinancialBucketCalculator {
    static $t: Type;
    constructor(a: FinancialSeriesView);
    protected f: PriceChannelOverlayView;
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class PriceChannelOverlayView extends FinancialSeriesView {
    static $t: Type;
    private b8;
    private cd;
    private ce;
    get b7(): Polygon;
    get cb(): Polyline;
    get cc(): Polyline;
    b3: PriceChannelOverlay;
    constructor(a: PriceChannelOverlay);
    as(): void;
    protected by(): FinancialBucketCalculator;
    b4(): void;
    b5(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: (arg1: number) => number, e: (arg1: number) => number): void;
    private b6;
    private b9;
    private ca;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    al(a: any): void;
}
