import { HighlightingState } from "./HighlightingState";
import { IgrSeries } from "./igr-series";
import { HighlightingInfo as HighlightingInfo_internal } from "./HighlightingInfo";
/**
 * Contains contextual information about a highlighting.
*/
export declare class IgrHighlightingInfo {
    protected createImplementation(): HighlightingInfo_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    get i(): HighlightingInfo_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * The index of the first highlighted item.
    *
    * You can use `startIndex` to get or set the first highlighted item for the series.
    */
    get startIndex(): number;
    set startIndex(v: number);
    /**
     * The index of the last highlighted item.
    *
    * You can use the `endIndex` to get or set the last highlighted item for the series.
    */
    get endIndex(): number;
    set endIndex(v: number);
    /**
     * The state of the highlighting.
    *
    * You can use the `state` to get or set the transitioning state of the highlighting, between In, Out, or Static.
    */
    get state(): HighlightingState;
    set state(v: HighlightingState);
    /**
     * A number between 0 and 1 representing the progress of the highlighting.
    *
    * You can use the `progress` property to set a number between 0 and 1 representing the progress of the highlighting.
    */
    get progress(): number;
    set progress(v: number);
    /**
     * True if this HighlightingInfo represents a marker highlighting.
    *
    * You can set the `isMarker` to True if the HighlightingInfo represents a marker highlighting. Otherwise set to false.
    */
    get isMarker(): boolean;
    set isMarker(v: boolean);
    /**
     * True if this HighlightingInfo represents a full selection of the data.
    */
    get isFullRange(): boolean;
    set isFullRange(v: boolean);
    get isExclusive(): boolean;
    set isExclusive(v: boolean);
    /**
     * The series in context.
    *
    * You can use the `series` property to get the series in context.
    */
    get series(): IgrSeries;
    set series(v: IgrSeries);
    findByName(name: string): any;
}
