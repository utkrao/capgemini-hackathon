import { XYChart } from "./XYChart";
import { IEnumerable, Type } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { BrushCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { MarkerType } from "./MarkerType";
import { DataSeries } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected rq(): void;
    protected rs(a: Series, b: number): void;
    protected sd(a: string, b: any, c: any): void;
    private aev;
    get aex(): number;
    set aex(a: number);
    private ac0;
    get ac1(): (time: number) => number;
    set ac1(a: (time: number) => number);
    ae3(): string;
    protected rl(a: XamDataChart): void;
    protected rr(a: Series, b: number): void;
    private acq;
    private acu;
    protected q4(): void;
    protected aao(a: Axis): void;
    protected aam(a: Axis): void;
    protected get_by(): DomainType;
    get by(): DomainType;
    private ack;
    get acl(): CategoryChartType;
    set acl(a: CategoryChartType);
    private acm;
    get acn(): CategorySeriesMarkerCollisionAvoidance;
    set acn(a: CategorySeriesMarkerCollisionAvoidance);
    private ac4;
    get adf(): boolean;
    set adf(a: boolean);
    private ac5;
    get adg(): boolean;
    set adg(a: boolean);
    private aco;
    get acp(): CategoryTransitionInMode;
    set acp(a: CategoryTransitionInMode);
    private acy;
    get acz(): TransitionInSpeedType;
    set acz(a: TransitionInSpeedType);
    private ads;
    get aef(): number;
    set aef(a: number);
    private adv;
    get aei(): number;
    set aei(a: number);
    private adr;
    get aee(): number;
    set aee(a: number);
    private adu;
    get aeh(): number;
    set aeh(a: number);
    private adt;
    get aeg(): number;
    set aeg(a: number);
    private adw;
    get aej(): number;
    set aej(a: number);
    private ad2;
    get aer(): number;
    set aer(a: number);
    private acg;
    get ach(): AutoMarginsAndAngleUpdateMode;
    set ach(a: AutoMarginsAndAngleUpdateMode);
    private ac6;
    af7(): void;
    get adh(): boolean;
    set adh(a: boolean);
    protected static readonly afc: string;
    private ac7;
    get adi(): boolean;
    set adi(a: boolean);
    private adp;
    get ad6(): number;
    set ad6(a: number);
    private adq;
    get ad7(): number;
    set ad7(a: number);
    private adb;
    get adm(): boolean;
    set adm(a: boolean);
    private static readonly afh;
    private ac8;
    get adj(): boolean;
    set adj(a: boolean);
    private static readonly afv;
    private ada;
    get adl(): boolean;
    set adl(a: boolean);
    private aci;
    get acj(): AxisRangeBufferMode;
    set acj(a: AxisRangeBufferMode);
    private adc;
    get adn(): boolean;
    set adn(a: boolean);
    private aew;
    get aey(): number;
    set aey(a: number);
    private ad4;
    get aet(): number;
    set aet(a: number);
    private ad3;
    get aes(): number;
    set aes(a: number);
    private ad5;
    get aeu(): number;
    set aeu(a: number);
    get aed(): number;
    get aec(): number;
    ad9(): number;
    aeb(): number;
    ad8(): number;
    aea(): number;
    get aeq(): number;
    get aep(): number;
    private acc;
    get ace(): BrushCollection;
    set ace(a: BrushCollection);
    private acd;
    get acf(): BrushCollection;
    set acf(a: BrushCollection);
    private ac9;
    get adk(): boolean;
    set adk(a: boolean);
    private adx;
    get aek(): number;
    set aek(a: number);
    private ady;
    get ael(): number;
    set ael(a: number);
    private adz;
    get aem(): number;
    set aem(a: number);
    private ad0;
    get aen(): number;
    set aen(a: number);
    private ad1;
    get aeo(): number;
    set aeo(a: number);
    private ac2;
    get add(): boolean;
    set add(a: boolean);
    private ac3;
    get ade(): boolean;
    set ade(a: boolean);
    constructor();
    protected get_ge(): List$1<DataSeriesType>;
    protected get ge(): List$1<DataSeriesType>;
    private ado;
    protected gi(): IEnumerable;
    protected cl(a: Series): MarkerType;
    protected get_f2(): boolean;
    private af5;
    private af6;
    protected sw(): void;
    private _xAxis;
    private get xAxis();
    private set xAxis(value);
    private _yAxis;
    private get yAxis();
    private set yAxis(value);
    private act;
    private acs;
    protected a9(a: DataSeries): DataSeriesType;
    protected cv(a: DataSeries, b: DataSeriesType): Series;
    protected su(a: DataSeries): void;
    protected sx(): void;
    protected get_gd(): List$1<IDataSeriesAdapterRule>;
    protected get gd(): List$1<IDataSeriesAdapterRule>;
    protected q0(a: Series, b: number): void;
    private af3;
    private af4;
    protected vf(): Axis;
    protected vg(): Axis;
    private acw;
    private acx;
    protected ga(a: string, b: boolean): List$1<Series>;
    protected s1(a: Series, b: Series, c: DataSeries): void;
    protected fp(): boolean;
    protected sc(a: string, b: any, c: any): void;
}
