import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { Brush } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { Type, Point } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { SeriesVisibleRangeMode } from "./SeriesVisibleRangeMode";
import { Rect } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { CategoryFrame } from "./CategoryFrame";
import { CategorySeriesView } from "./CategorySeriesView";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class WaterfallSeries extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    protected get_el(): boolean;
    protected get_d3(): boolean;
    protected gw(): number;
    protected get_du(): boolean;
    protected bx(): SeriesView;
    l2(a: SeriesView): void;
    vb: WaterfallSeriesView;
    constructor();
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected get_d4(): boolean;
    mq(a: Brush, b: Brush): void;
    vm: Brush;
    pd(): Brush;
    pe(): Brush;
    vc: number;
    vd: number;
    b3(): SeriesVisibleRangeMode;
    protected get_c2(): boolean;
    protected l7(a: any, b: string, c: any, d: any): void;
    ex(a: Point, b: boolean): boolean;
    pz(a: Point): Rect;
    private vo;
    protected r3(): CategoryTransitionInMode;
    k0(a: boolean, b: SeriesView): void;
    protected get_tw(): number;
    gc(): number;
    tb(a: CategoryFrame, b: CategorySeriesView): void;
    vn: Brush;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class WaterfallSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    as(): void;
    protected da: WaterfallSeries;
    constructor(a: WaterfallSeries);
    dk(): Rectangle;
    protected dc: List$1<Rectangle>;
    dd(a: Rectangle): void;
    df(a: Rectangle): void;
    de(a: Rectangle): void;
    dg(a: Rectangle, b: number, c: number): void;
    protected ac(a: number): any;
    private dj;
    protected ab(a: number): any;
    protected a6(a: RenderingContext, b: boolean): void;
    db: Pool$1<Rectangle>;
    al(a: any): void;
    dh(a: number): Rect;
    di(a: Rectangle): Rect;
}
