import { MarkerSeries } from "./MarkerSeries";
import { Point, Type } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { HighlightingInfo } from "./HighlightingInfo";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Axis } from "./Axis";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { OwnedPoint } from "./OwnedPoint";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { AssigningPolarStyleEventArgs } from "./AssigningPolarStyleEventArgs";
import { AssigningPolarMarkerStyleEventArgs } from "./AssigningPolarMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class PolarBase extends MarkerSeries {
    static $t: Type;
    protected bx(): SeriesView;
    l2(a: SeriesView): void;
    r2: PolarBaseView;
    private r3;
    kx(): void;
    protected get_d7(): boolean;
    c1(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    constructor();
    private t1;
    private t3;
    private rp;
    r1: PolarAxisInfoCache;
    private u5;
    private u4;
    sf: SeriesRenderer$2<PolarFrame, PolarBaseView>;
    ti: string;
    tw: string;
    protected get sj(): IFastItemColumn$1<number>;
    protected set sj(a: IFastItemColumn$1<number>);
    private sh;
    protected get sk(): IFastItemColumn$1<number>;
    protected set sk(a: IFastItemColumn$1<number>);
    private si;
    ry: NumericAngleAxis;
    rz: NumericRadiusAxis;
    sy: boolean;
    s8: number;
    sg: TrendLineType;
    uz: Brush;
    get uy(): Brush;
    set uy(a: Brush);
    static readonly ub: DependencyProperty;
    s6: number;
    u1: PenLineCap;
    u0: DoubleCollection;
    s9: number;
    ta: number;
    sp: boolean;
    r7: PolarFrame;
    r9: PolarFrame;
    r5: PolarFrame;
    r6(): PolarFrame;
    r0: PolarAxes;
    li(): void;
    protected k3(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected m8(a: Rect, b: Rect): void;
    protected m9(a: Rect, b: Rect): void;
    fb(a: Rect, b: Rect, c: SeriesView): boolean;
    mm(a: boolean): void;
    private u3;
    ap(a: Axis): AxisRange;
    eo(a: any): boolean;
    hv(a: Point): any;
    hf(a: Point): number;
    f7(a: Point): number;
    protected s2(a: Point): number;
    protected s1(a: Point): number;
    private sq;
    private sz;
    private s5;
    protected s4(a: Point): number;
    protected s3(a: Point): number;
    pq(a: Point, b: boolean, c: boolean): Point;
    ag(): Axis[];
    hy(a: any, b: string): any;
    protected l7(a: any, b: string, c: any, d: any): void;
    private sb;
    get sc(): ScatterItemSearchMode;
    set sc(a: ScatterItemSearchMode);
    protected sd(): ScatterItemSearchMode;
    protected get_st(): boolean;
    protected get st(): boolean;
    protected sv(): boolean;
    protected su(): boolean;
    se: ScatterItemSearchMode;
    s7: number;
    so(a: any): boolean;
    sn(a: any): boolean;
    k0(a: boolean, b: SeriesView): void;
    private rq;
    t0(a: PolarFrame, b: number, c: Rect, d: Rect): void;
    t6(a: PolarFrame, b: PolarBaseView): void;
    ss: boolean;
    sr: boolean;
    protected sm: boolean;
    protected sl: boolean;
    protected get_dy(): boolean;
    private rw;
    private rx;
    protected ru(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rv(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rt(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    aw(a: any, b: Point, c: boolean): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningPolarStyle: (sender: any, args: AssigningPolarStyleEventArgs) => void;
    assigningPolarMarkerStyle: (sender: any, args: AssigningPolarMarkerStyleEventArgs) => void;
    protected sx(): boolean;
    protected sw(): boolean;
    ua(a: PolarFrame, b: PolarBaseView): void;
    rn(a: number, b: number): any[];
    protected ro(a: number, b: number): any[];
    protected sa: PolarSeriesRenderManager;
    t2(a: PolarBaseView, b: PolarFrame): void;
    protected t5(a: number, b: number, c: boolean): void;
    protected t4(a: number, b: number, c: boolean): void;
    protected t8(a: AssigningPolarStyleEventArgs): void;
    protected t7(a: AssigningPolarMarkerStyleEventArgs): void;
    private tz;
    protected mz(): void;
    r8: PolarFrame;
    mn(a: Rect, b: RenderSurface): void;
    private r4;
    mk(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    t9(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    rm(a: HashPool$2<any, Marker>, b: Rect, c: Rect): Point[];
    s0(a: HashPool$2<any, Marker>): List$1<number>;
    u2(a: number): Point;
    protected la(a: any): void;
    ts: string;
    te: string;
    tu: string;
    tg: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PolarSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    au: AssigningPolarMarkerStyleEventArgs;
    av: AssigningPolarStyleEventArgs;
    aw(a: PolarBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ax(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ay(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class PolarBaseView extends MarkerSeriesView {
    static $t: Type;
    protected cu: PolarBase;
    ct: MarkerManagerBase;
    constructor(a: PolarBase);
    cv: PolarTrendLineManager;
    as(): void;
    cz(a: (arg1: Marker) => void): void;
    protected cs(): MarkerManagerBase;
    protected c0(a: IDictionary$2<any, OwnedPoint>): void;
    protected cr(): Point[];
    protected cx(): List$1<number>;
    cy(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c1(): void;
    cw: HashPool$2<any, Marker>;
    cf(a: (arg1: Marker) => void): void;
    protected a5(a: RenderingContext, b: boolean): void;
    protected c2(): Rect;
    getDefaultTooltipTemplate(): string;
}
