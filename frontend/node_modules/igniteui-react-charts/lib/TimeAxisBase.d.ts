import { CategoryAxisBase } from "./CategoryAxisBase";
import { ISortingAxis } from "./ISortingAxis";
import { IDateTimeAxis } from "./IDateTimeAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IList$1, Type } from "igniteui-react-core";
import { AxisOrientation } from "./AxisOrientation";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { SortedListView$1 } from "./SortedListView$1";
import { Series } from "./Series";
import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
/**
 * @hidden
 */
export declare abstract class TimeAxisBase extends CategoryAxisBase implements ISortingAxis, IDateTimeAxis {
    static $t: Type;
    constructor();
    ei(a: number, b: ScalerParams): number;
    fw(a: any, b: string): any;
    private mw;
    private mx;
    el(a: number, b: ScalerParams): number;
    getUnscaledValue3(a: number, b: Rect, c: Rect, d: CategoryMode): number;
    i$h(): void;
    nc(): void;
    protected nh(): void;
    dateTimeMemberPath: string;
    get mg(): IFastItemColumn$1<Date>;
    set mg(a: IFastItemColumn$1<Date>);
    private mf;
    private mo;
    protected get mp(): List$1<number>;
    protected set mp(a: List$1<number>);
    get i$b(): List$1<number>;
    protected nd(): void;
    i$e(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected mz(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected my(a: Date): number;
    i$g(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected m2(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected m1(a: Date): number;
    i$d(a: number): number;
    i$c(a: number): number;
    protected m0(a: Date, b: SortedListView$1<Date>): number;
    i$f(a: number): number;
    i$i(): void;
    ml: boolean;
    private mj;
    protected get_mk(): boolean;
    protected set_mk(a: boolean): void;
    get mk(): boolean;
    set mk(a: boolean);
    hx(a: string): void;
    h0(a: any): void;
    hz(a: any): void;
    c2(): boolean;
    protected mn(): boolean;
    protected mm(): boolean;
    private mr;
    get actualMinimumValue(): Date;
    set actualMinimumValue(a: Date);
    private mq;
    f1(): any;
    get actualMaximumValue(): Date;
    set actualMaximumValue(a: Date);
    f0(): any;
    minimumValue: Date;
    maximumValue: Date;
    private ne;
    protected hv(a: any, b: string, c: any, d: any): void;
    private nb;
    protected mh(a: string): IFastItemColumn$1<Date>;
    static mi(a: string, b: CategoryAxisBase): IFastItemColumn$1<Date>;
    au(): AxisLabelPanelBase;
    protected get_a1(): AxisOrientation;
    get a1(): AxisOrientation;
    protected h8(a: boolean): void;
    protected get_cd(): boolean;
    protected startCursor(): void;
    protected resetCursor(): void;
    StartTimeCursor(): void;
    ResetTimeCursor(): void;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    k3(a: Rect, b: Rect, c: Rect): number;
    protected get_cm(): boolean;
    protected na(a: Date, b: Date): number;
    preferredCategoryMode(a: Series): CategoryMode;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
    get i$a(): boolean;
    static $$p: string[];
}
