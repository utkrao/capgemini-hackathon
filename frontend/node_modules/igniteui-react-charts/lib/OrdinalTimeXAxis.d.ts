import { CategoryXAxis } from "./CategoryXAxis";
import { ITimeRangeSelectorAxis } from "./ITimeRangeSelectorAxis";
import { IOrdinalAxis } from "./IOrdinalAxis";
import { TimeAxisLabellingMode } from "./TimeAxisLabellingMode";
import { TimeAxisLabelFormatCollection } from "./TimeAxisLabelFormatCollection";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { CategoryMode } from "./CategoryMode";
import { IList$1, EventArgs, Type } from "igniteui-react-core";
import { IGetItemAtIndex } from "igniteui-react-core";
import { FastItemsSourceEventArgs } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class OrdinalTimeXAxis extends CategoryXAxis implements ITimeRangeSelectorAxis, IOrdinalAxis {
    static $t: Type;
    ek(a: number, b: Rect, c: Rect): number;
    ej(a: number, b: ScalerParams, c: CategoryMode): number;
    ei(a: number, b: ScalerParams): number;
    private n1;
    hl(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    hm(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    en(a: number, b: Rect, c: Rect): number;
    getUnscaledValue3(a: number, b: Rect, c: Rect, d: CategoryMode): number;
    el(a: number, b: ScalerParams): number;
    private n2;
    em(a: number, b: ScalerParams, c: CategoryMode): number;
    hn(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    constructor();
    protected hv(a: any, b: string, c: any, d: any): void;
    private no;
    get actualMinimumValue(): Date;
    set actualMinimumValue(a: Date);
    private nn;
    get actualMaximumValue(): Date;
    set actualMaximumValue(a: Date);
    private nu;
    get visibleMinimum(): Date;
    set visibleMinimum(a: Date);
    private nt;
    get visibleMaximum(): Date;
    set visibleMaximum(a: Date);
    private nq;
    get ny(): Date;
    set ny(a: Date);
    private np;
    get nx(): Date;
    set nx(a: Date);
    private og;
    private oh;
    private n4;
    protected h8(a: boolean): void;
    private n3;
    get dateTimeMemberPath(): string;
    set dateTimeMemberPath(a: string);
    private nj;
    get nk(): TimeAxisLabellingMode;
    set nk(a: TimeAxisLabellingMode);
    protected get_cj(): boolean;
    private nl;
    private get nm();
    private set nm(value);
    protected ip(a: Rect, b: Rect): void;
    getWindowRectForSelection(a: Date, b: Date): Rect;
    private nh;
    get ni(): TimeAxisLabelFormatCollection;
    private of;
    hx(a: string): void;
    fy(a: any): any;
    gc(a: number): string;
    getDateTime(a: number): Date;
    private get oe();
    private get ob();
    protected mh(): IGetItemAtIndex;
    protected io(a: Rect, b: Rect): void;
    protected mo(a: number, b: ScalerParams): number;
    protected mn(a: number, b: number, c: boolean, d: ScalerParams): number;
    private od;
    private oc;
    itemLabelFormat(): string;
    private ns;
    get minimumValue(): Date;
    set minimumValue(a: Date);
    private nr;
    get maximumValue(): Date;
    set maximumValue(a: Date);
    c2(): boolean;
    visibleRangeChanged: (sender: any, e: EventArgs) => void;
    protected l1(a: FastItemsSourceEventArgs): void;
    get isVertical(): boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$a(): boolean;
}
