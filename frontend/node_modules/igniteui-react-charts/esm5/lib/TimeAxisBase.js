/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { FastItemDateTimeColumn } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ISortingAxis_$type } from "./ISortingAxis";
import { IDateTimeAxis_$type } from "./IDateTimeAxis";
import { DependencyProperty } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { typeCast, Number_$type, Date_$type, fromEnum, runOn, delegateRemove, delegateCombine, markType, markDep, TypeRegistrar } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { NumericScaler } from "./NumericScaler";
import { SeriesViewer } from "./SeriesViewer";
import { SortedListView$1 } from "./SortedListView$1";
import { ArrayExtension } from "igniteui-react-core";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { HorizontalAxisLabelPanel } from "./HorizontalAxisLabelPanel";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_ } from "igniteui-react-core";
import { dateMinValue, dateSubtract, dateAdd, dateMaxValue, dateFromTicks } from "igniteui-react-core";
/**
 * @hidden
 */
var TimeAxisBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TimeAxisBase, _super);
    function TimeAxisBase() {
        var _this = _super.call(this) || this;
        _this.mf = null;
        _this.mo = null;
        _this.mj = false;
        _this.mr = dateMaxValue();
        _this.mq = dateMinValue();
        FastItemDateTimeColumn.o();
        return _this;
    }
    TimeAxisBase.prototype.ei = function (a, b) {
        if (!b.c.isEmpty) {
            var c = this.mw(a, NumericScaler.ac, b.c, Rect.empty);
            c = (c - b.d.left) / b.d.width;
            c = b.d.left + b.d.width * (c - b.e.left) / b.e.width;
            return c;
        }
        return this.mw(a, b.e, b.d, b.c);
    };
    TimeAxisBase.prototype.fw = function (a, b) {
        var c = this.gr(b);
        if (c == TimeAxisBase.$$p[0]) {
            return this.fx(a, b, this.dateTimeMemberPath);
        }
        return _super.prototype.fw.call(this, a, b);
    };
    TimeAxisBase.prototype.mw = function (a, b, c, d) {
        var e;
        if (+(this.actualMaximumValue) == +(this.actualMinimumValue)) {
            e = -1;
        }
        else {
            e = (a - this.actualMinimumValue.getTime()) / (this.actualMaximumValue.getTime() - this.actualMinimumValue.getTime());
        }
        var f = 0;
        if (this.categoryMode == 2) {
            f = this.getGroupCenter(0, b, c, d);
        }
        if (this.cg) {
            e = 1 - e;
            f = -f;
        }
        return c.left + c.width * (e - b.left) / b.width - f;
    };
    TimeAxisBase.prototype.mx = function (a, b, c) {
        var d;
        if (+(this.actualMaximumValue) == +(this.actualMinimumValue)) {
            d = -1;
        }
        else {
            d = (a - this.actualMinimumValue.getTime()) / (this.actualMaximumValue.getTime() - this.actualMinimumValue.getTime());
        }
        var e = 0;
        if (this.cg) {
            d = 1 - d;
            e = -e;
        }
        return c.left + c.width * (d - b.left) / b.width - e;
    };
    TimeAxisBase.prototype.el = function (a, b) {
        if (!b.c.isEmpty) {
            var c = b.d.left;
            var d = b.d.width;
            if (this.categoryMode != 0) {
                var e = this.getCategorySize(b.e, b.d, b.c);
                c += e / 2;
                d -= e;
            }
            var f = b.e.left + b.e.width * (a - c) / b.d.width;
            f = (f * b.d.width) + b.d.left;
            f = this.getUnscaledValue3(f, NumericScaler.ac, b.c, this.categoryMode);
            return f;
        }
        return this.getUnscaledValue3(a, b.e, b.d, this.categoryMode);
    };
    TimeAxisBase.prototype.getUnscaledValue3 = function (a, b, c, d) {
        var e = b.left + b.width * (a - c.left) / c.width;
        if (this.cg) {
            e = 1 - e;
        }
        return truncate(Math.floor(this.actualMinimumValue.getTime() + e * (this.actualMaximumValue.getTime() - this.actualMinimumValue.getTime())));
    };
    TimeAxisBase.prototype.i$h = function () {
        this.nc();
    };
    TimeAxisBase.prototype.nc = function () {
        var a = this.bh != null ? this.bh.s9 : Rect.empty;
        var b = !a.isEmpty ? this.kc : Rect.empty;
        var c = (new Date());
        var d = (new Date());
        var e = false;
        if (!a.isEmpty && !b.isEmpty && this.mg != null) {
            var f = typeCast(FastItemDateTimeColumn.$, this.mg);
            if (f != null) {
                if (this.mp == null) {
                    this.nd();
                }
            }
            else {
                this.mp = null;
            }
            if (this.mg.count > 0) {
                e = true;
                var g = this.mp == null ? 0 : this.mp._inner[0];
                var h = this.mp == null ? this.mg.count - 1 : this.mp._inner[this.mg.count - 1];
                c = this.mg.item(g);
                d = this.mg.item(h);
                this.mk = false;
                if (this.categoryMode == 2) {
                    var i = this.na(c, d);
                    if (+c != +(dateMinValue())) {
                        c = dateSubtract(+c, +i);
                    }
                    d = dateAdd(+d, +i);
                }
            }
        }
        if (this.mn()) {
            e = true;
            c = this.minimumValue;
        }
        if (this.mm()) {
            e = true;
            d = this.maximumValue;
        }
        var j = +(this.actualMinimumValue) != +c || +(this.actualMaximumValue) != +d;
        if (e && j) {
            var k = this.actualMinimumValue;
            var l = this.actualMaximumValue;
            this.actualMinimumValue = c;
            this.actualMaximumValue = d;
            this.nh();
        }
    };
    TimeAxisBase.prototype.nh = function () {
    };
    Object.defineProperty(TimeAxisBase.prototype, "mg", {
        get: function () {
            return this.mf;
        },
        set: function (a) {
            if (this.mf != a) {
                var b = this.mf;
                this.mf = a;
                this.h1("DateTimeColumn", b, this.mf);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TimeAxisBase.prototype, "mp", {
        get: function () {
            return this.mo;
        },
        set: function (a) {
            this.mo = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TimeAxisBase.prototype, "i$b", {
        get: function () {
            if (this.mp == null) {
                var a = typeCast(FastItemDateTimeColumn.$, this.mg);
                if (a != null) {
                    this.nd();
                }
                else {
                    this.mp = null;
                }
            }
            return this.mp;
        },
        enumerable: false,
        configurable: true
    });
    TimeAxisBase.prototype.nd = function () {
        if (this.ml) {
            this.mp = new List$1(Number_$type, 0);
            var a = this.mp;
            var b = this.mg.count;
            for (var c = 0; c < b; c++) {
                a.add(c);
            }
        }
        else {
            var d = typeCast(FastItemDateTimeColumn.$, this.mg);
            this.mp = d.h();
        }
    };
    TimeAxisBase.prototype.i$e = function (a, b, c, d) {
        return this.mz(a, b, c, d);
    };
    TimeAxisBase.prototype.mz = function (a, b, c, d) {
        if (b.isEmpty) {
            return -1;
        }
        var e = d;
        var f = new ScalerParams(0, a, b, this.cg, c);
        var g, h;
        if (this.cg) {
            h = this.el(e.left, f);
            g = this.el(e.right, f);
        }
        else {
            g = this.el(e.left, f);
            h = this.el(e.right, f);
        }
        var i = Math.max(dateMinValue().getTime(), Math.min(dateMaxValue().getTime(), truncate(g)));
        return this.my(dateFromTicks(i));
    };
    TimeAxisBase.prototype.my = function (a) {
        if (this.mg == null || this.mp.count != this.mg.count) {
            return -1;
        }
        var b = new SortedListView$1(Date_$type, this.mg, this.mp);
        var c = this.m0(a, b);
        if (c >= 0 && c < this.mp.count) {
            var d = this.mg.item(this.mp._inner[c]);
            if (d > a) {
                c--;
                if (c < 0) {
                    c = 0;
                }
            }
            return c;
        }
        return this.mp.count - 1;
    };
    TimeAxisBase.prototype.i$g = function (a, b, c, d) {
        return this.m2(a, b, c, d);
    };
    TimeAxisBase.prototype.m2 = function (a, b, c, d) {
        if (b.isEmpty) {
            return -1;
        }
        var e = d;
        var f = new ScalerParams(0, a, b, this.cg, c);
        var g, h;
        if (this.cg) {
            h = this.el(e.left, f);
            g = this.el(e.right, f);
        }
        else {
            g = this.el(e.left, f);
            h = this.el(e.right, f);
        }
        var i = Math.max(dateMinValue().getTime(), Math.min(dateMaxValue().getTime(), truncate(h)));
        return this.m1(dateFromTicks(i));
    };
    TimeAxisBase.prototype.m1 = function (a) {
        if (this.mg == null || this.mp.count != this.mg.count) {
            return -1;
        }
        var b = new SortedListView$1(Date_$type, this.mg, this.mp);
        var c = this.m0(a, b);
        if (c >= this.mp.count) {
            c = this.mp.count - 1;
        }
        if (c >= 0 && c < this.mp.count) {
            var d = this.mg.item(this.mp._inner[c]);
            if (d < a) {
                c++;
                if (c > this.mp.count - 1) {
                    c = this.mp.count - 1;
                }
            }
            return c;
        }
        return 0;
    };
    TimeAxisBase.prototype.i$d = function (a) {
        if (this.mg == null) {
            return NaN;
        }
        var b = this.mf.item(a);
        var c = b.getTime();
        var d = c;
        return d;
    };
    TimeAxisBase.prototype.i$c = function (a) {
        var b = this;
        if (b.i$b == null) {
            return -1;
        }
        var c = new SortedListView$1(Date_$type, this.mg, b.i$b);
        var ticks_ = a;
        var d = (new Date(ticks_));
        var e = this.m0(d, c);
        if (e >= 0 && e < b.i$b.count && e - 1 >= 0 && e - 1 < b.i$b.count) {
            var diff1_ = d.getTime() - c.item(e - 1).getTime();
            var diff2_ = c.item(e).getTime() - d.getTime();
            var f = e - 1;
            var g = e;
            if (f < 0 && g >= 0) {
                return g;
            }
            if (g > b.i$b.count - 1 && f < b.i$b.count) {
                return f;
            }
            if (f < 0 && g < 0) {
                return -1;
            }
            if (f > b.i$b.count - 1 && g > b.i$b.count - 1) {
                return -1;
            }
            var h = diff1_ / (diff1_ + diff2_);
            if (isNaN_(h)) {
                h = 0;
            }
            return f + h;
        }
        if (e >= 0 && e < b.i$b.count) {
            return e;
        }
        var i = this.j7();
        if (e == b.i$b.count && this.bh != null && this.ei(a, new ScalerParams(0, this.bh.s9, this.kc, this.cg, i)) < (this.kc.right + 2)) {
            return e - 1;
        }
        if (e == -1 && this.bh != null && Math.abs(this.ei(a, new ScalerParams(0, this.bh.s9, this.kc, this.cg, i)) - this.kc.left) < 2) {
            return 0;
        }
        return -1;
    };
    TimeAxisBase.prototype.m0 = function (a, b) {
        var c = this;
        if (this.mg == null || c.i$b == null) {
            return -1;
        }
        var d = -1;
        var e = ArrayExtension.binarySearch$11(Date_$type, b, function (f) {
            if (a < f) {
                return -1;
            }
            if (a > f) {
                return 1;
            }
            return 0;
        });
        if (e >= 0) {
            d = e;
        }
        else {
            d = ~e;
        }
        while (d >= 0 && d < b.count && d - 1 >= 0 && +(b.item(d)) == +(b.item(d - 1))) {
            d--;
        }
        return d;
    };
    TimeAxisBase.prototype.i$f = function (a) {
        var b = this;
        if (b.i$b == null || this.mg == null || b.i$b.count != this.mg.count) {
            return -1;
        }
        var c = new SortedListView$1(Date_$type, this.mg, b.i$b);
        var ticks_ = a;
        var d = (new Date(ticks_));
        var e = this.m0(d, c);
        var f = this.j7();
        if (e >= 0 && e < b.i$b.count && e - 1 >= 0 && e - 1 < b.i$b.count) {
            var g = +d - +(c.item(e - 1));
            var h = +(c.item(e)) - +d;
            if (g < h) {
                e = e - 1;
            }
        }
        if (e >= 0 && e < b.i$b.count) {
            return b.i$b._inner[e];
        }
        if (e == b.i$b.count && this.bh != null && this.ei(a, new ScalerParams(0, this.bh.s9, this.kc, this.cg, f)) < (this.kc.right + 2)) {
            return e - 1;
        }
        if (e == -1 && this.bh != null && Math.abs(this.ei(a, new ScalerParams(0, this.bh.s9, this.kc, this.cg, f)) - this.kc.left) < 2) {
            return 0;
        }
        return -1;
    };
    TimeAxisBase.prototype.i$i = function () {
        this.mp = null;
        this.h6();
    };
    TimeAxisBase.prototype.get_mk = function () {
        return this.mj;
    };
    TimeAxisBase.prototype.set_mk = function (a) {
        this.mj = a;
    };
    Object.defineProperty(TimeAxisBase.prototype, "mk", {
        get: function () {
            return this.get_mk();
        },
        set: function (a) {
            this.set_mk(a);
        },
        enumerable: false,
        configurable: true
    });
    TimeAxisBase.prototype.hx = function (a) {
        _super.prototype.hx.call(this, a);
        this.dateTimeMemberPath = a;
    };
    TimeAxisBase.prototype.h0 = function (a) {
        _super.prototype.h0.call(this, a);
        this.minimumValue = a;
    };
    TimeAxisBase.prototype.hz = function (a) {
        _super.prototype.h0.call(this, a);
        this.maximumValue = a;
    };
    TimeAxisBase.prototype.c2 = function () {
        if (this.cp && this.c3) {
            this.bb = this.ba();
        }
        var a = this.actualMinimumValue.getTime();
        var b = this.actualMaximumValue.getTime();
        this.nc();
        var c = !this.mn() ? this.actualMinimumValue.getTime() : this.minimumValue.getTime();
        var d = !this.mm() ? this.actualMaximumValue.getTime() : this.maximumValue.getTime();
        var e = new AxisRangeChangedEventArgs(0, a, c, b, d);
        this.h2(e);
        return true;
    };
    TimeAxisBase.prototype.mn = function () {
        if (+(this.minimumValue) == +(dateMinValue())) {
            return false;
        }
        return (this.minimumValue != null);
    };
    TimeAxisBase.prototype.mm = function () {
        if (+(this.maximumValue) == +(dateMaxValue())) {
            return false;
        }
        return (this.maximumValue != null);
    };
    Object.defineProperty(TimeAxisBase.prototype, "actualMinimumValue", {
        get: function () {
            return this.mr;
        },
        set: function (a) {
            var b = +(this.mr) != +a;
            if (b) {
                var c = this.mr;
                this.mr = a;
                this.h1("ActualMinimumValue", c, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    TimeAxisBase.prototype.f1 = function () {
        return this.actualMinimumValue;
    };
    Object.defineProperty(TimeAxisBase.prototype, "actualMaximumValue", {
        get: function () {
            return this.mq;
        },
        set: function (a) {
            var b = +(this.mq) != +a;
            if (b) {
                var c = this.mq;
                this.mq = a;
                this.h1("ActualMaximumValue", c, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    TimeAxisBase.prototype.f0 = function () {
        return this.maximumValue;
    };
    TimeAxisBase.prototype.ne = function (a) {
        var e_1, _a;
        this.h8(a);
        if (this.kq == null) {
            return;
        }
        try {
            for (var _b = __values(fromEnum(this.da())), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                b.ml(a);
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    TimeAxisBase.prototype.hv = function (a, b, c, d) {
        _super.prototype.hv.call(this, a, b, c, d);
        switch (b) {
            case "FastItemsSource":
                var e = typeCast(IFastItemsSource_$type, c);
                if (e != null) {
                    e.deregisterColumn(this.mg);
                    this.mg = null;
                    e.event = delegateRemove(e.event, runOn(this, this.nb));
                }
                var f = typeCast(IFastItemsSource_$type, d);
                if (f != null) {
                    this.mp = null;
                    this.mg = this.mh(this.dateTimeMemberPath);
                    f.event = delegateCombine(f.event, runOn(this, this.nb));
                }
                this.ne(false);
                break;
            case TimeAxisBase.$$p[0]:
                if (this.kq != null) {
                    this.kq.deregisterColumn(this.mg);
                    this.mg = this.mh(this.dateTimeMemberPath);
                    this.mp = null;
                }
                break;
            case TimeAxisBase.$$p[3]:
                this.c0();
                this.ne(false);
                break;
            case TimeAxisBase.$$p[2]:
                this.c0();
                this.ne(false);
                break;
            case "DateTimeColumn":
                this.nc();
                break;
        }
    };
    TimeAxisBase.prototype.nb = function (a, b) {
        this.mp = null;
    };
    TimeAxisBase.prototype.mh = function (a) {
        return TimeAxisBase.mi(a, this);
    };
    TimeAxisBase.mi = function (a, b) {
        if (a == null) {
            return b.kq.registerColumnDateTime(null, null, false);
        }
        var c = null;
        var d = SeriesViewer.cg(a, b.coercionMethods);
        c = d.a;
        return b.kq.registerColumnDateTime(a, c, b.expectFunctions);
    };
    TimeAxisBase.prototype.au = function () {
        if (this.c5) {
            return (TypeRegistrar.create('HorizontalSmartAxisLabelPanel'));
        }
        else {
            return new HorizontalAxisLabelPanel();
        }
    };
    TimeAxisBase.prototype.get_a1 = function () {
        return 0;
    };
    Object.defineProperty(TimeAxisBase.prototype, "a1", {
        get: function () {
            return this.get_a1();
        },
        enumerable: false,
        configurable: true
    });
    TimeAxisBase.prototype.h8 = function (a) {
        _super.prototype.h8.call(this, a);
        var b = this.a4.a1();
        var c = this.a4.a4();
        var d = this.a4.a2();
        var e = this.a4.a3();
        var f = this.a4.e();
        var g = this.a4.f();
        var h = this.a4.g();
        this.ik();
        this.hh(b);
        this.hh(c);
        this.hh(d);
        this.hh(e);
        this.db.clear();
        this.dc.clear();
        this.kx.clear();
        this.av.ad = this;
        var i = this.bh != null ? this.bh.s9 : Rect.empty;
        var j = !i.isEmpty ? this.kc : Rect.empty;
        this.av.c5 = i;
        this.av.c4 = j;
        if (i.isEmpty || j.isEmpty) {
            this.bq.count = 0;
            this.bp.count = 0;
            this.bo.count = 0;
        }
        if (this.bq.count == 0) {
            this.av.ab.clear();
        }
        if (this.ay != null) {
            this.ay.registerAxis(this);
        }
        this.nc();
    };
    TimeAxisBase.prototype.get_cd = function () {
        return true;
    };
    TimeAxisBase.prototype.startCursor = function () {
    };
    TimeAxisBase.prototype.resetCursor = function () {
    };
    TimeAxisBase.prototype.StartTimeCursor = function () {
        this.startCursor();
    };
    TimeAxisBase.prototype.ResetTimeCursor = function () {
        this.resetCursor();
    };
    TimeAxisBase.prototype.getCategorySize = function (a, b, c) {
        if (this.le == 0) {
            return 0;
        }
        var d = this.ka(b, c);
        return d.width / (this.le * a.width);
    };
    TimeAxisBase.prototype.getGroupCenter = function (a, b, c, d) {
        return this.getCategorySize(b, c, d) * 0.5;
    };
    TimeAxisBase.prototype.k3 = function (a, b, c) {
        var d = this.la(a, b, c);
        var e = 1 - 0.5 * d;
        var f = this.getCategorySize(a, b, c) * e;
        return f;
    };
    TimeAxisBase.prototype.get_cm = function () {
        return true;
    };
    TimeAxisBase.prototype.na = function (a, b) {
        return (0);
    };
    TimeAxisBase.prototype.preferredCategoryMode = function (a) {
        return this.cb ? 0 : 1;
    };
    Object.defineProperty(TimeAxisBase.prototype, "isVertical", {
        get: function () {
            return this.co;
        },
        enumerable: false,
        configurable: true
    });
    TimeAxisBase.prototype.j$c = function (a, b) {
        return this.el.apply(this, arguments);
    };
    TimeAxisBase.prototype.j$b = function (a, b) {
        return this.ei.apply(this, arguments);
    };
    TimeAxisBase.prototype.j$d = function (a, b, c, d, e) {
        this.hl.apply(this, arguments);
    };
    TimeAxisBase.prototype.j$e = function (a, b, c, d) {
        this.hm.apply(this, arguments);
    };
    TimeAxisBase.prototype.j$f = function (a, b, c, d) {
        this.hn.apply(this, arguments);
    };
    Object.defineProperty(TimeAxisBase.prototype, "j$a", {
        get: function () {
            return this.cg;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TimeAxisBase.prototype, "i$a", {
        get: function () {
            return this.cd;
        },
        enumerable: false,
        configurable: true
    });
    TimeAxisBase.$t = markType(TimeAxisBase, 'TimeAxisBase', CategoryAxisBase.$, [ISortingAxis_$type, IDateTimeAxis_$type]);
    TimeAxisBase.$$p = markDep(DependencyProperty, PropertyMetadata, TimeAxisBase, 'h1', ['DateTimeMemberPath::ni', [2, null], 'IsDataPreSorted:ml:nj', [0, false], 'MaximumValue::nk', [3, null], 'MinimumValue::nl', [3, null]]);
    return TimeAxisBase;
}(CategoryAxisBase));
export { TimeAxisBase };
