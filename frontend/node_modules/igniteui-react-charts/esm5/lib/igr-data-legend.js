import { __extends, __values } from "tslib";
import * as React from 'react';
import { XamDataLegend } from "./XamDataLegend";
import { arrayFindByName, ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { ReactRenderer } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { delegateCombine, delegateRemove } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { IgrDataLegendSummaryEventArgs } from './igr-data-legend-summary-event-args';
import { IgrDataLegendStylingRowEventArgs } from './igr-data-legend-styling-row-event-args';
import { IgrDataLegendStylingColumnEventArgs } from './igr-data-legend-styling-column-event-args';
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
var DataLegendStylingDefaults = {};
/**
 * Represents data legend that displays information about each series including values and summaries.
 * THIS IS A COMMUNITY TECHNOLOGY PREVIEW, not for use in production.
*/
var IgrDataLegend = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrDataLegend, _super);
    function IgrDataLegend(props) {
        var _this = _super.call(this, props) || this;
        _this._wrapper = null;
        _this._implementation = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._calculateColumnSummary = null;
        _this._calculateColumnSummary_wrapped = null;
        _this._styleHeaderRow = null;
        _this._styleHeaderRow_wrapped = null;
        _this._styleSeriesRow = null;
        _this._styleSeriesRow_wrapped = null;
        _this._styleSummaryRow = null;
        _this._styleSummaryRow_wrapped = null;
        _this._styleSeriesColumn = null;
        _this._styleSeriesColumn_wrapped = null;
        _this._styleSummaryColumn = null;
        _this._styleSummaryColumn_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._getMainRef = _this._getMainRef.bind(_this);
        _this._implementation = _this.createImplementation();
        if (document) {
            _this._container = document.createElement("div");
            _this._container.style.display = "block";
            _this._container.style.width = "100%";
            _this._container.style.height = "100%";
        }
        var root;
        root = _this._container;
        if (_this._container != null) {
            root = _this._container;
        }
        var ren = new ReactRenderer(root, document, true, DataLegendStylingDefaults);
        _this._wrapper = ren;
        var dataLegend = _this.i;
        _this._dataLegend = dataLegend;
        _this._dataLegend.externalObject = _this;
        dataLegend.provideContainer(ren);
        dataLegend.notifySizeChanged();
        if (props) {
            _this.initializeProperties();
        }
        ren.addSizeWatcher(function () {
            _this._dataLegend.notifySizeChanged();
        });
        return _this;
    }
    Object.defineProperty(IgrDataLegend.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this._dataLegend.notifySizeChanged();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "width", {
        //private desiredSizeChanged(width: number, height: number) {
        //    //if (this.width == undefined || this.width == '') {
        //    //    this._elRef.style.width = width + "px";
        //    //}
        //    //if (this.height == undefined || this.height == '') {
        //    //    this._elRef.style.height = height + "px";
        //    //}
        //    //this._elRef.style.minWidth = width + "px";
        //    //this._elRef.style.minHeight = height + "px";
        //    this._dataLegend.notifySizeChanged();
        //}
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            if (this._elRef) {
                this._elRef.style.height = value;
                this._dataLegend.notifySizeChanged();
            }
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype._getMainRef = function (ref) {
        this._elRef = ref;
    };
    IgrDataLegend.prototype.render = function () {
        var div = React.createElement("div", {
            className: "ig-data-legend igr-data-legend",
            ref: this._getMainRef
        });
        //}
        return div;
    };
    IgrDataLegend.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_1, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return true;
    };
    IgrDataLegend.prototype.initializeProperties = function () {
        var e_2, _a;
        try {
            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    // supports angular themes or custom properties set in CSS
    IgrDataLegend.prototype.updateStyle = function () {
        this._styling(this._elRef, this);
    };
    IgrDataLegend.prototype.destroy = function () {
        this._dataLegend.destroy();
        this._wrapper.destroy();
    };
    IgrDataLegend.prototype.componentWillUnmount = function () {
    };
    IgrDataLegend.prototype.componentDidMount = function () {
        this._elRef.style.width = this._width ? this._width : "";
        this._elRef.style.height = this._height ? this._height : "";
        this._elRef.appendChild(this._container);
        this._dataLegend.notifySizeChanged();
        this.initializeContent();
    };
    IgrDataLegend.prototype.initializeContent = function () {
        this.updateStyle();
    };
    IgrDataLegend.prototype.createImplementation = function () {
        return new XamDataLegend();
    };
    Object.defineProperty(IgrDataLegend.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend._staticStyling = function (container, component, parent) {
        var genericPrefix = "";
        var typeName = (component.i ? component.i : component).$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataLegend");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = (component.i ? component.i : component).$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, component, genericPrefix + "-", new Set(), false, additionalPrefixes);
    };
    Object.defineProperty(IgrDataLegend.prototype, "target", {
        /**
         * Gets or sets the target for the data legend.
        */
        get: function () {
            var ret = this.i.target;
            if (!ret) {
                return ret;
            }
            if (ret.externalObject != null) {
                ret = ret.externalObject;
            }
            return ret;
        },
        set: function (v) {
            if (v && v._implementation) {
                v = v._implementation;
            }
            this.i.target = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "actualBadgesVisible", {
        /**
     * Gets whether or not at least one badge is visible based on BadgesShape and setting of a row's IsVisble in StyleSeriesRow event
    */
        get: function () {
            return this.i.bw;
        },
        set: function (v) {
            this.i.bw = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "actualPixelScalingRatio", {
        /**
         * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control to appear blurry.
        */
        get: function () {
            return this.i.cn;
        },
        set: function (v) {
            this.i.cn = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "includedSeries", {
        /**
         * Gets or sets indexes or names of series to include in displaying in the data legend, e.g. "0, 1"
        */
        get: function () {
            return this.i.includedSeries;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.includedSeries = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "excludedSeries", {
        /**
         * Gets or sets indexes or names of series to exclude from displaying in the data legend, e.g. "0, 1"
         * The ExcludedSeries property takes precedences over values of IncludedSeries property
        */
        get: function () {
            return this.i.excludedSeries;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.excludedSeries = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "includedColumns", {
        /**
         * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
         * The ExcludedColumns property takes precedences over values of IncludedColumns property
        */
        get: function () {
            return this.i.includedColumns;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.includedColumns = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "excludedColumns", {
        /**
         * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
         * The ExcludedColumns property takes precedences over values of IncludedColumns property
        */
        get: function () {
            return this.i.excludedColumns;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.excludedColumns = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "shouldUpdateWhenSeriesDataChanges", {
        /**
         * Gets or sets whether the data legend should update when the series data is mutated.
        */
        get: function () {
            return this.i.b2;
        },
        set: function (v) {
            this.i.b2 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatAbbreviation", {
        /**
         * Gets or sets mode for abbreviating large numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.an;
        },
        set: function (v) {
            this.i.an = ensureEnum(DataAbbreviationMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatMaxFractions", {
        /**
         * Gets or sets maximum digits for formating numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.ct;
        },
        set: function (v) {
            this.i.ct = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatMinFractions", {
        /**
         * Gets or sets minimum digits for formating numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.cu;
        },
        set: function (v) {
            this.i.cu = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatMode", {
        /**
         * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
        */
        get: function () {
            return this.i.a3;
        },
        set: function (v) {
            this.i.a3 = ensureEnum(DataLegendValueMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.ex;
        },
        set: function (v) {
            this.i.ex = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatCurrencyCode", {
        /**
         * Gets or sets the currency code used for displaying currency symbol next to values, e.g. USD for $, EUR for €
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.ez;
        },
        set: function (v) {
            this.i.ez = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatUseGrouping", {
        /**
         * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.b3;
        },
        set: function (v) {
            this.i.b3 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatString", {
        /**
         * Gets or sets the format string for values displayed in the data legend.
        */
        get: function () {
            return this.i.e5;
        },
        set: function (v) {
            this.i.e5 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the ValueFormatString string.
        */
        get: function () {
            return this.i.ah;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.ah = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueRowMarginBottom", {
        get: function () {
            return this.i.ir ? this.i.ir.bottom : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.ir.bottom = +v;
            this.i.ir = this.i.ir;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueRowMarginLeft", {
        get: function () {
            return this.i.ir ? this.i.ir.left : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.ir.left = +v;
            this.i.ir = this.i.ir;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueRowMarginRight", {
        get: function () {
            return this.i.ir ? this.i.ir.right : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.ir.right = +v;
            this.i.ir = this.i.ir;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueRowMarginTop", {
        get: function () {
            return this.i.ir ? this.i.ir.top : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.ir.top = +v;
            this.i.ir = this.i.ir;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureValueRowMargin = function () {
        if (this.i.ir) {
            return;
        }
        this.i.ir = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "valueRowVisible", {
        /**
         * Gets or sets whether to show series rows.
        */
        get: function () {
            return this.i.b4;
        },
        set: function (v) {
            this.i.b4 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueTextWhenMissingData", {
        /**
         * Gets or sets text displayed when data column is missing a value, e.g. "no data"
        */
        get: function () {
            return this.i.fe;
        },
        set: function (v) {
            this.i.fe = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueTextUseSeriesColors", {
        /**
         * Gets or sets whether to use series colors when displaying values in the legend
        */
        get: function () {
            return this.i.b5;
        },
        set: function (v) {
            this.i.b5 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueTextMarginBottom", {
        get: function () {
            return this.i.is ? this.i.is.bottom : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.is.bottom = +v;
            this.i.is = this.i.is;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueTextMarginLeft", {
        get: function () {
            return this.i.is ? this.i.is.left : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.is.left = +v;
            this.i.is = this.i.is;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueTextMarginRight", {
        get: function () {
            return this.i.is ? this.i.is.right : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.is.right = +v;
            this.i.is = this.i.is;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueTextMarginTop", {
        get: function () {
            return this.i.is ? this.i.is.top : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.is.top = +v;
            this.i.is = this.i.is;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureValueTextMargin = function () {
        if (this.i.is) {
            return;
        }
        this.i.is = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "valueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.h9);
        },
        set: function (v) {
            this.i.h9 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "valueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.bt == null) {
                return null;
            }
            return this.i.bt.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.bt = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerFormatString", {
        /**
         * Gets or sets the format string for header text displayed in the data legend.
        */
        get: function () {
            return this.i.dc;
        },
        set: function (v) {
            this.i.dc = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the HeaderFormatString string.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.ag = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerFormatCulture", {
        /**
         * Gets or sets globalization culture applied to header only when it displays dates that are fetched from date/time axes
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.c8;
        },
        set: function (v) {
            this.i.c8 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerFormatDate", {
        /**
         * Gets or sets date format for the header only when it displays dates that are fetched from date/time axes
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.ap;
        },
        set: function (v) {
            this.i.ap = ensureEnum(DataLegendHeaderDateMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerFormatTime", {
        /**
         * Gets or sets time format for the header only when it displays dates that are fetched from date/time axes
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.aq;
        },
        set: function (v) {
            this.i.aq = ensureEnum(DataLegendHeaderTimeMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerText", {
        /**
         * Gets or sets the HeaderText for the data legend.
        */
        get: function () {
            return this.i.dh;
        },
        set: function (v) {
            this.i.dh = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerTextColor", {
        /**
         * Gets or sets the header text color.
        */
        get: function () {
            return brushToString(this.i.h0);
        },
        set: function (v) {
            this.i.h0 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerTextMarginBottom", {
        get: function () {
            return this.i.ij ? this.i.ij.bottom : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.ij.bottom = +v;
            this.i.ij = this.i.ij;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerTextMarginLeft", {
        get: function () {
            return this.i.ij ? this.i.ij.left : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.ij.left = +v;
            this.i.ij = this.i.ij;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerTextMarginRight", {
        get: function () {
            return this.i.ij ? this.i.ij.right : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.ij.right = +v;
            this.i.ij = this.i.ij;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerTextMarginTop", {
        get: function () {
            return this.i.ij ? this.i.ij.top : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.ij.top = +v;
            this.i.ij = this.i.ij;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureHeaderTextMargin = function () {
        if (this.i.ij) {
            return;
        }
        this.i.ij = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "headerRowMarginBottom", {
        get: function () {
            return this.i.ii ? this.i.ii.bottom : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.ii.bottom = +v;
            this.i.ii = this.i.ii;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerRowMarginLeft", {
        get: function () {
            return this.i.ii ? this.i.ii.left : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.ii.left = +v;
            this.i.ii = this.i.ii;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerRowMarginRight", {
        get: function () {
            return this.i.ii ? this.i.ii.right : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.ii.right = +v;
            this.i.ii = this.i.ii;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerRowMarginTop", {
        get: function () {
            return this.i.ii ? this.i.ii.top : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.ii.top = +v;
            this.i.ii = this.i.ii;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureHeaderRowMargin = function () {
        if (this.i.ii) {
            return;
        }
        this.i.ii = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "headerRowVisible", {
        /**
         * Gets or sets whether to show Header row.
        */
        get: function () {
            return this.i.bz;
        },
        set: function (v) {
            this.i.bz = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "headerTextStyle", {
        /**
         * Gets or Sets the style to use for the header text.
        */
        get: function () {
            if (this.i.bl == null) {
                return null;
            }
            return this.i.bl.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.bl = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryTitleTextColor", {
        /**
         * Gets or sets the summary text color.
        */
        get: function () {
            return brushToString(this.i.h4);
        },
        set: function (v) {
            this.i.h4 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryTitleTextStyle", {
        /**
         * Gets or Sets the style to use for the summary text.
        */
        get: function () {
            if (this.i.bo == null) {
                return null;
            }
            return this.i.bo.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.bo = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryType", {
        /**
         * Gets or sets the SummaryType for the data legend.
        */
        get: function () {
            return this.i.a1;
        },
        set: function (v) {
            this.i.a1 = ensureEnum(DataLegendSummaryType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryTitleText", {
        /**
         * Gets or sets the SummaryTitleText for the data legend.
        */
        get: function () {
            return this.i.d8;
        },
        set: function (v) {
            this.i.d8 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryTitleTextMarginBottom", {
        get: function () {
            return this.i.im ? this.i.im.bottom : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.im.bottom = +v;
            this.i.im = this.i.im;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryTitleTextMarginLeft", {
        get: function () {
            return this.i.im ? this.i.im.left : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.im.left = +v;
            this.i.im = this.i.im;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryTitleTextMarginRight", {
        get: function () {
            return this.i.im ? this.i.im.right : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.im.right = +v;
            this.i.im = this.i.im;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryTitleTextMarginTop", {
        get: function () {
            return this.i.im ? this.i.im.top : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.im.top = +v;
            this.i.im = this.i.im;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureSummaryTitleTextMargin = function () {
        if (this.i.im) {
            return;
        }
        this.i.im = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "summaryRowMarginBottom", {
        get: function () {
            return this.i.il ? this.i.il.bottom : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.il.bottom = +v;
            this.i.il = this.i.il;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryRowMarginLeft", {
        get: function () {
            return this.i.il ? this.i.il.left : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.il.left = +v;
            this.i.il = this.i.il;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryRowMarginRight", {
        get: function () {
            return this.i.il ? this.i.il.right : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.il.right = +v;
            this.i.il = this.i.il;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryRowMarginTop", {
        get: function () {
            return this.i.il ? this.i.il.top : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.il.top = +v;
            this.i.il = this.i.il;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureSummaryRowMargin = function () {
        if (this.i.il) {
            return;
        }
        this.i.il = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "summaryValueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.h6);
        },
        set: function (v) {
            this.i.h6 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryValueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.bq == null) {
                return null;
            }
            return this.i.bq.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.bq = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryLabelText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.d3;
        },
        set: function (v) {
            this.i.d3 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryLabelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.h3);
        },
        set: function (v) {
            this.i.h3 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryLabelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.bn == null) {
                return null;
            }
            return this.i.bn.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.bn = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryUnitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.ee;
        },
        set: function (v) {
            this.i.ee = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryUnitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.h5);
        },
        set: function (v) {
            this.i.h5 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "summaryUnitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.bp == null) {
                return null;
            }
            return this.i.bp.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.bp = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "badgeMarginBottom", {
        get: function () {
            return this.i.ih ? this.i.ih.bottom : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.ih.bottom = +v;
            this.i.ih = this.i.ih;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "badgeMarginLeft", {
        get: function () {
            return this.i.ih ? this.i.ih.left : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.ih.left = +v;
            this.i.ih = this.i.ih;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "badgeMarginRight", {
        get: function () {
            return this.i.ih ? this.i.ih.right : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.ih.right = +v;
            this.i.ih = this.i.ih;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "badgeMarginTop", {
        get: function () {
            return this.i.ih ? this.i.ih.top : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.ih.top = +v;
            this.i.ih = this.i.ih;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureBadgeMargin = function () {
        if (this.i.ih) {
            return;
        }
        this.i.ih = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "badgeShape", {
        /**
         * Gets or sets the BadgeShape for the data legend.
        */
        get: function () {
            return this.i.a8;
        },
        set: function (v) {
            this.i.a8 = ensureEnum(LegendItemBadgeShape_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "targetCursorPositionX", {
        /**
         * Gets or sets horizontal position (between 0.0 and 1.0) in viewport of the target component
        */
        get: function () {
            return this.i.targetCursorPositionX;
        },
        set: function (v) {
            this.i.targetCursorPositionX = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "targetCursorPositionY", {
        /**
         * Gets or sets vertical position (between 0.0 and 1.0) in viewport of the target component
        */
        get: function () {
            return this.i.targetCursorPositionY;
        },
        set: function (v) {
            this.i.targetCursorPositionY = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "unitsDisplayMode", {
        /**
         * Gets or sets the UnitsMode for the data legend.
        */
        get: function () {
            return this.i.a2;
        },
        set: function (v) {
            this.i.a2 = ensureEnum(DataLegendUnitsMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "unitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.er;
        },
        set: function (v) {
            this.i.er = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "unitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.h8);
        },
        set: function (v) {
            this.i.h8 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "unitsTextMarginBottom", {
        get: function () {
            return this.i.ip ? this.i.ip.bottom : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.ip.bottom = +v;
            this.i.ip = this.i.ip;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "unitsTextMarginLeft", {
        get: function () {
            return this.i.ip ? this.i.ip.left : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.ip.left = +v;
            this.i.ip = this.i.ip;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "unitsTextMarginRight", {
        get: function () {
            return this.i.ip ? this.i.ip.right : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.ip.right = +v;
            this.i.ip = this.i.ip;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "unitsTextMarginTop", {
        get: function () {
            return this.i.ip ? this.i.ip.top : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.ip.top = +v;
            this.i.ip = this.i.ip;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureUnitsTextMargin = function () {
        if (this.i.ip) {
            return;
        }
        this.i.ip = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "unitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.bs == null) {
                return null;
            }
            return this.i.bs.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.bs = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "titleTextMarginBottom", {
        get: function () {
            return this.i.io ? this.i.io.bottom : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.io.bottom = +v;
            this.i.io = this.i.io;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "titleTextMarginLeft", {
        get: function () {
            return this.i.io ? this.i.io.left : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.io.left = +v;
            this.i.io = this.i.io;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "titleTextMarginRight", {
        get: function () {
            return this.i.io ? this.i.io.right : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.io.right = +v;
            this.i.io = this.i.io;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "titleTextMarginTop", {
        get: function () {
            return this.i.io ? this.i.io.top : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.io.top = +v;
            this.i.io = this.i.io;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureTitleTextMargin = function () {
        if (this.i.io) {
            return;
        }
        this.i.io = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "titleTextColor", {
        /**
         * Gets or sets the display text color.
        */
        get: function () {
            return brushToString(this.i.h7);
        },
        set: function (v) {
            this.i.h7 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "titleTextStyle", {
        /**
         * Gets or Sets the style to use for the display text.
        */
        get: function () {
            if (this.i.br == null) {
                return null;
            }
            return this.i.br.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.br = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "labelDisplayMode", {
        /**
         * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
        */
        get: function () {
            return this.i.ar;
        },
        set: function (v) {
            this.i.ar = ensureEnum(DataLegendLabelMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "labelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.h1);
        },
        set: function (v) {
            this.i.h1 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "labelTextMarginBottom", {
        get: function () {
            return this.i.ik ? this.i.ik.bottom : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.ik.bottom = +v;
            this.i.ik = this.i.ik;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "labelTextMarginLeft", {
        get: function () {
            return this.i.ik ? this.i.ik.left : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.ik.left = +v;
            this.i.ik = this.i.ik;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "labelTextMarginRight", {
        get: function () {
            return this.i.ik ? this.i.ik.right : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.ik.right = +v;
            this.i.ik = this.i.ik;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "labelTextMarginTop", {
        get: function () {
            return this.i.ik ? this.i.ik.top : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.ik.top = +v;
            this.i.ik = this.i.ik;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.ensureLabelTextMargin = function () {
        if (this.i.ik) {
            return;
        }
        this.i.ik = new Thickness(2);
    };
    Object.defineProperty(IgrDataLegend.prototype, "labelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.bm == null) {
                return null;
            }
            return this.i.bm.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.bm = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "pixelScalingRatio", {
        /**
         * Gets or sets the scaling value used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control to appear blurry.
        */
        get: function () {
            return this.i.pixelScalingRatio;
        },
        set: function (v) {
            this.i.pixelScalingRatio = +v;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.findByName = function (name) {
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.headerFormatSpecifiers != null && arrayFindByName(this.headerFormatSpecifiers, name)) {
            return arrayFindByName(this.headerFormatSpecifiers, name);
        }
        return null;
    };
    Object.defineProperty(IgrDataLegend.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataLegend.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrDataLegend.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DataLegend");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * Returns the legend visuals expressed as a serialized string.

*/
    IgrDataLegend.prototype.exportSerializedVisualData = function () {
        var iv = this.i.exportSerializedVisualData();
        return (iv);
    };
    /**
     * Notifies the legend about changes to size
    
    */
    IgrDataLegend.prototype.notifySizeChanged = function () {
        this.i.notifySizeChanged();
    };
    /**
     * Forces any pending refresh to the legend to be finished.
    
    */
    IgrDataLegend.prototype.flush = function () {
        this.i.flush();
    };
    IgrDataLegend.prototype.getAbbreviatedNumber = function (number, mode, minDigits, maxDigits) {
        var iv = this.i.cq(number, (mode == null ? null : mode), minDigits, maxDigits);
        return (iv);
    };
    IgrDataLegend.prototype.getAbbreviatedSymbol = function (number, mode, minDigits, maxDigits) {
        var iv = this.i.c7(number, (mode == null ? null : mode), minDigits, maxDigits);
        return (iv);
    };
    IgrDataLegend.prototype.getAbbreviatedString = function (number, mode, minDigits, maxDigits) {
        var iv = this.i.c6(number, (mode == null ? null : mode), minDigits, maxDigits);
        return (iv);
    };
    Object.defineProperty(IgrDataLegend.prototype, "calculateColumnSummary", {
        /**
         * Event raised when calculating summary value for each column in data legend
        */
        get: function () {
            return this._calculateColumnSummary;
        },
        set: function (ev) {
            var _this = this;
            if (this._calculateColumnSummary_wrapped !== null) {
                this.i.calculateColumnSummary = delegateRemove(this.i.calculateColumnSummary, this._calculateColumnSummary_wrapped);
                this._calculateColumnSummary_wrapped = null;
                this._calculateColumnSummary = null;
            }
            this._calculateColumnSummary = ev;
            this._calculateColumnSummary_wrapped = function (o, e) {
                var outerArgs = new IgrDataLegendSummaryEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeCalculateColumnSummary) {
                    _this.beforeCalculateColumnSummary(_this, outerArgs);
                }
                if (_this._calculateColumnSummary) {
                    _this._calculateColumnSummary(_this, outerArgs);
                }
            };
            this.i.calculateColumnSummary = delegateCombine(this.i.calculateColumnSummary, this._calculateColumnSummary_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "styleHeaderRow", {
        /**
         * Event raised when styling the header row
        */
        get: function () {
            return this._styleHeaderRow;
        },
        set: function (ev) {
            var _this = this;
            if (this._styleHeaderRow_wrapped !== null) {
                this.i.styleHeaderRow = delegateRemove(this.i.styleHeaderRow, this._styleHeaderRow_wrapped);
                this._styleHeaderRow_wrapped = null;
                this._styleHeaderRow = null;
            }
            this._styleHeaderRow = ev;
            this._styleHeaderRow_wrapped = function (o, e) {
                var outerArgs = new IgrDataLegendStylingRowEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeStyleHeaderRow) {
                    _this.beforeStyleHeaderRow(_this, outerArgs);
                }
                if (_this._styleHeaderRow) {
                    _this._styleHeaderRow(_this, outerArgs);
                }
            };
            this.i.styleHeaderRow = delegateCombine(this.i.styleHeaderRow, this._styleHeaderRow_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "styleSeriesRow", {
        /**
         * Event raised when styling title and badge in series rows
        */
        get: function () {
            return this._styleSeriesRow;
        },
        set: function (ev) {
            var _this = this;
            if (this._styleSeriesRow_wrapped !== null) {
                this.i.styleSeriesRow = delegateRemove(this.i.styleSeriesRow, this._styleSeriesRow_wrapped);
                this._styleSeriesRow_wrapped = null;
                this._styleSeriesRow = null;
            }
            this._styleSeriesRow = ev;
            this._styleSeriesRow_wrapped = function (o, e) {
                var outerArgs = new IgrDataLegendStylingRowEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeStyleSeriesRow) {
                    _this.beforeStyleSeriesRow(_this, outerArgs);
                }
                if (_this._styleSeriesRow) {
                    _this._styleSeriesRow(_this, outerArgs);
                }
            };
            this.i.styleSeriesRow = delegateCombine(this.i.styleSeriesRow, this._styleSeriesRow_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "styleSummaryRow", {
        /**
         * Event raised when styling title in the summary row
        */
        get: function () {
            return this._styleSummaryRow;
        },
        set: function (ev) {
            var _this = this;
            if (this._styleSummaryRow_wrapped !== null) {
                this.i.styleSummaryRow = delegateRemove(this.i.styleSummaryRow, this._styleSummaryRow_wrapped);
                this._styleSummaryRow_wrapped = null;
                this._styleSummaryRow = null;
            }
            this._styleSummaryRow = ev;
            this._styleSummaryRow_wrapped = function (o, e) {
                var outerArgs = new IgrDataLegendStylingRowEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeStyleSummaryRow) {
                    _this.beforeStyleSummaryRow(_this, outerArgs);
                }
                if (_this._styleSummaryRow) {
                    _this._styleSummaryRow(_this, outerArgs);
                }
            };
            this.i.styleSummaryRow = delegateCombine(this.i.styleSummaryRow, this._styleSummaryRow_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "styleSeriesColumn", {
        /**
         * Event raised when styling the label, value, and unit columns in series rows
        */
        get: function () {
            return this._styleSeriesColumn;
        },
        set: function (ev) {
            var _this = this;
            if (this._styleSeriesColumn_wrapped !== null) {
                this.i.styleSeriesColumn = delegateRemove(this.i.styleSeriesColumn, this._styleSeriesColumn_wrapped);
                this._styleSeriesColumn_wrapped = null;
                this._styleSeriesColumn = null;
            }
            this._styleSeriesColumn = ev;
            this._styleSeriesColumn_wrapped = function (o, e) {
                var outerArgs = new IgrDataLegendStylingColumnEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeStyleSeriesColumn) {
                    _this.beforeStyleSeriesColumn(_this, outerArgs);
                }
                if (_this._styleSeriesColumn) {
                    _this._styleSeriesColumn(_this, outerArgs);
                }
            };
            this.i.styleSeriesColumn = delegateCombine(this.i.styleSeriesColumn, this._styleSeriesColumn_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataLegend.prototype, "styleSummaryColumn", {
        /**
         * Event raised when styling the label, value, and unit columns in summary row
        */
        get: function () {
            return this._styleSummaryColumn;
        },
        set: function (ev) {
            var _this = this;
            if (this._styleSummaryColumn_wrapped !== null) {
                this.i.styleSummaryColumn = delegateRemove(this.i.styleSummaryColumn, this._styleSummaryColumn_wrapped);
                this._styleSummaryColumn_wrapped = null;
                this._styleSummaryColumn = null;
            }
            this._styleSummaryColumn = ev;
            this._styleSummaryColumn_wrapped = function (o, e) {
                var outerArgs = new IgrDataLegendStylingColumnEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeStyleSummaryColumn) {
                    _this.beforeStyleSummaryColumn(_this, outerArgs);
                }
                if (_this._styleSummaryColumn) {
                    _this._styleSummaryColumn(_this, outerArgs);
                }
            };
            this.i.styleSummaryColumn = delegateCombine(this.i.styleSummaryColumn, this._styleSummaryColumn_wrapped);
            ;
        },
        enumerable: false,
        configurable: true
    });
    return IgrDataLegend;
}(React.Component));
export { IgrDataLegend };
