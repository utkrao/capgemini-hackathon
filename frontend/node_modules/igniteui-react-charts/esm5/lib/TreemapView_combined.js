/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, runOn, delegateCombine, delegateRemove, markType, fromEnum, String_$type, INotifyPropertyChanged_$type, PropertyChangedEventArgs, EventArgs, fromEn, EnumUtil, enumGetBox, typeGetValue, Point_$type } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { FontDefaults } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { CanvasGestureDOMEventProxy } from "igniteui-react-core";
import { TreemapVisualData } from "./TreemapVisualData";
import { List$1 } from "igniteui-react-core";
import { TreemapVisual } from "./TreemapVisual";
import { Pool$1 } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { truncate, isNaN_, logBase } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { TreemapNodeVisualData } from "./TreemapNodeVisualData";
import { TreemapLabelVisualData } from "./TreemapLabelVisualData";
import { RectangleVisualData } from "igniteui-react-core";
import { PointData } from "igniteui-react-core";
import { SizeData } from "igniteui-react-core";
import { AppearanceHelper } from "igniteui-react-core";
import { HashSet$1 } from "igniteui-react-core";
import { TreemapOrientation_$type } from "./TreemapOrientation";
import { Size } from "igniteui-react-core";
import { AreaInfo } from "./AreaInfo";
import { Dictionary$2 } from "igniteui-react-core";
import { DoubleAnimator } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { TreemapFillScaleMode_$type } from "./TreemapFillScaleMode";
import { TreemapLabelVerticalFitMode_$type } from "./TreemapLabelVerticalFitMode";
import { TreemapLabelHorizontalFitMode_$type } from "./TreemapLabelHorizontalFitMode";
import { TreemapHeaderDisplayMode_$type } from "./TreemapHeaderDisplayMode";
import { TreemapLayoutType_$type } from "./TreemapLayoutType";
import { FastItemsSource } from "igniteui-react-core";
import { EasingFunctions } from "igniteui-react-core";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { RectData } from "igniteui-react-core";
import { TreemapNodeVisualDataList } from "./TreemapNodeVisualDataList";
import { BrushCollectionUtil } from "igniteui-react-core";
import { TreemapValueMappingMode_$type } from "./TreemapValueMappingMode";
import { TreemapNodePointerEventArgs } from "./TreemapNodePointerEventArgs";
import { TreemapNodeStyleMappingTargetType_$type } from "./TreemapNodeStyleMappingTargetType";
import { stringReplace, stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var TreemapView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapView, _super);
    function TreemapView() {
        var _this = _super.call(this) || this;
        _this.b = null;
        _this.a = null;
        _this.o = false;
        _this.ae = null;
        _this.l = null;
        _this.ac = null;
        _this.s = 0;
        _this.r = 0;
        _this.f = null;
        _this.ad = null;
        _this.v = 1;
        _this.ab = null;
        _this.c = null;
        _this.t = 0;
        _this.u = 0;
        _this.a3 = null;
        _this.h = ((function () {
            var $ret = new FontInfo();
            $ret.n = FontDefaults.treemapFontFamily;
            $ret.d = DeviceUtils.f(FontDefaults.treemapFontSize);
            return $ret;
        })());
        _this.g = ((function () {
            var $ret = new FontInfo();
            $ret.n = FontDefaults.treemapFontFamily;
            $ret.d = DeviceUtils.f(FontDefaults.treemapFontSize);
            return $ret;
        })());
        _this.q = null;
        _this.m = null;
        _this.a4 = ((function () {
            var $ret = new Brush();
            $ret.fill = "rgba(0,0,0, 0.0)";
            return $ret;
        })());
        _this.e = ((function () {
            var $ret = new FontInfo();
            $ret.n = FontDefaults.treemapFontFamily;
            $ret.d = DeviceUtils.f(FontDefaults.treemapFontSize);
            return $ret;
        })());
        _this.d = ((function () {
            var $ret = new FontInfo();
            $ret.n = FontDefaults.treemapHeaderFontFamily;
            $ret.d = DeviceUtils.f(FontDefaults.treemapHeaderFontSize);
            return $ret;
        })());
        _this.n = true;
        _this.b = new TreemapViewRenderer();
        _this.b.j = ((function () {
            var $ret = new Brush();
            $ret.fill = "white";
            return $ret;
        })());
        return _this;
    }
    TreemapView.prototype.aw = function () {
    };
    TreemapView.prototype.a0 = function () {
        this.az();
    };
    TreemapView.prototype.a1 = function () {
        if (!this.o) {
            this.o = true;
            if (this.ac != null) {
                this.ac.setTimeout(runOn(this, this.af), 0);
            }
            else {
                window.setTimeout(runOn(this, this.af), 0);
            }
        }
    };
    TreemapView.prototype.af = function () {
        if (this.o) {
            this.o = false;
            this.a.hf();
        }
    };
    TreemapView.prototype.p = function () {
        return true;
    };
    TreemapView.prototype.ax = function () {
        this.v = this.a.cp;
        this.a1();
    };
    TreemapView.prototype.at = function (a) {
        if (a == null) {
            this.ae = null;
            this.ac = null;
            this.l = null;
            if (this.ab != null) {
                window.removeEventListener("resize", this.ab, false);
                this.ab = null;
            }
            this.ag();
            return;
        }
        this.ac = a;
        this.ad = a;
        var b = this.ad.rootWrapper.width();
        var c = this.ad.rootWrapper.height();
        this.aq();
        this.v = (isNaN_(this.a.di) ? this.a.cp : this.a.di);
        var d = this.v;
        var e = Math.round(a.rootWrapper.width());
        var f = Math.round(a.rootWrapper.height());
        var g = e * d;
        var h = f * d;
        this.ac.rootWrapper.setStyleProperty("position", "relative");
        var i = a.createElement("canvas");
        i.setStyleProperty("position", "absolute");
        this.ac.rootWrapper.append(i);
        this.s = b;
        this.r = c;
        i.setAttribute("width", g.toString());
        i.setAttribute("height", h.toString());
        i.setStyleProperty("width", e.toString() + "px");
        i.setStyleProperty("height", f.toString() + "px");
        this.m = i.listen("contextmenu", function (j) { return j.preventDefault(); });
        this.a.ip = new Rect(0, 0, 0, e, f);
        this.ae = i;
        var j = this.ac.get2DCanvasContext(this.ae);
        this.l = new RenderingContext(new CanvasViewRenderer(), j);
        this.ap();
        this.a2();
        this.l.ac(this.f);
        this.az();
        this.c = new CanvasGestureDOMEventProxy(this.ae, this.ac, true);
        this.c.ao = function (k) { return true; };
        this.c.bl = this.a.ip;
        var k = this.c;
        k.onMouseOver = delegateCombine(k.onMouseOver, runOn(this, this.al));
        var l = this.c;
        l.onMouseUp = delegateCombine(l.onMouseUp, runOn(this, this.am));
        var m = this.c;
        m.onMouseDown = delegateCombine(m.onMouseDown, runOn(this, this.ai));
        var n = this.c;
        n.onMouseEnter = delegateCombine(n.onMouseEnter, runOn(this, this.aj));
        var o = this.c;
        o.onMouseLeave = delegateCombine(o.onMouseLeave, runOn(this, this.ak));
    };
    TreemapView.prototype.ak = function (a) {
        this.a.g4(a);
    };
    TreemapView.prototype.an = function (a) {
        this.b.e(a, this.q, this);
    };
    TreemapView.prototype.aj = function (a) {
        this.a.g3(a);
    };
    TreemapView.prototype.aq = function () {
        var _this = this;
        if (this.ab == null) {
            this.ab = function (a) {
                var b = _this.a.di;
                var c = _this.a.cp;
                if (!isNaN_(b) && b != 0) {
                    return;
                }
                if (window.devicePixelRatio != undefined && window.devicePixelRatio != c) {
                    _this.a.cp = window.devicePixelRatio;
                }
            };
            var e_ = this.ab;
            window.addEventListener("resize", e_, false);
        }
        this.ab(null);
    };
    TreemapView.prototype.ag = function () {
        if (this.m != null) {
            this.m();
            this.m = null;
        }
        if (this.c != null) {
            var a = this.c;
            a.onMouseOver = delegateRemove(a.onMouseOver, runOn(this, this.al));
            var b = this.c;
            b.onMouseUp = delegateRemove(b.onMouseUp, runOn(this, this.am));
            var c = this.c;
            c.onMouseDown = delegateRemove(c.onMouseDown, runOn(this, this.ai));
            var d = this.c;
            d.onMouseEnter = delegateRemove(d.onMouseEnter, runOn(this, this.aj));
            var e = this.c;
            e.onMouseLeave = delegateRemove(e.onMouseLeave, runOn(this, this.ak));
            this.c.ao = null;
            this.c.av();
        }
    };
    TreemapView.prototype.ai = function (a) {
        if (this.c.al) {
            this.a.g8(a);
        }
        else {
            this.a.g2(a);
        }
    };
    TreemapView.prototype.am = function (a) {
        if (this.c.al) {
            this.a.g9(a);
        }
        else {
            this.a.g6(a);
        }
    };
    TreemapView.prototype.al = function (a, b, c) {
        this.a.g5(a);
    };
    TreemapView.prototype.ap = function () {
    };
    TreemapView.prototype.k = function () {
        return this.b.b;
    };
    TreemapView.prototype.a2 = function () {
        this.f = FontUtil.getFont(this.ac);
        if (this.g != null) {
            this.t = this.w(this.g);
        }
        else {
            this.t = this.w(this.f);
        }
        if (this.h != null) {
            this.u = this.w(this.h);
        }
        else {
            this.u = this.w(this.f);
        }
        this.a3 = new Brush();
        this.a3._fill = this.ac.rootWrapper.getStyleProperty("color");
        if (this.l != null) {
            this.l.ac(this.f);
        }
    };
    TreemapView.prototype.ar = function () {
        var a = this.ad.rootWrapper.width();
        var b = this.ad.rootWrapper.height();
        this.a.ip = new Rect(0, 0, 0, a, b);
        this.aq();
    };
    TreemapView.prototype.ao = function () {
        if (this.o) {
            this.af();
        }
    };
    TreemapView.prototype.az = function () {
        if (this.l == null) {
            return;
        }
        var a = this.a.ip.width;
        var b = this.a.ip.height;
        var c = Math.round(a * this.v);
        var d = Math.round(b * this.v);
        if (this.s != c || this.r != d) {
            this.ae.setAttribute("width", c.toString());
            this.ae.setAttribute("height", d.toString());
            this.ae.setStyleProperty("width", a.toString() + "px");
            this.ae.setStyleProperty("height", b.toString() + "px");
            this.s = truncate(Math.round(c));
            this.r = truncate(Math.round(d));
        }
        if (this.l.d && this.v != 1) {
            this.l.z();
            this.l.aa(this.v, this.v);
        }
        this.b.f(this.l, this.a.ip, this.q, this.t);
        if (this.l.d && this.v != 1) {
            this.l.y();
        }
    };
    TreemapView.prototype.av = function (a) {
        this.h = a;
        if (this.h != null) {
            this.u = this.w(this.h);
        }
        else {
            this.u = this.w(this.f);
        }
    };
    TreemapView.prototype.ay = function (a) {
        this.g = a;
        if (this.g != null) {
            this.t = this.w(this.g);
        }
        else {
            this.t = this.w(this.f);
        }
        if (this.h != null) {
            this.u = this.w(this.h);
        }
        else {
            this.u = this.w(this.f);
        }
    };
    TreemapView.prototype.ah = function (a) {
        this.q = a;
        this.az();
    };
    TreemapView.prototype.aa = function (a) {
        if (a != null) {
            if (this.g != null) {
                this.l.ac(this.g);
            }
            else {
                this.l.ac(this.e);
            }
            return this.l.f(a);
        }
        return 0;
    };
    TreemapView.prototype.y = function (a) {
        if (a != null) {
            if (this.h != null) {
                this.l.ac(this.h);
            }
            else {
                this.l.ac(this.e);
            }
            return this.l.f(a);
        }
        return 0;
    };
    TreemapView.prototype.w = function (a) {
        return FontUtil.getCurrentFontHeight(this.ac, a);
    };
    TreemapView.prototype.z = function (a) {
        return this.t;
    };
    TreemapView.prototype.x = function (a) {
        return this.u;
    };
    TreemapView.prototype.a6 = function () {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgb(220,220,220)";
            return $ret;
        })());
    };
    TreemapView.prototype.a8 = function () {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgb(240, 240, 240)";
            return $ret;
        })());
    };
    TreemapView.prototype.a7 = function () {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgb(102, 102, 102)";
            return $ret;
        })());
    };
    TreemapView.prototype.be = function () {
        return this.a4;
    };
    TreemapView.prototype.ba = function () {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "black";
            return $ret;
        })());
    };
    TreemapView.prototype.a9 = function () {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgb(240,240,240)";
            return $ret;
        })());
    };
    TreemapView.prototype.bd = function () {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgb(240, 240, 240)";
            return $ret;
        })());
    };
    TreemapView.prototype.a5 = function () {
        return ((function () {
            var $ret = new Brush();
            $ret.fill = "rgb(102, 102, 102)";
            return $ret;
        })());
    };
    TreemapView.prototype.j = function () {
        return this.e;
    };
    TreemapView.prototype.i = function () {
        return this.d;
    };
    TreemapView.prototype.bb = function () {
        return BrushUtil.g(153, 25, 25, 25);
    };
    TreemapView.prototype.bc = function () {
        return BrushUtil.g(153, 45, 45, 45);
    };
    TreemapView.prototype.as = function () {
        this.n = true;
        this.aq();
        if (this.c != null) {
            this.c.at(this.ac.rootWrapper, "");
        }
    };
    TreemapView.prototype.au = function () {
        this.n = false;
        if (this.c != null) {
            this.c.bh(this.ac.rootWrapper, "");
        }
    };
    TreemapView.$t = markType(TreemapView, 'TreemapView');
    return TreemapView;
}(Base));
export { TreemapView };
/**
 * @hidden
 */
var TreemapViewRenderer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapViewRenderer, _super);
    function TreemapViewRenderer() {
        var _this = _super.call(this) || this;
        _this.b = null;
        _this.c = null;
        _this.j = null;
        _this.c = new List$1(TreemapVisual.$, 0);
        _this.b = ((function () {
            var $ret = new Pool$1(TreemapVisual.$);
            $ret.create = runOn(_this, _this.a);
            $ret.activate = runOn(_this, _this.g);
            $ret.disactivate = runOn(_this, _this.i);
            $ret.destroy = runOn(_this, _this.h);
            return $ret;
        })());
        return _this;
    }
    TreemapViewRenderer.prototype.a = function () {
        var a = new TreemapVisual();
        this.c.add(a);
        return a;
    };
    TreemapViewRenderer.prototype.g = function (a) {
        a.t = 0;
    };
    TreemapViewRenderer.prototype.i = function (a) {
        a.t = 1;
    };
    TreemapViewRenderer.prototype.h = function (a) {
        this.c.remove(a);
    };
    TreemapViewRenderer.prototype.d = function (a) {
        if (a.c.count != 3) {
            a.c.add1(new Rectangle());
            a.c.add1(new Rectangle());
            a.c.add1(new TextBlock());
        }
    };
    TreemapViewRenderer.prototype.f = function (a, b, c, d) {
        a.k(b.left, b.top, b.width, b.height);
        if (c != null) {
            for (var e = 0; e < c.count; e++) {
                var f = c._inner[e];
                this.d(f);
                var g = f.c._inner[0];
                var h = f.c._inner[1];
                var i = f.c._inner[2];
                g._fill = f.i;
                g._stroke = f.l;
                g.ac = f.f;
                g.width = f.m.width;
                g.height = f.m.height;
                g.n = f.m.left;
                g.o = f.m.top;
                a.ac(f.a);
                var j = a.f(f.g);
                if (f.b) {
                    i.al = f.g;
                    switch (f.h) {
                        case 0:
                            i.n = f.m.left + f.o.left;
                            break;
                        case 1:
                        case 3:
                            i.n = f.m.left + f.m.width / 2 - f.e / 2;
                            break;
                        case 2:
                            i.n = Math.max(f.m.left + f.o.left, f.m.right - (j + f.o.right));
                            break;
                    }
                    switch (f.p) {
                        case 0:
                            i.o = f.m.top + f.o.top;
                            break;
                        case 1:
                        case 3:
                            i.o = f.m.top + f.m.height / 2 - f.d / 2;
                            break;
                        case 2:
                            i.o = Math.max(f.m.top + f.o.top, f.m.bottom - (d + f.o.bottom));
                            break;
                    }
                    i.ao = f.k;
                }
                else {
                    h._fill = f.j;
                    h._stroke = f.l;
                    h.ac = f.f;
                    h.width = f.m.width;
                    h.height = f.d;
                    h.n = f.m.left;
                    h.o = f.m.top;
                    if (f.s == 0) {
                        h.width = j + f.n.left + f.n.right;
                    }
                    i.n = f.m.left + f.n.left;
                    i.o = f.m.top + f.n.top;
                    i.al = f.g;
                    i.ao = f.k;
                }
                a.v(g);
                if (f.s != 0) {
                    if (!f.b) {
                        a.v(h);
                    }
                }
                a.z();
                a.ae(f.m);
                if (f.s == 0) {
                    if (!f.b) {
                        a.v(h);
                    }
                }
                a.w(i);
                a.y();
            }
        }
    };
    TreemapViewRenderer.prototype.e = function (a, b, c) {
        if (b != null) {
            for (var d = 0; d < b.count; d++) {
                var e = b._inner[d];
                this.d(e);
                var f = e.c._inner[0];
                var g = e.c._inner[1];
                var h = e.c._inner[2];
                var i = new TreemapNodeVisualData();
                i.c = new RectangleVisualData(1, "NodePath", f);
                i.b = new RectangleVisualData(1, "HeaderRect", g);
                var j = new TreemapLabelVisualData();
                j.labelPosition = new PointData(h.n, h.o);
                if (e.b) {
                    j.labelSize = new SizeData(c.aa(h.al), c.z(h.al));
                }
                else {
                    j.labelSize = new SizeData(c.y(h.al), c.x(h.al));
                }
                j.labelValue = h.al;
                j.appearance = AppearanceHelper.c(h, e.a);
                i.a = j;
                a.nodes.add(i);
            }
        }
    };
    TreemapViewRenderer.$t = markType(TreemapViewRenderer, 'TreemapViewRenderer');
    return TreemapViewRenderer;
}(Base));
export { TreemapViewRenderer };
/**
 * @hidden
 */
var TreemapLayoutCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapLayoutCalculator, _super);
    function TreemapLayoutCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreemapLayoutCalculator.c = function (a, b, c, d) {
        var e = a.e();
        var f = d.f;
        var g = f * f / (b.width * b.height);
        if (e / c < g) {
            return true;
        }
        return false;
    };
    TreemapLayoutCalculator.a = function (a, b, c, d, e) {
        for (var f = 0; f < c.count; f++) {
            var g = c._inner[f];
            if (!a.contains(g)) {
                return false;
            }
        }
        return true;
    };
    TreemapLayoutCalculator.b = function (a, b) {
        if (a.width < b.f || a.height < b.f) {
            return true;
        }
        return false;
    };
    TreemapLayoutCalculator.prototype.h = function (a, b, c) {
        return a.o(b);
    };
    TreemapLayoutCalculator.prototype.i = function (a, b, c) {
        var d = a.o(b);
        if (d.isEmpty) {
            return d;
        }
        if (b.b != null && b.b.count > 0) {
            var e = c.i;
            var f = e.left + e.right;
            var g = e.top + e.bottom;
            var h = a.b(b);
            if (!h) {
                return d;
            }
            var i = new Rect(0, d.left - e.left, d.top - e.top, d.width + f, d.height + g);
            return i;
        }
        else {
            return d;
        }
    };
    TreemapLayoutCalculator.prototype.g = function (a, b, c, d) {
        if (b.b != null && b.b.count > 0) {
            var e = d.i;
            var f = e.left + e.right;
            var g = e.top + e.bottom;
            if (c.width < f || c.height < g) {
                a.m(b, c);
                return;
            }
            var h = new Rect(0, c.left + e.left, c.top + e.top, c.width - f, c.height - g);
            a.m(b, h);
            a.n(b, true);
        }
        else {
            a.m(b, c);
        }
    };
    TreemapLayoutCalculator.prototype.f = function (a, b, c, d, e, f) {
        var e_1, _a;
        if (!TreemapLayoutCalculator.a(a, b, c, e, f)) {
            while (d > 0) {
                var g = 0;
                try {
                    for (var _b = (e_1 = void 0, __values(fromEnum(c))), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var h = _c.value;
                        if (a.contains(h)) {
                            continue;
                        }
                        if (d > 0) {
                            var i = (d > 1) ? 1 : d;
                            var j = this.i(b, h, f);
                            if (j.isEmpty) {
                                continue;
                            }
                            this.g(b, h, new Rect(0, j.x + g, j.y, j.width + i, j.height), f);
                            d -= i;
                            g += i;
                        }
                        else {
                            var k = this.i(b, h, f);
                            if (k.isEmpty) {
                                continue;
                            }
                            this.g(b, h, new Rect(0, k.x + g, k.y, k.width, k.height), f);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            }
        }
    };
    TreemapLayoutCalculator.prototype.e = function (a, b, c, d, e, f) {
        var e_2, _a;
        if (!TreemapLayoutCalculator.a(a, b, c, e, f)) {
            while (d > 0) {
                var g = 0;
                try {
                    for (var _b = (e_2 = void 0, __values(fromEnum(c))), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var h = _c.value;
                        if (a.contains(h)) {
                            continue;
                        }
                        if (d > 0) {
                            var i = (d > 1) ? 1 : d;
                            var j = this.i(b, h, f);
                            if (j.isEmpty) {
                                continue;
                            }
                            this.g(b, h, new Rect(0, j.x, j.y + g, j.width, j.height + i), f);
                            d -= i;
                            g += i;
                        }
                        else {
                            var k = this.i(b, h, f);
                            if (k.isEmpty) {
                                continue;
                            }
                            this.g(b, h, new Rect(0, k.x, k.y + g, k.width, k.height), f);
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
            }
        }
    };
    TreemapLayoutCalculator.$t = markType(TreemapLayoutCalculator, 'TreemapLayoutCalculator');
    return TreemapLayoutCalculator;
}(Base));
export { TreemapLayoutCalculator };
/**
 * @hidden
 */
var StrippedCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(StrippedCalculator, _super);
    function StrippedCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StrippedCalculator.prototype.d = function (a, b) {
        a.g();
        this.o(a, b.b.a, b.h, b, 0);
    };
    StrippedCalculator.prototype.q = function (a, b, c) {
        return c.j;
    };
    StrippedCalculator.prototype.o = function (a, b, c, d, e) {
        var e_3, _a;
        if (d.g >= 0 && e > d.g) {
            return;
        }
        if (b == d.c) {
            d.d = true;
            this.g(a, b, c, d);
            var f = new Rect(0, c.left, c.top + d.e, c.width, c.height - d.e);
            c = f;
        }
        if (!d.d) {
            try {
                for (var _b = __values(fromEnum(b.b)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var g = _c.value;
                    this.o(a, g, c, d, e + 1);
                }
            }
            catch (e_3_1) {
                e_3 = { error: e_3_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_3)
                        throw e_3.error;
                }
            }
            return;
        }
        var h = this.q(b, c, d);
        var i = h.left + h.right;
        var j = h.top + h.bottom;
        var k = new Rect(0, c.left, c.top, c.width, c.height);
        var l = d.a;
        if (i >= k.width || j >= k.height) {
            return;
        }
        k.x = k.x + h.left;
        k.width = k.width - i;
        k.y = k.y + h.top;
        k.height = k.height - j;
        var m = new HashSet$1(TreemapTreeNode.$, 0);
        StrippedCalculator.p(m, d, b.b, k);
        var n = 0;
        for (var o = 0; o < b.b.count; o++) {
            var p = b.b._inner[o];
            if (!m.contains(p)) {
                n += p.e();
            }
        }
        var q = n;
        var r = (k.width * k.height) / q;
        var s = l == 0 ? k.width : k.height;
        var t = new List$1(TreemapTreeNode.$, 0);
        var u = new List$1(TreemapTreeNode.$, 0);
        for (var v = 0; v < b.b.count; v++) {
            var w = b.b._inner[v];
            if (m.contains(w) || isNaN_(w.e())) {
                continue;
            }
            var x = StrippedCalculator.j(u, s, r);
            u.add(w);
            var y = StrippedCalculator.j(u, s, r);
            if (x < y) {
                if (t.count > 0) {
                    var z = this.m(m, a, d, t, r, k, l, false);
                    k = z.p5;
                }
                u.removeAt(u.count - 1);
                t.o(u);
                u.clear();
                u.add(w);
            }
        }
        var aa = StrippedCalculator.j(t, s, r);
        var ab = StrippedCalculator.j(u, s, r);
        var ac = new List$1(TreemapTreeNode.$, 0);
        ac.o(t);
        ac.o(u);
        var ad = StrippedCalculator.j(ac, s, r);
        if (ad < (aa + ab) / 2 || k.height < d.f * 2) {
            var ae = this.m(m, a, d, ac, r, k, l, true);
            k = ae.p5;
        }
        else {
            var af = this.m(m, a, d, t, r, k, l, false);
            k = af.p5;
            var ag = this.m(m, a, d, u, r, k, l, true);
            k = ag.p5;
        }
        for (var ah = 0; ah < b.b.count; ah++) {
            var ai = b.b._inner[ah];
            if (m.contains(ai)) {
                continue;
            }
            var aj = this.h(a, ai, d);
            if (aj.isEmpty) {
                continue;
            }
            var ak = new Rect(0, aj.left, aj.top + d.e, aj.width, Math.max(aj.height - d.e, 0));
            this.o(a, ai, ak, d, e + 1);
        }
        if (b == d.c) {
            d.d = false;
        }
    };
    StrippedCalculator.prototype.m = function (a, b, c, d, e, f, g, h) {
        if (d.count == 0) {
            return {
                p5: f
            };
        }
        if (g == 0) {
            var i = this.l(a, b, c, d, e, f, h);
            f = i.p5;
        }
        else {
            var j = this.n(a, b, c, d, e, f, h);
            f = j.p5;
        }
        return {
            p5: f
        };
    };
    StrippedCalculator.prototype.l = function (a, b, c, d, e, f, g) {
        var h = StrippedCalculator.k(d);
        if (h <= 0) {
            return {
                p5: f
            };
        }
        var i = f.width;
        var j = (h * e) / i;
        var k = f.x;
        var l = 0;
        for (var m = 0; m < d.count; ++m) {
            var n = d._inner[m];
            var o = Math.floor((n.e() / h) * i);
            var p = new Rect(0, k, f.y, o, j);
            if (TreemapLayoutCalculator.b(p, c)) {
                a.add_1(n);
            }
            else {
                l = p.right;
                this.g(b, n, p, c);
            }
            if (a.contains(n)) {
                h -= n.e();
            }
            else {
                k += o;
            }
        }
        this.f(a, b, d, f.right - k, f, c);
        f.y = f.y + j;
        if (f.height < j) {
            f.height = 0;
        }
        else {
            f.height = f.height - j;
        }
        d.clear();
        return {
            p5: f
        };
    };
    StrippedCalculator.prototype.n = function (a, b, c, d, e, f, g) {
        var h = StrippedCalculator.k(d);
        if (h <= 0) {
            return {
                p5: f
            };
        }
        var i = f.height;
        var j = (h * e) / i;
        var k = f.y;
        var l = 0;
        for (var m = 0; m < d.count; ++m) {
            var n = d._inner[m];
            var o = Math.floor((n.e() / h) * i);
            var p = new Rect(0, f.x, k, j, o);
            if (TreemapLayoutCalculator.b(p, c)) {
                a.add_1(n);
            }
            else {
                l = p.bottom;
                this.g(b, n, p, c);
            }
            if (a.contains(n)) {
                h -= n.e();
            }
            else {
                k += o;
            }
        }
        this.e(a, b, d, f.bottom - k, f, c);
        f.x = f.x + j;
        if (f.width < j) {
            f.width = 0;
        }
        else {
            f.width = f.width - j;
        }
        d.clear();
        return {
            p5: f
        };
    };
    StrippedCalculator.j = function (a, b, c) {
        if (a.count == 0) {
            return 1.7976931348623157E+308;
        }
        var d = StrippedCalculator.k(a);
        var e = (d * c) / b;
        var f = 0;
        for (var g = 0; g < a.count; g++) {
            var h = a._inner[g];
            var i = (h.e() / d) * b;
            f += Math.max(i / e, e / i);
        }
        f /= a.count;
        return f;
    };
    StrippedCalculator.k = function (a) {
        var b = 0;
        for (var c = 0; c < a.count; c++) {
            var d = a._inner[c];
            b += d.e();
        }
        return b;
    };
    StrippedCalculator.p = function (a, b, c, d) {
        var e = 0;
        for (var f = 0; f < c.count; f++) {
            var g = c._inner[f];
        }
        var h = e;
        var i = b.f * b.f / (d.width * d.height);
        for (var j = 0; j < c.count; j++) {
            var k = c._inner[j];
            if (k.e() / h < i) {
                a.add_1(k);
            }
        }
    };
    StrippedCalculator.$t = markType(StrippedCalculator, 'StrippedCalculator', TreemapLayoutCalculator.$);
    return StrippedCalculator;
}(TreemapLayoutCalculator));
export { StrippedCalculator };
/**
 * @hidden
 */
var SliceAndDiceCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SliceAndDiceCalculator, _super);
    function SliceAndDiceCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SliceAndDiceCalculator.prototype.d = function (a, b) {
        a.g();
        this.m(a, b.b.a, b.h, b, 0);
    };
    SliceAndDiceCalculator.prototype.o = function (a, b, c) {
        return c.j;
    };
    SliceAndDiceCalculator.prototype.m = function (a, b, c, d, e) {
        var e_4, _a;
        if (d.g >= 0 && e > d.g) {
            return;
        }
        if (b == d.c) {
            d.d = true;
            this.g(a, b, c, d);
            var f = new Rect(0, c.left, c.top + d.e, c.width, c.height - d.e);
            c = f;
        }
        if (!d.d) {
            try {
                for (var _b = __values(fromEnum(b.b)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var g = _c.value;
                    this.m(a, g, c, d, e + 1);
                }
            }
            catch (e_4_1) {
                e_4 = { error: e_4_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_4)
                        throw e_4.error;
                }
            }
            return;
        }
        var h = this.o(b, c, d);
        var i = SliceAndDiceCalculator.j(b, d, e);
        var j = h.left + h.right;
        var k = h.top + h.bottom;
        var l = new Rect(0, c.left, c.top, c.width, c.height);
        if (j >= l.width || k >= l.height) {
            return;
        }
        l.x = l.x + h.left;
        l.width = l.width - j;
        l.y = l.y + h.top;
        l.height = l.height - k;
        var m = new Size(1, l.width, l.height);
        var n = l.left;
        var o = l.top;
        var p = new HashSet$1(TreemapTreeNode.$, 0);
        var q = SliceAndDiceCalculator.k(b.b, b, d, m, p);
        if (q) {
            SliceAndDiceCalculator.n(b.b, b, d, m, p);
        }
        var r = 0;
        for (var s = 0; s < b.b.count; s++) {
            var t = b.b._inner[s];
            if (!p.contains(t)) {
                r += t.e();
            }
        }
        var u = (i == 0) ? m.height : m.width;
        var v = new Rect(4);
        for (var w = 0; w < b.b.count; w++) {
            var x = b.b._inner[w];
            if (p.contains(x) || isNaN_(x.e())) {
                continue;
            }
            if (r <= 0 || u <= 0) {
                break;
            }
            var y = x.e() / r;
            v.x = n;
            v.y = o;
            if (i == 0) {
                v.width = m.width;
                v.height = Math.round(u * y);
            }
            else {
                v.width = Math.round(u * y);
                v.height = m.height;
            }
            this.g(a, x, new Rect(0, v.left, v.top, v.width, v.height), d);
            if (i == 0) {
                o += v.height;
                u -= v.height;
            }
            else {
                n += v.width;
                u -= v.width;
            }
            r -= x.e();
            var z = this.h(a, x, d);
            if (z.isEmpty) {
                continue;
            }
            var aa = new Rect(0, z.left, z.top + d.e, z.width, Math.max(z.height - d.e, 0));
            this.m(a, x, aa, d, e + 1);
        }
        if (b == d.c) {
            d.d = false;
        }
    };
    SliceAndDiceCalculator.j = function (a, b, c) {
        var d = 0;
        if (b.a == 0) {
            d = (c % 2 == 0) ? 0 : 1;
        }
        else {
            d = (c % 2 == 0) ? 1 : 0;
        }
        return d;
    };
    SliceAndDiceCalculator.k = function (a, b, c, d, e) {
        var f = true;
        var g = b.e();
        var h = Math.min(d.width, d.height);
        for (var i = 0; i < a.count; i++) {
            var j = a._inner[i];
            if (Math.round(j.e() / g * h) < c.f) {
                if (!e.contains(j)) {
                    e.add_1(j);
                }
            }
            else {
                f = false;
            }
        }
        return f;
    };
    SliceAndDiceCalculator.n = function (a, b, c, d, e) {
        var f = new List$1(TreemapTreeNode.$, 0);
        f.o(a);
        f.aa(function (g, h) {
            if (g.e() > h.e()) {
                return 1;
            }
            else if (g.e() < h.e()) {
                return -1;
            }
            return 0;
        });
        var g = 0;
        var h = Math.min(d.width, d.height);
        for (var i = 0; i < f.count; i++) {
            var j = f._inner[i];
            if (isNaN_(j.e())) {
                continue;
            }
            g += j.e();
            if (j.e() / g * h < c.f) {
                break;
            }
            else {
                if (e.contains(j)) {
                    e.remove(j);
                }
            }
        }
    };
    SliceAndDiceCalculator.$t = markType(SliceAndDiceCalculator, 'SliceAndDiceCalculator', TreemapLayoutCalculator.$);
    SliceAndDiceCalculator.l = null;
    return SliceAndDiceCalculator;
}(TreemapLayoutCalculator));
export { SliceAndDiceCalculator };
/**
 * @hidden
 */
var TreemapLayoutSettings = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapLayoutSettings, _super);
    function TreemapLayoutSettings() {
        var _this = _super.call(this) || this;
        _this.a = 0;
        _this.h = null;
        _this.b = null;
        _this.j = null;
        _this.i = null;
        _this.e = 0;
        _this.f = 0;
        _this.g = 0;
        _this.c = null;
        _this.d = false;
        _this.g = -1;
        _this.d = false;
        return _this;
    }
    TreemapLayoutSettings.$t = markType(TreemapLayoutSettings, 'TreemapLayoutSettings');
    return TreemapLayoutSettings;
}(Base));
export { TreemapLayoutSettings };
/**
 * @hidden
 */
var SquarifiedCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SquarifiedCalculator, _super);
    function SquarifiedCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SquarifiedCalculator.prototype.n = function (a, b, c, d, e) {
        var e_5, _a, e_6, _b, e_7, _c;
        if (d.g >= 0 && e > d.g) {
            return;
        }
        if (b == d.c) {
            d.d = true;
            this.g(a, b, c, d);
            var f = new Rect(0, c.left, c.top + d.e, c.width, c.height - d.e);
            c = f;
        }
        if (!d.d) {
            try {
                for (var _d = __values(fromEnum(b.b)), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var g = _e.value;
                    this.n(a, g, c, d, e + 1);
                }
            }
            catch (e_5_1) {
                e_5 = { error: e_5_1 };
            }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return))
                        _a.call(_d);
                }
                finally {
                    if (e_5)
                        throw e_5.error;
                }
            }
            return;
        }
        var h = this.o(b, c, d);
        var i = new Rect(0, c.left, c.top, c.width, c.height);
        var j = h.left + h.right;
        var k = h.top + h.bottom;
        if (j >= i.width || k >= i.height) {
            return;
        }
        i.x = i.x + h.left;
        i.width = i.width - j;
        i.y = i.y + h.top;
        i.height = i.height - k;
        var l = i.left;
        var m = i.top;
        var n = new List$1(TreemapTreeNode.$, 0);
        var o = b.e();
        var p = new Rect(0, i.left, i.top, i.width, i.height);
        var q = (i.width * i.height) / o;
        var r = new List$1(TreemapTreeNode.$, 1, b.b);
        r.aa(function (s, t) {
            if (t.e() < s.e()) {
                return -1;
            }
            if (t.e() > s.e()) {
                return 1;
            }
            return 0;
        });
        var s = new AreaInfo();
        s.b = i;
        s.a = o;
        var t = new HashSet$1(TreemapTreeNode.$, 0);
        try {
            for (var _f = __values(fromEnum(r)), _g = _f.next(); !_g.done; _g = _f.next()) {
                var u = _g.value;
                if (TreemapLayoutCalculator.c(u, p, o, d) || isNaN_(u.e())) {
                    t.add_1(u);
                    continue;
                }
                var v = Math.min(i.width, i.height);
                var w = SquarifiedCalculator.j(n, v, q);
                n.add(u);
                var x = SquarifiedCalculator.j(n, v, q);
                if (w <= x) {
                    n.removeAt(n.count - 1);
                    this.l(t, a, n, s, d);
                    i = s.b;
                    n.add(u);
                }
            }
        }
        catch (e_6_1) {
            e_6 = { error: e_6_1 };
        }
        finally {
            try {
                if (_g && !_g.done && (_b = _f.return))
                    _b.call(_f);
            }
            finally {
                if (e_6)
                    throw e_6.error;
            }
        }
        this.l(t, a, n, s, d);
        i = s.b;
        try {
            for (var _h = __values(fromEnum(b.b)), _j = _h.next(); !_j.done; _j = _h.next()) {
                var y = _j.value;
                if (t.contains(y)) {
                    continue;
                }
                var z = this.h(a, y, d);
                if (z.isEmpty) {
                    continue;
                }
                var aa = new Rect(0, z.left, z.top + d.e, z.width, Math.max(z.height - d.e, 0));
                this.n(a, y, aa, d, e + 1);
            }
        }
        catch (e_7_1) {
            e_7 = { error: e_7_1 };
        }
        finally {
            try {
                if (_j && !_j.done && (_c = _h.return))
                    _c.call(_h);
            }
            finally {
                if (e_7)
                    throw e_7.error;
            }
        }
        if (b == d.c) {
            d.d = false;
        }
    };
    SquarifiedCalculator.prototype.o = function (a, b, c) {
        return c.j;
    };
    SquarifiedCalculator.j = function (a, b, c) {
        var e_8, _a;
        if (a.count == 0) {
            return 1.7976931348623157E+308;
        }
        var d = 0;
        var e = 1.7976931348623157E+308;
        var f = -1.7976931348623157E+308;
        try {
            for (var _b = __values(fromEnum(a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var g = _c.value;
                var h = g.e() * c;
                if (e > h) {
                    e = h;
                }
                if (f < h) {
                    f = h;
                }
                d += h;
            }
        }
        catch (e_8_1) {
            e_8 = { error: e_8_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_8)
                    throw e_8.error;
            }
        }
        var i = (b * b * f) / (d * d);
        var j = (d * d) / (b * b * e);
        return Math.max(i, j);
    };
    SquarifiedCalculator.prototype.l = function (a, b, c, d, e) {
        if (c.count < 1) {
            return;
        }
        var f = 0;
        for (var g = 0; g < c.count; ++g) {
            f += c._inner[g].e();
        }
        if (f <= 0) {
            return;
        }
        if (d.b.width > d.b.height) {
            this.k(a, b, c, f, d, e);
        }
        else {
            this.m(a, b, c, f, d, e);
        }
    };
    SquarifiedCalculator.prototype.m = function (a, b, c, d, e, f) {
        var g = e.b;
        var h = e.a;
        var i = Math.round((d / h) * g.height);
        var j = g.x;
        for (var k = 0; k < c.count; ++k) {
            var l = c._inner[k];
            if (g.right < j) {
                a.add_1(l);
                continue;
            }
            var m = Math.floor((l.e() / d) * g.width);
            var n = new Rect(0, j, g.y, m, i);
            if (TreemapLayoutCalculator.b(n, f)) {
                a.add_1(l);
                continue;
            }
            this.g(b, l, n, f);
            j += n.width;
        }
        this.f(a, b, c, g.right - j, g, f);
        g.y = g.y + i;
        if (g.height < i) {
            g.height = 0;
        }
        else {
            g.height = g.height - i;
        }
        h -= d;
        e.a = h;
        e.b = g;
        c.clear();
    };
    SquarifiedCalculator.prototype.k = function (a, b, c, d, e, f) {
        var g = e.b;
        var h = e.a;
        var i = Math.round((d / h) * g.width);
        var j = g.y;
        for (var k = 0; k < c.count; ++k) {
            var l = c._inner[k];
            if (g.bottom < j) {
                a.add_1(l);
                continue;
            }
            var m = Math.floor((l.e() / d) * g.height);
            var n = new Rect(0, g.x, j, i, m);
            if (TreemapLayoutCalculator.b(n, f)) {
                a.add_1(l);
                continue;
            }
            this.g(b, l, n, f);
            j += n.height;
        }
        this.e(a, b, c, g.bottom - j, g, f);
        g.x = g.x + i;
        if (g.width < i) {
            g.width = 0;
        }
        else {
            g.width = g.width - i;
        }
        h -= d;
        e.a = h;
        e.b = g;
        c.clear();
    };
    SquarifiedCalculator.prototype.d = function (a, b) {
        a.g();
        this.n(a, b.b.a, b.h, b, 0);
    };
    SquarifiedCalculator.$t = markType(SquarifiedCalculator, 'SquarifiedCalculator', TreemapLayoutCalculator.$);
    return SquarifiedCalculator;
}(TreemapLayoutCalculator));
export { SquarifiedCalculator };
/**
 * @hidden
 */
var TreemapTreeData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapTreeData, _super);
    function TreemapTreeData() {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.b = null;
        _this.d = null;
        _this.c = null;
        _this.b = new Dictionary$2(String_$type, TreemapTreeNode.$, 0);
        _this.d = new List$1(String_$type, 0);
        _this.c = new Dictionary$2(String_$type, List$1.$.specialize(TreemapTreeNode.$), 0);
        _this.a = new TreemapTreeNode();
        return _this;
    }
    TreemapTreeData.prototype.e = function (a) {
        var e_9, _a;
        var _this = this;
        this.b.addItem(a.i, a);
        this.d.add(a.i);
        if (a.k == null) {
            this.a.b.add(a);
        }
        else if (this.b.containsKey(a.k)) {
            this.b.item(a.k).b.add(a);
        }
        else {
            var b_1;
            if (!((function () { var c = _this.c.tryGetValue(a.k, b_1); b_1 = c.p1; return c.ret; })())) {
                b_1 = new List$1(TreemapTreeNode.$, 0);
                this.c.item(a.k, b_1);
            }
            b_1.add(a);
        }
        if (this.c.containsKey(a.i)) {
            try {
                for (var _b = __values(fromEnum(this.c.item(a.i))), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    a.b.add(c);
                }
            }
            catch (e_9_1) {
                e_9 = { error: e_9_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_9)
                        throw e_9.error;
                }
            }
            this.c.removeItem(a.i);
        }
    };
    TreemapTreeData.prototype.g = function (a) {
        if (isNaN_(a.f)) {
            if (a.b.count > 0) {
                a.d = 0;
            }
            for (var b = 0; b < a.b.count; b++) {
                var c = a.b._inner[b];
                this.g(c);
                if (isNaN_(c.f)) {
                    a.d = a.d + c.d;
                }
                else {
                    a.d = a.d + c.f;
                }
            }
        }
    };
    TreemapTreeData.prototype.f = function () {
        this.g(this.a);
    };
    TreemapTreeData.$t = markType(TreemapTreeData, 'TreemapTreeData');
    return TreemapTreeData;
}(Base));
export { TreemapTreeData };
/**
 * @hidden
 */
var TreemapTreeNode = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapTreeNode, _super);
    function TreemapTreeNode() {
        var _this = _super.call(this) || this;
        _this.i = null;
        _this.k = null;
        _this.b = null;
        _this.c = null;
        _this.f = 0;
        _this.g = null;
        _this.d = 0;
        _this.j = null;
        _this.h = null;
        _this.a = false;
        _this.b = new List$1(TreemapTreeNode.$, 0);
        _this.f = NaN;
        _this.g = null;
        _this.c = new List$1(TreemapNodeStyleMapping.$, 0);
        _this.d = 0;
        return _this;
    }
    TreemapTreeNode.prototype.e = function () {
        if (isNaN_(this.f)) {
            return this.d;
        }
        return this.f;
    };
    TreemapTreeNode.$t = markType(TreemapTreeNode, 'TreemapTreeNode');
    return TreemapTreeNode;
}(Base));
export { TreemapTreeNode };
/**
 * @hidden
 */
var Treemap = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(Treemap, _super);
    function Treemap() {
        var _this = _super.call(this) || this;
        _this.g = null;
        _this.f = null;
        _this.e = null;
        _this.ba = false;
        _this.an = null;
        _this.im = null;
        _this.ap = null;
        _this.ea = null;
        _this.d9 = "Root";
        _this.d4 = " : ";
        _this.d8 = null;
        _this.d7 = null;
        _this.d5 = null;
        _this.d6 = null;
        _this.bq = null;
        _this.a = new BrushCollection();
        _this.ae = new TreemapNodeStyleMappingCollection();
        _this.c = 0;
        _this.bb = false;
        _this.dw = 10;
        _this.bx = NaN;
        _this.bw = NaN;
        _this.n = 0;
        _this.k = 0;
        _this.hy = null;
        _this.hs = null;
        _this.hq = null;
        _this.hx = null;
        _this.hv = null;
        _this.hr = null;
        _this.hz = null;
        _this.hp = null;
        _this.hu = null;
        _this.ht = null;
        _this.at = null;
        _this.as = null;
        _this.h = 0;
        _this.b0 = DeviceUtils.g(5);
        _this.b2 = DeviceUtils.g(3);
        _this.b1 = DeviceUtils.g(5);
        _this.bz = DeviceUtils.g(3);
        _this.ca = DeviceUtils.g(10);
        _this.cc = DeviceUtils.g(10);
        _this.cb = DeviceUtils.g(10);
        _this.b9 = DeviceUtils.g(10);
        _this.b5 = DeviceUtils.g(5);
        _this.b7 = DeviceUtils.g(3);
        _this.b6 = DeviceUtils.g(5);
        _this.b4 = DeviceUtils.g(3);
        _this.cf = DeviceUtils.g(0);
        _this.cj = DeviceUtils.g(0);
        _this.ch = DeviceUtils.g(0);
        _this.cd = DeviceUtils.g(0);
        _this.cg = DeviceUtils.g(3);
        _this.ck = DeviceUtils.g(3);
        _this.ci = DeviceUtils.g(3);
        _this.ce = DeviceUtils.g(3);
        _this.hm = 1;
        _this.iq = 1;
        _this.by = NaN;
        _this.hw = null;
        _this.cm = NaN;
        _this.ah = 0;
        _this.r = 0;
        _this.b8 = DeviceUtils.g(3);
        _this.dx = 500;
        _this.cn = 0;
        _this.dv = null;
        _this.aq = null;
        _this.a1 = null;
        _this.ax = null;
        _this.a0 = null;
        _this.ay = null;
        _this.az = null;
        _this.cl = NaN;
        _this.bt = 1;
        _this.b3 = NaN;
        _this.bs = 0.5;
        _this.a9 = false;
        _this.bf = false;
        _this.bi = false;
        _this.be = false;
        _this.aj = null;
        _this.q = null;
        _this.bu = NaN;
        _this.bv = DeviceUtils.g(1);
        _this.propertyChanged = null;
        _this.w = null;
        _this.t = null;
        _this.d2 = null;
        _this.am = null;
        _this.al = null;
        _this.il = null;
        _this.nodeStyling = null;
        _this.nodePointerOver = null;
        _this.nodePointerEnter = null;
        _this.nodePointerLeave = null;
        _this.nodePointerPressed = null;
        _this.nodePointerReleased = null;
        var a = new TreemapView();
        a.a = _this;
        _this.q = new SquarifiedCalculator();
        _this.an = a;
        _this.an.aw();
        _this.dv = function (b, c) { return _this.go(c.action, c.position, c.count, c.propertyName); };
        _this.im = Rect.empty;
        _this.g = new TreemapFrame();
        _this.f = new TreemapFrame();
        _this.e = new TreemapFrame();
        _this.bf = true;
        _this.ap = new DoubleAnimator(0, 1, _this.d1);
        _this.ap.b = EasingFunctions.cubicEase;
        var b = _this.ap;
        b.propertyChanged = delegateCombine(b.propertyChanged, runOn(_this, _this.gn));
        var c = _this.ae;
        c.collectionChanged = delegateCombine(c.collectionChanged, runOn(_this, _this.gl));
        var d = _this.ae;
        d.collectionResetting = delegateCombine(d.collectionResetting, runOn(_this, _this.gm));
        return _this;
    }
    Treemap.prototype.gm = function (a, b) {
        var e_10, _a;
        try {
            for (var _b = __values(fromEnum(this.styleMappings)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                c.propertyChanged = delegateRemove(c.propertyChanged, runOn(this, this.hi));
            }
        }
        catch (e_10_1) {
            e_10 = { error: e_10_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_10)
                    throw e_10.error;
            }
        }
        this.bf = true;
        this.bi = true;
        this.an.a1();
    };
    Treemap.prototype.gl = function (a, b) {
        var e_11, _a, e_12, _b;
        if (b.oldItems != null) {
            try {
                for (var _c = __values(fromEn(b.oldItems)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var c = _d.value;
                    var d = c;
                    if (d != null) {
                        d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.hi));
                    }
                }
            }
            catch (e_11_1) {
                e_11 = { error: e_11_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_11)
                        throw e_11.error;
                }
            }
        }
        if (b.newItems != null) {
            try {
                for (var _e = __values(fromEn(b.newItems)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var e = _f.value;
                    var f = e;
                    if (f != null) {
                        f.propertyChanged = delegateCombine(f.propertyChanged, runOn(this, this.hi));
                    }
                }
            }
            catch (e_12_1) {
                e_12 = { error: e_12_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_12)
                        throw e_12.error;
                }
            }
        }
        this.bf = true;
        this.bi = true;
        this.an.a1();
    };
    Treemap.prototype.hi = function (a, b) {
        this.bf = true;
        this.bi = true;
        this.an.a1();
    };
    Treemap.prototype.go = function (a, b, c, d) {
        this.aj = null;
        this.bf = true;
        this.be = true;
        this.bi = true;
        this.an.a1();
    };
    Treemap.prototype.notifySizeChanged = function () {
        this.an.ar();
    };
    Treemap.prototype.destroy = function () {
        this.provideContainer(null);
    };
    Treemap.prototype.ao = function () {
        var a = new TreemapVisualData();
        a.viewport = new RectData(this.ip.left, this.ip.top, this.ip.width, this.ip.height);
        a.nodes = new TreemapNodeVisualDataList();
        this.an.an(a);
        return a;
    };
    Treemap.prototype.ej = function () {
        var a = this.ao();
        a.scaleByViewport();
        return a.serialize();
    };
    Treemap.prototype.g7 = function (a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        this.hc(a, b, c);
    };
    Treemap.prototype.hc = function (a, b, c) {
        var _this = this;
        switch (a) {
            case "FocusItem":
                this.g1();
                break;
            case "LayoutType":
                {
                    switch (EnumUtil.getEnumValue(TreemapLayoutType_$type, c)) {
                        case 0:
                            this.q = new SquarifiedCalculator();
                            break;
                        case 1:
                            this.q = new SliceAndDiceCalculator();
                            break;
                        case 2:
                            this.q = new StrippedCalculator();
                            break;
                    }
                    this.bf = true;
                    this.an.a1();
                }
                break;
            case "BreadcrumbSequence":
                this.bf = true;
                this.an.a1();
                break;
            case "RootTitle":
                this.bf = true;
                this.an.a1();
                break;
            case "ValueMemberPath":
                if (this.ar != null) {
                    this.ar.deregisterColumn(this.a8);
                    this.a8 = this.a6(this.gi);
                    this.aj = null;
                }
                this.bf = true;
                this.be = true;
                this.an.a1();
                break;
            case "CustomValueMemberPath":
                if (this.ar != null) {
                    this.ar.deregisterColumn(this.a2);
                    this.a2 = this.a7(this.eg);
                    this.aj = null;
                }
                this.bf = true;
                this.be = true;
                this.an.a1();
                break;
            case "IdMemberPath":
                if (this.ar != null) {
                    this.ar.deregisterColumn(this.a3);
                    this.a3 = this.a7(this.e5);
                    this.aj = null;
                }
                this.bf = true;
                this.be = true;
                this.an.a1();
                break;
            case "LabelMemberPath":
                if (this.ar != null) {
                    this.ar.deregisterColumn(this.a4);
                    this.a4 = this.a7(this.ff);
                    this.aj = null;
                }
                this.bf = true;
                this.be = true;
                this.an.a1();
                break;
            case "ParentIdMemberPath":
                if (this.ar != null) {
                    this.ar.deregisterColumn(this.a5);
                    this.a5 = this.a7(this.fw);
                    this.aj = null;
                }
                this.bf = true;
                this.be = true;
                this.an.a1();
                break;
            case "ItemsSource":
                this.ar = ((function () {
                    var $ret = new FastItemsSource();
                    $ret.e = _this.dataSource;
                    return $ret;
                })());
                break;
            case "HeaderLabelLeftMargin":
            case "HeaderLabelTopMargin":
            case "HeaderLabelRightMargin":
            case "HeaderLabelBottomMargin":
            case "LabelLeftMargin":
            case "LabelTopMargin":
            case "LabelRightMargin":
            case "LabelBottomMargin":
            case "ParentNodeLeftMargin":
            case "ParentNodeTopMargin":
            case "ParentNodeRightMargin":
            case "ParentNodeBottomMargin":
            case "ParentNodeLeftPadding":
            case "ParentNodeTopPadding":
            case "ParentNodeRightPadding":
            case "ParentNodeBottomPadding":
            case "HeaderTextColor":
            case "HeaderHoverTextColor":
            case "OverlayHeaderHoverBackground":
            case "HeaderHoverBackground":
            case "StrokeThickness":
            case "Outline":
            case "FillBrushes":
            case "IsFillScaleLogarithmic":
            case "FillScaleMinimumValue":
            case "FillScaleMaximumValue":
            case "HeaderBackground":
            case "OverlayHeaderBackground":
            case "HeaderHeight":
            case "FillScaleLogarithmBase":
            case "FillScaleMode":
            case "MinimumDisplaySize":
            case "LayoutOrientation":
            case "LabelHorizontalAlignment":
            case "LabelVerticalAlignment":
            case "HeaderDisplayMode":
            case "LabelHorizontalFitMode":
            case "LabelVerticalFitMode":
                this.bf = true;
                this.an.a1();
                break;
            case "TextStyle":
                this.an.ay(this.aw);
                this.bf = true;
                this.an.a1();
                break;
            case "HeaderTextStyle":
                this.an.av(this.au);
                this.bf = true;
                this.an.a1();
                break;
            case "PixelScalingRatio":
                if (!isNaN_(c)) {
                    this.cp = c;
                }
                break;
            case "ActualPixelScalingRatio":
                if (isNaN_(this.c0)) {
                    this.co = this.cp / 2;
                }
                if (this.an != null) {
                    this.an.ax();
                }
                break;
            case "InteractionPixelScalingRatio":
                if (!isNaN_(c)) {
                    this.co = c;
                }
                break;
            case "ActualInteractionPixelScalingRatio":
                if (this.an != null) {
                    this.an.ax();
                }
                break;
            case "TransitionProgress":
                if (this.du >= 1) {
                    this.ap.w();
                    this.an.ax();
                    var d = this.f;
                    this.f = this.g;
                    this.g = d;
                    this.hb();
                    this.he(this.f);
                    this.an.a0();
                    this.an.a1();
                    return;
                }
                this.e.h(this.du, this.g, this.f);
                this.he(this.e);
                this.an.a0();
                break;
            case "Viewport":
                this.bf = true;
                this.an.a1();
                break;
            case "FastItemsSource":
                var e = b;
                var f = c;
                if (b != null) {
                    e.event = delegateRemove(e.event, this.dv);
                    this.a9 = false;
                    e.deregisterColumn(this.a8);
                    e.deregisterColumn(this.a3);
                    e.deregisterColumn(this.a5);
                    e.deregisterColumn(this.a4);
                    e.deregisterColumn(this.a2);
                    this.a8 = null;
                    this.a3 = null;
                    this.a5 = null;
                    this.a4 = null;
                    this.aj = null;
                }
                if (c != null) {
                    f.event = delegateCombine(f.event, this.dv);
                    this.a9 = true;
                    this.a8 = this.a6(this.gi);
                    this.a3 = this.a7(this.e5);
                    this.a5 = this.a7(this.fw);
                    this.a4 = this.a7(this.ff);
                    this.a2 = this.a7(this.eg);
                }
                this.bf = true;
                this.be = true;
                this.an.a1();
                break;
            case "TransitionDuration":
                this.ap.r = this.d1;
                break;
        }
    };
    Treemap.prototype.g1 = function () {
        if (this.ba) {
            return;
        }
        if (this.aj == null) {
            return;
        }
        if (this.d3 == null) {
            this.al = null;
            this.bf = true;
            this.an.a1();
            return;
        }
        for (var a = 0; a < this.aj.d.count; a++) {
            var b = this.aj.b.item(this.aj.d._inner[a]);
            if (b.h == this.d3) {
                this.al = b;
                this.bf = true;
                this.an.a1();
                break;
            }
        }
    };
    Object.defineProperty(Treemap.prototype, "ip", {
        get: function () {
            return this.im;
        },
        set: function (a) {
            var b = this.im;
            this.im = a;
            if (!b.equals1(this.im)) {
                this.g7("Viewport", b, this.im);
            }
        },
        enumerable: false,
        configurable: true
    });
    Treemap.prototype.gn = function (a, b) {
        this.du = this.ap.o;
    };
    Object.defineProperty(Treemap.prototype, "gi", {
        get: function () {
            return this.ea;
        },
        set: function (a) {
            var b = this.ea;
            this.ea = a;
            if (b != this.ea) {
                this.hc("ValueMemberPath", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "f8", {
        get: function () {
            return this.d9;
        },
        set: function (a) {
            var b = this.d9;
            this.d9 = a;
            if (b != this.d9) {
                this.hc("RootTitle", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "ed", {
        get: function () {
            return this.d4;
        },
        set: function (a) {
            var b = this.d4;
            this.d4 = a;
            if (b != this.d9) {
                this.hc("BreadcrumbSequence", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "fw", {
        get: function () {
            return this.d8;
        },
        set: function (a) {
            var b = this.d8;
            this.d8 = a;
            if (b != this.d8) {
                this.g7("ParentIdMemberPath", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "ff", {
        get: function () {
            return this.d7;
        },
        set: function (a) {
            var b = this.d7;
            this.d7 = a;
            if (b != this.d7) {
                this.g7("LabelMemberPath", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "eg", {
        get: function () {
            return this.d5;
        },
        set: function (a) {
            var b = this.d5;
            this.d5 = a;
            if (b != this.d5) {
                this.g7("CustomValueMemberPath", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "e5", {
        get: function () {
            return this.d6;
        },
        set: function (a) {
            var b = this.d6;
            this.d6 = a;
            if (b != this.d6) {
                this.g7("IdMemberPath", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "dataSource", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            var b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.g7("ItemsSource", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "b", {
        get: function () {
            return this.a;
        },
        set: function (a) {
            var b = this.a;
            this.a = a;
            if (b != this.a) {
                this.g7("FillBrushes", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "styleMappings", {
        get: function () {
            return this.ae;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "d", {
        get: function () {
            return this.c;
        },
        set: function (a) {
            var b = this.c;
            this.c = a;
            if (b != this.c) {
                this.g7("FillScaleMode", enumGetBox(TreemapFillScaleMode_$type, b), enumGetBox(TreemapFillScaleMode_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "bg", {
        get: function () {
            return this.bb;
        },
        set: function (a) {
            var b = this.bb;
            this.bb = a;
            if (b != this.bb) {
                this.g7("IsFillScaleLogarithmic", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "dy", {
        get: function () {
            return this.dw;
        },
        set: function (a) {
            var b = this.dw;
            this.dw = a;
            if (b != this.dw) {
                this.g7("FillScaleLogarithmBase", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "ct", {
        get: function () {
            return this.bx;
        },
        set: function (a) {
            var b = this.bx;
            this.bx = a;
            if (b != this.bx) {
                this.g7("FillScaleMinimumValue", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "cs", {
        get: function () {
            return this.bw;
        },
        set: function (a) {
            var b = this.bw;
            this.bw = a;
            if (b != this.bw) {
                this.g7("FillScaleMaximumValue", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "p", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            var b = this.n;
            this.n = a;
            if (b != this.n) {
                this.g7("LabelVerticalFitMode", enumGetBox(TreemapLabelVerticalFitMode_$type, b), enumGetBox(TreemapLabelVerticalFitMode_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "o", {
        get: function () {
            return this.p == 0 ? 1 : this.p;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "m", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            var b = this.k;
            this.k = a;
            if (b != this.k) {
                this.g7("LabelHorizontalFitMode", enumGetBox(TreemapLabelHorizontalFitMode_$type, b), enumGetBox(TreemapLabelHorizontalFitMode_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "l", {
        get: function () {
            return this.m == 0 ? 1 : this.m;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h9", {
        get: function () {
            return this.hy;
        },
        set: function (a) {
            var b = this.hy;
            this.hy = a;
            if (b != this.hy) {
                this.g7("OverlayHeaderHoverBackground", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h3", {
        get: function () {
            return this.hs;
        },
        set: function (a) {
            var b = this.hs;
            this.hs = a;
            if (b != this.hs) {
                this.g7("HeaderHoverBackground", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h1", {
        get: function () {
            return this.hq;
        },
        set: function (a) {
            var b = this.hq;
            this.hq = a;
            if (b != this.hq) {
                this.g7("HeaderBackground", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h8", {
        get: function () {
            return this.hx;
        },
        set: function (a) {
            var b = this.hx;
            this.hx = a;
            if (b != this.hx) {
                this.g7("OverlayHeaderBackground", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h6", {
        get: function () {
            return this.hv;
        },
        set: function (a) {
            var b = this.hv;
            this.hv = a;
            if (b != this.hv) {
                this.g7("HeaderTextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h2", {
        get: function () {
            return this.hr;
        },
        set: function (a) {
            var b = this.hr;
            this.hr = a;
            if (b != this.hr) {
                this.g7("HeaderDarkTextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "ik", {
        get: function () {
            return this.hz;
        },
        set: function (a) {
            var b = this.hz;
            this.hz = a;
            if (b != this.hz) {
                this.g7("TextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h0", {
        get: function () {
            return this.hp;
        },
        set: function (a) {
            var b = this.hp;
            this.hp = a;
            if (b != this.hp) {
                this.g7("DarkTextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h5", {
        get: function () {
            return this.hu;
        },
        set: function (a) {
            var b = this.hu;
            this.hu = a;
            if (b != this.hu) {
                this.g7("HeaderHoverTextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h4", {
        get: function () {
            return this.ht;
        },
        set: function (a) {
            var b = this.ht;
            this.ht = a;
            if (b != this.ht) {
                this.g7("HeaderHoverDarkTextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "aw", {
        get: function () {
            return this.at;
        },
        set: function (a) {
            var b = this.at;
            this.at = a;
            if (b != this.at) {
                this.g7("TextStyle", b, this.at);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "au", {
        get: function () {
            return this.as;
        },
        set: function (a) {
            var b = this.as;
            this.as = a;
            if (b != this.as) {
                this.g7("HeaderTextStyle", b, this.as);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "j", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            var b = this.h;
            this.h = a;
            if (b != this.h) {
                this.g7("HeaderDisplayMode", enumGetBox(TreemapHeaderDisplayMode_$type, b), enumGetBox(TreemapHeaderDisplayMode_$type, this.h));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "i", {
        get: function () {
            return this.j == 0 ? 1 : this.j;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "cx", {
        get: function () {
            return this.b0;
        },
        set: function (a) {
            var b = this.b0;
            this.b0 = a;
            if (b != this.b0) {
                this.g7("HeaderLabelLeftMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "cz", {
        get: function () {
            return this.b2;
        },
        set: function (a) {
            var b = this.b2;
            this.b2 = a;
            if (b != this.b2) {
                this.g7("HeaderLabelTopMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "cy", {
        get: function () {
            return this.b1;
        },
        set: function (a) {
            var b = this.b1;
            this.b1 = a;
            if (b != this.b1) {
                this.g7("HeaderLabelRightMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "cw", {
        get: function () {
            return this.bz;
        },
        set: function (a) {
            var b = this.bz;
            this.bz = a;
            if (b != this.bz) {
                this.g7("HeaderLabelBottomMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c7", {
        get: function () {
            return this.ca;
        },
        set: function (a) {
            var b = this.ca;
            this.ca = a;
            if (b != this.ca) {
                this.g7("OverlayHeaderLabelLeftMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c9", {
        get: function () {
            return this.cc;
        },
        set: function (a) {
            var b = this.cc;
            this.cc = a;
            if (b != this.cc) {
                this.g7("OverlayHeaderLabelTopMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c8", {
        get: function () {
            return this.cb;
        },
        set: function (a) {
            var b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.g7("OverlayHeaderLabelRightMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c6", {
        get: function () {
            return this.b9;
        },
        set: function (a) {
            var b = this.b9;
            this.b9 = a;
            if (b != this.b9) {
                this.g7("OverlayHeaderLabelBottomMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c2", {
        get: function () {
            return this.b5;
        },
        set: function (a) {
            var b = this.b5;
            this.b5 = a;
            if (b != this.b5) {
                this.g7("LabelLeftMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c4", {
        get: function () {
            return this.b7;
        },
        set: function (a) {
            var b = this.b7;
            this.b7 = a;
            if (b != this.b7) {
                this.g7("LabelTopMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c3", {
        get: function () {
            return this.b6;
        },
        set: function (a) {
            var b = this.b6;
            this.b6 = a;
            if (b != this.b6) {
                this.g7("LabelRightMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c1", {
        get: function () {
            return this.b4;
        },
        set: function (a) {
            var b = this.b4;
            this.b4 = a;
            if (b != this.b4) {
                this.g7("LabelBottomMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "dc", {
        get: function () {
            return this.cf;
        },
        set: function (a) {
            var b = this.cf;
            this.cf = a;
            if (b != this.cf) {
                this.g7("ParentNodeLeftMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "dg", {
        get: function () {
            return this.cj;
        },
        set: function (a) {
            var b = this.cj;
            this.cj = a;
            if (b != this.cj) {
                this.g7("ParentNodeTopMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "de", {
        get: function () {
            return this.ch;
        },
        set: function (a) {
            var b = this.ch;
            this.ch = a;
            if (b != this.ch) {
                this.g7("ParentNodeRightMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "da", {
        get: function () {
            return this.cd;
        },
        set: function (a) {
            var b = this.cd;
            this.cd = a;
            if (b != this.cd) {
                this.g7("ParentNodeBottomMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "dd", {
        get: function () {
            return this.cg;
        },
        set: function (a) {
            var b = this.cg;
            this.cg = a;
            if (b != this.cg) {
                this.g7("ParentNodeLeftPadding", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "dh", {
        get: function () {
            return this.ck;
        },
        set: function (a) {
            var b = this.ck;
            this.ck = a;
            if (b != this.ck) {
                this.g7("ParentNodeTopPadding", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "df", {
        get: function () {
            return this.ci;
        },
        set: function (a) {
            var b = this.ci;
            this.ci = a;
            if (b != this.ci) {
                this.g7("ParentNodeRightPadding", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "db", {
        get: function () {
            return this.ce;
        },
        set: function (a) {
            var b = this.ce;
            this.ce = a;
            if (b != this.ce) {
                this.g7("ParentNodeBottomPadding", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "hn", {
        get: function () {
            return this.hm;
        },
        set: function (a) {
            var b = this.hm;
            this.hm = a;
            if (b != this.hm) {
                this.g7("LabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "ir", {
        get: function () {
            return this.iq;
        },
        set: function (a) {
            var b = this.iq;
            this.iq = a;
            if (b != this.iq) {
                this.g7("LabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "cv", {
        get: function () {
            return this.by;
        },
        set: function (a) {
            var b = this.by;
            this.by = a;
            if (b != this.by) {
                this.g7("HeaderHeight", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "h7", {
        get: function () {
            return this.hw;
        },
        set: function (a) {
            var b = this.hw;
            this.hw = a;
            if (b != this.hw) {
                this.g7("Outline", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "dt", {
        get: function () {
            return this.cm;
        },
        set: function (a) {
            var b = this.cm;
            this.cm = a;
            if (b != this.cm) {
                this.g7("StrokeThickness", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "ai", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            var b = this.ah;
            this.ah = a;
            if (b != this.ah) {
                this.g7("LayoutOrientation", enumGetBox(TreemapOrientation_$type, b), enumGetBox(TreemapOrientation_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "s", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            var b = this.r;
            this.r = a;
            if (b != this.r) {
                this.g7("LayoutType", enumGetBox(TreemapLayoutType_$type, b), enumGetBox(TreemapLayoutType_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c5", {
        get: function () {
            return this.b8;
        },
        set: function (a) {
            var b = this.b8;
            this.b8 = a;
            if (b != this.b8) {
                this.g7("MinimumDisplaySize", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "d1", {
        get: function () {
            return this.dx;
        },
        set: function (a) {
            var b = this.dx;
            this.dx = a;
            if (b != this.dx) {
                this.g7("TransitionDuration", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "du", {
        get: function () {
            return this.cn;
        },
        set: function (a) {
            var b = this.cn;
            this.cn = a;
            if (b != this.cn) {
                this.g7("TransitionProgress", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "ar", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            var b = this.aq;
            this.aq = a;
            if (b != this.aq) {
                this.g7("FastItemsSource", b, this.aq);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "a8", {
        get: function () {
            return this.a1;
        },
        set: function (a) {
            this.a1 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "a2", {
        get: function () {
            return this.ax;
        },
        set: function (a) {
            this.ax = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "a5", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "a3", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "a4", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            this.az = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "di", {
        get: function () {
            return this.cl;
        },
        set: function (a) {
            var b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.g7("PixelScalingRatio", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "cp", {
        get: function () {
            return this.bt;
        },
        set: function (a) {
            var b = this.bt;
            this.bt = a;
            if (b != this.bt) {
                this.g7("ActualPixelScalingRatio", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "c0", {
        get: function () {
            return this.b3;
        },
        set: function (a) {
            var b = this.b3;
            this.b3 = a;
            if (b != this.b3) {
                this.g7("InteractionPixelScalingRatio", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Treemap.prototype, "co", {
        get: function () {
            return this.bs;
        },
        set: function (a) {
            var b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.g7("ActualInteractionPixelScalingRatio", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Treemap.prototype.a6 = function (a) {
        var b = null;
        return this.ar.registerColumn(a, b, false);
    };
    Treemap.prototype.a7 = function (a) {
        var b = null;
        return this.ar.registerColumnObject(a, b, false);
    };
    Treemap.prototype.gt = function () {
        this.bf = true;
        this.an.a1();
    };
    Object.defineProperty(Treemap.prototype, "bc", {
        get: function () {
            return this.ap.f();
        },
        enumerable: false,
        configurable: true
    });
    Treemap.prototype.ak = function () {
        var a = new TreemapTreeData();
        if (this.a8 == null || (this.a4 == null && this.a3 == null)) {
            return null;
        }
        for (var b = 0; b < this.ar.count; b++) {
            var c = null;
            if (this.a2 != null && this.a2.count > b) {
                c = this.a2.item(b);
            }
            var d = this.a8.item(b);
            var e = null;
            var f = "";
            if (this.a4 != null) {
                f = this.a4.item(b) != null ? this.a4.item(b).toString() : "";
            }
            if (this.a3 != null) {
                if (this.a3.item(b) == null) {
                    continue;
                }
                e = stringReplace(this.a3.item(b).toString(), " ", "_");
            }
            if (e == null) {
                e = stringReplace(f, " ", "_");
                if (stringIsNullOrEmpty(e)) {
                    continue;
                }
            }
            var g = null;
            if (this.a5 != null) {
                g = this.a5.item(b) != null ? stringReplace(this.a5.item(b).toString(), " ", "_") : null;
            }
            var h = new TreemapTreeNode();
            h.i = e;
            h.k = g;
            h.h = this.ar.item(b);
            h.f = d;
            h.g = c;
            h.j = f;
            a.e(h);
        }
        a.f();
        return a;
    };
    Treemap.prototype.hb = function () {
        if (this.aj == null) {
            this.aj = this.ak();
            if (this.aj == null) {
                return;
            }
            this.g1();
        }
        if (this.bi) {
            this.bi = false;
            for (var a = 0; a < this.aj.d.count; a++) {
                var b = this.aj.b.item(this.aj.d._inner[a]);
                b.c.clear();
                for (var c = 0; c < this.styleMappings.count; c++) {
                    if (this.bd(this.styleMappings._inner[c], b)) {
                        b.c.add(this.styleMappings._inner[c]);
                    }
                }
            }
        }
        if (!this.an.p()) {
            return;
        }
        var d = new TreemapLayoutSettings();
        d.b = this.aj;
        if (this.al != null && !this.aj.b.containsKey(this.al.i)) {
            this.al = null;
            this.hj(null);
        }
        else {
            if (this.al != null) {
                var e = this.aj.b.item(this.al.i);
                if (e != this.al) {
                    this.al = e;
                    this.hj(this.al);
                }
            }
        }
        d.h = this.ip;
        d.c = this.al;
        d.f = this.c5;
        d.a = this.ai;
        var f = this.i;
        var g = this.dk();
        var h = this.dm();
        var i = this.dl();
        var j = this.dj();
        var k = this.dp();
        var l = this.dr();
        var m = this.dq();
        var n = this.dn();
        var o = this.ho();
        var p = this.is();
        var q = this.an.x("M");
        var r = this.an.z("M");
        var s = q + h + j;
        var t = r + l + n;
        d.j = new Thickness(1, this.dd, this.dh, this.df, this.db);
        d.i = new Thickness(1, this.dc, this.dg, this.de, this.da);
        if (!isNaN_(this.cv)) {
            s = this.cv;
        }
        d.e = s;
        if (f == 2) {
            d.e = 0;
        }
        d.d = this.al == null;
        this.q.d(this.f, d);
        var u = 1.7976931348623157E+308;
        var v = -1.7976931348623157E+308;
        if (this.d == 1 || this.d == 3) {
            for (var w = 0; w < this.aj.d.count; w++) {
                var x = 0;
                if (this.d == 1) {
                    x = this.aj.b.item(this.aj.d._inner[w]).e();
                }
                else {
                    x = this.aj.b.item(this.aj.d._inner[w]).f;
                }
                if (!isNaN_(x)) {
                    u = Math.min(x, u);
                    v = Math.max(x, v);
                }
            }
        }
        else {
            for (var y = 0; y < this.f.e.count; y++) {
                var z = 0;
                if (this.d == 0) {
                    z = this.aj.b.item(this.f.e._inner[y]).e();
                }
                else {
                    z = this.aj.b.item(this.f.e._inner[y]).f;
                }
                if (!isNaN_(z)) {
                    u = Math.min(z, u);
                    v = Math.max(z, v);
                }
            }
        }
        for (var aa = 0; aa < this.f.e.count; aa++) {
            var ab = this.f.e._inner[aa];
            var ac = this.aj.b.item(ab);
            var ad = this.ia(ac, u, v);
            var ae = this.ig(ac);
            var af = this.ib(ac);
            var ag = this.ds(ac);
            var ah = this.f7(this.f, ac, g, i, k, m, s, t);
            var ai = this.ie(ac, ad, af);
            var aj = this.av(ac);
            var ak = 0;
            if (this.bh(ac)) {
                ak = this.an.y(ah);
            }
            else {
                ak = this.an.aa(ah);
            }
            var al = 0;
            if (this.bh(ac)) {
                al = s;
            }
            else {
                al = this.an.z(ah);
            }
            this.f.l(ac, ah, ad, ae, af, ai, ag, f, ak, al, g, h, i, j, k, l, m, n, o, p);
            if (ac.c.count > 0) {
                for (var am = 0; am < ac.c.count; am++) {
                    var an = ac.b != null && ac.b.count > 0;
                    if (ac.c._inner[am].bf == 2 && an) {
                        continue;
                    }
                    this.f.f(ac, ac.c._inner[am], runOn(this, this.ie));
                }
            }
            if (this.nodeStyling != null) {
                var ao = new TreemapNodeStylingEventArgs();
                ao.item = ac.h;
                if (ac.k != null) {
                    if (this.aj.b.containsKey(ac.k)) {
                        var ap = this.aj.b.item(ac.k);
                        ao.parentItem = ap.h;
                        ao.parentLabel = ap.j;
                        ao.parentSum = ap.e();
                        ao.parentValue = ap.f;
                    }
                }
                ao.sum = ac.e();
                ao.value = ac.f;
                ao.label = ac.j;
                ao.customValue = ac.g;
                if (ac.b != null && ac.b.count > 0) {
                    ao.isParent = true;
                }
                ao.style = new TreemapNodeStyle();
                this.nodeStyling(this, ao);
                this.f.f(ac, ao.style, runOn(this, this.ie));
            }
        }
    };
    Treemap.prototype.bh = function (a) {
        return a.b != null && a.b.count > 0;
    };
    Treemap.prototype.dn = function () {
        return this.c1;
    };
    Treemap.prototype.dq = function () {
        return this.c3;
    };
    Treemap.prototype.dr = function () {
        return this.c4;
    };
    Treemap.prototype.dp = function () {
        return this.c2;
    };
    Treemap.prototype.ho = function () {
        return this.hn;
    };
    Treemap.prototype.is = function () {
        return this.ir;
    };
    Treemap.prototype.dj = function () {
        if (this.i == 2) {
            return this.c6;
        }
        return this.cw;
    };
    Treemap.prototype.dl = function () {
        if (this.i == 2) {
            return this.c8;
        }
        return this.cy;
    };
    Treemap.prototype.dm = function () {
        if (this.i == 2) {
            return this.c9;
        }
        return this.cz;
    };
    Treemap.prototype.dk = function () {
        if (this.i == 2) {
            return this.c6;
        }
        return this.cx;
    };
    Treemap.prototype.gg = function (a, b, c, d, e) {
        var f = b.length;
        var g = b;
        var h = ("\u2026");
        if (isNaN_(this.bu)) {
            if (this.bh(a)) {
                this.bu = this.an.y(h);
            }
            else {
                this.bu = this.an.aa(h);
            }
        }
        if (c <= (this.bu + d + e)) {
            if (this.l == 2) {
                return "";
            }
            return h;
        }
        var i = 0;
        if (this.bh(a)) {
            i = this.an.y(b);
        }
        else {
            i = this.an.aa(b);
        }
        if (i + d + e <= c) {
            return b;
        }
        var j = c / (i + d + e);
        var k = truncate(Math.ceil(f * j));
        var l = b.substr(0, k) + h;
        var m = 0;
        if (this.bh(a)) {
            m = this.an.y(l);
        }
        else {
            m = this.an.aa(l);
        }
        if ((m + d + e) > c) {
            f = k;
        }
        else {
            k = k + 1;
            l = b.substr(0, k) + h;
            if (this.bh(a)) {
                m = this.an.y(l);
            }
            else {
                m = this.an.aa(l);
            }
            if ((m + d + e) > c) {
                f = k;
            }
        }
        while ((i + d + e) > c && f > 0) {
            f--;
            b = b.substr(0, f) + h;
            if (this.l == 2) {
                return "";
            }
            if (this.bh(a)) {
                i = this.an.y(b);
            }
            else {
                i = this.an.aa(b);
            }
        }
        return b;
    };
    Treemap.prototype.f7 = function (a, b, c, d, e, f, g, h) {
        if (b == null) {
            if (this.ed != null && this.f8 != null && !stringIsNullOrEmpty(this.f8)) {
                return this.f8 + this.ed;
            }
            return "";
        }
        var i = a.o(b);
        var j = i.width;
        var k = i.height;
        var l = b.j;
        if (this.al != null && this.al == b && this.ed != null) {
            var m = null;
            var n = b;
            while (n.k != null) {
                if (this.aj.b.containsKey(n.k)) {
                    m = this.aj.b.item(n.k);
                    if (m.j != null) {
                        l = m.j + this.ed + l;
                    }
                    n = m;
                }
            }
            if (this.f8 != null && !stringIsNullOrEmpty(this.f8)) {
                l = this.f8 + this.ed + l;
            }
        }
        var o = 0;
        var p = 0;
        if (a.c(b.i)) {
            var q = a.a(b.i);
            if (b.b.count > 0) {
                o = c;
                p = d;
                if (this.o == 2) {
                    if (k < g) {
                        return "";
                    }
                }
            }
            else {
                o = e;
                p = f;
                if (this.o == 2) {
                    if (k < h) {
                        return "";
                    }
                }
            }
        }
        return this.gg(b, l, j, o, p);
    };
    Treemap.prototype.ds = function (a) {
        if (!isNaN_(this.dt)) {
            return this.dt;
        }
        return this.bv;
    };
    Treemap.prototype.ib = function (a) {
        if (this.i == 2) {
            return this.ih(a);
        }
        if (a == this.am) {
            return this.ic(a);
        }
        if (this.h1 != null) {
            return this.h1;
        }
        return this.an.a6();
    };
    Treemap.prototype.ih = function (a) {
        if (a == this.am) {
            return this.ii(a);
        }
        if (this.h8 != null) {
            return this.h8;
        }
        return this.an.bb();
    };
    Treemap.prototype.ie = function (a, b, c) {
        if (a.b.count > 0) {
            if (a == this.am) {
                return this.id(a, c);
            }
            var d = this.an.a7();
            var e = this.an.a8();
            if (this.h6 != null) {
                e = this.h6;
            }
            if (this.h2 != null) {
                d = this.h2;
            }
            return BrushUtil.i(c, d, e);
        }
        else {
            var f = this.an.a5();
            var g = this.an.bd();
            if (this.ik != null) {
                g = this.ik;
            }
            if (this.h0 != null) {
                f = this.h0;
            }
            return BrushUtil.i(b, f, g);
        }
    };
    Treemap.prototype.av = function (a) {
        if (a.b.count > 0) {
            if (this.au != null) {
                return this.au;
            }
            return this.an.i();
        }
        else {
            if (this.aw != null) {
                return this.aw;
            }
            return this.an.j();
        }
    };
    Treemap.prototype.onDetachedFromUI = function () {
        this.an.au();
    };
    Treemap.prototype.onAttachedToUI = function () {
        this.an.as();
    };
    Treemap.prototype.ic = function (a) {
        if (this.h3 != null) {
            return this.h3;
        }
        return this.an.a9();
    };
    Treemap.prototype.ii = function (a) {
        if (this.h9 != null) {
            return this.h9;
        }
        return this.an.bc();
    };
    Treemap.prototype.id = function (a, b) {
        var c = this.an.a7();
        var d = this.an.a8();
        if (this.h6 != null) {
            d = this.h6;
        }
        if (this.h2 != null) {
            c = this.h2;
        }
        if (this.h5 != null) {
            d = this.h5;
        }
        if (this.h4 != null) {
            c = this.h4;
        }
        return BrushUtil.i(b, c, d);
    };
    Treemap.prototype.ig = function (a) {
        if (this.h7 != null) {
            return this.h7;
        }
        return this.an.ba();
    };
    Treemap.prototype.ia = function (a, b, c) {
        if (this.b == null || this.b.count == 0) {
            return this.ij(a);
        }
        var d = this.cu(a);
        if (isNaN_(d)) {
            return this.ij(a);
        }
        var e = 0;
        if (this.bg && this.dy > 0) {
            if (d > 0) {
                e = (logBase(d, this.dy) - logBase(b, this.dy)) / (logBase(c, this.dy) - logBase(b, this.dy));
            }
            else {
                return this.ij(a);
            }
        }
        else {
            e = (d - b) / (c - b);
        }
        e = e * (this.b.count - 1);
        return BrushCollectionUtil.b(this.b, e);
    };
    Treemap.prototype.cu = function (a) {
        switch (this.d) {
            case 0:
            case 1: return a.e();
            case 2:
            case 3: return a.f;
        }
        return a.e();
    };
    Treemap.prototype.ij = function (a) {
        return this.an.a6();
    };
    Treemap.prototype.he = function (a) {
        var b = new List$1(TreemapVisual.$, 0);
        var c = this.an.k();
        var d = 0;
        if (this.i == 2) {
            d = this.d0(a, false, d, c, function (e) { return true; }, b);
            d = this.d0(a, true, d, c, function (e) { return e.e.b != null && e.e.b.count > 0; }, b);
        }
        else {
            d = this.d0(a, false, d, c, function (e) { return true; }, b);
        }
        c.count = d;
        this.an.ah(b);
    };
    Treemap.prototype.d0 = function (a, b, c, d, e, f) {
        for (var g = 0; g < a.e.count; g++) {
            var h = a.e._inner[g];
            var i = a.a(h);
            if (!e(i)) {
                continue;
            }
            var j = d.item(c);
            if (i.y.isEmpty || (i.y.width == 0 && i.y.height == 0)) {
                j.t = 1;
                continue;
            }
            c++;
            f.add(j);
            var k = i.e.b.count == 0;
            var l = !k && i.a == 2;
            j.a = this.av(i.e);
            j.i = i.u;
            j.l = i.x;
            j.j = i.v;
            j.n = new Thickness(1, i.i, i.k, i.j, i.h);
            j.o = new Thickness(1, i.n, i.p, i.o, i.m);
            j.k = i.w;
            j.g = i.s;
            j.f = i.q;
            j.t = 0;
            j.m = this.io(i.y, i.q);
            j.b = k;
            j.q = !k && !l ? 0 : 1;
            j.s = !k && l ? 0 : 1;
            j.r = k ? 0 : 1;
            j.e = i.l;
            j.d = i.g;
            j.h = i.t;
            j.p = i.z;
            if (!b && !k && l) {
                j.s = 1;
            }
            if (b && !k && l) {
                j.i = null;
                j.l = null;
            }
        }
        return c;
    };
    Treemap.prototype.io = function (a, b) {
        var c = this.cq(Math.floor(a.left), b);
        var d = this.cq(Math.floor(a.right), b);
        var e = this.cq(Math.floor(a.top), b);
        var f = this.cq(Math.floor(a.bottom), b);
        return new Rect(0, c, e, d - c, f - e);
    };
    Treemap.prototype.cq = function (a, b) {
        var c = a;
        if (b > 0) {
            var d = b % 2;
            if (d == 0 || d == 1) {
                var e = 1;
                c = Math.floor(a);
                if (c + 0.5 < a) {
                    e = -1;
                    c = Math.ceil(a);
                }
                if (d == 1) {
                    c += 0.5 * e;
                }
            }
        }
        return c;
    };
    Treemap.prototype.bm = function () {
        return !this.ip.isEmpty && this.an.p();
    };
    Treemap.prototype.hf = function () {
        if (!this.bm()) {
            return;
        }
        if (this.bf) {
            var a = this.g;
            if (this.bc) {
                if (this.ap.g) {
                    this.ap.t();
                }
                this.g = this.e;
                this.e = a;
            }
            else {
                this.g = this.f;
                this.f = a;
            }
        }
        else if (this.bc) {
            this.e.h(this.du, this.g, this.f);
            this.he(this.e);
        }
        if (this.bf) {
            this.hb();
        }
        if (this.bf && this.bn) {
            this.hh();
            this.e.h(this.du, this.g, this.f);
            this.he(this.e);
        }
        else {
            if (this.bf) {
                this.he(this.f);
            }
        }
        this.bf = false;
        this.an.a0();
    };
    Treemap.prototype.bd = function (a, b) {
        var c = null;
        switch (a.bh) {
            case 1:
                c = b.f;
                break;
            case 0:
                c = b.e();
                break;
            case 2:
                c = b.g;
                break;
        }
        if (this.bj(c)) {
            var d = this.cr(c);
            if (a.bn != null) {
                if (this.bj(a.bn)) {
                    var e = this.cr(a.bn);
                    if (isNaN_(e) && isNaN_(d)) {
                        return true;
                    }
                    if (d == e) {
                        return true;
                    }
                }
            }
            else if (!isNaN_(a.bl) || !isNaN_(a.bk)) {
                var f = a.bl;
                var g = a.bk;
                if (d >= f && d <= g) {
                    return true;
                }
            }
        }
        else if (this.bl(c)) {
            if (a.bn != null) {
                if (this.bl(a.bn)) {
                    var h = (a.bn);
                    if (Base.equalsStatic(h, c)) {
                        return true;
                    }
                }
            }
        }
        else {
            if (Base.equalsStatic(c, a.bn)) {
                return true;
            }
        }
        return false;
    };
    Treemap.prototype.bl = function (a) {
        return typeof a === 'string';
    };
    Treemap.prototype.cr = function (a) {
        if (typeof a === 'number') {
            return a;
        }
        if (typeof a === 'number') {
            return typeGetValue(a);
        }
        if (typeof a === 'number') {
            return typeGetValue(a);
        }
        if (typeof a === 'number') {
            return typeGetValue(a);
        }
        if (typeof a === 'number') {
            return a;
        }
        if (typeof a === 'number') {
            return typeGetValue(a);
        }
        if (typeof a === 'number') {
            return a;
        }
        return NaN;
    };
    Treemap.prototype.bj = function (a) {
        if (typeof a === 'number') {
            return true;
        }
        if (typeof a === 'number') {
            return true;
        }
        if (typeof a === 'number') {
            return true;
        }
        if (typeof a === 'number') {
            return true;
        }
        if (typeof a === 'number') {
            return true;
        }
        if (typeof a === 'number') {
            return true;
        }
        if (typeof a === 'number') {
            return true;
        }
        return false;
    };
    Treemap.prototype.u = function (a) {
        var e_13, _a;
        var _this = this;
        var b = this.f;
        if (this.bc) {
            b = this.e;
        }
        var c = new List$1(TreemapNodeFrame.$, 0);
        for (var d = 0; d < b.e.count; d++) {
            var e = b.e._inner[d];
            var f = b.a(e);
            if (a.x >= f.y.left && a.x <= f.y.right && a.y >= f.y.top && a.y <= f.y.bottom) {
                c.add(f);
            }
        }
        c.aa(function (g, h) {
            var i = _this.dz(h);
            var j = _this.dz(g);
            if (i > j) {
                return 1;
            }
            else if (j > i) {
                return -1;
            }
            return 0;
        });
        try {
            for (var _b = __values(fromEnum(c)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var g = _c.value;
                if (g.e.b.count > 0) {
                    return g;
                }
            }
        }
        catch (e_13_1) {
            e_13 = { error: e_13_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_13)
                    throw e_13.error;
            }
        }
        return null;
    };
    Treemap.prototype.dz = function (a) {
        var b = a.e;
        var c = 0;
        while (b.k != null) {
            if (this.aj == null) {
                break;
            }
            if (this.aj.b.containsKey(b.k)) {
                c++;
                b = this.aj.b.item(b.k);
            }
            else {
                break;
            }
        }
        return c;
    };
    Treemap.prototype.v = function (a) {
        var e_14, _a, e_15, _b;
        var _this = this;
        var b = this.f;
        if (this.bc) {
            b = this.e;
        }
        var c = new List$1(TreemapNodeFrame.$, 0);
        for (var d = 0; d < b.e.count; d++) {
            var e = b.e._inner[d];
            var f = b.a(e);
            if (a.x >= f.y.left && a.x <= f.y.right && a.y >= f.y.top && a.y <= f.y.bottom) {
                c.add(f);
            }
        }
        c.aa(function (g, h) {
            var i = _this.dz(h);
            var j = _this.dz(g);
            if (i > j) {
                return 1;
            }
            else if (j > i) {
                return -1;
            }
            return 0;
        });
        if (this.i == 2) {
            try {
                for (var _c = __values(fromEnum(c)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var g = _d.value;
                    if (g.e.b.count > 0) {
                        if (this.bk(a, g)) {
                            return g;
                        }
                    }
                }
            }
            catch (e_14_1) {
                e_14 = { error: e_14_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_14)
                        throw e_14.error;
                }
            }
        }
        try {
            for (var _e = __values(fromEnum(c)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var h = _f.value;
                return h;
            }
        }
        catch (e_15_1) {
            e_15 = { error: e_15_1 };
        }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
            }
            finally {
                if (e_15)
                    throw e_15.error;
            }
        }
        return null;
    };
    Treemap.prototype.hh = function () {
        this.cn = 0;
        this.ap.w();
        this.ap.v();
        this.an.ax();
    };
    Object.defineProperty(Treemap.prototype, "bn", {
        get: function () {
            return this.d1 > 0;
        },
        enumerable: false,
        configurable: true
    });
    Treemap.prototype.provideContainer = function (a) {
        this.an.at(a);
        this.ap.u(a);
    };
    Treemap.prototype.gr = function () {
        this.an.ao();
    };
    Object.defineProperty(Treemap.prototype, "x", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            var b = this.t;
            this.t = a;
            if (b != a) {
                this.gs(b);
                this.gq(a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Treemap.prototype.gq = function (a) {
        if (a != null) {
            if (this.nodePointerEnter != null) {
                this.nodePointerEnter(this, this.y(a));
            }
        }
    };
    Treemap.prototype.gs = function (a) {
        if (a != null) {
            if (this.nodePointerLeave != null) {
                this.nodePointerLeave(this, this.y(a));
            }
        }
    };
    Treemap.prototype.y = function (a) {
        var b = new TreemapNodePointerEventArgs();
        if (a != null) {
            b.customValue = a.e.g;
            b.item = a.e.h;
            b.position = this.il;
            b.sum = a.e.e();
            b.value = a.e.f;
            b.label = a.e.j;
            b.isOverHeader = this.bk(this.il, a);
            if (a.e.k != null && this.aj != null && this.aj.b.containsKey(a.e.k)) {
                var c = this.aj.b.item(a.e.k);
                b.parentItem = c.h;
                b.parentSum = c.e();
                b.parentValue = c.f;
                b.parentLabel = c.j;
            }
        }
        b.isRightButton = false;
        return b;
    };
    Object.defineProperty(Treemap.prototype, "d3", {
        get: function () {
            return this.d2;
        },
        set: function (a) {
            var b = this.d2;
            this.d2 = a;
            if (b != this.d2) {
                this.g7("FocusItem", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Treemap.prototype.g2 = function (a) {
        this.hl(a);
        if (this.nodePointerPressed != null && this.x != null) {
            var b = this.y(this.x);
            this.nodePointerPressed(this, b);
        }
    };
    Treemap.prototype.g6 = function (a) {
        this.hl(a);
        var b = false;
        if (this.nodePointerReleased != null && this.x != null) {
            var c = this.y(this.x);
            this.nodePointerReleased(this, c);
            b = c.isHandled;
        }
        if (!b) {
            if (this.w != null) {
                if (this.w.e == this.al && this.bk(a, this.w)) {
                    this.al = null;
                    this.bf = true;
                    this.an.a1();
                    this.hj(null);
                    return;
                }
                this.al = this.w.e;
                this.hj(this.w.e);
                this.bf = true;
                this.an.a1();
            }
            else {
                this.al = null;
                this.bf = true;
                this.hj(null);
                this.an.a1();
            }
        }
    };
    Treemap.prototype.hj = function (a) {
        try {
            this.ba = true;
            if (a == null) {
                this.d3 = null;
            }
            else {
                this.d3 = a.h;
            }
            this.ba = false;
        }
        finally {
            this.ba = false;
        }
    };
    Treemap.prototype.bk = function (a, b) {
        var c = this.f;
        if (this.bc) {
            c = this.e;
        }
        if (b == null) {
            return false;
        }
        var d = b;
        if (a.x >= d.y.left && a.x <= d.y.right && a.y >= d.y.top && a.y <= d.y.bottom) {
            if (a.y - d.y.top <= d.g) {
                return true;
            }
        }
        return false;
    };
    Treemap.prototype.gx = function (source_, a, b, c) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        if (!this.bo(source_)) {
            return;
        }
        var d = this.ar;
        if (d == null) {
            return;
        }
        d.handleCollectionChanged(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
    };
    Treemap.prototype.gu = function (source_) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        if (!this.bo(source_)) {
            return;
        }
        var a = this.ar;
        a.handleCollectionChanged(new NotifyCollectionChangedEventArgs(0, 4));
    };
    Treemap.prototype.bo = function (a) {
        return Treemap.bp(a, this.dataSource);
    };
    Treemap.bp = function (a, b) {
        return a == b;
    };
    Treemap.prototype.gv = function (source_, a, b) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        if (!this.bo(source_)) {
            return;
        }
        var c = this.ar;
        if (c == null) {
            return;
        }
        c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 0, b, a));
    };
    Treemap.prototype.gw = function (source_, a, b) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        if (!this.bo(source_)) {
            return;
        }
        var c = this.ar;
        if (c == null) {
            return;
        }
        c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 1, b, a));
    };
    Treemap.prototype.g3 = function (a) {
        this.hl(a);
    };
    Treemap.prototype.g4 = function (a) {
        this.hl(a);
        this.w = null;
        this.x = null;
        if (!this.bc) {
            this.bf = true;
            this.an.a1();
        }
    };
    Treemap.prototype.hl = function (a) {
        this.il = { $type: Point_$type, x: a.x, y: a.y };
        this.w = this.u(a);
        this.x = this.v(a);
        this.hk(a);
    };
    Treemap.prototype.hg = function (a) {
        this.g5(a);
    };
    Treemap.prototype.g5 = function (a) {
        this.hl(a);
        if (this.x != null) {
            if (this.nodePointerOver != null) {
                this.nodePointerOver(this, this.y(this.x));
            }
        }
    };
    Treemap.prototype.hk = function (a) {
        if (!this.bc) {
            if (this.bk(a, this.w)) {
                var b = this.am;
                this.am = this.w.e;
                if (this.am != b) {
                    this.bf = true;
                    this.an.a1();
                }
            }
            else {
                var c = this.am;
                this.am = null;
                if (this.am != c) {
                    this.bf = true;
                    this.an.a1();
                }
            }
        }
    };
    Treemap.prototype.g8 = function (a) {
        this.hl(a);
        if (this.nodePointerPressed != null && this.x != null) {
            var b = this.y(this.x);
            b.isRightButton = true;
            this.nodePointerPressed(this, b);
        }
    };
    Treemap.prototype.g9 = function (a) {
        this.hl(a);
        var b = false;
        if (this.nodePointerReleased != null && this.x != null) {
            var c = this.y(this.x);
            c.isRightButton = true;
            this.nodePointerReleased(this, c);
            b = c.isHandled;
        }
        if (!b) {
            this.w = null;
            this.al = null;
            this.hj(null);
            this.bf = true;
            this.an.a1();
        }
    };
    Treemap.prototype.ha = function (a) {
        this.bf = true;
        this.an.a1();
    };
    Treemap.$t = markType(Treemap, 'Treemap', Base.$, [INotifyPropertyChanged_$type]);
    return Treemap;
}(Base));
export { Treemap };
/**
 * @hidden
 */
var TreemapNodeStyle = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapNodeStyle, _super);
    function TreemapNodeStyle() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = null;
        _this.c = new HashSet$1(String_$type, 0);
        _this.a0 = null;
        _this.az = null;
        _this.a2 = null;
        _this.x = null;
        _this.a4 = null;
        _this.a1 = null;
        _this.f = DeviceUtils.g(5);
        _this.h = DeviceUtils.g(3);
        _this.g = DeviceUtils.g(5);
        _this.e = DeviceUtils.g(3);
        _this.j = DeviceUtils.g(5);
        _this.l = DeviceUtils.g(3);
        _this.k = DeviceUtils.g(5);
        _this.i = DeviceUtils.g(3);
        _this.d = NaN;
        _this.aw = 1;
        _this.bc = 1;
        _this.ay = null;
        _this.a3 = null;
        _this.m = NaN;
        _this.propertyChanged = null;
        return _this;
    }
    TreemapNodeStyle.prototype.au = function (a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        this.av(a, b, c);
    };
    TreemapNodeStyle.prototype.at = function () {
        this.c.clear();
    };
    TreemapNodeStyle.prototype.b = function (a) {
        return this.c.contains(a);
    };
    TreemapNodeStyle.prototype.av = function (a, b, c) {
        if (!this.c.contains(a)) {
            this.c.add_1(a);
        }
        if (this.a != null) {
            this.a.ha(this);
        }
    };
    Object.defineProperty(TreemapNodeStyle.prototype, "a7", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            var b = this.a0;
            this.a0 = a;
            if (b != this.a0) {
                this.au("HeaderHoverBackground", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "a6", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            var b = this.az;
            this.az = a;
            if (b != this.az) {
                this.au("HeaderBackground", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "a9", {
        get: function () {
            return this.a2;
        },
        set: function (a) {
            var b = this.a2;
            this.a2 = a;
            if (b != this.a2) {
                this.au("HeaderTextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "ai", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            var b = this.x;
            this.x = a;
            if (b != this.x) {
                this.au("Label", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "bb", {
        get: function () {
            return this.a4;
        },
        set: function (a) {
            var b = this.a4;
            this.a4 = a;
            if (b != this.a4) {
                this.au("TextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "a8", {
        get: function () {
            return this.a1;
        },
        set: function (a) {
            var b = this.a1;
            this.a1 = a;
            if (b != this.a1) {
                this.au("HeaderHoverTextColor", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "p", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            var b = this.f;
            this.f = a;
            if (b != this.f) {
                this.au("HeaderLabelLeftMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "r", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            var b = this.h;
            this.h = a;
            if (b != this.h) {
                this.au("HeaderLabelTopMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "q", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            var b = this.g;
            this.g = a;
            if (b != this.g) {
                this.au("HeaderLabelRightMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "o", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            var b = this.e;
            this.e = a;
            if (b != this.e) {
                this.au("HeaderLabelBottomMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "t", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            var b = this.j;
            this.j = a;
            if (b != this.j) {
                this.au("LabelLeftMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "v", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            var b = this.l;
            this.l = a;
            if (b != this.l) {
                this.au("LabelTopMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "u", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            var b = this.k;
            this.k = a;
            if (b != this.k) {
                this.au("LabelRightMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "s", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            var b = this.i;
            this.i = a;
            if (b != this.i) {
                this.au("LabelBottomMargin", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "n", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            var b = this.d;
            this.d = a;
            if (b != this.d) {
                this.au("HeaderHeight", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "ax", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            var b = this.aw;
            this.aw = a;
            if (b != this.aw) {
                this.au("LabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "bd", {
        get: function () {
            return this.bc;
        },
        set: function (a) {
            var b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.au("LabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "a5", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            var b = this.ay;
            this.ay = a;
            if (b != this.ay) {
                this.au("Fill", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "ba", {
        get: function () {
            return this.a3;
        },
        set: function (a) {
            var b = this.a3;
            this.a3 = a;
            if (b != this.a3) {
                this.au("Outline", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyle.prototype, "w", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            var b = this.m;
            this.m = a;
            if (b != this.m) {
                this.au("StrokeThickness", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    TreemapNodeStyle.$t = markType(TreemapNodeStyle, 'TreemapNodeStyle', Base.$, [INotifyPropertyChanged_$type]);
    return TreemapNodeStyle;
}(Base));
export { TreemapNodeStyle };
/**
 * @hidden
 */
var TreemapNodeStyleMapping = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapNodeStyleMapping, _super);
    function TreemapNodeStyleMapping() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.be = 0;
        _this.bo = null;
        _this.bj = NaN;
        _this.bi = NaN;
        _this.bm = null;
        _this.bg = 1;
        return _this;
    }
    Object.defineProperty(TreemapNodeStyleMapping.prototype, "bf", {
        get: function () {
            return this.be;
        },
        set: function (a) {
            var b = this.be;
            this.be = a;
            if (b != this.be) {
                this.au("TargetType", enumGetBox(TreemapNodeStyleMappingTargetType_$type, b), enumGetBox(TreemapNodeStyleMappingTargetType_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyleMapping.prototype, "bs", {
        get: function () {
            return this.bo;
        },
        set: function (a) {
            var b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.au("Name", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyleMapping.prototype, "bl", {
        get: function () {
            return this.bj;
        },
        set: function (a) {
            var b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.au("MinimumValue", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyleMapping.prototype, "bk", {
        get: function () {
            return this.bi;
        },
        set: function (a) {
            var b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.au("MaximumValue", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyleMapping.prototype, "bn", {
        get: function () {
            return this.bm;
        },
        set: function (a) {
            var b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.au("Value", b, a);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStyleMapping.prototype, "bh", {
        get: function () {
            return this.bg;
        },
        set: function (a) {
            var b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.au("MappingMode", enumGetBox(TreemapValueMappingMode_$type, b), enumGetBox(TreemapValueMappingMode_$type, a));
            }
        },
        enumerable: false,
        configurable: true
    });
    TreemapNodeStyleMapping.$t = markType(TreemapNodeStyleMapping, 'TreemapNodeStyleMapping', TreemapNodeStyle.$);
    return TreemapNodeStyleMapping;
}(TreemapNodeStyle));
export { TreemapNodeStyleMapping };
/**
 * @hidden
 */
var TreemapNodeStyleMappingCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapNodeStyleMappingCollection, _super);
    function TreemapNodeStyleMappingCollection() {
        var _this = _super.call(this, TreemapNodeStyleMapping.$, 0) || this;
        _this.collectionResetting = null;
        return _this;
    }
    TreemapNodeStyleMappingCollection.prototype.p = function () {
        if (this.collectionResetting != null) {
            this.collectionResetting(this, null);
        }
        _super.prototype.p.call(this);
    };
    TreemapNodeStyleMappingCollection.$t = markType(TreemapNodeStyleMappingCollection, 'TreemapNodeStyleMappingCollection', ObservableCollection$1.$.specialize(TreemapNodeStyleMapping.$));
    return TreemapNodeStyleMappingCollection;
}(ObservableCollection$1));
export { TreemapNodeStyleMappingCollection };
/**
 * @hidden
 */
var TreemapNodeStylingEventArgs = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapNodeStylingEventArgs, _super);
    function TreemapNodeStylingEventArgs() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._value = 0;
        _this._sum = 0;
        _this._customValue = null;
        _this._item = null;
        _this._parentItem = null;
        _this._label = null;
        _this._parentValue = 0;
        _this._parentLabel = null;
        _this._parentSum = 0;
        _this._isParent = false;
        _this._style = null;
        return _this;
    }
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (a) {
            this._value = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "sum", {
        get: function () {
            return this._sum;
        },
        set: function (a) {
            this._sum = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "customValue", {
        get: function () {
            return this._customValue;
        },
        set: function (a) {
            this._customValue = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "item", {
        get: function () {
            return this._item;
        },
        set: function (a) {
            this._item = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "parentItem", {
        get: function () {
            return this._parentItem;
        },
        set: function (a) {
            this._parentItem = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (a) {
            this._label = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "parentValue", {
        get: function () {
            return this._parentValue;
        },
        set: function (a) {
            this._parentValue = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "parentLabel", {
        get: function () {
            return this._parentLabel;
        },
        set: function (a) {
            this._parentLabel = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "parentSum", {
        get: function () {
            return this._parentSum;
        },
        set: function (a) {
            this._parentSum = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "isParent", {
        get: function () {
            return this._isParent;
        },
        set: function (a) {
            this._isParent = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapNodeStylingEventArgs.prototype, "style", {
        get: function () {
            return this._style;
        },
        set: function (a) {
            this._style = a;
        },
        enumerable: false,
        configurable: true
    });
    TreemapNodeStylingEventArgs.$t = markType(TreemapNodeStylingEventArgs, 'TreemapNodeStylingEventArgs', EventArgs.$);
    return TreemapNodeStylingEventArgs;
}(EventArgs));
export { TreemapNodeStylingEventArgs };
/**
 * @hidden
 */
var TreemapFrame = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapFrame, _super);
    function TreemapFrame() {
        var _this = _super.call(this) || this;
        _this.d = null;
        _this.e = null;
        _this.e = new List$1(String_$type, 0);
        _this.d = new Dictionary$2(String_$type, TreemapNodeFrame.$, 0);
        return _this;
    }
    TreemapFrame.prototype.h = function (a, b, c) {
        this.g();
        this.k(a, b, c);
        this.j(a, b, c);
        this.i(a, b, c);
    };
    TreemapFrame.prototype.i = function (a, b, c) {
        for (var d = 0; d < b.e.count; d++) {
            var e = b.e._inner[d];
            if (c.d.containsKey(e)) {
                var f = TreemapNodeFrame.b(a, b.d.item(e), c.d.item(e));
                this.d.addItem(f.r, f);
                this.e.add(f.r);
            }
        }
    };
    TreemapFrame.prototype.j = function (a, b, c) {
        for (var d = 0; d < c.e.count; d++) {
            var e = c.e._inner[d];
            if (!b.d.containsKey(e)) {
                var f = TreemapNodeFrame.c(a, c.d.item(e));
                this.d.addItem(f.r, f);
                this.e.add(f.r);
            }
        }
    };
    TreemapFrame.prototype.k = function (a, b, c) {
        for (var d = 0; d < b.e.count; d++) {
            var e = b.e._inner[d];
            if (!c.d.containsKey(e)) {
                var f = TreemapNodeFrame.d(a, b.d.item(e));
                this.d.addItem(f.r, f);
                this.e.add(f.r);
            }
        }
    };
    TreemapFrame.prototype.m = function (a, b) {
        var _this = this;
        var c;
        if (!((function () { var d = _this.d.tryGetValue(a.i, c); c = d.p1; return d.ret; })())) {
            c = new TreemapNodeFrame();
            c.r = a.i;
            c.e = a;
            this.d.item(c.r, c);
            this.e.add(c.r);
        }
        c.y = b;
    };
    TreemapFrame.prototype.n = function (a, b) {
        this.d.item(a.i).f = b;
    };
    TreemapFrame.prototype.b = function (a) {
        if (!this.d.containsKey(a.i)) {
            return false;
        }
        return this.d.item(a.i).f;
    };
    TreemapFrame.prototype.o = function (a) {
        var _this = this;
        var b;
        if (!((function () { var c = _this.d.tryGetValue(a.i, b); b = c.p1; return c.ret; })())) {
            return Rect.empty;
        }
        return b.y;
    };
    TreemapFrame.prototype.l = function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
        var _this = this;
        var u;
        if (!((function () { var v = _this.d.tryGetValue(a.i, u); u = v.p1; return v.ret; })())) {
            return;
        }
        u.s = b;
        u.u = c;
        u.x = d;
        u.q = g;
        u.v = e;
        u.a = h;
        u.l = i;
        u.g = j;
        u.w = f;
        u.i = k;
        u.k = l;
        u.j = m;
        u.h = n;
        u.n = o;
        u.p = p;
        u.o = q;
        u.m = r;
        u.t = s;
        u.z = t;
    };
    TreemapFrame.prototype.g = function () {
        this.e.clear();
        this.d.clear();
    };
    TreemapFrame.prototype.c = function (a) {
        return this.d.containsKey(a);
    };
    TreemapFrame.prototype.a = function (a) {
        return this.d.item(a);
    };
    TreemapFrame.prototype.f = function (a, b, c) {
        var _this = this;
        var d;
        if (!((function () { var e = _this.d.tryGetValue(a.i, d); d = e.p1; return e.ret; })())) {
            return;
        }
        var e = a.b != null && a.b.count > 0;
        if (b.b("Label")) {
            d.s = b.ai;
        }
        if (b.b("Fill")) {
            d.u = b.a5;
        }
        if (b.b("LabelHorizontalAlignment")) {
            d.t = b.ax;
        }
        if (b.b("Outline")) {
            d.x = b.ba;
        }
        if (b.b("StrokeThickness")) {
            d.q = b.w;
        }
        if (b.b("HeaderBackground")) {
            d.v = b.a6;
        }
        if (e) {
            if (b.b("HeaderTextColor")) {
                d.w = b.a9;
            }
            else if (b.b("Fill") || b.b("HeaderBackground")) {
                d.w = c(a, d.u, d.v);
            }
        }
        else {
            if (b.b("TextColor")) {
                d.w = b.bb;
            }
            else if (b.b("Fill") || b.b("HeaderBackground")) {
                d.w = c(a, d.u, d.v);
            }
        }
        if (b.b("HeaderLabelLeftMargin")) {
            d.i = b.p;
        }
        if (b.b("HeaderLabelTopMargin")) {
            d.k = b.r;
        }
        if (b.b("HeaderLabelRightMargin")) {
            d.j = b.q;
        }
        if (b.b("HeaderLabelBottomMargin")) {
            d.h = b.o;
        }
        if (b.b("LabelLeftMargin")) {
            d.n = b.t;
        }
        if (b.b("LabelTopMargin")) {
            d.p = b.v;
        }
        if (b.b("LabelRightMargin")) {
            d.o = b.u;
        }
        if (b.b("LabelBottomMargin")) {
            d.m = b.s;
        }
    };
    TreemapFrame.$t = markType(TreemapFrame, 'TreemapFrame');
    return TreemapFrame;
}(Base));
export { TreemapFrame };
/**
 * @hidden
 */
var TreemapNodeFrame = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapNodeFrame, _super);
    function TreemapNodeFrame() {
        var _this = _super.call(this) || this;
        _this.y = null;
        _this.e = null;
        _this.r = null;
        _this.s = null;
        _this.u = null;
        _this.x = null;
        _this.q = 0;
        _this.i = 0;
        _this.k = 0;
        _this.j = 0;
        _this.h = 0;
        _this.n = 0;
        _this.p = 0;
        _this.o = 0;
        _this.m = 0;
        _this.w = null;
        _this.v = null;
        _this.a = 0;
        _this.l = 0;
        _this.g = 0;
        _this.t = 0;
        _this.z = 0;
        _this.f = false;
        _this.y = Rect.empty;
        return _this;
    }
    TreemapNodeFrame.b = function (a, b, c) {
        var d = new TreemapNodeFrame();
        d.e = c.e;
        d.r = c.r;
        d.s = c.s;
        var e = c.y;
        if (e.isEmpty) {
            e = new Rect(0, 0, 0, 0, 0);
        }
        var f = b.y;
        if (f.isEmpty) {
            f = new Rect(0, 0, 0, 0, 0);
        }
        d.y = new Rect(0, f.left + (e.left - f.left) * a, f.top + (e.top - f.top) * a, f.width + (e.width - f.width) * a, f.height + (e.height - f.height) * a);
        d.u = BrushUtil.k(b.u, a, c.u, 0);
        d.x = BrushUtil.k(b.x, a, c.x, 0);
        d.v = BrushUtil.k(b.v, a, c.v, 0);
        d.w = BrushUtil.k(b.w, a, c.w, 0);
        d.q = b.q + (c.q - b.q) * a;
        d.i = b.i + (c.i - b.i) * a;
        d.k = b.k + (c.k - b.k) * a;
        d.j = b.j + (c.j - b.j) * a;
        d.h = b.h + (c.h - b.h) * a;
        d.n = b.n + (c.n - b.n) * a;
        d.p = b.p + (c.p - b.p) * a;
        d.o = b.o + (c.o - b.o) * a;
        d.m = b.m + (c.m - b.m) * a;
        d.l = b.l + (c.l - b.l) * a;
        d.g = b.g + (c.g - b.g) * a;
        d.t = a < 0.5 ? b.t : c.t;
        d.z = a < 0.5 ? b.z : c.z;
        d.a = a < 0.5 ? b.a : c.a;
        return d;
    };
    TreemapNodeFrame.d = function (a, b) {
        var c = new Rect(0, 0, 0, 0, 0);
        var d = new TreemapNodeFrame();
        d.e = b.e;
        d.s = b.s;
        d.r = b.r;
        var e = b.y;
        if (e.isEmpty) {
            e = new Rect(0, 0, 0, 0, 0);
        }
        d.y = new Rect(0, e.left + (c.left - e.left) * a, e.top + (c.top - e.top) * a, e.width + (c.width - e.width) * a, e.height + (c.height - e.height) * a);
        d.u = BrushUtil.k(b.u, a, null, 0);
        d.x = BrushUtil.k(b.x, a, null, 0);
        d.v = BrushUtil.k(b.v, a, null, 0);
        d.w = BrushUtil.k(b.w, a, null, 0);
        d.q = b.q + (0 - b.q) * a;
        d.i = b.i + (0 - b.i) * a;
        d.k = b.k + (0 - b.k) * a;
        d.j = b.j + (0 - b.j) * a;
        d.h = b.h + (0 - b.h) * a;
        d.n = b.n + (0 - b.n) * a;
        d.p = b.p + (0 - b.p) * a;
        d.o = b.o + (0 - b.o) * a;
        d.m = b.m + (0 - b.m) * a;
        d.l = b.l + (0 - b.l) * a;
        d.g = b.g + (0 - b.g) * a;
        d.t = b.t;
        d.z = b.z;
        d.a = b.a;
        return d;
    };
    TreemapNodeFrame.c = function (a, b) {
        var c = new Rect(0, 0, 0, 0, 0);
        var d = new TreemapNodeFrame();
        d.e = b.e;
        d.s = b.s;
        d.r = b.r;
        var e = b.y;
        if (e.isEmpty) {
            e = new Rect(0, 0, 0, 0, 0);
        }
        d.y = new Rect(0, c.left + (e.left - c.left) * a, c.top + (e.top - c.top) * a, c.width + (e.width - c.width) * a, c.height + (e.height - c.height) * a);
        d.u = BrushUtil.k(null, a, b.u, 0);
        d.x = BrushUtil.k(null, a, b.x, 0);
        d.v = BrushUtil.k(null, a, b.v, 0);
        d.w = BrushUtil.k(null, a, b.w, 0);
        d.q = 0 + (b.q - 0) * a;
        d.i = 0 + (b.i - 0) * a;
        d.k = 0 + (b.k - 0) * a;
        d.j = 0 + (b.j - 0) * a;
        d.h = 0 + (b.h - 0) * a;
        d.n = 0 + (b.n - 0) * a;
        d.p = 0 + (b.p - 0) * a;
        d.o = 0 + (b.o - 0) * a;
        d.m = 0 + (b.m - 0) * a;
        d.l = 0 + (b.l - 0) * a;
        d.g = 0 + (b.g - 0) * a;
        d.t = b.t;
        d.z = b.z;
        d.a = b.a;
        return d;
    };
    TreemapNodeFrame.$t = markType(TreemapNodeFrame, 'TreemapNodeFrame');
    return TreemapNodeFrame;
}(Base));
export { TreemapNodeFrame };
