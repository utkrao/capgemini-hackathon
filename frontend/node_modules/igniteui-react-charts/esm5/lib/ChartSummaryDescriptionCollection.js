/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { SyncableObservableCollection$2 } from "igniteui-react-core";
import { ChartSummaryDescription } from "./ChartSummaryDescription";
import { SummaryDescription } from "igniteui-react-core";
/**
 * @hidden
 */
var ChartSummaryDescriptionCollection = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ChartSummaryDescriptionCollection, _super);
    function ChartSummaryDescriptionCollection() {
        var _this = _super.call(this) || this;
        _this.f = new SyncableObservableCollection$2(ChartSummaryDescription.$, SummaryDescription.$, 0);
        _this.d = null;
        var a = _this.f;
        a.compare = function (b, c) { return b.p == c.propertyName && b.h == c.operand && b.d == c.calculator && b.n == c.alias && b.f == c; };
        a.createFrom = function (b) {
            var c = new ChartSummaryDescription(1, b.propertyName);
            c.h = b.operand;
            c.d = b.calculator;
            c.n = b.alias;
            c.f = b;
            return c;
        };
        a.createTo = function (b) {
            var c = new SummaryDescription(1, b.p);
            c.operand = b.h;
            c.calculator = b.d;
            c.alias = b.n;
            b.f = c;
            return c;
        };
        return _this;
    }
    Object.defineProperty(ChartSummaryDescriptionCollection.prototype, "i", {
        get: function () {
            return this.f.shouldDetachOnTargetChange;
        },
        set: function (a) {
            this.f.shouldDetachOnTargetChange = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartSummaryDescriptionCollection.prototype, "e", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            if (a == null) {
                this.f.syncTarget = null;
                this.d = null;
                return;
            }
            this.d = a;
            this.f.syncTarget = this.d.g();
        },
        enumerable: false,
        configurable: true
    });
    ChartSummaryDescriptionCollection.prototype.g = function (a) {
        return this.f.add(a);
    };
    ChartSummaryDescriptionCollection.prototype.o = function (a, b) {
        this.f.add1(a, b);
    };
    ChartSummaryDescriptionCollection.prototype.n = function () {
        this.f.clear();
    };
    ChartSummaryDescriptionCollection.prototype.get = function (a) {
        return this.f.get(a);
    };
    ChartSummaryDescriptionCollection.prototype.k = function (a) {
        return this.f.indexOf(a);
    };
    ChartSummaryDescriptionCollection.prototype.h = function (a) {
        return this.f.remove1(a);
    };
    ChartSummaryDescriptionCollection.prototype.b = function (a) {
        return this.f.remove(a);
    };
    ChartSummaryDescriptionCollection.prototype.set = function (a, b) {
        return this.f.set(a, b);
    };
    ChartSummaryDescriptionCollection.prototype.size = function () {
        return this.f.size();
    };
    ChartSummaryDescriptionCollection.prototype.m = function (a) {
        this.f.addListener(a);
    };
    ChartSummaryDescriptionCollection.prototype.p = function (a) {
        this.f.removeListener(a);
    };
    Object.defineProperty(ChartSummaryDescriptionCollection.prototype, "j", {
        get: function () {
            return this.f.all;
        },
        enumerable: false,
        configurable: true
    });
    ChartSummaryDescriptionCollection.$t = markType(ChartSummaryDescriptionCollection, 'ChartSummaryDescriptionCollection');
    return ChartSummaryDescriptionCollection;
}(Base));
export { ChartSummaryDescriptionCollection };
