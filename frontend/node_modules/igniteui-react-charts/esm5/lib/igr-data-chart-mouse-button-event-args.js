import { IgrSeries } from "./igr-series";
import { ensureBool, fromPoint } from "igniteui-react-core";
/**
 * Provides data for IgxDataChartComponent mouse button related events.
*
* `DataChartMouseButtonEventHandler` class represents the method that will handle IgxDataChartComponent mouse button related events.
*
* ```ts
* this.chart.seriesMouseLeftButtonDown.subscribe(this.chart_seriesMouseLeftButtonDown);
* chart_seriesMouseLeftButtonDown(sender :any,args: DataChartMouseButtonEventArgs )
*   {
*   }
* ```
*/
var IgrDataChartMouseButtonEventArgs = /** @class */ /*@__PURE__*/ (function () {
    function IgrDataChartMouseButtonEventArgs() {
    }
    Object.defineProperty(IgrDataChartMouseButtonEventArgs.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataChartMouseButtonEventArgs.prototype.onImplementationCreated = function () {
    };
    IgrDataChartMouseButtonEventArgs.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(IgrDataChartMouseButtonEventArgs.prototype, "handled", {
        /**
         * Gets or sets a value that indicates the present state of the event handling for a routed
         * event as it travels the route.
         * ChartMouseButton events are not routed events; setting this property effects the underlying
         * MouseButtonEvent.
        *
        * Use the `handled` property to indicates the present state of the event handling for a routed event.
        */
        get: function () {
            return this.i.handled;
        },
        set: function (v) {
            this.i.handled = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataChartMouseButtonEventArgs.prototype, "originalSource", {
        /**
         * Gets a reference to the object that raised the event.
        *
        * Use the `originalSource` property for the raised object event.
        *
        * ```ts
        * args.originalSource;
        * ```
        */
        get: function () {
            return this.i.originalSource;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataChartMouseButtonEventArgs.prototype, "item", {
        /**
         * Gets the ItemsSource item associated with the current event.
        *
        * Use the `item` property to get the ItemsSource item associated with the current event.
        *
        * ```ts
        * var item1= args.item;
        * ```
        */
        get: function () {
            return this.i.item;
        },
        set: function (v) {
            this.i.item = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataChartMouseButtonEventArgs.prototype, "series", {
        /**
         * Gets the series associated with the current event.
        *
        * Use the `series` property for the associated current event.
        *
        * ```ts
        *  var DataSeries= args.series;
        * ```
        */
        get: function () {
            if (this.i.series == null) {
                return null;
            }
            if (!this.i.series.externalObject) {
                var e = IgrSeries._createFromInternal(this.i.series);
                if (e) {
                    e._implementation = this.i.series;
                }
                this.i.series.externalObject = e;
            }
            return this.i.series.externalObject;
        },
        set: function (v) {
            v == null ? this.i.series = null : this.i.series = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataChartMouseButtonEventArgs.prototype, "chart", {
        /**
         * Gets the Chart associated with the current event.
        *
        * Use the `chart` property to get the chart associated with the current event.
        *
        * ```ts
        * var dataChart=  args.chart;
        * ```
        */
        get: function () {
            if (this.i.chart == null) {
                return null;
            }
            return this.i.chart.externalObject;
        },
        set: function (v) {
            v == null ? this.i.chart = null : this.i.chart = v.i;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Provides a human readable description of the mouse button event.
    
    *
    * Use the `toString` property to provides a human readable discription.
    *
    * ```ts
    *   var item= args.item.label.toString();
    * ```
    */
    IgrDataChartMouseButtonEventArgs.prototype.toString = function () {
        var iv = this.i.toString();
        return (iv);
    };
    /**
     * Returns the x- and y- coordinates of the mouse pointer position, optionally evaluated
     * against the origin of a supplied UIElement.
    
    * @param relativeTo  * Any UIElement derived object that is contained by the the engine plug-in
     * and connected to the object tree. To specify the object relative to the overall the engine
     * coordinate system, use a relativeTo value of null.
    *
    * To get mouse X and Y position.
    *
    * ```ts
    *    var args.getPosition;
    * ```
    */
    IgrDataChartMouseButtonEventArgs.prototype.getPosition = function (relativeTo) {
        var iv = this.i.getPosition(relativeTo);
        return fromPoint(iv);
    };
    return IgrDataChartMouseButtonEventArgs;
}());
export { IgrDataChartMouseButtonEventArgs };
