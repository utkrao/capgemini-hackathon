/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries_$type } from "igniteui-react-core";
import { ISupportsSizeScale_$type } from "./ISupportsSizeScale";
import { ISupportsFillScale_$type } from "./ISupportsFillScale";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Base, typeCast, Point_$type, fromEnum, markType, markDep, enumGetBox, runOn } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { DependencyProperty } from "igniteui-react-core";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend_$type } from "igniteui-react-core";
import { ValueBrushScale } from "./ValueBrushScale";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { ScalerParams } from "./ScalerParams";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { BubbleMarkerManager } from "./BubbleMarkerManager";
import { IChartItemLegend_$type } from "igniteui-react-core";
import { IChartScaleLegend_$type } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { BrushSelectionMode_$type } from "./BrushSelectionMode";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Defaults } from "./Defaults";
/**
 * @hidden
 */
var BubbleSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BubbleSeries, _super);
    function BubbleSeries() {
        var _this = _super.call(this) || this;
        _this.wz = null;
        _this.wy = null;
        _this.vm = null;
        _this.ve = null;
        _this.vd = null;
        _this.vc = null;
        _this.va = null;
        _this.ab = BubbleSeries.$;
        _this.r7 = new ScatterFrame();
        _this.r9 = new ScatterFrame();
        _this.r5 = new ScatterFrame();
        return _this;
    }
    BubbleSeries.prototype.get_c4 = function () {
        return true;
    };
    BubbleSeries.prototype.bx = function () {
        return new BubbleSeriesView(this);
    };
    BubbleSeries.prototype.l2 = function (a) {
        _super.prototype.l2.call(this, a);
        this.u9 = a;
    };
    BubbleSeries.prototype.gx = function () {
        return 0.7;
    };
    BubbleSeries.prototype.qb = function () {
        if (this.qa == 0) {
            return 2;
        }
        return _super.prototype.qb.call(this);
    };
    BubbleSeries.prototype.isAttachedTo = function (a) {
        return this.a1 == a;
    };
    BubbleSeries.prototype.c3 = function () {
        return true;
    };
    BubbleSeries.prototype.lc = function (a) {
        _super.prototype.lc.call(this, a);
        if (this.vh != null && this.vm != null && this.vm.count > 0) {
            for (var b = 0; b < this.vm.count; b++) {
                a(this.vm._inner[b]);
            }
        }
    };
    Object.defineProperty(BubbleSeries.prototype, "vg", {
        get: function () {
            return this.vi;
        },
        enumerable: false,
        configurable: true
    });
    BubbleSeries.prototype.wx = function (a) {
        var b = typeCast(CustomPaletteBrushScale.$, this.u8);
        var c = typeCast(ValueBrushScale.$, this.u8);
        var d = this.u8;
        if (b != null && this.ck != null) {
            return b.getBrush1(a, this.ck.count);
        }
        else if (c != null) {
            return c.getBrushByIndex(a, this.vf);
        }
        else if (d != null) {
            return d.getBrush(a);
        }
        return null;
    };
    Object.defineProperty(BubbleSeries.prototype, "legendReady", {
        get: function () {
            return this.vi != null && this.vi.count != 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "minScaleText", {
        get: function () {
            var a = this.u7(this.vb).b;
            return (Math.round(a * 1000) / 1000).toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "maxScaleText", {
        get: function () {
            var a = this.u7(this.vb).a;
            return (Math.round(a * 1000) / 1000).toString();
        },
        enumerable: false,
        configurable: true
    });
    BubbleSeries.prototype.forScaleColors = function (a) {
        for (var b = 0; b < this.vi.count; b++) {
            if (this.u8 == null || !this.u8.isReady) {
                return false;
            }
            var c = NaN;
            if (this.vf != null) {
                c = (this.vf.item(b) - this.vf.minimum) / (this.vf.maximum - this.vf.minimum);
            }
            var d = (this.vi.item(b) - this.vi.minimum) / (this.vi.maximum - this.vi.minimum);
            if (isNaN_(c)) {
                c = 0;
            }
            if (isNaN_(d)) {
                d = c;
            }
            var e = this.rh;
            var f = this.wx(b);
            var g = f != null ? f : e;
            a(g, d);
        }
        return true;
    };
    BubbleSeries.prototype.hy = function (a, b) {
        var c = this.js(b);
        if (c == BubbleSeries.$$p[5]) {
            return this.hz(a, b, this.v1);
        }
        if (c == BubbleSeries.$$p[11]) {
            return this.hz(a, b, this.wb);
        }
        if (c == ScatterBase.$$p[10]) {
            return this.hz(a, b, this.ti);
        }
        if (c == ScatterBase.$$p[14]) {
            return this.hz(a, b, this.tq);
        }
        if (c == BubbleSeries.$$p[2]) {
            return this.hz(a, b, this.vw);
        }
        return _super.prototype.hy.call(this, a, b);
    };
    Object.defineProperty(BubbleSeries.prototype, "vi", {
        get: function () {
            return this.ve;
        },
        set: function (a) {
            if (this.ve != a) {
                var b = this.vi;
                this.ve = a;
                this.raisePropertyChanged("RadiusColumn", b, this.vi);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "vh", {
        get: function () {
            return this.vd;
        },
        set: function (a) {
            if (this.vd != a) {
                var b = this.vh;
                this.vd = a;
                this.raisePropertyChanged("LabelColumn", b, this.vh);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "vf", {
        get: function () {
            return this.vc;
        },
        set: function (a) {
            if (this.vc != a) {
                var b = this.vf;
                this.vc = a;
                this.raisePropertyChanged("FillColumn", b, this.vf);
            }
        },
        enumerable: false,
        configurable: true
    });
    BubbleSeries.prototype.tt = function (a, b, c, d, e) {
        if (c <= this.s2) {
            b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
        }
        var f = this.s2;
        var g = this.ck;
        var h;
        var i;
        var j = this.getEffectiveViewport1(a);
        var k = new ScalerParams(0, d, e, this.r1.d, j);
        var l = new ScalerParams(0, d, e, this.r1.e, j);
        var m = false;
        var n = 0;
        if (this.cd != null) {
            if (this.cd.e8()) {
                var o = this.cd.lh(d, k);
                m = o.c;
                n = o.d;
            }
        }
        var _loop_1 = function (p) {
            h = this_1.sh.item(p);
            i = this_1.si.item(p);
            var q = { $type: Point_$type, x: this_1.r1.a.ei(h, k), y: this_1.r1.b.ei(i, l) };
            if (m) {
                if (q.x < e.left || q.x > e.right) {
                    if (q.x + n >= e.left && q.x + n <= e.right) {
                        q = { $type: Point_$type, x: q.x + n, y: i };
                    }
                }
            }
            if (!isInfinity(q.x) && !isInfinity(q.y)) {
                var r_1 = g.item(p);
                if (c <= f) {
                    if (!b.g.containsKey(r_1)) {
                        var s_1 = { $type: Point_$type, x: h, y: i };
                        b.g.addItem(r_1, ((function () {
                            var $ret = new OwnedPoint();
                            $ret.a = r_1;
                            $ret.b = s_1;
                            $ret.c = q;
                            return $ret;
                        })()));
                    }
                }
            }
        };
        var this_1 = this;
        for (var p = 0; p < c; p++) {
            _loop_1(p);
        }
    };
    BubbleSeries.prototype.t1 = function (a, b) {
        var c = typeCast(BubbleSeriesView.$, b);
        var d = c.cv;
        d.m = this.vi;
        _super.prototype.t1.call(this, a, b);
        var e = Math.min(this.sh != null ? this.sh.count : 0, this.si != null ? this.si.count : 0);
        if (e < 1) {
            return;
        }
        c.dh();
        c.di();
    };
    BubbleSeries.prototype.wg = function () {
        if (this.cd == null) {
            return;
        }
        if (this.a1 == null) {
            return;
        }
        if (this.a1.isItemwise) {
            var a = this.a1;
            this.a1.clearLegendItemsForSeries(this);
            this.wf();
            a.renderItemwiseContent(this);
        }
        if (this.a1.isScale) {
            var b = this.a1;
            b.restoreOriginalState();
            b.initializeLegend(this);
        }
    };
    BubbleSeries.vn = function (a, b, c, d, e) {
        if (e <= a || isNaN_(e) || isInfinity(e)) {
            return c;
        }
        if (e >= b) {
            return d;
        }
        var f = c + ((d - c) / (b - a)) * (e - a);
        return f;
    };
    BubbleSeries.vo = function (a, b, c, d, logBase_, e) {
        var f = logBase(e, logBase_);
        var g = logBase(a, logBase_);
        var h = logBase(b, logBase_);
        return BubbleSeries.vn(g, h, c, d, f);
    };
    BubbleSeries.prototype.fb = function (a, b, c) {
        var d = _super.prototype.fb.call(this, a, b, c);
        if (this.vi == null || this.ck == null || this.vi.count == 0 || this.ck.count != this.vi.count) {
            d = false;
        }
        return d;
    };
    BubbleSeries.prototype.sq = function (a, b) {
        if (b != 3) {
            return true;
        }
        if (a == null) {
            return true;
        }
        if (this.ti == a || this.tq == a || this.wb == a) {
            return true;
        }
        return false;
    };
    BubbleSeries.prototype.wf = function () {
        var _this = this;
        var a = typeCast(IChartLegend_$type, this.a1);
        if (a == null || this.ck == null) {
            return;
        }
        this.vm = new List$1(UIElement.$, 0);
        var b = typeCast(CustomPaletteBrushScale.$, this.u8);
        var c = typeCast(ValueBrushScale.$, this.u8);
        var d = this.u8;
        var e = this.u6();
        var f = e.b;
        var g = e.a;
        var h = this.ck;
        var _loop_2 = function (i) {
            var j = null;
            if (c != null && this_2.vf != null) {
                var k = this_2.vf.item(i);
                j = c.getBrushByRange(k, f, g);
            }
            else if (b != null) {
                j = b.getBrush1(i, h.count);
            }
            else if (d != null) {
                j = d.getBrush(i);
            }
            var l = new ContentControl();
            var m = this_2.vh != null && this_2.vh.item(i) != null ? this_2.vh.item(i).toString() : "";
            l.content = ((function () {
                var $ret = new DataContext();
                $ret.series = _this;
                $ret.item = h.item(i);
                $ret.itemBrush = j;
                $ret.itemLabel = m;
                return $ret;
            })());
            var n = this_2.nf;
            if (n == null) {
                n = this_2.b0.bl(this_2.b5);
            }
            l.ah = n;
            this_2.vm.add(l);
        };
        var this_2 = this;
        for (var i = 0; i < h.count; i++) {
            _loop_2(i);
        }
    };
    BubbleSeries.prototype.k3 = function (a, b, c, d) {
        _super.prototype.k3.call(this, a, b, c, d);
        if (this.vb != null) {
            this.vb.aa();
        }
        if (this.u8 != null) {
            this.u8.x();
        }
        this.wg();
    };
    BubbleSeries.prototype.ll = function () {
        _super.prototype.ll.call(this);
        this.wg();
    };
    BubbleSeries.prototype.lr = function () {
        _super.prototype.lr.call(this);
        this.wg();
    };
    BubbleSeries.prototype.l7 = function (a, b, c, d) {
        var e_1, _a;
        _super.prototype.l7.call(this, a, b, c, d);
        switch (b) {
            case "FastItemsSource":
                if (this.vb != null) {
                    this.vb.aa();
                }
                if (this.u8 != null) {
                    this.u8.x();
                }
                if (typeCast(IFastItemsSource_$type, c) != null) {
                    c.deregisterColumn(this.vi);
                    c.deregisterColumn(this.vf);
                    c.deregisterColumn(this.vh);
                    this.vi = null;
                    this.vf = null;
                    this.vh = null;
                }
                if (typeCast(IFastItemsSource_$type, d) != null) {
                    this.vi = this.ch(this.wb);
                    if (!stringIsNullOrEmpty(this.vw)) {
                        this.vf = this.ch(this.vw);
                    }
                    this.vh = this.cj(this.v1);
                }
                this.ml(false);
                this.wg();
                break;
            case BubbleSeries.$$p[11]:
                if (this.vb != null) {
                    this.vb.aa();
                }
                if (this.ck != null) {
                    this.ck.deregisterColumn(this.vi);
                    this.vi = this.ch(this.wb);
                    this.wg();
                }
                break;
            case "RadiusColumn":
                if (this.vb != null) {
                    this.vb.aa();
                }
                this.r2.cx.g$i();
                this.ml(false);
                this.lt();
                break;
            case BubbleSeries.$$p[12]:
                if (c != null) {
                    c.l.remove(this);
                    c.aa();
                }
                if (d != null) {
                    d.l.add(this);
                    d.aa();
                }
                this.ml(false);
                this.ls();
                break;
            case BubbleSeries.$$p[13]:
                this.ml(false);
                this.ls();
                break;
            case "DiscreteLegendItemTemplate":
                this.wg();
                break;
            case BubbleSeries.$$p[3]:
                if (c != null) {
                    c.o.remove(this);
                    c.x();
                }
                if (d != null) {
                    d.o.add(this);
                    d.x();
                }
                this.ml(false);
                this.wg();
                this.ls();
                break;
            case BubbleSeries.$$p[4]:
            case BubbleSeries.$$p[8]:
            case BubbleSeries.$$p[7]:
            case BubbleSeries.$$p[6]:
                this.ml(false);
                this.wg();
                this.ls();
                break;
            case "FillColumn":
                this.ml(false);
                this.ls();
                break;
            case BubbleSeries.$$p[2]:
                if (this.u8 != null) {
                    this.u8.x();
                }
                if (this.ck != null) {
                    this.ck.deregisterColumn(this.vf);
                    this.vf = this.ch(this.vw);
                    this.wg();
                }
                break;
            case BubbleSeries.$$p[5]:
                if (this.ck != null) {
                    this.ck.deregisterColumn(this.vh);
                    this.vh = this.cj(this.v1);
                    this.wg();
                }
                break;
            case "ActualLegend":
                var e = typeCast(IChartLegend_$type, c);
                if (e != null && e.isItemwise) {
                    var f = typeCast(IChartItemLegend_$type, e);
                    f.clearLegendItemsForSeries(this);
                }
                if (e != null && e.isScale) {
                    var g = typeCast(IChartScaleLegend_$type, e);
                    var h = true;
                    var i = null;
                    if (this.cd != null) {
                        try {
                            for (var _b = __values(fromEnum(this.cd.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var j = _c.value;
                                if (j.legend == g) {
                                    i = j;
                                    h = false;
                                }
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                    }
                    if (h) {
                        g.restoreOriginalState();
                    }
                    else {
                        g.initializeLegend(typeCast(IScaleLegendSeries_$type, i));
                    }
                }
                this.wg();
                break;
            case "SeriesViewer":
                this.wg();
                break;
        }
    };
    BubbleSeries.prototype.updateSizeScaleGlobals = function () {
        var a = new ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.vi != null) {
            a.b = this.vi.minimum;
            a.a = this.vi.maximum;
        }
        if (this.vb != null) {
            this.vb.ab(a.b, a.a);
        }
    };
    BubbleSeries.prototype.updateFillScaleGlobals = function () {
        var a = new ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.vf != null) {
            a.b = this.vf.minimum;
            a.a = this.vf.maximum;
        }
        if (this.u8 != null) {
            this.u8.z(a.b, a.a);
        }
    };
    BubbleSeries.prototype.u7 = function (a) {
        var b = new ActualRange();
        b.b = NaN;
        b.a = NaN;
        if (this.vi != null) {
            b.b = this.vi.minimum;
            b.a = this.vi.maximum;
        }
        if (a != null) {
            a.x();
            if (this.vl) {
                b.b = a.globalMinimum;
                b.a = a.globalMaximum;
            }
        }
        return b;
    };
    BubbleSeries.prototype.u6 = function () {
        var a = new ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.vf != null) {
            a.b = this.vf.minimum;
            a.a = this.vf.maximum;
        }
        var b = typeCast(ValueBrushScale.$, this.u8);
        if (b != null) {
            b.s();
            if (this.vj && this.u8.o.count > 1) {
                a.b = b.q;
                a.a = b.p;
            }
        }
        return a;
    };
    BubbleSeries.prototype.wi = function (a, b, c, d) {
        var e = c.width;
        if (!this.b0.bu.isEmpty) {
            e = this.b0.bu.width;
        }
        else if (this.cd != null && !this.cd.to.isEmpty) {
            e = this.cd.to.width;
        }
        var f = DeviceUtils.c(e);
        this.va = this.vb || ((function () {
            var $ret = new SizeScale();
            $ret.minimumValue = f / 10;
            $ret.maximumValue = f / 5;
            return $ret;
        })());
        if (this.va != null) {
            var g = this.va.minimumValue;
            var h = this.va.maximumValue;
            var i = this.va.logarithmBase;
            var j = this.u7(this.va);
            var k = j.b;
            var l = j.a;
            if (this.va.isLogarithmic) {
                for (var m = 0; m < b.count; m++) {
                    b._inner[m] = BubbleSeries.vo(k, l, g, h, i, b._inner[m]);
                }
            }
            else {
                for (var n = 0; n < b.count; n++) {
                    b._inner[n] = BubbleSeries.vn(k, l, g, h, b._inner[n]);
                }
            }
        }
        var o = 1;
        o = DeviceUtils.d();
        var p = this.vb == null;
        if (d) {
            var q = c.width / e;
            for (var r = 0; r < b.count; r++) {
                if (p) {
                    b._inner[r] = b._inner[r] / o;
                }
                b._inner[r] = b._inner[r] * q;
            }
        }
        for (var s = 0; s < a.count; s++) {
            var t = a._inner[s];
            if (p && !d) {
                t.width = Math.max(0, b._inner[s] / o);
                t.height = Math.max(0, b._inner[s] / o);
            }
            else {
                t.width = Math.max(0, b._inner[s]);
                t.height = Math.max(0, b._inner[s]);
            }
        }
    };
    BubbleSeries.prototype.wh = function (a) {
        var b = typeCast(BubbleSeriesView.$, this.bz);
        this.u9.b3 = false;
        if (b != null) {
            b.b3 = false;
        }
        var c = typeCast(CustomPaletteBrushScale.$, this.u8);
        var d = typeCast(ValueBrushScale.$, this.u8);
        var e = this.u8;
        var f = this.u6();
        var g = f.b;
        var h = f.a;
        var i = this.u8 == null || !this.u8.isReady || (d != null && this.vw == null);
        if (i) {
            this.u9.dg();
            if (b != null) {
                b.dg();
            }
            return;
        }
        this.u9.b3 = true;
        if (b != null) {
            b.b3 = true;
        }
        var j = a.count;
        var k = this.ck;
        for (var l = 0; l < j; l++) {
            var m = a._inner[l];
            var n = typeCast(DataContext.$, m.content);
            if (n != null) {
                var o = null;
                var p = k.indexOf(n.item);
                if (c != null) {
                    o = c.getBrush1(p, k.count);
                }
                else if (d != null && this.vf != null) {
                    var q = this.vf.item(p);
                    o = d.getBrushByRange(q, g, h);
                }
                else if (e != null) {
                    o = e.getBrush(p);
                }
                else {
                    if (this.rj == null) {
                        o = this.rh;
                    }
                    else {
                        o = this.rj;
                    }
                }
                var r = null;
                if (this.rk == null) {
                    r = this.ri;
                }
                else {
                    r = this.rk;
                }
                if (this.vk && o != null) {
                    r = o;
                }
                if (r != null && !isNaN_(this.vq)) {
                    r = BrushUtil.l(r, this.vq);
                }
                if (o != null && !isNaN_(this.vp)) {
                    o = BrushUtil.l(o, this.vp);
                }
                n.itemBrush = o;
                n.actualItemBrush = o;
                n.outline = r;
            }
        }
    };
    BubbleSeries.prototype.getDataLegendSeriesContextAt = function (a, b) {
        var c = { $type: Point_$type, x: a, y: b };
        var d = this.hv(c);
        var e = d == null ? NaN : this.gd(d, "XMemberPath");
        var f = d == null ? NaN : this.gd(d, "YMemberPath");
        var g = new DataLegendSeriesValueInfo();
        g.a = 13;
        g.l = e;
        g.p = this.ti != null ? this.ti : "X";
        g.q = this.te != null ? this.te : "X:";
        g.r = this.tg != null ? this.tg : "";
        var h = new DataLegendSeriesValueInfo();
        h.l = f;
        h.a = 14;
        h.p = this.tq != null ? this.tq : "Y";
        h.q = this.tm != null ? this.tm : "Y:";
        h.r = this.to != null ? this.to : "";
        var i = new DataLegendSeriesContext();
        i.f = ((function () {
            var $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
            $ret.add(g);
            $ret.add(h);
            return $ret;
        })());
        i.b = this.av();
        if (!stringIsNullOrEmpty(this.wb)) {
            var j = d == null ? NaN : this.gd(d, "RadiusMemberPath");
            var k = new DataLegendSeriesValueInfo();
            k.l = j;
            k.a = 11;
            k.p = this.wb != null ? this.wb : "Radius";
            k.q = this.v7 != null ? this.v7 : "R:";
            k.r = this.v9 != null ? this.v9 : "";
            i.f.add(k);
        }
        else if (this.va != null) {
            var l = new DataLegendSeriesValueInfo();
            l.l = this.va.maximumValue;
            l.a = 11;
            l.p = this.wb != null ? this.wb : "Radius";
            l.q = this.v7 != null ? this.v7 : "R:";
            l.r = this.v9 != null ? this.v9 : "";
            i.f.add(l);
        }
        if (!stringIsNullOrEmpty(this.vw)) {
            var m = d == null ? NaN : this.gd(d, "FillMemberPath");
            var n = new DataLegendSeriesValueInfo();
            n.l = m;
            n.a = 12;
            n.p = this.vw != null ? this.vw : "Fill";
            n.q = this.vs != null ? this.vs : "F:";
            n.r = this.vu != null ? this.vu : "";
            i.f.add(n);
        }
        return i;
    };
    Object.defineProperty(BubbleSeries.prototype, "actualMarkerBrush", {
        get: function () {
            return this.rh;
        },
        enumerable: false,
        configurable: true
    });
    BubbleSeries.$t = markType(BubbleSeries, 'BubbleSeries', ScatterBase.$, [IScaleLegendSeries_$type, ISupportsSizeScale_$type, ISupportsFillScale_$type]);
    BubbleSeries.$$p = markDep(DependencyProperty, PropertyMetadata, BubbleSeries, 'raisePropertyChanged', ['FillMemberAsLegendLabel:vs:wj', [2, null], 'FillMemberAsLegendUnit:vu:wk', [2, null], 'FillMemberPath:vw:wl', [2], 'FillScale:u8:wm', [BrushScale.$], 'FillScaleUseGlobalValues:vj:wn', [0, false], 'LabelMemberPath:v1:wo', [2], 'MarkerBrushBrightness:vp:wp', [1, NaN], 'MarkerOutlineBrightness:vq:wq', [1, NaN], 'MarkerOutlineUsesFillScale:vk:wr', [0, false], 'RadiusMemberAsLegendLabel:v7:ws', [2, null], 'RadiusMemberAsLegendUnit:v9:wt', [2, null], 'RadiusMemberPath:wb:wu', [2, null], 'RadiusScale:vb:wv', [SizeScale.$], 'RadiusScaleUseGlobalValues:vl:ww', [0, false]]);
    return BubbleSeries;
}(ScatterBase));
export { BubbleSeries };
/**
 * @hidden
 */
var CustomPaletteBrushScale = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CustomPaletteBrushScale, _super);
    function CustomPaletteBrushScale() {
        return _super.call(this) || this;
    }
    CustomPaletteBrushScale.prototype.getBrush1 = function (a, b) {
        if (this.brushes == null || this.brushes.count == 0) {
            return null;
        }
        if (this.brushSelectionMode == 0) {
            return _super.prototype.getBrush.call(this, a % this.brushes.count);
        }
        var c = BubbleSeries.vn(0, b - 1, 0, this.brushes.count - 1, a);
        return this.ab(c);
    };
    CustomPaletteBrushScale.prototype.get_isReady = function () {
        return this.brushes != null && this.brushes.count > 0;
    };
    CustomPaletteBrushScale.$t = markType(CustomPaletteBrushScale, 'CustomPaletteBrushScale', BrushScale.$);
    CustomPaletteBrushScale.$$p = markDep(DependencyProperty, PropertyMetadata, CustomPaletteBrushScale, 'v', ['BrushSelectionMode', [BrushSelectionMode_$type, enumGetBox(BrushSelectionMode_$type, 0)]]);
    return CustomPaletteBrushScale;
}(BrushScale));
export { CustomPaletteBrushScale };
/**
 * @hidden
 */
var BubbleSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BubbleSeriesView, _super);
    function BubbleSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.df = null;
        _this.df = a;
        _this.cx = new ScatterTrendLineManager();
        return _this;
    }
    BubbleSeriesView.prototype.as = function () {
        _super.prototype.as.call(this);
        if (!this.q) {
            this.b1.qh = Defaults.e;
        }
    };
    BubbleSeriesView.prototype.cu = function () {
        var _this = this;
        return new BubbleMarkerManager(function (a) { return _this.cy.item(a); }, function (a) { return _this.cw.r1.c.item(a); }, runOn(this, this.c9), runOn(this, this.cr), runOn(this, this.cz));
    };
    BubbleSeriesView.prototype.dh = function () {
        var a = this.cv;
        this.df.wi(a.n, a.o, this.bu, this == this.e.bz);
        this.aq();
    };
    BubbleSeriesView.prototype.di = function () {
        var a = this.cv;
        this.df.wh(a.n);
    };
    BubbleSeriesView.prototype.dg = function () {
        var e_2, _a;
        var a = this.cv;
        try {
            for (var _b = __values(fromEnum(a.n)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                var c = typeCast(DataContext.$, b.content);
                if (c != null) {
                    c.itemBrush = null;
                    c.outline = null;
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    BubbleSeriesView.prototype.getDefaultTooltipTemplate = function () {
        var a = "<div class='ui-chart-default-tooltip-content'><span";
        var b = this.e.a6.a$r(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.df.title + "</span><br/><span>" + "(${item." + this.df.ti + "}, ${item." + this.df.tq + "})</span>";
        if (!stringIsNullOrEmpty(this.df.wb)) {
            a += "<span>, Radius: ${item." + this.df.wb + "}</span>";
        }
        a += "</div>";
        return a;
    };
    BubbleSeriesView.$t = markType(BubbleSeriesView, 'BubbleSeriesView', ScatterBaseView.$);
    return BubbleSeriesView;
}(ScatterBaseView));
export { BubbleSeriesView };
