import { HighlightingState_$type } from "./HighlightingState";
import { IgrSeries } from "./igr-series";
import { HighlightingInfo as HighlightingInfo_internal } from "./HighlightingInfo";
import { ensureEnum, ensureBool } from "igniteui-react-core";
/**
 * Contains contextual information about a highlighting.
*/
var IgrHighlightingInfo = /** @class */ /*@__PURE__*/ (function () {
    function IgrHighlightingInfo() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgrHighlightingInfo.prototype.createImplementation = function () {
        return new HighlightingInfo_internal();
    };
    Object.defineProperty(IgrHighlightingInfo.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgrHighlightingInfo.prototype.onImplementationCreated = function () {
    };
    IgrHighlightingInfo.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(IgrHighlightingInfo.prototype, "startIndex", {
        /**
         * The index of the first highlighted item.
        *
        * You can use `startIndex` to get or set the first highlighted item for the series.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrHighlightingInfo.prototype, "endIndex", {
        /**
         * The index of the last highlighted item.
        *
        * You can use the `endIndex` to get or set the last highlighted item for the series.
        */
        get: function () {
            return this.i.g;
        },
        set: function (v) {
            this.i.g = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrHighlightingInfo.prototype, "state", {
        /**
         * The state of the highlighting.
        *
        * You can use the `state` to get or set the transitioning state of the highlighting, between In, Out, or Static.
        */
        get: function () {
            return this.i.a;
        },
        set: function (v) {
            this.i.a = ensureEnum(HighlightingState_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrHighlightingInfo.prototype, "progress", {
        /**
         * A number between 0 and 1 representing the progress of the highlighting.
        *
        * You can use the `progress` property to set a number between 0 and 1 representing the progress of the highlighting.
        */
        get: function () {
            return this.i.f;
        },
        set: function (v) {
            this.i.f = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrHighlightingInfo.prototype, "isMarker", {
        /**
         * True if this HighlightingInfo represents a marker highlighting.
        *
        * You can set the `isMarker` to True if the HighlightingInfo represents a marker highlighting. Otherwise set to false.
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrHighlightingInfo.prototype, "isFullRange", {
        /**
         * True if this HighlightingInfo represents a full selection of the data.
        */
        get: function () {
            return this.i.d;
        },
        set: function (v) {
            this.i.d = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrHighlightingInfo.prototype, "isExclusive", {
        get: function () {
            return this.i.c;
        },
        set: function (v) {
            this.i.c = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrHighlightingInfo.prototype, "series", {
        /**
         * The series in context.
        *
        * You can use the `series` property to get the series in context.
        */
        get: function () {
            if (this.i.b == null) {
                return null;
            }
            if (!this.i.b.externalObject) {
                var e = IgrSeries._createFromInternal(this.i.b);
                if (e) {
                    e._implementation = this.i.b;
                }
                this.i.b.externalObject = e;
            }
            return this.i.b.externalObject;
        },
        set: function (v) {
            v == null ? this.i.b = null : this.i.b = v.i;
        },
        enumerable: false,
        configurable: true
    });
    IgrHighlightingInfo.prototype.findByName = function (name) {
        if (this.series && this.series.name && this.series.name == name) {
            return this.series;
        }
        return null;
    };
    return IgrHighlightingInfo;
}());
export { IgrHighlightingInfo };
