import { __extends } from "tslib";
import { TrendLineType_$type } from "igniteui-react-core";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior_$type } from "./ConsolidatedItemHitTestBehavior";
import { IgrCategorySeries } from "./igr-category-series";
import { ensureEnum, brushToString, stringToBrush, toPoint } from "igniteui-react-core";
/**
 * Represents the base class for all IgxDataChartComponent anchored category/value series.
*
* The `IgrAnchoredCategorySeries` represents the base class for all IgxDataChartComponent anchored category/value series.
*
* ```ts
* <IgrDataChart >
*
*
*     <IgrCategoryXAxis name="xAxisYears"
*     interval={12} labelLocation="OutsideBottom"
*     label="Year"  overlap={1} gap={0.4}  />
*
*     <IgrCategoryXAxis name="xAxisMonths"
*     interval={1}  labelLocation="OutsideBottom"
*     label="Month" overlap={1} gap={0.4}/>
*
*     <IgrNumericYAxis  name="yAxisLeft"
*     title="Expanse | Revenue"
*     minimumValue={-900} labelLocation="OutsideLeft"
*     maximumValue={900}
*     interval={300} />
*
*     <IgrNumericYAxis  name="yAxisRight"
*     title="Profit (%)"
*     minimumValue={0}  labelLocation="OutsideRight"
*     maximumValue={100} />
*
*
*     <IgrLineSeries name="series1"
*     valueMemberPath="Revenue"
*     xAxisName="xAxisMonths"
*     yAxisName="yAxisLeft" />
*  </IgrDataChart>
* ```
*/
var IgrAnchoredCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrAnchoredCategorySeries, _super);
    function IgrAnchoredCategorySeries(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "valueMemberPath", {
        /**
         * Gets or sets the value mapping property for the current series object.
        *
        * The `valueMemberPath` property is used for the value mapping property of the current series object.
        *
        * ```ts
        * <IgrDataChart >
        *
        *
        *     <IgrCategoryXAxis name="xAxisYears"
        *     interval={12} labelLocation="OutsideBottom"
        *     label="Year"  overlap={1} gap={0.4}  />
        *
        *     <IgrCategoryXAxis name="xAxisMonths"
        *     interval={1}  labelLocation="OutsideBottom"
        *     label="Month" overlap={1} gap={0.4}/>
        *
        *     <IgrNumericYAxis  name="yAxisLeft"
        *     title="Expanse | Revenue"
        *     minimumValue={-900} labelLocation="OutsideLeft"
        *     maximumValue={900}
        *     interval={300} />
        *
        *     <IgrNumericYAxis  name="yAxisRight"
        *     title="Profit (%)"
        *     minimumValue={0}  labelLocation="OutsideRight"
        *     maximumValue={100} />
        *
        *
        *     <IgrLineSeries name="series1"
        *     valueMemberPath="Revenue"
        *     xAxisName="xAxisMonths"
        *     yAxisName="yAxisLeft" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.t5;
        },
        set: function (v) {
            this.i.t5 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "valueMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.t1;
        },
        set: function (v) {
            this.i.t1 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "valueMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series value in the Data Legend.
        */
        get: function () {
            return this.i.t3;
        },
        set: function (v) {
            this.i.t3 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "trendLineType", {
        /**
         * Gets or sets the trend type for the current series object.
        *
        * The `trendLineType` property is used for the current series object's trend type.'
        *
        * ```ts
        * <IgrDataChart >
        *
        *
        *     <IgrCategoryXAxis name="xAxisYears"
        *     interval={12} labelLocation="OutsideBottom"
        *     label="Year"  overlap={1} gap={0.4}  />
        *
        *     <IgrCategoryXAxis name="xAxisMonths"
        *     interval={1}  labelLocation="OutsideBottom"
        *     label="Month" overlap={1} gap={0.4}/>
        *
        *     <IgrNumericYAxis  name="yAxisLeft"
        *     title="Expanse | Revenue"
        *     minimumValue={-900} labelLocation="OutsideLeft"
        *     maximumValue={900}
        *     interval={300} />
        *
        *     <IgrNumericYAxis  name="yAxisRight"
        *     title="Profit (%)"
        *     minimumValue={0}  labelLocation="OutsideRight"
        *     maximumValue={100} />
        *
        *
        *     <IgrLineSeries name="series1"
        *     valueMemberPath="Revenue"
        *     xAxisName="xAxisMonths"
        *     yAxisName="yAxisLeft"
        * 	trendLineType="SimpleAverage" />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * series.trendLineType= "CubicFit";
        * ```
        */
        get: function () {
            return this.i.trendLineType;
        },
        set: function (v) {
            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "trendLineBrush", {
        /**
         * Gets or sets the brush to use to draw the trend line.
        *
        * The `trendLineBrush` property is used to brush the trend line.
        *
        * ```ts
        * <IgrDataChart >
        *
        *
        *     <IgrCategoryXAxis name="xAxisYears"
        *     interval={12} labelLocation="OutsideBottom"
        *     label="Year"  overlap={1} gap={0.4}  />
        *
        *     <IgrCategoryXAxis name="xAxisMonths"
        *     interval={1}  labelLocation="OutsideBottom"
        *     label="Month" overlap={1} gap={0.4}/>
        *
        *     <IgrNumericYAxis  name="yAxisLeft"
        *     title="Expanse | Revenue"
        *     minimumValue={-900} labelLocation="OutsideLeft"
        *     maximumValue={900}
        *     interval={300} />
        *
        *     <IgrNumericYAxis  name="yAxisRight"
        *     title="Profit (%)"
        *     minimumValue={0}  labelLocation="OutsideRight"
        *     maximumValue={100} />
        *
        *
        *     <IgrLineSeries name="series1"
        *     valueMemberPath="Revenue"
        *     xAxisName="xAxisMonths"
        *     yAxisName="yAxisLeft"
        * 	trendLineBrush="Gray"  />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * series.trendLineBrush="red";
        * ```
        */
        get: function () {
            return brushToString(this.i.trendLineBrush);
        },
        set: function (v) {
            this.i.trendLineBrush = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "actualTrendLineBrush", {
        /**
         * Gets the effective TrendLineBrush for this series.
        *
        * The `actualTrendLineBrush` property is used to gets the effective `trendLineBrush` for this series.
        */
        get: function () {
            return brushToString(this.i.up);
        },
        set: function (v) {
            this.i.up = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "trendLineThickness", {
        /**
         * Gets or sets the thickness of the current series object's trend line.
        *
        * The `trendLineThickness` property is used for thickness of the current series object's trend line.
        *
        * ```ts
        * <IgrDataChart >
        *
        *
        *     <IgrCategoryXAxis name="xAxisYears"
        *     interval={12} labelLocation="OutsideBottom"
        *     label="Year"  overlap={1} gap={0.4}  />
        *
        *     <IgrCategoryXAxis name="xAxisMonths"
        *     interval={1}  labelLocation="OutsideBottom"
        *     label="Month" overlap={1} gap={0.4}/>
        *
        *     <IgrNumericYAxis  name="yAxisLeft"
        *     title="Expanse | Revenue"
        *     minimumValue={-900} labelLocation="OutsideLeft"
        *     maximumValue={900}
        *     interval={300} />
        *
        *     <IgrNumericYAxis  name="yAxisRight"
        *     title="Profit (%)"
        *     minimumValue={0}  labelLocation="OutsideRight"
        *     maximumValue={100} />
        *
        *
        *     <IgrLineSeries name="series1"
        *     valueMemberPath="Revenue"
        *     xAxisName="xAxisMonths"
        *     yAxisName="yAxisLeft"
        * 	trendLineThickness ="2" />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * series.trendLineThickness= 2;
        * ```
        */
        get: function () {
            return this.i.trendLineThickness;
        },
        set: function (v) {
            this.i.trendLineThickness = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "trendLinePeriod", {
        /**
         * Gets or sets the trend line period for the current series.
         * The typical, and initial, value for trend line period is 7.
        *
        * The `trendLinePeriod` property is used for trend line period of the current series.
        *
        * ```ts
        * <IgrDataChart >
        *
        *
        *     <IgrCategoryXAxis name="xAxisYears"
        *     interval={12} labelLocation="OutsideBottom"
        *     label="Year"  overlap={1} gap={0.4}  />
        *
        *     <IgrCategoryXAxis name="xAxisMonths"
        *     interval={1}  labelLocation="OutsideBottom"
        *     label="Month" overlap={1} gap={0.4}/>
        *
        *     <IgrNumericYAxis  name="yAxisLeft"
        *     title="Expanse | Revenue"
        *     minimumValue={-900} labelLocation="OutsideLeft"
        *     maximumValue={900}
        *     interval={300} />
        *
        *     <IgrNumericYAxis  name="yAxisRight"
        *     title="Profit (%)"
        *     minimumValue={0}  labelLocation="OutsideRight"
        *     maximumValue={100} />
        *
        *
        *     <IgrLineSeries name="series1"
        *     valueMemberPath="Revenue"
        *     xAxisName="xAxisMonths"
        *     yAxisName="yAxisLeft"
        * 	trendLinePeriod ="2" />
        *  </IgrDataChart>
        * ```
        *
        * ```ts
        * series.trendLinePeriod= 7;
        * ```
        */
        get: function () {
            return this.i.trendLinePeriod;
        },
        set: function (v) {
            this.i.trendLinePeriod = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "markerCollisionAvoidance", {
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        *
        * The `markerCollisionAvoidance` property controls the technique the chart uses to avoid overlapping markers.
        *
        * ```ts
        * <IgrDataChart >
        *
        *
        *     <IgrCategoryXAxis name="xAxisYears"
        *     interval={12} labelLocation="OutsideBottom"
        *     label="Year"  overlap={1} gap={0.4}  />
        *
        *     <IgrCategoryXAxis name="xAxisMonths"
        *     interval={1}  labelLocation="OutsideBottom"
        *     label="Month" overlap={1} gap={0.4}/>
        *
        *     <IgrNumericYAxis  name="yAxisLeft"
        *     title="Expanse | Revenue"
        *     minimumValue={-900} labelLocation="OutsideLeft"
        *     maximumValue={900}
        *     interval={300} />
        *
        *     <IgrNumericYAxis  name="yAxisRight"
        *     title="Profit (%)"
        *     minimumValue={0}  labelLocation="OutsideRight"
        *     maximumValue={100} />
        *
        *
        *     <IgrLineSeries name="series1"
        *     valueMemberPath="Revenue"
        *     xAxisName="xAxisMonths"
        *     yAxisName="yAxisLeft"
        * 	markerCollisionAvoidance="fade"  />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.tn;
        },
        set: function (v) {
            this.i.tn = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredCategorySeries.prototype, "consolidatedItemHitTestBehavior", {
        /**
         * Determines the item returned in hit-testing when the pointer is over an object which represents several consolidated items.
        *
        * The `consolidatedItemHitTestBehavior` property is used to determines returned item in hit-testing when the pointer is over an object which represents several consolidated items.
        *
        * ```ts
        * <IgrDataChart >
        *
        *
        *     <IgrCategoryXAxis name="xAxisYears"
        *     interval={12} labelLocation="OutsideBottom"
        *     label="Year"  overlap={1} gap={0.4}  />
        *
        *     <IgrCategoryXAxis name="xAxisMonths"
        *     interval={1}  labelLocation="OutsideBottom"
        *     label="Month" overlap={1} gap={0.4}/>
        *
        *     <IgrNumericYAxis  name="yAxisLeft"
        *     title="Expanse | Revenue"
        *     minimumValue={-900} labelLocation="OutsideLeft"
        *     maximumValue={900}
        *     interval={300} />
        *
        *     <IgrNumericYAxis  name="yAxisRight"
        *     title="Profit (%)"
        *     minimumValue={0}  labelLocation="OutsideRight"
        *     maximumValue={100} />
        *
        *
        *     <IgrLineSeries name="series1"
        *     valueMemberPath="Revenue"
        *     xAxisName="xAxisMonths"
        *     yAxisName="yAxisLeft"
        * 	consolidatedItemHitTestBehavior="Basic"  />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.to;
        },
        set: function (v) {
            this.i.to = ensureEnum(ConsolidatedItemHitTestBehavior_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    IgrAnchoredCategorySeries.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.hy(item, memberPathName);
        return (iv);
    };
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * The `scrollIntoView` method is used to notifies the target axis or series that it should scroll the requested data item into view.
    *
    * ```ts
    * this.series.scrollIntoView(dataItem);
    * ```
    */
    IgrAnchoredCategorySeries.prototype.scrollIntoView = function (item) {
        var iv = this.i.eo(item);
        return (iv);
    };
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    *
    * The `getItem` method is used to gets the item that is the best match for the specified world coordinates.
    *
    * ```ts
    * let item: number = this.series.getItem({x:.5,y:.5});
    * ```
    */
    IgrAnchoredCategorySeries.prototype.getItem = function (world) {
        var iv = this.i.hv(toPoint(world));
        return (iv);
    };
    return IgrAnchoredCategorySeries;
}(IgrCategorySeries));
export { IgrAnchoredCategorySeries };
