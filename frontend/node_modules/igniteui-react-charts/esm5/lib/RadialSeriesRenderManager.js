/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { AssigningRadialMarkerStyleEventArgs } from "./AssigningRadialMarkerStyleEventArgs";
import { AssigningRadialStyleEventArgs } from "./AssigningRadialStyleEventArgs";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
var RadialSeriesRenderManager = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialSeriesRenderManager, _super);
    function RadialSeriesRenderManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ax = 0;
        _this.ay = 0;
        _this.av = null;
        _this.aw = null;
        return _this;
    }
    RadialSeriesRenderManager.prototype.c = function () {
        this.av = new AssigningRadialMarkerStyleEventArgs();
        return this.av;
    };
    RadialSeriesRenderManager.prototype.a = function () {
        this.aw = new AssigningRadialStyleEventArgs();
        return this.aw;
    };
    RadialSeriesRenderManager.prototype.az = function (a, b, c, d, e) {
        this.ax = d;
        this.ay = e;
        this.w(a, b, c);
    };
    RadialSeriesRenderManager.prototype.a0 = function (a, b, c, d, e) {
        this.ax = d;
        this.ay = e;
        this.x(a, b, c);
    };
    RadialSeriesRenderManager.prototype.au = function (a, b) {
        var c = this.ax;
        var d = Math.min(b * c, a - 1);
        var e = Math.min(d + c - 1, a - 1);
        var f = new Array(2);
        f[0] = Math.min(d + this.ay * c, a - 1);
        f[1] = Math.min(e + this.ay * c, a - 1);
        return f;
    };
    RadialSeriesRenderManager.prototype.a1 = function (a, b, c, d, e, f, g, h, i) {
        if (d == -1) {
            {
                a.c = false;
                a.o = 0;
                a.n = e - 1;
            }
        }
        else {
            {
                if (i) {
                    a.o = d;
                    a.n = d;
                }
                else {
                    var j = this.au(e, d);
                    a.c = false;
                    a.o = j[0];
                    a.n = j[1];
                }
            }
        }
    };
    RadialSeriesRenderManager.$t = markType(RadialSeriesRenderManager, 'RadialSeriesRenderManager', SeriesRenderManager.$);
    return RadialSeriesRenderManager;
}(SeriesRenderManager));
export { RadialSeriesRenderManager };
