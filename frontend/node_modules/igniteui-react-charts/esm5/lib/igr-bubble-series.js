import { __extends } from "tslib";
import { IgrSizeScale } from "./igr-size-scale";
import { IgrBrushScale } from "./igr-brush-scale";
import { IgrScatterBase } from "./igr-scatter-base";
import { BubbleSeries } from "./BubbleSeries";
import { ensureBool } from "igniteui-react-core";
/**
 * Represents a IgxDataChartComponent bubble series.
*/
var IgrBubbleSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrBubbleSeries, _super);
    function IgrBubbleSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrBubbleSeries.prototype.createImplementation = function () {
        return new BubbleSeries();
    };
    Object.defineProperty(IgrBubbleSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "hasOnlyMarkers", {
        /**
         * Gets whether the series has only marker as visuals
        */
        get: function () {
            return this.i.c4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "radiusMemberPath", {
        /**
         * Gets or sets the radius mapping property for the current series object.
        */
        get: function () {
            return this.i.wb;
        },
        set: function (v) {
            this.i.wb = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "radiusScale", {
        /**
         * Gets or sets the radius size scale for the bubbles.
        */
        get: function () {
            if (this.i.vb == null) {
                return null;
            }
            if (!this.i.vb.externalObject) {
                var e = IgrSizeScale._createFromInternal(this.i.vb);
                if (e) {
                    e._implementation = this.i.vb;
                }
                this.i.vb.externalObject = e;
            }
            return this.i.vb.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.vb = null : this.i.vb = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "labelMemberPath", {
        /**
         * Gets or sets the Label mapping property for the current series object.
        */
        get: function () {
            return this.i.v1;
        },
        set: function (v) {
            this.i.v1 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "fillMemberPath", {
        /**
         * Gets or sets the fill mapping property for the current series object.
        */
        get: function () {
            return this.i.vw;
        },
        set: function (v) {
            this.i.vw = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "fillScale", {
        /**
         * Gets or sets the brush scale for the fill brush of markers.
        */
        get: function () {
            if (this.i.u8 == null) {
                return null;
            }
            if (!this.i.u8.externalObject) {
                var e = IgrBrushScale._createFromInternal(this.i.u8);
                if (e) {
                    e._implementation = this.i.u8;
                }
                this.i.u8.externalObject = e;
            }
            return this.i.u8.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.u8 = null : this.i.u8 = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "fillScaleUseGlobalValues", {
        /**
         * Gets or sets whether or not the FillScale uses global min/max values of FillMemberPath from multiple series.
         * This setting applies only if multiple series are using the same FillScale.
        */
        get: function () {
            return this.i.vj;
        },
        set: function (v) {
            this.i.vj = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "markerOutlineUsesFillScale", {
        /**
         * Gets or sets whether or not the marker outline should use FillScale like the marker fill does.
         * This setting applies only if the current series has a FillScale set and it overrides MarkerOutline setting.
        */
        get: function () {
            return this.i.vk;
        },
        set: function (v) {
            this.i.vk = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "markerOutlineBrightness", {
        /**
         * Gets or sets brightness of the marker outline. Using negative value will change marker outline to darker color and positive value will change marker outline to brighter color
         * Note you can use any values between minimum value of -1 (darkest outline) and maximum value of 1 (brightest outline)
        */
        get: function () {
            return this.i.vq;
        },
        set: function (v) {
            this.i.vq = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "markerBrushBrightness", {
        /**
         * Gets or sets brightness of the marker fill. Using negative value will change marker fill to darker color and positive value will change marker fill to brighter color
         * Note you can use any values between minimum value of -1 (darkest fill) and maximum value of 1 (brightest fill)
        */
        get: function () {
            return this.i.vp;
        },
        set: function (v) {
            this.i.vp = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "radiusScaleUseGlobalValues", {
        /**
         * Gets or sets the whether or not the RadiusScale uses global values of RadiusMemberPath from multiple series.
         * This setting applies only if multiple series are using the same RadiusScale.
        */
        get: function () {
            return this.i.vl;
        },
        set: function (v) {
            this.i.vl = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "radiusMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series' radius value in the Data Legend.
        */
        get: function () {
            return this.i.v7;
        },
        set: function (v) {
            this.i.v7 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "fillMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series' fill value in the Data Legend.
        */
        get: function () {
            return this.i.vs;
        },
        set: function (v) {
            this.i.vs = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "radiusMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series' radius value in the Data Legend.
        */
        get: function () {
            return this.i.v9;
        },
        set: function (v) {
            this.i.v9 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrBubbleSeries.prototype, "fillMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series' fill value in the Data Legend.
        */
        get: function () {
            return this.i.vu;
        },
        set: function (v) {
            this.i.vu = v;
        },
        enumerable: false,
        configurable: true
    });
    IgrBubbleSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.radiusScale && this.radiusScale.name && this.radiusScale.name == name) {
            return this.radiusScale;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        return null;
    };
    IgrBubbleSeries.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.radiusScale && this.radiusScale._styling) {
            this.radiusScale._styling(container, component, this);
        }
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgrBubbleSeries.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.hy(item, memberPathName);
        return (iv);
    };
    return IgrBubbleSeries;
}(IgrScatterBase));
export { IgrBubbleSeries };
