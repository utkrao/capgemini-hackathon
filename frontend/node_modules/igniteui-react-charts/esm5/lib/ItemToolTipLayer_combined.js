/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { AnnotationLayer } from "./AnnotationLayer";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { ItemTooltipLayerFrame } from "./ItemTooltipLayerFrame";
import { Base, String_$type, fromEnum, Point_$type, markType, markDep, runOn, typeCast } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ItemTooltipCollisionInfo } from "./ItemTooltipCollisionInfo";
import { Rect } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { DomWrapper_$type } from "igniteui-react-core";
/**
 * @hidden
 */
var ItemToolTipLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ItemToolTipLayer, _super);
    function ItemToolTipLayer() {
        var _this = _super.call(this) || this;
        var a = new ItemTooltipLayerFrame();
        var b = new ItemTooltipLayerFrame();
        var c = new ItemTooltipLayerFrame();
        var d = _this.ho / 1000;
        _this.qa = a;
        _this.p9 = b;
        _this.qb = c;
        _this.ab = ItemToolTipLayer.$;
        return _this;
    }
    ItemToolTipLayer.prototype.get_db = function () {
        return true;
    };
    ItemToolTipLayer.prototype.bx = function () {
        return new ItemToolTipLayerView(this);
    };
    ItemToolTipLayer.prototype.l2 = function (a) {
        _super.prototype.l2.call(this, a);
        this.rc = a;
    };
    ItemToolTipLayer.prototype.get_dl = function () {
        return true;
    };
    ItemToolTipLayer.prototype.l7 = function (a, b, c, d) {
        _super.prototype.l7.call(this, a, b, c, d);
        switch (b) {
            case ItemToolTipLayer.$$p[1]:
            case ItemToolTipLayer.$$p[2]:
                this.ml(true);
                break;
            case ItemToolTipLayer.$$p[3]:
                this.ml(true);
                break;
            case ItemToolTipLayer.$$p[0]:
                this.ml(true);
                break;
            case "SeriesViewer":
                this.rc.cg();
                break;
        }
    };
    ItemToolTipLayer.prototype.qt = function (a, b) {
        if (this.rd == null || this.rd == a) {
            if (!this.as.c) {
                this.ml(b);
            }
        }
    };
    ItemToolTipLayer.prototype.qg = function (a) {
        if (!_super.prototype.qg.call(this, a)) {
            return false;
        }
        if (this.rj != null) {
            if (a.dv) {
                var b = a.jr();
                if (!Base.equalsStatic(this.rj, b)) {
                    return false;
                }
            }
            else {
                if (!Base.equalsStatic(this.rj, a.name)) {
                    return false;
                }
            }
        }
        var c = this.qo(a);
        if (!c.c) {
            return false;
        }
        return true;
    };
    ItemToolTipLayer.prototype.qv = function (a, b) {
        var e_1, _a;
        var _this = this;
        _super.prototype.qv.call(this, a, b);
        var c = a;
        var d = this.rc.b5;
        var e = this.rg;
        var f = this.rf;
        c.o.clear();
        c.i.clear();
        c.n.clear();
        c.g.clear();
        c.f.clear();
        c.l.clear();
        c.j.clear();
        c.m.clear();
        c.k.clear();
        c.h.clear();
        if (isNaN_(this.q9.x) && isNaN_(this.q9.y)) {
            d.count = 0;
            return;
        }
        var g = 0;
        if (this.qg(this.rd)) {
            this.ro(this.rd, c, e, f, 0);
            g++;
        }
        else {
            try {
                for (var _b = __values(fromEnum(this.cd.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var h = _c.value;
                    if (this.qg(h)) {
                        this.ro(h, c, e, f, g);
                        g++;
                    }
                    if (h.isStacked) {
                        h.ld(function (i) {
                            if (_this.qg(i)) {
                                _this.ro(i, c, e, f, g);
                                g++;
                            }
                            return true;
                        });
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            this.rn(c);
        }
        d.count = g;
    };
    ItemToolTipLayer.prototype.rn = function (a) {
        var b = new List$1(ItemTooltipCollisionInfo.$, 0);
        for (var c = 0; c < a.f.count; c++) {
            var d = new ItemTooltipCollisionInfo();
            d.d = c;
            d.e = { $type: Point_$type, x: a.f._inner[c], y: a.g._inner[c] };
            d.c = a.m._inner[c];
            d.a = a.k._inner[c];
            d.b = a.o._inner[c];
            if (isNaN_(d.e.x) || isNaN_(d.e.y)) {
                continue;
            }
            b.add(d);
        }
        b.aa(function (e, f) {
            if (e.e.y < f.e.y) {
                return -1;
            }
            if (e.e.y > f.e.y) {
                return 1;
            }
            if (e.b < f.b) {
                return -1;
            }
            if (e.b > f.b) {
                return 1;
            }
            return 0;
        });
        var e = this.re(b);
        if (!e) {
            return;
        }
        for (var f = 0; f < b.count - 1; f++) {
            var g = b._inner[f];
            var h = b._inner[f + 1];
            var i = new Rect(0, g.e.x, g.e.y, g.c, g.a);
            var j = new Rect(0, h.e.x, h.e.y, h.c, h.a);
            if (i.intersectsWith(j) || i.top > j.bottom) {
                h.e = { $type: Point_$type, x: h.e.x, y: i.bottom + 1 };
            }
        }
        if (b._inner[b.count - 1].e.y + b._inner[b.count - 1].a > this.b0.bu.height) {
            b._inner[b.count - 1].e = { $type: Point_$type, x: b._inner[b.count - 1].e.x, y: b._inner[b.count - 1].e.y - ((b._inner[b.count - 1].e.y + b._inner[b.count - 1].a) - this.b0.bu.height) };
        }
        for (var k = b.count - 1; k >= 1; k--) {
            var l = b._inner[k];
            var m = b._inner[k - 1];
            var n = new Rect(0, l.e.x, l.e.y, l.c, l.a);
            var o = new Rect(0, m.e.x, m.e.y, m.c, m.a);
            if (n.intersectsWith(o) || n.top < o.bottom) {
                m.e = { $type: Point_$type, x: m.e.x, y: n.top - (o.height + 1) };
            }
        }
        for (var p = 0; p < b.count; p++) {
            var q = b._inner[p].d;
            var r = b._inner[p];
            a.f._inner[q] = r.e.x;
            a.g._inner[q] = r.e.y;
        }
    };
    ItemToolTipLayer.prototype.re = function (a) {
        if (a.count <= 1) {
            return false;
        }
        var b = this.b0.bu;
        for (var c = 0; c < a.count - 1; c++) {
            var d = a._inner[c];
            var e = a._inner[c + 1];
            var f = new Rect(0, d.e.x, d.e.y, d.c, d.a);
            var g = new Rect(0, e.e.x, e.e.y, e.c, e.a);
            if (f.intersectsWith(g)) {
                return true;
            }
        }
        return false;
    };
    ItemToolTipLayer.prototype.ro = function (a, b, c, d, e) {
        var f = this.qo(a);
        if (!f.c) {
            return;
        }
        var g = a.pq(f.d, c, d);
        var h = this.rc.b5;
        var i = this.rh(a);
        var j = this.q9;
        if (!c) {
            j = this.pt(g);
        }
        var k = a.hv(j);
        var l = h.item(e);
        var m = this.b0.bu;
        var n = null;
        if (a.dm && k != null) {
            n = a.au(k);
        }
        else {
            n = new DataContext();
            n.item = k;
            n.series = a;
        }
        if (!this.rc.b6(a, l, i, n)) {
            return;
        }
        var o = this.rc.ch(l, i, n);
        b.i.add1(l);
        b.j.add1(n);
        b.l.add1(i);
        var p = g.x;
        var q = g.x;
        q = Math.max(q, m.left);
        q = Math.min(q, m.right);
        b.n.add(q);
        var r = g.y;
        r = Math.max(r, m.top);
        r = Math.min(r, m.bottom);
        b.o.add(r);
        var s = DeviceUtils.g(10);
        var t = g.x + s;
        if (t + o.width > m.right) {
            t = (p - o.width) - s;
        }
        if (t < m.left) {
            t = m.left;
        }
        b.f.add(t);
        var u = (g.y - o.height) - s;
        if (u + o.height > m.bottom) {
            u = (m.bottom - o.height) - s;
        }
        if (u < m.top) {
            u = m.top;
        }
        b.g.add(u);
        b.m.add(o.width);
        b.k.add(o.height);
        var v = this.o3;
        if (v == null) {
            v = this.o7;
        }
        if (v == null) {
            v = a.o3;
        }
        b.h.add(v);
    };
    ItemToolTipLayer.prototype.rh = function (a) {
        return a.toolTip;
    };
    ItemToolTipLayer.prototype.lg = function () {
        this.q9 = { $type: Point_$type, x: NaN, y: NaN };
        this.ml(false);
        this.rc.ce(false);
    };
    ItemToolTipLayer.prototype.lh = function () {
        this.q9 = { $type: Point_$type, x: NaN, y: NaN };
        this.ml(false);
        this.rc.ce(true);
    };
    ItemToolTipLayer.prototype.qy = function (a, b) {
        _super.prototype.qy.call(this, a, b);
        var c = a;
        var d = c.o.count;
        var e = b.bu.left;
        var f = b.bu.right;
        var g = b.bu.top;
        var h = b.bu.bottom;
        for (var i = 0; i < d; i++) {
            if (isNaN_(c.n._inner[i]) || isNaN_(c.o._inner[i]) || isNaN_(c.f._inner[i]) || isNaN_(c.g._inner[i]) || c.l._inner[i] == null || c.j._inner[i] == null) {
                this.rc.cd(c.i._inner[i]);
                continue;
            }
            var j = c.f._inner[i];
            var k = c.g._inner[i];
            var l = c.m._inner[i];
            var m = c.k._inner[i];
            var n = false;
            if (j < e && Math.abs(j - e) > 1) {
                n = true;
            }
            if (k < g && Math.abs(k - g) > 1) {
                n = true;
            }
            if ((j + l) > f && Math.abs((j + l) - f) > 1) {
                n = true;
            }
            if ((k + m) > h && Math.abs((k + m) - h) > 1) {
                n = true;
            }
            if (n) {
                this.rc.cd(c.i._inner[i]);
                continue;
            }
            var o = c.i._inner[i];
            var p = Math.min(c.f._inner[i], c.n._inner[i]);
            var q = Math.min(c.g._inner[i], c.o._inner[i]);
            var r = c.n._inner[i] - c.f._inner[i];
            var s = c.o._inner[i] - c.g._inner[i];
            this.rc.cf(o, p, q, r, s);
        }
    };
    ItemToolTipLayer.prototype.en = function () {
        return true;
    };
    ItemToolTipLayer.$t = markType(ItemToolTipLayer, 'ItemToolTipLayer', AnnotationLayer.$);
    ItemToolTipLayer.$$p = markDep(DependencyProperty, PropertyMetadata, ItemToolTipLayer, 'raisePropertyChanged', ['SkipUnknownValues:rf:rp', [0, true], 'TargetSeriesName:rj:rq', [2, null], 'TargetSeries:rd:rr', [Series.$, null], 'UseInterpolation:rg:rs', [0, false]]);
    return ItemToolTipLayer;
}(AnnotationLayer));
export { ItemToolTipLayer };
/**
 * @hidden
 */
var ItemToolTipLayerView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ItemToolTipLayerView, _super);
    function ItemToolTipLayerView(a) {
        var _this = _super.call(this, a) || this;
        _this.b4 = null;
        _this.b5 = null;
        _this.b7 = null;
        _this._htmlTest = null;
        _this.b4 = a;
        _this.b7 = new List$1(PointerTooltip.$, 0);
        return _this;
    }
    ItemToolTipLayerView.prototype.as = function () {
        var _this = this;
        _super.prototype.as.call(this);
        this.b5 = ((function () {
            var $ret = new Pool$1(Base.$);
            $ret.create = runOn(_this, _this.b8);
            $ret.activate = runOn(_this, _this.ca);
            $ret.disactivate = runOn(_this, _this.cc);
            $ret.destroy = runOn(_this, _this.cb);
            return $ret;
        })());
        this.htmlTest = /^[^<]*(<[\w\W]+>)[^>]*$/;
    };
    ItemToolTipLayerView.prototype.aj = function () {
        _super.prototype.aj.call(this);
        for (var a = 0; a < this.b5.a.count; a++) {
            this.b5.a._inner[a].br();
        }
        for (var b = 0; b < this.b5.b.count; b++) {
            this.b5.b._inner[b].br();
        }
        this.b5.clear();
    };
    ItemToolTipLayerView.prototype.b8 = function () {
        var a = new PointerTooltip();
        a.bw(this.e.hb);
        a._visibility = 1;
        a.ap = this.e.cd.cu.k;
        this.b7.add(a);
        return a;
    };
    ItemToolTipLayerView.prototype.ca = function (a) {
        var b = a;
    };
    ItemToolTipLayerView.prototype.cc = function (a) {
        var b = a;
        b._visibility = 1;
    };
    ItemToolTipLayerView.prototype.cb = function (a) {
        var b = a;
        b.bz();
        b.content = null;
        this.b7.remove1(a);
    };
    Object.defineProperty(ItemToolTipLayerView.prototype, "htmlTest", {
        get: function () {
            return this._htmlTest;
        },
        set: function (a) {
            this._htmlTest = a;
        },
        enumerable: false,
        configurable: true
    });
    ItemToolTipLayerView.prototype.b6 = function (a, b, c, d) {
        var e = b;
        if (a.h4 == "default") {
            a.h4 = a.b0.getDefaultTooltipTemplate();
        }
        var template_ = a.h4;
        var context_ = d;
        if (a.toolTip == null) {
            return false;
        }
        var tooltip_ = a.toolTip;
        if ((tooltip_.updateToolTip)) {
            tooltip_._inPointer = true;
            tooltip_.updateToolTip(context_, true);
            tooltip_.setStyleProperty('position', 'relative');
            tooltip_.setStyleProperty('left', '');
            tooltip_.setStyleProperty('top', '');
        }
        e.content = a.toolTip;
        return true;
    };
    ItemToolTipLayerView.prototype.ch = function (a, b, c) {
        var d = a;
        var e = d.content;
        var f = new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
        d.cy = 1;
        var g = d.cx(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        d.cy = 0;
        return g;
    };
    ItemToolTipLayerView.prototype.cf = function (a, b, c, d, e) {
        var f = null;
        if (this.e.cd != null) {
            f = this.e.cd.cu.j.i();
        }
        var g = a;
        g.aq = f;
        var h = g.content;
        g.cs = { $type: Point_$type, x: d, y: e };
        g._visibility = 0;
        g.n = b;
        g.o = c;
    };
    ItemToolTipLayerView.prototype.cd = function (a) {
        if (a != null) {
            var b = a;
            b._visibility = 1;
        }
    };
    ItemToolTipLayerView.prototype.a6 = function (a, b) {
        _super.prototype.a6.call(this, a, b);
        if (b) {
            return;
        }
        var c = 0;
        var d = 0;
        var e = this.e.cd;
        if (e != null) {
            var f = e.cu.j.b7();
            c += f.x;
            d += f.y;
        }
        for (var g = 0; g < this.b7.count; g++) {
            this.b7._inner[g].by(this.b7._inner[g].n + c, this.b7._inner[g].o + d);
        }
    };
    ItemToolTipLayerView.prototype.al = function (a) {
        var e_2, _a;
        _super.prototype.al.call(this, a);
        try {
            for (var _b = __values(fromEnum(this.b5.a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var tooltip_ = _c.value;
                if (tooltip_._visibility != 0) {
                    continue;
                }
                var b = tooltip_;
                var c = b.a5();
                var d = b.n;
                var e = b.o;
                var f = new List$1(String_$type, 0);
                var g = typeCast(DomWrapper_$type, b.content);
                if (g != null) {
                    var h = g.getText();
                    f.add(h);
                }
                this.e.a8.addPointerTooltipData(a, c, d, e, f);
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    ItemToolTipLayerView.prototype.ce = function (a) {
        this.aq();
        for (var b = 0; b < this.b7.count; b++) {
            this.cd(this.b7._inner[b]);
            if (a) {
                this.b7._inner[b].bs();
            }
        }
    };
    ItemToolTipLayerView.prototype.cg = function () {
        if (this.e.cd == null) {
            this.ce(true);
        }
    };
    ItemToolTipLayerView.$t = markType(ItemToolTipLayerView, 'ItemToolTipLayerView', AnnotationLayerView.$);
    return ItemToolTipLayerView;
}(AnnotationLayerView));
export { ItemToolTipLayerView };
