/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { IHasSingleValueCategory_$type } from "./IHasSingleValueCategory";
import { IHasCategoryTrendline_$type } from "./IHasCategoryTrendline";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { IAnchoredCategorySeriesInteractionManager_$type } from "./IAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { Point_$type, enumGetBox, typeCast, markType, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { IScaler_$type } from "./IScaler";
import { CategorySeriesView } from "./CategorySeriesView";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior_$type } from "./ConsolidatedItemHitTestBehavior";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AxisRange } from "./AxisRange";
import { NumericYAxis } from "./NumericYAxis";
import { ScalerParams } from "./ScalerParams";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { CollisionAvoider } from "./CollisionAvoider";
import { NonCollisionAvoider } from "./NonCollisionAvoider";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
/**
 * @hidden
 */
var AnchoredCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnchoredCategorySeries, _super);
    function AnchoredCategorySeries() {
        var _this = _super.call(this) || this;
        _this.tp = null;
        _this.tt = false;
        _this.tr = null;
        _this.tm = null;
        _this.tx = null;
        _this.ry = new CategoryFramePreparer(1, _this, _this.r2, _this, _this, _this.r2.cr);
        return _this;
    }
    Object.defineProperty(AnchoredCategorySeries.prototype, "tq", {
        get: function () {
            var _this = this;
            if (this.tp == null) {
                this.tp = DVContainer.instance.createInstance(IAnchoredCategorySeriesInteractionManager_$type, function () { return _this.cn.n; });
            }
            return this.tp;
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeries.prototype.getHostReferenceValue = function () {
        return this.ge();
    };
    AnchoredCategorySeries.prototype.i2 = function () {
        return AnchoredCategorySeries.$$p[4];
    };
    AnchoredCategorySeries.prototype.bx = function () {
        var a = new AnchoredCategorySeriesView(this);
        return a;
    };
    AnchoredCategorySeries.prototype.l2 = function (a) {
        _super.prototype.l2.call(this, a);
        this.tl = a;
    };
    AnchoredCategorySeries.prototype.hy = function (a, b) {
        var c = this.js(b);
        if (c == AnchoredCategorySeries.$$p[4]) {
            return this.hz(a, b, this.t5);
        }
        return _super.prototype.hy.call(this, a, b);
    };
    Object.defineProperty(AnchoredCategorySeries.prototype, "valueColumn", {
        get: function () {
            return this.tr;
        },
        set: function (a) {
            if (this.tr != a) {
                var b = this.tr;
                this.tr = a;
                if (!this.tt) {
                    this.raisePropertyChanged("ValueColumn", b, this.tr);
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeries.prototype.getDataLegendSeriesContextAt = function (a, b) {
        var c = new DataLegendSeriesValueInfo();
        c.a = 0;
        c.l = this.gl({ $type: Point_$type, x: a, y: b }, false, false);
        c.p = "Value";
        c.q = this.t1 != null ? this.t1 : "V:";
        c.r = this.t3 != null ? this.t3 : "";
        var d = new DataLegendSeriesContext();
        d.f = ((function () {
            var $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
            $ret.add(c);
            return $ret;
        })());
        d.b = this.av();
        return d;
    };
    Object.defineProperty(AnchoredCategorySeries.prototype, "up", {
        get: function () {
            return this.c(AnchoredCategorySeries.uc);
        },
        set: function (a) {
            this.h(AnchoredCategorySeries.uc, a);
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeries.prototype.eo = function (a) {
        var b = new Rect(0, 0, 0, 1, 1);
        var c = this.fetchXAxis();
        var d = this.fetchYAxis();
        var e = this.px(this.b0);
        var f = c != null ? this.ry.r(typeCast(ICategoryScaler_$type, c), b, b, e) : 0;
        return this.tq.c$a(this, this.valueColumn, c, d, f, a);
    };
    AnchoredCategorySeries.prototype.ti = function (a, b, c) {
        if (b < a || a < 0 || a > this.valueColumn.count || b < 0 || b > this.valueColumn.count || c == null) {
            return null;
        }
        var d = new Array((b - a) + 1);
        var e = c.cm;
        var f = null;
        if (e) {
            f = c.i$b;
        }
        for (var g = a; g <= b; g++) {
            var h = g;
            if (e) {
                h = f._inner[h];
            }
            d[g - a] = this.ck.item(g);
        }
        return d;
    };
    AnchoredCategorySeries.prototype.l7 = function (a, b, c, d) {
        _super.prototype.l7.call(this, a, b, c, d);
        if (this.tl.c3 && this.tl.c2.g$b(a, b, c, d)) {
            this.ml(false);
            this.ls();
        }
        switch (b) {
            case "FastItemsSource":
                if (typeCast(IFastItemsSource_$type, c) != null) {
                    c.deregisterColumn(this.valueColumn);
                    this.valueColumn = null;
                }
                if (typeCast(IFastItemsSource_$type, d) != null) {
                    this.valueColumn = this.ch(this.t5);
                }
                var e = typeCast(NumericAxisBase.$, this.fetchYAxis());
                if (e != null && !e.c0()) {
                    this.tl.cr.g(this.fv);
                    this.ml(false);
                }
                break;
            case AnchoredCategorySeries.$$p[4]:
                if (this.ck != null) {
                    this.ck.deregisterColumn(this.valueColumn);
                    this.valueColumn = this.ch(this.t5);
                }
                this.tx = this.t5;
                break;
            case "ValueColumn":
                if (this.tl.c3) {
                    this.tl.c2.g$i();
                }
                var f = typeCast(NumericAxisBase.$, this.fetchYAxis());
                if (f != null && !f.c0()) {
                    this.tl.cr.g(this.fv);
                    this.ml(false);
                }
                this.ub();
                this.m5();
                break;
            case "TrendLineBrush":
                this.mz();
                break;
            case "ErrorBarSettings":
                this.ml(false);
                break;
            case "TrendLineType":
                this.ls();
                break;
            case AnchoredCategorySeries.$$p[1]:
                this.ml(false);
                break;
        }
    };
    AnchoredCategorySeries.prototype.ap = function (a) {
        if (this.valueColumn == null || this.valueColumn.count == 0) {
            return null;
        }
        if (a == this.fetchXAxis()) {
            return new AxisRange(0, this.valueColumn.count - 1);
        }
        if (a == this.fetchYAxis()) {
            return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
        }
        return null;
    };
    AnchoredCategorySeries.prototype.k3 = function (a, b, c, d) {
        switch (a) {
            case 4:
            case 1:
            case 0:
                this.tl.cr.g(this.fv);
                break;
        }
        if (this.tl.c3) {
            this.tl.c2.g$e(a, b, c, d);
        }
        this.ub();
        this.m5();
    };
    AnchoredCategorySeries.prototype.ss = function () {
        return this.tu(this.r2);
    };
    AnchoredCategorySeries.prototype.tu = function (a) {
        var b = 0;
        var c = a.bv;
        var d = a.bu;
        var e = this.getEffectiveViewport1(a);
        var f = typeCast(NumericYAxis.$, this.fetchYAxis());
        if (!c.isEmpty && !d.isEmpty && f != null) {
            var g = new ScalerParams(0, c, d, f.cg, e);
            if (f.co) {
                g.b = this.ge();
            }
            b = f.ei(f.l5, g);
        }
        return b;
    };
    AnchoredCategorySeries.prototype.ua = function (a, b, c) {
        var d = this.tu(c);
        if (a.count > 0) {
            var e = d;
            a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
            a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
        }
    };
    AnchoredCategorySeries.prototype.tj = function (a, b, c, d) {
        return this.tk(a, b, c, d, false);
    };
    AnchoredCategorySeries.prototype.tk = function (a, b, c, d, e) {
        return CategorySeries.rn(a, b, c, d, e);
    };
    AnchoredCategorySeries.prototype.fb = function (a, b, c) {
        var d = _super.prototype.fb.call(this, a, b, c);
        var e = c;
        if (this.valueColumn == null || this.valueColumn.count == 0 || e.cr.d < 1) {
            d = false;
        }
        return d;
    };
    AnchoredCategorySeries.prototype.k0 = function (a, b) {
        _super.prototype.k0.call(this, a, b);
        var c = b;
        c.cx();
        if (c.c3) {
            c.c2.g$d();
        }
    };
    AnchoredCategorySeries.prototype.s8 = function (a, b) {
        _super.prototype.s8.call(this, a, b);
        this.rz(b).d(a, b);
    };
    AnchoredCategorySeries.prototype.tb = function (a, b) {
        _super.prototype.tb.call(this, a, b);
        var c = typeCast(AnchoredCategorySeriesView.$, b);
        c.b3 = true;
        if (c.c3) {
            c.c2.g$g(a.p);
        }
        if (this.qj()) {
            CategoryMarkerManager.e(this, a.m, b.cu, this.ql);
            this.s5(b, a);
            b.cm();
        }
        this.t7(a, b);
    };
    AnchoredCategorySeries.prototype.mk = function (a, b, c, d, e) {
        _super.prototype.mk.call(this, a, b, c, d, e);
        var f = this.a6.a$h.item(d);
        var g = f;
        g.cr.g(this.fv);
        f.a1(c);
        if (this.cx(g)) {
            return;
        }
        if (this.tm == null) {
            this.tm = new CategoryFrame(3);
        }
        this.tm.u();
        this.s8(this.tm, g);
        this.tb(this.tm, g);
    };
    AnchoredCategorySeries.prototype.t7 = function (a, b) {
    };
    AnchoredCategorySeries.prototype.mz = function () {
        _super.prototype.mz.call(this);
        if (this.index < 0) {
            return;
        }
        this.tl.c7();
        if (this.trendLineBrush != null) {
            this.tl.c5();
        }
        else {
            this.tl.c4();
        }
    };
    AnchoredCategorySeries.prototype.h1 = function (a, b) {
        if (this.tl.c3 && a == this.tl.c2.g$j) {
            return null;
        }
        return _super.prototype.h1.call(this, a, b);
    };
    Object.defineProperty(AnchoredCategorySeries.prototype, "currentCategoryMode", {
        get: function () {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.rs()));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnchoredCategorySeries.prototype, "scaler", {
        get: function () {
            return typeCast(ICategoryScaler_$type, this.rs());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnchoredCategorySeries.prototype, "yScaler", {
        get: function () {
            return typeCast(IScaler_$type, this.sd());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnchoredCategorySeries.prototype, "bucketizer", {
        get: function () {
            return this.tl.cr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnchoredCategorySeries.prototype, "currentMode2Index", {
        get: function () {
            return this.sw();
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeries.prototype.provideCollisionDetector = function () {
        if (this.tn == 1) {
            return new CollisionAvoider();
        }
        return NonCollisionAvoider.b;
    };
    Object.defineProperty(AnchoredCategorySeries.prototype, "trendlinePreparer", {
        get: function () {
            return this.tl.c3 ? this.tl.c2 : null;
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeries.prototype.la = function (a) {
        _super.prototype.la.call(this, a);
        if (this.tl.c3) {
            this.a8.exportTrendlineData(this, a, this.tl.c2.g$j);
        }
    };
    AnchoredCategorySeries.prototype.hv = function (a) {
        var _this = this;
        var b = this.fetchXAxis();
        var c = this.fetchYAxis();
        return this.tq.c$b(this, a, this.st(this.b0), this.valueColumn, b, c, this.to == 1, function (d) { return _super.prototype.hv.call(_this, d); });
    };
    Object.defineProperty(AnchoredCategorySeries.prototype, "mayContainUnknowns", {
        get: function () {
            return this.valueColumn == null || this.valueColumn.mayContainUnknowns;
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeries.prototype.ge = function () {
        return Series.gf(this.valueColumn, typeCast(ISortingAxis_$type, this.fetchXAxis()));
    };
    AnchoredCategorySeries.prototype.get_tw = function () {
        return 0;
    };
    Object.defineProperty(AnchoredCategorySeries.prototype, "tw", {
        get: function () {
            return this.get_tw();
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeries.prototype.aq = function (a) {
        if (a.isEmpty && this.cd != null) {
            a = this.cd.s9;
        }
        if (this.valueColumn == null) {
            return null;
        }
        var b = this.pv(this.b0);
        var c = this.rs();
        var d = new ScalerParams(0, a, this.cd.to, c.cg, this.getEffectiveViewport());
        var e = (c.el(b.left, d));
        var f = (c.el(b.right, d));
        if (c.cg) {
            var g = e;
            e = f;
            f = g;
        }
        e -= this.tw;
        f += this.tw;
        var h = null;
        if (c.cm) {
            h = c;
            e = h.i$f(e);
            f = h.i$f(f);
        }
        else {
            e = Math.floor(e);
            f = Math.ceil(f);
        }
        if (isNaN_(e) || isNaN_(f)) {
            return null;
        }
        e = Math.max(0, Math.min(this.valueColumn.count - 1, e));
        f = Math.max(0, Math.min(this.valueColumn.count - 1, f));
        var i = 1.7976931348623157E+308;
        var j = -1.7976931348623157E+308;
        if (truncate(e) <= truncate(f)) {
            for (var k = truncate(e); k <= truncate(f); k++) {
                var l = k;
                if (h != null) {
                    l = h.i$b._inner[k];
                }
                var m = this.valueColumn.item(l);
                if (this.valueColumn.mayContainUnknowns) {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                i = Math.min(i, m);
                j = Math.max(j, m);
            }
        }
        var n = new AxisRange(i, j);
        n = this.ao(n, this.sd(), a);
        return n;
    };
    AnchoredCategorySeries.prototype.ub = function () {
        this.f3 = this.valueColumn == null || this.valueColumn.count == 0 ? NaN : this.valueColumn.item(this.valueColumn.count - 1);
    };
    Object.defineProperty(AnchoredCategorySeries.prototype, "useHighMarkerFidelity", {
        get: function () {
            return this.so;
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeries.$t = markType(AnchoredCategorySeries, 'AnchoredCategorySeries', CategorySeries.$, [IIsCategoryBased_$type, IHasSingleValueCategory_$type, IHasCategoryTrendline_$type, ITrendLineSeries_$type]);
    AnchoredCategorySeries.uc = DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredCategorySeries.$, new PropertyMetadata(2, null, function (a, b) { return a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue); }));
    AnchoredCategorySeries.$$p = markDep(DependencyProperty, PropertyMetadata, AnchoredCategorySeries, 'raisePropertyChanged', ['ConsolidatedItemHitTestBehavior:to:ud', [ConsolidatedItemHitTestBehavior_$type, enumGetBox(ConsolidatedItemHitTestBehavior_$type, 0)], 'MarkerCollisionAvoidance:tn:ue', [CategorySeriesMarkerCollisionAvoidance_$type, enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, 1)], 'ValueMemberAsLegendLabel:t1:um', [2, null], 'ValueMemberAsLegendUnit:t3:un', [2, null], 'ValueMemberPath:t5:uo', [2, null], 'TrendLineType::uk', [TrendLineType_$type, enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::uj', [1, 1.5], 'TrendLinePeriod::ui', [1, 7], 'TrendLineBrush::uf', [Brush.$, null], 'TrendLineZIndex:tv:ul', [1, 1001], 'TrendLineDashArray:uq:ug', [DoubleCollection.$], 'TrendLineDashCap:ur:uh', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredCategorySeries;
}(CategorySeries));
export { AnchoredCategorySeries };
/**
 * @hidden
 */
var AnchoredCategoryBucketCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnchoredCategoryBucketCalculator, _super);
    function AnchoredCategoryBucketCalculator(a) {
        var _this = _super.call(this, a) || this;
        _this.i = null;
        _this.h = null;
        _this.j = 0;
        _this.i = a;
        return _this;
    }
    AnchoredCategoryBucketCalculator.prototype.getBucketWithoutUnknowns = function (a) {
        var b = this.h;
        var c = this.j;
        var d = a * this.d;
        var e = d + this.d - 1;
        var f = c - 1;
        d = d < f ? d : f;
        e = e < f ? e : f;
        var g = 1.7976931348623157E+308;
        var h = -1.7976931348623157E+308;
        var i = true;
        for (var j = d; j <= e; ++j) {
            var k = b[j];
            g = g < k ? g : k;
            h = h > k ? h : k;
            i = false;
        }
        if (!i) {
            return [0.5 * (d + e), g, h];
        }
        return [0.5 * (d + e), NaN, NaN];
    };
    AnchoredCategoryBucketCalculator.prototype.getBucket = function (a) {
        var b = this.h;
        var c = this.j;
        var d = a * this.d;
        var e = d + this.d - 1;
        var f = c - 1;
        d = d < f ? d : f;
        e = e < f ? e : f;
        var g = 0;
        var h = 0;
        var i = true;
        for (var j = d; j <= e; ++j) {
            var k = b[j];
            if (!i) {
                if (!isNaN_(k)) {
                    g = g < k ? g : k;
                    h = h > k ? h : k;
                }
            }
            else {
                if (!isNaN_(k)) {
                    g = k;
                    h = k;
                    i = false;
                }
            }
        }
        if (!i) {
            return [0.5 * (d + e), g, h];
        }
        return [0.5 * (d + e), NaN, NaN];
    };
    AnchoredCategoryBucketCalculator.prototype.cacheValues = function () {
        this.j = this.i.c0.valueColumn.count;
        this.h = this.i.c0.valueColumn.asArray();
    };
    AnchoredCategoryBucketCalculator.prototype.unCacheValues = function () {
        this.h = null;
    };
    AnchoredCategoryBucketCalculator.$t = markType(AnchoredCategoryBucketCalculator, 'AnchoredCategoryBucketCalculator', CategoryBucketCalculator.$);
    return AnchoredCategoryBucketCalculator;
}(CategoryBucketCalculator));
export { AnchoredCategoryBucketCalculator };
/**
 * @hidden
 */
var AnchoredCategorySeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnchoredCategorySeriesView, _super);
    function AnchoredCategorySeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.c0 = null;
        _this.c1 = null;
        _this.c0 = a;
        return _this;
    }
    Object.defineProperty(AnchoredCategorySeriesView.prototype, "c2", {
        get: function () {
            if (this.c1 == null) {
                this.c1 = CategoryTrendLineManagerFactory.a(this.c1, this.e.ar(), this.e.nd, this.e, this.e.cn);
            }
            return this.c1;
        },
        set: function (a) {
            this.c1 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnchoredCategorySeriesView.prototype, "c3", {
        get: function () {
            return this.c1 != null;
        },
        enumerable: false,
        configurable: true
    });
    AnchoredCategorySeriesView.prototype.c7 = function () {
        this.c0.up = null;
    };
    AnchoredCategorySeriesView.prototype.c5 = function () {
        this.c0.up = this.c0.trendLineBrush;
    };
    AnchoredCategorySeriesView.prototype.c4 = function () {
        this.c0.up = this.c0.o3;
    };
    AnchoredCategorySeriesView.prototype.cs = function () {
        return new AnchoredCategoryBucketCalculator(this);
    };
    AnchoredCategorySeriesView.prototype.c6 = function () {
        this.cr.cacheValues();
    };
    AnchoredCategorySeriesView.prototype.c8 = function () {
        this.cr.unCacheValues();
    };
    AnchoredCategorySeriesView.prototype.c9 = function (a) {
        var b = this.cu.item(a);
        return this.cp(b);
    };
    AnchoredCategorySeriesView.prototype.a5 = function (a, b) {
        if (a.d) {
            if (this.c0.trendLineType != 0 && !b) {
                var c = this.c2.g$j;
                c.ac = this.c0.trendLineThickness;
                c._stroke = this.c0.up;
                c.ai = this.c0.uq;
                c.ad = this.c0.ur;
                a.u(c);
            }
        }
        _super.prototype.a5.call(this, a, b);
    };
    AnchoredCategorySeriesView.prototype.getDefaultTooltipTemplate = function () {
        return this.c0.tq.c$c(this.e, this.c0.t5);
    };
    AnchoredCategorySeriesView.$t = markType(AnchoredCategorySeriesView, 'AnchoredCategorySeriesView', CategorySeriesView.$);
    return AnchoredCategorySeriesView;
}(CategorySeriesView));
export { AnchoredCategorySeriesView };
