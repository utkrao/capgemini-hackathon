/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChart } from "./XYChart";
import { typeCast, runOn, delegateCombine, enumGetBox, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { CategoryChartType_$type } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode_$type } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode_$type } from "./AxisRangeBufferMode";
import { CategoryXAxis } from "./CategoryXAxis";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleCategorySeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { ArrayExtension } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { DeviceUtils } from "igniteui-react-core";
import { CategoryChartMockDataGenerator } from "./CategoryChartMockDataGenerator";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let CategoryChart = /*@__PURE__*/ (() => {
    class CategoryChart extends XYChart {
        constructor() {
            super();
            this.aev = 1000;
            this.ac0 = null;
            this.ack = 9;
            this.acm = 1;
            this.ac4 = false;
            this.ac5 = false;
            this.aco = 0;
            this.acy = 0;
            this.ads = 0;
            this.adv = 0;
            this.adr = 0;
            this.adu = 0;
            this.adt = 1;
            this.adw = 0;
            this.ad2 = NaN;
            this.acg = 0;
            this.ac6 = true;
            this.ac7 = false;
            this.adp = DeviceUtils.g(2);
            this.adq = DeviceUtils.g(60);
            this.adb = true;
            this.ac8 = true;
            this.ada = false;
            this.aci = 0;
            this.adc = false;
            this.aew = 10;
            this.ad4 = NaN;
            this.ad3 = NaN;
            this.ad5 = 0;
            this.acc = null;
            this.acd = null;
            this.ac9 = true;
            this.adx = 3;
            this.ady = NaN;
            this.adz = NaN;
            this.ad0 = NaN;
            this.ad1 = NaN;
            this.ac2 = false;
            this.ac3 = false;
            this.ado = null;
            this.q8();
        }
        rq() {
            super.rq();
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.cu.j.e();
            this.ace = a.d;
            this.acf = a.e;
            if (this.abo == null) {
                this.abo = a.k;
            }
            if (this.abv == null) {
                this.abv = a.k;
            }
            this.xn = 0;
            this.abw = AxisDefaults.h;
            this.abz = null;
            this.abs = AxisDefaults.g;
            this.abp = null;
            this.w6 = AxisDefaults.f;
            this.abt = AxisDefaults.j;
            this.w7 = AxisDefaults.e;
            this.fb = true;
            this.fc = false;
            this.a6 = 0;
            this.hv = Defaults.j;
            this.t0 = Defaults.ae;
            this.tv = Defaults.af;
            this.tw = Defaults.ag;
        }
        rs(a, b) {
            super.rs(a, b);
            a.hp = this.aex;
            a.cg = this.ac1;
        }
        sd(a, b, c) {
            super.sd(a, b, c);
            switch (a) {
                case "TransitionInDuration":
                    this.rf((d) => d.hp = this.aex);
                    break;
                case "TransitionInEasingFunction":
                    this.rf((d) => d.cg = this.ac1);
                    break;
            }
        }
        get aex() {
            return this.aev;
        }
        set aex(a) {
            let b = this.aex;
            if (a != b) {
                this.aev = a;
                this.sc("TransitionInDuration", b, this.aex);
            }
        }
        get ac1() {
            return this.ac0;
        }
        set ac1(a) {
            let b = this.ac1;
            if (a != b) {
                this.ac0 = a;
                this.sc("TransitionInEasingFunction", b, this.ac1);
            }
        }
        ae3() {
            let cvd_ = this.ju();
            cvd_.scaleByViewport();
            return (cvd_.serialize());
        }
        rl(a) {
            super.rl(a);
            a.ds = this.e7;
            a.uq = this.adh;
            a.ut = this.adi;
            a.vg = this.ad6;
            a.vh = this.ad7;
            a.tv = this.ach;
        }
        rr(a, b) {
            super.rr(a, b);
            let c = typeCast(HorizontalAnchoredCategorySeries.$, a);
            if (c == null) {
                return;
            }
            c.tn = this.acn;
            c.sk = this.adg;
            c.r4 = this.acp;
            c.ca = this.acz;
            c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ag, b);
            c.trendLineType = this.di;
            c.trendLineThickness = this.it;
            c.qh = this.cm(a, b);
            if (a.d4) {
                a.mq(ArrayExtension.getModulus$1(Brush.$, this.ace, b), ArrayExtension.getModulus$1(Brush.$, this.acf, b));
            }
        }
        acq() {
            return new CategoryXAxis();
        }
        acu() {
            return new NumericYAxis();
        }
        q4() {
            this.xAxis = this.acq();
            this.xAxis.name = "xAxis";
            let a = this.xAxis;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.af5));
            this.yAxis = this.acu();
            this.yAxis.name = "yAxis";
            let b = this.yAxis;
            b.propertyChanged = delegateCombine(b.propertyChanged, runOn(this, this.af6));
            if (this.xAxis.ay == null) {
                this.xAxis.ay = new AxisLabelSettings();
            }
            if (this.yAxis.ay == null) {
                this.yAxis.ay = new AxisLabelSettings();
            }
        }
        aao(a) {
            super.aao(a);
            a.k8 = this.adk;
            a.lb = this.adm;
            a.b0 = this.adl;
        }
        aam(a) {
            super.aam(a);
            a.b0 = this.adj;
            a.zoomMaximumCategoryRange = this.aek;
            a.zoomToCategoryRange = this.aem;
            a.zoomToCategoryStart = this.aen;
            a.zoomMaximumItemSpan = this.ael;
            a.zoomToItemSpan = this.aeo;
        }
        get_by() {
            return 0;
        }
        get by() {
            return this.get_by();
        }
        get acl() {
            return this.ack;
        }
        set acl(a) {
            if (a != this.ack) {
                let b = this.acl;
                this.ack = a;
                this.sc("ChartType", enumGetBox(CategoryChartType_$type, b), enumGetBox(CategoryChartType_$type, this.acl));
            }
        }
        get acn() {
            return this.acm;
        }
        set acn(a) {
            let b = this.acn;
            if (a != b) {
                this.acm = a;
                this.sc("MarkerCollisionAvoidance", enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, b), enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, this.acn));
            }
        }
        get adf() {
            return this.ac4;
        }
        set adf(a) {
            let b = this.adf;
            if (a != b) {
                this.ac4 = a;
                this.sc("IsSplineShapePartOfRange", b, this.adf);
            }
        }
        get adg() {
            return this.ac5;
        }
        set adg(a) {
            let b = this.adg;
            if (a != b) {
                this.ac5 = a;
                this.sc("IsTransitionInEnabled", b, this.adg);
            }
        }
        get acp() {
            return this.aco;
        }
        set acp(a) {
            let b = this.acp;
            if (a != b) {
                this.aco = a;
                this.sc("TransitionInMode", enumGetBox(CategoryTransitionInMode_$type, b), enumGetBox(CategoryTransitionInMode_$type, this.acp));
            }
        }
        get acz() {
            return this.acy;
        }
        set acz(a) {
            let b = this.acz;
            if (a != b) {
                this.acy = a;
                this.sc("TransitionInSpeedType", enumGetBox(TransitionInSpeedType_$type, b), enumGetBox(TransitionInSpeedType_$type, this.acz));
            }
        }
        get aef() {
            return this.ads;
        }
        set aef(a) {
            let b = this.aef;
            if (a != b) {
                this.ads = a;
                this.sc("XAxisInterval", b, this.aef);
            }
        }
        get aei() {
            return this.adv;
        }
        set aei(a) {
            let b = this.aei;
            if (a != b) {
                this.adv = a;
                this.sc("XAxisMinorInterval", b, this.aei);
            }
        }
        get aee() {
            return this.adr;
        }
        set aee(a) {
            let b = this.aee;
            if (a != b) {
                this.adr = a;
                this.sc("XAxisGap", b, this.aee);
            }
        }
        get aeh() {
            return this.adu;
        }
        set aeh(a) {
            let b = this.aeh;
            if (a != b) {
                this.adu = a;
                this.sc("XAxisMinimumGapSize", b, this.aeh);
            }
        }
        get aeg() {
            return this.adt;
        }
        set aeg(a) {
            let b = this.aeg;
            if (a != b) {
                this.adt = a;
                this.sc("XAxisMaximumGap", b, this.aeg);
            }
        }
        get aej() {
            return this.adw;
        }
        set aej(a) {
            let b = this.aej;
            if (a != b) {
                this.adw = a;
                this.sc("XAxisOverlap", b, this.aej);
            }
        }
        get aer() {
            return this.ad2;
        }
        set aer(a) {
            let b = this.aer;
            if (a != b) {
                this.ad2 = a;
                this.sc("YAxisInterval", b, this.aer);
            }
        }
        get ach() {
            return this.acg;
        }
        set ach(a) {
            let b = this.ach;
            if (a != b) {
                this.acg = a;
                this.sc("AutoMarginAndAngleUpdateMode", enumGetBox(AutoMarginsAndAngleUpdateMode_$type, b), enumGetBox(AutoMarginsAndAngleUpdateMode_$type, this.ach));
            }
        }
        af7() {
            if (this.dataChart != null) {
                this.dataChart.w1();
            }
        }
        get adh() {
            return this.ac6;
        }
        set adh(a) {
            let b = this.adh;
            if (a != b) {
                this.ac6 = a;
                this.sc("ShouldAutoExpandMarginForInitialLabels", b, this.adh);
            }
        }
        get adi() {
            return this.ac7;
        }
        set adi(a) {
            let b = this.adi;
            if (a != b) {
                this.ac7 = a;
                this.sc(CategoryChart.afc, b, this.adi);
            }
        }
        get ad6() {
            return this.adp;
        }
        set ad6(a) {
            let b = this.ad6;
            if (a != b) {
                this.adp = a;
                this.sc("AutoExpandMarginExtraPadding", b, this.ad6);
            }
        }
        get ad7() {
            return this.adq;
        }
        set ad7(a) {
            let b = this.ad7;
            if (a != b) {
                this.adq = a;
                this.sc("AutoExpandMarginMaximumValue", b, this.ad7);
            }
        }
        get adm() {
            return this.adb;
        }
        set adm(a) {
            let b = this.adm;
            if (a != b) {
                this.adb = a;
                this.sc("YAxisFavorLabellingScaleEnd", b, this.adm);
            }
        }
        get adj() {
            return this.ac8;
        }
        set adj(a) {
            let b = this.adj;
            if (a != b) {
                this.ac8 = a;
                this.sc(CategoryChart.afh, b, this.adj);
            }
        }
        get adl() {
            return this.ada;
        }
        set adl(a) {
            let b = this.adl;
            if (a != b) {
                this.ada = a;
                this.sc(CategoryChart.afv, b, this.adl);
            }
        }
        get acj() {
            return this.aci;
        }
        set acj(a) {
            let b = this.acj;
            if (a != b) {
                this.aci = a;
                this.sc("YAxisAutoRangeBufferMode", enumGetBox(AxisRangeBufferMode_$type, b), enumGetBox(AxisRangeBufferMode_$type, this.acj));
            }
        }
        get adn() {
            return this.adc;
        }
        set adn(a) {
            let b = this.adn;
            if (a != b) {
                this.adc = a;
                this.sc("YAxisIsLogarithmic", b, this.adn);
            }
        }
        get aey() {
            return this.aew;
        }
        set aey(a) {
            let b = this.aey;
            if (a != b) {
                this.aew = a;
                this.sc("YAxisLogarithmBase", b, this.aey);
            }
        }
        get aet() {
            return this.ad4;
        }
        set aet(a) {
            let b = this.aet;
            if (a != b) {
                this.ad4 = a;
                this.sc("YAxisMinimumValue", b, this.aet);
            }
        }
        get aes() {
            return this.ad3;
        }
        set aes(a) {
            let b = this.aes;
            if (a != b) {
                this.ad3 = a;
                this.sc("YAxisMaximumValue", b, this.aes);
            }
        }
        get aeu() {
            return this.ad5;
        }
        set aeu(a) {
            let b = this.aeu;
            if (a != b) {
                this.ad5 = a;
                this.sc("YAxisMinorInterval", b, this.aeu);
            }
        }
        get aed() {
            return this.xAxis.mv;
        }
        get aec() {
            return this.xAxis.mu;
        }
        ad9() {
            return this.aed;
        }
        aeb() {
            return this.aeq;
        }
        ad8() {
            return this.aec;
        }
        aea() {
            return this.aep;
        }
        get aeq() {
            return this.yAxis.lv;
        }
        get aep() {
            return this.yAxis.lu;
        }
        get ace() {
            return this.acc;
        }
        set ace(a) {
            let b = this.ace;
            if (a != b) {
                this.acc = a;
                this.sc("NegativeBrushes", b, this.ace);
            }
        }
        get acf() {
            return this.acd;
        }
        set acf(a) {
            let b = this.acf;
            if (a != b) {
                this.acd = a;
                this.sc("NegativeOutlines", b, this.acf);
            }
        }
        get adk() {
            return this.ac9;
        }
        set adk(a) {
            let b = this.adk;
            if (a != b) {
                this.ac9 = a;
                this.sc("YAxisAbbreviateLargeNumbers", b, this.adk);
            }
        }
        get aek() {
            return this.adx;
        }
        set aek(a) {
            let b = this.aek;
            if (a != b) {
                this.adx = a;
                this.sc("XAxisZoomMaximumCategoryRange", b, this.aek);
            }
        }
        get ael() {
            return this.ady;
        }
        set ael(a) {
            let b = this.ael;
            if (a != b) {
                this.ady = a;
                this.sc("XAxisZoomMaximumItemSpan", b, this.ael);
            }
        }
        get aem() {
            return this.adz;
        }
        set aem(a) {
            let b = this.aem;
            if (a != b) {
                this.adz = a;
                this.sc("XAxisZoomToCategoryRange", b, this.aem);
            }
        }
        get aen() {
            return this.ad0;
        }
        set aen(a) {
            let b = this.aen;
            if (a != b) {
                this.ad0 = a;
                this.sc("XAxisZoomToCategoryStart", b, this.aen);
            }
        }
        get aeo() {
            return this.ad1;
        }
        set aeo(a) {
            let b = this.aeo;
            if (a != b) {
                this.ad1 = a;
                this.sc("XAxisZoomToItemSpan", b, this.aeo);
            }
        }
        get add() {
            return this.ac2;
        }
        set add(a) {
            let b = this.add;
            if (a != b) {
                this.ac2 = a;
                this.sc("IsCategoryHighlightingEnabled", b, this.add);
            }
        }
        get ade() {
            return this.ac3;
        }
        set ade(a) {
            let b = this.ade;
            if (a != b) {
                this.ac3 = a;
                this.sc("IsItemHighlightingEnabled", b, this.ade);
            }
        }
        get_ge() {
            let a = new List$1(DataSeriesType_$type, 0);
            if (TypeRegistrar.isRegistered("AreaSeries")) {
                a.add(2);
            }
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                a.add(1);
            }
            if (TypeRegistrar.isRegistered("LineSeries")) {
                a.add(0);
            }
            if (TypeRegistrar.isRegistered("PointSeries")) {
                a.add(10);
            }
            if (TypeRegistrar.isRegistered("SplineSeries")) {
                a.add(6);
            }
            if (TypeRegistrar.isRegistered("SplineAreaSeries")) {
                a.add(7);
            }
            if (TypeRegistrar.isRegistered("StepAreaSeries")) {
                a.add(5);
            }
            if (TypeRegistrar.isRegistered("StepLineSeries")) {
                a.add(4);
            }
            if (TypeRegistrar.isRegistered("WaterfallSeries")) {
                a.add(8);
            }
            return a;
        }
        get ge() {
            return this.get_ge();
        }
        gi() {
            if (this.ado == null) {
                this.ado = CategoryChartMockDataGenerator.a();
            }
            return this.ado;
        }
        cl(a) {
            if (a != null) {
                let b = super.cl(a);
                if (b == 2) {
                    if (a.d3 && this.fm) {
                        return 13;
                    }
                }
            }
            return super.cl(a);
        }
        get_f2() {
            return this.xAxis != null && this.xAxis.categoryMode != 0;
        }
        af5(a, b) {
            switch (b.propertyName) {
                case "ActualMinimum":
                    this.sk("XAxisActualMinimum");
                    break;
                case "ActualMaximum":
                    this.sk("XAxisActualMaximum");
                    break;
            }
        }
        af6(a, b) {
            switch (b.propertyName) {
                case "ActualMinimumValue":
                    this.sk("YAxisActualMinimum");
                    break;
                case "ActualMaximumValue":
                    this.sk("YAxisActualMaximum");
                    break;
            }
        }
        sw() {
            super.sw();
            this.xAxis.fz = this.xx == null ? XYChart.x9(this.xAxis, this.ba.dataSeries) : this.xx;
            this.xAxis.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            if (this.adh) {
                this.r4((a) => a.w1());
            }
        }
        get xAxis() {
            return this._xAxis;
        }
        set xAxis(a) {
            this._xAxis = a;
        }
        get yAxis() {
            return this._yAxis;
        }
        set yAxis(a) {
            this._yAxis = a;
        }
        act(a, b) {
            switch (a) {
                case 2: return this.cw(1);
                case 3: return this.cw(10);
                case 0: return this.cw(0);
                case 1: return this.cw(2);
                case 6: return this.cw(6);
                case 7: return this.cw(7);
                case 4: return this.cw(4);
                case 5: return this.cw(5);
                case 8: return this.cw(8);
                case 9: return this.acs(b);
                default: return this.cw(1);
            }
        }
        acs(a) {
            return this.cw(a);
        }
        a9(a) {
            switch (this.acl) {
                case 1: return 2;
                case 0: return 0;
                case 3: return 10;
                case 6: return 6;
                case 7: return 7;
                case 5: return 5;
                case 4: return 4;
                case 8: return 8;
                case 9: return a.suggestedSeries;
                default:
                case 2: return 1;
            }
        }
        cv(a, b) {
            let c = this.act(this.acl, a.suggestedSeries);
            c.t5 = a.findMatchingHint(0).path;
            c.xAxis = this.xAxis;
            c.yAxis = this.yAxis;
            return c;
        }
        su(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.lg = true;
                this.yAxis.l7 = 10;
            }
        }
        sx() {
            this.yAxis.lg = this.adn;
            this.yAxis.l7 = this.aey;
        }
        get_gd() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleCategorySeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get gd() {
            return this.get_gd();
        }
        q0(a, b) {
            let c = typeCast(HorizontalAnchoredCategorySeries.$, a);
            if (c != null) {
                c.tn = this.acn;
                c.qh = this.cm(a, b);
            }
        }
        af3(a) {
            this.af4((b, c) => a(b));
        }
        af4(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = typeCast(HorizontalAnchoredCategorySeries.$, this.dataChart.series._inner[b]);
                if (c == null) {
                    continue;
                }
                a(c, b);
            }
        }
        vf() {
            return this.xAxis;
        }
        vg() {
            return this.yAxis;
        }
        acw() {
            return this.cw(30);
        }
        acx() {
            return this.cw(31);
        }
        ga(a, b) {
            let c = super.ga(a, b);
            if (c != null) {
                let d = new List$1(Series.$, 0);
                if (this.ac2) {
                    d.add(this.acw());
                }
                if (this.ac3) {
                    d.add(this.acx());
                }
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.name = a + getInstanceType(f).typeName;
                    c.add(f);
                }
            }
            return c;
        }
        s1(a, b, c) {
            super.s1(a, b, c);
            if (this.ba.dataSeries.count > 0) {
                if (stringIsNullOrEmpty(this.k6)) {
                    this.b0.setXMemberPath(a, c.getMemberPathFor(16));
                }
                if (stringIsNullOrEmpty(this.k8)) {
                    this.b0.setYMemberPath(a, c.getMemberPathFor(0));
                }
                if (stringIsNullOrEmpty(this.k2)) {
                    this.b0.setLabelMemberPath(a, c.getMemberPathFor(0));
                }
                if (stringIsNullOrEmpty(this.kz)) {
                    this.b0.setContentMemberPath(a, c.getMemberPathFor(0));
                }
            }
        }
        fp() {
            if (this.a6 == 4 || this.a6 == 3) {
                return true;
            }
            else if (this.a6 == 0) {
                if (this.acl == 2 || this.acl == 8) {
                    return false;
                }
                else if (this.acl == 9 && this.ba != null && this.ba.dataSeries != null && this.ba.dataSeries.count > 0) {
                    let a = this.ba.dataSeries._inner[0].suggestedSeries;
                    if (a == 1 || a == 8) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        }
        sc(a, b, c) {
            super.sc(a, b, c);
            switch (a) {
                case "ChartType":
                    this.sw();
                    break;
                case "MarkerCollisionAvoidance":
                    this.af3((d) => d.tn = this.acn);
                    break;
                case "IsTransitionInEnabled":
                    this.af3((d) => d.sk = this.adg);
                    break;
                case "IsSplineShapePartOfRange":
                    this.af3((d) => {
                        if (d.eh) {
                            d.mr(this.adf);
                        }
                    });
                    break;
                case "TransitionInMode":
                    this.af3((d) => d.r4 = this.acp);
                    break;
                case "TransitionInSpeedType":
                    this.af3((d) => d.ca = this.acz);
                    break;
                case "XAxisInterval":
                    this.xAxis.mq = this.aef;
                    break;
                case "XAxisMinorInterval":
                    this.xAxis.mr = this.aei;
                    break;
                case "XAxisGap":
                    this.xAxis.k0 = this.aee;
                    break;
                case "XAxisOverlap":
                    this.xAxis.k9 = this.aej;
                    break;
                case "XAxisMinimumGapSize":
                    this.xAxis.k8 = this.aeh;
                    break;
                case "XAxisMaximumGap":
                    this.xAxis.k7 = this.aeg;
                    break;
                case "XAxisZoomMaximumCategoryRange":
                    this.xAxis.zoomMaximumCategoryRange = this.aek;
                    break;
                case "XAxisZoomMaximumItemSpan":
                    this.xAxis.zoomMaximumItemSpan = this.ael;
                    break;
                case "XAxisZoomToCategoryRange":
                    this.xAxis.zoomToCategoryRange = this.aem;
                    break;
                case "XAxisZoomToCategoryStart":
                    this.xAxis.zoomToCategoryStart = this.aen;
                    break;
                case "XAxisZoomToItemSpan":
                    this.xAxis.zoomToItemSpan = this.aeo;
                    break;
                case "YAxisInterval":
                    this.yAxis.lz = this.aer;
                    break;
                case "YAxisFavorLabellingScaleEnd":
                    this.yAxis.lb = this.adm;
                    break;
                case "YAxisAutoRangeBufferMode":
                    this.yAxis.ks = this.acj;
                    break;
                case "YAxisIsLogarithmic":
                    this.yAxis.lg = this.adn;
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.l7 = this.aey;
                    break;
                case "YAxisMinimumValue":
                    this.yAxis.l3 = this.aet;
                    break;
                case "YAxisMaximumValue":
                    this.yAxis.l2 = this.aes;
                    break;
                case "YAxisMinorInterval":
                    this.yAxis.l4 = this.aeu;
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.af4((d, e) => {
                        if (d.d4) {
                            d.mq(ArrayExtension.getModulus$1(Brush.$, this.ace, e), ArrayExtension.getModulus$1(Brush.$, this.acf, e));
                        }
                    });
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.aav((d) => d.k8 = this.adk);
                    break;
                case "IsCategoryHighlightingEnabled":
                case "IsItemHighlightingEnabled":
                    this.sw();
                    break;
                case "AutoMarginAndAngleUpdateMode":
                    this.r4((d) => d.tv = this.ach);
                    break;
                case "ShouldAutoExpandMarginForInitialLabels":
                    this.r4((d) => d.uq = this.adh);
                    break;
                case CategoryChart.afc:
                    this.r4((d) => d.ut = this.adi);
                    break;
                case "AutoExpandMarginExtraPadding":
                    this.r4((d) => d.vg = this.ad6);
                    break;
                case "AutoExpandMarginMaximumValue":
                    this.r4((d) => d.vh = this.ad7);
                    break;
                case CategoryChart.afh:
                    this.aar((d) => d.b0 = this.adj, a);
                    break;
                case CategoryChart.afv:
                    this.aav((d) => d.b0 = this.adl);
                    break;
            }
        }
    }
    CategoryChart.$t = /*@__PURE__*/ markType(CategoryChart, 'CategoryChart', XYChart.$);
    CategoryChart.afc = "ShouldConsiderAutoRotationForInitialLabels";
    CategoryChart.afh = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    CategoryChart.afv = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return CategoryChart;
})();
