/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DomainChart } from "./DomainChart";
import { fromEnum, enumGetBox, markType } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { YAxisLabelLocation_$type } from "./YAxisLabelLocation";
import { XAxisLabelLocation_$type } from "./XAxisLabelLocation";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { AxisDefaults } from "./AxisDefaults";
import { TitleSettings } from "./TitleSettings";
import { ScalerParams } from "./ScalerParams";
import { DeviceUtils } from "igniteui-react-core";
/**
 * @hidden
 */
export let XYChart = /*@__PURE__*/ (() => {
    class XYChart extends DomainChart {
        constructor() {
            super(...arguments);
            this.vh = null;
            this.vi = null;
            this.vy = 0;
            this.v0 = 5;
            this.vz = 0;
            this.vx = 5;
            this.wf = 5;
            this.wh = 0;
            this.wg = 5;
            this.we = 0;
            this.aa8 = null;
            this.abf = null;
            this.aa6 = null;
            this.aa7 = null;
            this.v9 = 0;
            this.wq = 0;
            this.v8 = NaN;
            this.wp = NaN;
            this.wb = NaN;
            this.ws = NaN;
            this.wa = NaN;
            this.wr = NaN;
            this.v7 = NaN;
            this.wo = NaN;
            this.abe = null;
            this.abl = null;
            this.x0 = null;
            this.x4 = null;
            this.x2 = null;
            this.x6 = null;
            this.xv = null;
            this.xw = null;
            this.aa9 = null;
            this.abg = null;
            this.v1 = DeviceUtils.g(1);
            this.wi = DeviceUtils.g(1);
            this.v2 = DeviceUtils.g(1);
            this.wj = DeviceUtils.g(1);
            this.abb = null;
            this.abi = null;
            this.abc = null;
            this.abj = null;
            this.v3 = DeviceUtils.g(1);
            this.wk = DeviceUtils.g(1);
            this.v4 = DeviceUtils.g(8);
            this.wl = 0;
            this.abd = null;
            this.abk = null;
            this.v5 = DeviceUtils.g(1);
            this.wm = DeviceUtils.g(1);
            this.x1 = null;
            this.x5 = null;
            this.aba = null;
            this.abh = null;
            this.vw = 0;
            this.wd = 0;
            this.vv = NaN;
            this.wc = NaN;
            this.v6 = 0;
            this.wn = -90;
            this.vr = false;
            this.vs = false;
            this.aa1 = 1;
            this.ab4 = 1;
            this.aa0 = 1;
            this.aa2 = 2;
            this.ab2 = 0;
            this.ab3 = 1;
            this.ab8 = 0;
            this.ab9 = 0;
            this.vp = 4;
            this.vn = 4;
            this.xz = null;
            this.vb = null;
            this.x3 = null;
            this.vc = null;
        }
        provideContainer(a) {
            if (a != null) {
                let b = this.vf();
                let c = this.vg();
                if (b != null) {
                    b.provideRenderer(a);
                }
                if (c != null) {
                    c.provideRenderer(a);
                }
            }
            super.provideContainer(a);
        }
        rq() {
            super.rq();
            let a = this.vf();
            let b = this.vg();
            if (a != null && a.ay != null) {
                this.abo = a.ay.textColor;
            }
            if (b != null && b.ay != null) {
                this.abv = b.ay.textColor;
            }
            this.abt = AxisDefaults.j;
            this.ab0 = AxisDefaults.j;
            this.abp = AxisDefaults.h;
            this.abw = AxisDefaults.h;
            this.abs = AxisDefaults.g;
            this.abz = AxisDefaults.g;
        }
        sd(a, b, c) {
            super.sd(a, b, c);
            switch (a) {
                case "XAxisLabelLeftMargin":
                    this.aas((d) => d.leftMargin = this.w0);
                    break;
                case "XAxisLabelTopMargin":
                    this.aas((d) => d.topMargin = this.w2);
                    break;
                case "XAxisLabelRightMargin":
                    this.aas((d) => d.rightMargin = this.w1);
                    break;
                case "XAxisLabelBottomMargin":
                    this.aas((d) => d.bottomMargin = this.wz);
                    break;
                case "YAxisLabelLeftMargin":
                    this.aax((d) => d.leftMargin = this.xh);
                    break;
                case "YAxisLabelTopMargin":
                    this.aax((d) => d.topMargin = this.xj);
                    break;
                case "YAxisLabelRightMargin":
                    this.aax((d) => d.rightMargin = this.xi);
                    break;
                case "YAxisLabelBottomMargin":
                    this.aax((d) => d.bottomMargin = this.xg);
                    break;
                case "ActualItemsSource":
                case "ShouldDisplayMockData":
                case "ShouldUseSkeletonStyleForMockData":
                    this.abm = this.ui(this.abo);
                    this.abn = this.ui(this.abv);
                    break;
                case "XAxisLabelTextColor":
                    this.abm = this.ui(this.abo);
                    break;
                case "YAxisLabelTextColor":
                    this.abn = this.ui(this.abv);
                    break;
                case "ActualXAxisLabelTextColor":
                    this.aas((d) => d.textColor = this.abm);
                    break;
                case "ActualYAxisLabelTextColor":
                    this.aax((d) => d.textColor = this.abn);
                    break;
                case "XAxisTitleMargin":
                    this.aau((d) => d.margin = this.xb);
                    break;
                case "YAxisTitleMargin":
                    this.aaz((d) => d.margin = this.xs);
                    break;
                case "XAxisTitleLeftMargin":
                    this.aau((d) => d.leftMargin = this.xa);
                    break;
                case "YAxisTitleLeftMargin":
                    this.aaz((d) => d.leftMargin = this.xr);
                    break;
                case "XAxisTitleTopMargin":
                    this.aau((d) => d.topMargin = this.xd);
                    break;
                case "YAxisTitleTopMargin":
                    this.aaz((d) => d.topMargin = this.xu);
                    break;
                case "XAxisTitleRightMargin":
                    this.aau((d) => d.rightMargin = this.xc);
                    break;
                case "YAxisTitleRightMargin":
                    this.aaz((d) => d.rightMargin = this.xt);
                    break;
                case "XAxisTitleBottomMargin":
                    this.aau((d) => d.bottomMargin = this.w9);
                    break;
                case "YAxisTitleBottomMargin":
                    this.aaz((d) => d.bottomMargin = this.xq);
                    break;
                case "XAxisTitleTextColor":
                    this.aau((d) => d.textColor = this.abu);
                    break;
                case "YAxisTitleTextColor":
                    this.aaz((d) => d.textColor = this.ab1);
                    break;
                case "XAxisFormatLabel":
                    this.aaq((d) => d.at = this.vj);
                    break;
                case "YAxisFormatLabel":
                    this.aav((d) => d.at = this.vk);
                    break;
            }
        }
        get vj() {
            return this.vh;
        }
        set vj(a) {
            let b = this.vj;
            if (a != b) {
                this.vh = a;
                this.sc("XAxisFormatLabel", b, this.vj);
            }
        }
        get vk() {
            return this.vi;
        }
        set vk(a) {
            let b = this.vk;
            if (a != b) {
                this.vi = a;
                this.sc("YAxisFormatLabel", b, this.vk);
            }
        }
        get w0() {
            return this.vy;
        }
        set w0(a) {
            let b = this.w0;
            if (a != b) {
                this.vy = a;
                this.sc("XAxisLabelLeftMargin", b, this.w0);
            }
        }
        get w2() {
            return this.v0;
        }
        set w2(a) {
            let b = this.w2;
            if (a != b) {
                this.v0 = a;
                this.sc("XAxisLabelTopMargin", b, this.w2);
            }
        }
        get w1() {
            return this.vz;
        }
        set w1(a) {
            let b = this.w1;
            if (a != b) {
                this.vz = a;
                this.sc("XAxisLabelRightMargin", b, this.w1);
            }
        }
        get wz() {
            return this.vx;
        }
        set wz(a) {
            let b = this.wz;
            if (a != b) {
                this.vx = a;
                this.sc("XAxisLabelBottomMargin", b, this.wz);
            }
        }
        get xh() {
            return this.wf;
        }
        set xh(a) {
            let b = this.xh;
            if (a != b) {
                this.wf = a;
                this.sc("YAxisLabelLeftMargin", b, this.xh);
            }
        }
        get xj() {
            return this.wh;
        }
        set xj(a) {
            let b = this.xj;
            if (a != b) {
                this.wh = a;
                this.sc("YAxisLabelTopMargin", b, this.xj);
            }
        }
        get xi() {
            return this.wg;
        }
        set xi(a) {
            let b = this.xi;
            if (a != b) {
                this.wg = a;
                this.sc("YAxisLabelRightMargin", b, this.xi);
            }
        }
        get xg() {
            return this.we;
        }
        set xg(a) {
            let b = this.xg;
            if (a != b) {
                this.we = a;
                this.sc("YAxisLabelBottomMargin", b, this.xg);
            }
        }
        get abo() {
            return this.aa8;
        }
        set abo(a) {
            let b = this.abo;
            if (a != b) {
                this.aa8 = a;
                this.sc("XAxisLabelTextColor", b, this.abo);
            }
        }
        get abv() {
            return this.abf;
        }
        set abv(a) {
            let b = this.abv;
            if (a != b) {
                this.abf = a;
                this.sc("YAxisLabelTextColor", b, this.abv);
            }
        }
        get abm() {
            return this.aa6;
        }
        set abm(a) {
            let b = this.aa6;
            if (a != b) {
                this.aa6 = a;
                this.sc("ActualXAxisLabelTextColor", b, this.abm);
            }
        }
        get abn() {
            return this.aa7;
        }
        set abn(a) {
            let b = this.aa7;
            if (a != b) {
                this.aa7 = a;
                this.sc("ActualYAxisLabelTextColor", b, this.abn);
            }
        }
        get xb() {
            return this.v9;
        }
        set xb(a) {
            let b = this.xb;
            if (a != b) {
                this.v9 = a;
                this.sc("XAxisTitleMargin", b, this.xb);
            }
        }
        get xs() {
            return this.wq;
        }
        set xs(a) {
            let b = this.xs;
            if (a != b) {
                this.wq = a;
                this.sc("YAxisTitleMargin", b, this.xs);
            }
        }
        get xa() {
            return this.v8;
        }
        set xa(a) {
            let b = this.xa;
            if (a != b) {
                this.v8 = a;
                this.sc("XAxisTitleLeftMargin", b, this.xa);
            }
        }
        get xr() {
            return this.wp;
        }
        set xr(a) {
            let b = this.xr;
            if (a != b) {
                this.wp = a;
                this.sc("YAxisTitleLeftMargin", b, this.xr);
            }
        }
        get xd() {
            return this.wb;
        }
        set xd(a) {
            let b = this.xd;
            if (a != b) {
                this.wb = a;
                this.sc("XAxisTitleTopMargin", b, this.xd);
            }
        }
        get xu() {
            return this.ws;
        }
        set xu(a) {
            let b = this.xu;
            if (a != b) {
                this.ws = a;
                this.sc("YAxisTitleTopMargin", b, this.xu);
            }
        }
        get xc() {
            return this.wa;
        }
        set xc(a) {
            let b = this.xc;
            if (a != b) {
                this.wa = a;
                this.sc("XAxisTitleRightMargin", b, this.xc);
            }
        }
        get xt() {
            return this.wr;
        }
        set xt(a) {
            let b = this.xt;
            if (a != b) {
                this.wr = a;
                this.sc("YAxisTitleRightMargin", b, this.xt);
            }
        }
        get w9() {
            return this.v7;
        }
        set w9(a) {
            let b = this.w9;
            if (a != b) {
                this.v7 = a;
                this.sc("XAxisTitleBottomMargin", b, this.w9);
            }
        }
        get xq() {
            return this.wo;
        }
        set xq(a) {
            let b = this.xq;
            if (a != b) {
                this.wo = a;
                this.sc("YAxisTitleBottomMargin", b, this.xq);
            }
        }
        get abu() {
            return this.abe;
        }
        set abu(a) {
            let b = this.abu;
            if (a != b) {
                this.abe = a;
                this.sc("XAxisTitleTextColor", b, this.abu);
            }
        }
        get ab1() {
            return this.abl;
        }
        set ab1(a) {
            let b = this.ab1;
            if (a != b) {
                this.abl = a;
                this.sc("YAxisTitleTextColor", b, this.ab1);
            }
        }
        se(a, b, c) {
            super.se(a, b, c);
            switch (a) {
                case "XAxisLabelTextStyle":
                    this.aas((d) => d.textStyle = this.yo);
                    break;
                case "YAxisLabelTextStyle":
                    this.aax((d) => d.textStyle = this.zt);
                    break;
                case "XAxisTitleTextStyle":
                    this.aau((d) => d.textStyle = this.zc);
                    break;
                case "YAxisTitleTextStyle":
                    this.aaz((d) => d.textStyle = this.aah);
                    break;
            }
        }
        get yo() {
            return this.x0;
        }
        set yo(a) {
            let b = this.yo;
            if (a != b) {
                this.x0 = a;
                this.sc("XAxisLabelTextStyle", b, this.yo);
            }
        }
        get zt() {
            return this.x4;
        }
        set zt(a) {
            let b = this.zt;
            if (a != b) {
                this.x4 = a;
                this.sc("YAxisLabelTextStyle", b, this.zt);
            }
        }
        get zc() {
            return this.x2;
        }
        set zc(a) {
            let b = this.zc;
            if (a != b) {
                this.x2 = a;
                this.sc("XAxisTitleTextStyle", b, this.zc);
            }
        }
        get aah() {
            return this.x6;
        }
        set aah(a) {
            let b = this.aah;
            if (a != b) {
                this.x6 = a;
                this.sc("YAxisTitleTextStyle", b, this.aah);
            }
        }
        aan(a) {
            this.aak(a, (b) => b.leftMargin = this.w0);
            this.aak(a, (b) => b.topMargin = this.w2);
            this.aak(a, (b) => b.rightMargin = this.w1);
            this.aak(a, (b) => b.bottomMargin = this.wz);
            this.aak(a, (b) => b.textColor = this.abm);
            this.aal(a, (b) => b.textColor = this.abu);
            this.aal(a, (b) => b.leftMargin = this.xa);
            this.aal(a, (b) => b.topMargin = this.xd);
            this.aal(a, (b) => b.rightMargin = this.xc);
            this.aal(a, (b) => b.bottomMargin = this.w9);
            this.aak(a, (b) => b.textStyle = this.yo);
            this.aal(a, (b) => b.textStyle = this.zc);
        }
        aap(a) {
            this.aak(a, (b) => b.leftMargin = this.xh);
            this.aak(a, (b) => b.topMargin = this.xj);
            this.aak(a, (b) => b.rightMargin = this.xi);
            this.aak(a, (b) => b.bottomMargin = this.xg);
            this.aak(a, (b) => b.textColor = this.abn);
            this.aal(a, (b) => b.textColor = this.ab1);
            this.aal(a, (b) => b.leftMargin = this.xr);
            this.aal(a, (b) => b.topMargin = this.xu);
            this.aal(a, (b) => b.rightMargin = this.xt);
            this.aal(a, (b) => b.bottomMargin = this.xq);
            this.aak(a, (b) => b.textStyle = this.zt);
            this.aal(a, (b) => b.textStyle = this.aah);
        }
        sv(a) {
            let b = this.a9(a);
            let c = this.cv(a, b);
            if (c == null) {
                return;
            }
            c.itemsSource = a.data;
            c.name = this.ny(a);
            c.title = this.nz(a, b);
            this.dataChart.series.add(c);
        }
        aaq(a) {
            this.aar(a, null);
        }
        aar(a, b) {
            a(this.vf());
        }
        aaw(a, b) {
            a(this.vg());
        }
        aav(a) {
            this.aaw(a, true);
        }
        ra(a, b) {
            this.aaq(a);
            this.aaw(a, b);
        }
        aau(a) {
            this.aal(this.vf(), a);
        }
        aaz(a) {
            this.aal(this.vg(), a);
        }
        aax(a) {
            this.aak(this.vg(), a);
        }
        aas(a) {
            this.aak(this.vf(), a);
        }
        wt(a) {
            let b = this.vf();
            return b.ei(a, new ScalerParams(1, this.uq, this.up, b.cg));
        }
        wv(a) {
            let b = this.vf();
            return b.el(a, new ScalerParams(1, this.uq, this.up, b.cg));
        }
        wu(a) {
            let b = this.vg();
            return b.ei(a, new ScalerParams(1, this.uq, this.up, b.cg));
        }
        ww(a) {
            let b = this.vg();
            return b.el(a, new ScalerParams(1, this.uq, this.up, b.cg));
        }
        ss(a) {
            super.ss(a);
            if (a == null) {
                return;
            }
            if (a.axes != null) {
                let b = this.vf();
                let c = this.vg();
                if (a.axes.contains(b)) {
                    a.axes.remove(b);
                }
                if (a.axes.contains(c)) {
                    a.axes.remove(c);
                }
            }
        }
        static x9(a, b) {
            for (let c of fromEnum(b)) {
                let d = c.findMatchingHint(16);
                if (d != null) {
                    let e = d.path;
                    return e;
                }
            }
            return null;
        }
        rl(a) {
            super.rl(a);
            if (a == this.dataChart) {
                this.dataChart.axes.add(this.vf());
                this.dataChart.axes.add(this.vg());
            }
        }
        aam(a) {
            if (a != null && this.jt != null && a.fk == null) {
                a.provideRenderer(this.jt);
            }
            a.jv = this.abp;
            a.eq = this.w3;
            a.jw = this.abq;
            a.et = this.w4;
            a.jy = this.abs;
            a.ff = this.w5;
            a.jx = this.abr;
            a.fg = this.w6;
            a.jz = this.abt;
            a.fh = this.w7;
            a.c3 = true;
            a.ct = this.fz;
            a.cv = this.fz;
            let b = a == this.vf();
            if (b) {
                a.g5 = this.y3;
            }
            a.fz = this.xx;
            a.gf = this.yf;
            a.ag = this.vd;
            this.aak(a, (c) => c.angle = this.wy);
            this.aak(a, (c) => {
                if (c.extent != this.wx) {
                    c.extent = this.wx;
                }
            });
            this.aak(a, (c) => c.horizontalAlignment = this.aa3);
            this.aak(a, (c) => c.verticalAlignment = this.ab5);
            this.aak(a, (c) => c.visibility = this.aca);
            this.aak(a, (c) => c.location = this.vl(this.vo));
            this.aal(a, (c) => c.horizontalAlignment = this.aa4);
            this.aal(a, (c) => c.angle = this.w8);
            this.aan(a);
        }
        aao(a) {
            if (a == null) {
                return;
            }
            if (this.jt != null && a.fk == null) {
                a.provideRenderer(this.jt);
            }
            a.ct = this.fz;
            a.cv = this.fz;
            this.aak(a, (b) => b.angle = this.xf);
            this.aak(a, (b) => {
                if (b.extent != this.xe) {
                    b.extent = this.xe;
                }
            });
            this.aak(a, (b) => b.horizontalAlignment = this.aa5);
            this.aak(a, (b) => b.verticalAlignment = this.ab6);
            this.aak(a, (b) => b.visibility = this.acb);
            this.aak(a, (b) => b.location = this.vm(this.vq));
            this.aal(a, (b) => b.verticalAlignment = this.ab7);
            this.aal(a, (b) => b.angle = this.xp);
            a.jv = this.abw;
            a.eq = this.xk;
            a.jw = this.abx;
            a.et = this.xl;
            a.jy = this.abz;
            a.ff = this.xm;
            a.jx = this.aby;
            a.fg = this.xn;
            a.jz = this.ab0;
            a.fh = this.xo;
            let b = a == this.vg();
            if (b) {
                a.g5 = this.z8;
            }
            a.gf = this.zk;
            a.ag = this.ve;
            this.aap(a);
        }
        ri() {
            super.ri();
            this.aam(this.vf());
            this.aao(this.vg());
        }
        aak(a, b) {
            if (a == null) {
                return;
            }
            if (a.ay == null) {
                a.ay = new AxisLabelSettings();
                a.ay.angle = a.d4();
                a.ay.bottomMargin = a.d5();
                a.ay.leftMargin = a.d6();
                a.ay.rightMargin = a.d7();
                a.ay.topMargin = a.d8();
                a.ay.horizontalAlignment = a.jq();
                a.ay.location = a.az();
                a.ay.verticalAlignment = a.kj();
            }
            b(a.ay);
        }
        aal(a, b) {
            if (a == null) {
                return;
            }
            if (a.be == null) {
                a.be = new TitleSettings();
                a.be.bottomMargin = a.ea();
                a.be.leftMargin = a.eb();
                a.be.rightMargin = a.ec();
                a.be.topMargin = a.ed();
                a.be.location = a.a0();
                a.be.angle = a.d9();
                a.be.horizontalAlignment = a.jr();
                a.be.verticalAlignment = a.kk();
            }
            b(a.be);
        }
        sc(a, b, c) {
            super.sc(a, b, c);
            switch (a) {
                case "XAxisLabelAngle":
                    this.aas((d) => d.angle = this.wy);
                    break;
                case "YAxisLabelAngle":
                    this.aax((d) => d.angle = this.xf);
                    break;
                case "XAxisLabelHorizontalAlignment":
                    this.aas((d) => d.horizontalAlignment = this.aa3);
                    break;
                case "YAxisLabelHorizontalAlignment":
                    this.aax((d) => d.horizontalAlignment = this.aa5);
                    break;
                case "XAxisLabelVerticalAlignment":
                    this.aas((d) => d.verticalAlignment = this.ab5);
                    break;
                case "YAxisLabelVerticalAlignment":
                    this.aax((d) => d.verticalAlignment = this.ab6);
                    break;
                case "XAxisLabelVisibility":
                    this.aas((d) => d.visibility = this.aca);
                    break;
                case "YAxisLabelVisibility":
                    this.aax((d) => d.visibility = this.acb);
                    break;
                case "XAxisLabel":
                    this.aaq((d) => d.fz = this.xx);
                    break;
                case "YAxisLabel":
                    this.aav((d) => d.fz = this.xy);
                    break;
                case "XAxisLabelFormat":
                    this.aaq((d) => d.gf = this.yf);
                    break;
                case "XAxisLabelFormatSpecifiers":
                    this.aaq((d) => d.ag = this.vd);
                    break;
                case "YAxisLabelFormat":
                    this.aav((d) => d.gf = this.zk);
                    break;
                case "YAxisLabelFormatSpecifiers":
                    this.aav((d) => d.ag = this.ve);
                    break;
                case "XAxisTitleAngle":
                    this.aau((d) => d.angle = this.w8);
                    break;
                case "YAxisTitleAngle":
                    this.aaz((d) => d.angle = this.xp);
                    break;
                case "XAxisTitleAlignment":
                    this.aau((d) => d.horizontalAlignment = this.aa4);
                    break;
                case "YAxisTitleAlignment":
                    this.aaz((d) => d.verticalAlignment = this.ab7);
                    break;
                case "XAxisTitle":
                    this.aaq((d) => d.g5 = this.y3);
                    break;
                case "YAxisTitle":
                    this.aaw((d) => d.g5 = this.z8, false);
                    break;
                case "XAxisMajorStroke":
                    this.aar((d) => d.jv = this.abp, a);
                    break;
                case "YAxisMajorStroke":
                    this.aav((d) => d.jv = this.abw);
                    break;
                case "XAxisMajorStrokeThickness":
                    this.aar((d) => d.eq = this.w3, a);
                    break;
                case "YAxisMajorStrokeThickness":
                    this.aav((d) => d.eq = this.xk);
                    break;
                case "XAxisMinorStroke":
                    this.aaq((d) => d.jw = this.abq);
                    break;
                case "YAxisMinorStroke":
                    this.aav((d) => d.jw = this.abx);
                    break;
                case "XAxisMinorStrokeThickness":
                    this.aaq((d) => d.et = this.w4);
                    break;
                case "YAxisMinorStrokeThickness":
                    this.aav((d) => d.et = this.xl);
                    break;
                case "XAxisTickLength":
                    this.aaq((d) => d.fg = this.w6);
                    break;
                case "YAxisTickLength":
                    this.aav((d) => d.fg = this.xn);
                    break;
                case "XAxisTickStroke":
                    this.aaq((d) => d.jz = this.abt);
                    break;
                case "YAxisTickStroke":
                    this.aav((d) => d.jz = this.ab0);
                    break;
                case "XAxisTickStrokeThickness":
                    this.aaq((d) => d.fh = this.w7);
                    break;
                case "YAxisTickStrokeThickness":
                    this.aav((d) => d.fh = this.xo);
                    break;
                case "XAxisStroke":
                    this.aaq((d) => d.jy = this.abs);
                    break;
                case "YAxisStroke":
                    this.aav((d) => d.jy = this.abz);
                    break;
                case "XAxisStrokeThickness":
                    this.aaq((d) => d.ff = this.w5);
                    break;
                case "YAxisStrokeThickness":
                    this.aav((d) => d.ff = this.xm);
                    break;
                case "XAxisExtent":
                    this.aas((d) => d.extent = this.wx);
                    break;
                case "YAxisExtent":
                    this.aax((d) => d.extent = this.xe);
                    break;
                case "XAxisStrip":
                    this.aaq((d) => d.jx = this.abr);
                    break;
                case "YAxisStrip":
                    this.aav((d) => d.jx = this.aby);
                    break;
                case "XAxisInverted":
                    this.aaq((d) => d.cg = this.vt);
                    break;
                case "YAxisInverted":
                    this.aav((d) => d.cg = this.vu);
                    break;
                case "YAxisLabelLocation":
                    this.aay();
                    break;
                case "XAxisLabelLocation":
                    this.aat();
                    break;
            }
        }
        aay() {
            let a = this.vm(this.vq);
            if (a == 2 || a == 7) {
                this.aa5 = 2;
            }
            else {
                this.aa5 = 0;
            }
            this.aax((b) => b.location = a);
        }
        aat() {
            let a = this.vl(this.vo);
            if (a == 1 || a == 5) {
                this.ab5 = 0;
            }
            else {
                this.ab5 = 2;
            }
            this.aas((b) => b.location = a);
        }
        vm(a) {
            if (a == 0) {
                return 2;
            }
            else if (a == 1) {
                return 3;
            }
            else if (a == 3) {
                return 7;
            }
            else if (a == 2) {
                return 6;
            }
            else {
                if (this.by == 1) {
                    return 3;
                }
                else {
                    return 2;
                }
            }
        }
        vl(a) {
            if (a == 1) {
                return 1;
            }
            else if (a == 0) {
                return 0;
            }
            else if (a == 3) {
                return 5;
            }
            else if (a == 2) {
                return 4;
            }
            else {
                return 1;
            }
        }
        get xx() {
            return this.xv;
        }
        set xx(a) {
            let b = this.xx;
            if (a != b) {
                this.xv = a;
                this.sc("XAxisLabel", b, this.xx);
            }
        }
        get xy() {
            return this.xw;
        }
        set xy(a) {
            let b = this.xy;
            if (a != b) {
                this.xw = a;
                this.sc("YAxisLabel", b, this.xy);
            }
        }
        get abp() {
            return this.aa9;
        }
        set abp(a) {
            let b = this.abp;
            if (a != b) {
                this.aa9 = a;
                this.sc("XAxisMajorStroke", b, this.abp);
            }
        }
        get abw() {
            return this.abg;
        }
        set abw(a) {
            let b = this.abw;
            if (a != b) {
                this.abg = a;
                this.sc("YAxisMajorStroke", b, this.abw);
            }
        }
        get w3() {
            return this.v1;
        }
        set w3(a) {
            let b = this.w3;
            if (a != b) {
                this.v1 = a;
                this.sc("XAxisMajorStrokeThickness", b, this.w3);
            }
        }
        get xk() {
            return this.wi;
        }
        set xk(a) {
            let b = this.xk;
            if (a != b) {
                this.wi = a;
                this.sc("YAxisMajorStrokeThickness", b, this.xk);
            }
        }
        get w4() {
            return this.v2;
        }
        set w4(a) {
            let b = this.w4;
            if (a != b) {
                this.v2 = a;
                this.sc("XAxisMinorStrokeThickness", b, this.w4);
            }
        }
        get xl() {
            return this.wj;
        }
        set xl(a) {
            let b = this.xl;
            if (a != b) {
                this.wj = a;
                this.sc("YAxisMinorStrokeThickness", b, this.xl);
            }
        }
        get abr() {
            return this.abb;
        }
        set abr(a) {
            let b = this.abr;
            if (a != b) {
                this.abb = a;
                this.sc("XAxisStrip", b, this.abr);
            }
        }
        get aby() {
            return this.abi;
        }
        set aby(a) {
            let b = this.aby;
            if (a != b) {
                this.abi = a;
                this.sc("YAxisStrip", b, this.aby);
            }
        }
        get abs() {
            return this.abc;
        }
        set abs(a) {
            let b = this.abs;
            if (a != b) {
                this.abc = a;
                this.sc("XAxisStroke", b, this.abs);
            }
        }
        get abz() {
            return this.abj;
        }
        set abz(a) {
            let b = this.abz;
            if (a != b) {
                this.abj = a;
                this.sc("YAxisStroke", b, this.abz);
            }
        }
        get w5() {
            return this.v3;
        }
        set w5(a) {
            let b = this.w5;
            if (a != b) {
                this.v3 = a;
                this.sc("XAxisStrokeThickness", b, this.w5);
            }
        }
        get xm() {
            return this.wk;
        }
        set xm(a) {
            let b = this.xm;
            if (a != b) {
                this.wk = a;
                this.sc("YAxisStrokeThickness", b, this.xm);
            }
        }
        get w6() {
            return this.v4;
        }
        set w6(a) {
            let b = this.w6;
            if (a != b) {
                this.v4 = a;
                this.sc("XAxisTickLength", b, this.w6);
            }
        }
        get xn() {
            return this.wl;
        }
        set xn(a) {
            let b = this.xn;
            if (a != b) {
                this.wl = a;
                this.sc("YAxisTickLength", b, this.xn);
            }
        }
        get abt() {
            return this.abd;
        }
        set abt(a) {
            let b = this.abt;
            if (a != b) {
                this.abd = a;
                this.sc("XAxisTickStroke", b, this.abt);
            }
        }
        get ab0() {
            return this.abk;
        }
        set ab0(a) {
            let b = this.ab0;
            if (a != b) {
                this.abk = a;
                this.sc("YAxisTickStroke", b, this.ab0);
            }
        }
        get w7() {
            return this.v5;
        }
        set w7(a) {
            let b = this.w7;
            if (a != b) {
                this.v5 = a;
                this.sc("XAxisTickStrokeThickness", b, this.w7);
            }
        }
        get xo() {
            return this.wm;
        }
        set xo(a) {
            let b = this.xo;
            if (a != b) {
                this.wm = a;
                this.sc("YAxisTickStrokeThickness", b, this.xo);
            }
        }
        get y3() {
            return this.x1;
        }
        set y3(a) {
            let b = this.y3;
            if (a != b) {
                this.x1 = a;
                this.sc("XAxisTitle", b, this.y3);
            }
        }
        get z8() {
            return this.x5;
        }
        set z8(a) {
            let b = this.z8;
            if (a != b) {
                this.x5 = a;
                this.sc("YAxisTitle", b, this.z8);
            }
        }
        get abq() {
            return this.aba;
        }
        set abq(a) {
            let b = this.abq;
            if (a != b) {
                this.aba = a;
                this.sc("XAxisMinorStroke", b, this.abq);
            }
        }
        get abx() {
            return this.abh;
        }
        set abx(a) {
            let b = this.abx;
            if (a != b) {
                this.abh = a;
                this.sc("YAxisMinorStroke", b, this.abx);
            }
        }
        get wy() {
            return this.vw;
        }
        set wy(a) {
            let b = this.wy;
            if (a != b) {
                this.vw = a;
                this.sc("XAxisLabelAngle", b, this.wy);
            }
        }
        get xf() {
            return this.wd;
        }
        set xf(a) {
            let b = this.xf;
            if (a != b) {
                this.wd = a;
                this.sc("YAxisLabelAngle", b, this.xf);
            }
        }
        get wx() {
            return this.vv;
        }
        set wx(a) {
            let b = this.wx;
            if (a != b) {
                this.vv = a;
                this.sc("XAxisExtent", b, this.wx);
            }
        }
        get xe() {
            return this.wc;
        }
        set xe(a) {
            let b = this.xe;
            if (a != b) {
                this.wc = a;
                this.sc("YAxisExtent", b, this.xe);
            }
        }
        get w8() {
            return this.v6;
        }
        set w8(a) {
            let b = this.w8;
            if (a != b) {
                this.v6 = a;
                this.sc("XAxisTitleAngle", b, this.w8);
            }
        }
        get xp() {
            return this.wn;
        }
        set xp(a) {
            let b = this.xp;
            if (a != b) {
                this.wn = a;
                this.sc("YAxisTitleAngle", b, this.xp);
            }
        }
        get vt() {
            return this.vr;
        }
        set vt(a) {
            let b = this.vt;
            if (a != b) {
                this.vr = a;
                this.sc("XAxisInverted", b, this.vt);
            }
        }
        get vu() {
            return this.vs;
        }
        set vu(a) {
            let b = this.vu;
            if (a != b) {
                this.vs = a;
                this.sc("YAxisInverted", b, this.vu);
            }
        }
        get aa4() {
            return this.aa1;
        }
        set aa4(a) {
            let b = this.aa4;
            if (a != b) {
                this.aa1 = a;
                this.sc("XAxisTitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.aa4));
            }
        }
        get ab7() {
            return this.ab4;
        }
        set ab7(a) {
            let b = this.ab7;
            if (a != b) {
                this.ab4 = a;
                this.sc("YAxisTitleAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.ab7));
            }
        }
        get aa3() {
            return this.aa0;
        }
        set aa3(a) {
            let b = this.aa3;
            if (a != b) {
                this.aa0 = a;
                this.sc("XAxisLabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.aa3));
            }
        }
        get_aa5() {
            return this.aa2;
        }
        set_aa5(a) {
            let b = this.aa5;
            if (a != b) {
                this.aa2 = a;
                this.sc("YAxisLabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.aa5));
            }
        }
        get aa5() {
            return this.get_aa5();
        }
        set aa5(a) {
            this.set_aa5(a);
        }
        get ab5() {
            return this.ab2;
        }
        set ab5(a) {
            let b = this.ab5;
            if (a != b) {
                this.ab2 = a;
                this.sc("XAxisLabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.ab5));
            }
        }
        get ab6() {
            return this.ab3;
        }
        set ab6(a) {
            let b = this.ab6;
            if (a != b) {
                this.ab3 = a;
                this.sc("YAxisLabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.ab6));
            }
        }
        get aca() {
            return this.ab8;
        }
        set aca(a) {
            let b = this.aca;
            if (a != b) {
                this.ab8 = a;
                this.sc("XAxisLabelVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.aca));
            }
        }
        get acb() {
            return this.ab9;
        }
        set acb(a) {
            let b = this.acb;
            if (a != b) {
                this.ab9 = a;
                this.sc("YAxisLabelVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.acb));
            }
        }
        get_vq() {
            return this.vp;
        }
        set_vq(a) {
            let b = this.vq;
            if (a != b) {
                this.vp = a;
                this.sc("YAxisLabelLocation", enumGetBox(YAxisLabelLocation_$type, b), enumGetBox(YAxisLabelLocation_$type, this.vq));
            }
        }
        get vq() {
            return this.get_vq();
        }
        set vq(a) {
            this.set_vq(a);
        }
        get_vo() {
            return this.vn;
        }
        set_vo(a) {
            let b = this.vo;
            if (a != b) {
                this.vn = a;
                this.sc("XAxisLabelLocation", enumGetBox(XAxisLabelLocation_$type, b), enumGetBox(XAxisLabelLocation_$type, this.vo));
            }
        }
        get vo() {
            return this.get_vo();
        }
        set vo(a) {
            this.set_vo(a);
        }
        get yf() {
            return this.xz;
        }
        set yf(a) {
            let b = this.xz;
            if (a != b) {
                this.xz = a;
                this.sc("XAxisLabelFormat", b, this.xz);
            }
        }
        get vd() {
            return this.vb;
        }
        set vd(a) {
            let b = this.vb;
            if (a != b) {
                this.vb = a;
                this.sc("XAxisLabelFormatSpecifiers", b, this.vb);
            }
        }
        get zk() {
            return this.x3;
        }
        set zk(a) {
            let b = this.x3;
            if (a != b) {
                this.x3 = a;
                this.sc("YAxisLabelFormat", b, this.x3);
            }
        }
        get ve() {
            return this.vc;
        }
        set ve(a) {
            let b = this.vc;
            if (a != b) {
                this.vc = a;
                this.sc("YAxisLabelFormatSpecifiers", b, this.vc);
            }
        }
    }
    XYChart.$t = /*@__PURE__*/ markType(XYChart, 'XYChart', DomainChart.$);
    return XYChart;
})();
