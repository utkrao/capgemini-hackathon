/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { EventArgs, Base, markType, Point_$type, runOn, typeCast, IList$1_$type, Number_$type, markDep, IEnumerable_$type, Array_$type, delegateCombine, fromEnum, Boolean_$type, enumGetBox, fromEn, String_$type, getInstanceType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, Delegate_$type, toNullable, TypeRegistrar } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategorySeries } from "./CategorySeries";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { NumericAxisBase } from "./NumericAxisBase";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { CategoryFrame } from "./CategoryFrame";
import { Rect } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { ObservableCollection$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { isNaN_, isInfinity, truncate } from "igniteui-react-core";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { Path } from "igniteui-react-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FrameworkElement } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Defaults } from "./Defaults";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { IScaler_$type } from "./IScaler";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core";
import { dateMinValue, dateMaxValue } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { AnchoredCategoryBucketCalculator } from "./AnchoredCategoryBucketCalculator";
import { IStacked100Series_$type } from "./IStacked100Series";
import { NotImplementedException } from "igniteui-react-core";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CollisionAvoider } from "./CollisionAvoider";
import { SafeSortedReadOnlyDoubleCollection } from "./SafeSortedReadOnlyDoubleCollection";
import { Numeric } from "igniteui-react-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { CategoryXAxis } from "./CategoryXAxis";
import { IBarSeries_$type } from "./IBarSeries";
import { Color } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { SingleValuesHolder } from "./SingleValuesHolder";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Canvas } from "igniteui-react-core";
import { Panel } from "igniteui-react-core";
import { PlatformConstants } from "igniteui-react-core";
/**
 * @hidden
 */
export let StackedSeriesCreatedEventArgs = /*@__PURE__*/ (() => {
    class StackedSeriesCreatedEventArgs extends EventArgs {
        constructor(a) {
            super();
            this.c = null;
            this.c = a;
        }
        get brush() {
            return this.c.jk;
        }
        set brush(a) {
            this.c.jk = a;
        }
        get legendItemTemplate() {
            return this.c.go;
        }
        set legendItemTemplate(a) {
            this.c.go = a;
        }
        get legendItemBadgeTemplate() {
            return this.c.gn;
        }
        set legendItemBadgeTemplate(a) {
            this.c.gn = a;
        }
        get legendItemVisibility() {
            return this.c.kh;
        }
        set legendItemVisibility(a) {
            this.c.kh = a;
        }
        get outline() {
            return this.c.jo;
        }
        set outline(a) {
            this.c.jo = a;
        }
        get dashArray() {
            return this.c.jt;
        }
        set dashArray(a) {
            this.c.jt = a;
        }
        get dashCap() {
            return this.c.jx;
        }
        set dashCap(a) {
            this.c.jx = a;
        }
        get index() {
            return this.c.b3;
        }
        get thickness() {
            return this.c.bv;
        }
        set thickness(a) {
            this.c.bv = a;
        }
        get title() {
            return this.c.ca;
        }
        set title(a) {
            this.c.ca = a;
        }
        get transitionDuration() {
            return this.c.b4;
        }
        set transitionDuration(a) {
            this.c.b4 = a;
        }
        get transitionEasingFunction() {
            return this.c.ad;
        }
        set transitionEasingFunction(a) {
            this.c.ad = a;
        }
        get markerBrush() {
            return this.c.jl;
        }
        set markerBrush(a) {
            this.c.jl = a;
        }
        get markerOutline() {
            return this.c.jm;
        }
        set markerOutline(a) {
            this.c.jm = a;
        }
        get markerStyle() {
            return this.c.ke;
        }
        set markerStyle(a) {
            this.c.ke = a;
        }
        get markerTemplate() {
            return this.c.gp;
        }
        set markerTemplate(a) {
            this.c.gp = a;
        }
        get markerType() {
            return this.c.t;
        }
        set markerType(a) {
            this.c.t = a;
        }
        get markerThickness() {
            return this.c.bo;
        }
        set markerThickness(a) {
            this.c.bo = a;
        }
        get startCap() {
            return this.c.jw;
        }
        set startCap(a) {
            this.c.jz = a;
        }
        get endCap() {
            return this.c.jv;
        }
        set endCap(a) {
            this.c.jy = a;
        }
    }
    StackedSeriesCreatedEventArgs.$t = /*@__PURE__*/ markType(StackedSeriesCreatedEventArgs, 'StackedSeriesCreatedEventArgs', EventArgs.$);
    return StackedSeriesCreatedEventArgs;
})();
/**
 * @hidden
 */
export let FragmentBase = /*@__PURE__*/ (() => {
    class FragmentBase extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.vc = null;
            this._logicalSeriesLink = null;
            this.ve = null;
            this.vc = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.ve;
        }
        set parentSeries(a) {
            this.ve = a;
        }
        get_dp() {
            return false;
        }
        get_dv() {
            return true;
        }
        jr() {
            if (this.logicalSeriesLink != null) {
                return this.logicalSeriesLink.d8;
            }
            return null;
        }
        he() {
            let a = this.parentSeries;
            if (a.index == -1 || a.tq == null || a.tq.f.indexOf(this) == -1) {
                return -1;
            }
            return a.tq.f.indexOf(this);
        }
        hi() {
            let a = this.parentSeries;
            if (a.index == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.tu) {
                return -1 + a.index + a.tm.count - a.tq.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        bf() {
            return this.parentSeries;
        }
        rs() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchXAxis();
        }
        vb() {
            if (this.parentSeries == null) {
                return this.ry;
            }
            return this.parentSeries.ry;
        }
        sd() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        vg(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = c[1];
            let k = new Rect(0, i - 5, j - 5, 11, 11);
            if (!isNaN_(i) && !isNaN_(j) && !isInfinity(i) && !isInfinity(j) && d.tryAdd(k)) {
                b.m.add({ $type: Point_$type, x: i, y: j });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        s8(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.a0.count == 0 || this.logicalSeriesLink.az.count == 0) {
                return;
            }
            this.rz(b).d(a, b);
        }
        pq(a, b, c) {
            return this.ps(a, b, c, this.vb().r(this.rs(), this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0)), this.sd(), this.rs(), runOn(this, this.vh), (d, e) => this.hm(d, e, this.rs(), runOn(this, this.sr), this.valueColumn != null ? new FragmentBaseValueList(this) : null), (d, e) => this.hk(d, e, this.rs(), runOn(this, this.sr), this.valueColumn != null ? new FragmentBaseValueList(this) : null));
        }
        ag() {
            return [this.rs(), this.sd()];
        }
        vh(a, b, c) {
            if (this.cd == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.b0);
            let e = new ScalerParams(0, this.cd.s9, this.b0.bu, this.rs().cg, d);
            let f = this.ry.r(this.rs(), this.cd.s9, this.b0.bu, d);
            return this.gn(this.valueColumn != null ? new FragmentBaseValueList(this) : null, a, this.rs(), e, f, runOn(this, this.sr), b, c);
        }
        vj(a, b, c) {
            let d = this.tu(c);
            let e = d;
            let f = this.logicalSeriesLink.at;
            let g = f ? this.parentSeries.tq.e : this.parentSeries.tq.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(FragmentBase.$, g._inner[j - 1]);
                if (k != null && k.vc != null && k.vc.o.count > 0 && this.b0 != null && k.fb(this.b0.bu, this.b0.bv, this.b0)) {
                    i = true;
                    for (let l = k.vc.o.count - 1; l >= 0; l--) {
                        a.add(k.vc.o._inner[l]);
                    }
                }
            }
        }
        fb(a, b, c) {
            let d = super.fb(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.ck == null || e.bh == null || f.bh == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        tu(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.sd().cg, e);
            f.b = this.ge();
            if (!c.isEmpty && !d.isEmpty && this.sd() != null) {
                b = this.sd().ei(0, f);
            }
            return b;
        }
        ap(a) {
            return null;
        }
        vi() {
            if (this.parentSeries == null) {
                return -1;
            }
            let a = this.parentSeries.index;
            let b = 0;
            let c = 1;
            if (this.parentSeries.tu) {
                b = this.parentSeries.tm.count - 1;
                c = -1;
            }
            for (let d = b; this.parentSeries.tu ? d >= 0 : d < this.parentSeries.tm.count; d += c) {
                let e = this.parentSeries.tm._inner[d];
                if (e.visualSeriesLink == this) {
                    return a;
                }
                if (this.parentSeries.a1 == null || e.kg != 0 || e.kf != 0) {
                    continue;
                }
                a++;
            }
            return -1;
        }
        vk(a) {
            if (a == null) {
            }
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            if (this.parentSeries == null) {
                return;
            }
            let e = typeCast(NumericAxisBase.$, this.parentSeries.fetchYAxis());
            if (e == null) {
                return;
            }
            switch (b) {
                case "ValueColumn":
                    if (this.tl.c3) {
                        this.tl.c2.g$i();
                    }
                    if (e != null && !e.c0()) {
                        this.parentSeries.tl().cr.g(this.fv);
                        this.ml(false);
                    }
                    break;
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.jf = this.o3;
                    }
                    break;
            }
        }
        mn(a, b) {
            super.mn(a, b);
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    FragmentBase.$t = /*@__PURE__*/ markType(FragmentBase, 'FragmentBase', HorizontalAnchoredCategorySeries.$);
    return FragmentBase;
})();
/**
 * @hidden
 */
export let AreaFragment = /*@__PURE__*/ (() => {
    class AreaFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = AreaFragment.$;
        }
        bx() {
            return new AreaFragmentView(this);
        }
        l2(a) {
            super.l2(a);
            this.vl = a;
        }
        get_de() {
            return true;
        }
        get_dd() {
            return true;
        }
        r3() {
            return 1;
        }
        vn(a, b) {
            let c = this.vl.dg.ak;
            if (this.ez(a, c)) {
                return true;
            }
            let d = this.vl.dh.ak;
            if (this.ez(a, d)) {
                return true;
            }
            return false;
        }
        ex(a, b) {
            if (this.vm(a, b)) {
                return true;
            }
            if (this.vn(a, b)) {
                return true;
            }
            if (this.qk(a, b)) {
                return true;
            }
            return false;
        }
        vm(a, b) {
            let c = this.vl.di.ak;
            if (this.ey(a, b, c)) {
                return true;
            }
            let d = this.vl.dj.ak;
            if (this.ey(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        k0(a, b) {
            super.k0(a, b);
            let c = b;
            c.db();
        }
        tb(a, b) {
            super.tb(a, b);
            this.vc.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(AreaFragmentView.$, b);
            let d = a.f;
            let e = this.getEffectiveViewport1(c);
            this.r1.a0(this, this.sl(), runOn(this, this.rm), this.st(b), this.su(b));
            let f = false;
            let g = this.r1.b;
            if (g != null) {
                f = true;
            }
            if (f) {
                let h = new ScalerParams(0, b.bv, b.bu, this.us.cg, e);
                this.s7(d, -1, this.valueColumn.count, this.us, h, b.q);
            }
            this.r1.ad(c.di, true, false, true, true);
            this.r1.ad(c.dj, true, false, true, true);
            this.r1.ad(c.dg, false, true, false, false);
            this.r1.ad(c.dh, false, true, false, false);
            let i = c.cr.d;
            this.vc.i(c.dg, c.di, c.dh, c.dj, a.f.count, a.f, true, i, this.fv, (j, k, l, m, n) => this.vj(j, a.f, b), 0);
            c.dg._opacity = this.r1.j * this.fs;
            c.dh._opacity = 0.5 * this.r1.j * this.fs;
        }
        mw() {
            let a = (typeCast(XamDataChart.$, this.cd));
            if (a != null) {
                this.fs = isNaN_(this.f1) ? this.parentSeries.fs : this.f1;
            }
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    AreaFragment.$t = /*@__PURE__*/ markType(AreaFragment, 'AreaFragment', FragmentBase.$);
    return AreaFragment;
})();
/**
 * @hidden
 */
export let ColumnFragment = /*@__PURE__*/ (() => {
    class ColumnFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = ColumnFragment.$;
        }
        get_di() {
            return true;
        }
        get_d3() {
            return true;
        }
        gw() {
            if (!isNaN_(this.gv)) {
                return super.gw();
            }
            return Defaults.h;
        }
        r3() {
            return 1;
        }
        bx() {
            return new ColumnFragmentView(this);
        }
        l2(a) {
            super.l2(a);
            this.vm = a;
        }
        get fragmentXAxis() {
            return this.parentSeries != null ? typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis()) : null;
        }
        get fragmentYAxis() {
            return this.parentSeries != null ? typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis()) : null;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        rs() {
            return this.fragmentXAxis;
        }
        sd() {
            return this.fragmentYAxis;
        }
        get_c2() {
            return true;
        }
        fetchXAxis() {
            return null;
        }
        fetchYAxis() {
            return null;
        }
        k0(a, b) {
            super.k0(a, b);
            let c = b;
            if (a && c.db != null) {
                this.rt.m.clear();
                c.db.count = 0;
            }
        }
        ap(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
        }
        fb(a, b, c) {
            if (this.parentSeries == null) {
                return false;
            }
            return this.parentSeries.tv(this, a, b, this.vo(c));
        }
        e8() {
            return true;
        }
        st(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.st(this.parentSeries.b0);
            }
            return super.st(a);
        }
        su(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.su(this.parentSeries.b0);
            }
            return super.st(a);
        }
        sv(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.sv(this.parentSeries.b0);
            }
            return super.sv(a);
        }
        pz(a) {
            if (this.rs() == null || this.fragmentYAxis == null) {
                return Rect.empty;
            }
            let b = this.pl(a);
            let c = this.b0.bv;
            let d = this.b0.bu;
            let e = this.getEffectiveViewport1(this.b0);
            let f = new ScalerParams(0, c, d, this.fragmentYAxis.cg, e);
            let g = this.aj(this.rs(), this.rt.f, this.st(this.b0), this.su(this.b0), a, true);
            if (g == null) {
                return Rect.empty;
            }
            let h = g[0];
            let i = g[1];
            let j = Math.abs(b.x - h[0]);
            let k = Math.abs(b.x - i[0]);
            let l = this.rs().k3(c, d, e);
            if (j < k) {
                let m = h[0] - 0.5 * l;
                let n = h[1];
                let o = h[2];
                return new Rect(0, m, Math.min(n, o), l, Math.max(n, o) - Math.min(n, o));
            }
            else {
                let p = i[0] - 0.5 * l;
                let q = i[1];
                let r = i[2];
                return new Rect(0, p, Math.min(q, r), l, Math.max(q, r) - Math.min(q, r));
            }
        }
        ex(a, b) {
            if (this.e0(a, b)) {
                return true;
            }
            if (this.qk(a, b)) {
                return true;
            }
            return false;
        }
        e0(a, b) {
            let c = this.p0(a);
            if (c.isEmpty) {
                return false;
            }
            let d = this.vv(c, this.ga(b));
            return d.containsPoint(a);
        }
        vv(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - ((a.width / 2) + b);
            let f = d - (a.height / 2);
            let g = a.height;
            let h = a.width + b * 2;
            return new Rect(0, e, f, h, g);
        }
        h1(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = c != null ? typeCast(DataContext.$, c.dataContext) : null;
            let e = d != null ? d.item : null;
            if (e == null) {
                let f = this.b0.bu;
                let g = this.cd != null ? this.cd.s9 : Rect.empty;
                let h = { $type: Point_$type, x: g.left + g.width * (b.x - f.left) / f.width, y: g.top + g.height * (b.y - f.top) / f.height };
                e = this.hv(h);
            }
            return e;
        }
        hv(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.rs()) !== null) {
                b = this.hh(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.hf(a);
            }
            return b >= 0 && this.ck != null && b < this.ck.count ? this.ck.item(b) : null;
        }
        hh(a) {
            let b = this.b0.bv;
            let c = this.b0.bu;
            let d = this.getEffectiveViewport1(this.b0);
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let e = this.rs();
            let f = new ScalerParams(0, b, c, e.cg, d);
            let g = typeCast(ISortingAxis_$type, this.fragmentXAxis);
            let h = this.pv(this.b0);
            let i = e.el(h.left, f);
            let j = e.el(h.right, f);
            let k = (a.x - b.left) / b.width;
            let l = i + ((j - i) * k);
            if (truncate(l) <= dateMinValue().getTime() || truncate(l) >= dateMaxValue().getTime()) {
                return -1;
            }
            let m = g.i$f(l);
            return m;
        }
        hf(a) {
            if (this.parentSeries == null) {
                return -1;
            }
            return this.parentSeries.t1(a);
        }
        vg(a, b, c, d, e, f, g, h) {
            let i = 0;
            let j = c[0];
            let k = e < i ? c[2] : c[1];
            let l = new Rect(0, j - 5, k - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(k) && !isInfinity(j) && !isInfinity(k) && d.tryAdd(l)) {
                b.m.add({ $type: Point_$type, x: j, y: k });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        vo(a) {
            if (a.p) {
                return this.parentSeries.a6.a$h.item(a.ad);
            }
            else if (a == this.bz) {
                return this.parentSeries.bz;
            }
            else {
                return this.parentSeries.r2;
            }
        }
        mk(a, b, c, d, e) {
            this.a6.a$t(this, a, b, d, e);
            let f = this.a6.a$h.item(d);
            let g = f;
            f.a1(c);
            let h = this.vo(f);
            h.cr.g(this.fv);
            if (this.cx(g)) {
                return;
            }
            if (this.tm == null) {
                this.tm = new CategoryFrame(3);
            }
            this.tm.u();
            this.s8(this.tm, g);
            this.tb(this.tm, g);
        }
        s8(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null || this.logicalSeriesLink.az.count == 0 || this.logicalSeriesLink.a0.count == 0) {
                return;
            }
            let c;
            if (b.p) {
                c = this.parentSeries.tk;
            }
            else if (b == this.bz) {
                c = this.parentSeries.rw;
            }
            else {
                c = this.parentSeries.rt;
            }
            let d = typeCast(CategorySeriesView.$, this.vo(b));
            a.f.clear();
            a.m.clear();
            let e = d.cr.e;
            let f = d.cr.f;
            let g = this.parentSeries.ry.h.yScaler;
            let h = typeCast(ISortingAxis_$type, this.parentSeries.ry.h.scaler);
            let i = typeCast(NumericAxisBase.$, g) !== null && g.lh;
            let j = typeCast(StackedBucketCalculator.$, d.cr);
            let k = d.cr.d;
            let l = 0;
            if (e <= f) {
                for (let m = e; m <= f; m++) {
                    let n = m * k;
                    if (this._visibility != 0) {
                        break;
                    }
                    if (m >= this.valueColumn.count || m >= c.f.count + e) {
                        continue;
                    }
                    let o = this.valueColumn.item(m);
                    let p = !i || (i && o > 0);
                    let q;
                    if (h == null) {
                        q = j.getBucket1(this, m, m, b.bv, b.bu, c);
                    }
                    else {
                        q = j.getBucket1(this, m, h.i$b._inner[m], b.bv, b.bu, c);
                    }
                    a.f.add(q);
                    if (p) {
                        if (this.vg(b, a, q, this.ry.h.provideCollisionDetector(), o, n, l, a.f.count - 1)) {
                            l++;
                        }
                    }
                }
            }
            b.cu.count = l;
        }
        tb(a, b) {
            super.tb(a, b);
            if (this.parentSeries == null) {
                return;
            }
            this.parentSeries.ua(this, a, b, runOn(this, this.rm));
            CategoryMarkerManager.e(this, a.m, b.cu, this.ql);
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    ColumnFragment.$t = /*@__PURE__*/ markType(ColumnFragment, 'ColumnFragment', FragmentBase.$);
    ColumnFragment.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ColumnFragment, 'raisePropertyChanged', ['RadiusX:vp:vt', [1, 0], 'RadiusY:vq:vu', [1, 0]]);
    return ColumnFragment;
})();
/**
 * @hidden
 */
export let BarFragment = /*@__PURE__*/ (() => {
    class BarFragment extends ColumnFragment {
        constructor() {
            super();
            this.ab = BarFragment.$;
        }
        get_dg() {
            return true;
        }
        get_d3() {
            return true;
        }
        get_di() {
            return false;
        }
        r3() {
            return 1;
        }
        get barFragmentXAxis() {
            return this.parentSeries != null ? this.parentSeries.xAxis : null;
        }
        get barFragmentYAxis() {
            return this.parentSeries != null ? this.parentSeries.yAxis : null;
        }
        rs() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        get_isVertical() {
            return true;
        }
        f7(a) {
            let b = this.cd != null ? this.cd.s9 : Rect.empty;
            let c = this.b0.bu;
            let d = this.pv(this.b0);
            let e = this.getEffectiveViewport1(this.b0);
            let f = this.rs();
            let g = -1;
            if (f != null && !b.isEmpty && !c.isEmpty) {
                let h = new ScalerParams(0, b, c, f.cg, e);
                let i = f.el(d.top, h);
                let j = f.el(d.bottom, h);
                let k = (a.y - b.top) / b.height;
                let l = i + (k * (j - i));
                if (f.categoryMode != 0) {
                    l -= 0.5;
                }
                g = l;
            }
            return g;
        }
        sd() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.sd();
        }
        vv(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - (a.width / 2);
            let f = d - ((a.height / 2) + b);
            let g = a.height + b * 2;
            let h = a.width;
            return new Rect(0, e, f, h, g);
        }
        pz(a) {
            if (this.rs() == null) {
                return Rect.empty;
            }
            let b = this.pl(a);
            let c = this.b0.bv;
            let d = this.b0.bu;
            let e = this.getEffectiveViewport1(this.b0);
            let f = this.rs();
            let g = new ScalerParams(0, c, d, f.cg, e);
            let h = this.aj(this.rs(), this.rt.f, this.st(this.b0), this.su(this.b0), a, true);
            if (h == null) {
                return Rect.empty;
            }
            let i = h[0];
            let j = h[1];
            let k = Math.abs(b.y - i[0]);
            let l = Math.abs(b.y - j[0]);
            let m = f.k3(c, d, e);
            if (k < l) {
                let n = i[0] - 0.5 * m;
                let o = i[2];
                let p = i[1];
                return new Rect(0, o, n, Math.max(p, o) - Math.min(p, o), m);
            }
            else {
                let q = j[0] - 0.5 * m;
                let r = j[2];
                let s = j[1];
                return new Rect(0, r, q, Math.max(s, r) - Math.min(s, r), m);
            }
        }
        ex(a, b) {
            if (this.e0(a, b)) {
                return true;
            }
            if (this.qk(a, b)) {
                return true;
            }
            return false;
        }
        vg(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = e < 0 ? c[2] : c[1];
            let k = new Rect(0, j - 5, i - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(i) && !isInfinity(j) && !isInfinity(i) && d.tryAdd(k)) {
                b.m.add({ $type: Point_$type, x: j, y: i });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        hv(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.barFragmentYAxis) !== null) {
                b = this.hh(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.hf(a);
            }
            return b >= 0 && this.ck != null && b < this.ck.count ? this.ck.item(b) : null;
        }
        hh(a) {
            let b = this.b0.bv;
            let c = this.b0.bu;
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let d = this.getEffectiveViewport1(this.b0);
            let e = new ScalerParams(0, b, c, this.barFragmentYAxis.cg, d);
            let f = typeCast(ISortingAxis_$type, this.barFragmentYAxis);
            let g = this.pv(this.b0);
            let h = this.barFragmentYAxis.el(g.top, e);
            let i = this.barFragmentYAxis.el(g.bottom, e);
            let j = (a.y - b.top) / b.height;
            let k = h + ((i - h) * j);
            if (truncate(k) <= dateMinValue().getTime() || truncate(k) >= dateMaxValue().getTime()) {
                return -1;
            }
            let l = f.i$f(k);
            return l;
        }
        tu(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.barFragmentXAxis.cg, e);
            if (!c.isEmpty && !d.isEmpty && this.barFragmentXAxis != null) {
                b = this.barFragmentXAxis.ei(0, f);
            }
            return b;
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            if (this.parentSeries == null || this.barFragmentXAxis == null) {
                return;
            }
            let e = this.barFragmentXAxis;
            switch (b) {
                case "ValueColumn":
                    if (this.tl.c3) {
                        this.tl.c2.g$i();
                    }
                    if (e != null && !e.c0()) {
                        this.parentSeries.tl().cr.g(this.fv);
                        this.ml(false);
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    BarFragment.$t = /*@__PURE__*/ markType(BarFragment, 'BarFragment', ColumnFragment.$);
    return BarFragment;
})();
/**
 * @hidden
 */
export let AreaFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class AreaFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = this.i.c0;
            let g = f.parentSeries;
            let h = typeCast(IStacked100Series_$type, g) !== null;
            let i = this.i.c0.valueColumn;
            let j = g.ti;
            let k = g.tj;
            let l = f.logicalSeriesLink.a0;
            let m = f.logicalSeriesLink.az;
            for (let n = b; n <= c; ++n) {
                let o = i.item(n);
                if (isNaN_(o) || isInfinity(o)) {
                    o = 0;
                }
                let p = Math.abs(k[n]) + j[n];
                if (h) {
                    if (p == 0) {
                        o = 0;
                    }
                    else if (o < 0) {
                        o = (l._inner[n] + o) / p * 100;
                    }
                    else {
                        o = (m._inner[n] + o) / p * 100;
                    }
                }
                else {
                    o = o < 0 ? l._inner[n] + o : m._inner[n] + o;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(o)) {
                        d = Math.min(d, o);
                        e = Math.max(e, o);
                    }
                }
                else {
                    d = o;
                    e = o;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    AreaFragmentBucketCalculator.$t = /*@__PURE__*/ markType(AreaFragmentBucketCalculator, 'AreaFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return AreaFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let LineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class LineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(FragmentBase.$, this.i.c0);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.c0.valueColumn.item(h);
                let j = Math.abs(g.tj[h]) + g.ti[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.a0._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.az._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.a0._inner[h] + i : f.logicalSeriesLink.az._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    LineFragmentBucketCalculator.$t = /*@__PURE__*/ markType(LineFragmentBucketCalculator, 'LineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return LineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let SplineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class SplineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(SplineFragmentBase.$, this.i.c0);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.c0.valueColumn.item(h);
                let j = Math.abs(g.tj[h]) + g.ti[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.a0._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.az._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.a0._inner[h] + i : f.logicalSeriesLink.az._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    SplineFragmentBucketCalculator.$t = /*@__PURE__*/ markType(SplineFragmentBucketCalculator, 'SplineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return SplineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = typeCast(StackedSeriesBase.$, this.c.ct);
            let c = Math.min(b.tj != null ? b.tj.length : 0, b.ti != null ? b.ti.length : 0);
            let d = Math.min(a * this.d, c - 1);
            let e = Math.min(d + this.d - 1, c - 1);
            let f = NaN;
            let g = NaN;
            for (let h = d; h <= e; ++h) {
                let i = Math.min(b.tj[h], b.ti[h]);
                let j = Math.max(b.tj[h], b.ti[h]);
                if (!isNaN_(f)) {
                    if (!isNaN_(i)) {
                        f = Math.min(f, i);
                        g = Math.max(g, i);
                    }
                    if (!isNaN_(j)) {
                        f = Math.min(f, j);
                        g = Math.max(g, j);
                    }
                }
                else {
                    f = i;
                    g = j;
                }
            }
            if (!isNaN_(f) && !isNaN_(g)) {
                return [0.5 * (d + e), f, g];
            }
            return [NaN, NaN, NaN];
        }
        getBucket1(a, b, c, d, e, f) {
            return null;
        }
    }
    StackedBucketCalculator.$t = /*@__PURE__*/ markType(StackedBucketCalculator, 'StackedBucketCalculator', CategoryBucketCalculator.$);
    return StackedBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBarBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBarBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        g(a) {
            let b = this.c.bv;
            let c = this.c.bu;
            let d = typeCast(StackedBarSeries.$, this.c.ct);
            let e = this.c.ct.ck;
            if (b.isEmpty || c.isEmpty || d.yAxis == null || e == null || e.count == 0) {
                this.d = 0;
                return;
            }
            let f = d.getEffectiveViewport1(this.c);
            let g = new ScalerParams(0, b, c, d.yAxis.cg, f);
            let h = d.pv(this.c);
            let i = Math.floor(d.yAxis.em(h.top, g, 0));
            let j = Math.ceil(d.yAxis.em(h.bottom, g, 0));
            if (!d.yAxis.cg) {
                j = Math.ceil(d.yAxis.em(h.top, g, 0));
                i = Math.floor(d.yAxis.em(h.bottom, g, 0));
            }
            let k = Math.floor((j - i + 1) * a / h.height);
            this.d = truncate(Math.max(1, k));
            this.e = truncate(Math.max(0, Math.floor(i / this.d) - 1));
            this.f = truncate(Math.ceil(j / this.d));
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(BarFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedBarSeries.$, this.c.ct);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.tj != null ? i.tj.length : 0, i.ti != null ? i.ti.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            if (r <= s) {
                for (let t = r; t <= s; ++t) {
                    j = a.valueColumn.item(t);
                    if (j < k) {
                        o = Math.min(o, h.logicalSeriesLink.a0._inner[t] + j);
                        n = Math.max(n, h.logicalSeriesLink.a0._inner[t]);
                    }
                    else {
                        o = Math.min(o, h.logicalSeriesLink.az._inner[t]);
                        n = Math.max(n, h.logicalSeriesLink.az._inner[t] + j);
                    }
                    if (!isNaN_(l)) {
                        if (!isNaN_(o)) {
                            l = Math.min(l, o);
                            m = Math.max(m, o);
                        }
                        if (!isNaN_(n)) {
                            l = Math.min(l, n);
                            m = Math.max(m, n);
                        }
                    }
                    else {
                        l = o;
                        m = n;
                    }
                }
            }
            let u = new ScalerParams(0, d, e, i.xAxis.cg, p);
            g = [f.f._inner[b - this.e][0], i.xAxis.ei(m, u), i.xAxis.ei(l, u)];
            return g;
        }
    }
    StackedBarBucketCalculator.$t = /*@__PURE__*/ markType(StackedBarBucketCalculator, 'StackedBarBucketCalculator', StackedBucketCalculator.$);
    return StackedBarBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedColumnBucketCalculator = /*@__PURE__*/ (() => {
    class StackedColumnBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(ColumnFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedColumnSeries.$, this.c.ct);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.tj != null ? i.tj.length : 0, i.ti != null ? i.ti.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            if (r <= s) {
                for (let t = r; t <= s; ++t) {
                    j = a.valueColumn.item(t);
                    if (j < k) {
                        o = Math.min(o, h.logicalSeriesLink.a0._inner[t] + j);
                        n = Math.max(n, h.logicalSeriesLink.a0._inner[t]);
                    }
                    else {
                        o = Math.min(o, h.logicalSeriesLink.az._inner[t]);
                        n = Math.max(n, h.logicalSeriesLink.az._inner[t] + j);
                    }
                    if (!isNaN_(l)) {
                        if (!isNaN_(o)) {
                            l = Math.min(l, o);
                            m = Math.max(m, o);
                        }
                        if (!isNaN_(n)) {
                            l = Math.min(l, n);
                            m = Math.max(m, n);
                        }
                    }
                    else {
                        l = o;
                        m = n;
                    }
                }
            }
            let u = new ScalerParams(0, d, e, i.yAxis.cg, p);
            g = [f.f._inner[b - this.e][0], i.yAxis.ei(m, u), i.yAxis.ei(l, u)];
            return g;
        }
    }
    StackedColumnBucketCalculator.$t = /*@__PURE__*/ markType(StackedColumnBucketCalculator, 'StackedColumnBucketCalculator', StackedBucketCalculator.$);
    return StackedColumnBucketCalculator;
})();
/**
 * @hidden
 */
export let FragmentBaseValueList = /*@__PURE__*/ (() => {
    class FragmentBaseValueList extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                let b = false;
                if (this.a.parentSeries != null) {
                    b = this.a.parentSeries.tt;
                }
                let c = this.a.parentSeries;
                if (c == null) {
                    return NaN;
                }
                if (c.tj == null || c.ti == null || c.tj.length == 0 || c.ti.length == 0) {
                    return NaN;
                }
                let d = this.a.valueColumn.item(a);
                let e = Math.abs(c.tj[a]) + c.ti[a];
                let f = this.a.logicalSeriesLink.az;
                let g = this.a.logicalSeriesLink.a0;
                if (isNaN_(d) || isInfinity(d)) {
                    d = 0;
                }
                if (b) {
                    if (e == 0) {
                        d = 0;
                    }
                    else if (d < 0) {
                        d = (g._inner[a] + d) / e * 100;
                    }
                    else {
                        d = (f._inner[a] + d) / e * 100;
                    }
                }
                else {
                    d = d < 0 ? g._inner[a] + d : f._inner[a] + d;
                }
                return d;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            return this.a.valueColumn.count;
        }
        get isReadOnly() {
            throw new NotImplementedException(0);
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            return this.getEnumerator();
        }
    }
    FragmentBaseValueList.$t = /*@__PURE__*/ markType(FragmentBaseValueList, 'FragmentBaseValueList', Base.$, [/*@__PURE__*/ IList$1_$type.specialize(Number_$type)]);
    return FragmentBaseValueList;
})();
/**
 * @hidden
 */
export let LineFragment = /*@__PURE__*/ (() => {
    class LineFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = LineFragment.$;
        }
        get_d2() {
            return true;
        }
        bx() {
            return new LineFragmentView(this);
        }
        l2(a) {
            super.l2(a);
            this.vl = a;
        }
        vn(a, b) {
            let c = this.vl.df.ak;
            if (this.ez(a, c)) {
                return true;
            }
            return false;
        }
        get_de() {
            return true;
        }
        ex(a, b) {
            if (this.vm(a, b)) {
                return true;
            }
            if (this.vn(a, b)) {
                return true;
            }
            if (this.qk(a, b)) {
                return true;
            }
            return false;
        }
        vm(a, b) {
            let c = this.vl.dg.ak;
            if (this.ey(a, b, c)) {
                return true;
            }
            let d = this.vl.dh.ak;
            if (this.ey(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        k0(a, b) {
            super.k0(a, b);
            let c = b;
            c.db();
        }
        tb(a, b) {
            super.tb(a, b);
            let c = (d) => a.f._inner[d][0];
            let d = (e) => a.f._inner[e][1];
            let e = (f) => a.f._inner[f][0];
            let f = (g) => a.f._inner[g][2];
            this.vc.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let g = b.cr.d;
            let h = typeCast(LineFragmentView.$, b);
            let i = this.getEffectiveViewport1(b);
            let j = a.f;
            this.r1.a0(this, this.sl(), runOn(this, this.rm), this.st(b), this.su(b));
            let k = false;
            let l = this.r1.b;
            if (l != null) {
                k = true;
            }
            if (k) {
                let m = new ScalerParams(0, b.bv, b.bu, this.us.cg, i);
                this.s7(j, -1, this.valueColumn.count, this.us, m, b.q);
            }
            this.r1.ad(h.dg, true, false, true, false);
            this.r1.ad(h.dh, true, false, true, false);
            this.r1.ad(h.df, false, true, false, false);
            h.df._opacity = 0.75 * this.r1.j;
            this.vc.m(h.dg, h.df, h.dh, a.f.count, a.f, true, 0, this.tj(a.f, a.f.count - 1, b.bu, b.bv), g, this.fv);
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    LineFragment.$t = /*@__PURE__*/ markType(LineFragment, 'LineFragment', FragmentBase.$);
    return LineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBase = /*@__PURE__*/ (() => {
    class SplineFragmentBase extends SplineSeriesBase {
        constructor() {
            super();
            this._logicalSeriesLink = null;
            this.vv = null;
            this.vx = null;
            this.vv = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.vx;
        }
        set parentSeries(a) {
            this.vx = a;
        }
        get_dp() {
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get_dv() {
            return true;
        }
        jr() {
            if (this.logicalSeriesLink != null) {
                return this.logicalSeriesLink.d8;
            }
            return null;
        }
        pq(a, b, c) {
            return this.ps(a, b, c, this.ry.r(this.rs(), this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0)), this.sd(), this.rs(), runOn(this, this.vz), (d, e) => this.hm(d, e, this.rs(), runOn(this, this.sr), new SplineFragmentBaseValueList(this)), (d, e) => this.hk(d, e, this.rs(), runOn(this, this.sr), new SplineFragmentBaseValueList(this)));
        }
        ag() {
            return [this.rs(), this.sd()];
        }
        vz(a, b, c) {
            if (this.cd == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.b0);
            let e = new ScalerParams(0, this.cd.s9, this.b0.bu, this.rs().cg, d);
            let f = this.ry.r(this.rs(), this.cd.s9, this.b0.bu, d);
            return this.gn(new SplineFragmentBaseValueList(this), a, this.rs(), e, f, runOn(this, this.sr), b, c);
        }
        he() {
            let a = this.parentSeries;
            if (a.index == -1 || a.tq == null || a.tq.f.indexOf(this) == -1) {
                return -1;
            }
            return a.tq.f.indexOf(this);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.tu) {
                return -1 + a.index + a.tm.count - a.tq.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        hi() {
            let a = this.parentSeries;
            if (a.index == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        bf() {
            return this.parentSeries;
        }
        vh(a, b, c, d, e, f, g) {
            let h = b[0];
            let i = b[1];
            let j = new Rect(0, h - 5, i - 5, 11, 11);
            if (!isNaN_(h) && !isNaN_(i) && !isInfinity(h) && !isInfinity(i) && c.tryAdd(j)) {
                a.m.add({ $type: Point_$type, x: h, y: i });
                let k = f.cu.item(e);
                k.content.item = this.ck.item(d);
                k.al = g;
                return true;
            }
            return false;
        }
        fb(a, b, c) {
            let d = super.fb(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.ck == null || e.bh == null || f.bh == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        ap(a) {
            return null;
        }
        v0(a, b, c, d, e, f) {
            let g = typeCast(ISortingAxis_$type, d);
            if (g == null) {
                return;
            }
            let h = this.getEffectiveViewport1(f);
            let i = new ScalerParams(0, b, c, d.cg, h);
            let j = new ScalerParams(0, b, c, e.cg, h);
            let k = d.el(2, i) - d.el(1, i);
            let l = this.qj();
            let m = 0;
            let n = this.vl(d, b, c, h);
            let o = (p) => Math.abs(this.parentSeries.tj[p]) + this.parentSeries.ti[p];
            let p = (q) => q;
            let q = (r) => {
                let s = g.i$b._inner[r];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(s) < 0 ? (this.logicalSeriesLink.a0._inner[s] + this.valueColumn.item(s)) / o(s) * 100 : (this.logicalSeriesLink.az._inner[s] + this.valueColumn.item(s)) / o(s) * 100;
                }
                else {
                    return this.valueColumn.item(s) < 0 ? this.logicalSeriesLink.a0._inner[s] + this.valueColumn.item(s) : this.logicalSeriesLink.az._inner[s] + this.valueColumn.item(s);
                }
            };
            let r = this.r2.cr.f;
            let s = this.r2.cr.e;
            let t = truncate(Math.ceil(c.width / (r - s)));
            let u = new CollisionAvoider();
            let v = this.r2.cr.d;
            if (v <= 0 || (s <= 0 && r <= 0)) {
                this.r2.cu.count = m;
                return;
            }
            let w = 0;
            for (let x = s; x < r + 1; ++x) {
                let y = null;
                let z = x * v;
                if (g != null && g.i$b != null && z >= 0 && z < g.i$b.count) {
                    z = g.i$b._inner[z];
                }
                if (x >= (this.valueColumn.count - 1)) {
                    if (l && this.vh(a, a.f._inner[a.f.count - 1], u, Math.min(z, this.ck.count - 1), m, f, w - 1)) {
                        ++m;
                    }
                    break;
                }
                let aa = p(x);
                let ab = q(x);
                let ac = p(x + 1);
                let ad = q(x + 1);
                let ae = ac - aa;
                let af = this.vd[x];
                let ag = this.vd[x + 1];
                let ah = g.i$d(g.i$b._inner[x]);
                let ai = d.ei(ah, i) + n;
                let aj = e.ei(ab, j);
                a.f.add([ai, aj, aj]);
                w++;
                for (let ak = 1; ak < t; ++ak) {
                    let al = ak / t;
                    let am = aa + ae * al;
                    let an = (ac - am) / ae;
                    let ao = (am - aa) / ae;
                    let ap = an * ab + ao * ad + ((an * an * an - an) * af + (ao * ao * ao - ao) * ag) * (ae * ae) / 6;
                    let aq = g.i$d(g.i$b._inner[x]);
                    let ar = g.i$d(g.i$b._inner[x + 1]);
                    if (aq == ar && ab == ad) {
                        break;
                    }
                    let as = aq + (ar - aq) * al;
                    am = d.ei(as, i) + n;
                    ap = e.ei(ap, j);
                    a.f.add([am, ap, ap]);
                    w++;
                }
                if (l) {
                    y = [ai, aj, aj];
                }
                if (l && this.vh(a, y, u, Math.min(z, this.ck.count - 1), m, f, w - 1)) {
                    ++m;
                }
            }
            this.r2.cu.count = m;
        }
        s8(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.a0.count == 0 || this.logicalSeriesLink.az.count == 0) {
                return;
            }
            if (this.r2.cr.d == 0) {
                return;
            }
            super.s8(a, b);
            if (a.f.count <= 1) {
                return;
            }
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis());
            let h = new ScalerParams(0, c, d, f.cg, e);
            let i = new ScalerParams(0, c, d, g.cg, e);
            a.f.clear();
            a.m.clear();
            let j = this.qj();
            let k = 0;
            let l;
            let m;
            if (b.p) {
                l = this.parentSeries.tk;
                m = this.parentSeries.a6.a$h.item(b.ad);
            }
            else if (b == this.bz) {
                l = this.parentSeries.rw;
                m = typeCast(CategorySeriesView.$, this.parentSeries.bz);
            }
            else {
                l = this.parentSeries.rt;
                m = this.parentSeries.r2;
            }
            let n = m.cr.d;
            let o = typeCast(ISortingAxis_$type, f);
            if (o != null && o.i$b.count != this.ck.count) {
                return;
            }
            let p = this.preferredCategoryMode(f);
            if (p == 0 && f.categoryMode != 0) {
                p = 1;
            }
            let q = 0;
            switch (p) {
                case 0:
                    q = 0;
                    break;
                case 1:
                    q = 0.5 * f.getCategorySize(c, d, e);
                    break;
                case 2:
                    let r = this.index;
                    q = f.getGroupCenter(this.index, c, d, e);
                    break;
            }
            if (f.cg) {
                q = -q;
            }
            let s = (t) => Math.abs(this.parentSeries.tj[t]) + this.parentSeries.ti[t];
            let t = (u) => u;
            let u = (v) => {
                let w = this.valueColumn.item(v);
                if (isNaN_(w) || isInfinity(w)) {
                    w = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (s(v) == 0) {
                        return 0;
                    }
                    return w < 0 ? (this.logicalSeriesLink.a0._inner[v] + w) / s(v) * 100 : (this.logicalSeriesLink.az._inner[v] + w) / s(v) * 100;
                }
                return w < 0 ? this.logicalSeriesLink.a0._inner[v] + w : this.logicalSeriesLink.az._inner[v] + w;
            };
            let v = b.cr.d;
            this.vq(b);
            let w = m.cr.e;
            let x = m.cr.f;
            let y = truncate(Math.ceil(d.width / (x - w)));
            let z = new CollisionAvoider();
            if (o != null) {
                this.v0(a, c, d, f, g, b);
                return;
            }
            let aa = 0;
            let ab = 0;
            for (let ac = w; ac < x + 1; ++ac) {
                if (ac >= this.valueColumn.count) {
                    break;
                }
                let ad = null;
                if (v == 1) {
                    if (ac >= (this.valueColumn.count - 1)) {
                        if (j && a.f.count > 0 && this.vh(a, a.f._inner[a.f.count - 1], z, Math.min(ac * v, this.ck.count - 1), k, b, aa - 1)) {
                            ++k;
                        }
                        break;
                    }
                    let ae = t(ac);
                    let af = t(ac + 1);
                    let ag = u(ac);
                    let ah = u(ac + 1);
                    let ai = af - ae;
                    let aj = this.vd[ac];
                    let ak = this.vd[ac + 1];
                    let al = f.ei(ae, h) + q;
                    let am = g.ei(ag, i);
                    a.f.add([al, am, am]);
                    aa++;
                    ab = aa;
                    for (let an = 1; an < y; ++an) {
                        let ao = ae + ai * an / y;
                        let ap = (af - ao) / ai;
                        let aq = (ao - ae) / ai;
                        let ar = ap * ag + aq * ah + ((ap * ap * ap - ap) * aj + (aq * aq * aq - aq) * ak) * (ai * ai) / 6;
                        ao = f.ei(ao, h) + q;
                        ar = g.ei(ar, i);
                        a.f.add([ao, ar, ar]);
                        aa++;
                    }
                    if (j) {
                        ad = [al, am, am];
                    }
                }
                else {
                    ad = b.cr.getBucket(ac);
                    if (!isNaN_(ad[0])) {
                        ad[0] = f.ei(ad[0], h) + q;
                        ad[1] = g.ei(ad[1], i);
                        ad[2] = g.ei(ad[2], i);
                        a.f.add(ad);
                        aa++;
                        ab = aa;
                    }
                }
                if (j && this.vh(a, ad, z, Math.min(ac * v, this.ck.count - 1), k, b, ab - 1)) {
                    ++k;
                }
            }
            b.cu.count = k;
        }
        vb(a) {
            let b = (c) => Math.abs(this.parentSeries.tj[c]) + this.parentSeries.ti[c];
            let c = (d) => d;
            let d = (e) => {
                let f = this.valueColumn.item(e);
                if (isNaN_(f) || isInfinity(f)) {
                    f = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (b(e) == 0) {
                        return 0;
                    }
                    return f < 0 ? (this.logicalSeriesLink.a0._inner[e] + f) / b(e) * 100 : (this.logicalSeriesLink.az._inner[e] + f) / b(e) * 100;
                }
                return f < 0 ? this.logicalSeriesLink.a0._inner[e] + f : this.logicalSeriesLink.az._inner[e] + f;
            };
            let e = new List$1(Array_$type, 0);
            let f = a.bv;
            let g = a.bu;
            let h = typeCast(ISortingAxis_$type, this.us);
            let i = 0;
            let j = 0;
            let k = 0;
            let l = this.fv;
            let m = this.pv(this.b0);
            let n = this.us;
            let o = this.getEffectiveViewport1(a);
            if (h == null || h.i$b == null) {
                let p = new ScalerParams(0, f, g, n.cg, o);
                let q = 0;
                let r = n.lf - 1;
                let s = Math.floor((r - q + 1) * l / m.width);
                i = truncate(Math.max(1, s));
                j = truncate(Math.max(0, Math.floor(q / i) - 1));
                k = truncate(Math.ceil(r / i));
            }
            else {
                j = 0;
                k = n.lf - 1;
                i = 1;
            }
            let t = truncate(Math.ceil(g.width / (k - j)));
            let u = new CollisionAvoider();
            if (h != null) {
                return this.vc(a);
            }
            let v = 0;
            let w = 0;
            for (let x = j; x < k + 1; ++x) {
                if (x >= this.valueColumn.count) {
                    break;
                }
                let y = null;
                if (i == 1) {
                    if (x >= (this.valueColumn.count - 1)) {
                        break;
                    }
                    let z = c(x);
                    let aa = c(x + 1);
                    let ab = d(x);
                    let ac = d(x + 1);
                    let ad = aa - z;
                    let ae = this.vd[x];
                    let af = this.vd[x + 1];
                    e.add([ab, ab]);
                    for (let ag = 1; ag < t; ++ag) {
                        let ah = z + ad * ag / t;
                        let ai = (aa - ah) / ad;
                        let aj = (ah - z) / ad;
                        let ak = ai * ab + aj * ac + ((ai * ai * ai - ai) * ae + (aj * aj * aj - aj) * af) * (ad * ad) / 6;
                        e.add([ak, ak]);
                    }
                }
                else {
                    y = a.cr.getBucket(x);
                    if (!isNaN_(y[0])) {
                        e.add([y[0], y[1]]);
                    }
                }
            }
            return e.toArray();
        }
        vc(a) {
            let b = new List$1(Array_$type, 0);
            let c = a.bv;
            let d = a.bu;
            let e = this.us;
            let f = typeCast(ISortingAxis_$type, e);
            if (f == null) {
                return null;
            }
            let g = this.getEffectiveViewport1(a);
            let h = this.qj();
            let i = 0;
            let j = (k) => Math.abs(this.parentSeries.tj[k]) + this.parentSeries.ti[k];
            let k = (l) => l;
            let l = (m) => {
                let n = f.i$b._inner[m];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(n) < 0 ? (this.logicalSeriesLink.a0._inner[n] + this.valueColumn.item(n)) / j(n) * 100 : (this.logicalSeriesLink.az._inner[n] + this.valueColumn.item(n)) / j(n) * 100;
                }
                else {
                    return this.valueColumn.item(n) < 0 ? this.logicalSeriesLink.a0._inner[n] + this.valueColumn.item(n) : this.logicalSeriesLink.az._inner[n] + this.valueColumn.item(n);
                }
            };
            let m = 0;
            let n = 0;
            let o = 0;
            let p = this.fv;
            let q = this.pv(this.b0);
            if (f == null || f.i$b == null) {
                let r = 0;
                let s = e.lf - 1;
                let t = Math.floor((s - r + 1) * p / q.width);
                m = truncate(Math.max(1, t));
                n = truncate(Math.max(0, Math.floor(r / m) - 1));
                o = truncate(Math.ceil(s / m));
            }
            else {
                n = 0;
                o = e.lf - 1;
                m = 1;
            }
            if (m <= 0 || (n <= 0 && o <= 0)) {
                this.r2.cu.count = i;
                return null;
            }
            let u = truncate(Math.ceil(d.width / (o - n)));
            let v = new CollisionAvoider();
            let w = 0;
            for (let x = n; x < o + 1; ++x) {
                let y = null;
                if (x >= (this.valueColumn.count - 1)) {
                    break;
                }
                let z = k(x);
                let aa = l(x);
                let ab = k(x + 1);
                let ac = l(x + 1);
                let ad = ab - z;
                let ae = this.vd[x];
                let af = this.vd[x + 1];
                b.add([aa, aa]);
                for (let ag = 1; ag < u; ++ag) {
                    let ah = ag / u;
                    let ai = z + ad * ah;
                    let aj = (ab - ai) / ad;
                    let ak = (ai - z) / ad;
                    let al = aj * aa + ak * ac + ((aj * aj * aj - aj) * ae + (ak * ak * ak - ak) * af) * (ad * ad) / 6;
                    b.add([al, al]);
                }
            }
            return b.toArray();
        }
        vq(a) {
            super.vq(a);
            let b = (c) => Math.abs(this.parentSeries.tj[c]) + this.parentSeries.ti[c];
            let c = (d) => d;
            let d = (e) => {
                let f = this.valueColumn.item(e);
                if (isNaN_(f) || isInfinity(f)) {
                    f = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (b(e) == 0) {
                        return 0;
                    }
                    return f < 0 ? (this.logicalSeriesLink.a0._inner[e] + f) / b(e) * 100 : (this.logicalSeriesLink.az._inner[e] + f) / b(e) * 100;
                }
                return f < 0 ? this.logicalSeriesLink.a0._inner[e] + f : this.logicalSeriesLink.az._inner[e] + f;
            };
            let e = this.us;
            let f = this.vf == 0 ? NaN : 0;
            if (e != null && typeCast(ISortingAxis_$type, e) !== null && e.i$b != null) {
                let g = new SafeSortedReadOnlyDoubleCollection(0, this.valueColumn, e.i$b);
                d = (h) => g.item(h);
            }
            this.vd = Numeric.c(this.valueColumn.count, c, d, f, f);
            if (this.vg) {
                let h = -1.7976931348623157E+308;
                let i = 1.7976931348623157E+308;
                let j = this.vb(a);
                if (j == null) {
                    return;
                }
                for (let k = 0; k < j.length; k++) {
                    if (isNaN_(j[k][0]) || isNaN_(j[k][1])) {
                        continue;
                    }
                    if (j[k][1] > h) {
                        h = j[k][1];
                    }
                    if (j[k][0] < i) {
                        i = j[k][0];
                    }
                }
                this.vn = i;
                this.vm = h;
            }
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.jf = this.o3;
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    SplineFragmentBase.$t = /*@__PURE__*/ markType(SplineFragmentBase, 'SplineFragmentBase', SplineSeriesBase.$);
    return SplineFragmentBase;
})();
/**
 * @hidden
 */
export let SplineAreaFragment = /*@__PURE__*/ (() => {
    class SplineAreaFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.v5 = null;
            this.ab = SplineAreaFragment.$;
        }
        bx() {
            return new SplineAreaFragmentView(this);
        }
        l2(a) {
            super.l2(a);
            this.v1 = typeCast(SplineAreaFragmentView.$, a);
        }
        ac() {
            super.ac();
            this.ml(false);
        }
        get_de() {
            return true;
        }
        get_dd() {
            return true;
        }
        get_eh() {
            return true;
        }
        r3() {
            return 1;
        }
        v3(a, b) {
            let c = this.v1.di.ak;
            if (this.ez(a, c)) {
                return true;
            }
            let d = this.v1.dj.ak;
            if (this.ez(a, d)) {
                return true;
            }
            return false;
        }
        ex(a, b) {
            if (this.v2(a, b)) {
                return true;
            }
            if (this.v3(a, b)) {
                return true;
            }
            if (this.qk(a, b)) {
                return true;
            }
            return false;
        }
        v2(a, b) {
            let c = this.v1.dk.ak;
            if (this.ey(a, b, c)) {
                return true;
            }
            let d = this.v1.dl.ak;
            if (this.ey(a, b, d)) {
                return true;
            }
            return false;
        }
        k0(a, b) {
            super.k0(a, b);
            let c = b;
            c.dd();
        }
        tb(a, b) {
            super.tb(a, b);
            this.vv.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = a.f;
            let d = this.getEffectiveViewport1(b);
            this.r1.a0(this, this.sl(), runOn(this, this.rm), this.st(b), this.su(b));
            let e = false;
            let f = this.r1.b;
            if (f != null) {
                e = true;
            }
            if (e) {
                let g = new ScalerParams(0, b.bv, b.bu, this.us.cg, d);
                this.s7(c, -1, this.valueColumn.count, this.us, g, b.q);
            }
            let h = typeCast(SplineAreaFragmentView.$, b);
            let i = b.cr.d;
            this.r1.ad(h.dk, true, false, true, true);
            this.r1.ad(h.dl, true, false, true, true);
            this.r1.ad(h.di, false, true, false, false);
            this.r1.ad(h.dj, false, true, false, false);
            h.di._opacity = this.r1.j * this.fs;
            h.dj._opacity = 0.5 * this.r1.j * this.fs;
            this.vv.i(h.di, h.dk, h.dj, h.dl, a.f.count, a.f, true, i, this.fv, (j, k, l, m, n) => this.v4(j, a.f, b), 1);
        }
        mn(a, b) {
            super.mn(a, b);
        }
        v4(a, b, c) {
            let d = this.tu(c);
            let e = d;
            let f = this.logicalSeriesLink.at;
            let g = f ? this.parentSeries.tq.e : this.parentSeries.tq.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(SplineFragmentBase.$, g._inner[j - 1]);
                if (k != null && k.vv != null && k.vv.o.count > 0 && this.b0 != null && k.fb(this.b0.bu, this.b0.bv, this.b0)) {
                    i = true;
                    for (let l = k.vv.o.count - 1; l >= 0; l--) {
                        a.add(k.vv.o._inner[l]);
                    }
                }
            }
        }
        tu(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.yAxis.cg, e);
            if (!c.isEmpty && !d.isEmpty && this.yAxis != null) {
                b = this.yAxis.ei(0, f);
            }
            return b;
        }
        mw() {
            let a = (typeCast(XamDataChart.$, this.cd));
            if (a != null) {
                this.fs = isNaN_(this.f1) ? this.parentSeries.fs : this.f1;
            }
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    SplineAreaFragment.$t = /*@__PURE__*/ markType(SplineAreaFragment, 'SplineAreaFragment', SplineFragmentBase.$);
    return SplineAreaFragment;
})();
/**
 * @hidden
 */
export let SplineFragment = /*@__PURE__*/ (() => {
    class SplineFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.ab = SplineFragment.$;
        }
        get_eh() {
            return true;
        }
        bx() {
            return new SplineFragmentView(this);
        }
        l2(a) {
            super.l2(a);
            this.v1 = a;
        }
        v3(a, b) {
            let c = this.v1.dh.ak;
            if (this.ez(a, c)) {
                return true;
            }
            return false;
        }
        get_de() {
            return true;
        }
        ex(a, b) {
            if (this.v2(a, b)) {
                return true;
            }
            if (this.v3(a, b)) {
                return true;
            }
            if (this.qk(a, b)) {
                return true;
            }
            return false;
        }
        v2(a, b) {
            let c = this.v1.di.ak;
            if (this.ey(a, b, c)) {
                return true;
            }
            let d = this.v1.dj.ak;
            if (this.ey(a, b, d)) {
                return true;
            }
            return false;
        }
        k0(a, b) {
            super.k0(a, b);
            let c = b;
            c.dd();
        }
        tb(a, b) {
            super.tb(a, b);
            this.vv.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(SplineFragmentView.$, b);
            let d = a.f;
            let e = this.getEffectiveViewport1(b);
            this.r1.a0(this, this.sl(), runOn(this, this.rm), this.st(b), this.su(b));
            let f = false;
            let g = this.r1.b;
            if (g != null) {
                f = true;
            }
            if (f) {
                let h = new ScalerParams(0, b.bv, b.bu, this.us.cg, e);
                this.s7(d, -1, this.valueColumn.count, this.us, h, b.q);
            }
            this.r1.ad(c.di, true, false, true, false);
            this.r1.ad(c.dj, true, false, true, false);
            this.r1.ad(c.dh, false, true, false, false);
            c.dh._opacity = 0.75 * this.r1.j;
            let i = c.cr.d;
            this.vv.m(c.di, c.dh, c.dj, a.f.count, a.f, true, 1, this.tj(a.f, a.f.count - 1, b.bu, b.bv), i, this.fv);
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    SplineFragment.$t = /*@__PURE__*/ markType(SplineFragment, 'SplineFragment', SplineFragmentBase.$);
    return SplineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBaseValueList = /*@__PURE__*/ (() => {
    class SplineFragmentBaseValueList extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                let b = false;
                if (this.a.parentSeries != null) {
                    b = this.a.parentSeries.tt;
                }
                let c = this.a.parentSeries;
                if (c == null) {
                    return NaN;
                }
                let d = this.a.valueColumn.item(a);
                let e = Math.abs(c.tj[a]) + c.ti[a];
                let f = this.a.logicalSeriesLink.az;
                let g = this.a.logicalSeriesLink.a0;
                if (isNaN_(d) || isInfinity(d)) {
                    d = 0;
                }
                if (b) {
                    if (e == 0) {
                        d = 0;
                    }
                    else if (d < 0) {
                        d = (g._inner[a] + d) / e * 100;
                    }
                    else {
                        d = (f._inner[a] + d) / e * 100;
                    }
                }
                else {
                    d = d < 0 ? g._inner[a] + d : f._inner[a] + d;
                }
                return d;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            return this.a.valueColumn.count;
        }
        get isReadOnly() {
            throw new NotImplementedException(0);
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            return this.getEnumerator();
        }
    }
    SplineFragmentBaseValueList.$t = /*@__PURE__*/ markType(SplineFragmentBaseValueList, 'SplineFragmentBaseValueList', Base.$, [/*@__PURE__*/ IList$1_$type.specialize(Number_$type)]);
    return SplineFragmentBaseValueList;
})();
/**
 * @hidden
 */
export let StackedSeriesBase = /*@__PURE__*/ (() => {
    class StackedSeriesBase extends CategorySeries {
        constructor() {
            super();
            this._series = null;
            this.seriesCreated = null;
            this.t0 = 0;
            this.tz = 0;
            this.ti = null;
            this.tj = null;
            this.tq = null;
            this.tn = null;
            this.tw = new Dictionary$2(String_$type, Boolean_$type, 0);
            this.tk = null;
            this.series = new StackedSeriesCollection();
            let a = this.series;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.uc));
            let b = this.series;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.ub));
            this.ry = new StackedSeriesFramePreparer(1, this, this.tr, this, this, this.tr.cr);
            this.tq = new StackedSeriesManager(this);
            this.tn = new StackedSeriesCollection();
            let c = this.tn;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.ub));
            let d = this.tn;
            d.collectionResetting = delegateCombine(d.collectionResetting, runOn(this, this.t6));
        }
        ln() {
            for (let a of fromEnum(this.tm)) {
                a.fx();
            }
            super.ln();
        }
        get_dy() {
            return false;
        }
        getHostReferenceValue() {
            return this.ge();
        }
        bx() {
            return new StackedSeriesView(this);
        }
        l2(a) {
            super.l2(a);
            this.tr = a;
        }
        l3(a, b) {
            super.l3(a, b);
            for (let c of fromEnum(this.series)) {
                c.visualSeriesLink.b0.bu = b;
            }
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        hn() {
            if (this.series == null) {
                return -1;
            }
            return this.series.count;
        }
        ld(a) {
            for (let b = 0; b < this.tq.f.count; b++) {
                let c = this.tq.f._inner[b];
                if (!a(c)) {
                    break;
                }
            }
        }
        get_isStacked() {
            return true;
        }
        get tm() {
            return this.ts ? this.tn : this.series;
        }
        t6(a, b) {
            for (let c of fromEnum(this.tn)) {
                if (this.tq != null && this.tq.c.contains(c)) {
                    c.parentSeries = null;
                    this.tq.c.remove(c);
                }
            }
        }
        uc(a, b) {
            for (let c of fromEnum(this.series)) {
                if (this.tq != null && this.tq.c.contains(c)) {
                    c.parentSeries = null;
                    this.tq.c.remove(c);
                }
            }
        }
        ub(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (this.tq != null && this.tq.c.contains(c)) {
                        c.parentSeries = null;
                        this.tq.c.remove(c);
                    }
                }
            }
            if (b.newItems != null) {
                let d = b.newStartingIndex;
                for (let e of fromEn(b.newItems)) {
                    if (this.tq != null && !this.tq.c.contains(e)) {
                        e.parentSeries = this;
                        e.fh();
                        e.f4();
                        e.f5();
                        e.gi();
                        e.f6();
                        e.f7();
                        e.fc();
                        e.fd();
                        e.fg();
                        e.fe();
                        e.ff();
                        e.fi();
                        e.fo();
                        e.fp();
                        e.fq();
                        e.fv();
                        e.fx();
                        e.fr();
                        e.ft();
                        e.fu();
                        e.fv();
                        e.fw();
                        e.fy();
                        e.fz();
                        e.f0();
                        e.fb();
                        e.f2();
                        e.f3();
                        e.f8();
                        e.f9();
                        e.ga();
                        e.fs();
                        e.f1();
                        e.gb();
                        e.gc();
                        e.fk();
                        e.gg();
                        e.gd();
                        e.gf();
                        e.gh();
                        e.gj();
                        if (!this.ts) {
                            this.tq.c.insert(d, e);
                            d++;
                        }
                    }
                }
            }
            if (!this.ts) {
                this.ud();
            }
        }
        mt(a) {
            this.cb.cu.c8(a, true, false);
        }
        rz(a) {
            if (a != null && a.q) {
                if (a.p) {
                    return new StackedSeriesFramePreparer(1, typeCast(IIsCategoryBased_$type, this), typeCast(ISupportsMarkers_$type, a), a, this, a.cr);
                }
                else {
                    let b = typeCast(CategorySeriesView.$, this.bz);
                    return new StackedSeriesFramePreparer(1, this, typeCast(ISupportsMarkers_$type, b), this.cd.cu.o, this, b.cr);
                }
            }
            else {
                return this.ry;
            }
        }
        s8(a, b) {
            a.u();
            this.t9();
            this.rz(b).d(a, b);
        }
        mm(a) {
            super.mm(a);
            this.tq.h(a);
        }
        k0(a, b) {
            super.k0(a, b);
            for (let c of fromEnum(this.tm)) {
                if (c.visualSeriesLink != null) {
                    c.visualSeriesLink.k0(a, c.visualSeriesLink.b0);
                }
            }
        }
        t7() {
            this.t9();
        }
        ud() {
            let a = this.fetchXAxis();
            if (a != null) {
                a.c1(true);
            }
            let b = this.fetchYAxis();
            if (b != null) {
                b.c1(true);
            }
        }
        get_tt() {
            return false;
        }
        get tt() {
            return this.get_tt();
        }
        eo(a) {
            let b = this.ck != null ? this.ck.indexOf(a) : -1;
            let c = this.cd != null ? this.cd.s9 : Rect.empty;
            c = c.copy();
            let d = this.b0.bu;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.px(this.b0);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                let g = this.fetchXAxis();
                if (g != null) {
                    let h = new ScalerParams(0, e, e, g.cg, f);
                    let i = g.ei(b, h);
                    if (i < c.left + 0.1 * c.width) {
                        i = i + 0.4 * c.width;
                    }
                    if (i > c.right - 0.1 * c.width) {
                        i = i - 0.4 * c.width;
                    }
                    c.x = i - 0.5 * c.width;
                }
                let j = this.fetchYAxis();
                if (j != null && this.ti != null && b < this.ti.length) {
                    let k = new ScalerParams(0, e, e, j.cg, f);
                    let l = j.ei(this.ti[b], k);
                    let m = j.ei(this.tj[b], k);
                    if (!isNaN_(l) && !isNaN_(m)) {
                        let n = Math.abs(m - l);
                        if (c.height < n) {
                            c.height = n;
                            c.y = Math.min(m, l);
                        }
                        else {
                            if (m < c.top + 0.1 * c.height) {
                                m = m + 0.4 * c.height;
                            }
                            if (m > c.bottom - 0.1 * c.height) {
                                m = m - 0.4 * c.height;
                            }
                            c.y = m - 0.5 * c.height;
                        }
                    }
                }
                this.b8.au(this.cd, c, true);
            }
            return b >= 0;
        }
        ap(a) {
            if (this.tj == null || this.tj.length == 0 || this.ti == null || this.ti.length == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                let b = Math.min(this.tj.length, this.ti.length);
                return new AxisRange(0, b - 1);
            }
            if (a == this.fetchYAxis()) {
                return new AxisRange(this.t0, this.tz);
            }
            return null;
        }
        qj() {
            return false;
        }
        k3(a, b, c, d) {
            this.t9();
            this.sn();
            this.ml(true);
        }
        tl() {
            return this.tr;
        }
        tx() {
            let a = 0;
            let b = this.b0.bv;
            let c = this.b0.bu;
            let d = this.getEffectiveViewport1(this.b0);
            let e = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!b.isEmpty && !c.isEmpty && e != null) {
                let f = new ScalerParams(0, b, c, e.cg, d);
                a = e.ei(e.l5, f);
            }
            return a;
        }
        ty() {
            let a = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (a != null) {
                return a.l5;
            }
            return 0;
        }
        t2(a) {
            return this.index < 0 || this.tm == null || this.tm.count == 0 ? -1 : this.index + this.tm.indexOf(a);
        }
        t1(a) {
            let b = this.cd != null ? this.cd.s9 : Rect.empty;
            let c = this.b0.bu;
            let d = this.getEffectiveViewport1(this.b0);
            let e = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let f = -1;
            if (e != null && !b.isEmpty && !c.isEmpty) {
                let g = new ScalerParams(0, b, c, e.cg, d);
                let h = this.pv(this.b0);
                let i = e.el(h.left, g);
                let j = e.el(h.right, g);
                let k = (a.x - b.left) / b.width;
                let l = i + (k * (j - i));
                if (e.categoryMode != 0) {
                    l -= 0.5;
                }
                let m = truncate(Math.round(l));
                f = m;
            }
            return f;
        }
        tv(a, b, c, d) {
            let e = true;
            let f = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!d.o() || c.isEmpty || b.isEmpty || f == null || f.itemsSource == null || g == null || this.ck == null || f.bh == null || g.bh == null || g.lv == g.lu) {
                e = false;
            }
            let h = d;
            let i = h.cr.d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || i < 1 || a._visibility != 0) {
                e = false;
            }
            return e;
        }
        t8() {
            if (this.cd == null || this.tq == null) {
                return;
            }
            if (!this.ts) {
                this.tn.clear();
                for (let a of fromEnum(this.series)) {
                    if (!this.tq.c.contains(a)) {
                        this.tq.c.add(a);
                    }
                }
                this.ud();
                return;
            }
        }
        tb(a, b) {
            super.tb(a, b);
        }
        ua(a, b, c, d) {
        }
        aq(a) {
            if (a.isEmpty && this.cd != null) {
                a = this.cd.s9;
            }
            let b = this.rs();
            if (this.ti == null || this.tj == null) {
                return null;
            }
            let c = this.pv(this.b0);
            let d = new ScalerParams(0, a, this.cd.to, b.cg, this.getEffectiveViewport());
            let e = (b.el(c.left, d));
            let f = (b.el(c.right, d));
            if (b.cg) {
                let g = e;
                e = f;
                f = g;
            }
            let h = null;
            if (b.cm) {
                h = b;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            e = Math.max(0, Math.min(this.tj.length - 1, e));
            f = Math.max(0, Math.min(this.tj.length - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            for (let k = truncate(e); k <= truncate(f); k++) {
                let l = k;
                if (h != null) {
                    l = h.i$b._inner[k];
                }
                let m = this.tj[l];
                {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                let n = this.ti[l];
                {
                    if (isInfinity(n) || isNaN_(n)) {
                        continue;
                    }
                }
                i = Math.min(i, m);
                j = Math.max(j, n);
            }
            let o = new AxisRange(i, j);
            let p = this.sd();
            o = this.ao(o, p, a);
            return o;
        }
        mo() {
            super.mo();
            for (let a of fromEnum(this.tm)) {
                a.e9();
            }
        }
        t9() {
            if (this.ck == null) {
                return;
            }
            let a = this.ck.count;
            this.ti = new Array(a);
            this.tj = new Array(a);
            for (let b = 0; b < a; b++) {
                this.ti[b] = 0;
                this.tj[b] = 0;
            }
            this.t0 = Number.POSITIVE_INFINITY;
            this.tz = Number.NEGATIVE_INFINITY;
            let c = 0;
            for (let d of fromEnum(this.tm)) {
                if (d.itemsSource != null && d.visualSeriesLink == null) {
                    continue;
                }
                if (d.itemsSource != null) {
                    d.af = d.visualSeriesLink.valueColumn;
                }
                if (d.itemsSource == null) {
                    this.ck.deregisterColumn(d.af);
                    d.af = this.ch(d.e1);
                }
                if (d.visualSeriesLink != null && d.itemsSource == null) {
                    d.visualSeriesLink.tt = true;
                    d.visualSeriesLink.valueColumn = d.af;
                    d.visualSeriesLink.tt = false;
                }
                d.at = true;
                if (d.af != null) {
                    d.az.clear();
                    d.a0.clear();
                    for (let e = 0; e < d.af.count; e++) {
                        let f = d.af.item(e);
                        if (f < c) {
                            d.az.add(c);
                            d.a0.add(this.tj[e]);
                            this.tj[e] = this.tj[e] + f;
                            if (d.at) {
                                d.at = false;
                            }
                        }
                        else if (f >= c) {
                            d.az.add(this.ti[e]);
                            d.a0.add(c);
                            this.ti[e] = this.ti[e] + f;
                        }
                        else if (isNaN_(f) || isInfinity(f)) {
                            d.az.add(this.ti[e]);
                            d.a0.add(this.tj[e]);
                        }
                    }
                }
            }
            for (let g = 0; g < a; g++) {
                this.t0 = Math.min(this.t0, this.tj[g]);
                this.tz = Math.max(this.tz, this.ti[g]);
            }
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.k4(this.fetchXAxis());
                        this.k4(this.fetchYAxis());
                    }
                    if (c == null && d != null) {
                        this.mc(this.fetchXAxis());
                        this.mc(this.fetchYAxis());
                    }
                    if (this.tm != null) {
                        for (let e of fromEnum(this.tm)) {
                            e.aa = this.cd;
                        }
                        this.ml(false);
                    }
                    break;
                case "ItemsSource":
                    if (this.tm != null) {
                        for (let f of fromEnum(this.tm)) {
                            if (f.itemsSource == null) {
                                if (f.visualSeriesLink != null) {
                                    f.visualSeriesLink.itemsSource = d;
                                }
                            }
                        }
                    }
                    break;
                case "FastItemsSource":
                    if (this.ts) {
                        this.t8();
                    }
                    if (!this.sn()) {
                        this.tr.cr.g(this.fv);
                    }
                    this.ml(false);
                    break;
                case StackedSeriesBase.$$p[0]:
                    this.t8();
                    break;
                case StackedSeriesBase.$$p[1]:
                    if (this.cd != null) {
                        this.cd.m8(this.tq.f);
                    }
                    break;
                case StackedSeriesBase.$$p[2]:
                    for (let g of fromEnum(this.tm)) {
                        g.gj();
                    }
                    break;
                case "Brush":
                    for (let h of fromEnum(this.tm)) {
                        h.fc();
                    }
                    break;
                case "DashArray":
                    for (let i of fromEnum(this.tm)) {
                        i.fd();
                    }
                    break;
                case "HighlightingFadeOpacity":
                    for (let j of fromEnum(this.tm)) {
                        j.fg();
                    }
                    break;
                case "DashCap":
                    for (let k of fromEnum(this.tm)) {
                        k.fe();
                    }
                    break;
                case "IsDropShadowEnabled":
                    for (let l of fromEnum(this.tm)) {
                        l.fh();
                    }
                    break;
                case "ShadowBlur":
                    for (let m of fromEnum(this.tm)) {
                        m.f4();
                    }
                    break;
                case "ShadowColor":
                    for (let n of fromEnum(this.tm)) {
                        n.f5();
                    }
                    break;
                case "UseSingleShadow":
                    for (let o of fromEnum(this.tm)) {
                        o.gi();
                    }
                    break;
                case "ShadowOffsetX":
                    for (let p of fromEnum(this.tm)) {
                        p.f6();
                    }
                    break;
                case "ShadowOffsetY":
                    for (let q of fromEnum(this.tm)) {
                        q.f7();
                    }
                    break;
                case "EndCap":
                    for (let r of fromEnum(this.tm)) {
                        r.ff();
                    }
                    break;
                case "IsHitTestVisible":
                    for (let s of fromEnum(this.tm)) {
                        s.fi();
                    }
                    break;
                case "LegendItemBadgeTemplate":
                    for (let t of fromEnum(this.tm)) {
                        t.fo();
                    }
                    break;
                case "LegendItemTemplate":
                    for (let u of fromEnum(this.tm)) {
                        u.fp();
                    }
                    break;
                case "LegendItemVisibility":
                    for (let v of fromEnum(this.tm)) {
                        v.fq();
                    }
                    break;
                case "LegendItemBadgeShape":
                    for (let w of fromEnum(this.tm)) {
                        w.fn();
                    }
                    break;
                case "LegendItemBadgeMode":
                    for (let x of fromEnum(this.tm)) {
                        x.fm();
                    }
                    break;
                case "MarkerTemplate":
                    for (let y of fromEnum(this.tm)) {
                        y.fv();
                    }
                    break;
                case "MarkerType":
                    for (let z of fromEnum(this.tm)) {
                        z.fx();
                    }
                    break;
                case "MarkerThickness":
                    for (let aa of fromEnum(this.tm)) {
                        aa.fw();
                    }
                    break;
                case "MarkerBrush":
                    for (let ab of fromEnum(this.tm)) {
                        ab.fr();
                    }
                    break;
                case "MarkerOutline":
                    for (let ac of fromEnum(this.tm)) {
                        ac.ft();
                    }
                    break;
                case "MarkerStyle":
                    for (let ad of fromEnum(this.tm)) {
                        ad.fu();
                    }
                    break;
                case "Opacity":
                    for (let ae of fromEnum(this.tm)) {
                        ae.fy();
                    }
                    break;
                case "OpacityMask":
                    for (let af of fromEnum(this.tm)) {
                        af.fz();
                    }
                    break;
                case "AreaFillOpacity":
                    for (let ag of fromEnum(this.tm)) {
                        ag.fb();
                    }
                    break;
                case "Outline":
                    for (let ah of fromEnum(this.tm)) {
                        ah.f0();
                    }
                    break;
                case "StartCap":
                    for (let ai of fromEnum(this.tm)) {
                        ai.f8();
                    }
                    break;
                case "OutlineMode":
                    for (let aj of fromEnum(this.tm)) {
                        aj.f1();
                    }
                    break;
                case "MarkerFillOpacity":
                    for (let ak of fromEnum(this.tm)) {
                        ak.fs();
                    }
                    break;
                case "Thickness":
                    for (let al of fromEnum(this.tm)) {
                        al.f9();
                    }
                    break;
                case "ToolTip":
                    for (let am of fromEnum(this.tm)) {
                        am.ga();
                    }
                    break;
                case "TransitionEasingFunction":
                    for (let an of fromEnum(this.tm)) {
                        an.gc();
                    }
                    break;
                case "TransitionDuration":
                    for (let ao of fromEnum(this.tm)) {
                        ao.gb();
                    }
                    break;
                case "IsTransitionInEnabled":
                    for (let ap of fromEnum(this.tm)) {
                        ap.fk();
                    }
                    break;
                case "TransitionInMode":
                    for (let aq of fromEnum(this.tm)) {
                        aq.gf();
                    }
                    break;
                case "TransitionInDuration":
                    for (let ar of fromEnum(this.tm)) {
                        ar.fk();
                    }
                    break;
                case "TransitionInSpeedType":
                    for (let as of fromEnum(this.tm)) {
                        as.fk();
                    }
                    break;
                case "TransitionInEasingFunction":
                    for (let at of fromEnum(this.tm)) {
                        at.ge();
                    }
                    break;
                case "UseLightweightMarkers":
                    for (let au of fromEnum(this.tm)) {
                        au.gh();
                    }
                    break;
            }
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.rs()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.rs());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.sd());
        }
        get bucketizer() {
            return this.r2.cr;
        }
        get currentMode2Index() {
            return this.sw();
        }
        provideCollisionDetector() {
            return new CollisionAvoider();
        }
        es() {
            return false;
        }
        get_dp() {
            return false;
        }
        mn(a, b) {
            let c = this.e1;
            super.mn(a, b);
            if (!c) {
                this.b0.a2(b);
                return;
            }
            this.b0.a2(b);
            if (this.cx(this.bz)) {
                return;
            }
            for (let d of fromEnum(this.series)) {
                d.visualSeriesLink.mn(a, b);
            }
            this.e1 = false;
        }
        mk(a, b, c, d, e) {
            super.mk(a, b, c, d, e);
            let f = this.a6.a$h.item(d);
            f.cr.g(this.fv);
            f.a1(c);
            if (this.cx(f)) {
                return;
            }
            if (this.tk == null) {
                this.tk = new CategoryFrame(3);
            }
            this.tk.u();
            this.t9();
            this.rz(f).d(this.tk, f);
            this.tb(this.tk, f);
            for (let g of fromEnum(this.series)) {
                g.visualSeriesLink.mk(a, b, c, d, e);
            }
        }
        hu() {
            let a = this.a8.exportStackedVisualData(this, this.p3);
            for (let b of fromEnum(this.series)) {
                let c = this.a8.createFragmentVisualData(this, this.p3, getInstanceType(b).typeName, b.d8);
                b.visualSeriesLink.b0.al(c);
                this.a8.addSubSeriesVisualData(a, c);
            }
            this.la(a);
            this.b0.al(a);
            return a;
        }
        get mayContainUnknowns() {
            return true;
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    StackedSeriesBase.$t = /*@__PURE__*/ markType(StackedSeriesBase, 'StackedSeriesBase', CategorySeries.$, [IIsCategoryBased_$type]);
    StackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSeriesBase, 'raisePropertyChanged', ['AutoGenerateSeries:ts:ue', [0, false], 'ReverseLegendOrder:tu:uf', [0, false], 'SeriesVisibility:uh:ug', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)]]);
    return StackedSeriesBase;
})();
/**
 * @hidden
 */
export let HorizontalStackedSeriesBase = /*@__PURE__*/ (() => {
    class HorizontalStackedSeriesBase extends StackedSeriesBase {
        get_c6() {
            return true;
        }
        get_ek() {
            return this.sd() != null && this.sd().cg;
        }
        bv() {
            return 1;
        }
        bw() {
            if (this.yAxis != null && this.yAxis.cg) {
                return 4;
            }
            return 3;
        }
        getOffsetValue() {
            return this.ry.r(this.xAxis, this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0));
        }
        getCategoryWidth() {
            return this.xAxis.getCategorySize(this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0));
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        ag() {
            return [this.fetchXAxis(), this.fetchYAxis()];
        }
        sn() {
            return this.yAxis != null && this.yAxis.c0();
        }
        mw() {
            let a = (typeCast(XamDataChart.$, this.cd));
            if (a != null) {
                this.fs = isNaN_(this.f1) ? a.t9.fp : this.f1;
                for (let b of fromEnum(this.tm)) {
                    b.fb();
                }
            }
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case HorizontalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.k4(typeCast(Axis.$, c));
                        this.mc(typeCast(Axis.$, d));
                        this.r2.cr.g(this.fv);
                        this.ml(false);
                        this.ls();
                    }
                    break;
                case HorizontalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.k4(typeCast(Axis.$, c));
                        this.mc(typeCast(Axis.$, d));
                        this.r2.cr.g(this.fv);
                        if (this.cd != null) {
                            this.cd.l5();
                        }
                        this.sn();
                        this.ml(false);
                        this.ls();
                    }
                    break;
            }
        }
        ul(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        uk(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.cd) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    HorizontalStackedSeriesBase.$t = /*@__PURE__*/ markType(HorizontalStackedSeriesBase, 'HorizontalStackedSeriesBase', StackedSeriesBase.$);
    HorizontalStackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::uo', [CategoryAxisBase.$, null], 'YAxis::up', [NumericYAxis.$, null]]);
    return HorizontalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedAreaSeries = /*@__PURE__*/ (() => {
    class StackedAreaSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedAreaSeries.$;
        }
        get_dd() {
            return true;
        }
        ac() {
            super.ac();
            this.ml(false);
        }
        bx() {
            return new StackedAreaSeriesView(this);
        }
        l2(a) {
            super.l2(a);
            this.uq = a;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.ck.count - 1);
            }
            if (a == this.yAxis) {
                this.t9();
                return new AxisRange(this.t0, this.tz);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    StackedAreaSeries.$t = /*@__PURE__*/ markType(StackedAreaSeries, 'StackedAreaSeries', HorizontalStackedSeriesBase.$);
    return StackedAreaSeries;
})();
/**
 * @hidden
 */
export let VerticalStackedSeriesBase = /*@__PURE__*/ (() => {
    class VerticalStackedSeriesBase extends StackedSeriesBase {
        rs() {
            return this.yAxis;
        }
        sd() {
            return this.xAxis;
        }
        bv() {
            if (this.xAxis != null && this.xAxis.cg) {
                return 4;
            }
            return 3;
        }
        bw() {
            return 1;
        }
        aq(a) {
            if (a.isEmpty && this.cd != null) {
                a = this.cd.s9;
            }
            let b = this.rs();
            if (this.ti == null || this.tj == null) {
                return null;
            }
            let c = this.pv(this.b0);
            let d = new ScalerParams(0, a, this.cd.to, b.cg, this.getEffectiveViewport());
            let e = (b.el(c.top, d));
            let f = (b.el(c.bottom, d));
            if (!b.cg) {
                let g = e;
                e = f;
                f = g;
            }
            let h = null;
            if (b.cm) {
                h = b;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            e = Math.max(0, Math.min(this.tj.length - 1, e));
            f = Math.max(0, Math.min(this.tj.length - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            for (let k = truncate(e); k <= truncate(f); k++) {
                let l = k;
                if (h != null) {
                    l = h.i$b._inner[k];
                }
                let m = this.tj[l];
                {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                let n = this.ti[l];
                {
                    if (isInfinity(n) || isNaN_(n)) {
                        continue;
                    }
                }
                i = Math.min(i, m);
                j = Math.max(j, n);
            }
            let o = new AxisRange(i, j);
            let p = this.sd();
            o = this.ao(o, p, a);
            return o;
        }
        getOffsetValue() {
            return this.ry.r(this.yAxis, this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0));
        }
        getCategoryWidth() {
            return this.yAxis.getCategorySize(this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0));
        }
        get_isVertical() {
            return true;
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        sn() {
            return this.xAxis != null && this.xAxis.c0();
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case VerticalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.k4(typeCast(Axis.$, c));
                        this.mc(typeCast(Axis.$, d));
                        this.r2.cr.g(this.fv);
                        if (this.cd != null) {
                            this.cd.l5();
                        }
                        this.ml(false);
                        this.ls();
                    }
                    break;
                case VerticalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.k4(typeCast(Axis.$, c));
                        this.mc(typeCast(Axis.$, d));
                        this.r2.cr.g(this.fv);
                        this.sn();
                        this.ml(false);
                        this.ls();
                    }
                    break;
            }
        }
        ul(a) {
            if (typeCast(CategoryYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        uk(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    VerticalStackedSeriesBase.$t = /*@__PURE__*/ markType(VerticalStackedSeriesBase, 'VerticalStackedSeriesBase', StackedSeriesBase.$);
    VerticalStackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, VerticalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::uo', [NumericXAxis.$, null], 'YAxis::up', [CategoryYAxis.$, null]]);
    return VerticalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedBarSeries = /*@__PURE__*/ (() => {
    class StackedBarSeries extends VerticalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedBarSeries.$;
        }
        get_dg() {
            return true;
        }
        get_d3() {
            return true;
        }
        gw() {
            if (!isNaN_(this.gv)) {
                return super.gw();
            }
            return Defaults.h;
        }
        ac() {
            super.ac();
            this.ml(false);
        }
        bx() {
            return new StackedBarSeriesView(this);
        }
        l2(a) {
            super.l2(a);
            this.uq = a;
        }
        tl() {
            return this.uq;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        sw() {
            let a = 0;
            for (let b of fromEnum(this.cd.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(IBarSeries_$type, b);
                if (c != null && c.yAxis == this.yAxis && c.getPreferredCategoryMode() == 2) {
                    a++;
                }
            }
            return -1;
        }
        tx() {
            let a = 0;
            let b = this.cd != null ? this.cd.s9 : Rect.empty;
            let c = this.b0.bu;
            if (!b.isEmpty && !c.isEmpty && this.xAxis != null) {
                let d = this.getEffectiveViewport1(this.b0);
                let e = new ScalerParams(0, b, c, this.xAxis.cg, d);
                a = this.xAxis.ei(this.xAxis.l5, e);
            }
            return a;
        }
        ty() {
            if (this.xAxis != null) {
                return this.xAxis.l5;
            }
            return 0;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.yAxis) {
                return new AxisRange(0, this.ck.count - 1);
            }
            if (a == this.xAxis) {
                this.t9();
                return new AxisRange(this.t0, this.tz);
            }
            return null;
        }
        eo(a) {
            let b = this.ck != null ? this.ck.indexOf(a) : -1;
            let c = this.cd != null ? this.cd.s9 : Rect.empty;
            c = c.copy();
            let d = this.b0.bu;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.px(this.b0);
            let g = new ScalerParams(0, e, e, this.xAxis.cg, f);
            let h = new ScalerParams(0, e, e, this.yAxis.cg, f);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.yAxis != null) {
                    let i = this.yAxis.ei(b, h);
                    if (i < c.top + 0.1 * c.height) {
                        i = i + 0.4 * c.height;
                    }
                    if (i > c.bottom - 0.1 * c.height) {
                        i = i - 0.4 * c.height;
                    }
                    c.y = i - 0.5 * c.height;
                }
                if (this.xAxis != null && this.ti != null && b < this.ti.length) {
                    let j = this.xAxis.ei(this.ti[b], g);
                    let k = this.xAxis.ei(this.tj[b], g);
                    if (!isNaN_(j) && !isNaN_(k)) {
                        let l = Math.abs(k - j);
                        if (c.width < l) {
                            c.width = l;
                            c.x = Math.min(k, j);
                        }
                        else {
                            if (k < c.left + 0.1 * c.width) {
                                k = k + 0.4 * c.width;
                            }
                            if (k > c.right - 0.1 * c.width) {
                                k = k - 0.4 * c.width;
                            }
                            c.x = k - 0.5 * c.width;
                        }
                    }
                }
                this.b8.au(this.cd, c, true);
            }
            return b >= 0;
        }
        fb(a, b, c) {
            let d = true;
            let e = c;
            if (!c.o() || b.isEmpty || a.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.ck == null || this.xAxis.bh == null || this.yAxis.bh == null || this.xAxis.lv == this.xAxis.lu) {
                e.cr.d = 0;
                d = false;
            }
            return d;
        }
        k3(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.r2.cr.g(this.fv);
                    break;
            }
            switch (a) {
                case 4:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.ml(true);
                    }
                    break;
                case 1:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.ml(true);
                    }
                    break;
                case 0:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.ml(true);
                    }
                    break;
                case 2:
                    if (this.r2.cr.d > 0) {
                        this.ml(true);
                    }
                    break;
                case 3:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.ml(true);
                    }
                    break;
            }
        }
        hf(a) {
            let b = this.cd != null ? this.cd.s9 : Rect.empty;
            let c = this.b0.bu;
            let d = this.getEffectiveViewport1(this.b0);
            let e = -1;
            if (this.yAxis != null && !b.isEmpty && !c.isEmpty) {
                let f = new ScalerParams(0, b, c, this.yAxis.cg, d);
                let g = this.pv(this.b0);
                let h = this.yAxis.el(g.top, f);
                let i = this.yAxis.el(g.bottom, f);
                let j = (a.y - b.top) / b.height;
                let k = h + (j * (i - h));
                if (this.yAxis.categoryMode != 0) {
                    k -= 0.5;
                }
                let l = truncate(Math.round(k));
                e = l;
            }
            return e;
        }
        hv(a) {
            let b = this.hf(a);
            return b >= 0 && this.ck != null && b < this.ck.count ? this.ck.item(b) : null;
        }
        ud() {
            if (this.xAxis != null) {
                this.xAxis.c1(true);
            }
            if (this.yAxis != null) {
                this.yAxis.c1(true);
            }
        }
        t1(a) {
            return this.hf(a);
        }
        tv(a, b, c, d) {
            let e = true;
            if (!d.o() || c.isEmpty || b.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.ck == null || this.xAxis.bh == null || this.yAxis.bh == null) {
                e = false;
            }
            let f = d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || f.cr.d < 1) {
                e = false;
            }
            return e;
        }
        gc() {
            return this.yAxis.k3(this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0));
        }
        ua(a, b, c, d) {
            let e = typeCast(BarFragment.$, a);
            let f = typeCast(ColumnFragmentView.$, c);
            if (!this.fb(c.bu, c.bv, c) || e == null || f == null) {
                return;
            }
            let g = this.yAxis.k3(c.bv, c.bu, this.getEffectiveViewport1(c));
            if (isNaN_(g) || isInfinity(g)) {
                e.vm.db.count = 0;
                return;
            }
            let h = 0;
            e.r1.a0(e, e.sl(), d, e.st(c), e.su(c));
            e.r1.r = e.vp;
            e.r1.s = e.vq;
            e.r1.k = e.vp;
            e.r1.l = e.vq;
            let i = e.valueColumn.count;
            let j = c.bv;
            let k = c.bu;
            let l = this.getEffectiveViewport1(c);
            let m = false;
            let n = e.r1.b;
            if (n != null) {
                m = true;
            }
            let o = b.f;
            let p = e.rs();
            let q = new ScalerParams(0, j, k, p.cg, l);
            let r = 0;
            for (let s of fromEnum(b.f)) {
                if (isInfinity(s[0]) || isNaN_(s[0]) || isInfinity(s[1]) || isInfinity(s[2]) || isNaN_(s[1]) || isNaN_(s[2])) {
                    r++;
                    continue;
                }
                let t = s[0] - 0.5 * g;
                let u = s[1];
                let v = s[2];
                v = Math.max(v, -100);
                u = Math.min(u, c.bu.right + 100);
                let w = f.db.item(h);
                w.height = g;
                w.width = Math.abs(u - v);
                if (m) {
                    e.s7(o, r, i, p, q, c.q);
                }
                e.r1.ad(w, false, false, false, false);
                w.am = e.r1.k;
                w.an = e.r1.l;
                f.di(w, Math.min(u, v), t);
                h++;
                r++;
            }
            f.db.count = h;
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case StackedBarSeries.$$p[0]:
                case StackedBarSeries.$$p[1]:
                    for (let e of fromEnum(this.tm)) {
                        e.f2();
                        e.f3();
                    }
                    this.ml(false);
                    break;
                case "SyncLink":
                    if (this.xAxis != null) {
                        this.xAxis.c0();
                    }
                    break;
                case "FastItemsSource":
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.uq.cr.g(this.fv);
                    }
                    this.ml(false);
                    break;
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.k4(this.xAxis);
                        this.k4(this.yAxis);
                    }
                    if (c == null && d != null) {
                        this.mc(this.xAxis);
                        this.mc(this.yAxis);
                    }
                    this.uq.cr.g(this.fv);
                    this.ml(false);
                    if (this.xAxis != null) {
                        this.xAxis.c0();
                    }
                    break;
            }
        }
        getPreferredCategoryMode() {
            return this.preferredCategoryMode(this.yAxis);
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    StackedBarSeries.$t = /*@__PURE__*/ markType(StackedBarSeries, 'StackedBarSeries', VerticalStackedSeriesBase.$, [IBarSeries_$type]);
    StackedBarSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedBarSeries, 'raisePropertyChanged', ['RadiusX:ur:uv', [1, 0], 'RadiusY:us:uw', [1, 0]]);
    return StackedBarSeries;
})();
/**
 * @hidden
 */
export let StackedColumnSeries = /*@__PURE__*/ (() => {
    class StackedColumnSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedColumnSeries.$;
        }
        get_di() {
            return true;
        }
        get_d3() {
            return true;
        }
        gw() {
            if (!isNaN_(this.gv)) {
                return super.gw();
            }
            return Defaults.h;
        }
        bx() {
            return new StackedColumnSeriesView(this);
        }
        l2(a) {
            super.l2(a);
            this.uq = a;
        }
        tl() {
            return this.uq;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.ck.count - 1);
            }
            if (a == this.yAxis) {
                this.t9();
                return new AxisRange(this.t0, this.tz);
            }
            return null;
        }
        gc() {
            let a = this.getEffectiveViewport1(this.b0);
            return this.xAxis.k3(this.b0.bv, this.b0.bu, a);
        }
        ua(a, b, c, d) {
            let e = typeCast(ColumnFragment.$, a);
            let f = typeCast(ColumnFragmentView.$, c);
            if (!this.fb(c.bu, c.bv, c) || e == null || f == null) {
                return;
            }
            if (e == null) {
                return;
            }
            let g = this.getEffectiveViewport1(c);
            let h = this.xAxis.k3(c.bv, c.bu, g);
            if (isNaN_(h) || isInfinity(h)) {
                e.vm.db.count = 0;
                return;
            }
            let i = 0;
            e.r1.a0(e, e.sl(), d, e.st(c), e.su(c));
            e.r1.r = e.vp;
            e.r1.s = e.vq;
            e.r1.k = e.vp;
            e.r1.l = e.vq;
            let j = c.bv;
            let k = c.bu;
            let l = this.getEffectiveViewport1(c);
            let m = false;
            let n = e.r1.b;
            if (n != null) {
                m = true;
            }
            let o = b.f;
            let p = e.rs();
            let q = new ScalerParams(0, j, k, p.cg, l);
            let r = e.valueColumn.count;
            let s = 0;
            for (let t of fromEnum(b.f)) {
                if (isInfinity(t[0]) || isNaN_(t[0]) || isInfinity(t[1]) || isInfinity(t[2]) || isNaN_(t[1]) || isNaN_(t[2])) {
                    s++;
                    continue;
                }
                let u = t[0] - 0.5 * h;
                let v = t[1];
                let w = t[2];
                v = Math.max(v, -100);
                w = Math.min(w, c.bu.bottom + 100);
                let x = f.db.item(i);
                x.width = h;
                x.height = Math.abs(w - v);
                if (m) {
                    e.s7(o, s, r, p, q, c.q);
                }
                e.r1.ad(x, false, false, false, false);
                x.am = e.r1.k;
                x.an = e.r1.l;
                f.di(x, u, Math.min(w, v));
                i++;
                s++;
            }
            f.db.count = i;
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case StackedColumnSeries.$$p[0]:
                case StackedColumnSeries.$$p[1]:
                    for (let e of fromEnum(this.tm)) {
                        e.f2();
                        e.f3();
                    }
                    this.ml(false);
                    break;
                case "SyncLink":
                    if (this.yAxis != null) {
                        this.yAxis.c0();
                    }
                    break;
                case "SeriesViewer":
                    if (this.yAxis != null) {
                        this.yAxis.c0();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    StackedColumnSeries.$t = /*@__PURE__*/ markType(StackedColumnSeries, 'StackedColumnSeries', HorizontalStackedSeriesBase.$);
    StackedColumnSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedColumnSeries, 'raisePropertyChanged', ['RadiusX:ur:uv', [1, 0], 'RadiusY:us:uw', [1, 0]]);
    return StackedColumnSeries;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeries = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedSplineAreaSeries.$;
        }
        gw() {
            if (!isNaN_(this.gv)) {
                return super.gw();
            }
            return this.uq.c5();
        }
        get_dd() {
            return true;
        }
        get_eh() {
            return true;
        }
        ac() {
            super.ac();
            this.ml(false);
        }
        bx() {
            return new StackedSplineAreaSeriesView(this);
        }
        l2(a) {
            super.l2(a);
            this.uq = a;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.ck.count - 1);
            }
            if (a == this.yAxis) {
                this.t9();
                return new AxisRange(this.t0, this.tz);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case StackedSplineAreaSeries.$$p[0]:
                    for (let e of fromEnum(this.tm)) {
                        e.fj();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    StackedSplineAreaSeries.$t = /*@__PURE__*/ markType(StackedSplineAreaSeries, 'StackedSplineAreaSeries', HorizontalStackedSeriesBase.$);
    StackedSplineAreaSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSplineAreaSeries, 'raisePropertyChanged', ['IsSplineShapePartOfRange:ur:ut', [0, false]]);
    return StackedSplineAreaSeries;
})();
/**
 * @hidden
 */
export let StackedSplineSeries = /*@__PURE__*/ (() => {
    class StackedSplineSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedSplineSeries.$;
        }
        get_eh() {
            return true;
        }
        gw() {
            if (!isNaN_(this.gv)) {
                return super.gw();
            }
            return this.uq.c5();
        }
        ac() {
            super.ac();
            this.ml(false);
        }
        bx() {
            return new StackedSplineSeriesView(this);
        }
        l2(a) {
            super.l2(a);
            this.uq = a;
        }
        ap(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.ck.count - 1);
            }
            if (a == this.yAxis) {
                this.t9();
                return new AxisRange(this.t0, this.tz);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    StackedSplineSeries.$t = /*@__PURE__*/ markType(StackedSplineSeries, 'StackedSplineSeries', HorizontalStackedSeriesBase.$);
    StackedSplineSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSplineSeries, 'raisePropertyChanged', ['IsSplineShapePartOfRange:ur:ut', [0, false]]);
    return StackedSplineSeries;
})();
/**
 * @hidden
 */
export let StackedFragmentSeries = /*@__PURE__*/ (() => {
    class StackedFragmentSeries extends DependencyObject {
        constructor() {
            super();
            this.ag = false;
            this.ah = false;
            this._parentSeries = null;
            this.b3 = 0;
            this.aa = null;
            this.af = null;
            this._visualSeriesLink = null;
            this.az = null;
            this.a0 = null;
            this.ay = null;
            this.at = false;
            this.bw = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.az = new List$1(Number_$type, 0);
            this.a0 = new List$1(Number_$type, 0);
            this.ay = new List$1(Array_$type, 0);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.e6(a, b.propertyName, b.oldValue, b.newValue));
        }
        b7(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.l = this.bk({ $type: Point_$type, x: a, y: b }, false, false);
            c.p = "Value";
            c.q = this.ex != null ? this.ex : "";
            c.r = this.ez != null ? this.ez : "";
            let d = new DataLegendSeriesContext();
            d.f = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.b = 7;
            return d;
        }
        get parentSeries() {
            return this._parentSeries;
        }
        set parentSeries(a) {
            this._parentSeries = a;
        }
        get visualSeriesLink() {
            return this._visualSeriesLink;
        }
        set visualSeriesLink(a) {
            this._visualSeriesLink = a;
        }
        bz(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hf(a);
            }
            return -1;
        }
        b8(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hv(a);
            }
            return null;
        }
        b2(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hl(a, b);
            }
            return -1;
        }
        b1(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hj(a, b);
            }
            return -1;
        }
        bk(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gl(a, b, c);
            }
            return NaN;
        }
        j5(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pq(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        j9(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pz(a);
            }
            return Rect.empty;
        }
        j(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ak(a);
            }
            return null;
        }
        ka(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.p0(a);
            }
            return Rect.empty;
        }
        k(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.al(a);
            }
            return null;
        }
        kb(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.p1(a);
            }
            return Rect.empty;
        }
        kc(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.p2(a);
            }
            return Rect.empty;
        }
        bg(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gh(a, b, c);
            }
            return NaN;
        }
        j1(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pm(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bi(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gj(a, b, c);
            }
            return NaN;
        }
        j3(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.po(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        j6(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pr(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bl(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gm(a, b, c);
            }
            return NaN;
        }
        j2(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pn(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bh(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gi(a, b, c);
            }
            return NaN;
        }
        j4(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pp(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bj(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gk(a, b, c);
            }
            return NaN;
        }
        b0(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hg(a);
            }
            return -1;
        }
        bf() {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gc();
            }
            return 0;
        }
        be(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.f8(a);
            }
            return NaN;
        }
        b9(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hw(a);
            }
            return null;
        }
        ao(a, b, c, d) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.c1(a, b, c, d);
            }
            return false;
        }
        j7(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pt(a);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        j0(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pl(a);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        au(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.eo(a);
            }
            return false;
        }
        j8() {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.getEffectiveViewport();
            }
            return Rect.empty;
        }
        e5() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.lu();
            }
        }
        fa(a) {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.mt(a);
            }
        }
        av(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ex(a, b);
            }
            return false;
        }
        e4(a) {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.lk(a);
            }
        }
        provideRenderer(a) {
            this.bw = a;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.provideRenderer(a);
            }
        }
        gj() {
            if (this.parentSeries == null) {
                return;
            }
            this.kg = this.parentSeries._visibility != 0 ? 1 : this.ki;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._visibility = this.kg;
            }
        }
        fv() {
            if (this.parentSeries == null) {
                return;
            }
            this.gm = this.gp != null ? this.gp : this.parentSeries.q3;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.q3 = this.gm;
            }
        }
        fx() {
            if (this.parentSeries == null) {
                return;
            }
            let a = this.t == 0 || this.t == 2;
            this.s = 0;
            this.s = a ? this.parentSeries.qh : this.t;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qh = this.s;
            }
        }
        fc() {
            if (this.parentSeries == null) {
                return;
            }
            this.jp = this.jk != null ? this.jk : this.parentSeries.o7;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.o7 = this.jp;
            }
        }
        fd() {
            if (this.parentSeries == null) {
                return;
            }
            this.js = this.jt != null ? this.jt : this.parentSeries.pg;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pg = this.js;
            }
        }
        fg() {
            if (this.parentSeries == null) {
                return;
            }
            this.a3 = !isNaN_(this.bm) ? this.bm : this.parentSeries.gr;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.gr = this.a3;
            }
        }
        f1() {
            if (this.parentSeries == null) {
                return;
            }
            this.v = this.w != 0 ? this.w : this.parentSeries.bt;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.bt = this.v;
            }
        }
        fs() {
            if (this.parentSeries == null) {
                return;
            }
            this.a4 = !isNaN_(this.bn) ? this.bn : this.parentSeries.gs;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.gs = this.a4;
            }
        }
        fe() {
            if (this.parentSeries == null) {
                return;
            }
            this.ju = this.jx;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ph = this.ju;
            }
        }
        fh() {
            if (this.parentSeries == null) {
                return;
            }
            if (!this.ag) {
                this.ai = this.parentSeries.dn;
            }
            else {
                this.ai = this.ap;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.dn = this.ai;
            }
        }
        f4() {
            if (this.parentSeries == null) {
                return;
            }
            this.a9 = !isNaN_(this.bs) ? this.bs : this.parentSeries.gy;
            if (this.visualSeriesLink != null && !isNaN_(this.a9)) {
                this.visualSeriesLink.gy = this.a9;
            }
        }
        f5() {
            if (this.parentSeries == null) {
                return;
            }
            this.jq = Color.e(toNullable(Color.$, this.jr), toNullable(Color.$, null)) ? this.jr : this.parentSeries.pf;
            if (this.visualSeriesLink != null && Color.e(toNullable(Color.$, this.jq), toNullable(Color.$, null))) {
                this.visualSeriesLink.pf = this.jq;
            }
        }
        gi() {
            if (this.parentSeries == null) {
                return;
            }
            if (!this.ah) {
                this.an = this.parentSeries.e9;
            }
            else {
                this.an = this.ax;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.e9 = this.an;
            }
        }
        f6() {
            if (this.parentSeries == null) {
                return;
            }
            this.ba = !isNaN_(this.bt) ? this.bt : this.parentSeries.gz;
            if (this.visualSeriesLink != null && !isNaN_(this.ba)) {
                this.visualSeriesLink.gz = this.ba;
            }
        }
        f7() {
            if (this.parentSeries == null) {
                return;
            }
            this.bb = !isNaN_(this.bu) ? this.bu : this.parentSeries.g0;
            if (this.visualSeriesLink != null && !isNaN_(this.bb)) {
                this.visualSeriesLink.g0 = this.bb;
            }
        }
        ff() {
            if (this.parentSeries == null) {
                return;
            }
            this.jv = this.jy;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pi = this.jv;
            }
        }
        fi() {
            if (this.parentSeries == null) {
                return;
            }
            this.aj = this.aq;
        }
        fo() {
            if (this.parentSeries == null) {
                return;
            }
            this.gk = this.gn != null ? this.gn : this.parentSeries.legendItemBadgeTemplate;
            if (this.visualSeriesLink != null) {
                if (this.gk != null) {
                    this.visualSeriesLink.legendItemBadgeTemplate = this.gk;
                }
                else {
                    this.visualSeriesLink.legendItemBadgeTemplate = null;
                }
            }
        }
        fp() {
            if (this.parentSeries == null) {
                return;
            }
            this.gl = this.go != null ? this.go : this.parentSeries.legendItemTemplate;
            if (this.visualSeriesLink != null) {
                if (this.gl != null) {
                    this.visualSeriesLink.legendItemTemplate = this.gl;
                }
                else {
                    this.visualSeriesLink.legendItemTemplate = null;
                }
            }
        }
        fq() {
            if (this.parentSeries == null) {
                return;
            }
            this.kf = this.parentSeries.p7 != 0 ? 1 : this.kh;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.p7 = this.kf;
            }
        }
        fn() {
            if (this.parentSeries == null) {
                return;
            }
            this.q = this.r != 0 ? this.r : this.parentSeries.legendItemBadgeShape;
            if (this.visualSeriesLink != null) {
                if (this.q != 0) {
                    this.visualSeriesLink.legendItemBadgeShape = this.q;
                }
                else {
                    this.visualSeriesLink.legendItemBadgeShape = 0;
                }
            }
        }
        fm() {
            if (this.parentSeries == null) {
                return;
            }
            this.o = this.p != 0 ? this.p : this.parentSeries.a9;
            if (this.visualSeriesLink != null) {
                if (this.o != 0) {
                    this.visualSeriesLink.a9 = this.o;
                }
                else {
                    this.visualSeriesLink.a9 = 0;
                }
            }
        }
        fr() {
            if (this.parentSeries == null) {
                return;
            }
            this.jg = this.jl != null ? this.jl : this.parentSeries.rj;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.rj = this.jg;
            }
        }
        ft() {
            if (this.parentSeries == null) {
                return;
            }
            this.jh = this.jm != null ? this.jm : this.parentSeries.rk;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.rk = this.jh;
            }
        }
        fu() {
            if (this.parentSeries == null) {
                return;
            }
            this.kd = this.ke != null ? this.ke : this.parentSeries.rl;
            if (this.visualSeriesLink != null) {
                if (this.kd != null) {
                    this.visualSeriesLink.rl = this.kd;
                }
                else {
                    this.visualSeriesLink.rl = null;
                }
            }
        }
        fy() {
            if (this.parentSeries == null) {
                return;
            }
            this.a6 = !isNaN_(this.bp) ? this.bp : this.parentSeries._opacity;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._opacity = this.a6;
            }
        }
        fz() {
        }
        f0() {
            if (this.parentSeries == null) {
                return;
            }
            this.jj = this.jo != null ? this.jo : this.parentSeries.pc;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pc = this.jj;
            }
        }
        fl() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.itemsSource = this.itemsSource;
            }
        }
        fb() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.dd && !this.parentSeries.eh) {
                a = this.parentSeries.fs;
            }
            if (this.parentSeries.isStacked && this.parentSeries.dd && this.parentSeries.eh) {
                a = this.parentSeries.fs;
            }
            this.a2 = !isNaN_(this.bd) ? this.bd : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(AreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.f1 = this.a2;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.f1 = this.a2;
                }
            }
        }
        fj() {
            if (this.parentSeries == null) {
                return;
            }
            let a = false;
            if (this.parentSeries.isStacked && this.parentSeries.eh && this.parentSeries.dd) {
                a = this.parentSeries.ur;
            }
            if (this.parentSeries.isStacked && this.parentSeries.dg) {
                a = this.parentSeries.ur;
            }
            this.ak = a;
            if (this.visualSeriesLink != null) {
                if (typeCast(SplineFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vg = this.ak;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vg = this.ak;
                }
            }
        }
        f2() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.di) {
                a = this.parentSeries.ur;
            }
            if (this.parentSeries.isStacked && this.parentSeries.dg) {
                a = this.parentSeries.ur;
            }
            this.a7 = !isNaN_(a) ? a : this.bq;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vp = this.a7;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vp = this.a7;
                }
            }
        }
        f3() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.di) {
                a = this.parentSeries.us;
            }
            if (this.parentSeries.isStacked && this.parentSeries.dg) {
                a = this.parentSeries.us;
            }
            this.a8 = !isNaN_(a) ? a : this.br;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vq = this.a8;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vq = this.a8;
                }
            }
        }
        f8() {
            if (this.parentSeries == null) {
                return;
            }
            this.jw = this.jz;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pj = this.jw;
            }
        }
        f9() {
            if (this.parentSeries == null) {
                return;
            }
            this.bc = !isNaN_(this.bv) ? this.bv : this.parentSeries.g1;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.g1 = this.bc;
            }
        }
        fw() {
            if (this.parentSeries == null) {
                return;
            }
            this.a5 = !isNaN_(this.bo) ? this.bo : this.parentSeries.qm;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qm = this.a5;
            }
        }
        ga() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.toolTip = this.cb;
            }
        }
        gc() {
            if (this.parentSeries == null) {
                return;
            }
            this.ab = this.ad || this.parentSeries.cf;
        }
        gb() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.ho != 0) {
                this.bx = this.parentSeries.ho;
                return;
            }
            this.bx = this.b4;
        }
        ge() {
            if (this.parentSeries == null) {
                return;
            }
            this.ac = this.ae || this.parentSeries.cg;
        }
        gf() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.r4 != 0) {
                this.m = this.parentSeries.r4;
                return;
            }
            this.m = this.n;
        }
        gg() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.ca != 0) {
                this.y = this.parentSeries.ca;
                return;
            }
            this.y = this.z;
        }
        fk() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.sk != false) {
                this.al = this.parentSeries.sk;
                return;
            }
            this.al = this.as;
        }
        gd() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.hp != 1000) {
                this.by = this.parentSeries.hp;
                return;
            }
            this.by = this.b5;
        }
        gh() {
            if (this.parentSeries == null) {
                return;
            }
            this.am = this.aw;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ql = this.am;
            }
        }
        e8(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        e6(a, b, c, d) {
            if (this.parentSeries == null) {
                return;
            }
            switch (b) {
                case StackedFragmentSeries.$$p[81]:
                    if (this.parentSeries == null || this.visualSeriesLink == null) {
                        return;
                    }
                    this.visualSeriesLink.title = d;
                    break;
                case StackedFragmentSeries.$$p[94]:
                    this.gj();
                    break;
                case StackedFragmentSeries.$$p[45]:
                    this.fc();
                    break;
                case StackedFragmentSeries.$$p[46]:
                    this.fd();
                    break;
                case StackedFragmentSeries.$$p[47]:
                    this.fe();
                    break;
                case StackedFragmentSeries.$$p[50]:
                    this.ag = true;
                    this.fh();
                    break;
                case StackedFragmentSeries.$$p[75]:
                    this.f4();
                    break;
                case StackedFragmentSeries.$$p[76]:
                    this.f5();
                    break;
                case StackedFragmentSeries.$$p[90]:
                    this.ag = true;
                    this.gi();
                    break;
                case StackedFragmentSeries.$$p[77]:
                    this.f6();
                    break;
                case StackedFragmentSeries.$$p[78]:
                    this.f7();
                    break;
                case StackedFragmentSeries.$$p[48]:
                    this.ff();
                    break;
                case StackedFragmentSeries.$$p[51]:
                    this.fi();
                    break;
                case StackedFragmentSeries.$$p[64]:
                    this.fv();
                    break;
                case StackedFragmentSeries.$$p[66]:
                    this.fx();
                    break;
                case StackedFragmentSeries.$$p[57]:
                    this.fo();
                    break;
                case StackedFragmentSeries.$$p[58]:
                    this.fp();
                    break;
                case StackedFragmentSeries.$$p[59]:
                    this.fq();
                    break;
                case StackedFragmentSeries.$$p[56]:
                    this.fn();
                    break;
                case StackedFragmentSeries.$$p[55]:
                    this.fm();
                    break;
                case StackedFragmentSeries.$$p[60]:
                    this.fr();
                    break;
                case StackedFragmentSeries.$$p[62]:
                    this.ft();
                    break;
                case StackedFragmentSeries.$$p[63]:
                    this.fu();
                    break;
                case StackedFragmentSeries.$$p[65]:
                    this.fw();
                    break;
                case StackedFragmentSeries.$$p[69]:
                    this.fy();
                    break;
                case StackedFragmentSeries.$$p[68]:
                    this.fz();
                    break;
                case StackedFragmentSeries.$$p[54]:
                    this.fl();
                    break;
                case StackedFragmentSeries.$$p[71]:
                    this.f0();
                    break;
                case StackedFragmentSeries.$$p[70]:
                    this.f1();
                    break;
                case StackedFragmentSeries.$$p[61]:
                    this.fs();
                    break;
                case StackedFragmentSeries.$$p[44]:
                    this.fb();
                    break;
                case StackedFragmentSeries.$$p[73]:
                    this.f2();
                    break;
                case StackedFragmentSeries.$$p[74]:
                    this.f3();
                    break;
                case StackedFragmentSeries.$$p[52]:
                    this.fj();
                    break;
                case StackedFragmentSeries.$$p[79]:
                    this.f8();
                    break;
                case StackedFragmentSeries.$$p[80]:
                    this.f9();
                    break;
                case StackedFragmentSeries.$$p[82]:
                    this.ga();
                    break;
                case StackedFragmentSeries.$$p[84]:
                    this.gc();
                    break;
                case StackedFragmentSeries.$$p[86]:
                    this.ge();
                    break;
                case StackedFragmentSeries.$$p[83]:
                    this.gb();
                    break;
                case StackedFragmentSeries.$$p[53]:
                    this.fk();
                    break;
                case StackedFragmentSeries.$$p[87]:
                    this.gf();
                    break;
                case StackedFragmentSeries.$$p[88]:
                    this.gg();
                    break;
                case StackedFragmentSeries.$$p[85]:
                    this.gd();
                    break;
                case StackedFragmentSeries.$$p[89]:
                    this.gh();
                    break;
            }
            this.parentSeries.ml(false);
        }
        e9() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.mo();
            }
        }
    }
    StackedFragmentSeries.$t = /*@__PURE__*/ markType(StackedFragmentSeries, 'StackedFragmentSeries', DependencyObject.$, [INotifyPropertyChanged_$type]);
    StackedFragmentSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedFragmentSeries, 'e8', ['ActualAreaFillOpacity:a2:gq', [1, 1], 'ActualBrush:jf:gr', [Brush.$], 'ActualDashArray:js:gs', [DoubleCollection.$], 'ActualDashCap:ju:gt', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'ActualEndCap:jv:gu', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'ActualHighlightingFadeOpacity:a3:gv', [1, NaN], 'ActualIsDropShadowEnabled:ai:gw', [0, false], 'ActualIsHitTestVisible:aj:gx', [0, true], 'ActualIsSplineShapePartOfRange:ak:gy', [0, false], 'ActualIsTransitionInEnabled:al:gz', [0], 'ActualLegendItemBadgeMode:o:g0', [LegendItemBadgeMode_$type], 'ActualLegendItemBadgeShape:q:g1', [LegendItemBadgeShape_$type], 'ActualLegendItemBadgeTemplate:gk:g2', [DataTemplate.$], 'ActualLegendItemTemplate:gl:g3', [DataTemplate.$], 'ActualLegendItemVisibility:kf:g4', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'ActualMarkerBrush:jg:g5', [Brush.$], 'ActualMarkerFillOpacity:a4:g6', [1, NaN], 'ActualMarkerOutline:jh:g7', [Brush.$], 'ActualMarkerStyle:kd:g8', [Style.$], 'ActualMarkerTemplate:gm:g9', [DataTemplate.$], 'ActualMarkerThickness:a5:ha', [1, 1], 'ActualMarkerType:s:hb', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'ActualOpacityMask:ji:hc', [Brush.$], 'ActualOpacity:a6:hd', [1, 1], 'ActualOutlineMode:v:he', [SeriesOutlineMode_$type, /*@__PURE__*/ enumGetBox(SeriesOutlineMode_$type, 0)], 'ActualOutline:jj:hf', [Brush.$], 'ActualRadiusX:a7:hg', [1, 0], 'ActualRadiusY:a8:hh', [1, 0], 'ActualShadowBlur:a9:hi', [1, NaN], 'ActualShadowColor:jq:hj', [Color.$], 'ActualShadowOffsetX:ba:hk', [1, NaN], 'ActualShadowOffsetY:bb:hl', [1, NaN], 'ActualStartCap:jw:hm', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'ActualThickness:bc:hn', [1, 1], 'ActualToolTip:b6:ho', [4], 'ActualTransitionDuration:bx:hp', [1], 'ActualTransitionEasingFunction:ab:hq', [Delegate_$type], 'ActualTransitionInDuration:by:hr', [1], 'ActualTransitionInEasingFunction:ac:hs', [Delegate_$type], 'ActualTransitionInMode:m:ht', [CategoryTransitionInMode_$type], 'ActualTransitionInSpeedType:y:hu', [TransitionInSpeedType_$type], 'ActualUseLightweightMarkers:am:hv', [0, false], 'ActualUseSingleShadow:an:hw', [0, true], 'ActualVisibility:kg:hx', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'AreaFillOpacity:bd:hy', [1, NaN], 'Brush:jk:hz', [Brush.$], 'DashArray:jt:h0', [DoubleCollection.$], 'DashCap:jx:h1', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'EndCap:jy:h2', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'HighlightingFadeOpacity:bm:h3', [1, NaN], 'IsDropShadowEnabled:ap:h4', [0], 'IsHitTestVisible:aq:h5', [0, true], 'IsSplineShapePartOfRange:ar:h6', [0, false], 'IsTransitionInEnabled:as:h7', [0, false], 'ItemsSource::h8', [IEnumerable_$type, null], 'LegendItemBadgeMode:p:h9', [LegendItemBadgeMode_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeMode_$type, 0)], 'LegendItemBadgeShape:r:ia', [LegendItemBadgeShape_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0)], 'LegendItemBadgeTemplate:gn:ib', [DataTemplate.$, null], 'LegendItemTemplate:go:ic', [DataTemplate.$, null], 'LegendItemVisibility:kh:id', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'MarkerBrush:jl:ie', [Brush.$], 'MarkerFillOpacity:bn:ig', [1, NaN], 'MarkerOutline:jm:ih', [Brush.$], 'MarkerStyle:ke:ii', [Style.$], 'MarkerTemplate:gp:ij', [DataTemplate.$, null], 'MarkerThickness:bo:ik', [1, 1.5], 'MarkerType:t:il', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'Name:d8:im', [2], 'OpacityMask:jn:io', [Brush.$], 'Opacity:bp:ip', [1, 1], 'OutlineMode:w:iq', [SeriesOutlineMode_$type, /*@__PURE__*/ enumGetBox(SeriesOutlineMode_$type, 0)], 'Outline:jo:ir', [Brush.$, null], 'ParentOrLocalBrush:jp:is', [Brush.$], 'RadiusX:bq:it', [1, 0], 'RadiusY:br:iu', [1, 0], 'ShadowBlur:bs:iv', [1, NaN], 'ShadowColor:jr:iw', [Color.$], 'ShadowOffsetX:bt:ix', [1, NaN], 'ShadowOffsetY:bu:iy', [1, NaN], 'StartCap:jz:iz', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'Thickness:bv:i0', [1, 1.5], 'Title:ca:i1', [4, "Series Title"], 'ToolTip:cb:i2', [4, null], 'TransitionDuration:b4:i3', [1, 0], 'TransitionEasingFunction:ad:i4', [Delegate_$type, null], 'TransitionInDuration:b5:i5', [1, 1000], 'TransitionInEasingFunction:ae:i6', [Delegate_$type, null], 'TransitionInMode:n:i7', [CategoryTransitionInMode_$type, /*@__PURE__*/ enumGetBox(CategoryTransitionInMode_$type, 0)], 'TransitionInSpeedType:z:i8', [TransitionInSpeedType_$type, /*@__PURE__*/ enumGetBox(TransitionInSpeedType_$type, 0)], 'UseLightweightMarkers:aw:i9', [0, false], 'UseSingleShadow:ax:ja', [0], 'ValueMemberAsLegendLabel:ex:jb', [2, null], 'ValueMemberAsLegendUnit:ez:jc', [2, null], 'ValueMemberPath:e1:jd', [2, null], 'Visibility:ki:je', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)]]);
    return StackedFragmentSeries;
})();
/**
 * @hidden
 */
export let StackedSeriesCollection = /*@__PURE__*/ (() => {
    class StackedSeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(StackedFragmentSeries.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    StackedSeriesCollection.$t = /*@__PURE__*/ markType(StackedSeriesCollection, 'StackedSeriesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(StackedFragmentSeries.$));
    return StackedSeriesCollection;
})();
/**
 * @hidden
 */
export let StackedSeriesFramePreparer = /*@__PURE__*/ (() => {
    class StackedSeriesFramePreparer extends CategoryFramePreparer {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        super(0, c);
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        super(1, c, d, e, f, g);
                    }
                    break;
            }
        }
        j(a) {
            let b = new SingleValuesHolder();
            if (typeCast(StackedColumnSeries.$, this.h) !== null || typeCast(StackedBarSeries.$, this.h) !== null) {
                let c = typeCast(StackedSeriesBase.$, this.h);
                if (c.tm.count > 0) {
                    b.f = c.tm._inner[0].af;
                }
                return b;
            }
            let d = this.ad.valueColumn;
            b.f = d;
            return b;
        }
        t(a, b, c, d, e) {
            let f = 0;
            let g = false;
            let h;
            let i = a.d != null;
            let j = this.h.provideCollisionDetector();
            let k = a.f;
            let l = a.k;
            let m = this.h.mayContainUnknowns;
            let n = new ScalerParams(0, a.m, a.l, a.b.j$a, l);
            let o = new ScalerParams(0, a.m, a.l, a.c.j$a, l);
            o.b = this.h.getHostReferenceValue();
            let p = (a.b.j$c(2, n) - a.b.j$c(1, n));
            let q = a.m;
            let r = a.l;
            let s = typeCast(NumericAxisBase.$, a.c) !== null && a.c.lh;
            for (let t = a.i; t <= a.j; ++t) {
                let u;
                if (a.d == null) {
                    if (!m) {
                        u = this.g.getBucketWithoutUnknowns(t);
                    }
                    else {
                        u = this.g.getBucket(t);
                    }
                }
                else {
                    u = ((() => { let v = this.f(a, t, b, p, g, h, c); t = v.p1; g = v.p4; h = v.p5; return v.ret; })());
                }
                let v = !s || (s && u[1] > 0);
                let w = u[0];
                if (!isNaN_(u[0])) {
                    this.x(a, u, c, i, n, o);
                    a.a.f.add(u);
                    let x = t * a.h;
                    let y = x;
                    if (a.d != null && a.d.i$b != null && x >= 0 && x < a.d.i$b.count) {
                        x = a.d.i$b._inner[x];
                    }
                    let z = u;
                    if (k && x < b.e) {
                        z = new Array(u.length);
                        z[0] = w;
                        this.z(b, x, true, a.e);
                        z[1] = b.c;
                        z[2] = b.d;
                        this.x(a, z, c, i, n, o);
                    }
                    if (d && v && this.l(a.a, z, j, Math.min(x, b.e - 1), f, a.a.f.count - 1)) {
                        ++f;
                    }
                }
            }
            return f;
        }
        l(a, b, c, d, e, f) {
            let g = b[0];
            let h = b[1];
            if (typeCast(IBarSeries_$type, this.c) !== null) {
                h = b[0];
                g = b[1];
            }
            let i = new Rect(0, g - 5, h - 5, 11, 11);
            if (!isNaN_(g) && !isNaN_(h) && !isInfinity(g) && !isInfinity(h) && c.tryAdd(i)) {
                a.m.add({ $type: Point_$type, x: g, y: h });
                this.c.updateMarkerTemplate(e, d, f);
                return true;
            }
            return false;
        }
    }
    StackedSeriesFramePreparer.$t = /*@__PURE__*/ markType(StackedSeriesFramePreparer, 'StackedSeriesFramePreparer', CategoryFramePreparer.$);
    return StackedSeriesFramePreparer;
})();
/**
 * @hidden
 */
export let AreaFragmentView = /*@__PURE__*/ (() => {
    class AreaFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.dg = new Path();
            this.di = new Path();
            this.dh = new Path();
            this.dj = new Path();
            this.dc = new Path();
            this.de = new Path();
            this.dd = new Path();
            this.df = new Path();
            this.da = a;
        }
        as() {
            super.as();
            if (!this.q) {
            }
        }
        db() {
            this.dg.ak = null;
            this.dh.ak = null;
            this.di.ak = null;
            this.dj.ak = null;
            this.dc.ak = null;
            this.dd.ak = null;
            this.de.ak = null;
            this.df.ak = null;
        }
        cs() {
            return new AreaFragmentBucketCalculator(this);
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.dc.ak = this.dg.ak;
            this.dd.ak = this.dh.ak;
            this.de.ak = this.di.ak;
            this.df.ak = this.dj.ak;
            this.dc._fill = a;
            this.dd._fill = a;
            this.dc._opacity = 1;
            this.dd._opacity = 1;
            this.de._stroke = a;
            this.de.ac = this.e.fw + 3;
            this.df._stroke = a;
            this.df.ac = this.e.fw + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.dc);
                    a.s(this.dd);
                    a.s(this.de);
                    a.s(this.df);
                }
                else {
                    a.s(this.dg);
                    a.s(this.dh);
                    a.s(this.di);
                    a.s(this.dj);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b0.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a8.exportPathData(a, this.di, "lowerShape", ["Lower"]);
            this.e.a8.exportPathData(a, this.dj, "upperShape", ["Upper", "Main"]);
            this.e.a8.exportPathData(a, this.dh, "translucentShape", ["Translucent"]);
            this.e.a8.exportPathData(a, this.dg, "fillShape", ["Fill"]);
        }
    }
    AreaFragmentView.$t = /*@__PURE__*/ markType(AreaFragmentView, 'AreaFragmentView', AnchoredCategorySeriesView.$);
    return AreaFragmentView;
})();
/**
 * @hidden
 */
export let ColumnFragmentView = /*@__PURE__*/ (() => {
    class ColumnFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.de = null;
            this.db = null;
            this.dc = null;
            this.dd = null;
            this.dj = new Rectangle();
            this.da = a;
            this.dc = new List$1(Number_$type, 0);
            this.dd = new List$1(Number_$type, 0);
            this.db = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.dk);
                $ret.activate = runOn(this, this.df);
                $ret.disactivate = runOn(this, this.dh);
                $ret.destroy = runOn(this, this.dg);
                return $ret;
            })());
            this.de = new List$1(Rectangle.$, 0);
        }
        as() {
            super.as();
            if (!this.q) {
            }
        }
        dk() {
            let a = ((() => {
                let $ret = new Rectangle();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
                return $ret;
            })());
            this.de.add(a);
            a._visibility = 1;
            return a;
        }
        df(a) {
            a._visibility = 0;
        }
        dh(a) {
            a._visibility = 1;
        }
        dg(a) {
            this.de.remove(a);
        }
        be(a, b) {
            super.be(a, b);
            let c = a;
        }
        di(a, b, c) {
            let d = false;
            if (a.o != c) {
                d = true;
                a.o = c;
            }
            if (a.n != b) {
                d = true;
                a.n = b;
            }
            if (d) {
                this.aq();
            }
        }
        bf(a, b) {
            super.bf(a, b);
        }
        ac(a) {
            return this.de._inner[a];
        }
        ab(a) {
            let b = this.de._inner[a];
            this.dj._visibility = b._visibility;
            this.dj.n = b.n;
            this.dj.o = b.o;
            this.dj.width = b.width;
            this.dj.height = b.height;
            let c = this.bp(a);
            this.dj._fill = c;
            this.dj._stroke = c;
            this.dj.ac = this.e.fw + 3;
            return this.dj;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                for (let c = 0; c < this.de.count; c++) {
                    let d = this.aa(c, b);
                    this.bd(d, c, b);
                    a.v(d);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b0.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.db.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                this.e.a8.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
            }
            b++;
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            let b = null;
            if (this.da.rs().ca) {
                b = this.da.fragmentXAxis;
            }
            else if (this.da.fragmentYAxis.ca) {
                b = this.da.fragmentYAxis;
            }
            if (b.cd) {
                let c = b;
                a += "<span>${item." + c.dateTimeMemberPath + "}</span><br/>";
            }
            if (b != null && b.fz != null) {
                a += "<span>${item." + b.fz + "}</span><br/>";
            }
            a += "<span";
            let d = this.e.a6.a$r(this.e);
            if (!stringIsNullOrEmpty(d)) {
                a += " style='color:" + d + "'";
            }
            a += ">" + this.da.title + ": </span><span class='ui-priority-primary'>" + "${item." + this.da.t5 + "}</span></div>";
            return a;
        }
    }
    ColumnFragmentView.$t = /*@__PURE__*/ markType(ColumnFragmentView, 'ColumnFragmentView', AnchoredCategorySeriesView.$);
    return ColumnFragmentView;
})();
/**
 * @hidden
 */
export let LineFragmentView = /*@__PURE__*/ (() => {
    class LineFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.dg = new Path();
            this.df = new Path();
            this.dh = new Path();
            this.dd = new Path();
            this.dc = new Path();
            this.de = new Path();
            this.da = a;
        }
        db() {
            this.df.ak = null;
            this.dg.ak = null;
            this.dh.ak = null;
            this.dc.ak = null;
            this.dd.ak = null;
            this.de.ak = null;
        }
        cs() {
            return new LineFragmentBucketCalculator(this);
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.dc.ak = this.df.ak;
            this.dd.ak = this.dg.ak;
            this.de.ak = this.dh.ak;
            this.dd._stroke = a;
            this.dd.ac = this.e.fw + 3;
            this.de._stroke = a;
            this.de.ac = this.e.fw + 3;
            this.dc._fill = a;
            this.dc._opacity = 1;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.dc);
                    a.s(this.dd);
                    a.s(this.de);
                }
                else {
                    a.s(this.df);
                    a.s(this.dg);
                    a.s(this.dh);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b0.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a8.exportPathData(a, this.dg, "lowerShape", ["Lower", "Main"]);
            this.e.a8.exportPathData(a, this.dh, "upperShape", ["Upper"]);
            this.e.a8.exportPathData(a, this.df, "translucentShape", ["Translucent"]);
        }
    }
    LineFragmentView.$t = /*@__PURE__*/ markType(LineFragmentView, 'LineFragmentView', AnchoredCategorySeriesView.$);
    return LineFragmentView;
})();
/**
 * @hidden
 */
export let SplineAreaFragmentView = /*@__PURE__*/ (() => {
    class SplineAreaFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.dc = null;
            this.di = new Path();
            this.dk = new Path();
            this.dj = new Path();
            this.dl = new Path();
            this.de = new Path();
            this.dg = new Path();
            this.df = new Path();
            this.dh = new Path();
            this.dc = a;
        }
        as() {
            super.as();
            if (!this.q) {
            }
        }
        dd() {
            this.di.ak = null;
            this.dj.ak = null;
            this.dk.ak = null;
            this.dl.ak = null;
            this.de.ak = null;
            this.df.ak = null;
            this.dg.ak = null;
            this.dh.ak = null;
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.de.ak = this.di.ak;
            this.df.ak = this.dj.ak;
            this.dg.ak = this.dk.ak;
            this.dh.ak = this.dl.ak;
            this.de._fill = a;
            this.df._fill = a;
            this.df._opacity = 1;
            this.de._opacity = 1;
            this.dg._stroke = a;
            this.dg.ac = this.e.fw + 3;
            this.dh._stroke = a;
            this.dh.ac = this.e.fw + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.de);
                    a.s(this.df);
                    a.s(this.dg);
                    a.s(this.dh);
                }
                else {
                    a.s(this.di);
                    a.s(this.dj);
                    a.s(this.dk);
                    a.s(this.dl);
                }
            }
        }
        get_index() {
            let a = this.dc.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.dc.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b0.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a8.exportPathData(a, this.dk, "lowerShape", ["Lower"]);
            this.e.a8.exportPathData(a, this.dl, "upperShape", ["Upper", "Main"]);
            this.e.a8.exportPathData(a, this.dj, "translucentShape", ["Translucent"]);
            this.e.a8.exportPathData(a, this.di, "fillShape", ["Fill"]);
        }
    }
    SplineAreaFragmentView.$t = /*@__PURE__*/ markType(SplineAreaFragmentView, 'SplineAreaFragmentView', SplineSeriesBaseView.$);
    return SplineAreaFragmentView;
})();
/**
 * @hidden
 */
export let SplineFragmentView = /*@__PURE__*/ (() => {
    class SplineFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.dc = null;
            this.di = new Path();
            this.dh = new Path();
            this.dj = new Path();
            this.df = new Path();
            this.de = new Path();
            this.dg = new Path();
            this.dc = a;
        }
        cs() {
            return new SplineFragmentBucketCalculator(this);
        }
        dd() {
            this.dh.ak = null;
            this.di.ak = null;
            this.dj.ak = null;
            this.de.ak = null;
            this.df.ak = null;
            this.dg.ak = null;
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.de.ak = this.dh.ak;
            this.df.ak = this.di.ak;
            this.dg.ak = this.dj.ak;
            this.df._stroke = a;
            this.df.ac = this.e.fw + 3;
            this.dg._stroke = a;
            this.dg.ac = this.e.fw + 3;
            this.de._fill = a;
            this.de._opacity = 0.75;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.s(this.de);
                    a.s(this.df);
                    a.s(this.dg);
                }
                else {
                    a.s(this.dh);
                    a.s(this.di);
                    a.s(this.dj);
                }
            }
        }
        get_index() {
            let a = this.dc.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.dc.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b0.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a8.exportPathData(a, this.di, "lowerShape", ["Lower", "Main"]);
            this.e.a8.exportPathData(a, this.dj, "upperShape", ["Upper"]);
            this.e.a8.exportPathData(a, this.dh, "translucentShape", ["Translucent"]);
        }
    }
    SplineFragmentView.$t = /*@__PURE__*/ markType(SplineFragmentView, 'SplineFragmentView', SplineSeriesBaseView.$);
    return SplineFragmentView;
})();
/**
 * @hidden
 */
export let StackedSeriesView = /*@__PURE__*/ (() => {
    class StackedSeriesView extends CategorySeriesView {
        constructor(a) {
            super(a);
            this.c0 = null;
            this.c1 = new Canvas();
            this.c3 = new Panel();
            this.c0 = a;
        }
        get c2() {
            return this.c1;
        }
        get c4() {
            return this.c3;
        }
        cs() {
            return new StackedBucketCalculator(this);
        }
        ap() {
            super.ap();
            for (let a = 0; a < this.c0.tq.f.count; a++) {
                this.c0.tq.f._inner[a].b0.ap();
            }
        }
        ar(a, b) {
            super.ar(a, b);
            for (let c of fromEnum(this.c0.series)) {
                c.visualSeriesLink.b0.ar(a, b);
            }
        }
        af() {
            let a = "rgba(95,95,95,0.5)";
            let b = true;
            let c = 5, d = 5, e = 5;
            let f = this.e;
            if ((f.isStacked && f.dd) || (f.isStacked && f.eh && f.dd)) {
                d = 1;
                e = -3;
            }
            else if ((f.isStacked && f.d2) || (f.isStacked && f.eh)) {
                c = 3;
                d = 1;
                e = 4;
                b = false;
            }
            else if ((f.isStacked && f.di)) {
                d = 5;
                e = 0;
            }
            let g = new Color();
            g.colorString = a;
            f.pf = g;
            f.gy = c;
            f.gz = d;
            f.g0 = e;
            f.e9 = b;
        }
    }
    StackedSeriesView.$t = /*@__PURE__*/ markType(StackedSeriesView, 'StackedSeriesView', CategorySeriesView.$);
    return StackedSeriesView;
})();
/**
 * @hidden
 */
export let StackedBarSeriesView = /*@__PURE__*/ (() => {
    class StackedBarSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
            this.c5 = null;
            this.c5 = a;
        }
        cs() {
            return new StackedBarBucketCalculator(this);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.qh = Defaults.c;
                this.c0.g1 = Defaults.i;
            }
        }
    }
    StackedBarSeriesView.$t = /*@__PURE__*/ markType(StackedBarSeriesView, 'StackedBarSeriesView', StackedSeriesView.$);
    return StackedBarSeriesView;
})();
/**
 * @hidden
 */
export let StackedColumnSeriesView = /*@__PURE__*/ (() => {
    class StackedColumnSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        cs() {
            return new StackedColumnBucketCalculator(this);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.qh = Defaults.c;
                this.c0.g1 = Defaults.i;
            }
        }
    }
    StackedColumnSeriesView.$t = /*@__PURE__*/ markType(StackedColumnSeriesView, 'StackedColumnSeriesView', StackedSeriesView.$);
    return StackedColumnSeriesView;
})();
/**
 * @hidden
 */
export let StackedAreaSeriesView = /*@__PURE__*/ (() => {
    class StackedAreaSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.qh = Defaults.e;
            }
        }
    }
    StackedAreaSeriesView.$t = /*@__PURE__*/ markType(StackedAreaSeriesView, 'StackedAreaSeriesView', StackedSeriesView.$);
    return StackedAreaSeriesView;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeriesView = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.qh = Defaults.e;
            }
        }
        c5() {
            let a = 1;
            if (this.c0.cd != null) {
                a = this.c0.cd.gc;
            }
            return Math.max(1 / (a * 3), 0.3);
        }
    }
    StackedSplineAreaSeriesView.$t = /*@__PURE__*/ markType(StackedSplineAreaSeriesView, 'StackedSplineAreaSeriesView', StackedSeriesView.$);
    return StackedSplineAreaSeriesView;
})();
/**
 * @hidden
 */
export let StackedSplineSeriesView = /*@__PURE__*/ (() => {
    class StackedSplineSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.qh = Defaults.e;
            }
        }
        c5() {
            let a = 1;
            if (this.c0.cd != null) {
                a = this.c0.cd.gc;
            }
            return Math.max(1 / (a * 3), 0.3);
        }
    }
    StackedSplineSeriesView.$t = /*@__PURE__*/ markType(StackedSplineSeriesView, 'StackedSplineSeriesView', StackedSeriesView.$);
    return StackedSplineSeriesView;
})();
/**
 * @hidden
 */
export let StackedSeriesManager = /*@__PURE__*/ (() => {
    class StackedSeriesManager extends Base {
        constructor(a) {
            super();
            this.b = null;
            this.f = null;
            this.c = null;
            this.e = null;
            this.d = null;
            this.j = null;
            this.k = null;
            if (a == null) {
                return;
            }
            this.b = a;
            this.f = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.c = new StackedSeriesCollection();
            this.e = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.d = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.j = this.b.tr.c2;
            this.k = this.b.tr.c4;
            let b = this.c;
            b.collectionChanged = delegateCombine(b.collectionChanged, (b, c) => {
                if (c.oldItems != null) {
                    for (let d of fromEn(c.oldItems)) {
                        if (this.f.contains(d.visualSeriesLink)) {
                            this.f.remove(d.visualSeriesLink);
                        }
                    }
                }
                if (c.newItems != null) {
                    let e = c.newStartingIndex;
                    for (let f of fromEn(c.newItems)) {
                        let g = this.a(f);
                        this.f.insert(e, g);
                        e++;
                    }
                }
            });
            let c = this.f;
            c.collectionChanged = delegateCombine(c.collectionChanged, (c, d) => {
                if (d.oldItems != null) {
                    for (let e of fromEn(d.oldItems)) {
                        e.k0(true, e.b0);
                        e.cd = null;
                        e.b8 = null;
                        e.itemsSource = null;
                        e.legend = null;
                        if (this.k != null && this.k.ab.contains(e)) {
                            this.k.ab.remove(e);
                        }
                        if (this.b.cd != null) {
                            this.b.cd.op(e);
                        }
                    }
                }
                if (d.newItems != null) {
                    for (let f of fromEn(d.newItems)) {
                        f.cd = this.b.cd;
                        f.b8 = this.b.b8;
                        if (!this.k.ab.contains(f)) {
                            this.k.ab.add(f);
                        }
                        if (this.b.cd != null) {
                            this.b.cd.lk(f);
                        }
                    }
                }
                this.b.ml(false);
            });
        }
        a(a) {
            if (this.b.isStacked && this.b.d2) {
                let b = new LineFragment();
                b.provideRenderer(a.bw);
                b.parentSeries = this.b;
                a.visualSeriesLink = b;
                b.logicalSeriesLink = a;
                b.b0.bu = this.b.b0.bu;
                this.i(b, a);
                this.g(b);
                return b;
            }
            if (this.b.isStacked && this.b.di) {
                let c = new ColumnFragment();
                c.provideRenderer(a.bw);
                c.parentSeries = this.b;
                a.visualSeriesLink = c;
                c.logicalSeriesLink = a;
                c.b0.bu = this.b.b0.bu;
                this.i(c, a);
                this.g(c);
                return c;
            }
            if (this.b.isStacked && this.b.dg) {
                let d = new BarFragment();
                d.provideRenderer(a.bw);
                d.parentSeries = typeCast(StackedBarSeries.$, this.b);
                a.visualSeriesLink = d;
                d.logicalSeriesLink = a;
                d.b0.bu = this.b.b0.bu;
                this.i(d, a);
                this.g(d);
                return d;
            }
            if (this.b.isStacked && this.b.dd && !this.b.eh) {
                let e = new AreaFragment();
                e.provideRenderer(a.bw);
                e.parentSeries = this.b;
                a.visualSeriesLink = e;
                e.logicalSeriesLink = a;
                e.b0.bu = this.b.b0.bu;
                this.i(e, a);
                this.g(e);
                return e;
            }
            if (this.b.isStacked && this.b.eh && !this.b.dd) {
                let f = new SplineFragment();
                f.provideRenderer(a.bw);
                f.parentSeries = this.b;
                a.visualSeriesLink = f;
                f.logicalSeriesLink = a;
                f.b0.bu = this.b.b0.bu;
                this.i(f, a);
                this.g(f);
                return f;
            }
            if (this.b.isStacked && this.b.eh && this.b.dd) {
                let g = new SplineAreaFragment();
                g.provideRenderer(a.bw);
                g.parentSeries = this.b;
                a.visualSeriesLink = g;
                g.logicalSeriesLink = a;
                g.b0.bu = this.b.b0.bu;
                this.i(g, a);
                this.g(g);
                return g;
            }
            return null;
        }
        i(a, b) {
            a.o7 = b.jp;
            a.pg = b.js;
            a.ph = b.ju;
            a.pi = b.jv;
            if (b.itemsSource == null) {
                a.itemsSource = this.b.itemsSource;
            }
            else {
                a.itemsSource = b.itemsSource;
            }
            a.legend = this.b.a1;
            a.legendItemTemplate = b.gl;
            a.p7 = b.kf;
            a.rj = b.jg;
            a.rk = b.jh;
            a.rl = b.kd;
            a.q3 = b.gm;
            a.qh = b.s;
            a.qm = b.a5;
            a.gt = this.b.gt;
            a._opacity = b.bp;
            a.gr = b.a3;
            a.pc = b.jj;
            a.gv = this.b.gv;
            a.pj = b.jw;
            a.g1 = b.bc;
            a.title = b.ca;
            a.ql = b.am;
            a.t5 = b.e1;
            a._visibility = b.kg;
            a.gs = b.a4;
            a.bt = b.v;
            a.ho = b.bx;
            a.hp = b.by;
            a.cf = b.ab;
            a.sk = b.al;
            a.r4 = b.m;
            a.ca = b.y;
            a.hp = b.by;
            a.cg = b.ac;
            let c = typeCast(AreaFragment.$, a);
            if (c != null) {
                c.fs = b.a2;
            }
            let d = typeCast(SplineAreaFragment.$, a);
            if (d != null) {
                d.fs = b.a2;
            }
            let e = typeCast(ColumnFragment.$, a);
            if (e != null) {
                e.vp = b.a7;
                e.vq = b.a8;
            }
            let f = typeCast(BarFragment.$, a);
            if (f != null) {
                f.vp = b.a7;
                f.vq = b.a8;
            }
            a.toolTip = b.cb;
            a.dn = b.ai;
            a.e9 = b.an;
            b.f4();
            b.f5();
            b.f6();
            b.f7();
        }
        h(a) {
            this.e.clear();
            this.d.clear();
            let b = 0;
            for (let c of fromEnum(this.f)) {
                c.e1 = true;
                c.index = this.b.t2(this.c._inner[b]);
                c.b8 = this.b.b8;
                c.cd = this.b.cd;
                if (this.c._inner[b].at) {
                    this.e.add(c);
                }
                else {
                    this.d.add(c);
                }
                if ((this.b.isStacked && this.b.d2) || (this.b.isStacked && this.b.dd) || (this.b.isStacked && this.b.eh)) {
                    c.t8(this.b.fetchXAxis());
                    c.t9(this.b.fetchYAxis());
                }
                c.ml(a);
                b++;
            }
        }
        g(a) {
            let fragment_ = a;
            fragment_.externalObject = TypeRegistrar.createFromInternal(fragment_, PlatformConstants.Prefix, PlatformConstants.Postfix);
            fragment_.externalObject._implementation = fragment_;
        }
    }
    StackedSeriesManager.$t = /*@__PURE__*/ markType(StackedSeriesManager, 'StackedSeriesManager');
    return StackedSeriesManager;
})();
