/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, runOn, delegateRemove, delegateCombine, markType } from "igniteui-react-core";
import { MinSummaryCalculator } from "igniteui-react-core";
import { MaxSummaryCalculator } from "igniteui-react-core";
import { SumSummaryCalculator } from "igniteui-react-core";
import { AverageSummaryCalculator } from "igniteui-react-core";
import { CountSummaryCalculator } from "igniteui-react-core";
/**
 * @hidden
 */
export let ChartSummaryDescription = /*@__PURE__*/ (() => {
    class ChartSummaryDescription extends Base {
        constructor(a, ..._rest) {
            super();
            this.j = false;
            this.a = 0;
            this.m = null;
            this.g = 0;
            this.n = null;
            this.c = null;
            this.l = null;
            this.provideCalculator = null;
            this.e = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.p = c;
                        this.h = 4;
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.p = c;
                        this.h = d;
                    }
                    break;
            }
        }
        get p() {
            return this.m;
        }
        set p(a) {
            this.m = a;
        }
        get h() {
            return this.g;
        }
        set h(a) {
            this.g = a;
            switch (this.g) {
                case 0:
                    this.d = new MinSummaryCalculator();
                    break;
                case 1:
                    this.d = new MaxSummaryCalculator();
                    break;
                case 2:
                    this.d = new SumSummaryCalculator();
                    break;
                case 3:
                    this.d = new AverageSummaryCalculator();
                    break;
                case 4:
                    this.d = new CountSummaryCalculator();
                    break;
            }
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
        get o() {
            return this.l;
        }
        set o(a) {
            this.l = a;
        }
        equals(a) {
            let b = a;
            if (b == null) {
                return super.equals(a);
            }
            return b.p == this.p && b.h == this.h;
        }
        getHashCode() {
            return Base.getHashCodeStatic(this.p) * 17 + this.h;
        }
        get f() {
            return this.e;
        }
        set f(a) {
            let b = this.e;
            if (b != null) {
                b.provideCalculator = delegateRemove(b.provideCalculator, runOn(this, this.q));
            }
            this.e = a;
            if (this.e != null) {
                let c = this.e;
                c.provideCalculator = delegateCombine(c.provideCalculator, runOn(this, this.q));
            }
        }
        q(a, b) {
            if (this.provideCalculator != null) {
                this.provideCalculator(this, b);
                this.d = b.a;
            }
        }
    }
    ChartSummaryDescription.$t = /*@__PURE__*/ markType(ChartSummaryDescription, 'ChartSummaryDescription');
    return ChartSummaryDescription;
})();
