/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let SeriesRenderManager = /*@__PURE__*/ (() => {
    class SeriesRenderManager extends Base {
        constructor() {
            super(...arguments);
            this.ag = null;
            this.ah = null;
            this.m = 0;
            this.am = null;
            this.ao = 0;
            this.k = 0;
            this.l = 0;
            this.j = 0;
            this.i = 0;
            this.aq = 0;
            this.ap = 0;
            this.ak = null;
            this.al = null;
            this.t = 0;
            this.an = null;
            this.ar = 0;
            this.r = 0;
            this.s = 0;
            this.q = 0;
            this.p = 0;
            this.at = 0;
            this.as = 0;
            this.ai = null;
            this.aj = null;
            this.n = 0;
            this.o = 0;
            this.f = false;
            this.e = false;
            this.ae = null;
            this.af = null;
            this.g = 0;
            this.h = 0;
            this.b = null;
            this.d = null;
        }
        w(a, b, c) {
            this.e = false;
            this.ai = a.pa();
            this.aj = a.pb();
            this.n = 1;
            this.o = a.f4();
            this.ae = this.ai;
            this.af = this.aj;
            this.g = this.n;
            this.h = this.o;
            let d = b;
            this.d = null;
            if (d) {
                this.d = this.c();
                this.d.j = 0;
                this.d.l = 0;
                this.d.m = 0;
                if (a.cd != null && a.bk != 1) {
                    this.d.j = a.cd.a7.maxMarkerHighlightingProgress;
                    this.d.l = a.cd.a7.sumMarkerHighlightingProgress;
                    this.d.m = a.cd.a7.totalHighlightingProgress;
                }
                this.d.a = c;
            }
        }
        c() {
            return null;
        }
        x(a, b, c) {
            this.f = false;
            this.ak = a.o3;
            this.al = a.o6;
            this.t = a.fw;
            this.an = a.pg;
            this.ar = a.ph;
            this.r = 0;
            this.s = 0;
            this.q = 1;
            this.p = a.gt;
            this.at = a.pj;
            this.as = a.pi;
            this.ag = this.ak;
            this.ah = this.al;
            this.m = this.t;
            this.am = this.an;
            this.ao = this.ar;
            this.k = this.r;
            this.l = this.s;
            this.j = this.q;
            this.i = this.p;
            this.aq = this.at;
            this.ap = this.as;
            let d = b;
            this.b = null;
            if (d) {
                this.b = this.a();
                this.b.j = 0;
                this.b.l = 0;
                this.b.m = 0;
                if (a.cd != null && a.bk != 1) {
                    this.b.j = a.cd.a7.maxHighlightingProgress;
                    this.b.l = a.cd.a7.sumHighlightingProgress;
                    this.b.m = a.cd.a7.totalHighlightingProgress;
                }
                this.b.a = c;
            }
        }
        a() {
            return null;
        }
        ad(a, b, c, d, e) {
            let f = this.ag;
            if (e) {
                f = this.ah;
            }
            if (c) {
                a._fill = f;
            }
            else {
                if (b) {
                    a._stroke = f;
                }
                else {
                    a._fill = f;
                    a._stroke = this.ah;
                }
                a.ac = this.m;
                a.ai = this.am;
                a.ad = this.ao;
                if (d) {
                }
            }
            a._opacity = this.j;
        }
        ac(a, b) {
            a._opacity = this.g;
            b.itemBrush = this.ae;
            b.thickness = this.h;
            b.actualItemBrush = b.itemBrush;
            b.outline = this.af;
        }
        u(a, b, c, d, e, f) {
            if (a.bk == 1) {
                return;
            }
            this.j = a.a6.a$i(a, b, this.j, c, d, e, f);
            this.ag = a.a6.a$ak(a, b, this.ag);
            this.ah = a.a6.a$ak(a, b, this.ah);
        }
        v(a, b, c, d, e) {
            if (a.bk == 1) {
                return;
            }
            this.g = a.a6.a$i(a, b, this.g, c, d, e, false);
            this.ae = a.a6.a$ak(a, b, this.ae);
            this.af = a.a6.a$ak(a, b, this.af);
        }
        ab(a) {
            this.ag = this.ak;
            this.ah = this.al;
            this.m = this.t;
            this.am = this.an;
            this.ao = this.ar;
            this.k = this.r;
            this.l = this.s;
            this.j = this.q;
            let b = this.b;
            b.p = this.ag;
            b.q = this.ah;
            b.t = this.m;
            b.u = this.am;
            b.v = this.ao;
            b.r = this.k;
            b.s = this.l;
            b.k = this.j;
            b.e = this.f;
            b.i = a;
            b.d = false;
        }
        z(a, b, c, d, e) {
            let f = this.b;
            this.ag = f.p;
            this.ah = f.q;
            this.m = f.t;
            this.am = f.u;
            this.ao = f.v;
            this.k = f.r;
            this.l = f.s;
            this.j = f.k;
            if (d && !f.d && !c) {
                this.u(a, b, f.m, f.m, f.i, e);
            }
        }
        aa(a) {
            this.ae = this.ai;
            this.af = this.aj;
            this.g = this.n;
            let b = this.d;
            b.p = this.ae;
            b.q = this.af;
            b.k = this.g;
            b.e = this.e;
            b.i = a;
            b.d = false;
        }
        y(a, b, c, d, e, f) {
            let g = this.d;
            this.ae = g.p;
            this.af = g.q;
            this.g = g.k;
            if (d && !g.d && !c) {
                this.v(a, b, e, f, g.i);
            }
        }
    }
    SeriesRenderManager.$t = /*@__PURE__*/ markType(SeriesRenderManager, 'SeriesRenderManager');
    return SeriesRenderManager;
})();
