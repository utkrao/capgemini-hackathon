/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { markType } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Defaults } from "./Defaults";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let PointSeries = /*@__PURE__*/ (() => {
    class PointSeries extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ab = PointSeries.$;
        }
        get_c4() {
            return true;
        }
        bx() {
            return new PointSeriesView(this);
        }
        l2(a) {
            super.l2(a);
            this.vb = a;
        }
        gx() {
            return 0.7;
        }
        qb() {
            if (this.qa == 0) {
                return 2;
            }
            return super.qb();
        }
        ex(a, b) {
            let c = this.pq(this.pt(a), true, false);
            if (this.qk(a, b)) {
                return true;
            }
            return false;
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    PointSeries.$t = /*@__PURE__*/ markType(PointSeries, 'PointSeries', HorizontalAnchoredCategorySeries.$);
    return PointSeries;
})();
/**
 * @hidden
 */
export let PointSeriesView = /*@__PURE__*/ (() => {
    class PointSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.da = a;
        }
        as() {
            super.as();
            if (!this.q) {
                this.b1.qh = Defaults.e;
            }
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.pf = a;
            this.e.gy = 3;
            this.e.gz = 2;
            this.e.g0 = 2;
            this.e.e9 = false;
        }
    }
    PointSeriesView.$t = /*@__PURE__*/ markType(PointSeriesView, 'PointSeriesView', AnchoredCategorySeriesView.$);
    return PointSeriesView;
})();
