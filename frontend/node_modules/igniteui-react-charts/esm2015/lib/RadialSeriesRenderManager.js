/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesRenderManager } from "./SeriesRenderManager";
import { AssigningRadialMarkerStyleEventArgs } from "./AssigningRadialMarkerStyleEventArgs";
import { AssigningRadialStyleEventArgs } from "./AssigningRadialStyleEventArgs";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialSeriesRenderManager = /*@__PURE__*/ (() => {
    class RadialSeriesRenderManager extends SeriesRenderManager {
        constructor() {
            super(...arguments);
            this.ax = 0;
            this.ay = 0;
            this.av = null;
            this.aw = null;
        }
        c() {
            this.av = new AssigningRadialMarkerStyleEventArgs();
            return this.av;
        }
        a() {
            this.aw = new AssigningRadialStyleEventArgs();
            return this.aw;
        }
        az(a, b, c, d, e) {
            this.ax = d;
            this.ay = e;
            this.w(a, b, c);
        }
        a0(a, b, c, d, e) {
            this.ax = d;
            this.ay = e;
            this.x(a, b, c);
        }
        au(a, b) {
            let c = this.ax;
            let d = Math.min(b * c, a - 1);
            let e = Math.min(d + c - 1, a - 1);
            let f = new Array(2);
            f[0] = Math.min(d + this.ay * c, a - 1);
            f[1] = Math.min(e + this.ay * c, a - 1);
            return f;
        }
        a1(a, b, c, d, e, f, g, h, i) {
            if (d == -1) {
                {
                    a.c = false;
                    a.o = 0;
                    a.n = e - 1;
                }
            }
            else {
                {
                    if (i) {
                        a.o = d;
                        a.n = d;
                    }
                    else {
                        let j = this.au(e, d);
                        a.c = false;
                        a.o = j[0];
                        a.n = j[1];
                    }
                }
            }
        }
    }
    RadialSeriesRenderManager.$t = /*@__PURE__*/ markType(RadialSeriesRenderManager, 'RadialSeriesRenderManager', SeriesRenderManager.$);
    return RadialSeriesRenderManager;
})();
