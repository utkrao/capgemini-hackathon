import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { IgrNumericAxisBase } from "./igr-numeric-axis-base";
import { IgrFragmentBase } from "./igr-fragment-base";
import { ColumnFragment } from "./ColumnFragment";
import { toPoint, fromRect } from "igniteui-react-core";
/**
 * Represents one part of a StackedColumnSeries.
*/
export class IgrColumnFragment extends IgrFragmentBase {
    createImplementation() {
        return new ColumnFragment();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the current series shows a column shape.
    */
    get isColumn() {
        return this.i.di;
    }
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred() {
        return this.i.d3;
    }
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusX() {
        return this.i.vp;
    }
    set radiusX(v) {
        this.i.vp = +v;
    }
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusY() {
        return this.i.vq;
    }
    set radiusY(v) {
        this.i.vq = +v;
    }
    /**
     * Gets or sets the effective x-axis for this series.
    */
    get fragmentXAxis() {
        if (this.i.fragmentXAxis == null) {
            return null;
        }
        if (!this.i.fragmentXAxis.externalObject) {
            let e = IgrCategoryAxisBase._createFromInternal(this.i.fragmentXAxis);
            if (e) {
                e._implementation = this.i.fragmentXAxis;
            }
            this.i.fragmentXAxis.externalObject = e;
        }
        return this.i.fragmentXAxis.externalObject;
    }
    /**
     * Gets or sets the effective y-axis for this series.
    */
    get fragmentYAxis() {
        if (this.i.fragmentYAxis == null) {
            return null;
        }
        if (!this.i.fragmentYAxis.externalObject) {
            let e = IgrNumericAxisBase._createFromInternal(this.i.fragmentYAxis);
            if (e) {
                e._implementation = this.i.fragmentYAxis;
            }
            this.i.fragmentYAxis.externalObject = e;
        }
        return this.i.fragmentYAxis.externalObject;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.fragmentXAxis && this.fragmentXAxis._styling) {
            this.fragmentXAxis._styling(container, component, this);
        }
        if (this.fragmentYAxis && this.fragmentYAxis._styling) {
            this.fragmentYAxis._styling(container, component, this);
        }
        this._inStyling = false;
    }
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    */
    getSeriesValueBoundingBox(world) {
        let iv = this.i.pz(toPoint(world));
        return fromRect(iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.hv(toPoint(world));
        return (iv);
    }
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    getItemIndex(world) {
        let iv = this.i.hf(toPoint(world));
        return (iv);
    }
}
