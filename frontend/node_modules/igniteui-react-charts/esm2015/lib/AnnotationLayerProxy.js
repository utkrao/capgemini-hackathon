/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, delegateCombine, delegateRemove, markType } from "igniteui-react-core";
import { IAnnotationLayerProxy_$type } from "./IAnnotationLayerProxy";
import { CrosshairLayer } from "./CrosshairLayer";
import { CalloutLayer } from "./CalloutLayer";
import { DataToolTipLayer } from "./DataToolTipLayer";
/**
 * @hidden
 */
export let AnnotationLayerProxy = /*@__PURE__*/ (() => {
    class AnnotationLayerProxy extends Base {
        matchesType(a) {
            if (!a.dc) {
                return false;
            }
            return true;
        }
        createCrosshairLayer() {
            return new CrosshairLayer();
        }
        setCrosshairHorizontalLineVisibility(a, b) {
            a.t1 = b;
        }
        setCrosshairVerticalLineVisibility(a, b) {
            a.t2 = b;
        }
        setCrosshairHorizontalLineStroke(a, b) {
            a.tr = b;
        }
        setCrosshairVerticalLineStroke(a, b) {
            a.ts = b;
        }
        setCrosshairXAxisForeground(a, b) {
            a.tv = b;
        }
        setCrosshairYAxisForeground(a, b) {
            a.ty = b;
        }
        setCrosshairXAxisBackground(a, b) {
            a.tt = b;
        }
        setCrosshairYAxisBackground(a, b) {
            a.tw = b;
        }
        setCrosshairYAxisPrecision(a, b) {
            a.r0 = b;
        }
        setCrosshairXAxisPrecision(a, b) {
            a.rz = b;
        }
        setCrosshairOnAxesEnabled(a, b) {
            a.ri = b;
        }
        setCrosshairUseInterpolation(a, b) {
            a.rk = b;
        }
        setCrosshairThickness(a, b) {
            a.g1 = b;
        }
        setFinalValuePrecision(a, b) {
            a.rp = b;
        }
        setFinalValueBackground(a, b) {
            a.sj = b;
        }
        setFinalValueForeground(a, b) {
            a.sl = b;
        }
        setContentMemberPath(a, b) {
            a.ts = b;
        }
        setCalloutsAllowedPositions(a, b) {
            a.rn = b;
        }
        setLabelMemberPath(a, b) {
            a.t2 = b;
        }
        setXMemberPath(a, b) {
            a.ud = b;
        }
        setYMemberPath(a, b) {
            a.ug = b;
        }
        setTargetSeries(a, b) {
            a.rr = b;
        }
        setCollisionChannel(a, b) {
            a.tp = b;
        }
        setIsAutoCalloutBehaviorEnabled(a, b) {
            a.sf = b;
        }
        setGreedyCollisionMode(a, b) {
            a.ri = b ? 2 : 0;
        }
        setUseDedicatedLanes(a, b) {
            a.rg = b ? 2 : 0;
        }
        isCalloutLayer(a) {
            if (typeCast(CalloutLayer.$, a) !== null) {
                return true;
            }
            return false;
        }
        isDataToolTipLayer(a) {
            if (typeCast(DataToolTipLayer.$, a) !== null) {
                return true;
            }
            return false;
        }
        addCalloutStyleUpdating(a, b) {
            let c = a;
            c.calloutStyleUpdating = delegateCombine(c.calloutStyleUpdating, b);
        }
        removeCalloutStyleUpdating(a, b) {
            let c = a;
            c.calloutStyleUpdating = delegateRemove(c.calloutStyleUpdating, b);
        }
        addCalloutRenderStyleUpdating(a, b) {
            let c = a;
            c.calloutRenderStyleUpdating = delegateCombine(c.calloutRenderStyleUpdating, b);
        }
        removeCalloutRenderStyleUpdating(a, b) {
            let c = a;
            c.calloutRenderStyleUpdating = delegateRemove(c.calloutRenderStyleUpdating, b);
        }
        setCalloutStyleUpdatingEventEnabled(a, b) {
            a.si = b;
        }
        setCalloutRenderStyleUpdatingEventEnabled(a, b) {
            a.sh = b;
        }
        updateDataToolTipPropertyByName(a, b, c) {
            a.wp(b, c);
        }
    }
    AnnotationLayerProxy.$t = /*@__PURE__*/ markType(AnnotationLayerProxy, 'AnnotationLayerProxy', Base.$, [IAnnotationLayerProxy_$type]);
    return AnnotationLayerProxy;
})();
