import { IgrColorScale } from "./igr-color-scale";
import { IgrScatterTriangulationSeries } from "./igr-scatter-triangulation-series";
import { ScatterAreaSeries } from "./ScatterAreaSeries";
import { toPoint } from "igniteui-react-core";
/**
 * Series class which draws a colored 2D surface based on a triangulation of XY data with numeric values assigned to each point.
*/
export class IgrScatterAreaSeries extends IgrScatterTriangulationSeries {
    createImplementation() {
        return new ScatterAreaSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the current series shows an area shape.
    */
    get isArea() {
        return this.i.dd;
    }
    /**
     * Gets or sets ColorScale used to resolve the color values of points in the series.
    */
    get colorScale() {
        if (this.i.r5 == null) {
            return null;
        }
        if (!this.i.r5.externalObject) {
            let e = IgrColorScale._createFromInternal(this.i.r5);
            if (e) {
                e._implementation = this.i.r5;
            }
            this.i.r5.externalObject = e;
        }
        return this.i.r5.externalObject;
    }
    set colorScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.r5 = null : this.i.r5 = v.i;
    }
    /**
     * Gets or sets the name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
    */
    get colorMemberPath() {
        return this.i.sh;
    }
    set colorMemberPath(v) {
        this.i.sh = v;
    }
    /**
     * Gets actual color scale that is set on ColorScale property or default ColorScale
    */
    get actualColorScale() {
        if (this.i.r4 == null) {
            return null;
        }
        if (!this.i.r4.externalObject) {
            let e = IgrColorScale._createFromInternal(this.i.r4);
            if (e) {
                e._implementation = this.i.r4;
            }
            this.i.r4.externalObject = e;
        }
        return this.i.r4.externalObject;
    }
    set actualColorScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.r4 = null : this.i.r4 = v.i;
    }
    /**
     * Gets or sets the label displayed before series color value in the Data Legend.
    */
    get colorMemberAsLegendLabel() {
        return this.i.sd;
    }
    set colorMemberAsLegendLabel(v) {
        this.i.sd = v;
    }
    /**
     * Gets or sets the unit displayed after series color value in the Data Legend.
    */
    get colorMemberAsLegendUnit() {
        return this.i.sf;
    }
    set colorMemberAsLegendUnit(v) {
        this.i.sf = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {
            return this.colorScale;
        }
        if (this.actualColorScale && this.actualColorScale.name && this.actualColorScale.name == name) {
            return this.actualColorScale;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.colorScale && this.colorScale._styling) {
            this.colorScale._styling(container, component, this);
        }
        if (this.actualColorScale && this.actualColorScale._styling) {
            this.actualColorScale._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.hy(item, memberPathName);
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.hv(toPoint(world));
        return (iv);
    }
    /**
     * Updates ActualColorScale properties when the ColorScale property has changed
    
    */
    updateActualColorScale() {
        this.i.so();
    }
    /**
     * Attaches an image to the view of this series
    
    */
    attachImage(image) {
        this.i.sl(image);
    }
}
