/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
export let FinancialChart = /*@__PURE__*/ (() => {
    class FinancialChart extends XYChart {
        constructor() {
            super();
            this.ad4 = null;
            this.ag2 = null;
            this.ag0 = null;
            this.agx = null;
            this.agz = null;
            this.ag1 = null;
            this.agy = null;
            this.ada = null;
            this.ahk = null;
            this.ahl = null;
            this.ahh = null;
            this.ahm = null;
            this.ahn = null;
            this.ahi = null;
            this.ahj = null;
            this.aes = null;
            this.af2 = 40;
            this.ady = null;
            this.adw = null;
            this.ad0 = null;
            this.ad5 = null;
            this.ahv = null;
            this.aeo = null;
            this.afe = false;
            this.afd = false;
            this.afl = false;
            this.ae0 = false;
            this.ag8 = 10;
            this.af9 = NaN;
            this.agb = NaN;
            this.aga = NaN;
            this.agc = 0;
            this.adg = 0;
            this.adj = 0;
            this.af4 = 3;
            this.af7 = NaN;
            this.af5 = NaN;
            this.af6 = NaN;
            this.af8 = NaN;
            this.adl = 0;
            this.aev = true;
            this.adc = 0;
            this.aew = false;
            this.adq = null;
            this.ads = null;
            this.afn = null;
            this.aey = true;
            this.aex = false;
            this.aez = false;
            this.aep = null;
            this.adn = 1;
            this.ace = null;
            this.acf = null;
            this.acg = null;
            this.ach = null;
            this.acj = null;
            this.aci = null;
            this.acd = null;
            this.acc = null;
            this.af3 = 1;
            this.af1 = 1;
            this.af0 = 2;
            this.afz = 1;
            this.ad2 = null;
            this.ag4 = -2147483648;
            this.afy = 2;
            this.ag7 = 3;
            this.ag5 = 10;
            this.ag3 = 30;
            this.ag6 = 9;
            this.ac7 = null;
            this.ac8 = null;
            this.ac3 = null;
            this.applyCustomIndicators = null;
            this.alp = null;
            this.agd = 1;
            this.aeu = false;
            this.adu = null;
            this.afv = dateMinValue();
            this.afu = dateMaxValue();
            this.afs = null;
            this.q8();
            this.afs = new ObservableCollection$1(Base.$, 0);
            if (this.xAxisBreaks != null) {
                let a = this.xAxisBreaks;
                a.collectionChanged = delegateCombine(a.collectionChanged, (a, b) => this.ale());
            }
            this.akz();
        }
        se(a, b, c) {
            super.se(a, b, c);
            switch (a) {
                case "ToolbarTemplate":
                case "RangeSelectorTemplate":
                    this.adb = new FinancialChartToolbar(this, this.ahs);
                    break;
                case "Toolbar":
                    let d = b;
                    if (d != null) {
                        d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.akm));
                        d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.akp));
                        d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.akq));
                        d.l(null);
                    }
                    if (this.adb != null) {
                        this.adb.ac = this.adi;
                        this.adb.ai = this.di;
                        this.adb.y = this.add;
                        this.adb.al = this.afb;
                        if (this.agz != null) {
                            this.adb.l(this.agz);
                        }
                        let e = this.adb;
                        e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.akm));
                        ;
                        let f = this.adb;
                        f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.akp));
                        let g = this.adb;
                        g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.akq));
                    }
                    break;
                case "ChartType":
                    if (this.adb != null) {
                        this.adb.y = this.add;
                    }
                    break;
                case "VolumeType":
                    if (this.adb != null) {
                        this.adb.ac = this.adi;
                    }
                    break;
                case "TrendLineType":
                    if (this.adb != null) {
                        this.adb.ai = this.di;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.adb == null) {
                        break;
                    }
                    this.adb.al = this.afb;
                    this.setGridRows();
                    break;
            }
        }
        akq(a, b) {
            this.adi = this.adb.ac;
        }
        akp(a, b) {
            this.di = this.adb.ai;
        }
        akm(a, b) {
            this.add = this.adb.y;
        }
        akz() {
            this.ad4 = new IndicatorPane();
            this.adv = TypeRegistrar.create("FinancialLegend");
        }
        provideGrid(a) {
            this.ag2 = a;
            this.alk();
            this.setGridRows();
            if (this.adb != null) {
                this.adb.bg(a);
            }
        }
        onDocumentClick(a) {
            if (this.adb != null) {
                this.adb.bl(a);
            }
        }
        getContext() {
            let a = this.adb.v();
            let b = new FinancialChartContext();
            b.vm = new FinancialChartViewModel();
            b.vm.toolbar = a;
            b.container = this.jt;
            b.toolbarContainer = this.agz;
            b.legendContainer = this.agy;
            b.indicatorsContainer = this.agx;
            b.volumeContainer = this.ag0;
            b.zoomContainer = this.ag1;
            return b;
        }
        provideContainer(a) {
            let b = a;
            if (b != null) {
                let c = "financialChartMainGrid";
                let d = b.createElement("div");
                d.setStyleProperty("width", "100%");
                d.setStyleProperty("height", "100%");
                if (this.adb == null) {
                    this.adb = new FinancialChartToolbar(this, this.ahs);
                }
                this.adb.w.isIndicatorMenuVisible = this.ae2 && this.ae3;
                this.agz = b.getSubRenderer(d);
                this.adb.l(this.agz);
                let e = b.createElement("div");
                e.setStyleProperty("width", "100%");
                e.setStyleProperty("height", "100%");
                let f = b.createElement("div");
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "100%");
                this.agy = b.getSubRenderer(f);
                let g = b.createElement("div");
                g.setStyleProperty("width", "100%");
                g.setStyleProperty("height", "100%");
                this.agx = b.getSubRenderer(g);
                let h = b.createElement("div");
                h.setStyleProperty("width", "100%");
                h.setStyleProperty("height", "100%");
                this.ag0 = b.getSubRenderer(h);
                let i = b.createElement("div");
                i.setStyleProperty("width", "100%");
                i.setStyleProperty("height", "100%");
                this.ag1 = b.getSubRenderer(i);
                a = b.getSubRenderer(e);
            }
            else {
                this.agz = null;
                if (this.adb != null) {
                    this.adb.l(null);
                }
                if (this.aet != null) {
                    this.aet.provideContainer(null);
                    this.aet = null;
                }
                if (this.adv != null) {
                    this.adv.provideContainer(null);
                }
            }
            super.provideContainer(a);
            if (b != null) {
                if (this.volumeChart != null) {
                    this.volumeChart.provideContainer(this.ag0);
                }
                if (this.ad4 != null) {
                    this.ad4.h(this.agx);
                }
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.provideContainer(this.ag1);
                    if (a != null) {
                        this.aj6();
                    }
                    else {
                        this.aet = null;
                    }
                }
                if (this.adv != null) {
                    this.adv.provideContainer(this.agy);
                }
                this.setGridRows();
            }
        }
        ala(a, b, c) {
            if (a != null) {
                a.provideContainer(null);
            }
            if (b != null) {
                b.provideContainer(c);
            }
            this.setGridRows();
        }
        alo(a, b) {
            this.ala(a, b, this.ag1);
            if (b == null) {
                return;
            }
            this.aj6();
        }
        aj6() {
            if (this.ag1 == null) {
                return;
            }
            if (this.aet != null) {
                this.aet.provideContainer(null);
            }
            this.aet = TypeRegistrar.create("ZoomSlider");
            this.aet.provideContainer(this.ag1);
            let a = this.aet;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, (a, b) => {
                if (this.dataChart != null) {
                    this.dataChart.tp = new Rect(0, this.aet.windowRect.left, this.dataChart.s9.top, this.aet.windowRect.width, this.dataChart.s9.height);
                }
            });
            this.aj7();
        }
        alm(a, b) {
            this.ala(a, b, this.ag0);
        }
        setGridRows() {
            if (this.ag2 == null) {
                return;
            }
            let a = new Array(6);
            a[0] = (this.afb ? this.agj : 0) + "px";
            a[1] = this.ae7 ? "min-content" : "0px";
            a[2] = "auto";
            a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
            a[4] = this.volumeChart == null ? "0px" : "100px";
            a[5] = this.zoomSliderChart == null ? "0px" : "100px";
            if (this.aet != null) {
                if (a[5] == "0px") {
                    this.aet.hide();
                }
                else {
                    this.aet.show();
                }
            }
            this.ag2.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin(" ", ...a), "auto", "1fr"));
            this.ag2.setStyleProperty("grid-template-rows", stringJoin(" ", ...a));
            if (this.jt == null) {
                return;
            }
            if (this.dataChart != null) {
                this.dataChart.notifyContainerResized();
            }
            if (this.ad4 != null) {
                this.ad4.f();
            }
            if (this.volumeChart != null) {
                this.volumeChart.notifyContainerResized();
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.notifyContainerResized();
            }
            if (this.aet != null) {
                this.aet.notifySizeChanged();
            }
        }
        rq() {
            super.rq();
            this.vq = 1;
            this.aa5 = 0;
            this.xn = 0;
            this.abz = null;
            this.abs = AxisDefaults.g;
            this.w7 = AxisDefaults.e;
            this.w6 = AxisDefaults.f;
            this.abt = AxisDefaults.j;
            this.abp = null;
            this.alq = AxisDefaults.h;
            this.agw = AxisDefaults.b;
            this.fi = true;
            this.fb = true;
            this.fc = false;
            this.a6 = 0;
            this.hv = Defaults.j;
            this.t0 = Defaults.ae;
            this.tv = Defaults.af;
            this.tw = Defaults.ag;
            this.ig = NaN;
            this.h7 = 40;
            this.fr = true;
            this.fx = false;
            if (this.dataChart != null) {
                let a = this.dataChart.cu.j.e();
                this.acm = a.d;
                this.acn = a.e;
                this.acl = a.d;
                this.alq = this.dataChart.xu;
            }
            let b = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8BDC5C";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8961A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#6DB1FF";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#82E9D9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#EA3C63";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#735656";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#F8CE4F";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#A8A8B7";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#E051A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#FF903B";
                return $ret;
            })()));
            let c = new BrushCollection();
            for (let d of fromEnum(b)) {
                c.add(BrushUtil.m(d, 0.3));
            }
            this.aco = c;
            this.acp = b;
        }
        ak6() {
            if (this.ad4 != null) {
                this.ad4.b = null;
                this.ad4.b = this.indicatorCharts;
            }
            this.setGridRows();
        }
        ak7() {
            this.setGridRows();
        }
        alg() {
            this.ak6();
        }
        aj5() {
            if (this.aet == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
                return;
            }
            let a = this.jt.rootWrapper.width();
            let b = this.dataChart.to.left + this.dataChart.to.width;
            let c = this.dataChart.to.left;
            let d = a - b;
            this.aet.startInset = c - this.aet.trackStartInset;
            this.aet.endInset = d - this.aet.trackEndInset;
            if (this.aet.endInset < 0) {
                let e = this.aet.endInset;
                this.aet.endInset = 0;
                this.dataChart.g1 += (e * -1);
            }
            if (this.aet.startInset < 0) {
                let f = this.aet.startInset;
                this.aet.startInset = 0;
                this.dataChart.gw += (f * -1);
            }
            this.zoomSliderChart.gw = c;
            this.zoomSliderChart.g1 = d;
            this.zoomSliderChart.gj = this.aet.barExtent;
        }
        akw() {
            this.aj5();
        }
        rn(a) {
            super.rn(a);
            if (a != null) {
                a.gi = 0;
            }
        }
        alr(a) {
            return a.s2();
        }
        alu() {
            return this.agy == null ? null : this.alt(this.agy.rootWrapper);
        }
        als(a) {
            if (a == null || a.d == null) {
                return null;
            }
            return this.alt(a.d.rootWrapper);
        }
        alt(a) {
            if (a == null) {
                return null;
            }
            let b = a.getOffset();
            return new Rect(0, b.left, b.top, a.width(), a.height());
        }
        age() {
            if (this.ag2 == null) {
                return NaN;
            }
            let a = this.ag2.getOffset();
            return this.ag2.width() + (a == null ? 0 : a.left);
        }
        ry(source_, a, b) {
            super.ry(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.mg(source_, a, b);
            }
        }
        rz(source_, a, b) {
            super.rz(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.mh(source_, a, b);
            }
        }
        rx(source_) {
            super.rx(source_);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.l9(source_);
            }
        }
        r1(source_, a, b, c) {
            super.r1(source_, a, b, c);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.mi(source_, a, b, c);
            }
        }
        rt(a, b) {
            super.rt(a, b);
            if (this.ae8(a)) {
                a.toolTip = null;
            }
        }
        get adb() {
            return this.ada;
        }
        set adb(a) {
            let b = this.adb;
            if (a != b) {
                this.ada = a;
                this.sc("Toolbar", b, this.adb);
            }
        }
        get ahr() {
            return this.ahk;
        }
        set ahr(a) {
            let b = this.ahr;
            if (a != b) {
                this.ahk = a;
                this.sc("RangeSelectorTemplate", b, this.ahr);
            }
        }
        get ahs() {
            return this.ahl;
        }
        set ahs(a) {
            let b = this.ahs;
            if (a != b) {
                this.ahl = a;
                this.sc("ToolbarTemplate", b, this.ahs);
            }
        }
        get aho() {
            return this.ahh;
        }
        set aho(a) {
            let b = this.aho;
            if (a != b) {
                this.ahh = a;
                this.sc("ChartTypePickerTemplate", b, this.aho);
            }
        }
        get aht() {
            return this.ahm;
        }
        set aht(a) {
            let b = this.aht;
            if (a != b) {
                this.ahm = a;
                this.sc("TrendLineTypePickerTemplate", b, this.aht);
            }
        }
        get ahu() {
            return this.ahn;
        }
        set ahu(a) {
            let b = this.ahu;
            if (a != b) {
                this.ahn = a;
                this.sc("VolumeTypePickerTemplate", b, this.ahu);
            }
        }
        get ahp() {
            return this.ahi;
        }
        set ahp(a) {
            let b = this.ahp;
            if (a != b) {
                this.ahi = a;
                this.sc("IndicatorMenuTemplate", b, this.ahp);
            }
        }
        get ahq() {
            return this.ahj;
        }
        set ahq(a) {
            let b = this.ahq;
            if (a != b) {
                this.ahj = a;
                this.sc("OverlayPickerTemplate", b, this.ahq);
            }
        }
        get aet() {
            return this.aes;
        }
        set aet(a) {
            let b = this.aet;
            if (a != b) {
                this.aes = a;
                this.sc("ZoomSlider", b, this.aet);
            }
        }
        get_h7() {
            return super.get_h7();
        }
        set_h7(a) {
            super.set_h7(a);
        }
        get_fr() {
            return super.get_fr();
        }
        set_fr(a) {
            super.set_fr(a);
        }
        get agj() {
            return this.af2;
        }
        set agj(a) {
            let b = this.agj;
            if (a != b) {
                this.af2 = a;
                this.sc("ToolbarHeight", b, this.agj);
            }
        }
        vf() {
            return this.xAxis;
        }
        vg() {
            return this.yAxis;
        }
        onAttachedToUI() {
            super.onAttachedToUI();
            if (this.aet != null) {
                this.aet.onAttachedToUI();
            }
        }
        onDetachedFromUI() {
            super.onDetachedFromUI();
            if (this.aet != null) {
                this.aet.onDetachedFromUI();
            }
        }
        a9(a) {
            return 20;
        }
        get_ge() {
            return ((() => {
                let $ret = new List$1(DataSeriesType_$type, 0);
                $ret.add(20);
                return $ret;
            })());
        }
        get ge() {
            return this.get_ge();
        }
        get_gd() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleFinancialPriceSeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get gd() {
            return this.get_gd();
        }
        acx(a) {
            return this.acy(a);
        }
        aeb(a) {
            return this.aec(a);
        }
        acw(a) {
            let b = this.acx(0);
            b.name = a;
            return b;
        }
        q4() {
            this.xAxis = this.acw("xAxis");
            this.yAxis = this.aeb(0);
            this.yAxis.name = "yAxis";
            this.volumeAxis = this.aeb(0);
            this.volumeAxis.name = "volumeAxis";
            this.volumeXAxis = this.acw("volumeXAxis");
            this.afp = new List$1(NumericYAxis.$, 0);
            this.afr = new List$1(CategoryAxisBase.$, 0);
            this.indicatorAxis = this.aeb(0);
            this.indicatorAxis.name = "indicatorAxis";
            this.indicatorXAxis = this.acw("indicatorXAxis_0");
            this.afp.add(this.indicatorAxis);
            this.afr.add(this.indicatorXAxis);
            if (this.xAxis.ay == null) {
                this.xAxis.ay = new AxisLabelSettings();
            }
            if (this.yAxis.ay == null) {
                this.yAxis.ay = new AxisLabelSettings();
            }
            if (this.volumeAxis.ay == null) {
                this.volumeAxis.ay = new AxisLabelSettings();
            }
            if (this.volumeXAxis.ay == null) {
                this.volumeAxis.ay = new AxisLabelSettings();
            }
            if (this.indicatorAxis.ay == null) {
                this.indicatorAxis.ay = new AxisLabelSettings();
            }
            if (this.indicatorXAxis.ay == null) {
                this.indicatorXAxis.ay = new AxisLabelSettings();
            }
            this.zoomSliderAxis = this.aeb(0);
            this.zoomSliderAxis.name = "zoomSliderAxis";
            this.zoomSliderXAxis = this.acw("zoomSliderXAxis");
            if (this.zoomSliderAxis.ay == null) {
                this.zoomSliderAxis.ay = new AxisLabelSettings();
            }
            if (this.zoomSliderXAxis.ay == null) {
                this.zoomSliderXAxis.ay = new AxisLabelSettings();
            }
        }
        q0(a, b) {
            let c = typeCast(MarkerSeries.$, a);
            if (c != null) {
                c.qh = this.cm(a, b);
            }
        }
        cl(a) {
            if (a != null) {
                return 1;
            }
            return super.cl(a);
        }
        su(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.lg = true;
                this.yAxis.l7 = 10;
            }
        }
        sx() {
            this.yAxis.lg = this.afi;
            this.yAxis.l7 = this.ahg;
        }
        adf(a) {
            let b;
            if (this.add == 0) {
                if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                    b = 4;
                }
                else {
                    b = 2;
                }
            }
            else {
                b = this.add;
            }
            b = this.ade(b);
            return b;
        }
        ade(a) {
            if ((a == 1 || a == 2)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        ado(a) {
            if ((a == 2 || a == 3)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 5;
            }
            if (a == 5) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 6;
            }
            if (a == 6) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        adh(a) {
            if (a == 2) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 1;
            }
            if (a == 1) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        ah3(a) {
            let b = a.getMemberPathFor(14);
            if (stringIsNullOrEmpty(b)) {
                b = a.getMemberPathFor(11);
            }
            return b;
        }
        acy(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createXAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        aec(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createYAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        aei() {
            return this.cw(1);
        }
        aej() {
            return this.cw(0);
        }
        aeh() {
            return this.cw(2);
        }
        aek() {
            return this.cw(20);
        }
        get ae1() {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        }
        get adz() {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        }
        get ae4() {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        }
        get adx() {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ae2() {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        }
        get ad1() {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ae3() {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        }
        get ad6() {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        }
        cv(a, b) {
            let c = this.ah3(a);
            switch (this.adf(a)) {
                case 3:
                    let d = this.aei();
                    this.adz.setValueMemberPath(d, c);
                    this.adz.setXAxis(d, this.xAxis);
                    this.adz.setYAxis(d, this.yAxis);
                    this.adz.setCategoryMode(d, 1);
                    return d;
                case 4:
                    let e = this.aej();
                    this.adz.setValueMemberPath(e, c);
                    this.adz.setXAxis(e, this.xAxis);
                    this.adz.setYAxis(e, this.yAxis);
                    this.adz.setCategoryMode(e, 1);
                    return e;
                default:
                case 1:
                case 2:
                    let f = this.aek();
                    this.adx.setOpenMemberPath(f, a.getMemberPathFor(11));
                    this.adx.setHighMemberPath(f, a.getMemberPathFor(12));
                    this.adx.setLowMemberPath(f, a.getMemberPathFor(13));
                    this.adx.setCloseMemberPath(f, a.getMemberPathFor(14));
                    this.adx.setVolumeMemberPath(f, a.getMemberPathFor(15));
                    this.adx.setXAxis(f, this.xAxis);
                    this.adx.setYAxis(f, this.yAxis);
                    this.adx.setDisplayType(f, this.add == 1 ? 1 : 0);
                    this.adx.setCategoryMode(f, 1);
                    return f;
            }
        }
        sw() {
            super.sw();
            this.aku(this.xAxis);
            this.ali(false);
            if (this.adi != 0 && this.volumeChart != null) {
                this.ak1();
            }
            this.aku(this.volumeXAxis);
            this.aku(this.indicatorXAxis);
            this.alf();
            this.alh();
            if (this.adp != 0) {
                this.ak2();
                this.aku(this.zoomSliderXAxis);
            }
        }
        aar(a, b) {
            super.aar(a, b);
            a(this.volumeXAxis);
            if (this.afr != null) {
                for (let c of fromEnum(this.afr)) {
                    a(c);
                }
            }
            let d = true;
            switch (b) {
                case "XAxisMajorStroke":
                case "XAxisMajorStrokeThickness":
                    d = false;
                    break;
            }
            if (d) {
                a(this.zoomSliderXAxis);
            }
        }
        aaw(a, b) {
            super.aaw(a, b);
            if (b) {
                a(this.volumeAxis);
                if (this.afp != null) {
                    for (let c of fromEnum(this.afp)) {
                        a(c);
                    }
                }
                a(this.zoomSliderAxis);
            }
        }
        aky(a) {
            let b = typeCast(IZoomableCategoryAxis_$type, this.xAxis);
            if (b != null) {
                a(b);
            }
        }
        aau(a) {
            super.aau(a);
            this.aal(this.volumeXAxis, a);
            this.aal(this.indicatorXAxis, a);
            this.aal(this.zoomSliderXAxis, a);
        }
        aaz(a) {
            super.aaz(a);
            this.aal(this.volumeAxis, a);
            this.aal(this.indicatorAxis, a);
            this.aal(this.zoomSliderAxis, a);
        }
        aax(a) {
            super.aax(a);
            this.aak(this.volumeAxis, a);
            this.aak(this.indicatorAxis, a);
            this.aak(this.zoomSliderAxis, a);
        }
        aas(a) {
            super.aas(a);
            this.aak(this.volumeXAxis, a);
            this.aak(this.indicatorXAxis, a);
            this.aak(this.zoomSliderXAxis, a);
        }
        rm(a) {
            super.rm(a);
            if (a == null) {
                return;
            }
            if (a == this.zoomSliderChart) {
                a.uk = a.un = false;
                a.legend = null;
                if (this.dataChart != null) {
                    a.ag = this.dataChart.ag;
                    a.aj = this.dataChart.aj;
                }
            }
            else {
                SyncManager.d(a, ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = this.aiy();
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })()));
                SyncManager.c(a);
            }
            a.ci = 2;
        }
        aiy() {
            if (this.ahv == null) {
                FinancialChart.ahf++;
                this.ahv = FinancialChart.ahf.toString();
            }
            return this.ahv;
        }
        akg(a, b) {
            this.aj2();
            this.akw();
        }
        aj2() {
            if (this.yAxis.b7()) {
                return;
            }
            let a = this.yAxis.av.bd;
            if (this.adi != 0) {
                a = Math.max(a, this.volumeAxis.av.bd);
            }
            for (let b of fromEnum(this.afp)) {
                a = Math.max(a, b.av.bd);
            }
            this.aj3(a);
        }
        aj3(a) {
            if (this.yAxis.b7()) {
                return;
            }
            this.yAxis.er = this.volumeAxis.er = a;
            for (let b of fromEnum(this.afp)) {
                b.er = a;
            }
            this.zoomSliderAxis.er = this.yAxis.er;
        }
        aj8(a) {
            if (this.indicatorCharts == null) {
                return;
            }
            for (let b = 0; b < this.indicatorCharts.count; b++) {
                let c = this.indicatorCharts._inner[b];
                for (let d = 0; d < c.series.count; d++) {
                    let e = c.series._inner[d];
                    if (!(this.ae6(e))) {
                        continue;
                    }
                    a(c.series._inner[d], b);
                }
            }
        }
        akb(a) {
            if (this.volumeChart == null) {
                return;
            }
            for (let b = 0; b < this.volumeChart.series.count; b++) {
                let c = this.volumeChart.series._inner[b];
                if (c.dc) {
                    continue;
                }
                a(this.volumeChart.series._inner[b], b);
            }
        }
        aj9(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!this.ae8(c)) {
                    continue;
                }
                a(c, b);
            }
        }
        aka(a, b) {
            if (this.dataChart == null) {
                return;
            }
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.ae8(d)) {
                    continue;
                }
                let e = this.ag9(d, c);
                a(d, e);
            }
            if (b) {
                this.akc(a);
            }
        }
        akc(a) {
            if (this.zoomSliderChart == null) {
                return;
            }
            for (let b = 0; b < this.zoomSliderChart.series.count; b++) {
                let c = this.zoomSliderChart.series._inner[b];
                if (c.dc) {
                    continue;
                }
                a(this.zoomSliderChart.series._inner[b], b);
            }
        }
        ag9(a, b) {
            if (a.cb != this.dataChart) {
                return b;
            }
            let c = this.ba == null || this.ba.dataSeries == null ? 0 : this.ba.dataSeries.count;
            let d = this.adt == null ? 0 : this.adt.count;
            return b - (c * d);
        }
        rc(a) {
            super.rc(a);
            this.akb(a);
            this.aj8(a);
            this.akc(a);
        }
        get volumeChart() {
            return this.aeo;
        }
        set volumeChart(a) {
            let b = this.volumeChart;
            if (a != b) {
                this.aeo = a;
                this.sc("VolumeChart", b, this.volumeChart);
            }
        }
        ak1() {
            if (this.dataChart == null) {
                return;
            }
            this.volumeChart.series.clear();
            let a = new List$1(Series.$, 0);
            let b = -1;
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.ae8(d) || d.dc) {
                    continue;
                }
                b++;
                let e;
                let f = this.adi;
                f = this.adh(f);
                switch (f) {
                    case 2:
                        e = this.aej();
                        break;
                    case 3:
                        e = this.aeh();
                        break;
                    default:
                    case 1:
                        e = this.aei();
                        break;
                }
                this.adz.setCategoryMode(e, 1);
                e.name = "volumeSeries_" + b;
                e.itemsSource = d.itemsSource;
                this.adz.setXAxis(e, this.volumeXAxis);
                this.adz.setYAxis(e, this.volumeAxis);
                this.adz.setValueMemberPath(e, this.ba != null && this.ba.dataSeries != null && this.ba.dataSeries.count > b ? this.ba.dataSeries._inner[b].getMemberPathFor(15) : null);
                e.title = d.title + " Volume";
                e.o7 = ArrayExtension.getModulus$1(Brush.$, this.acq, b);
                e.pc = ArrayExtension.getModulus$1(Brush.$, this.acr, b);
                e.g1 = this.agk;
                a.add(e);
            }
            let g = this.ga("volume", false);
            if (g != null) {
                a.o(g);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.volumeChart.series.add(i);
                this.rr(i, h);
            }
        }
        ae5(a) {
            if (!this.ae1) {
                return false;
            }
            return this.adz.matchesType(a);
        }
        ae9(a) {
            if (!this.ae4) {
                return false;
            }
            return this.adx.matchesType(a);
        }
        ae6(a) {
            if (!this.ae2) {
                return false;
            }
            return this.ad1.matchesType(a);
        }
        ae8(a) {
            if (!this.ae3) {
                return false;
            }
            return this.ad6.matchesType(a);
        }
        ak0() {
            if (this.dataChart == null) {
                return;
            }
            let a = 0;
            let b = this.adr == null ? 0 : this.adr.count;
            let c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let d = b + c;
            for (let e = 0; e < d; e++) {
                let f = new List$1(Series.$, 0);
                let g = this.indicatorCharts._inner[e];
                let h = e >= b;
                let i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.adr._inner[e]);
                let j = -1;
                for (let k = 0; k < this.dataChart.series.count; k++) {
                    let l = this.dataChart.series._inner[k];
                    if (this.ae8(l) || l.dc) {
                        continue;
                    }
                    j++;
                    let m;
                    if (h) {
                        let n = this.ael("Custom");
                        this.ad1.handleCustomIndicatorEvent(n, runOn(this, this.ake));
                        m = n;
                    }
                    else {
                        m = this.aen(this.adr._inner[e]);
                    }
                    if (m == null) {
                        continue;
                    }
                    m.name = "indicator_" + a++;
                    this.ad1.setXAxis(m, this.afr._inner[e]);
                    this.ad1.setYAxis(m, this.afp._inner[e]);
                    m.itemsSource = l.itemsSource;
                    this.ad1.setOpenMemberPath(m, this.ba.dataSeries._inner[j].getMemberPathFor(11));
                    this.ad1.setHighMemberPath(m, this.ba.dataSeries._inner[j].getMemberPathFor(12));
                    this.ad1.setLowMemberPath(m, this.ba.dataSeries._inner[j].getMemberPathFor(13));
                    this.ad1.setCloseMemberPath(m, this.ba.dataSeries._inner[j].getMemberPathFor(14));
                    this.ad1.setVolumeMemberPath(m, this.ba.dataSeries._inner[j].getMemberPathFor(15));
                    m.title = l.title + " " + i;
                    m.o7 = ArrayExtension.getModulus$1(Brush.$, this.ack, e);
                    m.g1 = this.agg;
                    if (this.ae6(m)) {
                        this.ad1.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.acl, e));
                        this.ad1.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.ad3, e));
                    }
                    if (this.ahb != -2147483648 && this.ae6(m)) {
                        this.ad1.setPeriodOverride(m, this.ahb);
                    }
                    if (this.ae6(m)) {
                        this.ad1.setSmoothingPeriod(m, this.ahe);
                    }
                    if (this.ae6(m)) {
                        this.ad1.setSignalPeriod(m, this.ahd);
                    }
                    if (this.ae6(m)) {
                        this.ad1.setShortPeriod(m, this.ahc);
                        this.ad1.setLongPeriod(m, this.aha);
                    }
                    this.rr(m, e);
                    f.add(m);
                }
                let o = this.ga(i, false);
                for (let p = 0; p < f.count; p++) {
                    let q = f._inner[p];
                    g.series.add(q);
                }
                if (o != null) {
                    for (let r = 0; r < o.count; r++) {
                        let s = o._inner[r];
                        g.series.add(s);
                        this.rr(s, r);
                    }
                }
            }
        }
        ael(indicatorName_) {
            return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
        }
        aen(a) {
            return this.ael(EnumUtil.getName(FinancialIndicatorType_$type, a));
        }
        ali(a) {
            if (this.adb == null) {
                return;
            }
            let b = this.xAxis;
            if (b.actualMinimumValue > b.actualMaximumValue) {
                return;
            }
            this.adb.as = b.actualMinimumValue;
            this.adb.ar = b.actualMaximumValue;
            if (a) {
                this.adb.au = b.visibleMinimum;
                this.adb.at = b.visibleMaximum;
            }
            this.adb.bn();
        }
        ju() {
            let a = ((() => {
                let $ret = new FinancialChartVisualData();
                $ret.mainChart = super.ju();
                $ret.volumeChart = this.volumeChart == null ? null : this.volumeChart.vw();
                $ret.toolbar = this.adb == null ? null : this.adb.aj();
                $ret.zoomChart = this.zoomSliderChart == null ? null : this.zoomSliderChart.vw();
                return $ret;
            })());
            if (this.indicatorCharts != null) {
                a.indicatorCharts = new List$1(Base.$, 0);
                for (let b of fromEnum(this.indicatorCharts)) {
                    a.indicatorCharts.add1(b.vw());
                }
            }
            if (this.dataChart != null) {
                a.mainChartLeft = this.alr(this.dataChart).x;
                a.mainChartTop = this.alr(this.dataChart).y;
            }
            if (this.volumeChart != null) {
                a.volumeChartLeft = this.alr(this.volumeChart).x;
                a.volumeChartTop = this.alr(this.volumeChart).y;
            }
            if (this.zoomSliderChart != null) {
                a.zoomChartLeft = this.alr(this.zoomSliderChart).x;
                a.zoomChartTop = this.alr(this.zoomSliderChart).y;
            }
            if (this.adb != null) {
                let c = this.als(this.adb);
                a.toolbarLeft = c.left;
                a.toolbarTop = c.top;
                a.toolbarWidth = c.width;
                a.toolbarHeight = c.height;
            }
            if (this.indicatorCharts != null) {
                a.indicatorChartLefts = new List$1(Number_$type, 0);
                a.indicatorChartTops = new List$1(Number_$type, 0);
                for (let d of fromEnum(this.indicatorCharts)) {
                    a.indicatorChartLefts.add(this.alr(d).x);
                    a.indicatorChartTops.add(this.alr(d).y);
                }
            }
            let e = this.alu();
            a.legendLeft = e.left;
            a.legendTop = e.top;
            a.legendWidth = e.width;
            a.legendHeight = e.height;
            a.legend = this.adv == null ? null : this.adv.exportVisualData();
            return a;
        }
        ah0() {
            let a = this.ju();
            a.scaleByViewport();
            return a.serialize();
        }
        aem(overlayName_) {
            return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
        }
        alh() {
            if (this.dataChart == null) {
                return;
            }
            let a = new List$1(Series.$, 0);
            for (let b of fromEnum(this.dataChart.series)) {
                if (this.ae8(b)) {
                    a.add(b);
                }
            }
            for (let c of fromEnum(a)) {
                this.dataChart.series.remove(c);
            }
            if (this.adt == null) {
                return;
            }
            let d = new List$1(Series.$, 0);
            let e = -1;
            for (let f = 0; f < this.dataChart.series.count; f++) {
                let g = this.dataChart.series._inner[f];
                if (this.ae8(g) || g.dc) {
                    continue;
                }
                e++;
                for (let h = 0; h < this.adt.count; h++) {
                    let i = this.adt._inner[h];
                    let j;
                    switch (i) {
                        case 1:
                            j = this.aem(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                        default:
                        case 0:
                            j = this.aem(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                    }
                    j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                    this.ad6.setXAxis(j, this.xAxis);
                    this.ad6.setYAxis(j, this.yAxis);
                    j.itemsSource = g.itemsSource;
                    let k = e * this.adt.count + h;
                    j.o7 = ArrayExtension.getModulus$1(Brush.$, this.aco, k);
                    j.pc = ArrayExtension.getModulus$1(Brush.$, this.acp, k);
                    j.g1 = this.agi;
                    j.title = g.title + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                    let l = g;
                    if (l == null) {
                        continue;
                    }
                    let m = this.ba.dataSeries._inner[e];
                    this.ad6.setOpenMemberPath(j, m.getMemberPathFor(11));
                    this.ad6.setHighMemberPath(j, m.getMemberPathFor(12));
                    this.ad6.setLowMemberPath(j, m.getMemberPathFor(13));
                    this.ad6.setCloseMemberPath(j, m.getMemberPathFor(14));
                    this.ad6.setVolumeMemberPath(j, m.getMemberPathFor(15));
                    d.add(j);
                }
            }
            let n = new Array(this.dataChart.series.count);
            this.dataChart.series.copyTo(n, 0);
            this.dataChart.skipDataCleanup = true;
            this.dataChart.series.clear();
            this.dataChart.skipDataCleanup = false;
            for (let o = 0; o < n.length; o++) {
                n[o].index = -1;
            }
            d.o(n);
            for (let p = 0; p < d.count; p++) {
                let q = d._inner[p];
                this.dataChart.series.add(q);
                this.rr(q, p);
            }
        }
        alf() {
            if (this.afe) {
                return;
            }
            this.afe = true;
            if (this.indicatorCharts != null) {
                let a = this.indicatorCharts;
                this.indicatorCharts = null;
                for (let b of fromEnum(a)) {
                    this.akv(b);
                }
            }
            if ((this.adr == null || this.adr.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
                this.indicatorCharts = null;
                if (this.afp != null) {
                    this.afp.clear();
                }
                if (this.afr != null) {
                    this.afr.clear();
                }
                this.ak6();
                this.alg();
                this.afe = false;
                return;
            }
            if (this.indicatorCharts == null) {
                this.indicatorCharts = new List$1(XamDataChart.$, 0);
            }
            this.indicatorCharts.clear();
            this.afp.clear();
            this.afr.clear();
            let c = this.adr == null ? 0 : this.adr.count;
            let d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let e = c + d;
            for (let f = 0; f < e; f++) {
                let g = new XamDataChart();
                this.indicatorCharts.add(g);
                this.akt(g);
                let h = f >= c;
                if (h) {
                    g.kg = this.customIndicatorNames._inner[f - c];
                }
                else {
                    g.kg = this.ah2(this.adr._inner[f]);
                }
                if (this.indicatorAxis != null) {
                    let i;
                    let j;
                    if (f == 0) {
                        i = this.indicatorAxis;
                        j = this.indicatorXAxis;
                    }
                    else {
                        i = new NumericYAxis();
                        if (!this.indicatorXAxis.cd) {
                            j = this.acx(0);
                        }
                        else {
                            j = this.acx(1);
                        }
                    }
                    j.name = "indicatorXAxis_" + f;
                    i.name = "indicatorAxis_" + f;
                    g.axes.add(i);
                    g.axes.add(j);
                    this.afp.add(i);
                    this.afr.add(j);
                    if (this.e8) {
                        this.aao(i);
                    }
                    if (this.e8) {
                        this.aam(j);
                    }
                }
            }
            this.ak0();
            this.ak6();
            if (this.adb != null) {
                this.adb.ae = this.adr;
            }
            this.aj4();
            this.alg();
            this.afe = false;
        }
        rj() {
            super.rj();
            this.aam(this.xAxis);
            this.aam(this.volumeXAxis);
            if (this.afr != null) {
                for (let a of fromEnum(this.afr)) {
                    this.aam(a);
                }
            }
            this.aao(this.yAxis);
            this.aao(this.volumeAxis);
            if (this.afp != null) {
                for (let b of fromEnum(this.afp)) {
                    this.aao(b);
                }
            }
            this.aam(this.zoomSliderXAxis);
            this.aao(this.zoomSliderAxis);
        }
        get_fw() {
            return !this.afc;
        }
        get afk() {
            return (this.externalObject._dynamicContent);
        }
        aln(a, b) {
            this.ak9(a, b);
            this.aj4();
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
            }
            this.ak2();
            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
            this.ak7();
            this.alo(a, b);
        }
        ak2() {
            if (this.dataChart == null || this.zoomSliderChart == null) {
                return;
            }
            this.zoomSliderChart.series.clear();
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (this.ae8(c) || c.dc) {
                    continue;
                }
                let d;
                let e = this.adp;
                e = this.ado(e);
                let f = this.ag9(c, b);
                if (e == 1) {
                    switch (this.adf(this.ba != null && this.ba.dataSeries != null && this.ba.dataSeries.count > f ? this.ba.dataSeries._inner[f] : null)) {
                        case 1:
                            e = 2;
                            break;
                        case 2:
                            e = 3;
                            break;
                        case 3:
                            e = 4;
                            break;
                        case 4:
                            e = 5;
                            break;
                    }
                }
                switch (e) {
                    case 2:
                        d = this.aek();
                        this.adx.setDisplayType(d, 1);
                        break;
                    case 3:
                        d = this.aek();
                        this.adx.setDisplayType(d, 0);
                        break;
                    case 5:
                        d = this.aej();
                        break;
                    case 6:
                        d = this.aeh();
                        break;
                    default:
                    case 4:
                        d = this.aei();
                        break;
                }
                let g = this.ba != null && this.ba.dataSeries != null && this.ba.dataSeries.count > f ? this.ba.dataSeries._inner[f] : null;
                if (d.dh && !d.dq) {
                    this.adz.setCategoryMode(d, 1);
                    this.adz.setXAxis(d, this.zoomSliderXAxis);
                    this.adz.setYAxis(d, this.zoomSliderAxis);
                    this.adz.setValueMemberPath(d, g == null ? null : this.ah3(g));
                }
                else if (d.dq) {
                    this.adx.setCategoryMode(d, 1);
                    this.adx.setXAxis(d, this.zoomSliderXAxis);
                    this.adx.setYAxis(d, this.zoomSliderAxis);
                    if (g != null) {
                        this.adx.setOpenMemberPath(d, g.getMemberPathFor(11));
                        this.adx.setHighMemberPath(d, g.getMemberPathFor(12));
                        this.adx.setLowMemberPath(d, g.getMemberPathFor(13));
                        this.adx.setCloseMemberPath(d, g.getMemberPathFor(14));
                        this.adx.setVolumeMemberPath(d, g.getMemberPathFor(15));
                    }
                }
                d.name = "zoomSliderSeries_" + f;
                d.itemsSource = c.itemsSource;
                d.title = c.title;
                d.g1 = this.im;
                a.add(d);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.zoomSliderChart.series.add(i);
                this.rr(i, h);
            }
        }
        r6(a, b, c) {
            super.r6(a, b, c);
            if (a == null || !b) {
                return;
            }
            let d = true;
            let e = true;
            switch (c) {
                case "Brushes":
                case "Outlines":
                    d = e = false;
                    break;
            }
            if (this.indicatorCharts != null && d) {
                for (let f of fromEnum(this.indicatorCharts)) {
                    a(f);
                }
            }
            if (this.volumeChart != null && e) {
                a(this.volumeChart);
            }
            if (this.zoomSliderChart != null) {
                a(this.zoomSliderChart);
            }
        }
        ake(a, b) {
            let c = b;
            let d = a;
            let e = -1;
            if (this.indicatorCharts != null) {
                e = this.indicatorCharts.indexOf(d.cb);
            }
            e -= this.adr == null ? 0 : this.adr.count;
            if (this.applyCustomIndicators != null) {
                this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
            }
        }
        alb(a, b, c) {
            if (a != null) {
                if (b != null) {
                    a.axes.remove(b);
                }
                a.axes.add(c);
            }
            if (this.e8) {
                this.aam(c);
            }
        }
        get afj() {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        }
        akf(a, b) {
            this.alf();
        }
        afa(a, b) {
            if (b <= (0)) {
                return false;
            }
            switch (a) {
                case 5: return true;
                case 4:
                case 3: return b >= timeSpanFromDays(365);
                case 2: return b >= timeSpanFromDays(180);
                case 1: return b >= timeSpanFromDays(90);
                case 0: return b >= timeSpanFromDays(30);
            }
            return false;
        }
        ak5() {
            let a = this.ac9 != null ? this.ac9 : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
            let b = new FinancialChartRangeSelectorOptionCollection(0);
            let c = this.xAxis;
            let d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
            for (let e of fromEnum(a)) {
                if (this.afa(e, d)) {
                    b.add(e);
                }
            }
            this.ac8 = b;
            if (this.adb != null) {
                this.adb.u = this.ac8;
            }
        }
        akj(a, b) {
            this.ak5();
        }
        ako(a, b) {
            this.adt = this.adb.ag;
        }
        akn(a, b) {
            this.adr = this.adb.ae;
        }
        akh(a, b) {
            this.alf();
        }
        aki(a, b) {
            this.alh();
        }
        aks(a, b) {
            let c = a;
            if (c.bf == null) {
                return;
            }
            if (this.afc) {
                this.ak4(c.bf);
            }
        }
        akv(a) {
            SyncManager.e(a);
            a.axes.clear();
            a.series.clear();
            a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.akg));
            a.provideContainer(null);
            if (this.volumeChart == null && this.indicatorCharts == null) {
                this.yAxis.er = this.volumeAxis.er = this.indicatorAxis.er = 0;
                this.xAxis.ay.visibility = this.aca;
            }
        }
        akt(a) {
            let b = a != this.zoomSliderChart;
            if (b) {
                if (this.dataChart != null) {
                    a.tp = new Rect(0, this.dataChart.s9.x, a.tp.y, this.dataChart.s9.width, a.tp.height);
                }
                let c = ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = "one";
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })());
                SyncManager.d(a, c);
                SyncManager.c(a);
            }
            a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.akg));
            this.rl(a);
        }
        aj4() {
            if (this.indicatorCharts != null || this.volumeChart != null) {
                this.aak(this.xAxis, (a) => a.visibility = 1);
            }
            for (let a = 0; a < this.afr.count; a++) {
                let b = this.afr._inner[a];
                let c = a < this.afr.count - 1 || this.volumeChart != null;
                this.aak(b, (d) => d.visibility = c ? 1 : 0);
            }
        }
        ak9(a, b) {
            if (a != null) {
                this.akv(a);
            }
            if (b != null) {
                this.akt(b);
            }
        }
        all(a, b) {
            this.ak9(a, b);
            this.aj4();
            if (this.volumeChart != null) {
                if (this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.volumeChart.axes.add(this.volumeXAxis);
                }
                this.ak1();
                this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
            }
            this.alm(a, b);
        }
        akk(a, b) {
            this.alj();
        }
        alj() {
            if (this.adb == null || +(this.adb.au) == +(dateMaxValue()) || +(this.adb.at) == +(dateMinValue()) || this.dataChart == null) {
                return;
            }
            let a = this.xAxis;
            let b = a.getWindowRectForSelection(this.adb.au, this.adb.at);
            if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
                return;
            }
            this.afd = true;
            this.dataChart.tp = new Rect(0, b.left, this.dataChart.tp.top, b.width, this.dataChart.tp.height);
            if (this.aet != null) {
                this.aet.windowRect = this.dataChart.s9;
            }
            if (this.afc) {
                this.ak4(this.dataChart);
            }
            this.afd = false;
        }
        akr(a, b) {
            this.ak5();
            this.ali(!this.afd);
        }
        akd(a, b) {
            if (!this.afd) {
                if (this.afc) {
                    this.ak4(a);
                }
                let c = false;
                let d = this.sh(() => this.ali(true), c);
                c = d.p1;
                if (this.aet != null) {
                    this.aet.windowRect = this.dataChart.s9;
                }
            }
        }
        ald(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (c != -1) {
                this.afd = true;
                a.tp = new Rect(0, d, a.s9.top, c, a.s9.height);
                this.afd = false;
            }
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = new Rect(0, 0, 0, 1, 1);
            let h = new ScalerParams(0, g, g, this.yAxis.cg, a.td);
            for (let i of fromEnum(a.series)) {
                h.b = i.ge();
                let j = i.aq(a.s9);
                let k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                let l = b.ei(j.c, h);
                let m = b.ei(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
            let n = a.s9.width;
            if (c != -1) {
                n = c;
            }
            let o = a.s9.left;
            if (d != -1) {
                o = d;
            }
            if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
                return;
            }
            this.afd = true;
            let p = new Rect(0, o, e, n, f - e);
            a.tp = p;
            this.afd = false;
        }
        alc(a) {
            if (a == null) {
                return;
            }
            if (a == this.dataChart) {
                this.ald(this.dataChart, this.yAxis, -1, -1);
                if (this.volumeChart != null) {
                    this.ald(this.volumeChart, this.volumeAxis, this.dataChart.s9.width, this.dataChart.s9.left);
                }
            }
            else if (a == this.volumeChart) {
                this.ald(this.volumeChart, this.volumeAxis, -1, -1);
                this.ald(this.dataChart, this.yAxis, this.volumeChart.s9.width, this.volumeChart.s9.left);
            }
        }
        ak4(a) {
            this.sg(() => this.alc(a));
        }
        akl(a, b) {
            if (this.afc) {
                this.ak4(a);
            }
        }
        alk() {
            if (!this.afk) {
                return;
            }
            this.aj7();
            if (this.adp == 0) {
                this.zoomSliderChart = null;
            }
            else if (this.zoomSliderChart == null) {
                this.zoomSliderChart = ((() => {
                    let $ret = new XamDataChart();
                    $ret.name = "ZoomSliderChart";
                    return $ret;
                })());
            }
            else {
                this.ak2();
            }
        }
        aj7() {
            let container_ = this.ag1.rootWrapper.getNativeElement();
            let containerParent_ = container_.parentElement;
            if (this.aet != null && containerParent_ != null && !this.afl) {
                this.afl = true;
                if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                    let z_ = this.aet;
                    let f_ = this.externalObject;
                    let sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                    let sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                    sliderInstance_._implementation = z_;
                    sliderComponent_._staticStyling(container_, sliderInstance_, f_);
                }
            }
        }
        ale() {
            if (this.adk != 1) {
                return;
            }
            this.aaq((a) => {
                let b;
                b = a.breaks;
                b.clear();
                if (this.xAxisBreaks == null) {
                    return;
                }
                for (let c of fromEnum(this.xAxisBreaks)) {
                    b.add(c);
                }
            });
        }
        s1(a, b, c) {
            super.s1(a, b, c);
            if (this.ba.dataSeries.count > 0) {
                if (this.adk == 1 && stringIsNullOrEmpty(this.k6)) {
                    this.b0.setXMemberPath(a, c.getMemberPathFor(17));
                }
                if (stringIsNullOrEmpty(this.k8)) {
                    this.b0.setYMemberPath(a, this.ah3(c));
                }
                if (stringIsNullOrEmpty(this.k2)) {
                    this.b0.setLabelMemberPath(a, this.ah3(c));
                }
                if (stringIsNullOrEmpty(this.kz)) {
                    this.b0.setContentMemberPath(a, this.ah3(c));
                }
            }
        }
        ah2(a) {
            switch (a) {
                case 0: return "Absolute Volume Oscillator";
                case 1: return "Accumulation/Distribution Indicator";
                case 2: return "Average Directional Index";
                case 3: return "Average True Range Indicator";
                case 4: return "Bollinger Bandwidth";
                case 5: return "Chaikin Oscillator";
                case 6: return "Chaikin Volatility Indicator";
                case 7: return "Commodity Channel Index";
                case 8: return "Detrended Price Oscillator";
                case 9: return "Ease of Movement Indicator";
                case 10: return "Fast Stochastic Oscillator";
                case 11: return "Force Index Indicator";
                case 12: return "Full Stochastic Oscillator";
                case 13: return "Market Facilitation Index";
                case 14: return "Mass Index Indicator";
                case 15: return "Median Price Indicator";
                case 16: return "Money Flow Index";
                case 17: return "MACD Indicator";
                case 18: return "Negative Volume Index";
                case 19: return "On Balance Volume Indicator";
                case 20: return "Percentage Price Oscillator";
                case 21: return "Percentage Volume Oscillator";
                case 22: return "Positive Volume Index";
                case 23: return "Price Volume Trend";
                case 24: return "ROC - Rate of Change Indicator";
                case 25: return "RSI - Relative Strength Index";
                case 26: return "Slow Stochastic Oscillator";
                case 27: return "Standard Deviation Indicator";
                case 28: return "Stoch RSI";
                case 29: return "TRIX Indicator";
                case 30: return "Typical Price Indicator";
                case 31: return "Ultimate Oscillator";
                case 32: return "Weighted Close Indicator";
                case 33: return "Williams %R Indicator";
                default: return "Unknown";
            }
        }
        aam(a) {
            super.aam(a);
            let b = a;
            this.aku(b);
            if (a.bf != null) {
                for (let c of fromEnum(a.bf.series)) {
                    if (this.ae5(c)) {
                        this.adz.setXAxis(c, b);
                    }
                    else if (this.ae9(c)) {
                        this.adx.setXAxis(c, b);
                    }
                    else if (this.ae6(c)) {
                        this.ad1.setXAxis(c, b);
                    }
                    else if (this.ae8(c)) {
                        this.ad6.setXAxis(c, b);
                    }
                }
            }
            this.aky((d) => {
                d.zoomMaximumCategoryRange = this.agl;
                d.zoomMaximumItemSpan = this.agm;
                d.zoomToCategoryRange = this.agn;
                d.zoomToCategoryStart = this.ago;
                d.zoomToItemSpan = this.agp;
            });
            let d = a == this.zoomSliderXAxis;
            if (d) {
                a.jv = this.alq;
                a.eq = this.agw;
                this.aak(a, (e) => e.visibility = 1);
            }
            let e = a;
            e.minimumValue = this.afx;
            e.maximumValue = this.afw;
            a.b0 = this.aff;
        }
        aao(a) {
            super.aao(a);
            if (a.bf != null && a == this.yAxis) {
                for (let b of fromEnum(a.bf.series)) {
                    if (this.ae5(b)) {
                        this.adz.setYAxis(b, this.yAxis);
                    }
                    else if (this.ae9(b)) {
                        this.adx.setYAxis(b, this.yAxis);
                    }
                    else if (this.ae6(b)) {
                        this.ad1.setYAxis(b, this.yAxis);
                    }
                    else if (this.ae8(b)) {
                        this.ad6.setYAxis(b, this.yAxis);
                    }
                }
            }
            a.k8 = this.afg;
            a.l3 = this.agu;
            a.l2 = this.agt;
            if (a == this.yAxis) {
                a.lz = this.ags;
            }
            let c = a == this.zoomSliderAxis;
            if (c) {
                this.aak(a, (d) => d.visibility = 1);
            }
            a.b0 = this.afh;
        }
        aku(a) {
            a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            a.fz = XYChart.x9(a, this.ba.dataSeries);
            if (this.ba.dataSeries.count > 0) {
                let b = this.ba.dataSeries._inner[0].getMemberPathFor(17);
                a.hx(b);
            }
        }
        rr(a, b) {
            super.rr(a, b);
            if (a == null) {
                return;
            }
            let c = this.zoomSliderChart == a.cb;
            let d = this.dataChart != null && this.dataChart.series.contains(a);
            if ((d || c) && a.d4) {
                a.mq(this.acm != null ? ArrayExtension.getModulus$1(Brush.$, this.acm, b) : null, this.acn != null ? ArrayExtension.getModulus$1(Brush.$, this.acn, b) : null);
            }
            let e = this.ae6(a);
            if (this.ae8(a)) {
                a.o7 = this.aco != null ? ArrayExtension.getModulus$1(Brush.$, this.aco, b) : null;
                a.pc = this.acp != null ? ArrayExtension.getModulus$1(Brush.$, this.acp, b) : null;
                a.g1 = this.agi;
            }
            else if (e) {
                a.o7 = this.ack != null ? ArrayExtension.getModulus$1(Brush.$, this.ack, b) : null;
                a.g1 = this.agg;
            }
            else if (!a.dc && (d || c)) {
                a.o7 = this.aa != null ? ArrayExtension.getModulus$1(Brush.$, this.aa, b) : null;
                a.pc = this.ae != null ? ArrayExtension.getModulus$1(Brush.$, this.ae, b) : null;
            }
            let f = this.volumeChart != null && this.volumeChart == a.cb;
            if (f) {
                a.g1 = this.agk;
            }
            a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.ae7 ? this.adv : null;
        }
        sc(a, b, c) {
            super.sc(a, b, c);
            switch (a) {
                case "YAxisIsLogarithmic":
                    this.yAxis.lg = this.afi;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.lg = this.afi;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.lg = this.afi;
                    }
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.l7 = this.ahg;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.l7 = this.ahg;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.l7 = this.ahg;
                    }
                    break;
                case "VolumeType":
                    let d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                    if (this.adi == 0) {
                        this.volumeChart = null;
                    }
                    else if (this.volumeChart == null) {
                        this.volumeChart = ((() => {
                            let $ret = new XamDataChart();
                            $ret.name = "VolumeChart";
                            return $ret;
                        })());
                    }
                    else {
                        this.ak1();
                    }
                    break;
                case "VolumeChart":
                    this.all(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "DataChart":
                    if (typeCast(XamDataChart.$, b) !== null) {
                        let e = b;
                        e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.akg));
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.akd));
                        e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.akl));
                    }
                    if (this.dataChart != null) {
                        let f = this.dataChart;
                        f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.akg));
                        let g = this.dataChart;
                        g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.akd));
                        let h = this.dataChart;
                        h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.akl));
                    }
                    this.alk();
                    break;
                case "XAxisMode":
                    this.xAxis = this.acx(this.adk);
                    this.xAxis.name = "xAxis";
                    this.volumeXAxis = this.acx(this.adk);
                    this.volumeXAxis.name = "volumeXAxis";
                    this.indicatorXAxis = this.acx(this.adk);
                    this.indicatorXAxis.name = "indicatorXAxis_0";
                    this.zoomSliderXAxis = this.acx(this.adk);
                    this.zoomSliderXAxis.name = "zoomSliderXAxis";
                    this.aak(this.zoomSliderXAxis, (i) => i.visibility = 1);
                    this.aj4();
                    if (this.adk == 1) {
                        this.ale();
                    }
                    break;
                case "YAxisMode":
                    this.yAxis = this.aeb(this.adm);
                    this.yAxis.name = "yAxis";
                    this.zoomSliderAxis = this.aeb(this.adm);
                    this.zoomSliderAxis.name = "zoomSliderAxis";
                    this.volumeAxis = this.aeb(this.adm);
                    this.volumeAxis.name = "volumeAxis";
                    break;
                case "Toolbar":
                    let i = typeCast(FinancialChartToolbar.$, b);
                    if (i != null) {
                        i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.akk));
                        i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.akn));
                        i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.ako));
                    }
                    if (this.adb != null) {
                        this.adb.ae = this.adr;
                        this.adb.ag = this.adt;
                        this.adb.u = this.ac8;
                        this.ali(true);
                        let j = this.adb;
                        j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.akk));
                        let k = this.adb;
                        k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.akn));
                        let l = this.adb;
                        l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.ako));
                    }
                    break;
                case "XAxis":
                    let m = typeCast(CategoryAxisBase.$, b);
                    if (m != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(m);
                        }
                    }
                    let n = typeCast(ITimeRangeSelectorAxis_$type, b);
                    if (n != null) {
                        n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.akr));
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.xAxis);
                    }
                    if (this.e8) {
                        this.aam(this.xAxis);
                        this.q9();
                    }
                    this.ali(false);
                    this.alj();
                    this.ak5();
                    let o = this.xAxis;
                    o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.akr));
                    break;
                case "XAxisZoomMaximumCategoryRange":
                    this.aky((p) => p.zoomMaximumCategoryRange = this.agl);
                    break;
                case "XAxisZoomMaximumItemSpan":
                    this.aky((p) => p.zoomMaximumItemSpan = this.agm);
                    break;
                case "XAxisZoomToCategoryRange":
                    this.aky((p) => p.zoomToCategoryRange = this.agn);
                    break;
                case "XAxisZoomToCategoryStart":
                    this.aky((p) => p.zoomToCategoryStart = this.ago);
                    break;
                case "XAxisZoomToItemSpan":
                    this.aky((p) => p.zoomToItemSpan = this.agp);
                    break;
                case "ChartType":
                    this.sw();
                    break;
                case "VolumeXAxis":
                    this.alb(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                    break;
                case "ZoomSliderXAxis":
                    this.alb(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                    break;
                case "IndicatorXAxis":
                    this.alf();
                    break;
                case "YAxis":
                    let p = typeCast(NumericYAxis.$, b);
                    if (p != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(p);
                        }
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.yAxis);
                    }
                    if (this.e8) {
                        this.aao(this.yAxis);
                        this.aao(this.yAxis);
                    }
                    let q = this.yAxis;
                    q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.aks));
                    break;
                case "VolumeAxis":
                    let r = typeCast(Axis.$, b);
                    if (this.volumeChart != null && r != null) {
                        this.volumeChart.axes.remove(r);
                    }
                    if (this.volumeChart != null && this.volumeAxis != null) {
                        this.volumeChart.axes.add(this.volumeAxis);
                        this.ak1();
                    }
                    if (this.e8) {
                        this.aao(this.volumeAxis);
                    }
                    let s = this.volumeAxis;
                    s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.aks));
                    break;
                case "IndicatorAxis":
                    if (this.indicatorCharts != null) {
                        for (let t = 0; t < this.indicatorCharts.count; t++) {
                            let u = this.indicatorCharts._inner[t];
                            let v = new List$1(Axis.$, 0);
                            for (let w of fromEnum(u.axes)) {
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                            for (let x of fromEnum(v)) {
                                u.axes.remove(x);
                            }
                            let y = null;
                            if (t == 0) {
                                y = this.indicatorAxis;
                            }
                            else if (this.adm == 1) {
                                y = this.aeb(this.adm);
                            }
                            else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                                y = new NumericYAxis();
                            }
                            if (y != null) {
                                u.axes.add(y);
                            }
                            if (this.e8) {
                                this.aao(y);
                            }
                        }
                    }
                    break;
                case "IsWindowSyncedToVisibleRange":
                    if (this.dataChart != null) {
                        this.dataChart.un = this.fx && this.fw;
                    }
                    if (this.volumeChart != null) {
                        this.volumeChart.un = this.fx && this.fw;
                    }
                    if (this.afc) {
                        this.alc(this.dataChart);
                    }
                    else {
                        this.volumeChart.vu = 1;
                    }
                    break;
                case "IndicatorTypes":
                    let z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                    if (z != null) {
                        z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.akh));
                    }
                    let aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                    if (aa != null) {
                        aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.akh));
                    }
                    this.alf();
                    break;
                case "OverlayTypes":
                    let ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                    if (ab != null) {
                        ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.aki));
                    }
                    let ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                    if (ac != null) {
                        ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.aki));
                    }
                    this.alh();
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.aav((ad) => ad.k8 = this.afg);
                    break;
                case "YAxisMinimumValue":
                    this.aaw((ad) => ad.l3 = this.agu, false);
                    break;
                case "YAxisMaximumValue":
                    this.aaw((ad) => ad.l2 = this.agt, false);
                    break;
                case "YAxisInterval":
                    this.aaw((ad) => ad.lz = this.ags, false);
                    break;
                case "Thickness":
                case "ZoomSliderType":
                    this.alk();
                    break;
                case "ZoomSliderChart":
                    if (!this.afj) {
                        return;
                    }
                    this.aln(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.aka((ad, ae) => {
                        if (ad.d4) {
                            ad.mq(this.acm != null ? ArrayExtension.getModulus$1(Brush.$, this.acm, ae) : null, this.acn != null ? ArrayExtension.getModulus$1(Brush.$, this.acn, ae) : null);
                        }
                    }, true);
                    break;
                case "OverlayBrushes":
                    this.aj9((ad, ae) => ad.o7 = this.aco != null ? ArrayExtension.getModulus$1(Brush.$, this.aco, ae) : null);
                    break;
                case "OverlayOutlines":
                    this.aj9((ad, ae) => ad.pc = this.acp != null ? ArrayExtension.getModulus$1(Brush.$, this.acp, ae) : null);
                    break;
                case "OverlayThickness":
                    this.aj9((ad, ae) => ad.g1 = this.agi);
                    break;
                case "OverlayMultiplier":
                    this.aj9((ad, ae) => this.ad6.setMultiplier(ad, this.agh));
                    break;
                case "VolumeBrushes":
                    this.akb((ad, ae) => ad.o7 = ArrayExtension.getModulus$1(Brush.$, this.acq, ae));
                    break;
                case "VolumeOutlines":
                    this.akb((ad, ae) => ad.pc = ArrayExtension.getModulus$1(Brush.$, this.acr, ae));
                    break;
                case "VolumeThickness":
                    this.akb((ad, ae) => ad.g1 = this.agk);
                    break;
                case "IndicatorNegativeBrushes":
                    this.aj8((ad, ae) => this.ad1.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, this.acl, ae)));
                    break;
                case "IndicatorBrushes":
                    this.aj8((ad, ae) => ad.o7 = ArrayExtension.getModulus$1(Brush.$, this.ack, ae));
                    break;
                case "IndicatorThickness":
                    this.aj8((ad, ae) => ad.g1 = this.agg);
                    break;
                case "IndicatorDisplayTypes":
                    this.aj8((ad, ae) => this.ad1.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.ad3, ae)));
                    break;
                case "IndicatorPeriod":
                    this.aj8((ad, ae) => {
                        if (this.ahb == -2147483648) {
                            return;
                        }
                        this.ad1.setPeriodOverride(ad, this.ahb);
                    });
                    break;
                case "IndicatorMultiplier":
                    this.aj8((ad, ae) => this.ad1.setMultiplier(ad, this.agf));
                    break;
                case "IndicatorSmoothingPeriod":
                    this.aj8((ad, ae) => this.ad1.setSmoothingPeriod(ad, this.ahe));
                    break;
                case "IndicatorShortPeriod":
                    this.aj8((ad, ae) => this.ad1.setShortPeriod(ad, this.ahc));
                    break;
                case "IndicatorLongPeriod":
                    this.aj8((ad, ae) => this.ad1.setLongPeriod(ad, this.aha));
                    break;
                case "IndicatorSignalPeriod":
                    this.aj8((ad, ae) => this.ad1.setSignalPeriod(ad, this.ahd));
                    break;
                case "RangeSelectorOptions":
                    let ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                    if (ad != null) {
                        ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.akj));
                    }
                    if (this.ac9 != null) {
                        let ae = this.ac9;
                        ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.akj));
                    }
                    this.ak5();
                    break;
                case "CustomIndicatorNames":
                    let af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                    if (af != null) {
                        af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.akf));
                    }
                    if (this.customIndicatorNames != null) {
                        let ag = this.customIndicatorNames;
                        ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.akf));
                    }
                    this.alf();
                    break;
                case "Legend":
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.legend = null;
                    }
                    break;
                case "Brushes":
                    this.aka((ah, ai) => ah.o7 = this.aa != null ? ArrayExtension.getModulus$1(Brush.$, this.aa, ai) : null, true);
                    break;
                case "Outlines":
                    this.aka((ah, ai) => ah.pc = this.ae != null ? ArrayExtension.getModulus$1(Brush.$, this.ae, ai) : null, true);
                    break;
                case "XAxisLabelVisibility":
                    if (this.aca == 0 && this.zoomSliderXAxis != null) {
                        this.aak(this.zoomSliderXAxis, (ah) => ah.visibility = 1);
                    }
                    this.aj4();
                    break;
                case "YAxisLabelVisibility":
                    if (this.acb != 0 || this.zoomSliderAxis == null) {
                        break;
                    }
                    this.aak(this.zoomSliderAxis, (ah) => ah.visibility = 1);
                    break;
                case "ZoomSliderXAxisMajorStroke":
                    this.zoomSliderXAxis.jv = this.alq;
                    break;
                case "ZoomSliderXAxisMajorStrokeThickness":
                    this.zoomSliderXAxis.eq = this.agw;
                    break;
                case "FinancialChartLegend":
                case "IsLegendVisible":
                    let ah = this.ae7 && this.legend == null;
                    {
                        let ai = (aj, ak) => {
                            if (aj.isUsableInLegend) {
                                aj.legend = ah ? this.adv : null;
                            }
                        };
                        this.aka(ai, false);
                        this.aj9(ai);
                    }
                    break;
                case "ZoomSliderAxis":
                    let aj = typeCast(Axis.$, b);
                    if (aj != null && this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.remove(aj);
                    }
                    if (this.zoomSliderAxis != null) {
                        if (this.zoomSliderChart != null) {
                            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                            this.ak2();
                            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                        }
                        if (this.e8) {
                            this.aao(this.zoomSliderAxis);
                        }
                        this.aak(this.zoomSliderAxis, (ak) => ak.visibility = 1);
                    }
                    break;
                case "XAxisMinimumValue":
                    this.aaq((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.minimumValue = this.afx;
                        }
                    });
                    break;
                case "XAxisMaximumValue":
                    this.aaq((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.maximumValue = this.afw;
                        }
                    });
                    break;
                case FinancialChart.ajb:
                    this.aar((ak) => ak.b0 = this.aff, a);
                    break;
                case FinancialChart.ajm:
                    this.aav((ak) => ak.b0 = this.afh);
                    break;
            }
        }
        get_by() {
            return 1;
        }
        get by() {
            return this.get_by();
        }
        get afi() {
            return this.ae0;
        }
        set afi(a) {
            let b = this.afi;
            if (a != b) {
                this.ae0 = a;
                this.sc("YAxisIsLogarithmic", b, this.afi);
            }
        }
        get ahg() {
            return this.ag8;
        }
        set ahg(a) {
            let b = this.ahg;
            if (a != b) {
                this.ag8 = a;
                this.sc("YAxisLogarithmBase", b, this.ahg);
            }
        }
        get ags() {
            return this.af9;
        }
        set ags(a) {
            let b = this.ags;
            if (a != b) {
                this.af9 = a;
                this.sc("YAxisInterval", b, this.ags);
            }
        }
        get agu() {
            return this.agb;
        }
        set agu(a) {
            let b = this.agu;
            if (a != b) {
                this.agb = a;
                this.sc("YAxisMinimumValue", b, this.agu);
            }
        }
        get agt() {
            return this.aga;
        }
        set agt(a) {
            let b = this.agt;
            if (a != b) {
                this.aga = a;
                this.sc("YAxisMaximumValue", b, this.agt);
            }
        }
        get agv() {
            return this.agc;
        }
        set agv(a) {
            let b = this.agv;
            if (a != b) {
                this.agc = a;
                this.sc("YAxisMinorInterval", b, this.agv);
            }
        }
        get agr() {
            return this.yAxis.lv;
        }
        get agq() {
            return this.yAxis.lu;
        }
        get adi() {
            return this.adg;
        }
        set adi(a) {
            let b = this.adi;
            if (a != b) {
                this.adg = a;
                this.sc("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.adi));
            }
        }
        get adk() {
            return this.adj;
        }
        set adk(a) {
            let b = this.adk;
            if (a != b) {
                this.adj = a;
                this.sc("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.adk));
            }
        }
        get agl() {
            return this.af4;
        }
        set agl(a) {
            let b = this.agl;
            if (a != b) {
                this.af4 = a;
                this.sc("XAxisZoomMaximumCategoryRange", b, this.agl);
            }
        }
        get ago() {
            return this.af7;
        }
        set ago(a) {
            let b = this.ago;
            if (a != b) {
                this.af7 = a;
                this.sc("XAxisZoomToCategoryStart", b, this.ago);
            }
        }
        get agm() {
            return this.af5;
        }
        set agm(a) {
            let b = this.agm;
            if (a != b) {
                this.af5 = a;
                this.sc("XAxisZoomMaximumItemSpan", b, this.agm);
            }
        }
        get agn() {
            return this.af6;
        }
        set agn(a) {
            let b = this.agn;
            if (a != b) {
                this.af6 = a;
                this.sc("XAxisZoomToCategoryRange", b, this.agn);
            }
        }
        get agp() {
            return this.af8;
        }
        set agp(a) {
            let b = this.agp;
            if (a != b) {
                this.af8 = a;
                this.sc("XAxisZoomToItemSpan", b, this.agp);
            }
        }
        get adm() {
            return this.adl;
        }
        set adm(a) {
            let b = this.adm;
            if (a != b) {
                this.adl = a;
                this.sc("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.adm));
            }
        }
        get afb() {
            return this.aev;
        }
        set afb(a) {
            let b = this.afb;
            if (a != b) {
                this.aev = a;
                this.sc("IsToolbarVisible", b, this.afb);
            }
        }
        get add() {
            return this.adc;
        }
        set add(a) {
            let b = this.add;
            if (a != b) {
                this.adc = a;
                this.sc("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.add));
            }
        }
        get_aa5() {
            return super.get_aa5();
        }
        set_aa5(a) {
            super.set_aa5(a);
        }
        get afc() {
            return this.aew;
        }
        set afc(a) {
            let b = this.afc;
            if (a != b) {
                this.aew = a;
                this.sc("IsWindowSyncedToVisibleRange", b, this.afc);
            }
        }
        get adr() {
            return this.adq;
        }
        set adr(a) {
            let b = this.adr;
            if (a != b) {
                this.adq = a;
                this.sc("IndicatorTypes", b, this.adr);
            }
        }
        get adt() {
            return this.ads;
        }
        set adt(a) {
            let b = this.adt;
            if (a != b) {
                this.ads = a;
                this.sc("OverlayTypes", b, this.adt);
            }
        }
        get indicatorCharts() {
            return this.afn;
        }
        set indicatorCharts(a) {
            let b = this.indicatorCharts;
            if (a != b) {
                this.afn = a;
                this.sc("IndicatorCharts", b, this.indicatorCharts);
            }
        }
        get afg() {
            return this.aey;
        }
        set afg(a) {
            let b = this.afg;
            if (a != b) {
                this.aey = a;
                this.sc("YAxisAbbreviateLargeNumbers", b, this.afg);
            }
        }
        get_ig() {
            return super.get_ig();
        }
        set_ig(a) {
            super.set_ig(a);
        }
        get aff() {
            return this.aex;
        }
        set aff(a) {
            let b = this.aff;
            if (a != b) {
                this.aex = a;
                this.sc(FinancialChart.ajb, b, this.aff);
            }
        }
        get afh() {
            return this.aez;
        }
        set afh(a) {
            let b = this.afh;
            if (a != b) {
                this.aez = a;
                this.sc(FinancialChart.ajm, b, this.afh);
            }
        }
        get zoomSliderChart() {
            return this.aep;
        }
        set zoomSliderChart(a) {
            let b = this.zoomSliderChart;
            if (a != b) {
                this.aep = a;
                this.sc("ZoomSliderChart", b, this.zoomSliderChart);
            }
        }
        get zoomSliderAxis() {
            return this.aea;
        }
        set zoomSliderAxis(a) {
            let b = this.zoomSliderAxis;
            if (a != b) {
                this.aea = a;
                this.sc("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        }
        get zoomSliderXAxis() {
            return this.acv;
        }
        set zoomSliderXAxis(a) {
            let b = this.zoomSliderXAxis;
            if (a != b) {
                this.acv = a;
                this.sc("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        }
        get adp() {
            return this.adn;
        }
        set adp(a) {
            let b = this.adp;
            if (a != b) {
                this.adn = a;
                this.sc("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.adp));
            }
        }
        get acm() {
            return this.ace;
        }
        set acm(a) {
            let b = this.acm;
            if (a != b) {
                this.ace = a;
                this.sc("NegativeBrushes", b, this.acm);
            }
        }
        get acn() {
            return this.acf;
        }
        set acn(a) {
            let b = this.acn;
            if (a != b) {
                this.acf = a;
                this.sc("NegativeOutlines", b, this.acn);
            }
        }
        get aco() {
            return this.acg;
        }
        set aco(a) {
            let b = this.aco;
            if (a != b) {
                this.acg = a;
                this.sc("OverlayBrushes", b, this.aco);
            }
        }
        get acp() {
            return this.ach;
        }
        set acp(a) {
            let b = this.acp;
            if (a != b) {
                this.ach = a;
                this.sc("OverlayOutlines", b, this.acp);
            }
        }
        get acr() {
            return this.acj;
        }
        set acr(a) {
            let b = this.acr;
            if (a != b) {
                this.acj = a;
                this.sc("VolumeOutlines", b, this.acr);
            }
        }
        get acq() {
            return this.aci;
        }
        set acq(a) {
            let b = this.acq;
            if (a != b) {
                this.aci = a;
                this.sc("VolumeBrushes", b, this.acq);
            }
        }
        get acl() {
            return this.acd;
        }
        set acl(a) {
            let b = this.acl;
            if (a != b) {
                this.acd = a;
                this.sc("IndicatorNegativeBrushes", b, this.acl);
            }
        }
        get ack() {
            return this.acc;
        }
        set ack(a) {
            let b = this.ack;
            if (a != b) {
                this.acc = a;
                this.sc("IndicatorBrushes", b, this.ack);
            }
        }
        get agk() {
            return this.af3;
        }
        set agk(a) {
            let b = this.agk;
            if (a != b) {
                this.af3 = a;
                this.sc("VolumeThickness", b, this.agk);
            }
        }
        get agi() {
            return this.af1;
        }
        set agi(a) {
            let b = this.agi;
            if (a != b) {
                this.af1 = a;
                this.sc("OverlayThickness", b, this.agi);
            }
        }
        get agh() {
            return this.af0;
        }
        set agh(a) {
            let b = this.agh;
            if (a != b) {
                this.af0 = a;
                this.sc("OverlayMultiplier", b, this.agh);
            }
        }
        get agg() {
            return this.afz;
        }
        set agg(a) {
            let b = this.agg;
            if (a != b) {
                this.afz = a;
                this.sc("IndicatorThickness", b, this.agg);
            }
        }
        get ad3() {
            return this.ad2;
        }
        set ad3(a) {
            let b = this.ad3;
            if (a != b) {
                this.ad2 = a;
                this.sc("IndicatorDisplayTypes", b, this.ad3);
            }
        }
        get ahb() {
            return this.ag4;
        }
        set ahb(a) {
            let b = this.ahb;
            if (a != b) {
                this.ag4 = a;
                this.sc("IndicatorPeriod", b, this.ahb);
            }
        }
        get agf() {
            return this.afy;
        }
        set agf(a) {
            let b = this.agf;
            if (a != b) {
                this.afy = a;
                this.sc("IndicatorMultiplier", b, this.agf);
            }
        }
        get ahe() {
            return this.ag7;
        }
        set ahe(a) {
            let b = this.ahe;
            if (a != b) {
                this.ag7 = a;
                this.sc("IndicatorSmoothingPeriod", b, this.ahe);
            }
        }
        get ahc() {
            return this.ag5;
        }
        set ahc(a) {
            let b = this.ahc;
            if (a != b) {
                this.ag5 = a;
                this.sc("IndicatorShortPeriod", b, this.ahc);
            }
        }
        get aha() {
            return this.ag3;
        }
        set aha(a) {
            let b = this.aha;
            if (a != b) {
                this.ag3 = a;
                this.sc("IndicatorLongPeriod", b, this.aha);
            }
        }
        get ahd() {
            return this.ag6;
        }
        set ahd(a) {
            let b = this.ahd;
            if (a != b) {
                this.ag6 = a;
                this.sc("IndicatorSignalPeriod", b, this.ahd);
            }
        }
        get ac9() {
            return this.ac7;
        }
        set ac9(a) {
            let b = this.ac9;
            if (a != b) {
                this.ac7 = a;
                this.sc("RangeSelectorOptions", b, this.ac9);
            }
        }
        get customIndicatorNames() {
            return this.ac3;
        }
        set customIndicatorNames(a) {
            let b = this.ac3;
            if (a != b) {
                this.ac3 = a;
                this.sc("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        }
        get_fx() {
            return super.get_fx();
        }
        set_fx(a) {
            super.set_fx(a);
        }
        get alq() {
            return this.alp;
        }
        set alq(a) {
            let b = this.alq;
            if (a != b) {
                this.alp = a;
                this.sc("ZoomSliderXAxisMajorStroke", b, this.alq);
            }
        }
        get agw() {
            return this.agd;
        }
        set agw(a) {
            let b = this.agw;
            if (a != b) {
                this.agd = a;
                this.sc("ZoomSliderXAxisMajorStrokeThickness", b, this.agw);
            }
        }
        get ae7() {
            return this.aeu;
        }
        set ae7(a) {
            let b = this.ae7;
            if (a != b) {
                this.aeu = a;
                this.sc("IsLegendVisible", b, this.ae7);
            }
        }
        get adv() {
            return this.adu;
        }
        set adv(a) {
            let b = this.adv;
            if (a != b) {
                this.adu = a;
                this.sc("FinancialChartLegend", b, this.adv);
            }
        }
        get xAxis() {
            return this.acu;
        }
        set xAxis(a) {
            let b = this.xAxis;
            if (a != b) {
                this.acu = a;
                this.sc("XAxis", b, this.xAxis);
            }
        }
        get yAxis() {
            return this.ad9;
        }
        set yAxis(a) {
            let b = this.yAxis;
            if (a != b) {
                this.ad9 = a;
                this.sc("YAxis", b, this.yAxis);
            }
        }
        get volumeAxis() {
            return this.ad8;
        }
        set volumeAxis(a) {
            let b = this.volumeAxis;
            if (a != b) {
                this.ad8 = a;
                this.sc("VolumeAxis", b, this.volumeAxis);
            }
        }
        get volumeXAxis() {
            return this.act;
        }
        set volumeXAxis(a) {
            let b = this.volumeXAxis;
            if (a != b) {
                this.act = a;
                this.sc("VolumeXAxis", b, this.volumeXAxis);
            }
        }
        get indicatorAxis() {
            return this.ad7;
        }
        set indicatorAxis(a) {
            let b = this.indicatorAxis;
            if (a != b) {
                this.ad7 = a;
                this.sc("IndicatorAxis", b, this.indicatorAxis);
            }
        }
        get indicatorXAxis() {
            return this.acs;
        }
        set indicatorXAxis(a) {
            let b = this.indicatorXAxis;
            if (a != b) {
                this.acs = a;
                this.sc("IndicatorXAxis", b, this.indicatorXAxis);
            }
        }
        get afp() {
            return this.afm;
        }
        set afp(a) {
            let b = this.afp;
            if (a != b) {
                this.afm = a;
                this.sc("IndicatorAxes", b, this.afp);
            }
        }
        get afr() {
            return this.afo;
        }
        set afr(a) {
            let b = this.afr;
            if (a != b) {
                this.afo = a;
                this.sc("IndicatorXAxes", b, this.afr);
            }
        }
        get afx() {
            return this.afv;
        }
        set afx(a) {
            let b = this.afx;
            if (+a != +b) {
                this.afv = a;
                this.sc("XAxisMinimumValue", b, this.afx);
            }
        }
        get afw() {
            return this.afu;
        }
        set afw(a) {
            let b = this.afw;
            if (+a != +b) {
                this.afu = a;
                this.sc("XAxisMaximumValue", b, this.afw);
            }
        }
        get xAxisBreaks() {
            return this.afs;
        }
    }
    FinancialChart.$t = /*@__PURE__*/ markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.ahf = 0;
    FinancialChart.ajb = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    FinancialChart.ajm = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return FinancialChart;
})();
/**
 * @hidden
 */
export let FinancialChartToolbar = /*@__PURE__*/ (() => {
    class FinancialChartToolbar extends TemplatedHtmlControl {
        constructor(a, b) {
            super("financialChartToolbar", b, "");
            this.o = null;
            this.r = null;
            this.z = null;
            this.p = null;
            this.w = null;
            this.aq = dateMaxValue();
            this.ap = dateMinValue();
            this.ao = dateMaxValue();
            this.an = dateMinValue();
            this.rangeChanged = null;
            this.chartTypeChanged = null;
            this.trendLineTypeChanged = null;
            this.volumeTypeChanged = null;
            this.indicatorTypesChanged = null;
            this.overlayTypesChanged = null;
            this.x = 0;
            this.ah = 0;
            this.ab = 0;
            this.ad = null;
            this.af = null;
            this.t = null;
            this.ak = false;
            this.o = a;
            this.w = new FinancialChartToolbarViewModel();
            this.s = new FinancialChartRangeSelector(a != null ? a.ahr : null);
            this.aa = new FinancialChartTypePicker(a != null ? a.aho : null);
            this.q = new FinancialChartIndicatorMenu(1, a != null ? a.ahp : null);
        }
        bg(a) {
            let b = a.querySelectorAll(".financialChartToolbarArea");
            if (b != null && b.length > 0) {
                this.g = b[0];
                if (!this.al) {
                    this.g.hide();
                }
            }
            let c = a.querySelectorAll(".financialChartIndicatorMenu");
            if (c != null && c.length > 0) {
                this.q.g = c[0];
            }
            let d = a.querySelectorAll(".financialChartRangeSelector");
            if (d != null && d.length > 0) {
                this.s.g = d[0];
            }
            let e = a.querySelectorAll(".financialChartTypePicker");
            if (e != null && e.length > 0) {
                this.aa.g = e[0];
            }
        }
        bl(a) {
            this.q.u(a);
            this.aa.u(a);
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        }
        bm(a, b, c) {
            switch (a) {
                case "RangeStart":
                    if (this.s != null) {
                        this.s.t = this.as;
                    }
                    break;
                case "RangeEnd":
                    if (this.s != null) {
                        this.s.s = this.ar;
                    }
                    break;
                case "SelectionStart":
                    if (this.s != null) {
                        this.s.v = this.au;
                    }
                    break;
                case "SelectionEnd":
                    if (this.s != null) {
                        this.s.u = this.at;
                    }
                    break;
                case "RangeSelector":
                    let d = b;
                    if (d != null) {
                        d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                    }
                    if (this.s != null) {
                        this.s.t = this.as;
                        this.s.s = this.ar;
                        this.s.o = this.u;
                        this.s.v = this.au;
                        this.s.u = this.at;
                        let e = this.s;
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                    }
                    break;
                case "ChartTypePicker":
                    let f = b;
                    if (f != null) {
                        f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                    }
                    if (this.aa != null) {
                        this.aa.w = this.y;
                        let g = this.aa;
                        g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                    }
                    break;
                case "ChartType":
                    if (this.aa != null) {
                        this.aa.w = this.y;
                    }
                    break;
                case "RangeSelectorOptions":
                    if (this.s != null) {
                        this.s.o = this.u;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.g == null) {
                        break;
                    }
                    if (this.al) {
                        this.g.show();
                    }
                    else {
                        this.g.hide();
                    }
                    break;
                case "IndicatorMenu":
                    let h = typeCast(FinancialChartIndicatorMenu.$, b);
                    if (h != null) {
                        h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                    }
                    if (this.q != null) {
                        let i = this.q;
                        i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                    }
                    break;
                case "IndicatorTypes":
                    if (this.indicatorTypesChanged != null) {
                        this.indicatorTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "OverlayTypes":
                    if (this.overlayTypesChanged != null) {
                        this.overlayTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "TrendLineType":
                    if (this.trendLineTypeChanged != null) {
                        this.trendLineTypeChanged(this, EventArgs.empty);
                    }
                    break;
                case "VolumeType":
                    if (this.volumeTypeChanged != null) {
                        this.volumeTypeChanged(this, EventArgs.empty);
                    }
                    break;
            }
        }
        bh(a, b) {
            this.ag = this.q.z;
            this.ae = this.q.y;
            this.ai = this.q.aa;
            this.ac = this.q.x;
        }
        bi(a, b) {
            this.y = this.aa.w;
            if (this.chartTypeChanged != null) {
                this.chartTypeChanged(this, b);
            }
        }
        bj(a, b) {
            this.au = this.s.v;
            this.at = this.s.u;
            if (this.rangeChanged != null) {
                this.rangeChanged(this, b);
            }
        }
        v() {
            let a = new FinancialChartToolbarContext();
            a.container = this.d;
            a.vm = this.w;
            a.vm.financialChartIndicatorMenu = ((() => {
                let $ret = new FinancialChartIndicatorMenuContext();
                $ret.vm = this.q.p;
                return $ret;
            })());
            a.vm.financialChartTypePicker = ((() => {
                let $ret = new FinancialChartTypePickerContext();
                $ret.vm = this.aa.p;
                return $ret;
            })());
            a.vm.financialChartRangeSelector = ((() => {
                let $ret = new FinancialChartRangeSelectorContext();
                $ret.vm = this.s.q;
                return $ret;
            })());
            return a;
        }
        l(a) {
            super.l(a);
            if (a == null) {
                return;
            }
            this.s.l(a);
            this.aa.l(a);
            this.q.l(a);
            this.bk();
        }
        bk() {
        }
        get au() {
            return this.aq;
        }
        set au(a) {
            let b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        }
        get ar() {
            return this.an;
        }
        set ar(a) {
            let b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        }
        bn() {
            if (this.s != null) {
                this.s.ab();
            }
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            let b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        }
        static am(a, b) {
            if (a == b) {
                return true;
            }
            if ((a == null && b != null) || (a != null && b == null)) {
                return false;
            }
            if (a.count != b.count) {
                return false;
            }
            for (let c of fromEn(a)) {
                if (!b.contains(c)) {
                    return false;
                }
            }
            return true;
        }
        aj() {
            return ((() => {
                let $ret = new FinancialChartToolbarVisualData();
                $ret.rangeSelector = this.s == null ? null : this.s.r();
                return $ret;
            })());
        }
        get u() {
            return this.t;
        }
        set u(a) {
            let b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        }
    }
    FinancialChartToolbar.$t = /*@__PURE__*/ markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
})();
/**
 * @hidden
 */
export let FinancialChartRangeSelector = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelector extends TemplatedHtmlControl {
        constructor(a) {
            super("financialChartRangeSelector", a, "");
            this.q = null;
            this.rangeChanged = null;
            this.p = null;
            this.p = new FinancialChartRangeSelectorView();
            this.q = new FinancialChartRangeSelectorViewModel();
            this.q.onRangeChanged = runOn(this, this.z);
            this.p.c = this.q;
        }
        get v() {
            return this.q.selectionStart;
        }
        set v(a) {
            this.q.selectionStart = a;
        }
        get u() {
            return this.q.selectionEnd;
        }
        set u(a) {
            this.q.selectionEnd = a;
        }
        get t() {
            return this.q.rangeStart;
        }
        set t(a) {
            this.q.rangeStart = a;
        }
        get s() {
            return this.q.rangeEnd;
        }
        set s(a) {
            this.q.rangeEnd = a;
        }
        ab() {
            if (this.q.onPropertiesChanged()) {
                this.p.g(this.q);
            }
        }
        l(a) {
            super.l(a);
            this.p.f(this.d, this.q);
        }
        z() {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, EventArgs.empty);
            }
        }
        r() {
            return this.p.d(this.g);
        }
        get o() {
            return this.q.options;
        }
        set o(a) {
            let b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        }
        aa() {
            if (this.q != null) {
                this.q.ao();
            }
            if (this.p != null) {
                this.p.i(this.o);
            }
        }
    }
    FinancialChartRangeSelector.$t = /*@__PURE__*/ markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
})();
