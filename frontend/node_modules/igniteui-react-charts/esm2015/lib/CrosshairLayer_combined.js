/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { Brush } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { Thickness } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { CrosshairLayerFrame } from "./CrosshairLayerFrame";
import { List$1 } from "igniteui-react-core";
import { Axis } from "./Axis";
import { Dictionary$2 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { Base, Number_$type, enumGetBox, fromEnum, Point_$type, markType, markDep, runOn } from "igniteui-react-core";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { Tuple$2 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { Defaults } from "./Defaults";
import { TranslateTransform } from "igniteui-react-core";
import { LineGeometry } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let CrosshairLayer = /*@__PURE__*/ (() => {
    class CrosshairLayer extends AnnotationLayer {
        constructor() {
            super();
            this.xAxisAnnotationFormatLabel = null;
            this.yAxisAnnotationFormatLabel = null;
            this.rm = null;
            this.rl = null;
            let a = new CrosshairLayerFrame();
            let b = new CrosshairLayerFrame();
            let c = new CrosshairLayerFrame();
            let d = this.ho / 1000;
            this.qa = a;
            this.p9 = b;
            this.qb = c;
            this.ab = CrosshairLayer.$;
        }
        get_db() {
            return true;
        }
        get_c9() {
            return true;
        }
        bx() {
            return new CrosshairLayerView(this);
        }
        l2(a) {
            super.l2(a);
            this.re = a;
        }
        rg() {
            return this.xAxisAnnotationFormatLabel != null;
        }
        rh() {
            return this.yAxisAnnotationFormatLabel != null;
        }
        get tz() {
            return new Thickness(1, this.rp, this.rr, this.rq, this.ro);
        }
        get t0() {
            return new Thickness(1, this.rv, this.rx, this.rw, this.ru);
        }
        qt(a, b) {
            if (this.rf == null || this.rf == a) {
                if (!this.as.c) {
                    this.ml(b);
                }
            }
        }
        qv(a, b) {
            super.qv(a, b);
            let c = a;
            let d = this.rk;
            let e = this.rj;
            c.af.clear();
            c.ag.clear();
            c.ae.clear();
            c.ah.clear();
            AxisAnnotationFrameManager.b(c);
            if (this.qg(this.rf)) {
                this.sw(this.rf, c, d, e);
            }
            else {
                for (let f of fromEnum(this.cd.series)) {
                    if (this.qg(f)) {
                        this.sw(f, c, d, e);
                    }
                    if (f.isStacked) {
                        f.ld((g) => {
                            if (this.qg(g)) {
                                this.sw(g, c, d, e);
                            }
                            return true;
                        });
                    }
                }
            }
        }
        qg(a) {
            if (!super.qg(a)) {
                return false;
            }
            if (this.r5 != null) {
                if (a.dv) {
                    let b = a.jr();
                    if (!Base.equalsStatic(this.r5, b)) {
                        return false;
                    }
                }
                else {
                    if (!Base.equalsStatic(this.r5, a.name)) {
                        return false;
                    }
                }
            }
            let c = this.qo(a);
            if (!c.c) {
                return false;
            }
            return true;
        }
        lv() {
            super.lv();
            if (!this.as.c && !this.cv()) {
                return;
            }
            if (this.cv()) {
                this.sx(this.qb, false);
            }
            else {
                this.sx(this.p9, false);
            }
        }
        sw(a, b, c, d) {
            let e = this.qo(a);
            if (!e.c) {
                return;
            }
            let f = e.d;
            f = a.pq(f, c, d);
            let g = this.o3;
            if (g == null) {
                g = this.o7;
            }
            if (g == null) {
                g = a.o3;
                if (g != null) {
                    g = this.re.cb(g);
                }
            }
            let h = g;
            let i = g;
            if (this.tr != null) {
                h = this.tr;
            }
            if (this.ts != null) {
                i = this.ts;
            }
            b.ae.add(h);
            b.ah.add(i);
            b.af.add(f.y);
            b.ag.add(f.x);
            if (this.ri && !isNaN_(f.y)) {
                AxisAnnotationFrameManager.c(b, f, a, this.cd, this.getEffectiveViewport(), g, this.tt, this.rn, this.tv, this.tu, this.tz, this.rs, this.tw, this.rt, this.ty, this.tx, this.t0, this.ry, this.t2 == 0, this.t1 == 0);
            }
        }
        sx(a, b) {
            let c = false;
            if (this.rl == null) {
                c = true;
                this.rm = new List$1(Axis.$, 0);
                this.rl = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
            }
            AxisAnnotationFrameManager.d(this, a, c, this.rl, this.rm, b, this.rz, this.r0, this.xAxisAnnotationFormatLabel, this.yAxisAnnotationFormatLabel);
        }
        sv(a, b, c, d, e) {
            let f = a.item(b);
            b++;
            if (e) {
                f._stroke = d.ah._inner[c];
                f._fill = d.ah._inner[c];
            }
            else {
                f._stroke = d.ae._inner[c];
                f._fill = d.ae._inner[c];
            }
            f.ac = this.fw;
            f.ai = this.pg;
            f.ad = this.ph;
            return new Tuple$2(Path.$, Number_$type, f, b);
        }
        qy(a, b) {
            super.qy(a, b);
            let c = this.re.b5;
            let d = a;
            let e = d.af.count;
            let f = 0;
            let g = b.bu.left;
            let h = b.bu.right;
            let i = b.bu.top;
            let j = b.bu.bottom;
            let k = this.t2 == 0;
            let l = this.t1 == 0;
            for (let m = 0; m < e; m++) {
                let n = Math.floor(d.af._inner[m]);
                let o = Math.floor(d.ag._inner[m]);
                let p = null;
                if (k) {
                    if (isNaN_(n)) {
                        continue;
                    }
                    let q = this.sv(c, f, m, d, true);
                    p = q.c;
                    f = q.d;
                    let r = new PathGeometry();
                    let s = new PathFigure();
                    s._startPoint = { $type: Point_$type, x: o, y: i };
                    let t = new LineSegment(1);
                    t.c = { $type: Point_$type, x: o, y: j };
                    s._segments.add(t);
                    r.c.add(s);
                    p.ak = r;
                }
                if (l) {
                    if (isNaN_(n)) {
                        continue;
                    }
                    let u = this.sv(c, f, m, d, false);
                    p = u.c;
                    f = u.d;
                    let v = new PathGeometry();
                    let w = new PathFigure();
                    w._startPoint = { $type: Point_$type, x: g, y: n };
                    let x = new LineSegment(1);
                    x.c = { $type: Point_$type, x: h, y: n };
                    w._segments.add(x);
                    v.c.add(w);
                    p.ak = v;
                }
            }
            c.count = f;
            if (this.cv()) {
                this.sx(this.qb, true);
            }
            else {
                this.sx(this.p9, false);
            }
        }
        en() {
            return true;
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (d == null) {
                        if (this.rl != null && this.rl.count > 0) {
                            let e;
                            if (this.cv()) {
                                e = this.qb;
                            }
                            else {
                                e = this.p9;
                            }
                            AxisAnnotationFrameManager.b(e);
                            AxisAnnotationFrameManager.d(this, e, true, this.rl, this.rm, true, this.rz, this.r0, this.xAxisAnnotationFormatLabel, this.yAxisAnnotationFormatLabel);
                        }
                    }
                    break;
                case CrosshairLayer.$$p[1]:
                    this.ml(true);
                    break;
                case CrosshairLayer.$$p[8]:
                    this.ml(true);
                    break;
                case CrosshairLayer.$$p[4]:
                case CrosshairLayer.$$p[5]:
                    this.ml(true);
                    break;
                case CrosshairLayer.$$p[2]:
                case CrosshairLayer.$$p[10]:
                case CrosshairLayer.$$p[9]:
                case CrosshairLayer.$$p[12]:
                case CrosshairLayer.$$p[14]:
                case CrosshairLayer.$$p[16]:
                case CrosshairLayer.$$p[15]:
                case CrosshairLayer.$$p[13]:
                case CrosshairLayer.$$p[17]:
                case CrosshairLayer.$$p[18]:
                case CrosshairLayer.$$p[20]:
                case CrosshairLayer.$$p[22]:
                case CrosshairLayer.$$p[24]:
                case CrosshairLayer.$$p[26]:
                case CrosshairLayer.$$p[25]:
                case CrosshairLayer.$$p[23]:
                case CrosshairLayer.$$p[27]:
                case CrosshairLayer.$$p[28]:
                case CrosshairLayer.$$p[0]:
                case CrosshairLayer.$$p[7]:
                case CrosshairLayer.$$p[6]:
                    this.ml(true);
                    break;
            }
        }
    }
    CrosshairLayer.$t = /*@__PURE__*/ markType(CrosshairLayer, 'CrosshairLayer', AnnotationLayer.$);
    CrosshairLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CrosshairLayer, 'raisePropertyChanged', ['HorizontalLineStroke:tr:sy', [Brush.$, null], 'HorizontalLineVisibility:t1:sz', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'IsAxisAnnotationEnabled:ri:s0', [0, false], 'SkipUnknownValues:rj:s1', [0, true], 'TargetSeriesName:r5:s2', [2, null], 'TargetSeries:rf:s3', [Series.$, null], 'UseInterpolation:rk:s4', [0, true], 'VerticalLineStroke:ts:s5', [Brush.$, null], 'VerticalLineVisibility:t2:s6', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'XAxisAnnotationBackgroundCornerRadius:rn:s7', [1, /*@__PURE__*/ DeviceUtils.g(3)], 'XAxisAnnotationBackground:tt:s8', [Brush.$, null], 'XAxisAnnotationInterpolatedValuePrecision:rz:s9', [1, -1], 'XAxisAnnotationOutline:tu:ta', [Brush.$, null], 'XAxisAnnotationPaddingBottom:ro:tb', [1, NaN], 'XAxisAnnotationPaddingLeft:rp:tc', [1, NaN], 'XAxisAnnotationPaddingRight:rq:td', [1, NaN], 'XAxisAnnotationPaddingTop:rr:te', [1, NaN], 'XAxisAnnotationStrokeThickness:rs:tf', [1, NaN], 'XAxisAnnotationTextColor:tv:tg', [Brush.$, null], 'YAxisAnnotationBackgroundCornerRadius:rt:th', [1, /*@__PURE__*/ DeviceUtils.g(3)], 'YAxisAnnotationBackground:tw:ti', [Brush.$, null], 'YAxisAnnotationInterpolatedValuePrecision:r0:tj', [1, -1], 'YAxisAnnotationOutline:tx:tk', [Brush.$, null], 'YAxisAnnotationPaddingBottom:ru:tl', [1, NaN], 'YAxisAnnotationPaddingLeft:rv:tm', [1, NaN], 'YAxisAnnotationPaddingRight:rw:tn', [1, NaN], 'YAxisAnnotationPaddingTop:rx:to', [1, NaN], 'YAxisAnnotationStrokeThickness:ry:tp', [1, NaN], 'YAxisAnnotationTextColor:ty:tq', [Brush.$, null]]);
    return CrosshairLayer;
})();
/**
 * @hidden
 */
export let CrosshairLayerView = /*@__PURE__*/ (() => {
    class CrosshairLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b4 = null;
            this.b5 = null;
            this.b6 = null;
            this.b4 = a;
            this.b6 = new List$1(Path.$, 0);
        }
        as() {
            super.as();
            this.b5 = ((() => {
                let $ret = new Pool$1(Path.$);
                $ret.create = runOn(this, this.cc);
                $ret.activate = runOn(this, this.b7);
                $ret.disactivate = runOn(this, this.b9);
                $ret.destroy = runOn(this, this.b8);
                return $ret;
            })());
            this.b4.g1 = Defaults.j;
        }
        cc() {
            let a = new Path();
            a.j = new TranslateTransform();
            this.b6.add(a);
            return a;
        }
        b7(a) {
            a._visibility = 0;
        }
        b9(a) {
            a._visibility = 1;
        }
        b8(a) {
            this.b6.remove(a);
        }
        ca(a, b, c, d) {
            if (a.ak == null || a.ak.c.x != d || a.ak.d.x != c) {
                let e = ((() => {
                    let $ret = new LineGeometry();
                    $ret.d = { $type: Point_$type, x: c, y: b };
                    $ret.c = { $type: Point_$type, x: d, y: b };
                    return $ret;
                })());
                a.ak = e;
            }
        }
        cb(a) {
            if (a == null) {
                return a;
            }
            return BrushUtil.l(a, 0.1);
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d && !b) {
                for (let c = 0; c < this.b6.count; c++) {
                    let d = this.b6._inner[c];
                    if (d._visibility == 0) {
                        a.s(d);
                    }
                }
            }
        }
        al(a) {
            super.al(a);
            for (let b = 0; b < this.b6.count; b++) {
                this.e.a8.exportPathData(a, this.b6._inner[b], "crosshairLine", ["Main", "Crosshair"]);
            }
        }
    }
    CrosshairLayerView.$t = /*@__PURE__*/ markType(CrosshairLayerView, 'CrosshairLayerView', AnnotationLayerView.$);
    return CrosshairLayerView;
})();
