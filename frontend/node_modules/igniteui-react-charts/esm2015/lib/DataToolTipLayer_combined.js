/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DependencyProperty } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Base, enumGetBox, EnumUtil, fromEnum, typeCast, String_$type, typeGetValue, Point_$type, Array_$type, markType, markDep, runOn, TypeRegistrar } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { DataToolTipLayerFrame } from "./DataToolTipLayerFrame";
import { Dictionary$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { DataToolTipSeriesInfo } from "./DataToolTipSeriesInfo";
import { DataContext } from "igniteui-react-core";
import { DataTooltipCollisionInfo } from "./DataTooltipCollisionInfo";
import { DeviceUtils } from "igniteui-react-core";
import { HashSet$1 } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_ } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { IOnDemandRender_$type } from "igniteui-react-core";
/**
 * @hidden
 */
export let DataToolTipLayer = /*@__PURE__*/ (() => {
    class DataToolTipLayer extends AnnotationLayer {
        constructor() {
            super();
            this.r1 = 1;
            this.s3 = new Dictionary$2(String_$type, Base.$, 0);
            this.s4 = new List$1(String_$type, 0);
            this.rt = 8;
            this.rx = 11;
            this.sg = null;
            this.r8 = null;
            this.sb = null;
            this.sd = null;
            this.sa = null;
            this.sc = null;
            this.sf = null;
            this.se = null;
            this.r9 = null;
            let a = new DataToolTipLayerFrame();
            let b = new DataToolTipLayerFrame();
            let c = new DataToolTipLayerFrame();
            this.qa = a;
            this.p9 = b;
            this.qb = c;
            this.ab = DataToolTipLayer.$;
        }
        get_db() {
            return true;
        }
        bx() {
            return new DataToolTipLayerView(this);
        }
        l2(a) {
            super.l2(a);
            this.r5 = a;
        }
        get_dl() {
            return true;
        }
        get r2() {
            return this.r1;
        }
        set r2(a) {
            let b = this.r1;
            this.r1 = a;
            if (b != this.r1) {
                this.raisePropertyChanged("ActualGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.r1));
            }
        }
        r4() {
            let a = true;
            let b = true;
            let c = true;
            let d = true;
            if (this.r3 != 0) {
                return this.r3;
            }
            let e = this.rk();
            if (e != null) {
                for (let f of fromEnum(e.da())) {
                    if (!f.dc && !f.ed) {
                        a = false;
                    }
                    if (!f.dc && !f.d7) {
                        b = false;
                    }
                    if (!f.dc && !f.ee) {
                        c = false;
                    }
                    if (!f.dc && !f.eb) {
                        d = false;
                    }
                }
            }
            if (a || b || c || d) {
                return 2;
            }
            return 1;
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case DataToolTipLayer.$$p[37]:
                    this.ml(true);
                    break;
                case DataToolTipLayer.$$p[44]:
                    this.ml(true);
                    break;
                case DataToolTipLayer.$$p[8]:
                    this.r2 = this.r4();
                    break;
                case "ActualGroupingMode":
                    this.ml(true);
                    break;
                case DataToolTipLayer.$$p[6]:
                    this.ru = this.rw();
                    break;
                case DataToolTipLayer.$$p[7]:
                    this.ry = this.r0();
                    break;
                case "SeriesViewer":
                    this.r5.ci();
                    break;
                case DataToolTipLayer.$$p[26]:
                case DataToolTipLayer.$$p[20]:
                case DataToolTipLayer.$$p[5]:
                case DataToolTipLayer.$$p[19]:
                case DataToolTipLayer.$$p[4]:
                case DataToolTipLayer.$$p[45]:
                case DataToolTipLayer.$$p[47]:
                case DataToolTipLayer.$$p[48]:
                case DataToolTipLayer.$$p[49]:
                case DataToolTipLayer.$$p[46]:
                case DataToolTipLayer.$$p[52]:
                case DataToolTipLayer.$$p[51]:
                case DataToolTipLayer.$$p[50]:
                case DataToolTipLayer.$$p[53]:
                case DataToolTipLayer.$$p[54]:
                case DataToolTipLayer.$$p[58]:
                case DataToolTipLayer.$$p[57]:
                case DataToolTipLayer.$$p[56]:
                case DataToolTipLayer.$$p[55]:
                case "ValueTextStyle":
                case DataToolTipLayer.$$p[12]:
                case DataToolTipLayer.$$p[11]:
                case DataToolTipLayer.$$p[9]:
                case DataToolTipLayer.$$p[10]:
                case DataToolTipLayer.$$p[13]:
                case DataToolTipLayer.$$p[18]:
                case DataToolTipLayer.$$p[16]:
                case DataToolTipLayer.$$p[17]:
                case DataToolTipLayer.$$p[14]:
                case DataToolTipLayer.$$p[15]:
                case "HeaderTextStyle":
                case DataToolTipLayer.$$p[30]:
                case "SummaryTitleTextStyle":
                case DataToolTipLayer.$$p[33]:
                case DataToolTipLayer.$$p[32]:
                case DataToolTipLayer.$$p[31]:
                case DataToolTipLayer.$$p[29]:
                case DataToolTipLayer.$$p[36]:
                case "SummaryValueTextStyle":
                case DataToolTipLayer.$$p[28]:
                case DataToolTipLayer.$$p[27]:
                case "SummaryLabelTextStyle":
                case DataToolTipLayer.$$p[35]:
                case DataToolTipLayer.$$p[34]:
                case "SummaryUnitsTextStyle":
                case DataToolTipLayer.$$p[0]:
                case DataToolTipLayer.$$p[1]:
                case DataToolTipLayer.$$p[40]:
                case DataToolTipLayer.$$p[43]:
                case DataToolTipLayer.$$p[41]:
                case DataToolTipLayer.$$p[42]:
                case "UnitsTextStyle":
                case DataToolTipLayer.$$p[39]:
                case DataToolTipLayer.$$p[38]:
                case "TitleTextStyle":
                case DataToolTipLayer.$$p[21]:
                case DataToolTipLayer.$$p[22]:
                case DataToolTipLayer.$$p[23]:
                case "LabelTextStyle":
                    this.wl(b, c, d);
                    break;
            }
        }
        wl(a, b, c) {
            if (!this.s3.containsKey(a)) {
                this.s4.add(a);
                this.s3.addItem(a, c);
            }
            else {
                this.s3.item(a, c);
            }
            this.ml(true);
        }
        wp(a, b) {
            switch (a) {
                case DataToolTipLayer.$$p[8]:
                    this.r3 = EnumUtil.getEnumValue(DataToolTipLayerGroupingMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[24]:
                    this.s8 = b;
                    break;
                case DataToolTipLayer.$$p[25]:
                    this.s9 = b;
                    break;
                case DataToolTipLayer.$$p[2]:
                    this.s6 = b;
                    break;
                case DataToolTipLayer.$$p[3]:
                    this.s7 = b;
                    break;
                case DataToolTipLayer.$$p[6]:
                    this.rv = EnumUtil.getEnumValue(DataTooltipGroupedPositionX_$type, b);
                    break;
                case DataToolTipLayer.$$p[7]:
                    this.rz = EnumUtil.getEnumValue(DataTooltipGroupedPositionY_$type, b);
                    break;
                case DataToolTipLayer.$$p[26]:
                    this.sy = b;
                    break;
                case DataToolTipLayer.$$p[20]:
                    this.ri = b;
                    break;
                case DataToolTipLayer.$$p[5]:
                    this.rd = b;
                    break;
                case DataToolTipLayer.$$p[19]:
                    this.rh = b;
                    break;
                case DataToolTipLayer.$$p[4]:
                    this.rc = b;
                    break;
                case DataToolTipLayer.$$p[45]:
                    this.rm = EnumUtil.getEnumValue(DataAbbreviationMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[47]:
                    this.t8 = typeGetValue(b);
                    break;
                case DataToolTipLayer.$$p[48]:
                    this.t9 = typeGetValue(b);
                    break;
                case DataToolTipLayer.$$p[49]:
                    this.rs = EnumUtil.getEnumValue(DataLegendValueMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[46]:
                    this.v3 = b;
                    break;
                case DataToolTipLayer.$$p[52]:
                    this.s0 = b;
                    break;
                case DataToolTipLayer.$$p[51]:
                    this.v9 = b;
                    break;
                case DataToolTipLayer.$$p[50]:
                    this.rj = b;
                    break;
                case DataToolTipLayer.$$p[53]:
                    this.y0 = b;
                    break;
                case DataToolTipLayer.$$p[54]:
                    this.s1 = b;
                    break;
                case DataToolTipLayer.$$p[58]:
                    this.wi = b;
                    break;
                case DataToolTipLayer.$$p[57]:
                    this.s2 = b;
                    break;
                case DataToolTipLayer.$$p[56]:
                    this.y1 = b;
                    break;
                case DataToolTipLayer.$$p[55]:
                    this.yl = b;
                    break;
                case "ValueTextStyle":
                    this.sp = b;
                    break;
                case DataToolTipLayer.$$p[12]:
                    this.ur = b;
                    break;
                case DataToolTipLayer.$$p[11]:
                    this.rg = b;
                    break;
                case DataToolTipLayer.$$p[9]:
                    this.un = b;
                    break;
                case DataToolTipLayer.$$p[10]:
                    this.rn = EnumUtil.getEnumValue(DataLegendHeaderDateMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[13]:
                    this.ro = EnumUtil.getEnumValue(DataLegendHeaderTimeMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[18]:
                    this.uw = b;
                    break;
                case DataToolTipLayer.$$p[16]:
                    this.yd = b;
                    break;
                case DataToolTipLayer.$$p[17]:
                    this.yu = b;
                    break;
                case DataToolTipLayer.$$p[14]:
                    this.yt = b;
                    break;
                case DataToolTipLayer.$$p[15]:
                    this.sr = b;
                    break;
                case "HeaderTextStyle":
                    this.sh = b;
                    break;
                case DataToolTipLayer.$$p[30]:
                    this.yg = b;
                    break;
                case "SummaryTitleTextStyle":
                    this.sk = b;
                    break;
                case DataToolTipLayer.$$p[33]:
                    this.rq = EnumUtil.getEnumValue(DataLegendSummaryType_$type, b);
                    break;
                case DataToolTipLayer.$$p[32]:
                    this.vf = b;
                    break;
                case DataToolTipLayer.$$p[31]:
                    this.yx = b;
                    break;
                case DataToolTipLayer.$$p[29]:
                    this.yw = b;
                    break;
                case DataToolTipLayer.$$p[36]:
                    this.yi = b;
                    break;
                case "SummaryValueTextStyle":
                    this.sm = b;
                    break;
                case DataToolTipLayer.$$p[28]:
                    this.va = b;
                    break;
                case DataToolTipLayer.$$p[27]:
                    this.yf = b;
                    break;
                case "SummaryLabelTextStyle":
                    this.sj = b;
                    break;
                case DataToolTipLayer.$$p[35]:
                    this.vl = b;
                    break;
                case DataToolTipLayer.$$p[34]:
                    this.yh = b;
                    break;
                case "SummaryUnitsTextStyle":
                    this.sl = b;
                    break;
                case DataToolTipLayer.$$p[0]:
                    this.ys = b;
                    break;
                case DataToolTipLayer.$$p[1]:
                    this.r7 = EnumUtil.getEnumValue(LegendItemBadgeShape_$type, b);
                    break;
                case DataToolTipLayer.$$p[40]:
                    this.rr = EnumUtil.getEnumValue(DataLegendUnitsMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[43]:
                    this.vw = b;
                    break;
                case DataToolTipLayer.$$p[41]:
                    this.yk = b;
                    break;
                case DataToolTipLayer.$$p[42]:
                    this.yz = b;
                    break;
                case "UnitsTextStyle":
                    this.so = b;
                    break;
                case DataToolTipLayer.$$p[39]:
                    this.yy = b;
                    break;
                case DataToolTipLayer.$$p[38]:
                    this.yj = b;
                    break;
                case "TitleTextStyle":
                    this.sn = b;
                    break;
                case DataToolTipLayer.$$p[21]:
                    this.rp = EnumUtil.getEnumValue(DataLegendLabelMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[22]:
                    this.ye = b;
                    break;
                case DataToolTipLayer.$$p[23]:
                    this.yv = b;
                    break;
                case "LabelTextStyle":
                    this.si = b;
                    break;
            }
        }
        wm(a) {
            for (let b = 0; b < this.s4.count; b++) {
                let c = this.s4._inner[b];
                a.updatePropertyByName(c, this.s3.item(c));
            }
        }
        qs(a, b) {
            {
                if (!this.as.c) {
                    this.ml(b);
                }
            }
        }
        qt(a, b) {
            if (!this.as.c) {
                this.ml(b);
            }
        }
        qv(a, b) {
            super.qv(a, b);
            this.r1 = this.r4();
            let c = a;
            let d = this.r5.b6;
            let e = this.sz;
            let f = false;
            c.m.clear();
            c.i.clear();
            c.l.clear();
            c.g.clear();
            c.f.clear();
            c.k.clear();
            c.j.clear();
            c.h.clear();
            if (isNaN_(this.q9.x) && isNaN_(this.q9.y)) {
                d.count = 0;
                return;
            }
            {
                if (this.r2 == 2) {
                    let g = 0;
                    {
                        for (let h of fromEnum(this.cd.series)) {
                            if (this.qg(h)) {
                                this.wo(h, c, e, f, g);
                                g++;
                            }
                            if (h.isStacked) {
                                h.ld((i) => {
                                    if (this.qg(i)) {
                                        this.wo(i, c, e, f, g);
                                        g++;
                                    }
                                    return true;
                                });
                            }
                        }
                        this.wk(c);
                    }
                    d.count = g;
                }
                else {
                    let i = this.rk();
                    let j = this.s5(i);
                    let k = this.r6(i, j, e);
                    this.wn(k, c, e);
                }
            }
        }
        s5(a) {
            let b = new List$1(Series.$, 0);
            if (a == null) {
                return b;
            }
            for (let c of fromEnum(a.dd)) {
                b.add(c);
            }
            return b;
        }
        rk() {
            if (this.rl != null) {
                return this.rl;
            }
            if (this.cd == null) {
                return null;
            }
            for (let a of fromEnum(this.cd.series)) {
                if (a.dh) {
                    let b = a.ar();
                    if (b != null && b.cn()) {
                        return b;
                    }
                }
            }
            for (let c of fromEnum(this.cd.series)) {
                if (!c.dh) {
                    let d = c.ag();
                    let e = d != null && d.length > 0 ? d[0] : null;
                    if (e != null && e.cn()) {
                        return e;
                    }
                }
            }
            return null;
        }
        r6(a, b, c) {
            let d = 1.7976931348623157E+308;
            let e = -1.7976931348623157E+308;
            let f = new List$1(DataContext.$, 0);
            let g = new List$1(Base.$, 0);
            let h = false;
            let i = true;
            let j = { $type: Point_$type, x: NaN, y: NaN };
            let k = 0;
            let l = 0;
            for (let m = 0; m < b.count; m++) {
                let n = b.item(m);
                k = n.cd.l;
                l = n.cd.m;
                if (n.dh) {
                    let o = n;
                    let p = new List$1(Series.$, 0);
                    if (o.isStacked) {
                        o.ld((q) => {
                            p.add(q);
                            return true;
                        });
                    }
                    else {
                        p.add(o);
                    }
                    for (let q = 0; q < p.count; q++) {
                        let r = p._inner[q];
                        let s = p._inner[q];
                        if (!r.categoryAxis.cn()) {
                            continue;
                        }
                        if (i) {
                            h = s.isVertical;
                        }
                        else {
                            if (h != s.isVertical) {
                                continue;
                            }
                        }
                        let t = this.qo(s);
                        if (!t.c) {
                            continue;
                        }
                        j = s.pl(t.d);
                        let u = s.pq(t.d, c, false);
                        if (h) {
                            if (!isNaN_(u.y)) {
                                d = Math.min(d, u.y);
                                e = Math.max(e, u.y);
                            }
                        }
                        else {
                            if (!isNaN_(u.x)) {
                                d = Math.min(d, u.x);
                                e = Math.max(e, u.x);
                            }
                        }
                    }
                }
                else {
                    let v = n.ag();
                    for (let w = 0; w < v.length; w++) {
                        if (!v[w].cn()) {
                            continue;
                        }
                    }
                    let x = n.pq(this.q9, c, false);
                    j = n.pl(this.q9);
                    if (h) {
                        if (!isNaN_(x.y)) {
                            d = Math.min(d, x.y);
                            e = Math.max(e, x.y);
                        }
                    }
                    else {
                        if (!isNaN_(x.x)) {
                            d = Math.min(d, x.x);
                            e = Math.max(e, x.x);
                        }
                    }
                }
                let y = null;
                let z = n.hv(this.q9);
                if (n.dm && z != null) {
                    y = n.au(z);
                }
                else {
                    y = new DataContext();
                    y.item = z;
                    y.series = n;
                }
                f.add(y);
            }
            let aa = 0;
            let ab = 0;
            if (h) {
                ab = (d + e) / 2;
                aa = this.p3.right;
                if (!isNaN_(j.x)) {
                    aa = j.x;
                }
                if (ab < 0 || ab > this.p3.bottom) {
                    ab = NaN;
                }
            }
            else {
                aa = (d + e) / 2;
                if (!isNaN_(j.y)) {
                    ab = j.y;
                }
                if (aa < 0 || aa > this.p3.right) {
                    aa = NaN;
                }
            }
            let ac = new DataToolTipSeriesInfo();
            ac.f = { $type: Point_$type, x: aa, y: ab };
            ac.e = { $type: Point_$type, x: j.x, y: j.y };
            ac.b = f;
            ac.a = h;
            return ac;
        }
        lg() {
            this.q9 = { $type: Point_$type, x: NaN, y: NaN };
            this.ml(false);
            this.r5.cg(false);
        }
        lh() {
            this.q9 = { $type: Point_$type, x: NaN, y: NaN };
            this.ml(false);
            this.r5.cg(true);
        }
        get yp() {
            let a = RectUtil.n(this.b0.bu);
            let b = new Size(1, this.b0.bu.width, this.b0.bu.height);
            return new Rect(3, a, b);
        }
        get yo() {
            let a = RectUtil.n(this.b0.bu);
            let b = new Size(1, this.b0.bu.width, this.b0.bu.height);
            return new Rect(3, this.r5.cj(a), b);
        }
        get yn() {
            let a = new Rect(0, 0, 0, this.cd.m, this.cd.l);
            let b = RectUtil.n(a);
            let c = new Size(1, a.width, a.height);
            return new Rect(3, this.r5.cj(b), c);
        }
        get yr() {
            let a = { $type: Point_$type, x: 0, y: 0 };
            return new Rect(3, a, this.r5.co());
        }
        yq() {
            return this.yp;
        }
        sv(a, b, c) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let d = a.top;
            return c < d;
        }
        ss(a, b, c, d) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let e = a.bottom;
            return c + d.height >= e;
        }
        st(a, b, c) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let d = a.left;
            return c < d;
        }
        su(a, b, c, d) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let e = a.right;
            return c + d.width > e;
        }
        ty(a, b) {
            return a.top + b;
        }
        tw(a, b, c) {
            return a.bottom - c.height - b;
        }
        tx(a, b) {
            return ((a.bottom + a.top) / 2) - (b.height / 2);
        }
        t7(a, b, c, d, e) {
            let f = c.y - d.height - b;
            return f;
        }
        t5(a, b, c, d, e) {
            let f = c.y + b;
            return f;
        }
        t6(a, b, c, d, e) {
            let f = c.y - (d.height / 2);
            return f;
        }
        t1(a, b, c, d, e) {
            let f = c.y - d.height;
            f = f - b;
            return f;
        }
        tz(a, b, c, d, e) {
            let f = c.y;
            f = f + b;
            return f;
        }
        t0(a, b, c, d, e) {
            let f = c.y - (d.height / 2);
            return f;
        }
        th(a, b) {
            return a.left + b;
        }
        tj(a, b, c) {
            return (a.right - (c.width)) - b;
        }
        ti(a, b, c) {
            return ((a.right + a.left) / 2) - (c.width / 2) + b;
        }
        tq(a, b, c, d, e) {
            let f = (c.x - d.width) - b;
            return f;
        }
        ts(a, b, c, d, e) {
            let f = c.x + b;
            return f;
        }
        tr(a, b, c, d, e) {
            let f = (c.x - (d.width / 2));
            f = f + b;
            return f;
        }
        tn(a, b, c, d, e) {
            let f = c.x - d.width;
            f = f - b;
            return f;
        }
        tp(a, b, c, d, e) {
            let f = c.x;
            f = f + b;
            return f;
        }
        to(a, b, c, d, e) {
            let f = c.x - (d.width / 2);
            f = f + b;
            return f;
        }
        td(a, b, c, d, e, f, g, h) {
            switch (a) {
                case 1:
                    {
                        return this.t1(e, b, h, f, true);
                    }
                case 2:
                    {
                        return this.tz(e, b, h, f, true);
                    }
                case 3:
                    {
                        return this.t0(e, b, h, f, true);
                    }
                case 5: return this.t2(e, c, b, h, f);
                case 6: return this.t3(e, c, b, h, f);
                case 4: return this.t4(e, c, b, h, f);
                case 8: return this.tt(e, c, b, h, f);
                case 9: return this.tu(e, c, b, h, f);
                case 7: return this.tv(e, c, b, h, f);
                case 13: return this.ty(d, b);
                case 14: return this.tw(d, b, f);
                case 15: return this.tx(d, f);
                case 10: return this.t7(e, b, g, f, true);
                case 12: return this.t6(e, b, g, f, true);
                case 11:
                default: return this.t5(e, b, g, f, true);
            }
        }
        tk(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f - e.width;
            f = f - c;
            return f;
        }
        tl(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f - e.width / 2;
            f = f + c;
            return f;
        }
        tm(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f + c;
            return f;
        }
        te(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f - e.width;
            f = f - c;
            return f;
        }
        tf(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f - e.width / 2;
            f = f + c;
            return f;
        }
        tg(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f + c;
            return f;
        }
        tv(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f - e.height;
            f = f - c;
            return f;
        }
        tu(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f - e.height / 2;
            f = f + c;
            return f;
        }
        tt(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f + c;
            return f;
        }
        t4(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f - e.height;
            f = f - c;
            return f;
        }
        t3(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f - e.height / 2;
            f = f + c;
            return f;
        }
        t2(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f + c;
            return f;
        }
        tc(a, b, c, d, e, f, g, h) {
            switch (a) {
                case 10: return this.tq(e, b, g, f, true);
                case 11: return this.ts(e, b, g, f, true);
                case 12: return this.tr(e, b, g, f, true);
                case 13: return this.th(d, b);
                case 14: return this.tj(e, b, f);
                case 15: return this.ti(e, b, f);
                case 5: return this.tg(e, c, b, h, f);
                case 6: return this.tf(e, c, b, h, f);
                case 4: return this.te(e, c, b, h, f);
                case 8: return this.tm(e, c, b, h, f);
                case 9: return this.tl(e, c, b, h, f);
                case 7: return this.tk(e, c, b, h, f);
                case 1:
                    {
                        return this.tn(e, b, h, f, true);
                    }
                case 3:
                    {
                        return this.to(e, b, h, f, true);
                    }
                case 2:
                default:
                    {
                        return this.tp(e, b, h, f, true);
                    }
            }
        }
        ym(a, b, c, d) {
            let e = this.ru;
            let f = this.ry;
            let g = this.rk();
            let h = 0;
            if (g != null && g.ca && this.cd != null) {
                h = g.getCategorySize(this.cd.s9, this.p3, this.getEffectiveViewport());
                if (g.categoryMode == 0) {
                    h = 0;
                }
            }
            let i = this.ta(e);
            let j = this.tb(f);
            let k = this.tc(e, i, h, this.yp, a, b, c, d);
            let l = this.td(f, j, h, this.yp, a, b, c, d);
            let m = this.sw(a, i, k, b);
            let n = this.sx(a, j, l, b);
            if (!m) {
                let o = this.re(e);
                let p = 0;
                while (!m && p < o.length) {
                    e = o[p];
                    i = this.ta(e);
                    k = this.tc(e, i, h, this.yp, a, b, c, d);
                    m = this.sw(a, i, k, b);
                    p++;
                }
            }
            if (!n) {
                let q = this.rf(f);
                let r = 0;
                while (!n && r < q.length) {
                    f = q[r];
                    j = this.tb(f);
                    l = this.td(f, j, h, this.yp, a, b, c, d);
                    n = this.sx(a, j, l, b);
                    r++;
                }
            }
            return { $type: Point_$type, x: k, y: l };
        }
        tb(a) {
            if (!isNaN_(this.s9)) {
                return this.s9;
            }
            switch (a) {
                case 1: return this.s7;
                case 2: return this.s7;
                case 3: return 0;
                case 4: return this.s7;
                case 5: return this.s7;
                case 6: return this.s7;
                case 7: return this.s7;
                case 8: return this.s7;
                case 9: return 0;
                case 10: return this.s7;
                case 11: return this.s7;
                case 12: return 0;
                case 13: return this.s7;
                case 14: return this.s7;
                case 15: return 0;
            }
            return this.s7;
        }
        ta(a) {
            if (!isNaN_(this.s8)) {
                return this.s8;
            }
            switch (a) {
                case 4: return this.s6;
                case 6: return 0;
                case 5: return this.s6;
                case 13: return this.s6;
                case 15: return 0;
                case 14: return this.s6;
                case 7: return this.s6;
                case 9: return 0;
                case 8: return this.s6;
                case 1: return this.s6;
                case 3: return 0;
                case 2: return this.s6;
                case 10: return this.s6;
                case 12: return 0;
                case 11: return this.s6;
            }
            return this.s6;
        }
        rf(a) {
            let b = [a];
            switch (a) {
                case 1:
                    b = [2, 3];
                    break;
                case 2:
                    b = [1, 3];
                    break;
                case 3:
                    b = [1, 2];
                    break;
                case 4:
                    b = [8, 7, 3];
                    break;
                case 5:
                    b = [7, 8, 3];
                    break;
                case 6:
                    b = [9, 8, 4, 3];
                    break;
                case 7:
                    b = [5, 4, 2];
                    break;
                case 8:
                    b = [4, 5, 3];
                    break;
                case 9:
                    b = [6, 4, 8, 3];
                    break;
                case 10:
                    b = [11, 12];
                    break;
                case 11:
                    b = [10, 12];
                    break;
                case 12:
                    b = [10, 11];
                    break;
                case 13: break;
                case 14: break;
                case 15: break;
            }
            return b;
        }
        re(a) {
            let b = [a];
            switch (a) {
                case 1:
                    b = [2, 3];
                    break;
                case 2:
                    b = [1, 3];
                    break;
                case 3:
                    b = [1, 2];
                    break;
                case 4:
                    b = [8, 7, 3];
                    break;
                case 5:
                    b = [7, 8, 1];
                    break;
                case 6:
                    b = [9, 8, 4, 3];
                    break;
                case 7:
                    b = [5, 4, 2];
                    break;
                case 8:
                    b = [4, 5, 3];
                    break;
                case 9:
                    b = [6, 4, 8, 3];
                    break;
                case 10:
                    b = [11, 12];
                    break;
                case 11:
                    b = [10, 12];
                    break;
                case 12:
                    b = [10, 11];
                    break;
                case 13: break;
                case 14: break;
                case 15: break;
            }
            return b;
        }
        sw(a, b, c, d) {
            return !(this.st(a, b, c) || this.su(a, b, c, d));
        }
        sx(a, b, c, d) {
            return !(this.sv(a, b, c) || this.ss(a, b, c, d));
        }
        wk(a) {
            let b = new List$1(DataTooltipCollisionInfo.$, 0);
            for (let c = 0; c < a.f.count; c++) {
                let d = new DataTooltipCollisionInfo();
                d.d = c;
                d.e = { $type: Point_$type, x: a.f._inner[c], y: a.g._inner[c] };
                d.c = a.k._inner[c];
                d.a = a.j._inner[c];
                d.b = a.m._inner[c];
                if (isNaN_(d.e.x) || isNaN_(d.e.y)) {
                    continue;
                }
                b.add(d);
            }
            b.aa((e, f) => {
                if (e.e.y < f.e.y) {
                    return -1;
                }
                if (e.e.y > f.e.y) {
                    return 1;
                }
                if (e.b < f.b) {
                    return -1;
                }
                if (e.b > f.b) {
                    return 1;
                }
                return 0;
            });
            let e = this.sq(b);
            if (!e) {
                return;
            }
            for (let f = 0; f < b.count - 1; f++) {
                let g = b._inner[f];
                let h = b._inner[f + 1];
                let i = new Rect(0, g.e.x, g.e.y, g.c, g.a);
                let j = new Rect(0, h.e.x, h.e.y, h.c, h.a);
                if (i.intersectsWith(j) || i.top > j.bottom) {
                    h.e = { $type: Point_$type, x: h.e.x, y: i.bottom + 1 };
                }
            }
            if (b._inner[b.count - 1].e.y + b._inner[b.count - 1].a > this.b0.bu.height) {
                b._inner[b.count - 1].e = { $type: Point_$type, x: b._inner[b.count - 1].e.x, y: b._inner[b.count - 1].e.y - ((b._inner[b.count - 1].e.y + b._inner[b.count - 1].a) - this.b0.bu.height) };
            }
            for (let k = b.count - 1; k >= 1; k--) {
                let l = b._inner[k];
                let m = b._inner[k - 1];
                let n = new Rect(0, l.e.x, l.e.y, l.c, l.a);
                let o = new Rect(0, m.e.x, m.e.y, m.c, m.a);
                if (n.intersectsWith(o) || n.top < o.bottom) {
                    m.e = { $type: Point_$type, x: m.e.x, y: n.top - (o.height + 1) };
                }
            }
            for (let p = 0; p < b.count; p++) {
                let q = b._inner[p].d;
                let r = b._inner[p];
                a.f._inner[q] = r.e.x;
                a.g._inner[q] = r.e.y;
            }
        }
        sq(a) {
            if (a.count <= 1) {
                return false;
            }
            let b = this.b0.bu;
            for (let c = 0; c < a.count - 1; c++) {
                let d = a._inner[c];
                let e = a._inner[c + 1];
                let f = new Rect(0, d.e.x, d.e.y, d.c, d.a);
                let g = new Rect(0, e.e.x, e.e.y, e.c, e.a);
                if (f.intersectsWith(g)) {
                    return true;
                }
            }
            return false;
        }
        wo(a, b, c, d, e) {
            let f = this.qo(a);
            if (!f.c) {
                return;
            }
            let g = a.pq(f.d, c, d);
            let h = this.r5.b6;
            let i = this.q9;
            if (!c) {
                i = this.pt(g);
            }
            let j = a.hv(i);
            let k = h.item(e);
            let l = this.b0.bu;
            let m = this.r5.b5(k);
            if (!Base.equalsStatic(m.target, this.cd)) {
                m.target = this.cd;
            }
            m.includedSeries = [a.dataLegendKey];
            this.wm(m);
            m.targetCursorPositionX = this.q9.x;
            m.targetCursorPositionY = this.q9.y;
            if (!this.r5.b8(k, a)) {
                return;
            }
            let n = this.r5.cn(k);
            b.i.add1(k);
            let o = g.x;
            let p = g.x;
            p = Math.max(p, l.left);
            p = Math.min(p, l.right);
            b.l.add(p);
            let q = g.y;
            q = Math.max(q, l.top);
            q = Math.min(q, l.bottom);
            b.m.add(q);
            let r = DeviceUtils.g(10);
            let s = g.x + r;
            if (s + n.width > l.right) {
                s = (o - n.width) - r;
            }
            if (s < l.left) {
                s = l.left;
            }
            b.f.add(s);
            let t = (g.y - n.height) - r;
            if (t + n.height > l.bottom) {
                t = (l.bottom - n.height) - r;
            }
            if (t < l.top) {
                t = l.top;
            }
            b.g.add(t);
            b.k.add(n.width);
            b.j.add(n.height);
            let u = this.o3;
            if (u == null) {
                u = this.o7;
            }
            if (u == null) {
                u = a.o3;
            }
            b.h.add(u);
        }
        wn(a, b, c) {
            this.rt = this.rw();
            this.rx = this.r0();
            let d = a.f;
            let e = a.e;
            let f = 0;
            let g = this.r5.b6.item(0);
            this.r5.b8(g, null);
            let h = this.r5.b5(g);
            if (!Base.equalsStatic(h.target, this.cd)) {
                h.target = this.cd;
            }
            let i = new List$1(String_$type, 0);
            let j = this.rk();
            if (j != null) {
                for (let k of fromEnum(j.da())) {
                    if (k.isStacked) {
                        k.ld((l) => {
                            i.add(l.dataLegendKey);
                            return true;
                        });
                    }
                    else {
                        i.add(k.dataLegendKey);
                    }
                }
                h.includedSeries = i.toArray();
            }
            else {
                h.includedSeries = null;
            }
            this.wm(h);
            h.targetCursorPositionX = this.q9.x;
            h.targetCursorPositionY = this.q9.y;
            let l = this.r5.cn(g);
            let m = 0;
            let n = 0;
            let o = 0;
            let p = 0;
            let q = false;
            let r = false;
            o = d.x;
            p = d.y;
            let s = this.b0.bu;
            let t = this.r5.co();
            let u = this.yq();
            let v = this.ym(u, l, e, d);
            let w = v.x;
            let x = v.y;
            {
            }
            b.l.add(w);
            b.m.add(x);
            b.f.add(w);
            b.g.add(x);
            b.k.add(l.width);
            b.j.add(l.height);
            b.i.add1(g);
            let y = null;
            b.h.add(y);
            this.r5.b6.count = 1;
        }
        ua(a) {
            return a.toolTip;
        }
        qy(a, b) {
            super.qy(a, b);
            let c = a;
            let d = c.m.count;
            let e = b.bu.left;
            let f = b.bu.right;
            let g = b.bu.top;
            let h = b.bu.bottom;
            for (let i = 0; i < d; i++) {
                if (isNaN_(c.l._inner[i]) || isNaN_(c.m._inner[i]) || isNaN_(c.f._inner[i]) || isNaN_(c.g._inner[i])) {
                    this.r5.cf(c.i._inner[i]);
                    continue;
                }
                let j = c.f._inner[i];
                let k = c.g._inner[i];
                let l = c.k._inner[i];
                let m = c.j._inner[i];
                let n = false;
                if (n) {
                    this.r5.cf(c.i._inner[i]);
                    continue;
                }
                let o = c.i._inner[i];
                let p = Math.min(c.f._inner[i], c.l._inner[i]);
                let q = Math.min(c.g._inner[i], c.m._inner[i]);
                let r = c.l._inner[i] - c.f._inner[i];
                let s = c.m._inner[i] - c.g._inner[i];
                this.r5.ch(o, p, q, r, s);
            }
        }
        en() {
            return true;
        }
        get ru() {
            return this.rt;
        }
        set ru(a) {
            let b = this.rt;
            this.rt = a;
            if (b != this.rt) {
                this.raisePropertyChanged("ActualGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.rt));
            }
        }
        rw() {
            if (this.cd == null) {
                return 2;
            }
            let a = false;
            let b = false;
            let c = false;
            let d = false;
            let e = this.rk();
            if (e == null) {
                return 2;
            }
            for (let f of fromEnum(e.dd)) {
                if (f.di) {
                    a = true;
                }
                if (f.isVertical) {
                    b = true;
                }
                if (f.d7) {
                    c = true;
                }
                if (f.ed) {
                    d = true;
                }
            }
            let g = ((() => {
                let $ret = new HashSet$1(DataTooltipGroupedPositionX_$type, 0);
                $ret.add_1(1);
                $ret.add_1(2);
                $ret.add_1(3);
                $ret.add_1(4);
                $ret.add_1(5);
                $ret.add_1(6);
                $ret.add_1(7);
                $ret.add_1(8);
                $ret.add_1(9);
                return $ret;
            })());
            let h = g.contains(this.rv);
            if (this.rv != 0) {
                if (h && b) {
                    return 11;
                }
                return this.rv;
            }
            if (c || d) {
                return 11;
            }
            if (b) {
                return 11;
            }
            if (a) {
                return 8;
            }
            return 8;
        }
        get ry() {
            return this.rx;
        }
        set ry(a) {
            let b = this.rx;
            this.rx = a;
            if (b != this.rx) {
                this.raisePropertyChanged("ActualPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.rx));
            }
        }
        r0() {
            if (this.cd == null) {
                return 11;
            }
            let a = false;
            let b = false;
            let c = false;
            let d = this.rk();
            if (d == null) {
                return 11;
            }
            for (let e of fromEnum(d.da())) {
                if (e.isVertical) {
                    a = true;
                }
                if (e.d7) {
                    b = true;
                }
                if (e.ed) {
                    c = true;
                }
            }
            let f = ((() => {
                let $ret = new HashSet$1(DataTooltipGroupedPositionY_$type, 0);
                $ret.add_1(1);
                $ret.add_1(2);
                $ret.add_1(3);
                $ret.add_1(4);
                $ret.add_1(5);
                $ret.add_1(6);
                $ret.add_1(7);
                $ret.add_1(8);
                $ret.add_1(9);
                return $ret;
            })());
            let g = f.contains(this.rz);
            if (this.rz != 0) {
                if (g && !a) {
                    return 11;
                }
                return this.rz;
            }
            if (b || c) {
                return 11;
            }
            if (a) {
                return 8;
            }
            if (!a) {
                return 11;
            }
            return 11;
        }
        get sp() {
            return this.sg;
        }
        set sp(a) {
            let b = this.sg;
            this.sg = a;
            if (b != this.sg) {
                this.raisePropertyChanged("ValueTextStyle", b, this.sg);
            }
        }
        get sh() {
            return this.r8;
        }
        set sh(a) {
            let b = this.r8;
            this.r8 = a;
            if (b != this.r8) {
                this.raisePropertyChanged("HeaderTextStyle", b, this.r8);
            }
        }
        get sk() {
            return this.sb;
        }
        set sk(a) {
            let b = this.sb;
            this.sb = a;
            if (b != this.sb) {
                this.raisePropertyChanged("SummaryTitleTextStyle", b, this.sb);
            }
        }
        get sm() {
            return this.sd;
        }
        set sm(a) {
            let b = this.sd;
            this.sd = a;
            if (b != this.sd) {
                this.raisePropertyChanged("SummaryValueTextStyle", b, this.sd);
            }
        }
        get sj() {
            return this.sa;
        }
        set sj(a) {
            let b = this.sa;
            this.sa = a;
            if (b != this.sa) {
                this.raisePropertyChanged("SummaryLabelTextStyle", b, this.sa);
            }
        }
        get sl() {
            return this.sc;
        }
        set sl(a) {
            let b = this.sc;
            this.sc = a;
            if (b != this.sc) {
                this.raisePropertyChanged("SummaryUnitsTextStyle", b, this.sc);
            }
        }
        get so() {
            return this.sf;
        }
        set so(a) {
            let b = this.sf;
            this.sf = a;
            if (b != this.sf) {
                this.raisePropertyChanged("UnitsTextStyle", b, this.sf);
            }
        }
        get sn() {
            return this.se;
        }
        set sn(a) {
            let b = this.se;
            this.se = a;
            if (b != this.se) {
                this.raisePropertyChanged("TitleTextStyle", b, this.se);
            }
        }
        get si() {
            return this.r9;
        }
        set si(a) {
            let b = this.r9;
            this.r9 = a;
            if (b != this.r9) {
                this.raisePropertyChanged("LabelTextStyle", b, this.r9);
            }
        }
    }
    DataToolTipLayer.$t = /*@__PURE__*/ markType(DataToolTipLayer, 'DataToolTipLayer', AnnotationLayer.$);
    DataToolTipLayer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, DataToolTipLayer, 'raisePropertyChanged', ['BadgeMargin:ys:wq', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'BadgeShape:r7:wr', [LegendItemBadgeShape_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0)], 'DefaultPositionOffsetX:s6:ws', [1, /*@__PURE__*/ DeviceUtils.g(10)], 'DefaultPositionOffsetY:s7:wt', [1, /*@__PURE__*/ DeviceUtils.g(10)], 'ExcludedColumns:rc:wu', [Array_$type, null], 'ExcludedSeries:rd:wv', [Array_$type, null], 'GroupedPositionModeX:rv:ww', [DataTooltipGroupedPositionX_$type, /*@__PURE__*/ enumGetBox(DataTooltipGroupedPositionX_$type, 0)], 'GroupedPositionModeY:rz:wx', [DataTooltipGroupedPositionY_$type, /*@__PURE__*/ enumGetBox(DataTooltipGroupedPositionY_$type, 0)], 'GroupingMode:r3:wy', [DataToolTipLayerGroupingMode_$type, /*@__PURE__*/ enumGetBox(DataToolTipLayerGroupingMode_$type, 0)], 'HeaderFormatCulture:un:wz', [2, /*@__PURE__*/ stringEmpty()], 'HeaderFormatDate:rn:w0', [DataLegendHeaderDateMode_$type, /*@__PURE__*/ enumGetBox(DataLegendHeaderDateMode_$type, 0)], 'HeaderFormatSpecifiers:rg:w1', [Array_$type, null], 'HeaderFormatString:ur:w2', [2, null], 'HeaderFormatTime:ro:w3', [DataLegendHeaderTimeMode_$type, /*@__PURE__*/ enumGetBox(DataLegendHeaderTimeMode_$type, 0)], 'HeaderRowMargin:yt:w4', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'HeaderRowVisible:sr:w5', [0, true], 'HeaderTextColor:yd:w6', [Brush.$, null], 'HeaderTextMargin:yu:w7', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 0, 0)], 'HeaderText:uw:w8', [2, null], 'IncludedColumns:rh:w9', [Array_$type, null], 'IncludedSeries:ri:xa', [Array_$type, null], 'LabelDisplayMode:rp:xb', [DataLegendLabelMode_$type, /*@__PURE__*/ enumGetBox(DataLegendLabelMode_$type, 0)], 'LabelTextColor:ye:xc', [Brush.$, null], 'LabelTextMargin:yv:xd', [Thickness.$, /*@__PURE__*/ new Thickness(1, 8, 0, 0, 0)], 'PositionOffsetX:s8:xe', [1, NaN], 'PositionOffsetY:s9:xf', [1, NaN], 'ShouldUpdateWhenSeriesDataChanges:sy:xg', [0, true], 'SummaryLabelTextColor:yf:xh', [Brush.$, null], 'SummaryLabelText:va:xi', [2, null], 'SummaryRowMargin:yw:xj', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'SummaryTitleTextColor:yg:xk', [Brush.$, null], 'SummaryTitleTextMargin:yx:xl', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 0, 0)], 'SummaryTitleText:vf:xm', [2, null], 'SummaryType:rq:xn', [DataLegendSummaryType_$type, /*@__PURE__*/ enumGetBox(DataLegendSummaryType_$type, 0)], 'SummaryUnitsTextColor:yh:xo', [Brush.$, null], 'SummaryUnitsText:vl:xp', [2, null], 'SummaryValueTextColor:yi:xq', [Brush.$, null], 'TargetAxis:rl:xr', [Axis.$, null], 'TitleTextColor:yj:xs', [Brush.$, null], 'TitleTextMargin:yy:xt', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'UnitsDisplayMode:rr:xu', [DataLegendUnitsMode_$type, /*@__PURE__*/ enumGetBox(DataLegendUnitsMode_$type, 0)], 'UnitsTextColor:yk:xv', [Brush.$, null], 'UnitsTextMargin:yz:xw', [Thickness.$, /*@__PURE__*/ new Thickness(1, 0, 0, 0, 0)], 'UnitsText:vw:xx', [2, null], 'UseInterpolation:sz:xy', [0, false], 'ValueFormatAbbreviation:rm:xz', [DataAbbreviationMode_$type, /*@__PURE__*/ enumGetBox(DataAbbreviationMode_$type, 0)], 'ValueFormatCulture:v3:x0', [2, /*@__PURE__*/ stringEmpty()], 'ValueFormatMaxFractions:t8:x1', [1, -1], 'ValueFormatMinFractions:t9:x2', [1, -1], 'ValueFormatMode:rs:x3', [DataLegendValueMode_$type, /*@__PURE__*/ enumGetBox(DataLegendValueMode_$type, 0)], 'ValueFormatSpecifiers:rj:x4', [Array_$type, null], 'ValueFormatString:v9:x5', [2, null], 'ValueFormatUseGrouping:s0:x6', [0, true], 'ValueRowMargin:y0:x7', [Thickness.$, /*@__PURE__*/ new Thickness(0, 5)], 'ValueRowVisible:s1:x8', [0, true], 'ValueTextColor:yl:x9', [Brush.$, null], 'ValueTextMargin:y1:ya', [Thickness.$, /*@__PURE__*/ new Thickness(1, 2, 0, 2, 0)], 'ValueTextUseSeriesColors:s2:yb', [0, false], 'ValueTextWhenMissingData:wi:yc', [2, "N/A"]]);
    return DataToolTipLayer;
})();
/**
 * @hidden
 */
export let DataToolTipLayerView = /*@__PURE__*/ (() => {
    class DataToolTipLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b6 = null;
            this.b9 = null;
            this.b4 = null;
            this.b7 = false;
            this._htmlTest = null;
            this.b4 = a;
            this.htmlTest = /^[^<]*(<[\w\W]+>)[^>]*$/;
            this.b9 = new List$1(PointerTooltip.$, 0);
        }
        aj() {
            super.aj();
            for (let a = 0; a < this.b6.a.count; a++) {
                this.b6.a._inner[a].br();
            }
            for (let b = 0; b < this.b6.b.count; b++) {
                this.b6.b._inner[b].br();
            }
            this.b6.clear();
        }
        ca() {
            let a = new PointerTooltip();
            a.bw(this.e.hb);
            a._visibility = 1;
            a.ap = this.e.cd.cu.k;
            let b = null;
            if (TypeRegistrar.isRegistered("XamDataLegend")) {
                b = TypeRegistrar.create("XamDataLegend");
            }
            b.pixelScalingRatio = 1;
            if (this.e.cd != null) {
                let c = this.e.cd.cu.j.ae.createElement("div");
                let ren_ = this.e.cd.cu.j.ae.getSubRenderer(c);
                let len_ = b;
                len_.provideContainer(ren_);
            }
            a.ai = typeCast(IOnDemandRender_$type, b);
            a.ai.shouldOnDemandRender = true;
            this.b9.add(a);
            return a;
        }
        cc(a) {
            let b = a;
        }
        ce(a) {
            let b = a;
            b._visibility = 1;
        }
        cd(a) {
            let b = a;
            b.bz();
            b.content = null;
            this.b9.remove1(a);
        }
        as() {
            super.as();
            this.b6 = ((() => {
                let $ret = new Pool$1(Base.$);
                $ret.create = runOn(this, this.ca);
                $ret.activate = runOn(this, this.cc);
                $ret.disactivate = runOn(this, this.ce);
                $ret.destroy = runOn(this, this.cd);
                return $ret;
            })());
        }
        get htmlTest() {
            return this._htmlTest;
        }
        set htmlTest(a) {
            this._htmlTest = a;
        }
        b8(a, b) {
            let c = a;
            let d = c.ai;
            return true;
        }
        cn(a) {
            let b = a;
            let c = new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            b.cy = 1;
            let d = b.cx(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            b.cy = 0;
            return d;
        }
        cm() {
            if (this.e.cd != null) {
                let a = this.e.cd.s2();
                let b = this.e.cd.cu.a8;
                let c = this.e.cd.cu.a7;
                return new Rect(0, 0, 0, b, c);
            }
            return Rect.empty;
        }
        cl() {
            if (this.e.cd != null) {
                let a = this.e.cd.s2();
                let b = this.e.cd.cu.a8;
                let c = this.e.cd.cu.a7;
                return new Rect(0, 0, 0, b, c);
            }
            return Rect.empty;
        }
        ck() {
            let a = 0;
            let b = 0;
            if (this.e.cd != null) {
                let c = this.e.cd.s2();
                a += c.x;
                b += c.y;
                let d = this.e.cd.cu.a8;
                let e = this.e.cd.cu.a7;
                return new Rect(0, a, b, d, e);
            }
            return Rect.empty;
        }
        cj(a) {
            let b = 0;
            let c = 0;
            if (this.e.cd != null) {
                let d = this.e.cd.s2();
                b += d.x;
                c += d.y;
            }
            return { $type: Point_$type, x: b + a.x, y: c + a.y };
        }
        ch(a, b, c, d, e) {
            let f = null;
            if (this.e.cd != null) {
                f = this.e.cd.cu.j.i();
            }
            let g = a;
            if (g == null) {
                return;
            }
            if (d == 0 && e == 0) {
                g.cy = 1;
            }
            else {
                g.cy = 0;
            }
            g.aq = f;
            g.cs = { $type: Point_$type, x: d, y: e };
            g._visibility = 0;
            g.n = b;
            g.o = c;
        }
        co() {
            let a = (window.innerWidth);
            let b = (window.innerHeight);
            return new Size(1, a, b);
        }
        cf(a) {
            if (a != null) {
                let b = a;
                b._visibility = 1;
            }
        }
        ci() {
            if (this.e.cd == null) {
                this.cg(true);
            }
        }
        a6(a, b) {
            super.a6(a, b);
            if (b) {
                return;
            }
            let c = 0;
            let d = 0;
            let e = this.e.cd;
            if (e != null) {
                let f = e.cu.j.b7();
                c += f.x;
                d += f.y;
            }
            for (let g = 0; g < this.b9.count; g++) {
                this.b9._inner[g].by(this.b9._inner[g].n + c, this.b9._inner[g].o + d);
            }
        }
        al(a) {
            super.al(a);
            for (let b = 0; b < this.b9.count; b++) {
                let c = this.b9._inner[b];
                let d = 0;
                let e = 0;
                if (this.e.cd != null) {
                    let f = this.e.cd.s2();
                    d += f.x;
                    e += f.y;
                }
                let g = c.a5();
                let h = c.n - d;
                let i = c.o - e;
                let j = c.ai;
                let k = null;
                if (j != null) {
                    k = j.exportVisualData();
                }
                this.e.a8.addPointerTooltipWithDataLegend(a, g, h, i, k);
            }
        }
        b5(a) {
            let b = a;
            return b.ai;
        }
        cg(a) {
            this.aq();
            for (let b = 0; b < this.b9.count; b++) {
                this.cf(this.b9._inner[b]);
                if (a) {
                    this.b9._inner[b].bs();
                }
            }
        }
    }
    DataToolTipLayerView.$t = /*@__PURE__*/ markType(DataToolTipLayerView, 'DataToolTipLayerView', AnnotationLayerView.$);
    return DataToolTipLayerView;
})();
