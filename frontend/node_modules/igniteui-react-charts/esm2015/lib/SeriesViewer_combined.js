/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Control } from "igniteui-react-core";
import { INotifyPropertyChanged_$type, Type, Base, EventArgs, PropertyChangedEventArgs, IEnumerable_$type, callStaticConstructors, Point_$type, delegateCombine, runOn, delegateRemove, fromEnum, fromEn, typeCast, enumGetBox, EnumUtil, Boolean_$type, Number_$type, typeGetValue, toEnum, String_$type, markType, markDep, PointUtil, TypeRegistrar, Delegate_$type, Array_$type } from "igniteui-react-core";
import { ILegendOwner_$type } from "igniteui-react-core";
import { IInternalLegendOwner_$type } from "igniteui-react-core";
import { IDataLegendTarget_$type } from "igniteui-react-core";
import { IToolbarTarget_$type } from "igniteui-react-core";
import { SRProvider } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode_$type } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode_$type } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesViewerScrollbarMode_$type } from "./SeriesViewerScrollbarMode";
import { DoubleAnimator } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { IChartLegend_$type } from "igniteui-react-core";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesViewerHorizontalScrollbarPosition_$type } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition_$type } from "./SeriesViewerVerticalScrollbarPosition";
import { Brush } from "igniteui-react-core";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ChartHitTestMode_$type } from "./ChartHitTestMode";
import { InteractionState_$type } from "igniteui-react-core";
import { WindowResponse_$type } from "./WindowResponse";
import { Visibility_$type } from "igniteui-react-core";
import { SeriesViewerComponentsFromView } from "./SeriesViewerComponentsFromView";
import { ZoomCoercionMode_$type } from "./ZoomCoercionMode";
import { ModifierKeys_$type } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { CanvasRenderScheduler } from "igniteui-react-core";
import { SyncSettings } from "./SyncSettings";
import { PropertyMetadata } from "igniteui-react-core";
import { SeriesViewerComponentsForView } from "./SeriesViewerComponentsForView";
import { Dictionary$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IDataLegend_$type } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { FrameworkElement } from "igniteui-react-core";
import { MouseEventArgs } from "igniteui-react-core";
import { MouseButtonEventArgs } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesViewerManipulationEventArgs } from "./SeriesViewerManipulationEventArgs";
import { RectChangedEventArgs } from "igniteui-react-core";
import { MathUtil } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { RefreshCompletedEventArgs } from "./RefreshCompletedEventArgs";
import { Thickness } from "igniteui-react-core";
import { AxisTitlePosition_$type } from "./AxisTitlePosition";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { CoercionInfo } from "./CoercionInfo";
import { FastItemsSource } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { IDataLegendSeries_$type } from "igniteui-react-core";
import { ChartContentType_$type } from "./ChartContentType";
import { defaultDVDateParse, dateNow } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase, log10, truncate } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty, stringIsNullOrWhiteSpace } from "igniteui-react-core";
import { ISchedulableRender_$type } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { TextBlock } from "igniteui-react-core";
import { ITileZoomTile_$type } from "./ITileZoomTile";
import { DOMExecutionContext } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { PathFigureCollection } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { LabelPanelsArrangeState } from "./LabelPanelsArrangeState";
import { MarkerTemplates } from "./MarkerTemplates";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { AxisLabelsLocation_$type } from "./AxisLabelsLocation";
import { IProvidesViewport_$type } from "./IProvidesViewport";
import { ArgumentNullException } from "igniteui-react-core";
import { ActualLegendItemBadgeShape_$type } from "./ActualLegendItemBadgeShape";
import { CanvasViewRenderer } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { EllipseGeometry } from "igniteui-react-core";
import { DataTemplatePassInfo } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { LegendItemHelper } from "igniteui-react-core";
import { DomWrapper_$type } from "igniteui-react-core";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { DefaultPaletteInfo } from "./DefaultPaletteInfo";
import { CssGradientUtil } from "igniteui-react-core";
import { AxisDefaults } from "./AxisDefaults";
import { AxisRange } from "./AxisRange";
import { LinearNumericSnapper } from "./LinearNumericSnapper";
import { AxisAnnotationCollection } from "./AxisAnnotationCollection";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Canvas } from "igniteui-react-core";
import { IFastItemsSourceProvider_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { LabelPosition } from "./LabelPosition";
import { BindingFormatter } from "igniteui-react-core";
import { LabelFontHeuristics } from "./LabelFontHeuristics";
import { Pool$1 } from "igniteui-react-core";
import { AxisComponentsFromView } from "./AxisComponentsFromView";
import { FastReflectionHelper } from "igniteui-react-core";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { RectangleGeometry } from "igniteui-react-core";
import { PathRenderingInfo } from "./PathRenderingInfo";
import { LineGeometry } from "igniteui-react-core";
import { BrushUtilCore } from "igniteui-react-core";
import { RenderRequestedEventArgs } from "./RenderRequestedEventArgs";
import { CategoryMode_$type } from "./CategoryMode";
import { GridMode_$type } from "./GridMode";
import { Panel } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { TickmarkValues } from "./TickmarkValues";
import { TransformGroup } from "igniteui-react-core";
import { RotateTransform } from "igniteui-react-core";
import { TranslateTransform } from "igniteui-react-core";
import { AngleSimplifier } from "igniteui-react-core";
import { TransformMatrixHelpler } from "igniteui-react-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { AxisRangeBufferMode_$type } from "./AxisRangeBufferMode";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { LogarithmicTickmarkValues } from "./LogarithmicTickmarkValues";
import { LinearTickmarkValues } from "./LinearTickmarkValues";
import { TickmarkValuesInitializationParameters } from "./TickmarkValuesInitializationParameters";
import { CategoryAxisRenderingParameters } from "./CategoryAxisRenderingParameters";
import { NumberAbbreviatorFactory } from "./NumberAbbreviatorFactory";
import { AutomaticSeriesPurpose_$type } from "./AutomaticSeriesPurpose";
import { HashSet$1 } from "igniteui-react-core";
import { HighlightingState } from "./HighlightingState";
import { Marker } from "./Marker";
import { ContentControl } from "igniteui-react-core";
import { AutoMarginsAndAngleUpdateMode_$type } from "./AutoMarginsAndAngleUpdateMode";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { PolygonUtil } from "igniteui-react-core";
import { ILegendSeries_$type } from "igniteui-react-core";
import { ILegendSeriesInternal_$type } from "igniteui-react-core";
import { ILegendTemplateProvider_$type } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { SeriesVisibleRangeMode_$type } from "./SeriesVisibleRangeMode";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { SeriesHitTestMode_$type } from "./SeriesHitTestMode";
import { Binding } from "igniteui-react-core";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { FastItemColumn } from "igniteui-react-core";
import { SeriesComponentsFromView } from "./SeriesComponentsFromView";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { Style } from "igniteui-react-core";
import { FastItemsSourceReference } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
import { EasingFunctions } from "igniteui-react-core";
/**
 * @hidden
 */
export let SeriesViewer = /*@__PURE__*/ (() => {
    class SeriesViewer extends Control {
        constructor() {
            super();
            this._widget = null;
            this.cu = null;
            this.c6 = null;
            this.an = null;
            this.a5 = null;
            this.a8 = null;
            this.cm = null;
            this.bp = new SeriesCollection();
            this.bw = 0;
            this.by = 0;
            this._skipDataCleanup = false;
            this.cv = null;
            this.cw = null;
            this.ar = null;
            this.sz = null;
            this.plotAreaMouseLeftButtonDown = null;
            this.plotAreaMouseLeftButtonUp = null;
            this.plotAreaClicked = null;
            this.plotAreaMouseEnter = null;
            this.plotAreaMouseLeave = null;
            this.plotAreaMouseOver = null;
            this.b3 = 0;
            this.b4 = 0;
            this.br = 1;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.dg = false;
            this.seriesCursorMouseMove = null;
            this.seriesMouseLeftButtonDown = null;
            this.seriesMouseLeftButtonUp = null;
            this.seriesMouseMove = null;
            this.seriesMouseEnter = null;
            this.seriesMouseLeave = null;
            this.db = false;
            this.s8 = Rect.empty;
            this.s6 = Rect.empty;
            this.c9 = true;
            this.s5 = null;
            this.dp = false;
            this.hp = 30;
            this.ew = false;
            this.dr = false;
            this.b0 = new SeriesViewerComponentsForView();
            this.de = false;
            this.at = 0;
            this.as = 1;
            this.seriesAnimating = null;
            this.dc = false;
            this.ch = 0;
            this.di = false;
            this.dz = false;
            this.da = false;
            this.kq = null;
            this.viewerManipulationStarting = null;
            this.viewerManipulationEnding = null;
            this.dm = false;
            this.dj = false;
            this.windowRectChanged = null;
            this.sizeChanged = null;
            this.d8 = false;
            this.actualWindowRectChanged = null;
            this.gridAreaRectChanged = null;
            this.d1 = false;
            this.fu = 0.0001;
            this.ft = 0.0001;
            this._syncChannel = null;
            this.b8 = null;
            this.fe = false;
            this.dl = false;
            this.d7 = false;
            this.fh = false;
            this.cc = 1;
            this.tq = null;
            this.hr = 0;
            this.bo = null;
            this.dk = false;
            this.ff = false;
            this.s7 = Rect.empty;
            this.fo = new Date();
            this.fk = false;
            this.refreshCompleted = null;
            this.h3 = null;
            this.h2 = null;
            this.sc = null;
            this.sb = null;
            this.f9 = NaN;
            this.f7 = NaN;
            this.f8 = NaN;
            this.f6 = NaN;
            this.f5 = NaN;
            this.f3 = NaN;
            this.f4 = NaN;
            this.f2 = NaN;
            this.h0 = null;
            this.al = null;
            this.am = null;
            this.ak = null;
            this.dh = false;
            this.c8 = false;
            this._syncSettings = null;
            this.destroyed = false;
            this.hy = null;
            this.fl = new Dictionary$2(String_$type, Base.$, 0);
            this.eu = false;
            this.ga = NaN;
            this.fz = NaN;
            this.f1 = NaN;
            this.fx = NaN;
            this.fw = 30;
            this.fv = NaN;
            this.dd = true;
            this.f0 = NaN;
            this.fy = NaN;
            this.h1 = null;
            this.fq = 1;
            this.fp = NaN;
            this.s4 = null;
            this.d6 = false;
            this.fr = 0;
            this.fs = 0;
            this.pv = null;
            this.ax = null;
            this.eb = false;
            this.ec = false;
            this.d9 = false;
            this.df = false;
            this.hq = 0;
            this.dx = false;
            this.ef = false;
            this.seriesDataUpdated = null;
            this.fn = new List$1(IDataLegend_$type, 0);
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
            DVContainer.instance.registerIfLoaded("DataChartToolbarFactoryManager");
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            this.s4 = Rect.empty;
            this.sz = { $type: Point_$type, x: NaN, y: NaN };
            this.fo = dateNow();
            this.eb = false;
            this.ec = false;
            this.al = new CanvasRenderScheduler();
            this.am = new CanvasRenderScheduler();
            this.ak = new CanvasRenderScheduler();
            SeriesViewer.tl = new Rect(0, 0, 0, 1, 1);
            this.syncSettings = ((() => {
                let $ret = new SyncSettings();
                $ret.synchronizeHorizontally = true;
                $ret.synchronizeVertically = true;
                return $ret;
            })());
            this.cu = this.ct();
            this.ns(this.cu);
            this.cu.c4();
            this.o5();
            this.l2();
            this.actualSyncLink = new SyncLink();
            this.pd(null, this.actualSyncLink);
            this.ar = new ChartContentManager(this);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.n4(a, b.propertyName, b.oldValue, b.newValue));
            let a = this.series;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.ou));
            let b = this.series;
            b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.ov));
            this.cw = new DoubleAnimator(0, 1, this.hw);
            this.cv = new DoubleAnimator(0, 1, this.hv);
            let c = this.cv;
            c.propertyChanged = delegateCombine(c.propertyChanged, runOn(this, this.l1));
            this.cu.bx();
            this.l4();
            this.l3();
        }
        get widget() {
            return this._widget;
        }
        set widget(a) {
            this._widget = a;
        }
        static staticInit() {
            SeriesViewer.tl = new Rect(0, 0, 0, 1, 1);
        }
        get c7() {
            if (this.c6 == null) {
                this.c6 = new SRProvider(this.cu.j.ae);
            }
            return this.c6;
        }
        ao(a) {
            if (this.an == null) {
                this.an = new AutomaticSeriesManager(this);
            }
            return this.an;
        }
        getDesiredToolbarActions() {
            if (!this.eo) {
                return null;
            }
            return this.a6.getDesiredToolbarActions();
        }
        onToolCommandExecuting(a) {
            if (!this.eo) {
                return;
            }
            this.a6.onToolCommandExecuting(this, a);
        }
        addCommandAvailabilityListener(a) {
        }
        removeCommandAvailabilityListener(a) {
        }
        get a6() {
            if (this.a5 == null) {
                this.a5 = DVContainer.instance.createInstance(IDataChartToolbarProvider_$type, () => this.c7.n);
            }
            return this.a5;
        }
        get eo() {
            return DVContainer.instance.checkLoaded("DataChartToolbarFactoryManager");
        }
        get a9() {
            if (this.a8 == null) {
                this.a8 = DVContainer.instance.createInstance(ISeriesViewerInteractionManager_$type, () => this.c7.n);
            }
            return this.a8;
        }
        get eh() {
            return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
        }
        l2() {
            if (this.cm != null && this.cn == null) {
                let a = this.cn;
                a.thumbnailSizeChanged = delegateRemove(a.thumbnailSizeChanged, runOn(this, this.n0));
            }
            if (this.cn != null) {
                let b = this.cn;
                b.thumbnailSizeChanged = delegateCombine(b.thumbnailSizeChanged, runOn(this, this.n0));
            }
            if (this.h1 != null) {
                this.cn.backgroundImageUri = this.h1;
            }
            if (this.cn != null) {
                this.cn.initializeScalingRatio(this.gc);
            }
            if (this.cm == null && this.cn != null) {
                this.mk();
            }
            this.cm = this.cn;
        }
        n0(a, b) {
            this.cn.surfaceIsDirty = true;
            for (let c of fromEnum(this.series)) {
                c.e1 = true;
            }
        }
        get_ez() {
            return false;
        }
        get ez() {
            return this.get_ez();
        }
        get_ey() {
            return false;
        }
        get ey() {
            return this.get_ey();
        }
        l3() {
            this.cu.co();
            if (this.cn != null) {
                this.cn.initializeScalingRatio(this.gc);
            }
        }
        get series() {
            return this.bp;
        }
        ou(a, b) {
            this.dx = this.d3();
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    c.b8 = null;
                    c.cd = null;
                    this.oo(c);
                    this.cu.dy(c);
                }
            }
            if (b.newItems != null) {
                for (let d of fromEn(b.newItems)) {
                    if (!this.cu.aq(d)) {
                        this.o6(d);
                        this.cu.bp(d);
                        d.cd = this;
                        d.b8 = this.actualSyncLink;
                        d.m7();
                    }
                }
            }
            this.mj();
            this.mq();
            this.m5();
            this.md();
        }
        get bx() {
            return this.bw;
        }
        set bx(a) {
            this.bw = a;
        }
        get bz() {
            return this.by;
        }
        set bz(a) {
            this.by = a;
        }
        l5() {
            this.mq();
        }
        mq() {
        }
        get skipDataCleanup() {
            return this._skipDataCleanup;
        }
        set skipDataCleanup(a) {
            this._skipDataCleanup = a;
        }
        oo(a) {
            if (!this.skipDataCleanup) {
                if (typeCast(Series.$, a) !== null) {
                    a.itemsSource = null;
                }
                else if (typeCast(CategoryAxisBase.$, a) !== null) {
                    a.itemsSource = null;
                }
            }
            this.oq(a.name, true);
        }
        ov(a, b) {
            this.dx = this.d3();
            for (let c of fromEnum(this.series)) {
                c.b8 = null;
                c.cd = null;
                this.oo(c);
                this.cu.dy(c);
            }
            this.md();
        }
        l8(a, b, c, d) {
            let e = this.to;
            let f = e.width;
            let g = e.height;
            let h = f / g;
            let i = a / b;
            if (isNaN_(h)) {
                return {
                    p0: a,
                    p1: b
                };
            }
            if (isNaN_(i) || c || d || Math.abs(h - i) > 0.0001) {
                if (c && d) {
                    if (a > b) {
                        b = a / h;
                    }
                    else {
                        a = b * h;
                    }
                }
                else if (c) {
                    b = a / h;
                }
                else {
                    a = b * h;
                }
            }
            if (b > 1) {
                let j = 1 / b;
                b = 1;
                a = a * j;
            }
            if (a > 1) {
                let k = 1 / a;
                a = 1;
                b = b * k;
            }
            return {
                p0: a,
                p1: b
            };
        }
        d3() {
            return false;
        }
        get fb() {
            return this.ep;
        }
        get ed() {
            return this.a8 != null;
        }
        get dw() {
            return this.a8 != null;
        }
        get dv() {
            return this.b3 != 0 || this.b4 != 0;
        }
        get du() {
            return this.dw && this.dv;
        }
        get a7() {
            let a = this.a9.f$b;
            if (a.executionContext == null) {
                a.executionContext = this.cu.l();
            }
            if (a.ensureAnimator == null) {
                a.ensureAnimator = runOn(this, this.lw);
            }
            return a;
        }
        get ba() {
            let a = this.a9.f$c;
            if (a.executionContext == null) {
                a.executionContext = this.cu.l();
            }
            if (a.animator == null) {
                a.animator = this.cw;
                a.owner = this;
            }
            return a;
        }
        lw() {
            {
                let a = this.cv;
                if (!a.f() && a.r > 0) {
                    a.v();
                }
                if (a.r == 0) {
                    this.o8(1);
                }
            }
        }
        l1(a, b) {
            this.o8(this.cv.o);
        }
        o8(a) {
            let b = this.a7.tick(a);
            if (a == 1 && b && this.cv.r > 0) {
                this.cv.v();
            }
            let c = this.a7.dirtySeries;
            if (this.a7.allDirty) {
                let d = this.series;
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.l5();
                }
            }
            else {
                for (let g = 0; g < c.count; g++) {
                    let h = c._inner[g];
                    h.l5();
                }
            }
            if (!b) {
                this.cv.w();
            }
        }
        l0() {
            this.cu.ck();
            this.lz();
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].dc) {
                    this.series._inner[a].lg();
                }
            }
        }
        sg(a) {
            return this.sf(this.ag, a);
        }
        sm(a) {
            return this.sf(this.aj, a);
        }
        sk(a) {
            return this.sf(this.ah, a);
        }
        sl(a) {
            return this.sf(this.ai, a);
        }
        sf(a, b) {
            if (a == null || a.count == 0) {
                return null;
            }
            else {
                return a.item(b % a.count);
            }
        }
        get s0() {
            return this.sz;
        }
        set s0(a) {
            if (PointUtil.notEquals(this.sz, a)) {
                let b = this.sz;
                this.sz = a;
                this.n8("CrosshairPoint", b, this.sz);
            }
        }
        ok() {
        }
        get eg() {
            return this.cl == 1 || this.cl == 2;
        }
        get legend() {
            return this.c(SeriesViewer.qs);
        }
        set legend(a) {
            this.h(SeriesViewer.qs, a);
        }
        get ds() {
            return this.c(SeriesViewer.px);
        }
        set ds(a) {
            this.h(SeriesViewer.px, a);
        }
        ng(a, b) {
            this.dg = false;
            let c = false;
            c = false;
            if (this.cu.k.al) {
                return;
            }
            if (this.plotAreaMouseLeftButtonDown != null) {
                let d = this.bf(a, b, c);
                this.plotAreaMouseLeftButtonDown(this, d);
            }
        }
        bf(a, b, c) {
            let d = { $type: Point_$type, x: a.x, y: a.y };
            let e = { $type: Point_$type, x: a.x, y: a.y };
            if (!this.to.isEmpty) {
                if (c) {
                    e.x -= this.to.left;
                    e.y -= this.to.top;
                }
                else {
                    d.x += this.to.left;
                    d.y += this.to.top;
                }
            }
            let f = new PlotAreaMouseButtonEventArgs(this, d, e);
            f.manipulationOccurred = this.dg;
            return f;
        }
        bj(a, b, c) {
            let d = { $type: Point_$type, x: a.x, y: a.y };
            let e = { $type: Point_$type, x: a.x, y: a.y };
            if (!this.to.isEmpty) {
                if (c) {
                    e.x -= this.to.left;
                    e.y -= this.to.top;
                }
                else {
                    d.x += this.to.left;
                    d.y += this.to.top;
                }
            }
            let f = new PlotAreaMouseEventArgs(this, d, e);
            return f;
        }
        nh(a, b, c) {
            let d = false;
            d = false;
            if (this.cu.k.al) {
                return;
            }
            if (this.plotAreaMouseLeftButtonUp != null) {
                let e = this.bf(a, b, d);
                this.plotAreaMouseLeftButtonUp(this, e);
            }
            if (!this.dg && !c) {
                if (this.plotAreaClicked != null) {
                    let f = this.bf(a, b, d);
                    this.plotAreaClicked(this, f);
                }
            }
            this.dg = false;
        }
        get ep() {
            return this.c(SeriesViewer.qo);
        }
        set ep(a) {
            this.h(SeriesViewer.qo, a);
        }
        get fa() {
            return this.c(SeriesViewer.rb);
        }
        set fa(a) {
            this.h(SeriesViewer.rb, a);
        }
        get bv() {
            return EnumUtil.getEnumValue(SeriesHighlightingMode_$type, this.c(SeriesViewer.p7));
        }
        set bv(a) {
            this.h(SeriesViewer.p7, enumGetBox(SeriesHighlightingMode_$type, a));
        }
        get b5() {
            return EnumUtil.getEnumValue(SeriesViewerScrollbarMode_$type, this.c(SeriesViewer.qf));
        }
        set b5(a) {
            this.h(SeriesViewer.qf, enumGetBox(SeriesViewerScrollbarMode_$type, a));
        }
        get b6() {
            return EnumUtil.getEnumValue(SeriesViewerScrollbarMode_$type, this.c(SeriesViewer.rp));
        }
        set b6(a) {
            this.h(SeriesViewer.rp, enumGetBox(SeriesViewerScrollbarMode_$type, a));
        }
        get b2() {
            return EnumUtil.getEnumValue(SeriesViewerHorizontalScrollbarPosition_$type, this.c(SeriesViewer.qh));
        }
        set b2(a) {
            this.h(SeriesViewer.qh, enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, a));
        }
        get b7() {
            return EnumUtil.getEnumValue(SeriesViewerVerticalScrollbarPosition_$type, this.c(SeriesViewer.rr));
        }
        set b7(a) {
            this.h(SeriesViewer.rr, enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, a));
        }
        get so() {
            return this.c(SeriesViewer.qb);
        }
        set so(a) {
            this.h(SeriesViewer.qb, a);
        }
        get sp() {
            return this.c(SeriesViewer.qg);
        }
        set sp(a) {
            this.h(SeriesViewer.qg, a);
        }
        get gs() {
            return this.c(SeriesViewer.qj);
        }
        set gs(a) {
            this.h(SeriesViewer.qj, a);
        }
        get gr() {
            return this.c(SeriesViewer.qe);
        }
        set gr(a) {
            this.h(SeriesViewer.qe, a);
        }
        get go() {
            return this.c(SeriesViewer.qa);
        }
        set go(a) {
            this.h(SeriesViewer.qa, a);
        }
        get gp() {
            return this.c(SeriesViewer.qc);
        }
        set gp(a) {
            this.h(SeriesViewer.qc, a);
        }
        get gq() {
            return this.c(SeriesViewer.qd);
        }
        set gq(a) {
            this.h(SeriesViewer.qd, a);
        }
        get gu() {
            return this.c(SeriesViewer.ql);
        }
        set gu(a) {
            this.h(SeriesViewer.ql, a);
        }
        get gt() {
            return this.c(SeriesViewer.qk);
        }
        set gt(a) {
            this.h(SeriesViewer.qk, a);
        }
        get d5() {
            return this.c(SeriesViewer.qi);
        }
        set d5(a) {
            this.h(SeriesViewer.qi, a);
        }
        get sx() {
            return this.c(SeriesViewer.rm);
        }
        set sx(a) {
            this.h(SeriesViewer.rm, a);
        }
        get sy() {
            return this.c(SeriesViewer.rq);
        }
        set sy(a) {
            this.h(SeriesViewer.rq, a);
        }
        get he() {
            return this.c(SeriesViewer.rt);
        }
        set he(a) {
            this.h(SeriesViewer.rt, a);
        }
        get hd() {
            return this.c(SeriesViewer.ro);
        }
        set hd(a) {
            this.h(SeriesViewer.ro, a);
        }
        get hb() {
            return this.c(SeriesViewer.rl);
        }
        set hb(a) {
            this.h(SeriesViewer.rl, a);
        }
        get hh() {
            return this.c(SeriesViewer.rw);
        }
        set hh(a) {
            this.h(SeriesViewer.rw, a);
        }
        get hc() {
            return this.c(SeriesViewer.rn);
        }
        set hc(a) {
            this.h(SeriesViewer.rn, a);
        }
        get hg() {
            return this.c(SeriesViewer.rv);
        }
        set hg(a) {
            this.h(SeriesViewer.rv, a);
        }
        get hf() {
            return this.c(SeriesViewer.ru);
        }
        set hf(a) {
            this.h(SeriesViewer.ru, a);
        }
        get fj() {
            return this.c(SeriesViewer.rs);
        }
        set fj(a) {
            this.h(SeriesViewer.rs, a);
        }
        bu() {
            if (this.bt == 0) {
                return 1;
            }
            if (this.bv == 3 || this.bv == 5) {
                if (this.bt == 2) {
                    return 4;
                }
            }
            return this.bt;
        }
        get bs() {
            return this.br;
        }
        get bt() {
            return EnumUtil.getEnumValue(SeriesHighlightingBehavior_$type, this.c(SeriesViewer.p6));
        }
        set bt(a) {
            this.h(SeriesViewer.p6, enumGetBox(SeriesHighlightingBehavior_$type, a));
        }
        get bb() {
            return EnumUtil.getEnumValue(LegendHighlightingMode_$type, this.c(SeriesViewer.qp));
        }
        set bb(a) {
            this.h(SeriesViewer.qp, enumGetBox(LegendHighlightingMode_$type, a));
        }
        get bd() {
            return EnumUtil.getEnumValue(LegendItemBadgeShape_$type, this.c(SeriesViewer.qr));
        }
        set bd(a) {
            this.h(SeriesViewer.qr, enumGetBox(LegendItemBadgeShape_$type, a));
        }
        get bc() {
            return EnumUtil.getEnumValue(LegendItemBadgeMode_$type, this.c(SeriesViewer.qq));
        }
        set bc(a) {
            this.h(SeriesViewer.qq, enumGetBox(LegendItemBadgeMode_$type, a));
        }
        n8(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        m7() {
            this.m8(this.series);
        }
        m8(a) {
            for (let b of fromEn(a)) {
                let c = b.a1;
                if (c == null) {
                    continue;
                }
                let d = b.nc;
                if (d == null) {
                    continue;
                }
                if (c.containsChild(d)) {
                    c.removeChild(d);
                }
                if (!c.containsChild(d) && b.p7 != 1) {
                    c.addChildInOrder(d, b);
                }
            }
        }
        nj(a, b, c) {
            this.od(a, b, typeCast(MouseEventArgs.$, c));
        }
        nn(a, b, c) {
            this.oh(a, b, typeCast(MouseEventArgs.$, c));
        }
        nk(a, b, c) {
            this.oe(a, b, typeCast(MouseEventArgs.$, c));
        }
        nl(a, b, c) {
            this.of(a, b, typeCast(MouseButtonEventArgs.$, c));
        }
        nm(a, b, c) {
            let d = typeCast(MouseButtonEventArgs.$, c);
            if (d != null) {
                this.og(a, b, typeCast(MouseButtonEventArgs.$, c));
            }
        }
        lh(a, b) {
            return null;
        }
        get ev() {
            return this.dg;
        }
        mp() {
            if (!this.db) {
                this.db = true;
                this.dg = true;
                if (this.viewerManipulationStarting != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isDragZoom = true;
                    this.viewerManipulationStarting(this, a);
                }
            }
        }
        no(a, b, c) {
        }
        np(a, b, c) {
        }
        ob(a, b) {
            if (this.seriesCursorMouseMove != null && this.dz) {
                this.seriesCursorMouseMove(this, new ChartCursorEventArgs(this, a, b));
            }
        }
        of(a, b, c) {
            if (this.seriesMouseLeftButtonDown != null) {
                this.seriesMouseLeftButtonDown(this, new DataChartMouseButtonEventArgs(this, a, b, c));
            }
        }
        og(a, b, c) {
            if (this.seriesMouseLeftButtonUp != null) {
                this.seriesMouseLeftButtonUp(this, new DataChartMouseButtonEventArgs(this, a, b, c));
            }
        }
        oz(a) {
            this.a9.f$ao(this, a);
        }
        o0(a) {
            a = { $type: Point_$type, x: a.x - this.to.left, y: a.y - this.to.top };
            let b = this.s3(a);
            if (this.fa) {
                this.lq(b);
            }
            else {
                let c = this.bs;
                let d = c == 2 || c == 3 || c == 4;
                if (d) {
                    this.o9(b);
                    for (let e = 0; e < this.series.count; e++) {
                        let f = this.series._inner[e];
                        f.m6(b);
                        if (f.isStacked) {
                            f.ld((g) => {
                                g.m6(b);
                                return true;
                            });
                        }
                    }
                }
            }
        }
        oh(a, b, c) {
            if (this.seriesMouseMove != null) {
                this.seriesMouseMove(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        od(a, b, c) {
            if (this.seriesMouseEnter != null) {
                this.seriesMouseEnter(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        oe(a, b, c) {
            if (this.seriesMouseLeave != null) {
                this.seriesMouseLeave(this, new ChartMouseEventArgs(this, a, b, c));
            }
        }
        mo() {
            if (this.db) {
                this.db = false;
                if (this.viewerManipulationEnding != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isDragZoom = true;
                    this.viewerManipulationEnding(this, a);
                }
            }
        }
        get_to() {
            return this.s8;
        }
        get to() {
            return this.get_to();
        }
        get td() {
            return this.s6;
        }
        set td(a) {
            this.s6 = a;
        }
        get_d4() {
            return false;
        }
        get d4() {
            return this.get_d4();
        }
        ti(a, b, c) {
            if (c.isEmpty) {
                return c;
            }
            let d = c;
            let e = b;
            let f = (d.left - e.left) / e.width;
            let g = (d.top - e.top) / e.height;
            let h = (d.right - e.left) / e.width;
            let i = (d.bottom - e.top) / e.height;
            f = a.left + f * a.width;
            g = a.top + g * a.height;
            h = a.left + h * a.width;
            i = a.top + i * a.height;
            return new Rect(0, f, g, h - f, i - g);
        }
        get_tc() {
            if (this.c9) {
                this.c9 = false;
                let a = this.tg(this.to, this.td, this.s9);
                this.s5 = a;
            }
            return this.s5;
        }
        get tc() {
            return this.get_tc();
        }
        tg(a, b, c) {
            let d = b;
            let e = c;
            let f = a;
            if (f.isEmpty) {
                return Rect.empty;
            }
            if (d.isEmpty) {
                return a;
            }
            let g = (d.left - f.left) / f.width;
            let h = (d.right - f.left) / f.width;
            let i = (d.top - f.top) / f.height;
            let j = (d.bottom - f.top) / f.height;
            g = f.left + (g - e.left) / e.width * f.width;
            h = f.left + (h - e.left) / e.width * f.width;
            i = f.top + (i - e.top) / e.height * f.height;
            j = f.top + (j - e.top) / e.height * f.height;
            let k = new Rect(0, g, i, h - g, j - i);
            k.intersect(f);
            return k;
        }
        tb(a) {
            this.c9 = true;
            return Rect.empty;
        }
        th() {
            return this.to;
        }
        o4(a) {
            a.kc = this.to;
        }
        get hs() {
            return this.hp;
        }
        set hs(a) {
            this.hp = a;
        }
        n3(a, b) {
            if (!b.isEmpty) {
                this.s8 = b;
                this.s6 = this.tb(this.s8);
                this.cu.eq(this.s8);
            }
            if (this.d3()) {
                if (this.actualSyncLink != null) {
                    this.ph(this.s9, false);
                }
            }
            this.ni(a, b);
            if (this.du) {
                this.ba.updateScrollbars(this, this.s9, this.s9, a, b);
            }
        }
        b1() {
            return this.b0;
        }
        ln(a, b) {
            let c = false;
            c = true;
            if (this.to.containsPoint(a)) {
                if (!this.de) {
                    this.de = true;
                    if (this.plotAreaMouseEnter != null) {
                        let d = this.bj(a, false, c);
                        d.isDuringManipulation = b;
                        this.plotAreaMouseEnter(this, d);
                    }
                }
                else {
                    this.de = true;
                    if (this.plotAreaMouseOver != null) {
                        let e = this.bj(a, false, c);
                        e.isDuringManipulation = b;
                        this.plotAreaMouseOver(this, e);
                    }
                }
            }
            else {
                if (this.de) {
                    this.de = false;
                    if (this.plotAreaMouseLeave != null) {
                        let f = this.bj(a, false, c);
                        f.isDuringManipulation = b;
                        this.plotAreaMouseLeave(this, f);
                    }
                }
            }
        }
        get av() {
            return this.at;
        }
        set av(a) {
            let b = this.at;
            this.at = a;
            if (b != this.at) {
                this.n8("ContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.at));
            }
        }
        oj() {
            this.au = this.aw();
        }
        aw() {
            if (!this.eh) {
                return 1;
            }
            return this.a9.f$a(this);
        }
        get au() {
            return this.as;
        }
        set au(a) {
            let b = this.as;
            this.as = a;
            if (b != this.as) {
                this.n8("ActualContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.as));
            }
        }
        oa(a) {
            if (this.seriesAnimating != null) {
                this.seriesAnimating(a);
            }
        }
        eq() {
            return this.er() || this.es();
        }
        onDetachedFromUI() {
            this.cu.c2();
            SyncManager.e(this);
        }
        onAttachedToUI() {
            this.cu.cw();
            SyncManager.c(this);
        }
        get cl() {
            return this.ch;
        }
        set cl(a) {
            if (this.cl != a) {
                let b = this.ch;
                this.ch = a;
                if (this.eh) {
                    this.a9.f$ag(this);
                }
                if (b == 1 && this.ch != 1) {
                    this.mo();
                }
            }
        }
        na(a) {
            this.lq(this.s3(a));
        }
        nb(a, b) {
            let c = false;
            c = false;
            this.lq({ $type: Point_$type, x: NaN, y: NaN });
            if (this.de) {
                this.de = false;
                if (this.plotAreaMouseLeave != null) {
                    let d = this.bj(a, false, c);
                    d.isDuringManipulation = b;
                    this.plotAreaMouseLeave(this, d);
                }
            }
        }
        e3(a, b) {
            return this.a9.f$f(this, a, b);
        }
        m0(a) {
            this.a9.f$o(this, a);
        }
        e2(a) {
            return this.a9.f$e(this, a);
        }
        get dt() {
            return this.da;
        }
        set dt(a) {
            this.da = a;
        }
        get_ei() {
            return this.dx || this.fg();
        }
        get ei() {
            return this.get_ei();
        }
        m2(a) {
            this.a9.f$q(this, a);
        }
        get d2() {
            return this.da;
        }
        nf(a) {
            this.a9.f$ae(this, a);
        }
        m3(a, b) {
            this.a9.f$r(this, a, b);
        }
        m1(a) {
            this.a9.f$p(this, a);
        }
        get e4() {
            return this.di;
        }
        set e4(a) {
            this.di = a;
        }
        ny() {
            this.a9.f$al(this);
        }
        ne(a) {
            this.a9.f$ad(this, a);
        }
        nz(a, b, c, d) {
            this.a9.f$am(this, a, b, c, d);
        }
        nd(a) {
            this.a9.f$ac(this, a);
        }
        nv(a, b, c, d) {
            this.a9.f$ai(this, a, b, c, d);
        }
        m9(a) {
            this.a9.f$z(this, a);
        }
        nc(a) {
            this.a9.f$ab(this, a);
        }
        m4(a) {
            this.a9.f$s(this, a);
        }
        nu(a, b, c, d) {
            this.a9.f$ah(this, a, b, c, d);
        }
        nr() {
            this.dg = false;
        }
        m6(a) {
            this.cu.ej(a.height);
        }
        lz() {
            if (this.da) {
                this.lq({ $type: Point_$type, x: NaN, y: NaN });
                this.cu.ch();
            }
            this.da = false;
        }
        mt(a, b) {
            this.a9.f$n(this, a, b);
        }
        cj(a) {
            let b = this.cu.k != null && this.cu.k.al ? this.ck : this.ci;
            if (b != 3) {
                return b;
            }
            return this.cu.m(a);
        }
        nx() {
            this.dl = false;
            if (!this.dm) {
                this.dm = true;
                this.dg = true;
                if (this.viewerManipulationStarting != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isZoomPan = true;
                    this.viewerManipulationStarting(this, a);
                }
            }
            this.a9.f$ak(this);
        }
        nw() {
            if (this.dm) {
                this.dm = false;
                if (this.viewerManipulationEnding != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isZoomPan = true;
                    this.viewerManipulationEnding(this, a);
                }
            }
            this.a9.f$aj(this);
        }
        o1() {
            this.a9.f$ap(this);
        }
        lu() {
            if (this.dl) {
                this.mx();
            }
            this.a9.f$k(this);
        }
        lp() {
            this.lo();
        }
        lo() {
            if (this.eh) {
                this.a9.f$h(this);
            }
        }
        n1() {
        }
        on() {
        }
        ol() {
            for (let a = 0; a < this.series.count; a++) {
                this.series._inner[a].ml(false);
            }
            this.ly(false, false, true);
        }
        ms(a, b) {
            this.a9.f$m(this, a, b);
        }
        e8() {
            return false;
        }
        get fd() {
            return this.dj;
        }
        set fd(a) {
            this.dj = a;
        }
        mr(a, b, c) {
            this.a9.f$l(this, a, b, c);
        }
        pe(a, b) {
            if (b.propertyName == SyncSettings.$$p[0]) {
                SyncManager.b(this, b.oldValue, b.newValue);
            }
        }
        pd(a, b) {
            if (a != null) {
                a.as(this);
                a.propertyUpdated = delegateRemove(a.propertyUpdated, this.propertyUpdated);
            }
            if (b != null) {
                b.al(this);
                b.propertyUpdated = delegateCombine(b.propertyUpdated, this.propertyUpdated);
            }
            for (let c of fromEnum(this.series)) {
                c.b8 = this.actualSyncLink;
                c.cd = this;
            }
        }
        lq(a) {
            if (this.du) {
                this.ba.onCrosshairMoved(this.s1(a));
            }
            this.actualSyncLink.an(this, a);
        }
        ph(a, b) {
            this.pi(a, b, !b);
        }
        pi(a, b, c) {
            if (!b) {
                this.actualSyncLink.au(this, a, c);
            }
            else {
                if (!this.er() && !this.es()) {
                    return;
                }
                let d = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
                let e = a;
                if (d && !this.e9) {
                    if (e.width < this.gg) {
                        return;
                    }
                    else if (e.height < this.gf) {
                        return;
                    }
                }
                if (d && !this.er()) {
                    e = new Rect(0, 0, a.y, 1, a.height);
                }
                if (d && !this.es()) {
                    e = new Rect(0, a.x, 0, a.width, 1);
                }
                this.actualSyncLink.at(this, e);
            }
        }
        n2(a, b) {
            if (!b) {
                this.actualSyncLink.ap(this, a);
            }
            else {
                if (!this.er() && !this.es()) {
                    return;
                }
                let c = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
                let d = a;
                if (c && !this.er()) {
                    d = new Rect(0, 0, a.y, 1, a.height);
                }
                if (c && !this.es()) {
                    d = new Rect(0, a.x, 0, a.width, 1);
                }
                this.actualSyncLink.ap(this, d);
            }
        }
        get em() {
            return this.actualSyncLink != null;
        }
        *_fm() {
            if (this.actualSyncLink == null) {
                return undefined;
            }
            for (let a of fromEnum(this.actualSyncLink.ai)) {
                yield a;
            }
        }
        fm() {
            return toEnum(() => this._fm());
        }
        s3(a) {
            a = { $type: Point_$type, x: a.x + this.to.left, y: a.y + this.to.top };
            let b = this.tc;
            let c = this.s9.left + this.s9.width * (a.x - b.left) / b.width;
            let d = this.s9.top + this.s9.height * (a.y - b.top) / b.height;
            return { $type: Point_$type, x: c, y: d };
        }
        s1(a) {
            let b = this.tc;
            let c = (a.x - this.s9.left) * b.width / this.s9.width + b.left;
            let d = (a.y - this.s9.top) * b.height / this.s9.height + b.top;
            a = { $type: Point_$type, x: a.x - this.to.left, y: a.y - this.to.top };
            return { $type: Point_$type, x: c, y: d };
        }
        tn(a) {
            a = new Rect(0, a.left + this.to.left, a.top + this.to.top, a.width, a.height);
            let b = this.tc;
            let c = this.s9.left + this.s9.width * (a.left - b.left) / b.width;
            let d = this.s9.top + this.s9.height * (a.top - b.top) / b.height;
            let e = this.s9.left + this.s9.width * (a.right - b.left) / b.width;
            let f = this.s9.top + this.s9.height * (a.bottom - b.top) / b.height;
            return new Rect(0, c, d, e - c, f - d);
        }
        oi(a, b) {
            if (this.windowRectChanged != null && Rect.l_op_Inequality(a, b)) {
                this.windowRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        nt(a, b) {
            this.oi(a, b);
        }
        nq(a, b) {
            if (this.sizeChanged != null && Size.l_op_Inequality(a, b)) {
                this.sizeChanged(this, new RectChangedEventArgs(new Rect(1, 0, 0, a), new Rect(1, 0, 0, b)));
            }
        }
        e6(a, b) {
            if (a.width != b.width || a.height != b.height || a.x != b.x || a.y != b.y) {
                return true;
            }
            return false;
        }
        n6(a, b) {
            if (this.actualWindowRectChanged != null && this.e6(a, b)) {
                this.actualWindowRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        pj(a) {
            if (isNaN_(a) || isInfinity(a)) {
                a = 0.05;
            }
            let b = this.gm() - a;
            let c = this.gm() - a;
            let d = this.gd + (a / 2);
            let e = this.ge + (a / 2);
            this.tp = new Rect(0, d, e, b, c);
        }
        pk(a) {
            this.pj(a * -1);
        }
        ot() {
            this.cu.d2();
        }
        n7(a, b) {
            if (this.gridAreaRectChanged != null && Rect.l_op_Inequality(a, b)) {
                this.gridAreaRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        get_ej() {
            return false;
        }
        get ej() {
            return this.get_ej();
        }
        ni(a, b) {
            this.n7(a, b);
            if (this.eh) {
                this.a9.f$an(this);
            }
            if (this.ej && (Rect.l_op_Equality(a, null) || a.isEmpty || a.width == 0 || a.height == 0)) {
                this.ph(this.tp, false);
            }
            else {
                this.l4();
            }
            if (a.isEmpty || a.width == 0 || a.height == 0) {
                this.md();
            }
        }
        l7() {
            this.l4();
        }
        get gg() {
            return this.fu;
        }
        set gg(a) {
            let b = this.fu;
            this.fu = a;
            this.n8("ActualWindowRectMinWidth", b, this.fu);
        }
        get gf() {
            return this.ft;
        }
        set gf(a) {
            let b = this.ft;
            this.ft = a;
            this.n8("ActualWindowRectMinHeight", b, this.ft);
        }
        get syncChannel() {
            return this._syncChannel;
        }
        set syncChannel(a) {
            this._syncChannel = a;
        }
        get actualSyncLink() {
            return this.b8;
        }
        set actualSyncLink(a) {
            let b = this.b8;
            this.b8 = a;
            this.n8("ActualSyncLink", b, this.b8);
        }
        l6() {
            this.cu.d3();
        }
        my() {
            this.dl = true;
        }
        mw() {
            this.dl = false;
        }
        mx() {
            if (this.dl) {
                if (this.dm) {
                    this.dm = false;
                    if (this.viewerManipulationEnding != null) {
                        let a = new SeriesViewerManipulationEventArgs();
                        a.isZoomPan = true;
                        this.viewerManipulationEnding(this, a);
                    }
                    this.dg = false;
                }
            }
        }
        get cn() {
            return this.cu.i().a;
        }
        pa(a) {
            if (this.cn != null) {
                this.cn.mobileMode = a;
            }
        }
        get cd() {
            return this.cc;
        }
        set cd(a) {
            this.cc = a;
        }
        ce() {
            if (this.cf == 0) {
                return 1;
            }
            return this.cf;
        }
        dy() {
            return this.cl == 0 && !this.di && !this.dj;
        }
        dq() {
            if (this.actualSyncLink != null && this.actualSyncLink.ai.count > 0) {
                let a = true;
                a = this.dy();
                if (!a) {
                    return false;
                }
                for (let b = 0; b < this.actualSyncLink.ai.count; b++) {
                    if (!this.actualSyncLink.ai.item(b).dy()) {
                        return false;
                    }
                }
                return true;
            }
            else {
                return this.dy();
            }
        }
        lm() {
            if (this.cl == 2) {
                this.cu.bt();
                this.cl = 0;
                this.nw();
                this.n2(Rect.empty, true);
                if (this.cb == 1) {
                    this.ph(this.tq, true);
                }
            }
            if (this.cl == 1) {
                this.cu.bt();
                this.cl = 0;
                this.nw();
                this.cu.cf();
                this.n2(Rect.empty, true);
            }
        }
        notifyCrosshairUpdate() {
        }
        pf(a, b) {
            let c = this.gg;
            let d = this.gf;
            this.tp = new Rect(0, this.gd, this.ge, MathUtil.d(a, c, 1), MathUtil.d(b, d, 1));
        }
        pg(a, b, c, d) {
            if (!MathUtil.a(a) || a < 0 || a >= 1) {
                a = this.gd;
            }
            if (!MathUtil.a(b) || b < 0 || b >= 1) {
                b = this.ge;
            }
            if (!MathUtil.a(d)) {
                d = this.gn();
            }
            if (!MathUtil.a(c)) {
                c = this.gm();
            }
            this.tp = new Rect(0, a, b, MathUtil.d(c, this.gg, 1), MathUtil.d(d, this.gf, 1));
        }
        gm() {
            return 1;
        }
        gn() {
            return 1;
        }
        g0() {
            if (this.hl > 0) {
                return this.hl;
            }
            let a = Rect.l_op_Inequality(this.to, null) && !this.to.isEmpty && MathUtil.a(this.to.width);
            let b = MathUtil.a(this.hn);
            if (b && a) {
                let c = this.hn / this.to.width;
                if (c <= 0 || c >= 1) {
                    c = 0.0001;
                }
                return c;
            }
            return 0.0001;
        }
        gz() {
            if (this.hk > 0) {
                return this.hk;
            }
            let a = Rect.l_op_Inequality(this.to, null) && !this.to.isEmpty && MathUtil.a(this.to.height);
            let b = MathUtil.a(this.hm);
            if (b && a) {
                let c = this.hm / this.to.height;
                if (c <= 0 || c >= 1) {
                    c = 0.0001;
                }
                return c;
            }
            return 0.0001;
        }
        n4(a, b, c, d) {
            switch (b) {
                case SeriesViewer.$$p[36]:
                    this.cu.dj();
                    break;
                case SeriesViewer.$$p[33]:
                    this.cu.dj();
                    break;
                case SeriesViewer.$$p[48]:
                    this.cd = this.ce();
                    break;
                case "HorizontalViewScrollbarMode":
                    this.b3 = this.b5;
                    if (this.dw || this.eh) {
                        this.ba.onHorizontalScrollbarModeChanged(this.b3);
                    }
                    break;
                case "VerticalViewScrollbarMode":
                    this.b4 = this.b6;
                    if (this.dw || this.eh) {
                        this.ba.onVerticalScrollbarModeChanged(this.b4);
                    }
                    break;
                case "ActualContentHitTestMode":
                    this.ml();
                    break;
                case "ContentHitTestMode":
                    this.oj();
                    break;
                case SeriesViewer.$$p[35]:
                    this.cu.dh(c, d);
                    this.cu.dj();
                    break;
                case SeriesViewer.$$p[32]:
                    this.cu.dd(c, d);
                    this.cu.dj();
                    break;
                case "TitleTextStyle":
                case "TitleTextColor":
                case "SubtitleTextStyle":
                case "SubtitleTextColor":
                case "TitleTopMargin":
                case "TitleLeftMargin":
                case "TitleRightMargin":
                case "TitleBottomMargin":
                case "SubtitleTopMargin":
                case "SubtitleLeftMargin":
                case "SubtitleRightMargin":
                case "SubtitleBottomMargin":
                    this.cu.dj();
                    break;
                case SeriesViewer.$$p[24]:
                case SeriesViewer.$$p[25]:
                case SeriesViewer.$$p[26]:
                    this.cu.db();
                    break;
                case "PixelScalingRatio":
                    if (isNaN_(DeviceUtils.a(this.gx))) {
                        this.l3();
                    }
                    else {
                        this.gc = DeviceUtils.a(this.gx);
                    }
                    break;
                case "InteractionPixelScalingRatio":
                    this.gb = this.gv;
                    break;
                case "ActualPixelScalingRatio":
                    this.cu.dq();
                    break;
                case SeriesViewer.$$p[11]:
                    this.cu.cp();
                    break;
                case "ActualSyncLink":
                    this.pd(typeCast(SyncLink.$, c), typeCast(SyncLink.$, d));
                    break;
                case SeriesViewer.$$p[3]:
                    if (!this.d7) {
                        this.fh = true;
                    }
                    if (this.tt == 0) {
                        this.dz = true;
                    }
                    else {
                        this.dz = this.dn;
                    }
                    if (this.eh) {
                        this.a9.f$an(this);
                    }
                    break;
                case "CrosshairPoint":
                    if (this.eh) {
                        if (this.e1) {
                            this.o9(this.s0);
                        }
                        this.a9.f$an(this);
                    }
                    this.notifyCrosshairUpdate();
                    break;
                case SeriesViewer.$$p[44]:
                    if (this.actualSyncLink != null) {
                        this.hr++;
                        this.ph(d, false);
                        this.hr--;
                    }
                    if (!this.tp.equals1(c) && this.hr == 0) {
                        this.nt(c, this.tp);
                    }
                    this.l4();
                    break;
                case SeriesViewer.$$p[40]:
                    this.gd = this.hi;
                    break;
                case SeriesViewer.$$p[41]:
                    this.ge = this.hj;
                    break;
                case "ActualWindowPositionVertical":
                case "ActualWindowPositionHorizontal":
                    if (!this.ff) {
                        this.pf(this.gm(), this.gn());
                    }
                    break;
                case SeriesViewer.$$p[43]:
                case SeriesViewer.$$p[47]:
                    this.gg = this.g0();
                    break;
                case SeriesViewer.$$p[42]:
                case SeriesViewer.$$p[46]:
                    this.gf = this.gz();
                    break;
                case SeriesViewer.$$p[12]:
                    this.cu.c5();
                    break;
                case SeriesViewer.$$p[9]:
                    this.cv.r = this.hv;
                    break;
                case SeriesViewer.$$p[17]:
                    this.pc();
                    break;
                case "ActualWindowRect":
                    this.c9 = true;
                    if (this.e6(c, d)) {
                        this.li(c, d);
                    }
                    if (d.width == 1 && d.height == 1 && c.isEmpty) {
                        this.fk = true;
                    }
                    this.n6(c, d);
                    break;
                case SeriesViewer.$$p[21]:
                    this.cu.da(d);
                    break;
                case SeriesViewer.$$p[38]:
                    this.dp = this.fi;
                    break;
                case SeriesViewer.$$p[49]:
                    this.hs = this.hx;
                    this.lo();
                    break;
                case SeriesViewer.$$p[23]:
                    this.a9.f$af(this);
                    break;
                case "HighlightingMode":
                case "HighlightingBehavior":
                    this.br = this.bu();
                    if (this.eh) {
                        let e = this.a7;
                        e.highlightingBehavior = this.bs;
                    }
                    break;
                case "LegendItemBadgeShape":
                    for (let f of fromEnum(this.series)) {
                        f.legendItemBadgeShape = this.bd;
                    }
                    break;
                case "LegendItemBadgeMode":
                    for (let g of fromEnum(this.series)) {
                        g.a9 = this.bc;
                    }
                    break;
                case SeriesViewer.$$p[1]:
                case SeriesViewer.$$p[16]:
                case SeriesViewer.$$p[14]:
                case SeriesViewer.$$p[15]:
                case SeriesViewer.$$p[13]:
                    for (let h of fromEnum(this.series)) {
                        h.ln();
                    }
                    break;
                case "HorizontalViewScrollbarCornerRadius":
                case "HorizontalViewScrollbarFill":
                case "HorizontalViewScrollbarMaxOpacity":
                case "HorizontalViewScrollbarOutline":
                case "HorizontalViewScrollbarStrokeThickness":
                case "VerticalViewScrollbarCornerRadius":
                case "VerticalViewScrollbarFill":
                case "VerticalViewScrollbarMaxOpacity":
                case "VerticalViewScrollbarOutline":
                case "VerticalViewScrollbarStrokeThickness":
                    if (this.eh) {
                        this.ba.updateBarAppearance(this, this.so, this.sx, this.sp, this.sy, this.gs, this.he, this.gr, this.hd);
                    }
                    break;
                case "HorizontalViewScrollbarHeight":
                case "HorizontalViewScrollbarInset":
                case SeriesViewer.i4:
                case "HorizontalViewScrollbarTrackStartInset":
                case "HorizontalViewScrollbarTrackEndInset":
                    if (this.eh) {
                        this.ba.updateBarDimensions(this, this.gp, this.go, this.gq, this.d5, this.gu, this.gt, this.hh, this.hb, this.hc, this.fj, this.hg, this.hf);
                    }
                    break;
                case "VerticalViewScrollbarPosition":
                    if (this.eh) {
                        this.ba.updateVerticalScrollbarPosition(this.b7);
                    }
                    break;
                case "HorizontalViewScrollbarPosition":
                    if (this.eh) {
                        this.ba.updateHorizontalScrollbarPosition(this.b2);
                    }
                    break;
            }
        }
        get ee() {
            return this.bs == 2 || this.bs == 3 || this.bs == 4;
        }
        get e1() {
            return this.bs == 2 || this.bs == 3 || this.bs == 4;
        }
        o9(a) {
            let b = 1.7976931348623157E+308;
            let c = null;
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                if (e.dc) {
                    continue;
                }
                if (e.c2 && e.c5) {
                    continue;
                }
                if (e.isStacked) {
                    e.ld((f) => {
                        let g = this.lg(f, b, c, a);
                        if (g == null) {
                            return true;
                        }
                        b = g.c;
                        c = g.d;
                        return true;
                    });
                }
                let f = this.lg(e, b, c, a);
                if (f == null) {
                    continue;
                }
                b = f.c;
                c = f.d;
            }
            this.bo = c;
        }
        lg(a, b, c, d) {
            let e = a.pl(d);
            let f = a.pq(d, true, true);
            if (isNaN_(f.x) || isNaN_(f.y)) {
                return null;
            }
            let g = (e.x - f.x) * (e.x - f.x) + (e.y - f.y) * (e.y - f.y);
            if (g < b) {
                b = g;
                c = a;
            }
            return new Tuple$2(Number_$type, Series.$, b, c);
        }
        pc() {
            this.dk = this.tu == 0;
            this.cu.dp();
            this.pb();
            this.cu.em();
            this.l6();
            this.mj();
        }
        ml() {
            this.cu.cv();
        }
        pb() {
            if (this.cn == null) {
                return;
            }
            this.cn.visibility = this.tu;
            this.cn.isZoomable = this.eq();
        }
        get tj() {
            return this.s7;
        }
        set tj(a) {
            let b = this.s7;
            this.s7 = a;
            if (this.s7.isEmpty) {
                this.cu.cj();
            }
            else {
                this.cu.en(this.to, this.tm(this.tj));
                this.cu.ec();
                this.n8("PreviewRect", b, this.s7);
            }
        }
        o3() {
            this.gd = this.s9.x;
            this.ge = this.s9.y;
        }
        li(a, b) {
            this.fk = false;
            this.fo = dateNow();
            if (this.ed) {
                for (let c = 0; c < this.series.count; c++) {
                    this.series._inner[c].ky();
                }
                this.a7.clear();
            }
            if (this.cv.f()) {
                this.cv.w();
            }
            let d = this.ff;
            this.ff = true;
            this.o3();
            this.ff = d;
            this.cu.ck();
            this.cu.ep(this.s9);
            if (this.du) {
                this.ba.updateScrollbars(this, a, this.s9, this.to, this.to);
            }
            this.mm(a, b);
        }
        mm(a, b) {
        }
        tm(a) {
            if (this.to.isEmpty) {
                return Rect.empty;
            }
            let b = this.to;
            let c = b.left + (b.width * (a.left - this.s9.left) / this.s9.width);
            let d = b.top + (b.height * (a.top - this.s9.top) / this.s9.height);
            let e = b.left + (b.width * (a.right - this.s9.left) / this.s9.width);
            let f = b.top + (b.height * (a.bottom - this.s9.top) / this.s9.height);
            return new Rect(0, c, d, e - c, f - d);
        }
        n9() {
            if (this.refreshCompleted != null && !this.destroyed) {
                this.refreshCompleted(this, new RefreshCompletedEventArgs());
            }
        }
        ns(a) {
            this.pb();
        }
        get kn() {
            return this.h3;
        }
        set kn(a) {
            let b = this.h3;
            this.h3 = a;
            this.n8("TitleTextStyle", b, a);
        }
        get kb() {
            return this.h2;
        }
        set kb(a) {
            let b = this.h2;
            this.h2 = a;
            this.n8("SubtitleTextStyle", b, a);
        }
        get sv() {
            return this.sc;
        }
        set sv(a) {
            let b = this.sc;
            this.sc = a;
            this.n8("TitleTextColor", b, a);
        }
        get su() {
            return this.sb;
        }
        set su(a) {
            let b = this.sb;
            this.sb = a;
            this.n8("SubtitleTextColor", b, a);
        }
        get g9() {
            return this.f9;
        }
        set g9(a) {
            let b = this.f9;
            this.f9 = a;
            this.n8("TitleTopMargin", b, a);
        }
        get g7() {
            return this.f7;
        }
        set g7(a) {
            let b = this.f7;
            this.f7 = a;
            this.n8("TitleLeftMargin", b, a);
        }
        get g8() {
            return this.f8;
        }
        set g8(a) {
            let b = this.f8;
            this.f8 = a;
            this.n8("TitleRightMargin", b, a);
        }
        get g6() {
            return this.f6;
        }
        set g6(a) {
            let b = this.f6;
            this.f6 = a;
            this.n8("TitleBottomMargin", b, a);
        }
        get g5() {
            return this.f5;
        }
        set g5(a) {
            let b = this.f5;
            this.f5 = a;
            this.n8("SubtitleTopMargin", b, a);
        }
        get g3() {
            return this.f3;
        }
        set g3(a) {
            let b = this.f3;
            this.f3 = a;
            this.n8("SubtitleLeftMargin", b, a);
        }
        get g4() {
            return this.f4;
        }
        set g4(a) {
            let b = this.f4;
            this.f4 = a;
            this.n8("SubtitleRightMargin", b, a);
        }
        get g2() {
            return this.f2;
        }
        set g2(a) {
            let b = this.f2;
            this.f2 = a;
            this.n8("SubtitleBottomMargin", b, a);
        }
        tr() {
            return this.cu.fj();
        }
        ts() {
            return this.cu.fk();
        }
        ap(a) {
            return this.cu.c(a);
        }
        aq(a) {
            return this.cu.d(a);
        }
        getFontHeight() {
            return this.cu.a9;
        }
        get_e0() {
            return false;
        }
        get e0() {
            return this.get_e0();
        }
        mv() {
        }
        provideContainer(a) {
            this.cu.c0(a);
        }
        mu(a, b) {
            this.cu.c1(a, b);
        }
        notifyContainerResized() {
            this.cu.cu();
            this.mv();
        }
        te() {
            return this.cu.fb();
        }
        lv() {
            this.cu.b5();
        }
        s2() {
            return this.cu.e8();
        }
        cy() {
            return this.cu.t();
        }
        cx() {
            return this.cu.q();
        }
        sh() {
            return this.cu.e0();
        }
        si() {
            return this.cu.e3();
        }
        lk(a) {
            this.cu.bp(a);
        }
        op(a) {
            this.cu.dy(a);
        }
        get ex() {
            return this.dh;
        }
        set ex(a) {
            let b = this.dh;
            this.dh = a;
            if (b != this.dh) {
                this.cu.cr(this.dh);
            }
        }
        get dn() {
            return this.c8;
        }
        set dn(a) {
            let b = this.c8;
            this.c8 = a;
            if (b != this.c8) {
                this.cu.bk(this.c8);
            }
        }
        get syncSettings() {
            return this._syncSettings;
        }
        set syncSettings(a) {
            this._syncSettings = a;
        }
        lj(a) {
            this.cu.bn(a);
        }
        or(a) {
            this.cu.dz(a);
        }
        mi(source_, a, b, c) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let d = this.actualSyncLink.ag(source_);
            if (d == null) {
                return;
            }
            d.handleCollectionChanged(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        l9(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let a = this.actualSyncLink.ag(source_);
            if (a == null) {
                return;
            }
            a.handleCollectionChanged(new NotifyCollectionChangedEventArgs(0, 4));
        }
        mg(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let c = this.actualSyncLink.ag(source_);
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        mh(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let c = this.actualSyncLink.ag(source_);
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        destroy() {
            this.destroyed = true;
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.series.count; b++) {
                a.add(this.series._inner[b]);
            }
            for (let c = 0; c < a.count; c++) {
                if (a._inner[c].b0 != null) {
                    a._inner[c].b0.aj();
                }
                this.series.remove(a._inner[c]);
                this.oq(a._inner[c].name, true);
                a._inner[c].itemsSource = null;
                a._inner[c].l8(null, null);
            }
            this.lt();
            this.os();
            this.onDetachedFromUI();
            this.cu.c0(null);
        }
        lt() {
        }
        oy(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            this.hy = source_;
            this.o7();
        }
        os() {
            this.hy = null;
            this.o7();
        }
        ox(a, source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            if (stringIsNullOrEmpty(a) == false) {
                if (!this.fl.containsKey(a)) {
                    this.fl.addItem(a, source_);
                }
                else {
                    this.fl.item(a, source_);
                }
            }
            this.o7();
        }
        oq(a, b) {
            if (stringIsNullOrEmpty(a) == false) {
                if (this.fl.containsKey(a)) {
                    this.fl.removeItem(a);
                }
            }
            if (!b) {
                this.o7();
            }
        }
        ow(a, b) {
            if (a.itemsSource != b) {
                a.itemsSource = b;
            }
        }
        o6(a) {
            if (!this.eu) {
                return;
            }
            if (typeCast(Series.$, a) !== null) {
                let b = a;
                if (this.fl.containsKey(b.name)) {
                    let c = this.fl.item(b.name);
                    this.ow(b, c);
                }
                else {
                    this.ow(b, this.hy);
                }
            }
            if (typeCast(CategoryAxisBase.$, a) !== null) {
                let d = a;
                if (this.fl.containsKey(d.name)) {
                    let e = this.fl.item(d.name);
                    if (d.itemsSource != e) {
                        d.itemsSource = e;
                    }
                }
                else {
                    if (d.itemsSource != this.hy) {
                        d.itemsSource = this.hy;
                    }
                }
            }
        }
        o7() {
            if (!this.eu) {
                return;
            }
            for (let a of fromEnum(this.series)) {
                this.o6(a);
            }
        }
        get ha() {
            return this.ga;
        }
        set ha(a) {
            this.ga = a;
            this.l6();
        }
        get gw() {
            return this.fz;
        }
        set gw(a) {
            this.fz = a;
            this.l6();
        }
        get g1() {
            return this.f1;
        }
        set g1(a) {
            this.f1 = a;
            this.l6();
        }
        get gj() {
            return this.fx;
        }
        set gj(a) {
            this.fx = a;
            this.l6();
        }
        get gi() {
            return this.fw;
        }
        set gi(a) {
            this.fw = a;
            this.l6();
        }
        get gh() {
            return this.fv;
        }
        set gh(a) {
            this.fv = a;
            this.l6();
        }
        e7() {
            return false;
        }
        get ea() {
            return this.dd;
        }
        set ea(a) {
            let b = this.dd;
            this.dd = a;
            this.n8("IsAntiAliasingEnabledDuringInteraction", b, this.dd);
        }
        get gx() {
            return this.f0;
        }
        set gx(a) {
            let b = this.f0;
            this.f0 = a;
            this.n8("PixelScalingRatio", b, this.f0);
        }
        get gv() {
            return this.fy;
        }
        set gv(a) {
            let b = this.fy;
            this.fy = a;
            this.n8("InteractionPixelScalingRatio", b, this.fy);
        }
        static cg(a, b) {
            let c = new CoercionInfo();
            c.b = a;
            c.a = null;
            let d = FastItemsSource.f(a);
            if (d.d == null) {
                return c;
            }
            if (b != null) {
                let methods_ = b;
                let key_ = d.d;
                let val_ = null;
                if (typeof methods_[key_] != 'undefined') {
                    val_ = methods_[key_];
                }
                ;
                c.b = d.c;
                c.a = val_;
            }
            else if (d.d == "defaultDateParse") {
                let e = defaultDVDateParse;
                c.b = d.c;
                c.a = e;
            }
            return c;
        }
        get jl() {
            return this.h1;
        }
        set jl(a) {
            this.h1 = a;
            if (this.cn == null) {
                return;
            }
            this.cn.backgroundImageUri = this.h1;
        }
        get gc() {
            return this.fq;
        }
        set gc(a) {
            let b = this.fq;
            this.fq = a;
            this.n8("ActualPixelScalingRatio", b, this.fq);
        }
        get gb() {
            return this.fp;
        }
        set gb(a) {
            let b = this.fp;
            this.fp = a;
            this.n8("ActualInteractionPixelScalingRatio", b, this.fp);
        }
        get s9() {
            return this.s4;
        }
        set s9(a) {
            let b = Rect.l_op_Inequality(this.s4, a);
            if (b) {
                let c = this.s4;
                this.s4 = a;
                this.n8("ActualWindowRect", c, a);
            }
        }
        tf() {
            return this.s9;
        }
        l4() {
            if (this.d6) {
                return;
            }
            this.s9 = this.ta();
        }
        tk() {
            return Rect.empty;
        }
        ta() {
            let a = this.tp.left;
            let b = this.tp.top;
            let c = this.tp.width;
            let d = this.tp.height;
            if (this.cd == 1) {
                a = Math.min(1, Math.max(0, this.tp.left));
                c = Math.min(1, Math.max(0, this.tp.width));
            }
            if (this.cd == 1) {
                b = Math.min(1, Math.max(0, this.tp.top));
                d = Math.min(1, Math.max(0, this.tp.height));
            }
            return new Rect(0, a, b, c, d);
        }
        hz(a, b) {
            return this.cu.bj(a, b);
        }
        get gd() {
            return this.fr;
        }
        set gd(a) {
            let b = this.fr;
            this.fr = a;
            this.n8("ActualWindowPositionHorizontal", b, this.fr);
        }
        get ge() {
            return this.fs;
        }
        set ge(a) {
            let b = this.fs;
            this.fs = a;
            this.n8("ActualWindowPositionVertical", b, this.fs);
        }
        mk() {
            if (this.dk && this.cn != null) {
                this.cn.surfaceIsDirty = true;
                this.cn.doRefresh(false);
            }
            this.lp();
            this.me();
        }
        mj() {
            if (this.dk && this.cn != null) {
                this.cn.surfaceIsDirty = true;
                this.cn.doRefresh(false);
            }
            this.lp();
        }
        flush() {
            this.ly(true, true, true);
        }
        ly(a, b, c) {
            this.ar.y();
            if (a) {
                this.cu.b7();
                this.ar.y();
            }
            if (c) {
                this.al.i();
            }
            if (b) {
                this.cu.a.i();
            }
            this.fk = true;
        }
        fg() {
            return false;
        }
        om(a, b) {
            if (this.pv != null) {
                this.o2(this.pv);
                this.pv = null;
                this.ax = null;
            }
            this.pv = a;
            this.ax = this.ar.k(2, a, b);
        }
        o2(a) {
            this.ar.ad(2, a);
            this.pv = null;
            this.ax = null;
        }
        lr() {
            this.ar.ac(2, this.pv, this.ax, false);
        }
        m5() {
            let a = false;
            let b = false;
            let c = false;
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                if (e.dk) {
                    a = true;
                }
                if (e.dl) {
                    b = true;
                }
                if (e.dc) {
                    c = true;
                }
            }
            this.eb = a;
            this.ec = b;
            this.d9 = c;
        }
        get en() {
            return this.dk;
        }
        ll() {
            this.cu.bq();
            for (let a = 0; a < this.series.count; a++) {
                this.series._inner[a].lv();
            }
        }
        et() {
            return this.cu.am();
        }
        hu() {
            let a = this.hq;
            this.hq++;
            return a;
        }
        c1() {
            if (this.kn == null || this.cu.j.ae == null) {
                return null;
            }
            return FontUtil.toFontInfo(this.cu.j.ae, this.kn);
        }
        c0() {
            if (this.kb == null || this.cu.j.ae == null) {
                return null;
            }
            return FontUtil.toFontInfo(this.cu.j.ae, this.kb);
        }
        o5() {
            let a = false;
            a = this.dn;
            this.d7 = true;
            this.dz = (a && !this.fh) || this.tt == 0;
            this.d7 = false;
        }
        oc() {
            if (this.seriesDataUpdated != null) {
                this.seriesDataUpdated(this, EventArgs.empty);
            }
        }
        md() {
            for (let a = 0; a < this.fn.count; a++) {
                this.fn._inner[a].notifySeriesCollectionChanged();
            }
        }
        me() {
            for (let a = 0; a < this.fn.count; a++) {
                this.fn._inner[a].notifySeriesDataChanged();
            }
        }
        mf(a) {
            for (let b = 0; b < this.fn.count; b++) {
                this.fn._inner[b].notifyVisualPropertiesChanged(a);
            }
        }
        mc(a) {
            for (let b = 0; b < this.fn.count; b++) {
                this.fn._inner[b].notifyCursorPositionChanged(a);
            }
        }
        attachDataLegend(a) {
            this.fn.add(a);
        }
        detachDataLegend(a) {
            this.fn.remove(a);
        }
        getDataLegendSeries() {
            let a = 0;
            for (let b = 0; b < this.series.count; b++) {
                if (this.series._inner[b].isStacked) {
                    this.series._inner[b].ld((c) => {
                        if (c.isUsableInLegend) {
                            a++;
                        }
                        return true;
                    });
                }
                else {
                    if (this.series._inner[b].isUsableInLegend) {
                        a++;
                    }
                }
            }
            let c = new Array(a);
            let d = 0;
            for (let e = 0; e < this.series.count; e++) {
                if (this.series._inner[e].isStacked) {
                    this.series._inner[e].ld((f) => {
                        if (f.isUsableInLegend) {
                            c[d] = f;
                            d++;
                        }
                        return true;
                    });
                }
                else {
                    if (this.series._inner[e].isUsableInLegend) {
                        c[d] = this.series._inner[e];
                        d++;
                    }
                }
            }
            return c;
        }
    }
    SeriesViewer.$t = /*@__PURE__*/ markType(SeriesViewer, 'SeriesViewer', Control.$, [INotifyPropertyChanged_$type, ILegendOwner_$type, IInternalLegendOwner_$type, IDataLegendTarget_$type, IToolbarTarget_$type]);
    SeriesViewer.qs = /*@__PURE__*/ DependencyProperty.i("Legend", IChartLegend_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("Legend", b.oldValue, b.newValue);
    }));
    SeriesViewer.px = /*@__PURE__*/ DependencyProperty.i("AnimateSeriesWhenAxisRangeChanges", Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("AnimateSeriesWhenAxisRangeChanges", b.oldValue, b.newValue);
    }));
    SeriesViewer.qo = /*@__PURE__*/ DependencyProperty.i("IsWindowSyncedToVisibleRange", Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("IsWindowSyncedToVisibleRange", b.oldValue, b.newValue);
    }));
    SeriesViewer.rb = /*@__PURE__*/ DependencyProperty.i("ShouldSimulateHoverMoveCrosshairPoint", Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("ShouldSimulateHoverMoveCrosshairPoint", b.oldValue, b.newValue);
    }));
    SeriesViewer.p7 = /*@__PURE__*/ DependencyProperty.i("HighlightingMode", SeriesHighlightingMode_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(SeriesHighlightingMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HighlightingMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.qf = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarMode", SeriesViewerScrollbarMode_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(SeriesViewerScrollbarMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.rp = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarMode", SeriesViewerScrollbarMode_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(SeriesViewerScrollbarMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.qh = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarPosition", SeriesViewerHorizontalScrollbarPosition_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarPosition", b.oldValue, b.newValue);
    }));
    SeriesViewer.rr = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarPosition", SeriesViewerVerticalScrollbarPosition_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarPosition", b.oldValue, b.newValue);
    }));
    SeriesViewer.qb = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarFill", Brush.$, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarFill", b.oldValue, b.newValue);
    }));
    SeriesViewer.qg = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarOutline", Brush.$, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarOutline", b.oldValue, b.newValue);
    }));
    SeriesViewer.qj = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarStrokeThickness", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarStrokeThickness", b.oldValue, b.newValue);
    }));
    SeriesViewer.qe = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarMaxOpacity", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarMaxOpacity", b.oldValue, b.newValue);
    }));
    SeriesViewer.qa = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarCornerRadius", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarCornerRadius", b.oldValue, b.newValue);
    }));
    SeriesViewer.qc = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarHeight", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarHeight", b.oldValue, b.newValue);
    }));
    SeriesViewer.qd = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarInset", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.ql = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarTrackStartInset", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarTrackStartInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.qk = /*@__PURE__*/ DependencyProperty.i("HorizontalViewScrollbarTrackEndInset", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HorizontalViewScrollbarTrackEndInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.i4 = "HorizontalViewScrollbarShouldAddAutoTrackInsets";
    SeriesViewer.qi = /*@__PURE__*/ DependencyProperty.i(SeriesViewer.i4, Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, true, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8(SeriesViewer.i4, b.oldValue, b.newValue);
    }));
    SeriesViewer.rm = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarFill", Brush.$, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarFill", b.oldValue, b.newValue);
    }));
    SeriesViewer.rq = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarOutline", Brush.$, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarOutline", b.oldValue, b.newValue);
    }));
    SeriesViewer.rt = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarStrokeThickness", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarStrokeThickness", b.oldValue, b.newValue);
    }));
    SeriesViewer.ro = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarMaxOpacity", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarMaxOpacity", b.oldValue, b.newValue);
    }));
    SeriesViewer.rl = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarCornerRadius", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarCornerRadius", b.oldValue, b.newValue);
    }));
    SeriesViewer.rw = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarWidth", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarWidth", b.oldValue, b.newValue);
    }));
    SeriesViewer.rn = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarInset", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.rv = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarTrackStartInset", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarTrackStartInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.ru = /*@__PURE__*/ DependencyProperty.i("VerticalViewScrollbarTrackEndInset", Number_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("VerticalViewScrollbarTrackEndInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.k1 = "VerticalViewScrollbarShouldAddAutoTrackInsets";
    SeriesViewer.rs = /*@__PURE__*/ DependencyProperty.i(SeriesViewer.k1, Boolean_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, true, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8(SeriesViewer.k1, b.oldValue, b.newValue);
    }));
    SeriesViewer.p6 = /*@__PURE__*/ DependencyProperty.i("HighlightingBehavior", SeriesHighlightingBehavior_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(SeriesHighlightingBehavior_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("HighlightingBehavior", b.oldValue, b.newValue);
    }));
    SeriesViewer.qp = /*@__PURE__*/ DependencyProperty.i("LegendHighlightingMode", LegendHighlightingMode_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(LegendHighlightingMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("LegendHighlightingMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.qr = /*@__PURE__*/ DependencyProperty.i("LegendItemBadgeShape", LegendItemBadgeShape_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("LegendItemBadgeShape", b.oldValue, b.newValue);
    }));
    SeriesViewer.qq = /*@__PURE__*/ DependencyProperty.i("LegendItemBadgeMode", LegendItemBadgeMode_$type, SeriesViewer.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(LegendItemBadgeMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.n8("LegendItemBadgeMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.tl = Rect.empty;
    SeriesViewer.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, SeriesViewer, 'n8', ['ActualPlotAreaBorderBrush:sd:pw', [Brush.$, null], 'Brushes:ag:py', [BrushCollection.$, null], 'CircleMarkerTemplate:pl:pz', [DataTemplate.$, null], 'CrosshairVisibility:tt:p0', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'DefaultInteraction:ci:p1', [InteractionState_$type, /*@__PURE__*/ enumGetBox(InteractionState_$type, 3)], 'DiamondMarkerTemplate:pm:p2', [DataTemplate.$, null], 'DragModifier:r9:p3', [ModifierKeys_$type, /*@__PURE__*/ enumGetBox(ModifierKeys_$type, 2)], 'HexagonMarkerTemplate:pn:p4', [DataTemplate.$, null], 'HexagramMarkerTemplate:po:p5', [DataTemplate.$, null], 'HighlightingTransitionDuration:hv:p8', [1, 300], 'HorizontalCrosshairBrush:sn:p9', [Brush.$, null], 'IsPagePanningAllowed:ek:qm', [0, true], 'IsSurfaceInteractionDisabled:el:qn', [0, false], 'MarkerAutomaticBehavior:be:qt', [MarkerAutomaticBehavior_$type, /*@__PURE__*/ enumGetBox(MarkerAutomaticBehavior_$type, 4)], 'MarkerBrushes:ah:qu', [BrushCollection.$, null], 'MarkerOutlines:ai:qv', [BrushCollection.$, null], 'Outlines:aj:qw', [BrushCollection.$, null], 'OverviewPlusDetailPaneVisibility:tu:qx', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 1)], 'PanModifier:sa:qy', [ModifierKeys_$type, /*@__PURE__*/ enumGetBox(ModifierKeys_$type, 4)], 'PentagonMarkerTemplate:pp:qz', [DataTemplate.$, null], 'PentagramMarkerTemplate:pq:q0', [DataTemplate.$, null], 'PlotAreaBackground:sq:q1', [Brush.$, null], 'PlotAreaBorderBrush:sr:q2', [Brush.$, null], 'PreferHigherResolutionTiles:e5:q3', [0, false], 'PreviewPathFill:ss:q4', [Brush.$, null], 'PreviewPathOpacity:gy:q5', [1, NaN], 'PreviewPathStroke:st:q6', [Brush.$, null], 'PyramidMarkerTemplate:pr:q7', [DataTemplate.$, null], 'RightButtonDefaultInteraction:ck:q8', [InteractionState_$type, /*@__PURE__*/ enumGetBox(InteractionState_$type, 3)], 'ScrollbarsAnimationDuration:hw:q9', [1, 300], 'ShouldPanOnMaximumZoom:e9:ra', [0, true], 'SquareMarkerTemplate:ps:rc', [DataTemplate.$, null], 'SubtitleHorizontalAlignment:r7:rd', [HorizontalAlignment_$type, /*@__PURE__*/ enumGetBox(HorizontalAlignment_$type, 1)], 'Subtitle:j4:re', [2, null], 'TetragramMarkerTemplate:pt:rf', [DataTemplate.$, null], 'TitleHorizontalAlignment:r8:rg', [HorizontalAlignment_$type, /*@__PURE__*/ enumGetBox(HorizontalAlignment_$type, 1)], 'Title:kg:rh', [2, null], 'TriangleMarkerTemplate:pu:ri', [DataTemplate.$, null], 'UseTiledZooming:fi:rj', [0, false], 'VerticalCrosshairBrush:sw:rk', [Brush.$, null], 'WindowPositionHorizontal:hi:rx', [1, NaN], 'WindowPositionVertical:hj:ry', [1, NaN], 'WindowRectMinHeight:hk:rz', [1, NaN], 'WindowRectMinWidth:hl:r0', [1, NaN], 'WindowRect:tp:r1', [Rect.$, /*@__PURE__*/ new Rect(0, 0, 0, 1, 1)], 'WindowResponse:cb:r2', [WindowResponse_$type, /*@__PURE__*/ enumGetBox(WindowResponse_$type, 1)], 'WindowSizeMinHeight:hm:r3', [1, NaN], 'WindowSizeMinWidth:hn:r4', [1, NaN], 'ZoomCoercionMode:cf:r5', [ZoomCoercionMode_$type, /*@__PURE__*/ enumGetBox(ZoomCoercionMode_$type, 0)], 'ZoomTileCacheSize:hx:r6', [1, 30]]);
    return SeriesViewer;
})();
/**
 * @hidden
 */
export let SeriesViewerView = /*@__PURE__*/ (() => {
    class SeriesViewerView extends Base {
        constructor(a) {
            super();
            this.p = null;
            this.a = null;
            this.n = null;
            this.o = null;
            this.g = null;
            this.b = null;
            this.ai = false;
            this.fi = null;
            this.ff = null;
            this.fe = null;
            this.fd = null;
            this.h = new SeriesViewerComponentsFromView();
            this.j = null;
            this.w = null;
            this.z = null;
            this.y = null;
            this.x = null;
            this.an = false;
            this.ao = false;
            this.bi = null;
            this.k = null;
            this.a9 = 0;
            this.a8 = 0;
            this.a7 = 0;
            this.e9 = Rect.empty;
            this.aj = false;
            this.fg = null;
            this.fh = null;
            this.a1 = 0;
            this.az = 0;
            this.a0 = 0;
            this.ay = 0;
            this.ak = true;
            this.aa = false;
            this.a2 = NaN;
            this.fa = Rect.empty;
            this.ab = false;
            this.af = false;
            this.ae = false;
            this.av = false;
            this.et = null;
            this.es = null;
            this.ad = false;
            this.ac = false;
            this.ag = true;
            this.ax = null;
            this.ar = false;
            this.bg = 0;
            this.ah = true;
            this.a8 = 0;
            this.a7 = 0;
            this.p = a;
            this.p.s0 = { $type: Point_$type, x: NaN, y: NaN };
            this.p.cb = 1;
            this.j = new SeriesViewerViewManager(this);
            this.fd = ((() => {
                let $ret = new Line();
                $ret.visibility = 1;
                return $ret;
            })());
            this.fe = ((() => {
                let $ret = new Line();
                $ret.visibility = 1;
                return $ret;
            })());
        }
        l() {
            return new DOMExecutionContext(this.j.ae);
        }
        co() {
            this.j.a9();
        }
        c4() {
            this.p.d7 = true;
            this.p.tt = 1;
            this.p.d7 = false;
            this.ff = new Path();
            this.fi = new Rectangle();
            this.fi._visibility = 1;
            this.d6();
            this.g = new SeriesCollection();
            this.b = new AxisCollection();
            this.a = new CanvasRenderScheduler();
            this.a.l(this);
            this.a.e.add(this.p.am);
            if (this.p.tu == 0) {
                this.cn();
            }
            let a = this.p;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, runOn(this, this.ct));
            let b = this.p;
            b.gridAreaRectChanged = delegateCombine(b.gridAreaRectChanged, runOn(this, this.cs));
            this.o = new OverviewPlusDetailViewportHost(this);
            this.dp();
        }
        e() {
            for (let a = 0; a < this.g.count; a++) {
                if (this.g._inner[a].a6.a$c) {
                    return this.g._inner[a];
                }
            }
            return null;
        }
        cn() {
            if (this.n == null) {
                this.n = this.j.g();
            }
            this.p.cn.provideContext(this.z);
            this.p.cn.provideContainer(this.bi);
            this.p.cn.provideEventSource(this.k);
            this.n.world = new Rect(0, 0, 0, 1, 1);
            this.n.window = this.p.tp;
            this.n.surfaceViewer = TypeRegistrar.create("SeriesViewerSurfaceViewer", this.p, this);
            this.n.viewScheduler = this.a;
            this.em();
            let a = this.n;
            a.windowChanging = delegateCombine(a.windowChanging, runOn(this, this.dn));
            let b = this.n;
            b.windowChanged = delegateCombine(b.windowChanged, runOn(this, this.dm));
        }
        dn(a, b) {
            let c = b.newValue;
            if (this.n != null) {
                c = this.n.changeRect(b.oldValue, b.newValue, this.p.er(), this.p.es(), this.n.world);
            }
            if (c.isEmpty) {
                this.n.window = b.oldValue;
            }
            else if (!c.equals1(b.newValue)) {
                this.n.window = c;
            }
            if (this.p.cb == 1) {
                let d = this.p.to.width / this.p.to.height;
                c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
                this.p.tp = c;
            }
        }
        dm(a, b) {
            let c = b.newValue;
            if (this.n != null) {
                c = this.n.changeRect(b.oldValue, b.newValue, this.p.er(), this.p.es(), this.n.world);
            }
            if (c.isEmpty) {
                c = b.oldValue;
            }
            else if (!c.equals1(b.newValue)) {
                this.n.window = c;
            }
            let d = this.p.to.width / this.p.to.height;
            c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
            this.p.tp = c;
        }
        em() {
            if (this.n == null) {
                return;
            }
            if (this.p.tu != 0) {
                return;
            }
            let a = 1;
            if (this.p.to.isEmpty == false) {
                a = this.p.to.width / this.p.to.height;
            }
            let b = this.n.world;
            let c = new Rect(0, 0, 0, a, 1);
            this.n.world = c;
            if (b.width != c.width || b.height != c.height || b.x != c.x || b.y != c.y) {
                this.n.surfaceViewer.isDirty = true;
            }
            this.n.window = new Rect(0, this.p.tp.left * a, this.p.tp.top, this.p.tp.width * a, this.p.tp.height);
        }
        ct(a, b) {
            this.em();
        }
        cs(a, b) {
            this.em();
        }
        cb(a, b, c) {
            let d = true;
            for (let e of fromEnum(this.p.series)) {
                if (d && e.e1) {
                    d = false;
                    c.a.k(0, 0, a, b);
                }
                e.mn(new Rect(0, 0, 0, a, b), c);
            }
        }
        d5() {
            this.j.bl();
        }
        cd() {
        }
        d7() {
            this.j.bm();
        }
        ck() {
            for (let a = 0; a < this.p.series.count; a++) {
                this.p.series._inner[a].b0.ap();
            }
        }
        cc() {
        }
        ce() {
        }
        dy(a) {
            let b = this.g.indexOf(a);
            if (b >= 0) {
                this.g.removeAt(b);
            }
            if (a.isStacked) {
                a.ld((c) => {
                    c.cd = null;
                    b = this.g.indexOf(c);
                    if (b >= 0) {
                        this.g.removeAt(b);
                    }
                    return true;
                });
            }
            this.p.oj();
            a.l8(null, null);
            this.dc();
        }
        dc() {
            if (this.p.destroyed) {
                return;
            }
            if (this.g.count == 0) {
                if (this.y != null && Rect.l_op_Inequality(this.p.to, null) && !this.p.to.isEmpty) {
                    this.er();
                }
            }
            this.p.al.o(this.y, this.x);
        }
        er() {
            if (this.g.count > 0) {
                return;
            }
            if (this.y != null && Rect.l_op_Inequality(this.p.to, null) && !this.p.to.isEmpty) {
                if (this.p.gc != 1) {
                    this.y.z();
                    this.y.aa(this.p.gc, this.p.gc);
                }
                this.y.k(this.p.to.left, this.p.to.top, this.p.to.width, this.p.to.height);
                if (this.p.gc != 1) {
                    this.y.y();
                }
            }
        }
        aq(a) {
            a.l3(a.b0.bu, this.e9);
            return this.g.contains(a);
        }
        get au() {
            return this.ai;
        }
        set au(a) {
            this.ai = a;
        }
        bp(a) {
            if (!this.g.contains(a)) {
                this.g.add(a);
                if (a.isStacked) {
                    a.ld((b) => {
                        this.g.add(b);
                        return true;
                    });
                }
                this.p.oj();
            }
            a.l8(this.y, this.x);
            this.p.l6();
        }
        dt(a) {
            this.x = a;
            for (let b = 0; b < this.g.count; b++) {
                this.g._inner[b].l8(this.y, this.x);
            }
            for (let c = 0; c < this.b.count; c++) {
                this.b._inner[c].hw(this.y, this.x);
            }
        }
        bx() {
        }
        bt() {
            this.cf();
            this.ck();
        }
        cf() {
            this.fi._visibility = 1;
            this.cq();
        }
        ca() {
        }
        dr() {
        }
        d8() {
            this.fi._visibility = 0;
            this.cq();
        }
        eg(a) {
            this.fi.o = a.top + this.p.to.top;
            this.fi.n = a.left + this.p.to.left;
            this.fi.width = a.width;
            this.fi.height = a.height;
            this.db();
            this.fi._fill = null;
            this.fi.ac = 0.5;
            this.cq();
        }
        bw() {
        }
        df() {
        }
        eo(a, b, c, d) {
            this.fe.ak = a;
            this.fe.am = b;
            this.fe.al = c;
            this.fe.an = d;
            this.cq();
        }
        ed() {
            this.fe._visibility = 0;
            this.cq();
        }
        cl() {
            if (this.fe._visibility == 0) {
                this.fe._visibility = 1;
                this.cq();
            }
        }
        eh(a, b, c, d) {
            this.fd.ak = a;
            this.fd.am = b;
            this.fd.al = c;
            this.fd.an = d;
            this.cq();
        }
        d9() {
            this.fd._visibility = 0;
            this.cq();
        }
        cg() {
            if (this.fd._visibility == 0) {
                this.fd._visibility = 1;
                this.cq();
            }
        }
        cj() {
            this.ff._visibility = 1;
            this.cq();
        }
        e6(a) {
            let b = new PathFigureCollection();
            let c = new PathFigure();
            c._isClosed = true;
            c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
            b.add(c);
            return b;
        }
        e7(a) {
            let b = new PathFigureCollection();
            let c = new PathFigure();
            c._isClosed = true;
            c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
            b.add(c);
            return b;
        }
        en(a, b) {
            b.intersect(a);
            let c = new PathGeometry();
            c.c = this.e7(a);
            let d = new PathGeometry();
            d.c = this.e6(b);
            let e = new GeometryGroup();
            e.d.add(c);
            e.d.add(d);
            this.ff.ak = e;
            this.db();
            this.cq();
        }
        ec() {
            this.ff._visibility = 0;
            this.cq();
        }
        ep(a) {
        }
        dw(a) {
            let b = this.b.indexOf(a);
            this.b.removeAt(b);
            a.hw(null, null);
            this.d3();
            this.p.oq(a.name, true);
        }
        dx(a) {
        }
        bo(a) {
            if (!this.b.contains(a)) {
                this.b.add(a);
            }
            a.hw(this.y, this.x);
            this.d3();
        }
        bl(a) {
        }
        i() {
            this.h.a = this.n;
            return this.h;
        }
        static aw(a) {
            let b = a.cd.series;
            let c = new List$1(Series.$, 0);
            for (let d = 0; d < b.count; d++) {
                c.add(b._inner[d]);
                if (b._inner[d].isStacked) {
                    b._inner[d].ld((e) => {
                        c.add(e);
                        return true;
                    });
                }
            }
            return c;
        }
        d2() {
            this.p.tp = new Rect(0, 0, 0, 1, 1);
        }
        c0(a) {
            if (a == this.bi) {
                return;
            }
            if (a == null) {
                if (this.k != null) {
                    this.k.av();
                }
                this.j.bf(null);
                this.w = null;
                this.z = null;
                this.y = null;
                this.x = null;
                this.k = null;
                if (this.p.cn != null) {
                    this.p.cn.provideContext(null);
                    this.p.cn.provideContainer(null);
                    this.p.cn.provideEventSource(null);
                }
                return;
            }
            this.bi = a;
            if (this.au) {
                this.a.e.add(this.p.al);
            }
            this.j.bf(a);
            this.w = this.j.t;
            this.z = this.j.w;
            this.y = this.j.v;
            this.x = this.j.u;
            this.an = false;
            try {
                this.an = (window.navigator.msPointerEnabled && window.MSGesture !== undefined);
            }
            catch (b) {
            }
            this.ao = false;
            try {
                this.ao = (window.PointerEvent !== undefined);
            }
            catch (c) {
            }
            if (this.an || this.ao) {
                this.av = true;
            }
            this.k = this.j.f;
            if (this.k != null) {
                this.k.bl = this.p.to;
                this.k.ao = runOn(this, this.as);
                let d = this.k;
                d.onContactCompleted = delegateCombine(d.onContactCompleted, (d, e) => this.cx(d, e, this.k.am));
                let e = this.k;
                e.onContactMoved = delegateCombine(e.onContactMoved, runOn(this, this.cy));
                let f = this.k;
                f.onContactStarted = delegateCombine(f.onContactStarted, runOn(this, this.cz));
                let g = this.k;
                g.onDragCompleted = delegateCombine(g.onDragCompleted, runOn(this.p, this.p.m1));
                let h = this.k;
                h.onFlingStarted = delegateCombine(h.onFlingStarted, runOn(this, this.al));
                let i = this.k;
                i.onDragDelta = delegateCombine(i.onDragDelta, (i) => this.p.m2(i));
                let j = this.k;
                j.onDragStarted = delegateCombine(j.onDragStarted, (j) => this.p.m3(j, true));
                let k = this.k;
                k.onKeyDown = delegateCombine(k.onKeyDown, runOn(this.p, this.p.e2));
                let l = this.k;
                l.onMouseDown = delegateCombine(l.onMouseDown, runOn(this, this.c6));
                let m = this.k;
                m.onMouseLeave = delegateCombine(m.onMouseLeave, runOn(this, this.c7));
                let n = this.k;
                n.onMouseOver = delegateCombine(n.onMouseOver, runOn(this, this.c8));
                let o = this.k;
                o.onMouseUp = delegateCombine(o.onMouseUp, runOn(this, this.c9));
                let p = this.k;
                p.onMouseWheel = delegateCombine(p.onMouseWheel, runOn(this.p, this.p.e3));
                if (this.k.an) {
                    let q = this.k;
                    q.onZoomDelta = delegateCombine(q.onZoomDelta, (q, r, s, t) => this.p.nv(q, r, s, t));
                    let r = this.k;
                    r.onZoomStarted = delegateCombine(r.onZoomStarted, (r, s, t, u) => this.p.nz(r, s, t, u));
                    let s = this.k;
                    s.onZoomCompleted = delegateCombine(s.onZoomCompleted, (s, t, u, v) => {
                        if (this.k.af) {
                            this.p.nr();
                        }
                        this.p.nu(s, t, u, v);
                    });
                }
                else {
                    let t = this.k;
                    t.onPinchDelta = delegateCombine(t.onPinchDelta, (t, u) => this.p.nd(u));
                    let u = this.k;
                    u.onPinchStarted = delegateCombine(u.onPinchStarted, (u, v) => this.p.ne(u));
                    let v = this.k;
                    v.onGestureCompleted = delegateCombine(v.onGestureCompleted, (v, w) => this.p.m4(v));
                }
                let w = this.k;
                w.onDoubleTap = delegateCombine(w.onDoubleTap, (w) => this.p.m0(w));
                let x = this.k;
                x.onHold = delegateCombine(x.onHold, runOn(this, this.c3));
            }
            if (this.p.cn != null) {
                this.p.cn.provideContext(this.z);
                this.p.cn.provideContainer(a);
                this.p.cn.provideEventSource(this.k);
            }
            for (let y of fromEnum(this.b)) {
                y.a4.az();
                this.bo(y);
            }
            for (let z of fromEnum(this.g)) {
                this.bp(z);
            }
        }
        al(a, b, c) {
            if (this.p.dt) {
                return false;
            }
            return true;
        }
        cy(a, b) {
            this.p.ms(a, b);
        }
        cz(a, b) {
            this.p.a9.f$t(this.p, a, b);
        }
        c3(a) {
            this.p.nf(a);
        }
        cx(a, b, c) {
            this.p.mr(a, b, c);
        }
        du(a) {
        }
        get_ap() {
            return false;
        }
        get ap() {
            return this.get_ap();
        }
        ef() {
            this.a9 = FontUtil.getCurrentFontHeight(this.j.ae, this.p.getFontInfo());
        }
        f(a, b, c, d) {
            return {
                ret: ((() => { let e = this.p.a9.f$d(this.p, this.g, this.x, a, b, c, d); c = e.p5; return e.ret; })()),
                p2: c
            };
        }
        bd() {
            return this.a8;
        }
        bc() {
            return this.a7;
        }
        cu() {
            this.j.bc();
        }
        c1(a, b) {
            let c = this.a8;
            let d = this.a7;
            if (this.a8 != a) {
                this.aj = true;
            }
            this.a8 = a;
            if (this.a7 != b) {
                this.aj = true;
            }
            this.a7 = b;
            if (this.aj) {
                let e = new Size(1, c, d);
                let f = new Size(1, a, b);
                this.p.nq(e, f);
            }
            this.dj();
            this.d3();
            this.p.al.o(this.y, this.x);
        }
        b6(a) {
            this.fg = a;
        }
        b9(a) {
            this.fh = a;
        }
        b8() {
            this.a.o(this.z, null);
        }
        d3() {
            this.ag = true;
            this.p.ar.z();
        }
        b2() {
            if (this.a8 == 0 || this.a7 == 0) {
                return;
            }
            this.ag = false;
            this.aa = false;
            if (this.ak) {
                this.di();
                this.de();
                this.ak = false;
                this.cq();
            }
            let a = this.a8;
            let b = this.a7;
            let c = this.p.gw;
            let d = this.p.g1;
            let e = this.p.gj;
            let f = this.p.ha;
            let g = this.p.gh;
            let h = this.p.gi;
            if (isNaN_(g)) {
                g = this.a9 / 2;
            }
            if (isNaN_(h)) {
                h = 0;
            }
            let i = this.p.e7();
            let j = new List$1(AxisLabelPanelBase.$, 0);
            for (let k of fromEnum(this.b)) {
                if (k.av != null) {
                    j.add(k.av);
                    k.av.bx = () => this.aj;
                }
            }
            if (i) {
                let l = false;
                let m = false;
                let n = false;
                let o = false;
                for (let p of fromEnum(j)) {
                    if (LabelPanelArranger.b(p) == 2 && (p.ad.ay == null || p.ad.ay.visibility == 0)) {
                        l = true;
                    }
                    if (LabelPanelArranger.b(p) == 3 && (p.ad.ay == null || p.ad.ay.visibility == 0)) {
                        m = true;
                    }
                    if (LabelPanelArranger.b(p) == 0 && (p.ad.ay == null || p.ad.ay.visibility == 0)) {
                        n = true;
                    }
                    if (LabelPanelArranger.b(p) == 1 && (p.ad.ay == null || p.ad.ay.visibility == 0)) {
                        o = true;
                    }
                    if (p.ad != null && p.ad.ay != null) {
                        p.ad.ay.c = p.ad.ay.location;
                    }
                }
                if (l || m) {
                    if (!n && isNaN_(f)) {
                        f = g;
                    }
                    if (!o && isNaN_(e)) {
                        e = g;
                    }
                }
                if (o || n) {
                    if (!l && isNaN_(c)) {
                        c = h;
                    }
                    if (!m && isNaN_(d)) {
                        d = h;
                    }
                }
            }
            if (isNaN_(f)) {
                f = 0;
            }
            if (isNaN_(c)) {
                c = 0;
            }
            if (isNaN_(d)) {
                d = 0;
            }
            if (isNaN_(e)) {
                e = 0;
            }
            let q = this.bf();
            f += q;
            let r = this.be();
            f += r;
            let s = new Rect(0, c, f, a - (c + d), b - (f + e));
            s = LabelPanelArranger.e(j, s);
            let t = new Size(1, Math.max(0, a - (c + d)), Math.max(0, b - (f + e)));
            if (this.p.d3() && s.width != s.height) {
                if (s.width < s.height) {
                    f += (s.height - s.width) / 2;
                    s.top = s.top + ((s.height - s.width) / 2);
                    t.height = t.height - (s.height - s.width);
                    s.height = s.width;
                }
                else {
                    c += (s.width - s.height) / 2;
                    s.left = s.left + ((s.width - s.height) / 2);
                    t.width = t.width - (s.width - s.height);
                    s.width = s.height;
                }
            }
            this.a1 = f - (q + r);
            this.az = c;
            this.a0 = d;
            this.ay = e;
            this.e9 = s;
            let u = ((() => {
                let $ret = new LabelPanelsArrangeState();
                $ret.f = c;
                $ret.c = c;
                $ret.a = f + t.height;
                $ret.b = f + t.height;
                $ret.g = c + t.width;
                $ret.d = c + t.width;
                $ret.h = f;
                $ret.e = f;
                return $ret;
            })());
            LabelPanelArranger.d(j, u, this.e9, (v, w) => {
                if (!v.c1.equals1(w)) {
                    if (v.ad != null) {
                        v.ad.cq = true;
                    }
                    v.c1 = w;
                    v.ad.a4.ag();
                }
            });
            let v = false;
            if (this.aj) {
                this.aj = false;
                v = true;
            }
            this.p.n3(this.p.to, this.e9);
            for (let w of fromEnum(this.b)) {
                if (Rect.l_op_Equality(w.kc, null) || w.kc.isEmpty) {
                    this.aa = true;
                }
                if (w.kc.equals1(this.e9) && !this.j.y()) {
                    continue;
                }
                w.ho(w.kc, this.e9);
            }
            for (let x of fromEnum(this.g)) {
                if (Rect.l_op_Equality(x.b0.bu, null) || x.b0.bu.isEmpty) {
                    this.aa = true;
                }
                if (x.b0.bu.equals1(this.e9) && !this.j.y()) {
                    continue;
                }
                x.l3(x.b0.bu, this.e9);
            }
            this.ek();
            this.dv(this.e9);
            this.j.bb(false);
        }
        ek() {
            if (this.p.cn != null && !this.e9.isEmpty) {
                let a = this.p.cn;
                let b = (this.p.dn) ? this.e9.width : Number.POSITIVE_INFINITY;
                let c = (this.p.dn) ? this.e9.height : Number.POSITIVE_INFINITY;
                let d = a.getDesiredSize(new Size(1, b, c));
                this.p.cn.arrange(new Rect(0, this.e9.right - d.width, this.e9.bottom - d.height, d.width, d.height));
                this.em();
            }
        }
        v() {
            let a = this.p.getFontInfo();
            let b = this.s();
            if (this.p.c1() != null) {
                a = this.p.c1();
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        u() {
            let a = this.p.getFontInfo();
            let b = this.r();
            if (this.p.c0() != null) {
                a = this.p.c0();
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        e5() {
            let a = this.p.getFontBrush();
            let b = this.e2();
            if (this.p.sv != null) {
                a = this.p.sv;
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        e4() {
            let a = this.p.getFontBrush();
            let b = this.e1();
            if (this.p.su != null) {
                a = this.p.su;
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        bf() {
            if (this.p.kg == null || !(typeCast(XamDataChart.$, this.p) !== null)) {
                return 0;
            }
            let a = this.v();
            let b = 0;
            b = FontUtil.getCurrentFontHeight(this.j.ae, a);
            let c = this.fm();
            b += c.top + c.bottom;
            return b;
        }
        be() {
            if (this.p.j4 == null || !(typeCast(XamDataChart.$, this.p) !== null)) {
                return 0;
            }
            if (!isNaN_(this.a2)) {
                return this.a2;
            }
            let a = this.u();
            this.a2 = FontUtil.getCurrentFontHeight(this.j.ae, a);
            let b = this.fl();
            this.a2 += b.top + b.bottom;
            return this.a2;
        }
        fm() {
            let a = this.j.cd();
            let b = isNaN_(this.p.g9) ? a.top : this.p.g9;
            let c = isNaN_(this.p.g7) ? a.left : this.p.g7;
            let d = isNaN_(this.p.g8) ? a.right : this.p.g8;
            let e = isNaN_(this.p.g6) ? a.bottom : this.p.g6;
            return new Thickness(1, c, b, d, e);
        }
        fl() {
            let a = this.j.cc();
            let b = isNaN_(this.p.g5) ? a.top : this.p.g5;
            let c = isNaN_(this.p.g3) ? a.left : this.p.g3;
            let d = isNaN_(this.p.g4) ? a.right : this.p.g4;
            let e = isNaN_(this.p.g2) ? a.bottom : this.p.g2;
            return new Thickness(1, c, b, d, e);
        }
        dv(a) {
        }
        cq() {
            if (!this.af) {
                if (this.z != null) {
                    this.af = true;
                    this.a.o(this.z, null);
                }
            }
        }
        d0() {
            if (this.z == null) {
                return;
            }
            if (this.z.d) {
                if (this.p.gc != 1) {
                    this.z.z();
                    this.z.aa(this.p.gc, this.p.gc);
                }
                if (!this.fa.isEmpty) {
                    if (!this.au) {
                        this.z.k(this.fa.left, this.fa.top, this.fa.width, this.fa.height);
                    }
                }
            }
            this.d1();
            if (this.z.d) {
                if (this.p.gc != 1) {
                    this.z.y();
                }
            }
        }
        isValid() {
            return true;
        }
        preRender() {
            this.j.a5(this.a8, this.a7);
            this.ds();
        }
        ds() {
        }
        d1() {
            if (this.z.d) {
                this.fa = new Rect(0, 0, 0, this.a8, this.a7);
                if (this.ax != null && this.ax.count > 0) {
                    this.ci();
                    this.z.z();
                    this.z.ae(this.p.to);
                    if (!this.au) {
                        this.z.k(this.p.to.left, this.p.to.top, this.p.to.width, this.p.to.height);
                    }
                }
                this.z.r(this.fd);
                this.z.r(this.fe);
                this.z.s(this.ff);
                this.z.v(this.fi);
                this.z.ac(this.v());
                if (this.et != null) {
                    this.et.ao = this.e5();
                    this.z.w(this.et);
                }
                this.z.ac(this.u());
                if (this.es != null) {
                    this.es.ao = this.e4();
                    this.z.w(this.es);
                }
                if (this.ax != null && this.ax.count > 0) {
                    this.j.bk(this.ax);
                    this.z.y();
                }
                if (this.ar) {
                    this.eb();
                    this.ar = false;
                    this.ax.clear();
                    this.p.a9.f$i(this.p);
                    this.cq();
                }
                if (this.p.du) {
                    if (this.fh != null) {
                        this.z.v(this.fh);
                    }
                    if (this.fg != null) {
                        this.z.v(this.fg);
                    }
                }
            }
        }
        c2() {
            this.j.bg();
        }
        cw() {
            this.j.be();
        }
        fb() {
            return new Rect(0, 0, 0, this.a8, this.a7);
        }
        e8() {
            return this.j.b7();
        }
        d6() {
            this.p.pl = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.d;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.pu = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.m;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.pr = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.j;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.ps = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.k;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.pm = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.e;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.pp = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.h;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.pn = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.f;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.pt = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.l;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.pq = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.i;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.po = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.g;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
        }
        ee() {
            this.j.bo();
            this.d4();
            let a = this.a9;
            this.ef();
            if (a != this.a9) {
                this.p.l6();
            }
        }
        dp() {
            if (this.p.tu == 0) {
                this.cn();
                this.p.l2();
            }
            if (this.p.cn != null) {
                let a = this.p.tu;
                this.p.cn.visibility = a;
                this.p.cn.doRefresh(false);
            }
        }
        as(a) {
            return this.p.a9.f$g(this.p, a);
        }
        c8(a, b, c) {
            this.p.a9.f$w(this.p, this.g, this.x, a, b, c);
            this.p.ln(a, this.p.cl != 0 || this.p.ev);
        }
        c7(a) {
            this.p.a9.f$v(this.p, a);
        }
        c6(a) {
            this.p.a9.f$u(this.p, this.k, a);
        }
        c9(a) {
            this.p.a9.f$x(this.p, this.k, a);
        }
        d4() {
        }
        get ez() {
            return this.k.bi;
        }
        eq(a) {
            if (this.k != null) {
                this.k.bl = this.p.to;
            }
        }
        cr(a) {
            this.p.a9.f$aa(this.p, a);
            this.p.dn = a;
        }
        bk(a) {
            this.p.o5();
            this.j.bv(a);
            if (this.p.cn != null) {
                this.p.cn.mobileMode = a;
            }
            this.el();
        }
        el() {
            this.p.pc();
        }
        get isDirty() {
            return this.af;
        }
        set isDirty(a) {
            this.af = a;
        }
        undirty(a) {
            this.af = false;
            this.d0();
        }
        get index() {
            return 10;
        }
        postRender() {
        }
        b7() {
            this.d3();
        }
        ch() {
            this.j.a8();
        }
        ea() {
            this.j.bn();
        }
        bv(a) {
            this.j.ax();
        }
        bm(a) {
            this.j.at(a);
        }
        ei(a) {
            this.j.bt(a);
        }
        ej(a) {
            this.j.bu(a);
        }
        bn(a) {
            this.j.au(a);
        }
        dz(a) {
            this.j.bj(a);
        }
        da(a) {
            this.p.al.o(this.y, this.z);
        }
        bu(a) {
        }
        m(a) {
            if (this.p.dn) {
                return 2;
            }
            else {
                return 1;
            }
        }
        c5() {
            if (this.k != null) {
                this.k.ae = this.p.el;
            }
            if (this.n != null) {
                this.n.isSurfaceInteractionDisabled = this.p.el;
            }
        }
        bb(a, b) {
            if (a == null || this.z == null) {
                return 0;
            }
            this.z.ac(b);
            return this.z.e(a);
        }
        ba(a, b) {
            if (a == null) {
                return 0;
            }
            let c = 0;
            c = FontUtil.getCurrentFontHeight(this.j.ae, b);
            return c;
        }
        dj() {
            this.ak = true;
            this.d3();
            this.cq();
        }
        eu(a, b, c, d) {
            if (a == null) {
                return null;
            }
            let e = ((() => {
                let $ret = new TextBlock();
                $ret.al = a;
                $ret.o = b.top;
                return $ret;
            })());
            let f = this.bb(e, c);
            e.o = b.top;
            let g = this.ba(a, c);
            e.m = f;
            e.l = g;
            switch (d) {
                case 0:
                    e.n = b.left;
                    break;
                case 2:
                    e.n = Math.max((this.a8 - b.right) - f, b.left);
                    break;
                case 1:
                case 3:
                default:
                    let h = (this.a8 / 2) - (f / 2);
                    h += b.left;
                    h -= b.right;
                    e.n = h;
                    break;
            }
            return e;
        }
        di() {
            this.et = typeCast(XamDataChart.$, this.p) !== null ? this.eu(this.p.kg, this.fm(), this.v(), this.ey()) : null;
        }
        de() {
            this.a2 = NaN;
            this.es = typeCast(XamDataChart.$, this.p) !== null ? this.eu(this.p.j4, this.fl(), this.u(), this.ex()) : null;
            if (this.es != null) {
                this.es.o += this.bf();
            }
        }
        c(a) {
            let b = this.j.c();
            if (b == 0) {
                let c = LabelPanelArranger.b(a.av);
                if (a.ai == null) {
                    if (c == 4) {
                        return 4;
                    }
                    if (c == 5) {
                        return 3;
                    }
                }
                else {
                    if (c == 4) {
                        return 3;
                    }
                    if (c == 5) {
                        return 4;
                    }
                }
                if (c == 0) {
                    return 3;
                }
                return 4;
            }
            return b;
        }
        d(a) {
            let b = this.j.d();
            if (b == 0) {
                let c = LabelPanelArranger.b(a.av);
                if (a.ai == null) {
                    if (c == 7) {
                        return 1;
                    }
                    if (c == 6) {
                        return 2;
                    }
                }
                else {
                    if (c == 7) {
                        return 2;
                    }
                    if (c == 6) {
                        return 1;
                    }
                }
                if (c == 3) {
                    return 2;
                }
                return 1;
            }
            return b;
        }
        dk() {
            if (!isNaN_(this.p.gb)) {
                if (!isNaN_(DeviceUtils.a(this.p.gx))) {
                    this.p.gc = DeviceUtils.a(this.p.gx);
                }
                else {
                    this.co();
                }
            }
            if (!this.p.ea) {
                this.j.a4();
            }
        }
        dl() {
            if (!isNaN_(DeviceUtils.a(this.p.gb))) {
                this.p.gc = DeviceUtils.a(this.p.gb);
            }
            if (!this.p.ea) {
                this.j.a3();
            }
        }
        t() {
            return this.j.r();
        }
        e3() {
            return this.j.b6();
        }
        q() {
            return this.j.q();
        }
        e0() {
            return this.j.b5();
        }
        s() {
            return this.j.p();
        }
        r() {
            return this.j.o();
        }
        e2() {
            return this.j.b4();
        }
        e1() {
            return this.j.b3();
        }
        get a4() {
            return this.az;
        }
        get a5() {
            return this.a0;
        }
        get a6() {
            return this.a1;
        }
        get a3() {
            return this.ay;
        }
        get ew() {
            return this.et;
        }
        get ev() {
            return this.es;
        }
        fc() {
            return new Rect(0, 0, 0, this.a8, this.a7);
        }
        fk() {
            return this.j.cf();
        }
        fj() {
            return this.j.ce();
        }
        dd(a, b) {
            this.ac = true;
        }
        dh(a, b) {
            this.ad = true;
        }
        ey() {
            if (this.ad) {
                return this.p.r8;
            }
            else {
                let a = 1;
                switch (this.j.as()) {
                    case "left":
                        a = 0;
                        break;
                    case "right":
                        a = 2;
                        break;
                }
                return a;
            }
        }
        ex() {
            if (this.ac) {
                return this.p.r7;
            }
            else {
                let a = 1;
                switch (this.j.ar()) {
                    case "left":
                        a = 0;
                        break;
                    case "right":
                        a = 2;
                        break;
                }
                return a;
            }
        }
        bq() {
            if (this.ag) {
                this.b2();
                if (this.aa) {
                    this.p.ar.y();
                }
                if (this.ag) {
                    this.b2();
                }
            }
        }
        am() {
            if (this.p.fk) {
                return false;
            }
            if ((dateNow().getTime() - this.p.fo.getTime()) < 300) {
                return true;
            }
            return false;
        }
        b5() {
            this.j.a5(this.a8, this.a7);
        }
        cp() {
            this.j.ba(this.p.ek);
        }
        at(a) {
            let b = this.p.s9;
            let c = b.top > 0;
            let d = b.left > 0;
            let e = b.right < 1;
            let f = b.bottom < 1;
            let g = a.y < 0;
            let h = a.y > 0;
            let i = a.x < 0;
            let j = a.x > 0;
            if (c && g) {
                return true;
            }
            if (d && i) {
                return true;
            }
            if (f && h) {
                return true;
            }
            if (j && e) {
                return true;
            }
            return false;
        }
        dq() {
            this.j.bi();
            this.p.al.o(this.y, this.x);
            this.p.am.o(this.y, null);
            this.p.ak.o(this.y, this.x);
            this.a.o(this.z, null);
        }
        b3(a, b, c) {
            this.ar = false;
            if (this.ax == null) {
                this.ax = new List$1(ITileZoomTile_$type, 0);
            }
            for (let d = 0; d < this.ax.count; d++) {
                while (d < this.ax.count && !a.containsKey(this.ax._inner[d].content)) {
                    this.ax.removeAt(d);
                }
            }
            for (let e = 0; e < b.count; e++) {
                this.ax.add(b._inner[e]);
            }
            this.cq();
        }
        bh(a, b, c) {
            return this.j.an(a, b, c);
        }
        b0() {
            this.j.a1();
        }
        b1(a) {
            this.j.a2(a);
        }
        cm() {
            if (this.ax == null) {
                return;
            }
            this.ar = true;
            this.cq();
        }
        by() {
            this.j.az();
        }
        br() {
            this.j.av();
        }
        bz(a) {
            this.j.a0(a);
            this.p.my();
        }
        bs() {
            this.j.aw();
            this.p.mw();
        }
        ci() {
            if (this.ah) {
                this.ah = false;
                this.y.k(this.p.to.left, this.p.to.top, this.p.to.width, this.p.to.height);
                this.p.al.c = true;
            }
        }
        eb() {
            if (!this.ah) {
                this.ah = true;
                this.p.al.c = false;
                this.p.al.o(this.y, this.x);
            }
        }
        dg() {
        }
        cv() {
            this.j.bd();
        }
        db() {
            this.ff._fill = this.p.ss == null ? this.j.b2() : this.p.ss;
            this.ff._opacity = isNaN_(this.p.gy) ? 0.1 : this.p.gy;
            this.fi._stroke = this.p.st == null ? this.j.b2() : this.p.st;
        }
        b4(a) {
            if (this.j.ae == null) {
                this.p.provideContainer(a);
            }
        }
        bj(a, b) {
            return this.j.ao(a, b);
        }
    }
    SeriesViewerView.$t = /*@__PURE__*/ markType(SeriesViewerView, 'SeriesViewerView', Base.$, [ISchedulableRender_$type]);
    return SeriesViewerView;
})();
/**
 * @hidden
 */
export let OverviewPlusDetailViewportHost = /*@__PURE__*/ (() => {
    class OverviewPlusDetailViewportHost extends Base {
        constructor(a) {
            super();
            this.a = null;
            if (a == null) {
                throw new ArgumentNullException(0, "view");
            }
            this.a = a;
        }
        getViewInfo(a, b) {
            a = new Rect(0, 0, 0, this.a.n.worldRectViewport.width, this.a.n.worldRectViewport.height);
            b = SeriesViewer.tl;
            return {
                p0: a,
                p1: b
            };
        }
        getEffectiveViewport() {
            if (!this.a.p.ej) {
                if (this.a.p.td.isEmpty) {
                    return this.a.p.td;
                }
                return this.a.p.ti(this.a.n.previewViewportdRect, this.a.p.to, this.a.p.td);
            }
            return Rect.empty;
        }
    }
    OverviewPlusDetailViewportHost.$t = /*@__PURE__*/ markType(OverviewPlusDetailViewportHost, 'OverviewPlusDetailViewportHost', Base.$, [IProvidesViewport_$type]);
    return OverviewPlusDetailViewportHost;
})();
/**
 * @hidden
 */
export let LegendTemplates = /*@__PURE__*/ (() => {
    class LegendTemplates extends Base {
        static af(a) {
            let b = a.am();
            switch (b) {
                case 3: return LegendTemplates.y;
                case 4: return LegendTemplates.aa;
                case 0: return LegendTemplates.z;
                case 8: return LegendTemplates.ae;
                case 9: return LegendTemplates.ac;
                case 5: return LegendTemplates.ah;
                case 1:
                case 2: return LegendTemplates.ad;
                case 6:
                case 7: return LegendTemplates.ab;
            }
            return LegendTemplates.ah;
        }
        static a(a) {
            return new RenderingContext(new CanvasViewRenderer(), a.context);
        }
        static v(a) {
            let b = typeCast(Series.$, a.series);
            if (b == null || b.a9 == 0) {
                a.thickness = Defaults.v;
            }
            else {
                a.thickness = b.fw;
            }
            if (b == null) {
                a.actualItemBrush = a.itemBrush;
            }
            else {
                a.actualItemBrush = b.o4;
            }
            if (b == null) {
                a.outline = a.actualItemBrush;
            }
            else {
                a.outline = b.o5;
            }
        }
        static b(a, b, c) {
            let d = (c - b) / 2;
            return a + d;
        }
        static c(a, b, c) {
            let d = (c - b) / 2;
            return a + d;
        }
        static u(a, b, c, d, e, f, g, h) {
            let i = DeviceUtils.g(Defaults.w);
            let j = DeviceUtils.g(Defaults.u);
            let k = LegendTemplates.c(f, j, a.availableHeight);
            let l = LegendTemplates.c(h, j, a.availableHeight);
            let m = LegendTemplates.b(e, i, a.availableWidth);
            let n = LegendTemplates.b(g, i, a.availableWidth);
            let o = ((() => {
                let $ret = new PathFigure();
                $ret.isClosed = true;
                $ret.isFilled = true;
                return $ret;
            })());
            o._startPoint = { $type: Point_$type, x: m, y: l };
            o._segments.add(new LineSegment(0, { $type: Point_$type, x: m, y: l }));
            o._segments.add(new LineSegment(0, { $type: Point_$type, x: n, y: l }));
            o._segments.add(new LineSegment(0, { $type: Point_$type, x: n, y: k }));
            o._segments.add(new LineSegment(0, { $type: Point_$type, x: m, y: k }));
            let p = new PathGeometry();
            p.c.add(o);
            let q = new Path();
            q.ak = p;
            q.ac = b;
            q._stroke = c;
            q._fill = d;
            let r = LegendTemplates.a(a);
            r.s(q);
        }
        static s(a) {
            let b = a.data;
            let c = b.series;
            LegendTemplates.v(b);
            let d = DeviceUtils.g(Defaults.w);
            let e = DeviceUtils.g(Defaults.u);
            let f = new Line();
            f.ak = LegendTemplates.b(0, d, a.availableWidth);
            f.am = a.availableHeight / 2;
            f.al = LegendTemplates.b(d, d, a.availableWidth);
            f.an = a.availableHeight / 2;
            f._stroke = b.actualItemBrush;
            if (c.a9 == 0) {
                f.ac = Defaults.v;
            }
            else {
                f.ac = c.fw;
            }
            let g = LegendTemplates.a(a);
            g.r(f);
        }
        static r(a, b, c) {
            let d = a.data;
            LegendTemplates.v(d);
            let e = DeviceUtils.g(Defaults.w);
            let f = DeviceUtils.g(Defaults.u);
            let g = e / 2;
            let h = f / 2;
            let i = LegendTemplates.b(g, e, a.availableWidth);
            let j = LegendTemplates.c(h, f, a.availableHeight);
            let k = new EllipseGeometry();
            k.e = { $type: Point_$type, x: i, y: j };
            k.c = g;
            k.d = h;
            let l = new Path();
            l.ak = k;
            l.ac = d.thickness;
            l._stroke = d.outline;
            l._fill = d.actualItemBrush;
            let m = LegendTemplates.a(a);
            m.s(l);
        }
        static t(a, b = 0) {
            let c = a.data;
            let d = DeviceUtils.g(Defaults.w - b);
            let e = DeviceUtils.g(Defaults.u - b);
            let f = new DataTemplateMeasureInfo();
            f.passInfo = a.passInfo;
            f.width = d;
            f.height = e;
            f.data = a.data;
            f.context = a.context;
            f.renderContext = a.renderContext;
            let g = c.actualItemBrush;
            let h = c.itemBrush;
            let i = c.series;
            let j = i.nh();
            c.actualItemBrush = i.pa();
            c.outline = i.pb();
            if (i.a9 == 1) {
                c.thickness = i.f4();
            }
            else {
                c.thickness = Defaults.ab;
            }
            if (j != null && j.measure != null && j.render != null) {
                let k = new DataTemplateRenderInfo();
                k.passInfo = a.passInfo;
                k.availableWidth = f.width;
                k.availableHeight = f.height;
                k.xPosition = (a.availableWidth / 2);
                k.yPosition = (a.availableHeight / 2);
                k.data = a.data;
                k.context = a.context;
                k.renderContext = a.renderContext;
                j.render(k);
            }
            c.itemBrush = h;
            c.actualItemBrush = g;
        }
        static j(a) {
            let b = a.data;
            LegendTemplates.v(b);
            LegendTemplates.r(a, Defaults.w, Defaults.u);
        }
        static n(a) {
            let b = a.data;
            let c = b.series;
            LegendTemplates.s(a);
            if (c.a9 == 1) {
                LegendTemplates.t(a, Defaults.t);
            }
        }
        static o(a) {
            LegendTemplates.t(a, 2);
        }
        static q(a) {
            let b = a.data;
            LegendTemplates.v(b);
            LegendTemplates.u(a, b.thickness, b.outline, b.actualItemBrush, 0, 0, Defaults.w, Defaults.u);
        }
        static p(a) {
            let b = a.data;
            let c = b.series;
            LegendTemplates.v(b);
            if (c.a9 == 0) {
                let d = Defaults.v;
                let e = b.actualItemBrush;
                let f = c.o5;
                let g = Defaults.w;
                let h = Defaults.u;
                LegendTemplates.u(a, d, f, e, 0, 0, g, h);
            }
            else {
                let i = Defaults.v;
                let j = b.actualItemBrush;
                let k = c.pd();
                let l = Defaults.w / 2;
                let m = Defaults.w;
                let n = Defaults.u;
                LegendTemplates.u(a, i, j, j, 0, 0, l, n);
                LegendTemplates.u(a, i, k, k, l, 0, m, n);
            }
        }
        static i(a) {
            let b = a.data;
            LegendTemplates.v(b);
            let c = 0;
            let d = Defaults.w;
            let e = (Defaults.u * 0.25);
            let f = (Defaults.u * 0.75);
            LegendTemplates.u(a, b.thickness, b.outline, b.actualItemBrush, c, e, d, f);
        }
        static l(a) {
            let b = a.data;
            LegendTemplates.v(b);
            let c = (Defaults.w * 0.25);
            let d = (Defaults.w * 0.75);
            let e = Defaults.u;
            let f = 0;
            LegendTemplates.u(a, b.thickness, b.outline, b.actualItemBrush, c, f, d, e);
        }
        static m(a) {
            let b = a.data;
            let c = BrushUtil.g(0, 0, 0, 0);
            let d = BrushUtil.g(0, 0, 0, 0);
            LegendTemplates.u(a, Defaults.v, c, d, 0, 0, Defaults.w, Defaults.u);
        }
        static k(a) {
        }
        static g(a) {
            let b = a.data;
            let c = b.series;
            let d = c.legendItemBadgeTemplate;
            if (d == null) {
                d = LegendTemplates.af(c);
            }
            let e = c.title;
            if (e == null) {
                e = "Series Title";
            }
            LegendItemHelper.d(a.context, a.xPosition, a.yPosition, a.availableWidth, a.availableHeight, a.data, e.toString(), d, a.passInfo, c.a1 != null && c.a1.isFinancial, c.f3, c.gu);
        }
        static resolveLegendItemTemplate(a) {
            switch (a) {
                case 0: return LegendTemplates.w;
                case 1: return LegendTemplates.x;
            }
            return LegendTemplates.w;
        }
        static e(a) {
            let b = a.data;
            let c = b.series;
            let d = c.legendItemBadgeTemplate;
            if (d == null) {
                d = LegendTemplates.af(c);
            }
            let e = b.itemLabel;
            if (e == null) {
                e = "Series Item";
            }
            LegendItemHelper.c(a.context, a.xPosition, a.yPosition, a.availableWidth, a.availableHeight, a.data, e.toString(), d, a.passInfo);
        }
        static f(a) {
        }
        static d(a) {
        }
        static h(a) {
        }
    }
    LegendTemplates.$t = /*@__PURE__*/ markType(LegendTemplates, 'LegendTemplates');
    LegendTemplates.z = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.j;
        return $ret;
    })());
    LegendTemplates.ae = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.o;
        return $ret;
    })());
    LegendTemplates.ad = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.n;
        return $ret;
    })());
    LegendTemplates.ah = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.q;
        return $ret;
    })());
    LegendTemplates.ab = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.p;
        return $ret;
    })());
    LegendTemplates.y = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.i;
        return $ret;
    })());
    LegendTemplates.aa = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.l;
        return $ret;
    })());
    LegendTemplates.ac = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.m;
        return $ret;
    })());
    LegendTemplates.w = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.g;
        return $ret;
    })());
    LegendTemplates.x = /*@__PURE__*/ ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.d;
        $ret.render = LegendTemplates.e;
        return $ret;
    })());
    return LegendTemplates;
})();
/**
 * @hidden
 */
export let SeriesViewerViewManager = /*@__PURE__*/ (() => {
    class SeriesViewerViewManager extends Base {
        constructor(a) {
            super();
            this.ae = null;
            this.af = null;
            this.aj = null;
            this.ai = null;
            this.ag = null;
            this.ak = null;
            this.t = null;
            this.w = null;
            this.v = null;
            this.u = null;
            this.x = null;
            this.f = null;
            this.j = null;
            this.ah = null;
            this.ab = 0;
            this.aa = 0;
            this.ac = 1;
            this.ad = 0;
            this.l = null;
            this.b9 = new Thickness(0, 0);
            this.aq = null;
            this.ap = stringEmpty();
            this.b8 = new Thickness(0, 0);
            this.bz = null;
            this.by = null;
            this.k = null;
            this.a = 0;
            this.b = 0;
            this.n = null;
            this.b1 = null;
            this.m = null;
            this.b0 = null;
            this.ca = new Thickness(0, 0);
            this.cb = new Thickness(0, 0);
            this.h = null;
            this.z = new Dictionary$2(String_$type, Tuple$2.$.specialize(DomWrapper_$type, RenderingContext.$), 0);
            this.al = -1;
            this.am = -1;
            this.s = null;
            this.j = a;
        }
        bi() {
        }
        bf(a) {
            if (a == null) {
                if (this.f != null) {
                    this.f.av();
                }
                this.ae = null;
                if (this.af != null) {
                    this.af.remove();
                }
                this.af = null;
                if (this.aj != null) {
                    this.aj.remove();
                }
                this.aj = null;
                if (this.ai != null) {
                    this.ai.remove();
                }
                this.ai = null;
                if (this.ag != null) {
                    this.ag.remove();
                }
                this.ag = null;
                if (this.ak != null) {
                    this.ak.remove();
                }
                this.ak = null;
                this.t = null;
                this.w = null;
                this.v = null;
                this.u = null;
                if (this.ah != null) {
                    this.ah.remove();
                }
                this.ah = null;
                this.f = null;
                this.j.p.cv.u(null);
                this.j.p.cw.u(null);
                this.j.p.al.j(null);
                this.j.p.am.j(null);
                this.j.p.ak.j(null);
                this.j.a.j(null);
                return;
            }
            this.ae = a;
            this.j.p.cv.u(this.ae);
            this.j.p.cw.u(this.ae);
            this.j.p.al.j(this.ae);
            this.j.p.am.j(this.ae);
            this.j.p.ak.j(this.ae);
            this.j.a.j(this.ae);
            this.j.p.ar.aa(this.ae);
            this.bh();
            this.ae.rootWrapper.setStyleProperty("position", "relative");
            this.af = this.ae.createElement("canvas");
            this.af.setStyleProperty("position", "absolute");
            this.af.setStyleProperty("top", "0px");
            this.af.setStyleProperty("left", "0px");
            this.aj = this.ae.createElement("canvas");
            this.aj.setStyleProperty("position", "absolute");
            this.aj.setStyleProperty("top", "0px");
            this.aj.setStyleProperty("left", "0px");
            this.ai = this.ae.createElement("canvas");
            this.ai.setStyleProperty("position", "absolute");
            this.ai.setStyleProperty("top", "0px");
            this.ai.setStyleProperty("left", "0px");
            this.ag = this.ae.createElement("canvas");
            this.ag.setStyleProperty("position", "absolute");
            this.ag.setStyleProperty("top", "0px");
            this.ag.setStyleProperty("left", "0px");
            this.ak = this.ae.createElement("canvas");
            this.ak.setStyleProperty("position", "absolute");
            this.ak.setStyleProperty("top", "0px");
            this.ak.setStyleProperty("left", "0px");
            this.ae.append(this.af);
            this.ae.append(this.ai);
            this.ae.append(this.aj);
            this.t = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.af));
            this.w = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.aj));
            this.v = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ai));
            if (this.j.p.au != 1) {
                this.u = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ag));
                this.s = this.u;
            }
            else {
                this.u = new RenderingContext(null, null);
            }
            this.x = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ak));
            this.j.du(this.t);
            this.j.c1(this.ae.rootWrapper.width(), this.ae.rootWrapper.height());
            {
                if ((TypeRegistrar.isRegistered('CanvasGestureDOMEventProxy'))) {
                    let overlayCanvas_ = this.aj;
                    let container_ = this.ae;
                    this.f = (TypeRegistrar.create('CanvasGestureDOMEventProxy', overlayCanvas_, container_, false));
                }
                else {
                    this.f = null;
                }
                if (this.f != null) {
                    this.f.ap = runOn(this.j, this.j.at);
                }
            }
            this.ah = this.ae.createElement("div");
            this.ah.hide();
            this.ah.setStyleProperty("position", "absolute");
            this.ah.setStyleProperty("z-index", "10000");
            this.ah.addClass(this.j.p.kq);
            this.ae.append(this.ah);
        }
        static bx(a, b) {
            b();
            return;
        }
        bh() {
            this.j.d4();
            this.j.ef();
            this.bo();
        }
        a9() {
            let a = this.j.p.gx;
            let b = this.j.p.gc;
            if (!isNaN_(a) && a != 0) {
                return;
            }
            if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
                this.j.p.gc = window.devicePixelRatio;
            }
        }
        g() {
            if ((TypeRegistrar.isRegistered('XamOverviewPlusDetailPane'))) {
                let overlayCanvas_ = this.aj;
                let container_ = this.ae;
                return (TypeRegistrar.create('XamOverviewPlusDetailPane'));
            }
            return null;
        }
        bl() {
            this.aj.setStyleProperty("cursor", "default");
        }
        bm() {
            this.aj.setStyleProperty("cursor", "pointer");
        }
        b2() {
            return ((() => {
                let $ret = new Brush();
                $ret.fill = "#000000";
                return $ret;
            })());
        }
        ay(a, b, c) {
            this.ab = a;
            this.aa = b;
            this.ac = c;
            let d = a;
            let e = b;
            if (c != 1) {
                d = Math.round(a * c);
                e = Math.round(b * c);
            }
            if (this.af != null) {
                this.af.setAttribute("width", d.toString());
                this.af.setAttribute("height", e.toString());
                this.af.setStyleProperty("width", a.toString() + "px");
                this.af.setStyleProperty("height", b.toString() + "px");
            }
            if (this.aj != null) {
                this.aj.setAttribute("width", d.toString());
                this.aj.setAttribute("height", e.toString());
                this.aj.setStyleProperty("width", a.toString() + "px");
                this.aj.setStyleProperty("height", b.toString() + "px");
                this.aj.setAttribute("tabindex", "0");
                this.aj.setStyleProperty("outline", "0");
            }
            if (this.ai != null) {
                this.ai.setAttribute("width", d.toString());
                this.ai.setAttribute("height", e.toString());
                this.ai.setStyleProperty("width", a.toString() + "px");
                this.ai.setStyleProperty("height", b.toString() + "px");
            }
            if (this.ag != null) {
                this.ag.setAttribute("width", d.toString());
                this.ag.setAttribute("height", e.toString());
                this.ag.setStyleProperty("width", a.toString() + "px");
                this.ag.setStyleProperty("height", b.toString() + "px");
            }
            if (this.ak != null) {
                this.ak.setAttribute("width", d.toString());
                this.ak.setAttribute("height", e.toString());
                this.ak.setStyleProperty("width", a.toString() + "px");
                this.ak.setStyleProperty("height", b.toString() + "px");
            }
            this.j.p.al.n();
            this.j.p.am.n();
            this.j.p.ak.n();
        }
        b7() {
            if (this.f == null) {
                return { $type: Point_$type, x: 0, y: 0 };
            }
            let a = this.f.bk(this.ae.rootWrapper);
            return { $type: Point_$type, x: a.left, y: a.top };
        }
        y() {
            return false;
        }
        bb(a) {
        }
        a7(a, b, c, d, e) {
            let f = this.e();
            a = f.a;
            b = f.f;
            c = f.k;
            d = f.h;
            e = f.i;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        e() {
            let a = new DefaultPaletteInfo();
            a.a = new BrushCollection();
            a.f = new BrushCollection();
            a.b = new BrushCollection();
            a.c = new BrushCollection();
            let b = new List$1(String_$type, 0);
            b.add("background-image");
            this.ae.startCSSQuery();
            let c = this.ae.getCssDefaultValuesForClassCollection("ui-chart-fill-palette-", b.toArray());
            let d = c.length;
            let e = this.ae.getCssDefaultValuesForClassCollection("ui-chart-outline-palette-", b.toArray());
            let f = e.length;
            let g = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-fill-palette-", b.toArray());
            let h = g.length;
            let i = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-outline-palette-", b.toArray());
            let j = i.length;
            for (let k = 0; k < d; k++) {
                a.a.add(CssGradientUtil.brushFromGradientString(c[k][0]));
            }
            for (let l = 0; l < f; l++) {
                a.f.add(CssGradientUtil.brushFromGradientString(e[l][0]));
            }
            for (let m = 0; m < h; m++) {
                a.b.add(CssGradientUtil.brushFromGradientString(g[m][0]));
            }
            for (let n = 0; n < j; n++) {
                a.c.add(CssGradientUtil.brushFromGradientString(i[n][0]));
            }
            b.clear();
            let o = 0;
            let p = 0;
            let q = Math.min(d, f);
            let r = null;
            if (d == 0) {
                b.add("background-color");
            }
            if (f == 0) {
                b.add("border-top-color");
                p = d == 0 ? 1 : 0;
            }
            if (b.count > 0) {
                r = this.ae.getCssDefaultValuesForClassCollection("ui-chart-palette-", b.toArray());
                q = r.length;
            }
            if (d == 0) {
                if (q > 0) {
                    for (let s = 0; s < q; s++) {
                        let t = new Brush();
                        t._fill = r[s][o];
                        a.a.add(t);
                    }
                }
                else {
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8BDC5C";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8961A9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#6DB1FF";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#82E9D9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#EA3C63";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#735656";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#F8CE4F";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#A8A8B7";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#E051A9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FF903B";
                        return $ret;
                    })()));
                }
            }
            if (f == 0) {
                if (q > 0) {
                    for (let u = 0; u < q; u++) {
                        let v = new Brush();
                        v._fill = r[u][p];
                        a.f.add(v);
                    }
                }
                else {
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8BDC5C";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8961A9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#6DB1FF";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#82E9D9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#EA3C63";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#735656";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#F8CE4F";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#A8A8B7";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#E051A9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FF903B";
                        return $ret;
                    })()));
                }
            }
            b.clear();
            let w = Math.min(h, j);
            if (h == 0) {
                b.add("background-color");
            }
            if (j == 0) {
                b.add("border-top-color");
                p = h == 0 ? 1 : 0;
            }
            if (b.count > 0) {
                r = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-palette-", b.toArray());
                w = r.length;
            }
            if (h == 0) {
                if (w > 0) {
                    for (let x = 0; x < w; x++) {
                        let y = ((() => {
                            let $ret = new Brush();
                            $ret.fill = r[x][o];
                            return $ret;
                        })());
                        a.b.add(y);
                    }
                }
                else {
                    a.b.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FFFFFF";
                        return $ret;
                    })()));
                }
            }
            if (j == 0) {
                if (w > 0) {
                    for (let z = 0; z < w; z++) {
                        let aa = ((() => {
                            let $ret = new Brush();
                            $ret.fill = r[z][p];
                            return $ret;
                        })());
                        a.c.add(aa);
                    }
                }
                else {
                    for (let ab of fromEnum(a.a)) {
                        a.c.add(ab);
                    }
                }
            }
            let ac = this.ae.getCssDefaultPropertyValue("ui-chart-axis", "border-top-color");
            if (ac != null) {
                a.i = new Brush();
                a.i._fill = ac;
            }
            else {
                a.i = AxisDefaults.g;
            }
            a.k = new Brush();
            a.k._fill = this.ae.getCssDefaultPropertyValue("", "color");
            a.j = Defaults.ae;
            let ad = this.ae.getCssDefaultPropertyValue("ui-chart-crosshair", "border-top-color");
            if (ad != null) {
                a.j = new Brush();
                a.j._fill = ad;
            }
            this.ae.endCSSQuery();
            a.h = FontUtil.getFont(this.ae);
            let ae = ((() => {
                let $ret = new Brush();
                $ret.fill = "#ee5879";
                return $ret;
            })());
            a.d = new BrushCollection();
            a.d.add(ae);
            a.e = new BrushCollection();
            a.e.add(ae);
            return a;
        }
        a6(a, b, c, d, e, f) {
            this.ae.startCSSQuery();
            let g = this.ae.getCssDefaultPropertyValue("ui-chart-area-fill-opacity", "opacity");
            a = g != null ? parseFloat(g) : 1;
            b = new Array(4);
            let h = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-top");
            let i = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-right");
            let j = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-bottom");
            let k = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-left");
            b[0] = h != null ? parseFloat(h) : NaN;
            b[1] = i != null ? parseFloat(i) : NaN;
            b[2] = j != null ? parseFloat(j) : NaN;
            b[3] = k != null ? parseFloat(k) : NaN;
            c = d = null;
            let l = this.ae.getCssDefaultPropertyValue("ui-chart-axis-stroke", "border-top-color");
            if (l != null) {
                let m = new Brush();
                m._fill = l;
                c = m;
            }
            let n = this.ae.getCssDefaultPropertyValue("ui-chart-axis-major-line", "border-top-color");
            if (n != null) {
                let o = new Brush();
                o._fill = n;
                d = o;
            }
            let p = this.ae.getCssDefaultPropertyValue("ui-chart-aligned-gridlines", "visibility");
            f = p != null && p == "visible";
            let q = this.ae.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "height");
            if (q != null) {
                e = parseFloat(q);
                if (Math.abs(e) > 4000) {
                    e = 0;
                }
            }
            else {
                q = this.ae.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "width");
                e = q != null ? parseFloat(q) : 0;
            }
            this.ae.endCSSQuery();
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        ax() {
            this.ah.removeChildren();
        }
        bt(x_) {
            let box_ = this.ah;
            let offset_ = this.f.bk(this.ah);
            let a = this.b7();
            x_ = a.x + this.j.p.to.left + x_;
            box_.setOffset(x_, this.j.p.to.top + this.ad + a.y);
        }
        bu(y_) {
            this.ad = y_;
            let box_ = this.ah;
            let offset_ = this.ah.getOffset();
            let a = this.b7();
            y_ = this.j.p.to.top + this.ad + a.y;
            box_.setOffset(offset_.left, y_);
        }
        at(a) {
            let b = a;
            b.show();
            this.ah.append(b);
        }
        a8() {
            this.ah.hide();
        }
        bn() {
            this.ah.show();
        }
        au(a) {
            this.ae.appendToBody(a);
        }
        bj(a) {
            a.remove();
        }
        bc() {
            if (this.ae == null) {
                return;
            }
            this.a9();
            this.j.c1(this.ae.rootWrapper.width(), this.ae.rootWrapper.height());
        }
        p() {
            return this.l;
        }
        cd() {
            return this.b9;
        }
        as() {
            return this.aq;
        }
        ar() {
            return this.ap;
        }
        cc() {
            return this.b8;
        }
        b4() {
            return this.bz;
        }
        b3() {
            return this.by;
        }
        o() {
            return this.k;
        }
        c() {
            return this.a;
        }
        d() {
            return this.b;
        }
        r() {
            return this.n;
        }
        b6() {
            return this.b1;
        }
        q() {
            return this.m;
        }
        b5() {
            return this.b0;
        }
        ce() {
            return this.ca;
        }
        cf() {
            return this.cb;
        }
        bo() {
            this.ae.startCSSQuery();
            this.bq();
            this.bp();
            this.bs();
            this.br();
            this.bw();
            this.ae.endCSSQuery();
        }
        bw() {
            let a = "ui-chart-pointer-tooltip";
            let b = this.ae.getCssDefaultPropertyValue(a, "background-color");
            let c = this.ae.getCssDefaultPropertyValue(a, "border-top-color");
            let d = this.ae.getCssDefaultPropertyValue(a, "border-top-left-radius");
            let e = this.ae.getCssDefaultPropertyValue(a, "border-top-width");
            let f = new PointerTooltipStyle();
            f.a = d != null ? parseFloat(d) : 0;
            f.c = b != null ? Brush.create(b) : ((() => {
                let $ret = new Brush();
                $ret.fill = "white";
                return $ret;
            })());
            f.d = c != null ? Brush.create(c) : ((() => {
                let $ret = new Brush();
                $ret.fill = "gray";
                return $ret;
            })());
            f.b = e != null ? parseFloat(e) : 0;
            this.h = f;
        }
        bq() {
            let a = "ui-chart-title";
            this.l = FontUtil.getFontForClass(this.ae, a);
            this.bz = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            this.aq = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (this.aq == null) {
                this.aq = "center";
            }
            let b = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let f = b != null ? parseFloat(b) : 0;
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            this.b9 = new Thickness(1, h, f, i, g);
        }
        bp() {
            let a = "ui-chart-subtitle";
            this.k = FontUtil.getFontForClass(this.ae, a);
            this.by = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            this.ap = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (this.ap == null) {
                this.ap = "center";
            }
            let b = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let f = b != null ? parseFloat(b) : 0;
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            this.b8 = new Thickness(1, h, f, i, g);
        }
        br() {
            let a = "ui-chart-horizontal-axis-title";
            this.m = FontUtil.getFontForClass(this.ae, a);
            this.b0 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            let b = this.ae.getCssDefaultPropertyValue(a, "vertical-align");
            if (b == null) {
                this.a = 0;
            }
            else if (b.toLowerCase() == "bottom") {
                this.a = 4;
            }
            else {
                this.a = 3;
            }
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let f = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let g = c != null ? parseFloat(c) : 2;
            let h = d != null ? parseFloat(d) : 2;
            let i = e != null ? parseFloat(e) : 2;
            let j = f != null ? parseFloat(f) : 2;
            this.ca = new Thickness(1, i, g, j, h);
        }
        bs() {
            let a = "ui-chart-vertical-axis-title";
            this.n = FontUtil.getFontForClass(this.ae, a);
            this.b1 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            let b = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (b == null) {
                this.b = 0;
            }
            else if (b.toLowerCase() == "right") {
                this.b = 2;
            }
            else {
                this.b = 1;
            }
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let f = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            let j = f != null ? parseFloat(f) : 0;
            this.cb = new Thickness(1, i, g, j, h);
        }
        a5(a, b) {
            let c = this.j.p.gc;
            if (a != this.ab || b != this.aa || c != this.ac) {
                this.ay(a, b, this.j.p.gc);
                this.j.p.al.i();
                this.j.a.i();
            }
        }
        i() {
            return this.h;
        }
        ba(a) {
            if (this.f == null) {
                return;
            }
            this.f.ab = a;
            this.f.ap = runOn(this.j, this.j.at);
        }
        an(a, b, c) {
            let d;
            if (!((() => { let e = this.z.tryGetValue(b.iD.toString(), d); d = e.p1; return e.ret; })())) {
                let e = this.ae.createElement("canvas");
                e.setAttribute("width", c.toString());
                e.setAttribute("height", c.toString());
                e.setStyleProperty("width", c.toString() + "px");
                e.setStyleProperty("height", c.toString() + "px");
                let f = this.ae.get2DCanvasContext(e);
                let g = new RenderingContext(new CanvasViewRenderer(), f);
                let h = new Tuple$2(DomWrapper_$type, RenderingContext.$, e, g);
                d = h;
                this.z.addItem(b.iD.toString(), d);
            }
            let i = new Rect(0, 0, 0, c, c);
            let j = new RenderSurface();
            j.a = d.d;
            for (let k = 0; k < this.j.p.series.count; k++) {
                let l = this.j.p.series._inner[k];
                l.mk(i, a, j, "tile", 1);
            }
            this.j.p.ak.i();
            return d.c;
        }
        a2(a) {
            this.z.removeItem(a.iD.toString());
        }
        a1() {
            this.z.clear();
        }
        bk(a) {
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                let d = c.content;
                this.j.z.m(d.getNativeElement(), 1, c.xPosition + this.j.p.to.left, c.yPosition + this.j.p.to.top, c.width, c.height);
            }
        }
        az() {
            if (this.al != -1) {
                this.av();
            }
            if (this.ae != null) {
                this.al = this.ae.setTimeout(() => this.j.p.a9.f$j(this.j.p), 5000);
            }
            else {
                this.al = window.setTimeout(() => this.j.p.a9.f$j(this.j.p), 5000);
            }
        }
        av() {
            if (this.al != -1) {
                if (this.ae != null) {
                    this.ae.clearTimeout(this.al);
                }
                else {
                    window.clearTimeout(this.al);
                }
                this.al = -1;
            }
        }
        a0(a) {
            if (this.am != -1) {
                this.aw();
            }
            if (this.ae != null) {
                this.am = this.ae.setTimeout(() => this.j.p.lu(), a);
            }
            else {
                this.am = window.setTimeout(() => this.j.p.lu(), a);
            }
        }
        aw() {
            if (this.am != -1) {
                if (this.ae != null) {
                    this.ae.clearTimeout(this.am);
                }
                else {
                    window.clearTimeout(this.am);
                }
                this.am = -1;
            }
        }
        bd() {
            if (this.j.p.au != 1) {
                if (this.s == null) {
                    this.u = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ag));
                    this.s = this.u;
                }
                else {
                    this.u = this.s;
                }
            }
            else {
                this.u = new RenderingContext(null, null);
            }
            this.j.dt(this.u);
        }
        bv(a) {
            if (this.ae != null) {
                let b = "igTouch";
                if (a) {
                    this.ae.rootWrapper.addClass(b);
                }
                else {
                    this.ae.rootWrapper.removeClass(b);
                }
            }
        }
        a3() {
        }
        a4() {
        }
        bg() {
            if (this.f != null) {
                this.f.bh(this.aj, "");
            }
        }
        be() {
            this.a9();
            if (this.f != null) {
                this.f.at(this.aj, "");
            }
        }
        ao(a, b) {
            let c = this.ae.createElement("canvas");
            c.setStyleProperty("width", a + "px");
            c.setStyleProperty("height", b + "px");
            c.setProperty("width", a);
            c.setProperty("height", b);
            let d = this.ae.get2DCanvasContext(c);
            if (this.t != null) {
                d.drawImage(this.af.getNativeElement(), 0, 0, a, b);
            }
            if (this.v != null) {
                d.drawImage(this.ai.getNativeElement(), 0, 0, a, b);
            }
            if (this.w != null) {
                d.drawImage(this.aj.getNativeElement(), 0, 0, a, b);
            }
            let e = this.ae.createElement("img");
            let sCanv_ = c.getNativeElement();
            e.setProperty("src", sCanv_.toDataURL('image/png'));
            return e.getNativeElement();
        }
    }
    SeriesViewerViewManager.$t = /*@__PURE__*/ markType(SeriesViewerViewManager, 'SeriesViewerViewManager');
    return SeriesViewerViewManager;
})();
/**
 * @hidden
 */
export let AutoRangeCalculator = /*@__PURE__*/ (() => {
    class AutoRangeCalculator extends Base {
        static a(a, b, c, d, e, f, g) {
            f = !isNaN_(b) && !isInfinity(b) ? b : Number.POSITIVE_INFINITY;
            g = !isNaN_(c) && !isInfinity(c) ? c : Number.NEGATIVE_INFINITY;
            let h = f;
            let i = g;
            if (isInfinity(h) || isInfinity(i)) {
                if (a != null) {
                    let j = a.kq();
                    if (j != null) {
                        h = Math.min(h, j.c);
                        i = Math.max(i, j.b);
                    }
                }
            }
            if (!isInfinity(h) && !isInfinity(i)) {
                if (h == i && h != 0) {
                    h *= h > 0 ? 0.9 : 1.1;
                    i *= i > 0 ? 1.1 : 0.9;
                }
                if (h == i && h == 0) {
                    i = 1;
                }
                if (b > c) {
                    let k = c;
                    c = b;
                    b = k;
                }
                let l = isNaN_(b) || isInfinity(b) ? h : b;
                let m = isNaN_(c) || isInfinity(c) ? i : c;
                if (d) {
                    if (l <= 0) {
                        if (m > 1) {
                            l = 1;
                        }
                        else {
                            l = Math.pow(e, Math.floor(logBase(m, e)));
                        }
                    }
                    if (isNaN_(b) || isInfinity(b)) {
                        let n = logBase(l, e);
                        h = Math.pow(e, Math.floor(n));
                    }
                    else {
                        h = l;
                    }
                    if (isNaN_(c) || isInfinity(c)) {
                        i = Math.pow(e, Math.ceil(logBase(m, e)));
                    }
                    else {
                        i = m;
                    }
                }
                else {
                    let o = Math.pow(10, Math.floor(log10(m - l)) - 1);
                    let p = a.eh();
                    if (a != null && p > 0 && (!a.le && !a.ld)) {
                        let q = new LinearNumericSnapper(0, h, i, p, a.ex());
                        o = q.g;
                    }
                    else if (a.la && p > 0 && (!a.le || !a.ld)) {
                        let r = h;
                        let s = i;
                        if (a.le) {
                            r = b;
                        }
                        if (a.ld) {
                            s = c;
                        }
                        let t = new LinearNumericSnapper(0, r, s, p, a.ex());
                        o = t.g;
                    }
                    if ((isNaN_(b) || isInfinity(b)) && !isNaN_(h) && !isNaN_(o) && o != 0) {
                        {
                            h = o * Math.floor(h / o);
                        }
                    }
                    else {
                        h = l;
                    }
                    if ((isNaN_(c) || isInfinity(c)) && !isNaN_(i) && !isNaN_(o) && o != 0) {
                        let u = Math.ceil(i / o);
                        {
                            i = o * u;
                        }
                    }
                    else {
                        i = m;
                    }
                    if (a.la) {
                        if (a.la && p > 0 && (!a.le || !a.ld)) {
                            let v = new LinearNumericSnapper(0, h, i, p, a.ex());
                            let w = v.g;
                            if (w != o) {
                                o = w;
                                if ((isNaN_(b) || isInfinity(b)) && !isNaN_(h) && !isNaN_(o) && o != 0) {
                                    {
                                        h = o * Math.floor(h / o);
                                    }
                                }
                                else {
                                    h = l;
                                }
                                if ((isNaN_(c) || isInfinity(c)) && !isNaN_(i) && !isNaN_(o) && o != 0) {
                                    let x = Math.ceil(i / o);
                                    {
                                        i = o * x;
                                    }
                                }
                                else {
                                    i = m;
                                }
                            }
                        }
                    }
                }
            }
            f = h;
            g = i;
            return {
                p5: f,
                p6: g
            };
        }
    }
    AutoRangeCalculator.$t = /*@__PURE__*/ markType(AutoRangeCalculator, 'AutoRangeCalculator');
    return AutoRangeCalculator;
})();
/**
 * @hidden
 */
export let IAxisAnnotationManager_$type = /*@__PURE__*/ new Type(null, 'IAxisAnnotationManager');
/**
 * @hidden
 */
export let AxisLabelSettings = /*@__PURE__*/ (() => {
    class AxisLabelSettings extends Base {
        constructor() {
            super();
            this.ab = null;
            this.ay = null;
            this.b = 1;
            this.a3 = 0;
            this.i = true;
            this.c = 0;
            this.a = null;
            this.n = 0;
            this.p = NaN;
            this.q = 2;
            this.r = 2;
            this.s = 2;
            this.o = 2;
            this.av = 0;
            this.a0 = 1;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.f = null;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.ar(a, b.propertyName, b.oldValue, b.newValue));
        }
        get textStyle() {
            return this.ab;
        }
        set textStyle(a) {
            let b = this.ab;
            this.ab = a;
            if (this.ab != b) {
                this.f = null;
                this.as("TextStyle", b, a);
            }
        }
        get textColor() {
            return this.ay;
        }
        set textColor(a) {
            let b = this.ay;
            this.ay = a;
            this.as("TextColor", b, a);
        }
        get location() {
            return this.b;
        }
        set location(a) {
            let b = this.b;
            this.b = a;
            this.as("Location", enumGetBox(AxisLabelsLocation_$type, b), enumGetBox(AxisLabelsLocation_$type, a));
        }
        get visibility() {
            return this.a3;
        }
        set visibility(a) {
            let b = this.a3;
            this.a3 = a;
            this.as("Visibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, a));
        }
        get showFirstLabel() {
            return this.i;
        }
        set showFirstLabel(a) {
            let b = this.i;
            this.i = a;
            this.as("ShowFirstLabel", b, a);
        }
        registerAxis(a) {
            this.a = a;
        }
        unregisterAxis(a) {
            this.a = null;
        }
        get angle() {
            return this.n;
        }
        set angle(a) {
            let b = this.n;
            this.n = a;
            this.as("Angle", b, a);
        }
        get extent() {
            return this.p;
        }
        set extent(a) {
            let b = this.p;
            this.p = a;
            this.as("Extent", b, a);
        }
        set margin(a) {
            this.leftMargin = a;
            this.bottomMargin = a;
            this.rightMargin = a;
            this.topMargin = a;
        }
        get leftMargin() {
            return this.q;
        }
        set leftMargin(a) {
            let b = this.q;
            this.q = a;
            this.as("LeftMargin", b, a);
        }
        get rightMargin() {
            return this.r;
        }
        set rightMargin(a) {
            let b = this.r;
            this.r = a;
            this.as("RightMargin", b, a);
        }
        get topMargin() {
            return this.s;
        }
        set topMargin(a) {
            let b = this.s;
            this.s = a;
            this.as("TopMargin", b, a);
        }
        get bottomMargin() {
            return this.o;
        }
        set bottomMargin(a) {
            let b = this.o;
            this.o = a;
            this.as("BottomMargin", b, a);
        }
        get horizontalAlignment() {
            return this.av;
        }
        set horizontalAlignment(a) {
            let b = this.av;
            this.av = a;
            this.as("HorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, a));
        }
        get verticalAlignment() {
            return this.a0;
        }
        set verticalAlignment(a) {
            let b = this.a0;
            this.a0 = a;
            this.as("VerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, a));
        }
        as(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        ar(a, b, c, d) {
            switch (b) {
                case "Location":
                    this.c = this.location;
                    break;
            }
            if (this.a == null || this.a.bf == null) {
                return;
            }
            switch (b) {
                case "Angle":
                    this.a.cp = true;
                    this.a.h6();
                    break;
                case "TextStyle":
                    this.f = null;
                    this.a.cp = true;
                    if (this.a.bh != null) {
                        this.a.bh.l6();
                    }
                    this.a.h6();
                    break;
                case "Location":
                case "Extent":
                case "Visibility":
                case "HorizontalAlignment":
                case "VerticalAlignment":
                case "TopMargin":
                case "RightMargin":
                case "BottomMargin":
                case "LeftMargin":
                case "ShowFirstLabel":
                    this.a.cp = true;
                    if (this.a.bh != null) {
                        this.a.bh.l6();
                    }
                    this.a.h6();
                    break;
                case "TextColor":
                    this.a.h6();
                    break;
            }
        }
        k() {
            return this.n != 0;
        }
        l() {
            return !isNaN_(this.p);
        }
        get j() {
            return this.textStyle != null || this.f != null;
        }
        get g() {
            return this.f;
        }
        set g(a) {
            this.f = a;
        }
        h(a) {
            if (this.f == null) {
                this.f = FontUtil.toFontInfo(a, this.textStyle);
            }
            return this.f;
        }
    }
    AxisLabelSettings.$t = /*@__PURE__*/ markType(AxisLabelSettings, 'AxisLabelSettings', Base.$, [INotifyPropertyChanged_$type]);
    AxisLabelSettings.extentPropertyDefault = NaN;
    return AxisLabelSettings;
})();
/**
 * @hidden
 */
export let TitleSettings = /*@__PURE__*/ (() => {
    class TitleSettings extends AxisLabelSettings {
        constructor() {
            super();
            this.a5 = 0;
            this.horizontalAlignment = 1;
            this.leftMargin = NaN;
            this.rightMargin = NaN;
            this.topMargin = NaN;
            this.bottomMargin = NaN;
        }
        get position() {
            return this.a5;
        }
        set position(a) {
            let b = this.a5;
            this.a5 = a;
            this.as("AxisTitlePosition", enumGetBox(AxisTitlePosition_$type, b), enumGetBox(AxisTitlePosition_$type, a));
        }
        ar(a, b, c, d) {
            super.ar(a, b, c, d);
            if (this.a == null || this.a.bh == null) {
                return;
            }
            switch (b) {
                case "AxisTitlePosition":
                    this.a.cp = true;
                    this.a.h6();
                    break;
            }
        }
    }
    TitleSettings.$t = /*@__PURE__*/ markType(TitleSettings, 'TitleSettings', AxisLabelSettings.$);
    return TitleSettings;
})();
/**
 * @hidden
 */
export let Axis = /*@__PURE__*/ (() => {
    class Axis extends Control {
        constructor() {
            super();
            this.a4 = null;
            this.bs = null;
            this.a8 = null;
            this.a6 = null;
            this.iq = null;
            this.bm = null;
            this.bg = null;
            this.br = null;
            this.bx = false;
            this.dk = NaN;
            this.de = 50;
            this.dr = 0;
            this.dn = 150;
            this.ar = 0;
            this.dj = NaN;
            this.dv = 0;
            this.dq = 0;
            this.dm = 180;
            this.bj = null;
            this.bi = null;
            this.f2 = "Verdana";
            this.dl = NaN;
            this.dx = 0;
            this.ds = 8;
            this.dp = 16;
            this.fn = -1;
            this.fm = 1;
            this.fl = 3;
            this.fo = 0;
            this.ki = 0;
            this.du = 0;
            this.dt = 2;
            this.ir = null;
            this.dy = 0;
            this.ch = false;
            this.bv = false;
            this.df = 0;
            this.cu = false;
            this.cw = false;
            this.by = false;
            this.rangeChanged = null;
            this.ak = new AxisAnnotationCollection();
            this.al = new AxisAnnotationCollection();
            this.j5 = Rect.empty;
            this.kb = null;
            this.db = null;
            this.dc = null;
            this.av = null;
            this.bw = false;
            this.a5 = null;
            this.fk = null;
            this.ah = null;
            this._coercionMethods = null;
            this.bu = false;
            this.cx = false;
            this.c6 = false;
            this.renderRequested = null;
            this.bb = null;
            this.cq = false;
            this.dh = NaN;
            this.di = -1;
            this.cr = false;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.dd = null;
            this.c9 = new Dictionary$2(String_$type, String_$type, 0);
            this.c8 = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.kh = new Size();
            this.ao = new AxisComponentsForView();
            this.d2 = 0;
            this.dg = 0;
            this.bq = null;
            this.bp = null;
            this.bo = null;
            this.aw = new AxisLabelSettings();
            this.fj = null;
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            this.by = true;
            this.d2 = NaN;
            this.a4 = this.a3();
            this.hr(this.a4);
            this.a4.aj();
            this.bq = ((() => {
                let $ret = new Pool$1(TextBlock.$);
                $ret.create = runOn(this.a4, this.a4.a0);
                $ret.activate = runOn(this.a4, this.a4.at);
                $ret.disactivate = runOn(this.a4, this.a4.av);
                $ret.destroy = runOn(this.a4, this.a4.au);
                return $ret;
            })());
            this.bp = ((() => {
                let $ret = new Pool$1(TextBlock.$);
                $ret.create = runOn(this.a4, this.a4.a0);
                $ret.activate = runOn(this.a4, this.a4.at);
                $ret.disactivate = runOn(this.a4, this.a4.av);
                $ret.destroy = runOn(this.a4, this.a4.au);
                return $ret;
            })());
            this.bo = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this.a4, this.a4.bf);
                $ret.activate = runOn(this.a4, this.a4.s);
                $ret.disactivate = runOn(this.a4, this.a4.u);
                $ret.destroy = runOn(this.a4, this.a4.t);
                return $ret;
            })());
            this.kb = Rect.empty;
            this.db = new List$1(Base.$, 0);
            this.dc = new List$1(LabelPosition.$, 0);
            this.av = this.au();
            this.av.ag = this.ay;
            this.av.ad = this;
            this.dd = new List$1(Series.$, 0);
            let a = this.ak;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.hb));
            let b = this.ak;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.ha));
            let c = this.al;
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.hd));
            let d = this.al;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.hc));
            this.ab = Axis.$;
            if (this.ay != null) {
                this.aw = this.ay;
            }
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (e, f) => this.hv(e, f.propertyName, f.oldValue, f.newValue));
            this.br = (e, f) => {
                if (this.bh == null || !this.bh.d8) {
                    this.ip(f.oldRect, f.newRect);
                }
            };
            this.a4.y();
        }
        a3() {
            return new AxisView(this);
        }
        hr(a) {
        }
        he() {
            if (this.b9) {
                this.a7.onAddAnnotations(this);
            }
        }
        get bt() {
            if (this.bs == null) {
                this.bs = new SRProvider(this.fk);
            }
            if (this.bs.l == null) {
                this.bs.l = this.fk;
            }
            return this.bs;
        }
        get a9() {
            if (this.a8 == null) {
                this.a8 = DVContainer.instance.createInstance(IAxisVisualDataManager_$type, () => this.bt.q);
            }
            return this.a8;
        }
        eh() {
            return this.j6().width;
        }
        f1() {
            return null;
        }
        f0() {
            return null;
        }
        get_ca() {
            return false;
        }
        get ca() {
            return this.get_ca();
        }
        get_ci() {
            return false;
        }
        get ci() {
            return this.get_ci();
        }
        get_b8() {
            return false;
        }
        get b8() {
            return this.get_b8();
        }
        get_cl() {
            return false;
        }
        get cl() {
            return this.get_cl();
        }
        get_co() {
            return false;
        }
        get co() {
            return this.get_co();
        }
        get_cm() {
            return false;
        }
        get cm() {
            return this.get_cm();
        }
        get_cd() {
            return false;
        }
        get cd() {
            return this.get_cd();
        }
        get_cj() {
            return false;
        }
        get cj() {
            return this.get_cj();
        }
        get_ck() {
            return false;
        }
        get ck() {
            return this.get_ck();
        }
        get_cb() {
            return false;
        }
        get cb() {
            return this.get_cb();
        }
        get_cc() {
            return true;
        }
        get cc() {
            return this.get_cc();
        }
        aj() {
            return this.ai;
        }
        get a7() {
            if (this.a6 == null) {
                this.a6 = DVContainer.instance.createInstance(IAxisAnnotationManager_$type, () => this.bt.n);
                this.a6.owner = this;
            }
            return this.a6;
        }
        get b9() {
            return DVContainer.instance.checkLoaded("AnnotationFactoryManager");
        }
        hc(a, b) {
            if (!this.b9) {
                return;
            }
            this.a7.onAutoAnnotionsChanged(this, this.al, b);
        }
        hd(a, b) {
            if (!this.b9) {
                return;
            }
            this.a7.onAutoAnnotionsReset(this, this.al, b);
        }
        ha(a, b) {
            if (!this.b9) {
                return;
            }
            this.a7.onAnnotionsChanged(this, this.ak, b);
        }
        hb(a, b) {
            if (!this.b9) {
                return;
            }
            this.a7.onAnnotionsReset(this, this.ak, b);
        }
        provideRenderer(a) {
            this.fk = a;
            this.hf();
            this.av.ag = this.ay;
        }
        ho(a, b) {
            if (!a.equals1(b)) {
                this.io(a, b);
            }
        }
        ac() {
            super.ac();
            this.a4.am();
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            if (this.bn != a) {
                let b = this.bn;
                this.bm = a;
                this.h1("FastItemsSourceProvider", b, this.bm);
            }
        }
        get bh() {
            return this.bg;
        }
        set bh(a) {
            if (this.bh != a) {
                let b = this.bh;
                this.bg = a;
                this.h1("SeriesViewer", b, this.bg);
            }
        }
        get bf() {
            return typeCast(XamDataChart.$, this.bh);
        }
        set bf(a) {
            this.bh = a;
        }
        get c5() {
            return this.bx;
        }
        set c5(a) {
            if (this.bx == a) {
                return;
            }
            this.bx = a;
            let b = null;
            if (this.av != null && Rect.l_op_Inequality(this.av.c1, null)) {
                b = this.av.c1;
            }
            this.av = this.au();
            this.av.ad = this;
            this.av.ag = this.ay;
            if (Rect.l_op_Inequality(b, null)) {
                this.av.c1 = b;
            }
            if (this.bh != null && this.bh.cu != null) {
                this.av.af.al(this.bh.cu.y);
                this.h5(true);
            }
        }
        get e5() {
            return this.dk;
        }
        set e5(a) {
            let b = this.dk;
            if (b != a) {
                this.dk = a;
                this.dw = a;
                this.h5(true);
            }
        }
        get dw() {
            return this.de;
        }
        set dw(a) {
            this.de = a;
        }
        get fb() {
            return this.dr;
        }
        set fb(a) {
            this.dr = a;
            this.h5(true);
        }
        get e8() {
            return this.dn;
        }
        set e8(a) {
            this.dn = a;
            this.h5(true);
        }
        get as() {
            return this.ar;
        }
        set as(a) {
            let b = this.ar;
            if (b != a) {
                this.ar = a;
                this.h5(true);
            }
        }
        get e4() {
            return this.dj;
        }
        set e4(a) {
            this.dj = a;
            this.h4();
        }
        get fa() {
            return this.dq;
        }
        set fa(a) {
            this.dq = a;
            this.h4();
        }
        get e7() {
            return this.dm;
        }
        set e7(a) {
            this.dm = a;
            this.h4();
        }
        get bl() {
            if (this.bj == null) {
                if (this.bi == null) {
                    this.bi = this.a4.i();
                }
                return this.bi;
            }
            return this.bj;
        }
        set bl(a) {
            this.bj = a;
            this.dl = FontUtil.getFontSize(this.bj);
            this.h4();
        }
        get gw() {
            return this.f2;
        }
        set gw(a) {
            this.f2 = a;
            let b = this.dl;
            if (isNaN_(b)) {
                b = 12;
            }
            this.bl.n = a;
            this.bl.d = b;
            this.av.b8();
            this.h4();
        }
        get e6() {
            return this.dl;
        }
        set e6(a) {
            this.dl = a;
            this.bl = FontUtil.getFontWithNewFontSize(this.bl, this.dl);
            this.h4();
        }
        get fc() {
            return this.ds;
        }
        set fc(a) {
            this.ds = a;
            this.h4();
        }
        get e9() {
            return this.dp;
        }
        set e9(a) {
            this.dp = a;
            this.h4();
        }
        get fs() {
            return this.fn;
        }
        set fs(a) {
            this.fn = a;
            this.h4();
        }
        get fr() {
            return this.fm;
        }
        set fr(a) {
            this.fm = a;
            this.h4();
        }
        get fq() {
            return this.fl;
        }
        set fq(a) {
            this.fl = a;
            this.h4();
        }
        get kl() {
            return this.ki;
        }
        set kl(a) {
            this.ki = a;
            this.h4();
        }
        get fe() {
            return this.du;
        }
        set fe(a) {
            this.du = a;
            this.h4();
        }
        get fd() {
            return this.dt;
        }
        set fd(a) {
            this.dt = a;
            this.h4();
        }
        ig() {
            this.av.cp();
        }
        h4() {
            this.h5(false);
        }
        h5(a) {
            if (a) {
                this.av.co();
            }
            this.cp = true;
            this.h3();
        }
        ij() {
            if (this.fg > 0) {
                this.dy = this.fg;
                return;
            }
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null && isNaN_(this.fg) && this.ca && (this.co || this.a1 == 0)) {
                this.dy = a.t9.fq;
                return;
            }
            this.dy = 0;
        }
        get b3() {
            return this.bv;
        }
        get b6() {
            return this.ay != null && this.ay.k();
        }
        ie(a) {
            this.bv = true;
            if (this.df != a) {
                this.df = a;
                this.h7(false);
            }
        }
        h9() {
            this.bv = false;
            this.df = 0;
            this.h7(false);
        }
        ee() {
            if (this.b3 && (!this.b6 || (this.b6 && this.ay.angle == 0))) {
                return this.ev();
            }
            if (this.b6) {
                return this.ay.angle;
            }
            return 0;
        }
        ev() {
            return this.df;
        }
        get c3() {
            return this.c(Axis.jo);
        }
        set c3(a) {
            this.h(Axis.jo, a);
        }
        d4() {
            return 0;
        }
        jq() {
            if (this.co) {
                return 2;
            }
            return 0;
        }
        kj() {
            return 1;
        }
        jr() {
            return 1;
        }
        kk() {
            return 1;
        }
        d6() {
            if (this.co) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        d8() {
            if (!this.co && !this.b8) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        d7() {
            if (this.co) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        d5() {
            if (!this.co && !this.b8) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        eb() {
            return NaN;
        }
        ed() {
            return NaN;
        }
        ec() {
            return NaN;
        }
        ea() {
            return NaN;
        }
        az() {
            if (this.co) {
                return 2;
            }
            if (this.cl) {
                return 5;
            }
            return 1;
        }
        a0() {
            return 1;
        }
        h2(a) {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, a);
            }
        }
        d9() {
            if (this.co) {
                return -90;
            }
            return 0;
        }
        d3() {
            return NaN;
        }
        get am() {
            return this.ak;
        }
        get an() {
            return this.al;
        }
        get kc() {
            if (this.kb.isEmpty) {
                return this.j5;
            }
            return this.kb;
        }
        set kc(a) {
            this.j5 = a;
        }
        ik() {
            let a = 0;
            let b = typeCast(XamDataChart.$, this.bh);
            if (b != null && b.t0 == 0) {
                a = 1;
            }
            this.a4.ay(a);
        }
        c7(a, b, c) {
            return this.bh != null;
        }
        cn() {
            let a = Rect.empty;
            if (this.bh != null) {
                a = this.bh.tp;
            }
            return this.c7(this.kc, a, this.a4);
        }
        io(a, b) {
            this.cq = false;
            this.kc = b;
            this.cp = true;
            this.c0();
            this.h7(false);
            if (this.bh != null) {
                this.bh.ar.ae(1, this, this.a5, b);
            }
        }
        get cp() {
            return this.bw;
        }
        set cp(a) {
            this.bw = a;
        }
        j9() {
            if (this.bh == null || this.bh.td.isEmpty) {
                return Rect.empty;
            }
            let a = this.bh.td;
            let b = this.kc;
            let c = (a.left - b.left) / b.width;
            let d = (a.top - b.top) / b.height;
            let e = (a.right - b.left) / b.width;
            let f = (a.bottom - b.top) / b.height;
            return new Rect(0, c, d, e - c, f - d);
        }
        ip(a, b) {
            this.cp = true;
            this.h7(true);
        }
        h3() {
            this.h7(false);
        }
        hv(a, b, c, d) {
            switch (b) {
                case Axis.$$p[10]:
                case Axis.$$p[11]:
                    if (this.gf != null) {
                        this.ah = new BindingFormatter();
                        this.ah.j = this.gf;
                        this.ah.d = this.ag;
                    }
                    else {
                        this.ah = null;
                    }
                    break;
                case "SeriesViewer":
                    let e = typeCast(SeriesViewer.$, c);
                    if (e != null) {
                        this.fk = null;
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, this.br);
                        e.ar.ad(1, this);
                        this.a4.ad(e);
                    }
                    let f = typeCast(SeriesViewer.$, d);
                    if (f != null) {
                        this.fk = f.cu.j.ae;
                        f.actualWindowRectChanged = delegateCombine(f.actualWindowRectChanged, this.br);
                        this.a5 = f.ar.k(1, this, runOn(this, this.hj));
                        if (this.ay == null && this.fk != null) {
                            this.provideRenderer(this.fk);
                        }
                        this.a4.x(f);
                        if (this.cr && !this.a5.e) {
                            this.cr = false;
                            this.c0();
                        }
                        this.ii();
                        this.ij();
                    }
                    break;
                case Axis.$$p[8]:
                    this.h7(false);
                    break;
                case Axis.$$p[21]:
                    this.cw = this.cv;
                    this.h7(false);
                    break;
                case Axis.$$p[20]:
                    this.cu = this.ct;
                    this.h7(false);
                    break;
                case Axis.$$p[9]:
                    this.ch = this.cg;
                    let g = new AxisRangeChangedEventArgs(0, 0, 0, 1, 1);
                    this.hi(g);
                    for (let h of fromEnum(this.dd)) {
                        h.li();
                        if (h.cd != null) {
                            h.ls();
                        }
                    }
                    break;
                case Axis.$$p[12]:
                    this.a4.ak();
                    if (typeCast(DataTemplate.$, d) !== null) {
                        this.c6 = true;
                    }
                    else {
                        this.c6 = false;
                    }
                    this.cp = true;
                    this.ib();
                    this.h7(false);
                    break;
                case Axis.$$p[16]:
                case Axis.$$p[19]:
                case Axis.$$p[25]:
                    this.h7(false);
                    break;
                case Axis.$$p[13]:
                    let i = typeCast(AxisLabelSettings.$, d);
                    if (i != null) {
                        i.registerAxis(this);
                        this.aw = i;
                    }
                    else {
                        this.aw = new AxisLabelSettings();
                    }
                    if (this.av != null) {
                        this.av.ag = this.aw;
                    }
                    this.ht();
                    this.cp = true;
                    this.h7(false);
                    break;
                case Axis.$$p[30]:
                    this.a4.an();
                    break;
                case Axis.$$p[31]:
                    let j = typeCast(TitleSettings.$, d);
                    if (j != null) {
                        j.registerAxis(this);
                    }
                    else {
                        j = new TitleSettings();
                    }
                    if (this.ir != null) {
                        this.ir.dataContext = j;
                    }
                    this.hu();
                    this.h7(false);
                    break;
                case Axis.$$p[26]:
                    this.cp = true;
                    this.ij();
                    this.a4.ag();
                    this.h7(false);
                    break;
                case Axis.$$p[32]:
                case Axis.$$p[5]:
                case "UseEnhancedIntervalManagement":
                case Axis.$$p[6]:
                    this.by = this.c4;
                    this.cp = true;
                    this.h7(false);
                    break;
                case Axis.$$p[3]:
                    if (this.bh != null) {
                        this.bh.l6();
                    }
                    break;
                case Axis.$$p[18]:
                    this.ii();
                    if (d != null) {
                        this.cx = true;
                        this.h7(false);
                    }
                    else {
                        this.cx = false;
                    }
                    break;
                case Axis.$$p[4]:
                    if (this.ai != null) {
                        this.ai.h6();
                    }
                    break;
                case Axis.$$p[24]:
                case Axis.$$p[15]:
                    this.ii();
                    this.h7(false);
                    break;
                case Axis.$$p[23]:
                case Axis.$$p[14]:
                case Axis.$$p[17]:
                case Axis.$$p[7]:
                case Axis.$$p[28]:
                case Axis.$$p[29]:
                case Axis.$$p[27]:
                case Axis.$$p[2]:
                case Axis.$$p[0]:
                case Axis.$$p[1]:
                case Axis.$$p[22]:
                    this.h7(false);
                    break;
                case "MinExtent":
                    this.a4.ag();
                    break;
            }
        }
        ht() {
            if (this.a4.o()) {
                this.a4.z(this.aw);
            }
        }
        hu() {
            this.a4.an();
        }
        get coercionMethods() {
            return this._coercionMethods;
        }
        set coercionMethods(a) {
            this._coercionMethods = a;
        }
        get_expectFunctions() {
            return this.bu;
        }
        set_expectFunctions(a) {
            this.bu = a;
        }
        get expectFunctions() {
            return this.get_expectFunctions();
        }
        set expectFunctions(a) {
            this.set_expectFunctions(a);
        }
        ib() {
            this.bq.count = 0;
            this.bp.count = 0;
            this.bo.count = 0;
            if (this.a4.o()) {
                this.a4.aq();
            }
        }
        hq(a, b, c, d) {
            let e = Math.min(b, c);
            let f = Math.max(b, c);
            if (e < d.bottom && f > d.top) {
                let g = new RectangleGeometry();
                g.e = new Rect(0, d.left, e, d.width, f - e);
                a.add(g);
            }
        }
        hp(a, b, c, d, e) {
            let f = b <= c.bottom && b >= c.top;
            if (!e && f) {
                f = !this.cf(b, d.c, c, false);
            }
            if (f) {
                if (d.a) {
                    b = this.dz(b, c.top, c.bottom, d);
                }
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: c.left, y: b };
                g.c = { $type: Point_$type, x: c.right, y: b };
                a.add(g);
            }
        }
        im(a, b, c, d) {
            let e = Math.min(b, c);
            let f = Math.max(b, c);
            if (f > d.left && e < d.right) {
                let g = new RectangleGeometry();
                g.e = new Rect(0, e, d.top, f - e, d.height);
                a.add(g);
            }
        }
        il(a, b, c, d, e) {
            let f = b >= c.left && b <= c.right;
            if (!f) {
                let g = truncate(Math.round(b));
                let h = truncate(Math.round(c.left));
                let i = truncate(Math.round(c.right));
                if (g >= h && g <= i) {
                    f = true;
                }
            }
            if (!e && f) {
                f = !this.cf(b, d.c, c, true);
            }
            if (f) {
                if (d.a) {
                    b = this.dz(b, c.left, c.right, d);
                }
                let j = new LineGeometry();
                j.d = { $type: Point_$type, x: b, y: c.top };
                j.c = { $type: Point_$type, x: b, y: c.bottom };
                a.add(j);
            }
        }
        cf(a, b, c, d) {
            let e = false;
            let f = typeCast(XamDataChart.$, this.bh);
            if (f != null && (f.ur || f.us) && !c.isEmpty) {
                let g = this.bh.s9.width == 1 && this.bh.s9.height == 1;
                for (let h of fromEnum(f.axes)) {
                    if (h._visibility != 0 || h.ff < 1 || h.ju == null || BrushUtilCore.a(h.ju) || h.kc.isEmpty) {
                        continue;
                    }
                    if (h.ai != null && h.b4()) {
                        if (f.ur) {
                            let i = this.co ? c.left : c.top;
                            let j = 0;
                            let k = h.id(i, j, h.bh.tp, c, h.j7(), d ? c.left : c.top, d ? c.right : c.bottom);
                            i = k.p0;
                            j = k.p1;
                            let l = Rect.empty;
                            let m = Rect.empty;
                            if (d && h.co) {
                                l = new Rect(0, i - (h.ff / 2), h.kc.top, h.ff, h.kc.height);
                                m = new Rect(0, a - (b / 2), c.top, b, c.height);
                            }
                            else if (!d && !h.co) {
                                l = new Rect(0, h.kc.left, i - (h.ff / 2), h.kc.width, h.ff);
                                m = new Rect(0, c.left, a - (b / 2), c.width, b);
                            }
                            if (l.left <= m.right && m.left <= l.right && l.top <= m.bottom && m.top <= l.bottom) {
                                e = true;
                                break;
                            }
                        }
                    }
                    else {
                        let n = Rect.empty;
                        let o = Rect.empty;
                        if (d && h.co) {
                            n = new Rect(0, h.kc.left, h.kc.top, h.ff, h.kc.height);
                            o = new Rect(0, a - (b / 2), c.top, b, c.height);
                        }
                        else if (!d && !h.co) {
                            n = new Rect(0, h.kc.left, h.kc.bottom - (h.ff / 2), h.kc.width, h.ff);
                            o = new Rect(0, c.left, a - (b / 2), c.width, b);
                        }
                        if (n.left <= o.right && o.left <= n.right && n.top <= o.bottom && o.top <= n.bottom) {
                            e = true;
                            break;
                        }
                        if (g && f.us) {
                            let p = f.vl;
                            if (isNaN_(p)) {
                                if (d && h.co) {
                                    p = 0;
                                    p = Math.max(p, f.vd);
                                    p = Math.max(p, f.va);
                                }
                                else if (!d && !h.co) {
                                    p = 0;
                                    p = Math.max(p, f.vb);
                                    p = Math.max(p, f.vc);
                                }
                                p += 1;
                            }
                            p *= 2;
                            if (d && h.co) {
                                n = new Rect(0, h.kc.left, h.kc.top, h.ff, h.kc.height);
                                o = new Rect(0, a - (p / 2), c.top, p, c.height);
                            }
                            else if (!d && !h.co) {
                                n = new Rect(0, h.kc.left, h.kc.bottom - (h.ff / 2), h.kc.width, h.ff);
                                o = new Rect(0, c.left, a - (p / 2), c.width, p);
                            }
                            if (n.left <= o.right && o.left <= n.right && n.top <= o.bottom && o.top <= n.bottom) {
                                e = true;
                                break;
                            }
                        }
                    }
                }
            }
            return e;
        }
        id(a, b, c, d, e, f, g) {
            let h = Math.abs(f - g);
            a = this.fu;
            a = this.ai.e3(a);
            let i = typeCast(CategoryAxisBase.$, this.ai);
            if (i != null && i.categoryMode == 2) {
                let j = 0.5 * i.getCategorySize(c, d, e);
                let k = i.a1 == 0;
                if (i.cg == k) {
                    j = -j;
                }
                a = a + j;
            }
            b = a - f;
            if (a < f) {
                a = f;
            }
            else if (a > g) {
                a = g;
            }
            if (b < 0) {
                b = 0;
            }
            else if (b > h) {
                b = h;
            }
            return {
                p0: a,
                p1: b
            };
        }
        dz(a, b, c, d) {
            let e = a;
            if (d != null && d.c > 0) {
                let f = d.c % 2;
                if (f == 0 || f == 1) {
                    let g = 1;
                    e = Math.floor(a);
                    if (e + 0.5 < a) {
                        g = -1;
                        e = Math.ceil(a);
                    }
                    if (f == 1) {
                        e += 0.5 * g;
                    }
                    if (e >= c) {
                        e -= 1;
                    }
                    else if (e <= b) {
                        e += 1;
                    }
                }
            }
            return e;
        }
        hh(a) {
            this.a4.ac(a);
        }
        hg() {
            this.bq.count = 0;
            this.bp.count = 0;
            this.bo.count = 0;
            this.a4.aa();
            this.db.clear();
            this.dc.clear();
        }
        h6() {
            this.h7(false);
        }
        h7(a) {
            if (this.bh != null) {
                this.bh.ar.ac(1, this, this.a5, a);
                if (this.renderRequested != null) {
                    let b = new RenderRequestedEventArgs();
                    b.animate = a;
                    this.renderRequested(this, b);
                    a = b.animate;
                }
            }
        }
        ey() {
            if (this.bb == null) {
                return -1;
            }
            if (isNaN_(this.bb.b)) {
                return -1;
            }
            if (this.ee() != 0) {
                return -1;
            }
            let a = this.bb.b;
            let b = this.e2();
            let c = this.ez();
            a = a + b + c;
            return Math.max(Axis.es, a);
        }
        e2() {
            if (this.ay == null) {
                return 0;
            }
            else {
                return this.ay.topMargin;
            }
        }
        e0() {
            if (this.ay == null) {
                return 0;
            }
            else {
                return this.ay.leftMargin;
            }
        }
        e1() {
            if (this.ay == null) {
                return 0;
            }
            else {
                return this.ay.rightMargin;
            }
        }
        ez() {
            if (this.ay == null) {
                return 0;
            }
            else {
                return this.ay.bottomMargin;
            }
        }
        ew() {
            if (this.bb == null) {
                return -1;
            }
            if (isNaN_(this.bb.d) && isNaN_(this.dh)) {
                return -1;
            }
            if (this.ay != null && (this.ay.angle != 0)) {
                return -1;
            }
            let a = this.bb.d;
            if (!isNaN_(this.dh) && this.fp == -1) {
                return this.dh;
            }
            return Math.max(Axis.es, this.bb.d);
        }
        d1(a, b, c, d, e) {
            if (a == 1) {
                return 1;
            }
            if (b) {
                return a;
            }
            let f = 0;
            let g = this.ep(a, b, c, d, e);
            if (!b && f < 10 && this.cy(g, c, d, e)) {
                a = g - 1;
                f += 1;
                while (!b && f < 10 && this.cy(a, c, d, e)) {
                    a--;
                    f += 1;
                }
            }
            return a;
        }
        ep(a, b, c, d, e) {
            let f = false;
            if (this.co) {
                f = this.ca && this.b0 && this.bb != null;
            }
            else {
                f = this.ca && this.b0 && this.b5();
            }
            if (f) {
                let g = this.ef(a, c, d, e);
                if (isNaN_(g)) {
                    return a;
                }
                let h = this.eg(a, c, d, e);
                if (g <= h) {
                    return a;
                }
                let i = Math.ceil((h / g) * a) + 1;
                return i;
            }
            return a;
        }
        eg(a, b, c, d) {
            if (this.co) {
                let e = this.bb.b;
                return e;
            }
            else {
                let f = this.dh;
                if (this.bh != null && this.bh.ez) {
                    f = this.bb.b;
                }
                return f;
            }
        }
        cy(a, b, c, d) {
            if (this.co) {
                if (this.ca && this.b0 && this.bb != null) {
                    let e = this.bb.b;
                    if (a > 1) {
                        let f = a - 1;
                        if (f < 1) {
                            return false;
                        }
                        let g = this.ef(f, b, c, d);
                        if (isNaN_(g)) {
                            return false;
                        }
                        if (g > e) {
                            return true;
                        }
                    }
                }
            }
            else {
                if (this.ca && this.b0 && this.b5()) {
                    if (a > 1) {
                        let h = a - 1;
                        if (h < 1) {
                            return false;
                        }
                        let i = this.ef(h, b, c, d);
                        if (isNaN_(i)) {
                            return false;
                        }
                        let j = this.dh;
                        if (this.bh != null && this.bh.ez) {
                            j = this.bb.b;
                        }
                        if (i > j) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        ef(a, b, c, d) {
            return NaN;
        }
        ex() {
            if (this.co) {
                return this.ey();
            }
            else {
                return this.ew();
            }
        }
        get cz() {
            return this.fp == -1;
        }
        hj(a) {
            if (this.a4.m()) {
                return;
            }
            let b = 0;
            let c = 0;
            if (this.dc != null && this.dc.count > 0) {
                b = this.dc._inner[this.dc.count - 1].c;
                c = this.dc.count;
            }
            if (this.cp && this.c3) {
                this.bb = this.ba();
            }
            this.h8(a);
            if (!this.co && this.cp && this.c3 && this.cz) {
                if (this.b1()) {
                    this.h8(a);
                }
            }
            let d = 1;
            let e = 0;
            if (this.dc != null && this.dc.count > 0) {
                d = this.dc._inner[this.dc.count - 1].c;
                e = this.dc.count;
            }
            if (this.c5) {
                this.cp = true;
            }
            let f = false;
            if (d != b || e != c || this.cp) {
                this.cp = false;
                if (this.a4.o()) {
                    this.a4.ag();
                    f = true;
                }
            }
            this.a4.af();
            if (!f) {
                this.hk();
            }
        }
        b1() {
            if (!isNaN_(this.dh) || this.db == null || this.db.count == 0) {
                return false;
            }
            let a = this.bk();
            if (a == null) {
                return false;
            }
            let b = -1.7976931348623157E+308;
            for (let c = 0; c < this.db.count; c++) {
                let d = this.db._inner[c];
                if (typeof d === 'string') {
                    let e = FontUtil.measureStringWidth(d, a, this.a4.j);
                    b = Math.max(e, b);
                }
            }
            b += 5;
            if (this.ay != null) {
                b += this.ay.leftMargin + this.ay.rightMargin;
            }
            this.dh = b;
            return true;
        }
        ia() {
            this.dh = NaN;
            this.h7(false);
        }
        b5() {
            return !isNaN_(this.dh) && this.fp == -1;
        }
        d0(a, b) {
            return a;
        }
        ic() {
            this.dh = NaN;
        }
        ba() {
            let a = this.bk();
            if (a == null) {
                return null;
            }
            let b = "W";
            if (this.a4.j == null) {
                return null;
            }
            let c = FontUtil.measureStringWidth(b, a, this.a4.j);
            if (this.di != c || this.bb == null) {
                this.di = c;
                let d = FontUtil.getCurrentFontHeight(this.bh.cu.j.ae, a);
                if (this.bb == null) {
                    this.bb = new LabelFontHeuristics();
                }
                this.bb.b = d;
                this.bb.c = this.fp;
                this.bb.a = this.b0;
                this.bb.e = c;
                this.bb.d = this.bb.e * this.bb.c;
            }
            return this.bb;
        }
        bk() {
            let a = null;
            if (this.bh != null) {
                a = this.bh.getFontInfo();
            }
            if (this.ay != null && this.ay.j) {
                if (this.bh != null) {
                    a = this.ay.h(this.bh.cu.j.ae);
                }
            }
            return a;
        }
        hk() {
            if (!this.a4.o()) {
                return;
            }
            if (!this.b7()) {
                this.a4.ae();
            }
        }
        c0() {
            return this.c1(false);
        }
        c1(a) {
            if (a || this.bh == null) {
                let b = this.c2();
                if (b) {
                    this.cp = true;
                }
                this.cr = false;
                return b;
            }
            if (!this.cr) {
                this.cr = true;
                this.bh.ar.ab(this, this.a5);
            }
            return false;
        }
        c2() {
            return false;
        }
        h8(a) {
            if (this.ir != null) {
                if ((this.be == null || this.be.visibility == 0) && (this.ay == null || this.ay.visibility == 0) && this.g5 != null) {
                    this.ir._visibility = 0;
                }
                else {
                    this.ir._visibility = 1;
                }
            }
        }
        ii() {
            let a = typeCast(XamDataChart.$, this.bh);
            if (a == null) {
                return;
            }
            let b = null, c = null, d = null;
            if (this.ca && !this.b8) {
                b = a.xw;
                for (let e of fromEnum(this.dd)) {
                    if (e.ed || e.eb || e.d7 || e.eb) {
                        c = a.xu;
                        d = a.xv;
                        break;
                    }
                }
            }
            else if (this.ci && !this.b8) {
                c = a.xu;
                d = a.xv;
                b = this.ai != null ? a.xw : null;
                for (let f of fromEnum(this.dd)) {
                    if (f.ed || f.eb || f.d7 || f.eb) {
                        b = a.xw;
                        break;
                    }
                }
            }
            else if (this.b8 || this.a1 == 3) {
                b = a.xw;
                c = a.xu;
                d = a.xv;
            }
            this.ju = this.jy != null ? this.jy : b;
            this.js = this.jv != null ? this.jv : c;
            this.jt = this.jw != null ? this.jw : d;
        }
        h1(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        cs(a) {
            let b = this.dd.contains(a);
            if (!b) {
                this.dd.add(a);
            }
            this.ii();
            return !b;
        }
        bz(a) {
            let b = this.dd.contains(a);
            if (b) {
                this.dd.remove(a);
            }
            this.ii();
            return b;
        }
        fw(a, b) {
            let c = this.gr(b);
            if (c == Axis.$$p[12]) {
                return this.fx(a, b, this.fz);
            }
            return null;
        }
        gr(a) {
            if (!this.c9.containsKey(a)) {
                let b = a.charAt(0).toUpperCase() + a.substr(1);
                this.c9.addItem(a, b);
            }
            return this.c9.item(a);
        }
        fx(a, b, c) {
            let d = null;
            if (!this.c8.containsKey(b)) {
                d = new FastReflectionHelper(false, c);
                this.c8.addItem(b, d);
            }
            else {
                d = this.c8.item(b);
            }
            d.propertyName = c;
            return d.getPropertyValue(a);
        }
        fy(a) {
            return this.a4.p(a);
        }
        gc(a) {
            return this.a4.r(a);
        }
        eu() {
            return NaN;
        }
        ei(a, b) {
            return 0;
        }
        ej(a, b, c) {
            return 0;
        }
        j8(a) {
            if (this.bh == null) {
                return Rect.empty;
            }
            if (!a.equals1(this.kc)) {
                return Rect.empty;
            }
            return this.bh.td;
        }
        j7() {
            if (this.bh == null) {
                return Rect.empty;
            }
            return this.bh.td;
        }
        j6() {
            if (this.bh == null || this.bh.tc.isEmpty) {
                return this.kc;
            }
            return this.bh.tc;
        }
        ka(a, b) {
            if (b.isEmpty) {
                return a;
            }
            return b;
        }
        ek(a, b, c) {
            let d = this.j8(c);
            let e = new ScalerParams(0, b, c, this.cg, d);
            return this.ei(a, e);
        }
        hm(a, b, c, d) {
        }
        hl(a, b, c, d, e) {
        }
        el(a, b) {
            return 0;
        }
        em(a, b, c) {
            return 0;
        }
        en(a, b, c) {
            let d = this.j8(c);
            let e = new ScalerParams(0, b, c, this.cg, d);
            return this.el(a, e);
        }
        hn(a, b, c, d) {
        }
        e3(a) {
            let b = this.j7();
            let c = new ScalerParams(0, this.bh.s9, this.kc, this.cg, b);
            return this.ei(a, c);
        }
        hs(a) {
            let b = false;
            if (this.kh.width == 0 || this.kh.height == 0) {
                this.kb = new Rect(0, 0, 0, a.width, a.height);
            }
            else {
                b = true;
                this.kb = new Rect(0, 0, 0, this.kh.width, this.kh.height);
            }
            if (b) {
                this.a5.c = true;
                this.cp = true;
                this.av.ci();
                this.c1(true);
            }
        }
        ih() {
            this.kb = Rect.empty;
            this.av.cq();
        }
        ap() {
            this.ao.a = this.av;
            return this.ao;
        }
        get er() {
            return this.dg;
        }
        set er(a) {
            let b = this.er;
            if (a != b) {
                this.dg = a;
                this.h1("MinExtent", b, this.er);
            }
        }
        b7() {
            if (!isNaN_(this.d2)) {
                return true;
            }
            if (this.ay == null) {
                return false;
            }
            else {
                return this.ay.l();
            }
        }
        eo() {
            if (!isNaN_(this.d2)) {
                return this.d2;
            }
            if (this.ay == null) {
                return 50;
            }
            return this.ay.extent;
        }
        hf() {
            this.a4.w();
        }
        hi(a) {
            this.h2(a);
        }
        get kd() {
            return this.aq().a;
        }
        get ke() {
            return this.aq().b;
        }
        get kg() {
            return this.a4.c().d;
        }
        get kf() {
            return this.aq().c;
        }
        bd() {
            return SyncManager.a(this.bg);
        }
        aq() {
            return this.a4.c();
        }
        get ax() {
            return this.aw;
        }
        hw(a, b) {
            if (this.av != null) {
                this.av.cj(a);
            }
            this.a4.ai(a, b);
        }
        b4() {
            return this.fu != null;
        }
        fv() {
            return this.a9.exportVisualData(this);
        }
        *_da() {
            for (let a = 0; a < this.dd.count; a++) {
                let b = this.dd._inner[a];
                yield b;
            }
        }
        da() {
            return toEnum(() => this._da());
        }
        hx(a) {
        }
        h0(a) {
        }
        hz(a) {
        }
        j4(a, b, c, d = null, e = null) {
            if (this.co) {
                let f = new LineGeometry();
                f.d = { $type: Point_$type, x: c.left, y: a };
                f.c = { $type: Point_$type, x: c.right, y: a };
                return f;
            }
            else {
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: a, y: c.bottom };
                g.c = { $type: Point_$type, x: a, y: c.top };
                return g;
            }
        }
    }
    Axis.$t = /*@__PURE__*/ markType(Axis, 'Axis', Control.$, [INotifyPropertyChanged_$type]);
    Axis.jo = /*@__PURE__*/ DependencyProperty.i("UseEnhancedIntervalManagement", Boolean_$type, Axis.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => a.h1("UseEnhancedIntervalManagement", b.oldValue, b.newValue)));
    Axis.es = 7;
    Axis.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, Axis, 'h1', ['ActualMajorStroke:js:is', [Brush.$], 'ActualMinorStroke:jt:it', [Brush.$], 'ActualStroke:ju:iu', [Brush.$], 'CrossingAxis:ai:iv', [Axis.$], 'CrossingValue:fu:iw', [4, null], 'EnhancedIntervalMinimumCharacters:fp:ix', [1, -1], 'EnhancedIntervalPreferMoreCategoryLabels:b0:iy', [0, false], 'FormatLabel:at:iz', [Delegate_$type], 'IsDisabled:ce:i0', [0, false], 'IsInverted:cg:i1', [0, false], 'LabelFormat:gf:i2', [2, null], 'LabelFormatSpecifiers:ag:i3', [Array_$type, null], 'Label:fz:i4', [4, null], 'LabelSettings:ay:i5', [AxisLabelSettings.$, null], 'MajorStrokeDashArray:j0:i6', [DoubleCollection.$], 'MajorStroke:jv:i7', [Brush.$], 'MajorStrokeThickness:eq:i8', [1, 1], 'MinorStrokeDashArray:j1:i9', [DoubleCollection.$], 'MinorStroke:jw:ja', [Brush.$], 'MinorStrokeThickness:et:jb', [1, 1], 'ShouldAvoidAnnotationCollisions:ct:jc', [0, false], 'ShouldKeepAnnotationsInView:cv:jd', [0, false], 'Strip:jx:je', [Brush.$], 'StrokeDashArray:j2:jf', [DoubleCollection.$], 'Stroke:jy:jg', [Brush.$], 'StrokeThickness:ff:jh', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'TickLength:fg:ji', [1, NaN], 'TickStrokeDashArray:j3:jj', [DoubleCollection.$], 'TickStroke:jz:jk', [Brush.$], 'TickStrokeThickness:fh:jl', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'Title:g5:jm', [2], 'TitleSettings:be:jn', [TitleSettings.$, null], 'UsePerLabelHeightMeasurement:c4:jp', [0, true]]);
    return Axis;
})();
/**
 * @hidden
 */
export let AxisCollection = /*@__PURE__*/ (() => {
    class AxisCollection extends ObservableCollection$1 {
        constructor() {
            super(Axis.$, 0);
            this.collectionResetting = null;
            this.propertyChanged = delegateCombine(this.propertyChanged, (a, b) => {
                if (b.propertyName == "Name") {
                    for (let c = 0; c < this.count; ++c) {
                        if (this._inner[c].name == b.propertyName) {
                            this.ac(new NotifyCollectionChangedEventArgs(2, 2, this._inner[c], this._inner[c], c));
                        }
                    }
                }
            });
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    AxisCollection.$t = /*@__PURE__*/ markType(AxisCollection, 'AxisCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Axis.$));
    return AxisCollection;
})();
/**
 * @hidden
 */
export let AxisLabelManager = /*@__PURE__*/ (() => {
    class AxisLabelManager extends Base {
        constructor() {
            super();
            this.e = null;
            this.f = null;
            this.b = null;
            this.a = null;
            this.c = null;
            this.c = (a) => {
            };
        }
        n(a, b) {
            this.e.clear();
            this.f.clear();
            this.b.ad = this.a;
            this.b.c5 = a;
            this.b.c4 = b;
            if (b.isEmpty || a.isEmpty) {
                this.s(0);
                this.a.bp.count = 0;
                this.a.bo.count = 0;
            }
            if (this.a.bq.count == 0 && this.a.bp.count == 0) {
                this.b.ab.clear();
            }
        }
        i(a, b) {
            this.e.add1(a);
            this.f.add(b);
        }
        t() {
            this.b.a9 = this.e;
            this.b.ba = this.f;
            this.b.cl();
        }
        static j(a, b) {
            AxisLabelManager.k(a, false, b);
        }
        static k(a, b, c) {
        }
        static l(a, b, c) {
        }
        static m(a, b) {
            AxisLabelManager.l(a, true, b);
        }
        h(a) {
            this.b.ab.add(a);
        }
        r(a) {
            this.b.bw = a;
        }
        o(a) {
            this.c(a);
        }
        u(a) {
            let b = this.a.bq.item(a);
            return b;
        }
        s(a) {
            if (this.a == null) {
                return;
            }
            this.a.bq.count = a;
        }
        get d() {
            if (this.a == null || this.a.ay == null) {
                return false;
            }
            return this.a.ay.visibility != 0;
        }
        q() {
            this.a.bq.count = 0;
            this.a.bp.count = 0;
            this.a.bo.count = 0;
            this.a.av.bb.clear();
        }
        p() {
            this.a.cp = true;
        }
        g() {
            this.a.he();
        }
    }
    AxisLabelManager.$t = /*@__PURE__*/ markType(AxisLabelManager, 'AxisLabelManager');
    return AxisLabelManager;
})();
/**
 * @hidden
 */
export let AxisLabelPanelBase = /*@__PURE__*/ (() => {
    class AxisLabelPanelBase extends Panel {
        constructor() {
            super();
            this.cx = null;
            this.bw = 0;
            this.ad = null;
            this.ak = false;
            this.a3 = null;
            this.ba = null;
            this.c4 = null;
            this.cw = Rect.empty;
            this.cv = null;
            this.c2 = null;
            this.bc = 0;
            this.bx = null;
            this.bb = null;
            this.a8 = null;
            this.ag = null;
            this.ao = false;
            this.c3 = null;
            this.ar = false;
            this.av = false;
            this.aw = false;
            this.ax = false;
            this.bz = null;
            this.al = false;
            this.bd = 50;
            this.be = 0;
            this.bf = 0;
            this.c7 = new Size();
            this.be = NaN;
            this.c4 = Rect.empty;
            this.c2 = Rect.empty;
            this.c1 = Rect.empty;
            this.af = this.ae();
            this.ch(this.af);
            this.af.an();
            this.bb = new List$1(FrameworkElement.$, 0);
            this.ba = new List$1(LabelPosition.$, 0);
            this.a8 = new List$1(Rect.$, 0);
            this.aw = false;
            this.av = false;
            this.ax = false;
            this.ao = false;
            this.ar = false;
            this.c3 = Rect.empty;
            this.ak = false;
        }
        ae() {
            return new AxisLabelPanelBaseView(this);
        }
        ch(a) {
        }
        b8() {
        }
        cp() {
        }
        co() {
        }
        get az() {
            return this.ak;
        }
        set az(a) {
            this.ak = a;
        }
        get a9() {
            return this.a3;
        }
        set a9(a) {
            let b = this.a3;
            this.a3 = a;
            if (b == null && b != a) {
                this.ce();
            }
        }
        get c5() {
            return this.cw;
        }
        set c5(a) {
            let b = this.cw;
            this.cw = a;
            this.ct(b, this.cw);
        }
        get c1() {
            if (!this.c2.isEmpty) {
                return this.c2;
            }
            return this.cv;
        }
        set c1(a) {
            let b = this.cv;
            this.cv = a;
            this.cd(b, this.cv);
        }
        get bg() {
            return this.bc;
        }
        set bg(a) {
            this.bc = a;
        }
        bn() {
            let a = 1.7976931348623157E+308;
            if (this.ba != null && this.ba.count > 1) {
                for (let b = 1; b < this.ba.count; b++) {
                    let c = this.ba._inner[b];
                    let d = this.ba._inner[b - 1];
                    if (c.a || d.a) {
                        continue;
                    }
                    let e = Math.abs(c.c - d.c);
                    if (e < a) {
                        a = e;
                    }
                }
            }
            return a;
        }
        cl() {
            this.ar = false;
            this.c3 = Rect.empty;
        }
        an(a, b) {
            for (let c = 0; c < a.count - 1; c++) {
                if (b._inner[c]) {
                    continue;
                }
                for (let d = c; d < a.count - 1; d++) {
                    if (b._inner[d + 1]) {
                        continue;
                    }
                    if (a._inner[c].intersectsWith(a._inner[d + 1])) {
                        return true;
                    }
                }
            }
            return false;
        }
        by(a, b, c) {
            return {
                ret: 0,
                p1: b
            };
        }
        a5() {
            return null;
        }
        b6() {
        }
        b2(a) {
        }
        get ap() {
            return this.ag != null && this.ag.k();
        }
        bl() {
            if (this.ad.b3 && (!this.ap || (this.ap && this.ag.angle == 0))) {
                return this.ad.ev();
            }
            return this.ag != null ? this.ag.angle : 0;
        }
        bq() {
            return this.ad.be != null ? this.ad.be.angle : 0;
        }
        at(a, b) {
            if (a == 0 && !this.ad.b8 && this.ag != null) {
                if (this.ad.co) {
                    if (!this.ag.showFirstLabel && this.ad.bh.gn() == 1) {
                        return false;
                    }
                }
                else {
                    if (!this.ag.showFirstLabel && this.ad.bh.gm() == 1) {
                        return false;
                    }
                }
            }
            return true;
        }
        bk(a) {
            return this.af.m(a);
        }
        bv(a) {
            return this.af.w(a);
        }
        bm(a) {
            return this.af.n(a);
        }
        bj(a) {
            return this.af.l(a);
        }
        aq() {
            return false;
        }
        ct(a, b) {
        }
        cd(a, b) {
        }
        a7() {
            if (this.ab.count < 1 || this.ba.count == 0) {
                return new List$1(Rect.$, 0);
            }
            this.bb = new List$1(FrameworkElement.$, 0);
            this.a8 = new List$1(Rect.$, 0);
            this.b6();
            this.af.af();
            let a = this.bl();
            if (a % 360 == 0) {
                this.av = false;
            }
            if (this.bb.count == 0) {
                return new List$1(Rect.$, 0);
            }
            this.a8 = this.a5();
            this.a8 = this.a6(this.a8);
            this.ak = true;
            return this.a8;
        }
        a6(a) {
            if (this.ad.ct || this.ad.cv) {
                let b = this.af.p();
                let c = this.af.r();
                let d = this.af.q();
                let e = this.af.o();
                let f = Math.max(b, Math.max(c, Math.max(d, e)));
                let g = new Thickness(0, f);
                if (this.av) {
                    g = new Thickness(0, Math.sqrt((f * f) / 2));
                }
                let h = this.a4(a);
                let i = new List$1(Thickness.$, 0);
                if (h.count < 1) {
                    return a;
                }
                h.aa((j, k) => {
                    let l = this.cy(j, a._inner[j], g);
                    let m = this.cy(k, a._inner[k], g);
                    let n = l.top;
                    let o = m.top;
                    if (n < o) {
                        return -1;
                    }
                    if (n > o) {
                        return 1;
                    }
                    return 0;
                });
                for (let j = 0; j < h.count; j++) {
                    let k = h._inner[j];
                    let l = a._inner[k];
                    let m = this.cy(k, a._inner[k], g);
                    let n = this.ad.bh.to.top;
                    if (this.ad.cv) {
                        if (l.top < (this.ad.bh.to.top - n)) {
                            l = new Rect(0, l.left, l.top + ((this.ad.bh.to.top - n) - l.top), l.width, l.height);
                            a._inner[k] = l;
                        }
                    }
                }
                let o = this.as(a, h, g);
                if (o && (this.ad.ct)) {
                    for (let p = 0; p < h.count - 1; p++) {
                        let q = h._inner[p];
                        let r = h._inner[p + 1];
                        let s = a._inner[q];
                        let t = a._inner[r];
                        let u = this.cy(q, a._inner[q], g);
                        let v = this.cy(r, a._inner[r], g);
                        if (u.intersectsWith(v) || u.top > v.bottom) {
                            let w = new Rect(0, t.left, u.bottom + 1 + (t.top - v.top), t.width, t.height);
                            a._inner[r] = w;
                        }
                    }
                }
                for (let x = h.count - 1; x >= 0; x--) {
                    let y = h._inner[x];
                    let z = a._inner[y];
                    let aa = this.cy(y, a._inner[y], g);
                    let ab = this.ad.bh.cu.a3;
                    if (this.ad.cv) {
                        if (aa.bottom > this.ad.bh.to.bottom + ab) {
                            z = new Rect(0, z.left, z.top - (aa.bottom - (this.ad.bh.to.bottom + ab)), z.width, z.height);
                            a._inner[y] = z;
                        }
                    }
                }
                if (this.ad.ct) {
                    for (let ac = h.count - 1; ac >= 1; ac--) {
                        let ad = h._inner[ac];
                        let ae = h._inner[ac - 1];
                        let af = a._inner[ad];
                        let ag = a._inner[ae];
                        let ah = this.cy(ad, a._inner[ad], g);
                        let ai = this.cy(ae, a._inner[ae], g);
                        if (ah.intersectsWith(ai) || ah.top < ai.bottom) {
                            let aj = new Rect(0, ag.left, ah.top - (ai.height + 1 + (ag.top - ai.top)), ag.width, ag.height);
                            a._inner[ae] = aj;
                        }
                    }
                }
                return a;
            }
            else {
                return a;
            }
        }
        cy(a, b, c) {
            let d = this.ba._inner[a];
            let e = d.d;
            if (isNaN_(e.left) || isNaN_(e.top) || isNaN_(e.right) || isNaN_(e.bottom)) {
                e = c;
            }
            if (e.left > c.left || e.top > c.top || e.right > c.right || e.bottom > c.bottom) {
                e = c;
            }
            let f = new Rect(0, b.left - e.left, b.top - e.top, b.width + e.left + e.right, b.height + e.top + e.bottom);
            return f;
        }
        as(a, b, c) {
            if (b.count <= 1) {
                return false;
            }
            for (let d = 0; d < b.count - 1; d++) {
                let e = b._inner[d];
                let f = b._inner[d + 1];
                let g = a._inner[e];
                let h = a._inner[f];
                let i = this.cy(e, a._inner[e], c);
                let j = this.cy(f, a._inner[f], c);
                if (i.intersectsWith(j)) {
                    return true;
                }
            }
            return false;
        }
        a4(a) {
            let b = new List$1(Number_$type, 0);
            for (let c = 0; c < a.count; c++) {
                let d = this.ba._inner[c].a;
                if (d) {
                    b.add(c);
                }
            }
            return b;
        }
        bp(a, b) {
            let c = a * (Math.PI / 180);
            let d = Math.abs(b.width * Math.cos(c)) + Math.abs(b.height * Math.sin(c));
            return d;
        }
        bo(a, b) {
            let c = a * (Math.PI / 180);
            let d = Math.abs(b.height * Math.cos(c)) + Math.abs(b.width * Math.sin(c));
            return d;
        }
        bt() {
            let a = this.af.k();
            return a;
        }
        br() {
            let a = this.af.j();
            return a;
        }
        bs() {
            if (this.ad.g5 == null || (this.ad.be != null && this.ad.be.visibility == 1)) {
                return 0;
            }
            let a = this.br();
            let b = this.bt();
            let c = new Rect(0, 0, 0, b, a);
            let d = this.bq();
            let e = RectUtil.w(c, d);
            return e.height + this.af.v() + this.af.s();
        }
        bu() {
            if (this.ad.g5 == null || (this.ad.be != null && this.ad.be.visibility == 1)) {
                return 0;
            }
            let a = this.br();
            let b = this.bt();
            let c = new Rect(0, 0, 0, b, a);
            let d = this.bq();
            let e = RectUtil.w(c, d);
            return e.width + this.af.t() + this.af.u();
        }
        c6(a) {
            if (this.ad == null || this.ab.count == 0) {
                return a;
            }
            this.b5(a);
            this.b9();
            this.b4(a);
            this.a8 = this.a7();
            if (this.bb.count != this.a8.count) {
                return a;
            }
            let b = this.af.p();
            let c = this.af.r();
            let d = this.af.q();
            let e = this.af.o();
            if (this.av) {
                for (let f = 0; f < this.bb.count; f++) {
                    if (this.at(f, this.a8._inner[f])) {
                        this.af.aa(this.bb._inner[f], this.a8._inner[f], b, c, d, e);
                    }
                    this.cm(this.bb._inner[f], this.bl());
                }
            }
            for (let g = 0; g < this.bb.count; g++) {
                if (!this.av) {
                    this.af.ae(this.bb._inner[g]);
                }
                if (this.at(g, this.a8._inner[g])) {
                    this.af.aa(this.bb._inner[g], this.a8._inner[g], b, c, d, e);
                }
                else {
                    this.af.aa(this.bb._inner[g], new Rect(0, 0, 0, 0, 0), b, c, d, e);
                }
            }
            if (this.ad.bp.count > 0) {
                this.ad.a7.arrangeAnnotations(this.ad, this.af, this.bb, this.a8, this.av, this.bl(), b, c, d, e);
            }
            this.b2(a);
            if (this.aq() && this.am && this.ad != null && this.ad.bf != null && !this.ad.cq && this.ad.bf.ue && !this.ad.bf.ul && this.a8 != null && this.a8.count > 0) {
                let h = this.a8.count - 1;
                if (this.ad.bp.count > 0) {
                    h -= this.ad.bp.count;
                }
                if (h < 0) {
                    h = 0;
                }
                this.ad.bf.wz(this, this.c1, this.a8._inner[0], this.a8._inner[h]);
            }
            return a;
        }
        get am() {
            return this.ad.ay != null && (this.ad.ay.c != 5 && this.ad.ay.c != 4);
        }
        c0() {
            return Rect.empty;
        }
        b5(a) {
            if (this.ad.ir == null) {
                return;
            }
            this.af.ai(this.ad.ir, new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            let b = Math.abs(this.bq() - 0) > 1E-06;
            let c = this.c0();
            let d = c.left + (c.width / 2);
            let e = c.top + (c.height / 2);
            let f = this.bt() + this.af.t() + this.af.u();
            let g = this.br() + this.af.v() + this.af.s();
            let h = f / 2;
            let i = g / 2;
            let j = new Rect(0, d - h, e - i, f, g);
            if (b) {
                this.cn(this.ad.ir);
            }
            else {
                this.af.ae(this.ad.ir);
            }
            this.af.aa(this.ad.ir, j, this.af.t(), this.af.v(), this.af.u(), this.af.s());
            if ((this.ad.be == null || this.ad.be.visibility == 0) && (this.ad.ay == null || this.ad.ay.visibility == 0) && this.ad.g5 != null) {
                this.ad.ir._visibility = 0;
            }
            else {
                this.ad.ir._visibility = 1;
                this.af.aa(this.ad.ir, new Rect(0, 0, 0, 0, 0), 0, 0, 0, 0);
            }
        }
        b4(a) {
            this.af.ab(a);
        }
        b9() {
        }
        a2() {
            if (typeCast(CategoryAxisBase.$, this.ad) !== null) {
                return this.ad.kx;
            }
            if (typeCast(NumericAxisBase.$, this.ad) !== null) {
                let a = new List$1(Number_$type, 0);
                let d = this.ad.k3.j();
                for (let c = 0; c < d.length; c++) {
                    let b = d[c];
                    let e = this.ad.j7();
                    let f = new ScalerParams(0, this.ad.bh.tp, this.ad.kc, this.ad.ch, e);
                    a.add(this.ad.ei(b, f));
                }
                return a;
            }
            return null;
        }
        get ah() {
            let a = this.ag != null ? this.ag.c : this.ai();
            if (this.ad.ai == null) {
                if (a == 4) {
                    a = 5;
                }
                else if (a == 5) {
                    a = 4;
                }
                else if (a == 6) {
                    a = 7;
                }
                else if (a == 7) {
                    a = 6;
                }
            }
            return a;
        }
        cs(a, b, c, d, e, f) {
            let g = b;
            let h = b;
            if (f != null) {
                let i = f.c / 2;
                g -= i;
                h += i;
            }
            if (h >= e.left && g <= e.right) {
                if (f.a) {
                    b = this.ad.dz(b, e.left, e.right, f);
                }
                let j = new LineGeometry();
                j.d = { $type: Point_$type, x: b, y: c };
                j.c = { $type: Point_$type, x: b, y: d };
                a.add(j);
            }
        }
        cc(a, b, c, d, e, f) {
            if (b <= e.bottom && b >= e.top) {
                if (f.a) {
                    b = this.ad.dz(b, e.top, e.bottom, f);
                }
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: c, y: b };
                g.c = { $type: Point_$type, x: d, y: b };
                a.add(g);
            }
        }
        cm(a, b) {
            let c = this.bl();
            this.af.aj(a, c);
        }
        get_au() {
            return false;
        }
        get au() {
            return this.get_au();
        }
        ac(a, b) {
            let c = a.height;
            let d = a.width;
            let e = 0 + a.left;
            let f = (c / 2) + a.top;
            let g = new TransformGroup();
            let h = AngleSimplifier.a(b);
            let i = ((() => {
                let $ret = new RotateTransform();
                $ret.j = h;
                $ret.k = e;
                $ret.l = f;
                return $ret;
            })());
            let j = 0;
            let k = 0;
            if (h != 0 && h != 360) {
                if (h > 0 && h < 180) {
                    j = -Math.sin(MathUtil.o(h)) * (c / 2);
                }
                else {
                    i.k = d;
                    k = -d;
                    j = -Math.sin(MathUtil.o(h - 180)) * (c / 2);
                }
            }
            let l = ((() => {
                let $ret = new TranslateTransform();
                $ret.k = j;
                $ret.j = k;
                return $ret;
            })());
            g.j.add(i);
            g.j.add(l);
            let m = TransformMatrixHelpler.f(g);
            let n = RectUtil.n(a);
            let o = RectUtil.o(a);
            let p = RectUtil.k(a);
            let q = RectUtil.j(a);
            let r = TransformMatrixHelpler.i(m, n);
            let s = TransformMatrixHelpler.i(m, o);
            let t = TransformMatrixHelpler.i(m, p);
            let u = TransformMatrixHelpler.i(m, q);
            let v = new Array(4);
            v[0] = r;
            v[1] = s;
            v[2] = t;
            v[3] = u;
            return v;
        }
        cz(a, b) {
            let c = this.ac(a, b);
            let d = 1.7976931348623157E+308;
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = -1.7976931348623157E+308;
            for (let h = 0; h < c.length; h++) {
                d = c[h].x < d ? c[h].x : d;
                e = c[h].y < e ? c[h].y : e;
                f = c[h].x > f ? c[h].x : f;
                g = c[h].y > g ? c[h].y : g;
            }
            return new Rect(0, d, e, Math.max(f - d, 0), Math.max(g - e, 0));
        }
        cn(a) {
            let b = this.bq();
            this.cb(a, b);
        }
        cb(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = this.br();
            let e = this.bt();
            let f = 0.5 * e;
            let g = 0.5 * d;
            let h = ((() => {
                let $ret = new RotateTransform();
                $ret.j = b;
                $ret.k = f;
                $ret.l = g;
                return $ret;
            })());
            let i = new TransformGroup();
            i.j.add(h);
            c.j = i;
        }
        c8(a) {
            if ((this.ab.contains(this.ad.ir) == false) && this.ad.ir != null) {
                this.ab.add(this.ad.ir);
                AxisLabelManager.m(this.ad.ir, this.ad.be);
            }
            for (let b of fromEnum(this.ab)) {
                if (b != this.ad.ir && b != this.af.aw) {
                    this.af.ah(b);
                }
            }
            let c = (this.ad == null || this.bd <= 0 || isNaN_(this.bd)) ? 50 : this.bd;
            if (this.ad != null && (this.ad.dd == null || this.ad.dd.count == 0)) {
                if (this.ad.b7()) {
                    c = this.ad.eo();
                }
            }
            let d = this.aq();
            c = Math.min(c, d ? a.height : a.width);
            c = isInfinity(c) ? 50 : c;
            return d ? new Size(1, 50, c) : new Size(1, c, 50);
        }
        get bh() {
            return this.c(AxisLabelPanelBase.cu);
        }
        set bh(a) {
            this.h(AxisLabelPanelBase.cu, a);
        }
        aj(a) {
            if (a == null) {
                return this.ad.bh.ap(this.ad);
            }
            if (a.position == 0) {
                if (this.ad != null && this.ad.bh != null) {
                    return this.ad.bh.ap(this.ad);
                }
                return 4;
            }
            return a.position;
        }
        ai() {
            return 1;
        }
        ay(a) {
            return true;
        }
        *_a0() {
            for (let a of fromEnum(this.ab)) {
                if (a != this.ad.ir && a != this.af.aw) {
                    yield a;
                }
            }
        }
        a0() {
            return toEnum(() => this._a0());
        }
        b1(a, b, c, d, e) {
            let f = this.af.x(b, c, d, e);
            return f;
        }
        b7(a) {
            if (this.bz == null || this.bk(this.bz) < this.bk(a)) {
                this.bz = a;
            }
        }
        cg(a) {
            this.bb.add(a);
        }
        *_a1() {
            for (let a = 0; a < this.ad.bq.count; a++) {
                yield this.ad.bq.item(a);
            }
            for (let b = 0; b < this.ad.bp.count; b++) {
                yield this.ad.bp.item(b);
            }
        }
        a1() {
            return toEnum(() => this._a1());
        }
        ca() {
            this.af.ag();
            this.cr();
        }
        cr() {
            this.a8 = this.a7();
        }
        ce() {
        }
        bi(a) {
            return this.bd;
        }
        ci() {
            this.c2 = new Rect(0, 0, 0, this.c7.width, this.c7.height);
        }
        cq() {
            this.c2 = Rect.empty;
        }
        cf() {
            this.af.ak();
        }
        cj(a) {
            this.af.al(a);
        }
        b3() {
            this.af.y();
        }
        ck() {
            this.af.ao();
        }
    }
    AxisLabelPanelBase.$t = /*@__PURE__*/ markType(AxisLabelPanelBase, 'AxisLabelPanelBase', Panel.$);
    AxisLabelPanelBase.cu = /*@__PURE__*/ DependencyProperty.i("Extent", Number_$type, AxisLabelPanelBase.$, /*@__PURE__*/ new PropertyMetadata(2, 50, (a, b) => a.bd = b.newValue));
    return AxisLabelPanelBase;
})();
/**
 * @hidden
 */
export let CategoryAxisBase = /*@__PURE__*/ (() => {
    class CategoryAxisBase extends Axis {
        constructor() {
            super();
            this.kx = null;
            this.kp = null;
            this.lc = 0;
            this.le = 0;
            this.kn = 0;
            this.kz = 1;
            this.ld = 0;
            this.kr = false;
            this.kx = new List$1(Number_$type, 0);
        }
        a3() {
            return new CategoryAxisBaseView(this);
        }
        get_cc() {
            return false;
        }
        hr(a) {
            super.hr(a);
            this.km = a;
        }
        ef(a, b, c, d) {
            let e = this.getCategorySize(b, c, d);
            let f = e * a;
            return f;
        }
        c7(a, b, c) {
            let d = super.c7(a, b, c);
            if (!d) {
                return false;
            }
            return this.itemsSource != null && this.le > 0;
        }
        l0() {
            if (this.kq != null && this.bn != null && this.itemsSource != null) {
                this.kq = this.bn.releaseFastItemsSource(this.itemsSource);
            }
        }
        lz() {
            if (this.kq == null && this.bn != null && this.itemsSource != null) {
                this.kq = this.bn.getFastItemsSource(this.itemsSource);
            }
        }
        get_ca() {
            return true;
        }
        md(a, b, c) {
            if (this.b8) {
                return Rect.empty;
            }
            return this.me(a, b, c, this.co);
        }
        me(a, b, c, d) {
            let e = 0;
            let f = a.x;
            let g = this.kc.left;
            let h = this.kc.right;
            if (d) {
                f = a.y;
                g = this.kc.top;
                h = this.kc.bottom;
            }
            let i = this.kx;
            if ((d && !this.cg) || (!d && this.cg)) {
                i = new List$1(Number_$type, 0);
                for (let j = this.kx.count - 1; j >= 0; j--) {
                    i.add(this.kx._inner[j]);
                }
            }
            if (this.categoryMode == 0) {
                if (b) {
                    let k;
                    if (d) {
                        k = new Rect(0, this.kc.left, a.y - c / 2, this.kc.width, c);
                    }
                    else {
                        k = new Rect(0, a.x - c / 2, this.kc.top, c, this.kc.height);
                    }
                    k.intersect(this.kc);
                    return k;
                }
                else {
                    if (f > h) {
                        return Rect.empty;
                    }
                    if (f < g) {
                        return Rect.empty;
                    }
                    let l = 1.7976931348623157E+308;
                    let m = -1;
                    for (e = 0; e < i.count; e++) {
                        let n = Math.abs(i._inner[e] - f);
                        if (n < l) {
                            l = n;
                            m = e;
                        }
                    }
                    if (m == -1) {
                        return Rect.empty;
                    }
                    let o = i._inner[m];
                    let p;
                    if (d) {
                        p = new Rect(0, this.kc.left, o - c / 2, this.kc.width, c);
                    }
                    else {
                        p = new Rect(0, o - c / 2, this.kc.top, c, this.kc.height);
                    }
                    p.intersect(this.kc);
                    return p;
                }
            }
            else {
                for (e = 0; e < i.count; e++) {
                    if (i._inner[e] > f) {
                        break;
                    }
                }
                if (e == 0) {
                    return Rect.empty;
                }
                if (f > h) {
                    return Rect.empty;
                }
                if (f < g) {
                    return Rect.empty;
                }
                let q = this.kc.right;
                if (d) {
                    q = this.kc.bottom;
                }
                if (e < i.count) {
                    q = i._inner[e];
                }
                if (d) {
                    return new Rect(0, this.kc.left, i._inner[e - 1], this.kc.width, q - i._inner[e - 1]);
                }
                else {
                    return new Rect(0, i._inner[e - 1], this.kc.top, q - i._inner[e - 1], this.kc.height);
                }
            }
        }
        get itemsSource() {
            return this.c(CategoryAxisBase.l8);
        }
        set itemsSource(a) {
            this.h(CategoryAxisBase.l8, a);
        }
        get lf() {
            return this.lc;
        }
        set lf(a) {
            this.lc = a;
            this.le = this.lc;
        }
        get categoryMode() {
            return this.kn;
        }
        set categoryMode(a) {
            if (this.kn != a) {
                let b = this.kn;
                this.kn = a;
                this.h1("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, a));
            }
        }
        la(a, b, c) {
            let d = !isNaN_(this.k0) ? MathUtil.d(this.k0, 0, this.kz) : 0;
            if (!this.b8 && this.k8 > 0) {
                let e = this.getCategorySize(a, b, c);
                let f = 0.5 * d;
                let g = e * f;
                if (g < this.k8) {
                    g = this.k8;
                    f = g / e;
                    d = f / 0.5;
                    d = MathUtil.d(d, 0, this.kz);
                }
            }
            return d;
        }
        get lg() {
            return this.ld;
        }
        set lg(a) {
            if (a != this.ld) {
                let b = this.ld;
                this.ld = a;
                this.h1("GroupCount", b, this.ld);
            }
        }
        el(a, b) {
            return NaN;
        }
        getUnscaledValue3(a, b, c, d) {
            return NaN;
        }
        getCategorySize(a, b, c) {
            return NaN;
        }
        k3(a, b, c) {
            return NaN;
        }
        getGroupCenter(a, b, c, d) {
            return NaN;
        }
        lb(a) {
            let b = this.bh.tp;
            let c = this.kc;
            let d = this.j7();
            let e = new ScalerParams(0, b, c, this.cg, d);
            return this.el(a, e);
        }
        *_kw() {
            for (let a of fromEnum(this.dd)) {
                yield a;
            }
            if (this.bh != null && this.bh.em && this.kt(this.bh)) {
                for (let b of fromEnum(this.bh.fm())) {
                    if (b != this.bh) {
                        for (let c of fromEnum(b.series)) {
                            yield c;
                        }
                    }
                }
            }
        }
        kw() {
            return toEnum(() => this._kw());
        }
        ks(a) {
            return this.dd.contains(a);
        }
        kt(a) {
            return false;
        }
        *_kv() {
            let a = typeCast(XamDataChart.$, this.bh);
            if (a != null && a.em && this.kt(a)) {
                for (let b of fromEnum(a.fm())) {
                    if (b != this.bh) {
                        let c = typeCast(XamDataChart.$, b);
                        if (c != null) {
                            for (let d of fromEnum(c.axes)) {
                                if (typeCast(CategoryAxisBase.$, d) !== null) {
                                    yield typeCast(CategoryAxisBase.$, d);
                                }
                            }
                        }
                    }
                }
            }
        }
        kv() {
            return toEnum(() => this._kv());
        }
        l4(a) {
            if (this.kr) {
                return;
            }
            try {
                this.kr = true;
                let b = 0;
                let c = 0;
                let d = false;
                for (let e of fromEnum(this.kw())) {
                    if (!e.dh && !e.eb && !e.dq) {
                        continue;
                    }
                    let f = e;
                    let g = f.preferredCategoryMode(this);
                    if (g == 2) {
                        b = 2;
                        d = true;
                        if (this.ks(e)) {
                            c++;
                        }
                    }
                    if (g == 1 && !d) {
                        b = 1;
                    }
                }
                let h = this.ku;
                for (let i of fromEnum(this.kv())) {
                    if (i.ku) {
                        h = true;
                    }
                    if (a) {
                        i.l4(false);
                    }
                }
                if (b == 0 && h) {
                    b = 2;
                    if (c == 0) {
                        c = 1;
                    }
                }
                this.categoryMode = b;
                this.lg = c;
            }
            finally {
                this.kr = false;
            }
        }
        hv(a, b, c, d) {
            super.hv(a, b, c, d);
            switch (b) {
                case "FastItemsSourceProvider":
                    if ((typeCast(IFastItemsSourceProvider_$type, c)) != null) {
                        this.kq = c.releaseFastItemsSource(this.itemsSource);
                    }
                    if ((typeCast(IFastItemsSourceProvider_$type, d)) != null) {
                        this.kq = d.getFastItemsSource(this.itemsSource);
                    }
                    this.lf = 0;
                    if (this.kq != null) {
                        this.lf = this.kq.count;
                    }
                    this.l4(true);
                    break;
                case "ItemsSource":
                    if (this.bn != null) {
                        this.kq = this.bn.getFastItemsSource(this.itemsSource);
                    }
                    break;
                case CategoryAxisBase.$$p[0]:
                    let e = typeCast(IFastItemsSource_$type, c);
                    this.lr();
                    this.cp = true;
                    if (e != null) {
                        e.event = delegateRemove(e.event, runOn(this, this.lu));
                    }
                    this.lf = 0;
                    if (this.kq != null) {
                        this.lf = this.kq.count;
                    }
                    if (this.kq != null) {
                        let f = this.kq;
                        f.event = delegateCombine(f.event, runOn(this, this.lu));
                        this.h7(false);
                        for (let g of fromEnum(this.da())) {
                            g.ml(false);
                            if (g.cd != null) {
                                g.ls();
                            }
                        }
                        if (this.bh != null && this.bh.e0) {
                            this.bh.ok();
                        }
                    }
                    else {
                        this.hg();
                        for (let h of fromEnum(this.da())) {
                            h.k0(true, h.b0);
                            if (h.cd != null) {
                                h.ls();
                            }
                        }
                    }
                    break;
                case "ItemsCount":
                    this.h2(new AxisRangeChangedEventArgs(0, 0, 0, typeGetValue((c)) - 1, typeGetValue((d)) - 1));
                    this.h7(false);
                    break;
                case CategoryAxisBase.$$p[5]:
                    this.cp = true;
                    this.l5();
                    this.h7(false);
                    this.ls();
                    break;
                case "CategoryMode":
                    this.cp = true;
                    this.h7(false);
                    this.l2();
                    this.ls();
                    break;
                case CategoryAxisBase.$$p[4]:
                case CategoryAxisBase.$$p[3]:
                case CategoryAxisBase.$$p[2]:
                case CategoryAxisBase.$$p[1]:
                    this.kz = this.k7;
                    this.cp = true;
                    for (let i of fromEnum(this.da())) {
                        i.e1 = true;
                        let j = typeCast(IHasCategoryModePreference_$type, i);
                        if (j != null && j.preferredCategoryMode(this) == 2) {
                            i.ml(false);
                        }
                    }
                    this.h7(false);
                    if (this.bh != null) {
                        this.bh.mj();
                    }
                    break;
                case Axis.$$p[4]:
                case Axis.$$p[3]:
                    this.cp = true;
                    this.h7(true);
                    break;
            }
        }
        ls() {
            for (let a of fromEnum(this.da())) {
                a.ml(false);
            }
        }
        lu(a, b) {
            this.l1(b);
        }
        l1(a) {
            switch (a.action) {
                case 3:
                case 0:
                case 1:
                case 2:
                case 4:
                    if (this.kq != null) {
                        this.lf = this.kq.count;
                    }
                    this.h7(false);
                    break;
            }
            if (this.kq != null) {
                this.lf = this.kq.count;
            }
        }
        l5() {
            let a = false, b = false;
            for (let c of fromEnum(this.dd)) {
                let d = typeCast(IHasCategoryModePreference_$type, c);
                if (d == null) {
                    continue;
                }
                let e = d.preferredCategoryMode(this);
                a = a || e == 1;
                b = b || e == 2;
            }
            let f = b ? 2 : a ? 1 : 0;
            if (f == 0 && this.ku) {
                f = 1;
                if (this.lg == 0) {
                    this.lg = 1;
                }
            }
            this.categoryMode = f;
        }
        cs(a) {
            let b = super.cs(a);
            if (b) {
                this.l4(true);
                let c = typeCast(IHasCategoryModePreference_$type, a);
                if (c != null && c.preferredCategoryMode(this) == 2) {
                    for (let d of fromEnum(this.da())) {
                        let e = typeCast(IHasCategoryModePreference_$type, d);
                        if (e != null && e != c && e.preferredCategoryMode(this) == 2) {
                            d.ml(false);
                        }
                    }
                }
                this.h7(false);
                this.c0();
            }
            return b;
        }
        bz(a) {
            let b = super.bz(a);
            if (b) {
                this.l4(true);
                let c = typeCast(IHasCategoryModePreference_$type, a);
                if (c != null && c.preferredCategoryMode(this) != 0) {
                    for (let d of fromEnum(this.da())) {
                        let e = typeCast(IHasCategoryModePreference_$type, d);
                        if (e != null) {
                            d.ml(false);
                        }
                    }
                }
                this.h7(false);
            }
            return b;
        }
        l2() {
            let a = null;
            for (let b of fromEnum(this.da())) {
                if (b.dh) {
                    let c = b.an(this);
                    if (c != null && c.ai == this) {
                        a = c;
                    }
                }
            }
            if (a != null) {
                a.h6();
            }
        }
        lr() {
            this.kp = this.kq;
        }
        l3() {
            let a = this.ay;
            if (a == null) {
                a = new AxisLabelSettings();
            }
            if (a.visibility == 1) {
                this.bq.count = 0;
                this.bp.count = 0;
                this.bo.count = 0;
            }
            else {
                let b = 0;
                b = this.km.bi(this.db);
                this.bq.count = b;
            }
        }
        lt(a) {
            if (this.kq != null) {
                this.kq.handleCollectionChanged(a);
            }
        }
        ly(a, b, c) {
            this.lt(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        lv() {
            this.lt(new NotifyCollectionChangedEventArgs(0, 4));
        }
        lw(a, b) {
            this.lt(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        lx(a, b) {
            this.lt(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        k4(a, b, c, d) {
            return this.k5(a, b, c, d, this.categoryMode);
        }
        k5(a, b, c, d, e) {
            let f = 0;
            let g = e;
            if (g == 0 && this.categoryMode != 0) {
                g = 1;
            }
            switch (g) {
                case 0:
                    f = 0;
                    break;
                case 1:
                    f = 0.5 * this.getCategorySize(a, b, c);
                    break;
                case 2:
                    f = this.getGroupCenter(d, a, b, c);
                    break;
            }
            if (this.co != this.cg) {
                f *= -1;
            }
            return f;
        }
        getSeriesOffset(a, b, c, d, e) {
            return this.k5(a, b, c, d, e);
        }
        get isVertical() {
            return this.co;
        }
        j$c(a, b) {
            return this.el.apply(this, arguments);
        }
        j$b(a, b) {
            return this.ei.apply(this, arguments);
        }
        j$d(a, b, c, d, e) {
            this.hl.apply(this, arguments);
        }
        j$e(a, b, c, d) {
            this.hm.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.hn.apply(this, arguments);
        }
        get j$a() {
            return this.cg;
        }
    }
    CategoryAxisBase.$t = /*@__PURE__*/ markType(CategoryAxisBase, 'CategoryAxisBase', Axis.$, [ICategoryScaler_$type]);
    CategoryAxisBase.l8 = /*@__PURE__*/ DependencyProperty.i("ItemsSource", IEnumerable_$type, CategoryAxisBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(CategoryAxisBase.$, a);
        if (c.bn != null) {
            c.bn.releaseFastItemsSource(b.oldValue);
        }
        a.h1("ItemsSource", b.oldValue, b.newValue);
    }));
    CategoryAxisBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CategoryAxisBase, 'h1', ['FastItemsSource:kq:l6', [IFastItemsSource_$type], 'Gap:k0:l7', [1, 0.2], 'MaximumGap:k7:l9', [1, 1], 'MinimumGapSize:k8:ma', [1, 0], 'Overlap:k9:mb', [1, 0], 'UseClusteringMode:ku:mc', [0, false]]);
    return CategoryAxisBase;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanelBase = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanelBase extends AxisLabelPanelBase {
        constructor() {
            super(...arguments);
            this.dl = 0;
            this.di = 0;
            this.dk = 0;
            this.dj = 0;
        }
        ae() {
            return new HorizontalAxisLabelPanelBaseView(this);
        }
        ch(a) {
            super.ch(a);
            this.c9 = a;
        }
        b6() {
            this.c9.a1();
        }
        db() {
            return ((this.ag != null && this.ag.k()) || this.ad.b3) && this.bl() % 360 != 0;
        }
        dc() {
            return this.ao && !this.av;
        }
        aq() {
            return true;
        }
        a5() {
            let a = new List$1(Rect.$, 0);
            let b = new List$1(Boolean_$type, 0);
            this.aw = false;
            this.av = false;
            this.ax = false;
            let c = this.bl();
            let d = c * Math.PI / 180;
            if (this.db()) {
                this.av = true;
            }
            this.ao = false;
            this.dn(a, b, d);
            if (this.ad != null && this.ad.bh != null && (this.ad.bh.ez || this.ad.bh.ey) && a != null) {
                for (let e = 0; e < a.count; e++) {
                    let f = a._inner[e];
                    if (this.c3.isEmpty) {
                        this.c3 = f;
                    }
                    else {
                        if (this.c3.width < f.width) {
                            this.c3 = f;
                        }
                    }
                }
            }
            this.ao = this.ao || this.an(a, b);
            if (this.ao) {
                this.dq(a, b);
            }
            else {
                this.dr();
            }
            let g = this.ad.b7();
            if (!g) {
                this.dm(c);
            }
            else {
                this.af.ac();
            }
            if (this.av) {
                for (let h = 0; h < a.count; h++) {
                    let i = a._inner[h];
                    i.x = this.ba._inner[h].c;
                    a._inner[h] = i;
                }
            }
            let j = 0;
            if (this.dc()) {
                j = ((() => { let k = this.by(this.di, a, b); a = k.p1; return k.ret; })());
            }
            if (this.ao && !this.aw) {
                if (j > 0) {
                    if (this.c9.a0()) {
                        this.ax = true;
                    }
                }
            }
            if (this.ao && this.da()) {
                this.ar = true;
                let k = this.c1.width;
                let l = this.dg();
                let m = this.df();
                let n = this.ba.count > 1 ? this.ba._inner[1].c - this.ba._inner[0].c : k;
                let o = Math.abs(n * 0.8);
                let p = 0;
                let q = Math.abs(Math.atan(this.di / n) * 180 / Math.PI);
                let r = this.af.p();
                let s = this.af.q();
                for (let t = 0; t < a.count; t++) {
                    if (this.al) {
                        if (t > 0 && t < a.count - 1) {
                            let u = this.ba.count > 1 ? this.ba._inner[t].c - (a._inner[t - 1].x + a._inner[t - 1].width) : k;
                            let v = this.ba.count > 1 ? a._inner[t + 1].x - this.ba._inner[t].c : k;
                            o = Math.abs(Math.min(Math.abs(u * 2), Math.abs(v * 2)) * 0.8);
                        }
                        else {
                            if (t == 0) {
                                let w = this.ba.count > 1 ? a._inner[t + 1].x - this.ba._inner[t].c : k;
                                o = Math.abs((n * 2) * 0.8);
                            }
                            if (t == a.count - 1) {
                                let x = this.ba.count > 1 ? this.ba._inner[t].c - (a._inner[t - 1].x + a._inner[t - 1].width) : k;
                                o = Math.abs((x * 2) * 0.8);
                            }
                        }
                    }
                    let y = Math.min(a._inner[t].width, o);
                    p = this.av ? this.ba._inner[t].c : this.ba._inner[t].c - y / 2;
                    let z = AngleSimplifier.a(c);
                    let aa = (z >= q && z <= 180 - q) || (z >= 180 + q && z <= 360 - q);
                    let ab = a._inner[t];
                    if (this.av && aa) {
                        let ac = this.bv(this.bb._inner[t]);
                        o = Math.min(l / Math.abs(Math.sin(d)), ac);
                    }
                    ab.x = p;
                    ab.width = Math.min(o, ab.width);
                    a._inner[t] = ab;
                    if (!(typeCast(TextBlock.$, this.bb._inner[t]) !== null)) {
                        this.bb._inner[t].width = Math.min(o, ab.width);
                    }
                    let ad = typeCast(TextBlock.$, this.bb._inner[t]);
                    if (ad != null) {
                        let ae = this.b1(t, ad, o, r, s);
                        if (this.ax) {
                            ad.height = m;
                        }
                        else if (!Base.equalsStatic(ad.al, ae)) {
                            ad.al = ae;
                            this.bb._inner[t].width = Math.min(o, this.bk(this.bb._inner[t]));
                            this.dk = Math.min(this.dk, this.bb._inner[t].width);
                        }
                    }
                }
                if (!g) {
                    this.dm(c);
                }
            }
            if (this.dd()) {
                this.dp(a);
            }
            return a;
        }
        dn(a, b, c) {
            let d = this.bs();
            let e = this.dh();
            this.di = -1.7976931348623157E+308;
            this.dl = -1.7976931348623157E+308;
            this.dj = -1.7976931348623157E+308;
            this.dk = -1.7976931348623157E+308;
            let f = this.af.p();
            let g = this.af.q();
            let h = this.af.r();
            let i = this.af.o();
            let j = this.c1.top;
            let k = (this.c1.height - d);
            let l = false;
            for (let m = 0; m < this.bb.count; m++) {
                if (!this.ba._inner[m].a) {
                    l = true;
                }
            }
            for (let n = 0; n < this.bb.count; n++) {
                if (this.ba == null || n >= this.ba.count) {
                    break;
                }
                let o, p, q, r, s, t;
                let u = this.bb._inner[n];
                s = this.bk(u);
                t = this.bj(u);
                r = s + this.af.p() + this.af.q();
                q = t + h + i;
                let v = this.ba._inner[n].a;
                if (this.av) {
                    o = this.ba._inner[n].c;
                }
                else {
                    o = this.ba._inner[n].c - r / 2;
                }
                p = j + e;
                if (!v || !l) {
                    this.di = Math.max(q, this.di);
                    this.dl = Math.max(r, this.dl);
                    this.dj = Math.max(t, this.dj);
                    this.dk = Math.max(s, this.dk);
                }
                let w = new Rect(0, o, p, r, q);
                a.add(w);
                b.add(v);
                let x = r * Math.abs(Math.sin(c));
                this.ao = this.ao || x > k;
            }
            if (this.ad != null && this.ad.by) {
                let y = -1;
                for (let z = 0; z < this.bb.count; z++) {
                    let aa = this.bb._inner[z];
                    y = Math.max(aa.ah, y);
                }
                if (y >= 0 && !isNaN_(y)) {
                    for (let ab = 0; ab < this.bb.count; ab++) {
                        let ac = this.bb._inner[ab];
                        ac.ah = y;
                    }
                }
            }
        }
        dm(a) {
            let b = a * (Math.PI / 180);
            let c = Math.abs(this.dk * Math.sin(b)) + Math.abs(this.dj * Math.cos(b));
            c += this.af.r() + this.af.o();
            let d = this.bs();
            this.bh = (c) + (d) + this.ad.dy;
        }
        dp(a) {
            this.c9.a2(a);
        }
        dq(a, b) {
        }
        dr() {
        }
        get_au() {
            return true;
        }
        cm(a, b) {
            let c = a.l;
            let d = a.m;
            let e = 0;
            let f = c / 2;
            let g = new TransformGroup();
            let h = AngleSimplifier.a(this.bl());
            let i = ((() => {
                let $ret = new RotateTransform();
                $ret.j = h;
                $ret.k = e;
                $ret.l = f;
                return $ret;
            })());
            let j = 0;
            let k = 0;
            if (h != 0 && h != 360) {
                if (h > 0 && h < 180) {
                    j = -Math.sin(MathUtil.o(h)) * (c / 2);
                }
                else {
                    i.k = d;
                    k = -d;
                    j = -Math.sin(MathUtil.o(h - 180)) * (c / 2);
                }
            }
            let l = ((() => {
                let $ret = new TranslateTransform();
                $ret.k = j;
                $ret.j = k;
                return $ret;
            })());
            g.j.add(i);
            g.j.add(l);
            a.j = g;
        }
        dd() {
            return !this.aw && !this.av;
        }
        da() {
            if (this.ad != null && this.ad.bh != null && this.ad.bh.e0) {
                return false;
            }
            return true;
        }
        by(a, b, c) {
            let d = 0;
            let e = new List$1(Rect.$, 0);
            let f = this.dh() + this.c1.top;
            let g = this.dg();
            let h = f + g;
            if (a * 3 <= this.bd) {
                d = 3;
            }
            else if (a * 2 <= this.bd) {
                d = 2;
            }
            else {
                return {
                    ret: d,
                    p1: b
                };
            }
            let i = 0;
            for (let j = 0; j < b.count; j++) {
                let k = RectUtil.p(b._inner[j]);
                if (!c._inner[j]) {
                    if (i % d == 0) {
                        k.y = f;
                    }
                    else if (i % d == d - 1) {
                        k.y = h - k.height;
                    }
                    else {
                        k.y = (f + (g / 2)) - k.height / 2;
                    }
                    i++;
                }
                e.add(k);
            }
            this.ao = this.an(e, c);
            if (!this.ao) {
                this.aw = true;
                b = e;
            }
            return {
                ret: d,
                p1: b
            };
        }
        c0() {
            let a = this.aj(this.ad.be);
            let b = this.bs();
            let c = this.ah;
            let d = 0;
            if (a == 3) {
                d += this.c1.top;
                if (c == 1 || c == 5) {
                    d += this.ad.dy;
                }
            }
            else {
                d = this.c1.bottom - b;
                if (c == 4 || c == 0) {
                    d -= this.ad.dy;
                }
            }
            let e = this.bu();
            let f = 0;
            let g = this.ad.be == null ? 1 : this.ad.be.horizontalAlignment;
            if (g == 0) {
                f = this.c1.left;
            }
            else if (g == 2) {
                f = this.c1.right - e;
            }
            else {
                f = (this.c1.left + (this.c1.width / 2)) - (e / 2);
            }
            return new Rect(0, f, d, e, b);
        }
        dh() {
            let a = 0;
            let b = this.aj(this.ad.be);
            if (b == 3) {
                a += this.bs();
            }
            let c = this.ah;
            if (c == 1 || c == 5) {
                a += this.ad.dy;
            }
            return a;
        }
        de() {
            let a = 0;
            let b = this.aj(this.ad.be);
            if (b == 4) {
                a += this.bs();
            }
            let c = this.ah;
            if (c == 0 || c == 4) {
                a += this.ad.dy;
            }
            return a;
        }
        dg() {
            let a = (this.bd - this.dh()) - this.de();
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        df() {
            let a = ((this.dg() - this.af.r()) - this.af.o());
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        b9() {
            let a = this.af.au();
            this.ad.hh(a);
            if (this.ag != null && this.ag.visibility != 0) {
                return;
            }
            let b = this.ad.dy;
            if (b == 0) {
                return;
            }
            let c = this.a2();
            if (c == null) {
                return;
            }
            let d = this.c1.top;
            let e;
            let f = this.ah;
            if (f == 0 || f == 4) {
                d = this.c1.bottom;
                e = d - this.ad.dy;
            }
            else {
                e = d + this.ad.dy;
            }
            let g = this.af.b();
            for (let h of fromEnum(c)) {
                this.cs(a, h, d, e, this.c4, g);
            }
            if (!this.ab.contains(this.af.aw)) {
                this.ab.add(this.af.aw);
            }
        }
        a6(a) {
            if (this.ad.ct || this.ad.cv) {
                let b = this.af.p();
                let c = this.af.r();
                let d = this.af.q();
                let e = this.af.o();
                let f = Math.max(b, Math.max(c, Math.max(d, e)));
                let g = new Thickness(0, f);
                if (this.av) {
                    g = new Thickness(0, Math.sqrt((f * f) / 2));
                }
                let h = this.a4(a);
                let i = new List$1(Thickness.$, 0);
                if (h.count < 1) {
                    return a;
                }
                h.aa((j, k) => {
                    let l = this.cy(j, a._inner[j], g);
                    let m = this.cy(k, a._inner[k], g);
                    let n = l.left;
                    let o = m.left;
                    if (n < o) {
                        return -1;
                    }
                    if (n > o) {
                        return 1;
                    }
                    return 0;
                });
                for (let j = 0; j < h.count; j++) {
                    let k = h._inner[j];
                    let l = a._inner[k];
                    let m = this.cy(k, a._inner[k], g);
                    let n = this.ad.bh.to.left;
                    if (this.ad.cv) {
                        if (l.left < (this.ad.bh.to.left - n)) {
                            l = new Rect(0, l.left + ((this.ad.bh.to.left - n) - l.left), l.top, l.width, l.height);
                            a._inner[k] = l;
                        }
                    }
                }
                let o = this.as(a, h, g);
                if (o && (this.ad.ct)) {
                    for (let p = 0; p < h.count - 1; p++) {
                        let q = h._inner[p];
                        let r = h._inner[p + 1];
                        let s = a._inner[q];
                        let t = a._inner[r];
                        let u = this.cy(q, a._inner[q], g);
                        let v = this.cy(r, a._inner[r], g);
                        if (u.intersectsWith(v) || u.left > v.right) {
                            let w = new Rect(0, u.right + 1 + (t.left - v.left), t.top, t.width, t.height);
                            a._inner[r] = w;
                        }
                    }
                }
                for (let x = h.count - 1; x >= 0; x--) {
                    let y = h._inner[x];
                    let z = a._inner[y];
                    let aa = this.cy(y, a._inner[y], g);
                    let ab = this.ad.bh.cu.a5;
                    if (this.ad.cv) {
                        if (aa.right > this.ad.bh.to.right + ab) {
                            z = new Rect(0, z.left - (aa.right - (this.ad.bh.to.right + ab)), z.top, z.width, z.height);
                            a._inner[y] = z;
                        }
                    }
                }
                if (this.ad.ct) {
                    for (let ac = h.count - 1; ac >= 1; ac--) {
                        let ad = h._inner[ac];
                        let ae = h._inner[ac - 1];
                        let af = a._inner[ad];
                        let ag = a._inner[ae];
                        let ah = this.cy(ad, a._inner[ad], g);
                        let ai = this.cy(ae, a._inner[ae], g);
                        if (ah.intersectsWith(ai) || ah.left < ai.right) {
                            let aj = new Rect(0, ah.left - (ai.width + 1) + (ag.left - ai.left), ag.top, ag.width, ag.height);
                            a._inner[ae] = aj;
                        }
                    }
                }
                return a;
            }
            else {
                return a;
            }
        }
    }
    HorizontalAxisLabelPanelBase.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanelBase, 'HorizontalAxisLabelPanelBase', AxisLabelPanelBase.$);
    return HorizontalAxisLabelPanelBase;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanel = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanel extends HorizontalAxisLabelPanelBase {
        ai() {
            return 1;
        }
        ay(a) {
            return a == 5 || a == 4 || a == 1 || a == 0;
        }
    }
    HorizontalAxisLabelPanel.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanel, 'HorizontalAxisLabelPanel', HorizontalAxisLabelPanelBase.$);
    return HorizontalAxisLabelPanel;
})();
/**
 * @hidden
 */
export let NumericAxisBase = /*@__PURE__*/ (() => {
    class NumericAxisBase extends Axis {
        constructor() {
            super();
            this.kr = 0;
            this.ln = 0;
            this.l1 = 0;
            this.lq = 0;
            this.lm = 0;
            this.l0 = 0;
            this.lp = 0;
            this.ll = 0;
            this.lo = 0;
            this.k6 = false;
            this.k7 = false;
            this.l8 = 0;
            this.ky = null;
            this.li = false;
            this.lj = false;
            this.kn = null;
            this.kp = null;
            this.ls = -1;
            this.lr = -1;
            this.lf = false;
            this.k2 = null;
            this.k5 = false;
            this.l8 = 10;
        }
        a3() {
            return new NumericAxisBaseView(this);
        }
        hr(a) {
            super.hr(a);
            this.kv = a;
        }
        d0(a, b) {
            let c = a < this.lv ? this.lv : a;
            c = a > this.lu ? this.lu : c;
            return c;
        }
        get_ci() {
            return true;
        }
        get ks() {
            return EnumUtil.getEnumValue(AxisRangeBufferMode_$type, this.c(NumericAxisBase.nc));
        }
        set ks(a) {
            this.h(NumericAxisBase.nc, enumGetBox(AxisRangeBufferMode_$type, a));
        }
        get kt() {
            return this.kr;
        }
        set kt(a) {
            this.kr = a;
        }
        get lv() {
            return this.ln;
        }
        set lv(a) {
            if (this.lv != a) {
                let b = this.ln;
                this.ln = a;
                this.l1 = Math.log(this.lv);
                this.h1("ActualMinimumValue", b, this.lv);
            }
        }
        f1() {
            return this.l3;
        }
        get ly() {
            return this.lq;
        }
        set ly(a) {
            if (this.ly != a) {
                let b = this.lq;
                this.lq = a;
                this.h1("ActualVisibleMinimumValue", b, this.ly);
            }
        }
        get lu() {
            return this.lm;
        }
        set lu(a) {
            if (this.lu != a) {
                let b = this.lm;
                this.lm = a;
                this.l0 = Math.log(this.lu);
                this.h1("ActualMaximumValue", b, this.lu);
            }
        }
        f0() {
            return this.lu;
        }
        get lx() {
            return this.lp;
        }
        set lx(a) {
            if (this.lx != a) {
                let b = this.lp;
                this.lp = a;
                this.h1("ActualVisibleMaximumValue", b, this.lx);
            }
        }
        get lt() {
            return this.ll;
        }
        set lt(a) {
            if (this.lt != a) {
                let b = this.ll;
                this.ll = a;
                this.h1("ActualInterval", b, this.lt);
            }
        }
        eu() {
            return this.lt;
        }
        get lw() {
            return this.lo;
        }
        set lw(a) {
            if (this.lw != a) {
                let b = this.lo;
                this.lo = a;
                this.h1("ActualMinorInterval", b, this.lw);
            }
        }
        get k9() {
            return this.k6;
        }
        set k9(a) {
            if (this.k9 != a) {
                let b = this.k6;
                if (b != a) {
                    this.k6 = a;
                    this.h1("ActualIsLogarithmic", b, this.k9);
                }
            }
        }
        get la() {
            return this.k7;
        }
        set la(a) {
            this.k7 = a;
        }
        get lh() {
            return this.k9 && this.lv > 0 && this.l8 > 1;
        }
        h8(a) {
            super.h8(a);
            if (this.lh && this.bh != null) {
                let b = this.j7();
                let c = this.j6();
                let d = this.kz(this.kc, this.bh.s9, b, c);
                if (d == null) {
                    return;
                }
                for (let e = 0; e < d.k.count; e++) {
                    let f = this.l7;
                    let g = d.k._inner[e];
                    let h = Math.min(g.d, g.c);
                    let i = Math.max(g.d, g.c);
                    let j = Math.floor(logBase(h, f));
                    let k = Math.ceil(logBase(i, f));
                    if (k - j < 2) {
                        if (typeCast(LogarithmicTickmarkValues.$, this.k2) !== null) {
                            this.k2 = new LinearTickmarkValues();
                        }
                    }
                    else {
                        this.k2 = this.k4 != null ? this.k4 : ((() => {
                            let $ret = new LogarithmicTickmarkValues();
                            $ret.x = f;
                            return $ret;
                        })());
                    }
                }
            }
        }
        h0(a) {
            super.h0(a);
            this.l3 = a;
        }
        hz(a) {
            super.h0(a);
            this.l2 = a;
        }
        hv(a, b, c, d) {
            super.hv(a, b, c, d);
            switch (b) {
                case NumericAxisBase.$$p[0]:
                case NumericAxisBase.$$p[1]:
                    if (this.l9 != null) {
                        this.kn = new BindingFormatter();
                        this.kn.j = this.l9;
                        this.kn.d = this.km;
                    }
                    else {
                        this.kn = null;
                    }
                    break;
                case "AutoRangeBufferMode":
                    this.kt = this.ks;
                    this.c0();
                    this.h7(false);
                    break;
                case NumericAxisBase.$$p[8]:
                    this.c0();
                    this.h7(false);
                    break;
                case NumericAxisBase.$$p[7]:
                    this.c0();
                    this.h7(false);
                    break;
                case NumericAxisBase.$$p[2]:
                    this.la = this.lb;
                    this.c0();
                    this.h7(false);
                    break;
                case NumericAxisBase.$$p[5]:
                    this.li = true;
                    this.k9 = this.lg;
                    break;
                case Axis.$$p[4]:
                case Axis.$$p[3]:
                case NumericAxisBase.$$p[4]:
                case NumericAxisBase.$$p[9]:
                    this.cp = true;
                    this.h7(false);
                    break;
                case NumericAxisBase.$$p[6]:
                    this.li = true;
                    this.l8 = this.l7;
                    if (this.k9) {
                        this.c0();
                        this.mz();
                        this.h7(false);
                    }
                    break;
                case NumericAxisBase.$$p[10]:
                    let e = new AxisRangeChangedEventArgs(0, this.lv, this.lv, this.lu, this.lu);
                    this.h2(e);
                    this.cp = true;
                    this.h7(false);
                    break;
                case Axis.$$p[13]:
                    this.ky = this.kw();
                    this.cp = true;
                    this.h7(false);
                    break;
                case "TickmarkValues":
                    this.m1();
                    break;
                case "ActualIsLogarithmic":
                    this.c0();
                    this.mz();
                    this.cp = true;
                    this.m1();
                    this.h7(false);
                    break;
                case "ActualTickmarkValues":
                    this.cp = true;
                    this.h7(false);
                    break;
                case "AbbreviateLargeNumbers":
                    this.h7(false);
                    break;
            }
        }
        mz() {
            for (let a of fromEnum(this.da())) {
                a.ml(false);
            }
        }
        kq() {
            let a = new AxisRange(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
            let b = false;
            if (this.bh != null) {
                for (let c of fromEnum(this.da())) {
                    let d = c.ap(this);
                    if (d != null) {
                        b = true;
                        a = new AxisRange(Math.min(a.c, d.c), Math.max(a.b, d.b));
                    }
                }
            }
            if (b) {
                if (this.ls >= 0) {
                    a = new AxisRange(a.c - this.ls, a.b);
                }
                if (this.lr >= 0) {
                    a = new AxisRange(a.c, a.b + this.lr);
                }
                this.kp = a;
                return a;
            }
            this.kp = null;
            return null;
        }
        lk(a) {
            if (a == 1 || a == 2 || a == 3) {
                let b = this.kp;
                if (b == null) {
                    b = this.kq();
                }
                if (b == null) {
                    return false;
                }
                if (this.bh == null || this.bh.to.isEmpty) {
                    return false;
                }
                let c = -1;
                let d = -1;
                for (let e of fromEnum(this.da())) {
                    let f = e.ao(b, this, new Rect(0, 0, 0, 1, 1));
                    if (f.c != b.c) {
                        if (a == 1 || a == 2) {
                            c = Math.max(c, b.c - f.c);
                        }
                    }
                    if (f.b != b.b) {
                        if (a == 1 || a == 3) {
                            d = Math.max(d, f.b - b.b);
                        }
                    }
                }
                if (c >= 0 || d >= 0) {
                    this.ls = c;
                    this.lr = d;
                    return true;
                }
                return false;
            }
            return false;
        }
        ku() {
            if (this.kt == 0) {
                if (this.bh != null) {
                    if (this.co) {
                        if (this.bh.bz == 2) {
                            return 1;
                        }
                        if (this.ch) {
                            if (this.bh.bz == 4) {
                                return 3;
                            }
                            if (this.bh.bz == 3) {
                                return 2;
                            }
                        }
                        else {
                            if (this.bh.bz == 4) {
                                return 2;
                            }
                            if (this.bh.bz == 3) {
                                return 3;
                            }
                        }
                    }
                    else {
                        if (this.bh.bx == 2) {
                            return 1;
                        }
                        if (this.ch) {
                            if (this.bh.bx == 4) {
                                return 3;
                            }
                            if (this.bh.bx == 3) {
                                return 2;
                            }
                        }
                        else {
                            if (this.bh.bx == 4) {
                                return 2;
                            }
                            if (this.bh.bx == 3) {
                                return 3;
                            }
                        }
                    }
                }
                return 4;
            }
            else {
                return this.kt;
            }
        }
        mw(a, b, c, d, e, f, g) {
            let h = AutoRangeCalculator.a(a, b, c, d, e, f, g);
            f = h.p5;
            g = h.p6;
            return {
                p5: f,
                p6: g
            };
        }
        c2() {
            let a = this.k9 && !isNaN_(this.l7) && !isInfinity(this.l7) && this.l7 > 1;
            let b;
            let c;
            let d = this.ku();
            let e = false;
            if (!this.kc.isEmpty && d != 4) {
                if (this.ls == -1 && this.lr == -1) {
                    e = true;
                }
            }
            let f = this.mw(this, this.l3, this.l2, a, this.l7, b, c);
            b = f.p5;
            c = f.p6;
            if (b != this.lv || c != this.lu || this.li || e) {
                this.li = false;
                let g = new AxisRangeChangedEventArgs(0, this.lv, b, this.lu, c);
                this.lv = b;
                this.lu = c;
                if (!this.kc.isEmpty && d != 4) {
                    if (this.lk(d)) {
                        let h = this.mw(this, this.l3, this.l2, a, this.l7, b, c);
                        b = h.p5;
                        c = h.p6;
                        g = new AxisRangeChangedEventArgs(0, g.oldMinimumValue, b, g.oldMaximumValue, c);
                        this.lv = b;
                        this.lu = c;
                    }
                }
                this.h2(g);
                this.m0(g);
                this.h7(true);
                return true;
            }
            return false;
        }
        mx() {
            this.ls = -1;
            this.lr = -1;
        }
        m0(a) {
        }
        cs(a) {
            let b = super.cs(a);
            if (b) {
                this.c0();
            }
            return b;
        }
        bz(a) {
            let b = super.bz(a);
            if (b) {
                this.c0();
            }
            return b;
        }
        kx(a) {
            return new NumericAxisRenderer(a);
        }
        kw() {
            let a = ((() => {
                let $ret = new AxisLabelManager();
                $ret.a = this;
                $ret.f = this.dc;
                $ret.e = this.db;
                $ret.b = this.av;
                return $ret;
            })());
            if (this.ay != null) {
                this.ay.registerAxis(this);
            }
            let b = this.kx(a);
            b.u = () => {
                let c = this.a4.a1();
                let d = this.a4.a4();
                let e = this.a4.a2();
                let f = this.a4.a3();
                this.ik();
                this.hh(c);
                this.hh(d);
                this.hh(e);
                this.hh(f);
            };
            b.o = (c, d) => !d.isEmpty && !c.isEmpty;
            b.d = (c, d, e, f) => this.kz(c, d, e, f);
            b.g = (c, d) => {
                this.lf = d;
                let e = this.fy(c);
                this.lf = false;
                return e;
            };
            return b;
        }
        k0() {
            return new NumericAxisRenderingParameters();
        }
        my() {
        }
        k1() {
            return null;
        }
        kz(a, b, c, d) {
            let e = this.k0();
            let f = this.a4.a1();
            let g = this.a4.a4();
            let h = this.a4.a2();
            let i = this.a4.a3();
            let j = this.a4.e();
            let k = this.a4.f();
            let l = this.a4.g();
            e.t = f;
            e.w = g;
            e.u = h;
            e.v = i;
            e.a = j;
            e.c = k;
            e.d = l;
            e.l = this.lu;
            e.m = this.lv;
            e.h = this.ld;
            e.f = this.k3;
            e.z = a;
            e.y = c;
            e.x = d;
            e.aa = b;
            e.o = this.ex();
            e.g = this.lc();
            e.p = this.lz;
            e.q = this.l4;
            e.s = this.fz;
            if (this.fz == null && (this.at != null || this.ah != null || this.kv.l())) {
                e.s = "Format";
            }
            e.j = this.cx;
            e.ab = this.k8;
            return e;
        }
        l6(a) {
            let b = this.j7();
            let c = new ScalerParams(0, this.bh.s9, this.kc, this.cg, b);
            return this.el(a, c);
        }
        lc() {
            return !isNaN_(this.lz);
        }
        get le() {
            return !isNaN_(this.l3);
        }
        get ld() {
            return !isNaN_(this.l2);
        }
        m1() {
            if (this.k4 != null) {
                this.k3 = this.k4;
            }
            else if (this.k9) {
                this.k3 = new LogarithmicTickmarkValues();
                this.kv.bi();
            }
            else {
                this.k3 = new LinearTickmarkValues();
            }
        }
        get k4() {
            return typeCast(TickmarkValues.$, this.c(NumericAxisBase.ne));
        }
        set k4(a) {
            this.h(NumericAxisBase.ne, a);
        }
        get k3() {
            if (this.k2 == null) {
                this.m1();
            }
            return this.k2;
        }
        set k3(a) {
            let b = this.k2;
            let c = b != a;
            if (c) {
                this.k2 = a;
                this.h1("ActualTickmarkValues", b, a);
            }
        }
        get k8() {
            return this.k5;
        }
        set k8(a) {
            let b = this.k8;
            if (a != b) {
                this.k5 = a;
                this.h1("AbbreviateLargeNumbers", b, this.k8);
            }
        }
    }
    NumericAxisBase.$t = /*@__PURE__*/ markType(NumericAxisBase, 'NumericAxisBase', Axis.$);
    NumericAxisBase.nc = /*@__PURE__*/ DependencyProperty.i("AutoRangeBufferMode", AxisRangeBufferMode_$type, NumericAxisBase.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(AxisRangeBufferMode_$type, 0), (a, b) => a.h1("AutoRangeBufferMode", b.oldValue, b.newValue)));
    NumericAxisBase.ne = /*@__PURE__*/ DependencyProperty.i("TickmarkValues", TickmarkValues.$, NumericAxisBase.$, /*@__PURE__*/ new PropertyMetadata(1, (a, b) => a.h1("TickmarkValues", b.oldValue, b.newValue)));
    NumericAxisBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericAxisBase, 'h1', ['AbbreviatedLabelFormat:l9:m2', [2, null], 'AbbreviatedLabelFormatSpecifiers:km:m3', [Array_$type, null], 'FavorLabellingScaleEnd:lb:m4', [0, false], 'FormatAbbreviatedLabel:ko:m5', [Delegate_$type], 'Interval:lz:m6', [1, NaN], 'IsLogarithmic:lg:m7', [0, false], 'LogarithmBase:l7:m8', [1, 10], 'MaximumValue:l2:m9', [1, NaN], 'MinimumValue:l3:na', [1, NaN], 'MinorInterval:l4:nb', [1, NaN], 'ReferenceValue:l5:nd', [1, 0]]);
    return NumericAxisBase;
})();
/**
 * @hidden
 */
export let NumericScaler = /*@__PURE__*/ (() => {
    class NumericScaler extends DependencyObject {
        constructor() {
            super(...arguments);
            this.o = 0;
            this.n = 0;
            this.m = 0;
        }
        y(a) {
            this.l = a;
        }
        x(a) {
            this.k = a;
        }
        w(a, b, c) {
            switch (a) {
                case NumericScaler.$$p[1]:
                    this.o = this.l;
                    this.z();
                    break;
                case NumericScaler.$$p[0]:
                    this.n = this.k;
                    this.z();
                    break;
            }
        }
        z() {
            if (isNaN_(this.l) || isNaN_(this.k) || isInfinity(this.l) || isInfinity(this.k) || this.l < (-7.9228162514264338E+28) || this.k > (7.9228162514264338E+28)) {
                this.m = this.k - this.l;
            }
            else {
                this.m = this.k - this.l;
            }
        }
        j(a, b, c, d) {
            let e = new List$1(Number_$type, 2, a.count);
            for (let f = b; f < c; f++) {
                e.add(this.q(a.item(f), d));
            }
            return e;
        }
        v(a, b, c, d) {
            for (let e = b; e < c; e++) {
                a.item(e, this.p(a.item(e), d));
            }
        }
        u(a, b, c, d, e) {
            for (let f = 0; f < b.count; f++) {
                let g = b.item(f);
                for (let h = c; h < d; h++) {
                    a.item(h)[g] = this.p(a.item(h)[g], e);
                }
            }
        }
    }
    NumericScaler.$t = /*@__PURE__*/ markType(NumericScaler, 'NumericScaler', DependencyObject.$);
    NumericScaler.ac = /*@__PURE__*/ new Rect(0, 0, 0, 1, 1);
    NumericScaler.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, NumericScaler, 'w', ['ActualMaximumValue:k:aa', [1, NaN], 'ActualMinimumValue:l:ab', [1, NaN]]);
    return NumericScaler;
})();
/**
 * @hidden
 */
export let AxisRendererBase = /*@__PURE__*/ (() => {
    class AxisRendererBase extends Base {
        constructor(a) {
            super();
            this.u = null;
            this.o = null;
            this.v = null;
            this.m = null;
            this.l = null;
            this.k = null;
            this.q = null;
            this.n = null;
            this.j = null;
            this.e = null;
            this.p = null;
            this.h = null;
            this.t = null;
            this.b = null;
            this.g = null;
            this.d = null;
            this.r = null;
            this.a = null;
            this.f = null;
            this.i = null;
            this.u = () => {
            };
            this.o = (b, c) => false;
            this.v = () => {
            };
            this.m = (b, c) => c;
            this.l = (b, c, d, e) => {
            };
            this.k = (b, c, d) => {
            };
            this.q = (b, c) => false;
            this.n = (b, c) => this.q(b, c);
            this.j = (b) => {
            };
            this.e = (b) => {
            };
            this.p = (b, c, d) => false;
            this.h = (b, c) => new LabelPosition(c);
            this.t = (b, c) => c;
            this.g = (b, c) => null;
            this.r = (b, c, d, e) => c;
            this.a = (b, c, d, e) => c;
            this.b = a;
            this.d = (b, c, d, e) => null;
        }
        c(a, b, c, d, e) {
            this.x(c, b);
            if (this.o(b, c)) {
                this.v();
                let f = this.d(b, c, d, e);
                this.x(c, b);
                if (f == null) {
                    this.aa();
                    return null;
                }
                if (f.k.count > 1 && !f.g) {
                    this.ab(f);
                }
                for (let g of fromEnum(f.k)) {
                    f.e = g;
                    if (isNaN_(g.c) || isInfinity(g.c) || isNaN_(g.d) || isInfinity(g.d)) {
                        continue;
                    }
                    if (g.d == g.c) {
                        continue;
                    }
                    this.e(f);
                    this.b.o(f.r);
                    let h = 0;
                    let i = 0;
                    let j = false;
                    let k = (l) => l;
                    if (this.f != null) {
                        k = this.i;
                    }
                    if (typeCast(CategoryAxisRenderingParameters.$, f) !== null) {
                        h = f.ab;
                        i = f.af;
                        j = f.ac;
                    }
                    f.f = this.s(f);
                    f.f.s(((() => {
                        let $ret = new TickmarkValuesInitializationParameters();
                        $ret.n = f.e.d;
                        $ret.m = f.e.c;
                        $ret.g = f.m;
                        $ret.f = f.l;
                        $ret.k = f.e.b;
                        $ret.d = f.g;
                        $ret.l = f.p;
                        $ret.j = f.q;
                        $ret.h = f.o;
                        $ret.i = f.e.a;
                        $ret.p = f.e.e;
                        $ret.a = h;
                        $ret.q = i;
                        $ret.s = f.aa;
                        $ret.r = f.z;
                        $ret.e = j;
                        $ret.c = k;
                        return $ret;
                    })()));
                    this.y(f);
                }
                this.z();
                return f;
            }
            return null;
        }
        aa() {
            this.b.q();
        }
        ab(a) {
            let b = -1.7976931348623157E+308;
            let c = -2147483648;
            let d = 0;
            let e = 0;
            let f = false;
            let g = (h) => h;
            if (this.f != null) {
                g = this.i;
            }
            if (typeCast(CategoryAxisRenderingParameters.$, a) !== null) {
                d = a.ab;
                e = a.af;
                f = a.ac;
            }
            for (let h of fromEnum(a.k)) {
                a.e = h;
                a.f.s(((() => {
                    let $ret = new TickmarkValuesInitializationParameters();
                    $ret.n = h.d;
                    $ret.m = h.c;
                    $ret.g = a.m;
                    $ret.f = a.l;
                    $ret.k = h.b;
                    $ret.d = a.g;
                    $ret.l = a.p;
                    $ret.i = h.a;
                    $ret.p = h.e;
                    $ret.h = a.o;
                    $ret.j = a.q;
                    $ret.a = d;
                    $ret.q = e;
                    $ret.s = a.aa;
                    $ret.r = a.z;
                    $ret.e = f;
                    $ret.c = g;
                    return $ret;
                })()));
                h.a = a.f.m;
                h.e = a.f.r;
                if (!isNaN_(a.f.m)) {
                    b = Math.max(b, a.f.m);
                    c = Math.max(c, a.f.r);
                }
            }
            for (let i of fromEnum(a.k)) {
                if (i.a == b) {
                    i.a = -1;
                    i.e = -1;
                }
                else {
                    i.a = b;
                    i.e = c;
                }
            }
        }
        x(a, b) {
            this.u();
            this.b.n(a, b);
            this.b.t();
        }
        z() {
            this.b.t();
            let a = false;
            if (this.b.d) {
                this.b.s(0);
            }
            else {
                let b = 0;
                for (let c of fromEnum(this.b.e)) {
                    let d = typeCast(FrameworkElement.$, c);
                    if (d == null) {
                        d = this.b.u(b);
                        let e = d.al;
                        let f = c.toString();
                        let g = 0;
                        let h = 0;
                        if (e != null) {
                            g = e.length;
                        }
                        if (f != null) {
                            h = f.length;
                        }
                        if (g != h) {
                            a = true;
                        }
                        d.al = f;
                        b++;
                    }
                    else {
                        this.b.h(d);
                    }
                }
                if (a) {
                    this.b.p();
                }
                this.b.g();
                this.b.s(b);
            }
        }
        s(a) {
            return a.f;
        }
        y(a) {
            let b = a.f.j();
            let c = a.f.k();
            this.b.r(this.m(a, a.f.m));
            this.j(a);
            for (let d = 0; d < b.length; d++) {
                let e = a.f.p + d;
                let f = b[d];
                let g = f;
                let h = 0;
                if (d < b.length - 1) {
                    h = b[d + 1];
                }
                else {
                    h = Number.POSITIVE_INFINITY;
                }
                g = this.r(a, g, e, a.f.m);
                h = this.r(a, h, e, a.f.m);
                let i = this.m(a, g);
                let j = this.m(a, h);
                if (this.q(a, i)) {
                    if (e % 2 == 0 && this.n(a, j) && !isInfinity(j)) {
                        this.l(a, a.w, i, j);
                    }
                    a.b = a.c;
                    this.k(a, a.u, i);
                    a.b = null;
                }
                i = this.a(a, i, e, a.f.m);
                if (!isNaN_(i) && !isInfinity(i) && this.p(a, i, d == b.length - 1)) {
                    let k = this.w(a, g, e, a.f.m);
                    if (k != null) {
                        this.b.i(k, this.h(a, i));
                    }
                }
            }
            if (a.j) {
                for (let l = 0; l < c.length; l++) {
                    let m = c[l];
                    let n = this.m(a, m);
                    a.b = a.d;
                    this.k(a, a.v, n);
                    a.b = null;
                }
            }
        }
        w(a, b, c, d) {
            return null;
        }
    }
    AxisRendererBase.$t = /*@__PURE__*/ markType(AxisRendererBase, 'AxisRendererBase');
    return AxisRendererBase;
})();
/**
 * @hidden
 */
export let NumericAxisRenderer = /*@__PURE__*/ (() => {
    class NumericAxisRenderer extends AxisRendererBase {
        constructor(a) {
            super(a);
            this.ac = null;
            this.ad = false;
        }
        w(a, b, c, d) {
            let e;
            if (a.s != null) {
                if (a.i() && a.ab) {
                    return this.ae(b, this.g);
                }
                e = this.g(b, false);
            }
            else {
                b = Math.round(b * 1000000) / 1000000;
                if (a.i() && a.ab) {
                    return this.ae(b, null);
                }
                e = MathUtil.s(b);
            }
            return e;
        }
        ae(a, b) {
            if (this.ad) {
                return a.toString();
            }
            if (this.ac == null) {
                this.ac = NumberAbbreviatorFactory.a(this.b.a.bt);
                if (this.ac == null) {
                    this.ad = true;
                    return a.toString();
                }
            }
            return this.ac.abbreviate(a, b);
        }
    }
    NumericAxisRenderer.$t = /*@__PURE__*/ markType(NumericAxisRenderer, 'NumericAxisRenderer', AxisRendererBase.$);
    return NumericAxisRenderer;
})();
/**
 * @hidden
 */
export let VerticalAxisLabelPanel = /*@__PURE__*/ (() => {
    class VerticalAxisLabelPanel extends AxisLabelPanelBase {
        constructor() {
            super(...arguments);
            this.di = 0;
            this.df = 0;
            this.dh = 0;
            this.dg = 0;
        }
        ae() {
            return new VerticalAxisLabelPanelView(this);
        }
        ch(a) {
            super.ch(a);
            this.c9 = a;
        }
        b6() {
            this.c9.a0();
        }
        bq() {
            return this.ad.be != null ? this.ad.be.angle : -90;
        }
        db() {
            let a = 0;
            let b = this.aj(this.ad.be);
            if (b == 1) {
                a += this.bu();
            }
            let c = this.ah;
            if (c == 3 || c == 7) {
                a += this.ad.dy;
            }
            return a;
        }
        dd() {
            let a = 0;
            let b = this.aj(this.ad.be);
            if (b == 2) {
                a += this.bu();
            }
            let c = this.ah;
            if (c == 2 || c == 6) {
                a += this.ad.dy;
            }
            return a;
        }
        de() {
            let a = (this.bd - this.db()) - this.dd();
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        dc() {
            let a = ((this.de() - this.af.p()) - this.af.q());
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        a5() {
            let a = new List$1(Rect.$, 0);
            this.aw = false;
            this.av = false;
            if (this.ag != null && this.ag.k() && this.bl() % 360 != 0) {
                this.av = true;
            }
            this.di = -1.7976931348623157E+308;
            this.df = -1.7976931348623157E+308;
            this.dh = -1.7976931348623157E+308;
            this.dg = -1.7976931348623157E+308;
            let b = this.af.p();
            let c = this.af.r();
            let d = this.af.q();
            let e = this.af.o();
            let f = this.db();
            let g = false;
            if (!isNaN_(this.be)) {
                this.di = Math.max(this.be, this.di);
                this.dh = Math.max(this.bf, this.dh);
            }
            for (let h = 0; h < this.bb.count; h++) {
                let i = this.bb._inner[h];
                let j = this.ba._inner[h].a;
                let k = this.bj(i);
                let l = this.bk(i);
                let m = k + c + e;
                let n = l + b + d;
                let o = this.c1.left + f;
                let p = this.ba._inner[h].c - m / 2;
                if (j) {
                    let q = this.be;
                    if ((isNaN_(this.be) || n > this.be || this.ba._inner[h].b) && !g) {
                        if (this.ba._inner[h].b) {
                            g = true;
                        }
                        this.ba._inner[h].b = false;
                        this.be = n;
                        this.bf = l;
                    }
                    this.di = Math.max(this.be, this.di);
                    this.df = Math.max(m, this.df);
                    this.dh = Math.max(this.bf, this.dh);
                    this.dg = Math.max(k, this.dg);
                }
                else {
                    this.di = Math.max(n, this.di);
                    this.df = Math.max(m, this.df);
                    this.dh = Math.max(l, this.dh);
                    this.dg = Math.max(k, this.dg);
                }
                let r = new Rect(0, o, p, n, m);
                a.add(r);
            }
            let s = 0;
            if (this.av) {
                s = this.bl() % 360;
                if (s < 0) {
                    s += 360;
                }
            }
            let t = this.ad.b7();
            if (!t) {
                this.dj(s, b, d);
            }
            else {
                this.af.ac();
            }
            if (this.av) {
                for (let u = 0; u < a.count; u++) {
                    let v = a._inner[u];
                    v.y = this.ba._inner[u].c - this.df / 2;
                    a._inner[u] = v;
                }
            }
            let w = false;
            if (!this.av && this.di <= this.bd) {
                w = true;
            }
            if (!w) {
                let x = this.c1.height;
                let y = this.de();
                let z = y;
                let aa = this.ba.count > 1 ? Math.abs(this.ba._inner[1].c - this.ba._inner[0].c) : x;
                let ab = Math.abs(Math.asin(aa / this.di) * (180 / Math.PI));
                let ac = (s >= ab && s <= 180 - ab) || (s - 180 >= ab && s - 180 <= 180 - ab);
                for (let ad = 0; ad < a.count; ad++) {
                    if (this.av) {
                        let ae = s * (Math.PI / 180);
                        let af = this.bv(this.bb._inner[ad]);
                        z = Math.min(y / Math.abs(Math.cos(ae)), af);
                        if (ac) {
                            let ag;
                            if (s > 0 && s < 90) {
                                ag = (Math.PI / 180) * (90 - s);
                            }
                            else if (s > 270 && s < 360) {
                                ag = (Math.PI / 180) * (s - 270);
                            }
                            else {
                                ag = 0;
                            }
                            z = aa / Math.cos(ag);
                        }
                    }
                    let ah = a._inner[ad];
                    ah.width = Math.min(ah.width, z);
                    a._inner[ad] = ah;
                    if (!(typeCast(TextBlock.$, this.bb._inner[ad]) !== null)) {
                        this.bb._inner[ad].width = z;
                    }
                    let ai = typeCast(TextBlock.$, this.bb._inner[ad]);
                    if (ai != null) {
                        let aj = this.b1(ad, ai, z, b, d);
                        if (!Base.equalsStatic(ai.al, aj)) {
                            ai.al = aj;
                            this.bb._inner[ad].width = z;
                        }
                    }
                }
                if (!t) {
                    this.dj(s, b, d);
                }
            }
            if (this.da()) {
                this.dk(a);
            }
            return a;
        }
        dj(a, b, c) {
            let d = a * (Math.PI / 180);
            let e = Math.abs(this.dh * Math.cos(d)) + Math.abs(this.dg * Math.sin(d));
            let f = this.bu();
            let g = (e + b + c) + (f) + this.ad.dy;
            this.bh = Math.max(this.ad.er, g);
        }
        dk(a) {
            this.c9.a1(a, this.di);
        }
        cm(a, b) {
            let c = 0;
            let d = this.dg / 2;
            let e = new TransformGroup();
            let f = AngleSimplifier.a(this.bl());
            let g = ((() => {
                let $ret = new RotateTransform();
                $ret.j = f;
                $ret.k = c;
                $ret.l = d;
                return $ret;
            })());
            let h = 0;
            let i = 0;
            if (f != 0 && f != 360) {
                f -= 90;
                if (f > 0 && f < 180) {
                    g.k = this.dh;
                    h = -this.dh + this.dg / 2;
                    h = h + Math.sin(MathUtil.o(f - 180)) * (this.dg / 2);
                }
                else {
                    if (f >= 180) {
                        h = h - Math.cos(MathUtil.o(f)) * (this.dg / 2);
                    }
                    else {
                        h = h + Math.cos(MathUtil.o(f)) * (this.dg / 2);
                    }
                }
            }
            let j = ((() => {
                let $ret = new TranslateTransform();
                $ret.j = h;
                $ret.k = i;
                return $ret;
            })());
            e.j.add(g);
            e.j.add(j);
            a.j = e;
        }
        da() {
            return !this.aw && !this.av;
        }
        c0() {
            let a = this.aj(this.ad.be);
            let b = this.bu();
            let c = this.ah;
            let d = 0;
            if (a == 1) {
                d += this.c1.left;
                if (c == 3 || c == 7) {
                    d += this.ad.dy;
                }
            }
            else {
                d = this.c1.right - b;
                if (c == 6 || c == 2) {
                    d -= this.ad.dy;
                }
            }
            let e = this.bs();
            let f = 0;
            let g = this.ad.be == null ? 1 : this.ad.be.verticalAlignment;
            if (g == 0) {
                f = this.c1.top;
            }
            else if (g == 2) {
                f = this.c1.bottom - e;
            }
            else {
                f = (this.c1.top + (this.c1.height / 2)) - (e / 2);
            }
            return new Rect(0, d, f, b, e);
        }
        aj(a) {
            if (a == null) {
                return this.ad.bh.aq(this.ad);
            }
            if (a.position == 0) {
                if (this.ad != null && this.ad.bh != null) {
                    return this.ad.bh.aq(this.ad);
                }
                return 1;
            }
            return a.position;
        }
        ai() {
            return 2;
        }
        ay(a) {
            return a == 2 || a == 3 || a == 6 || a == 7;
        }
        b9() {
            let a = this.af.au();
            this.ad.hh(a);
            if (this.ag != null && this.ag.visibility != 0) {
                return;
            }
            let b = this.ad.dy;
            if (b == 0) {
                return;
            }
            let c = this.a2();
            if (c == null) {
                return;
            }
            let d = this.c1.left;
            let e;
            let f = this.ah;
            if (f == 2 || f == 6) {
                d = this.c1.right;
                e = d - b;
            }
            else {
                e = d + b;
            }
            let g = this.af.b();
            for (let h of fromEnum(c)) {
                this.cc(a, h, d, e, this.c4, g);
            }
            if (!this.ab.contains(this.af.aw)) {
                this.ab.add(this.af.aw);
            }
        }
    }
    VerticalAxisLabelPanel.$t = /*@__PURE__*/ markType(VerticalAxisLabelPanel, 'VerticalAxisLabelPanel', AxisLabelPanelBase.$);
    return VerticalAxisLabelPanel;
})();
/**
 * @hidden
 */
export let IHasCategoryAxis_$type = /*@__PURE__*/ new Type(null, 'IHasCategoryAxis');
/**
 * @hidden
 */
export let IHasCategoryModePreference_$type = /*@__PURE__*/ new Type(null, 'IHasCategoryModePreference', null, [IHasCategoryAxis_$type]);
/**
 * @hidden
 */
export let AutomaticSeriesManager = /*@__PURE__*/ (() => {
    class AutomaticSeriesManager extends Base {
        constructor(a) {
            super();
            this.g = new HashSet$1(AutomaticSeriesPurpose_$type, 0);
            this.c = null;
            this.f = false;
            this.a = null;
            this.a = new AutomaticSeriesRequestCollection();
            let b = this.a;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.i));
            let c = a.series;
            this.c = c;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.m));
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.n));
        }
        e(a) {
            return this.g.contains(a);
        }
        i(a, b) {
            this.j();
        }
        n(a, b) {
            this.j();
        }
        m(a, b) {
            this.j();
        }
        j() {
            if (this.f) {
                return;
            }
            this.f = true;
            try {
                this.k();
            }
            finally {
                this.f = false;
            }
        }
        k() {
            this.g.clear();
            let a = new Dictionary$2(Series.$, Number_$type, 0);
            let b = new Dictionary$2(Series.$, AutomaticSeriesRequest.$, 0);
            for (let c = 0; c < this.c.count; c++) {
                a.addItem(this.c._inner[c], c);
            }
            for (let d = 0; d < this.a.count; d++) {
                this.g.add_1(this.a._inner[d].a);
                b.addItem(this.a._inner[d].d, this.a._inner[d]);
            }
            let e = new List$1(Series.$, 0);
            let f = new List$1(AutomaticSeriesRequest.$, 0);
            let g = new List$1(AutomaticSeriesRequest.$, 0);
            for (let h = 0; h < this.a.count; h++) {
                if (!a.containsKey(this.a._inner[h].d)) {
                    f.add(this.a._inner[h]);
                }
            }
            for (let i = 0; i < this.c.count; i++) {
                if (this.c._inner[i].df && !b.containsKey(this.c._inner[i])) {
                    e.add(this.c._inner[i]);
                }
                if (b.containsKey(this.c._inner[i]) && this.d(b.item(this.c._inner[i]), a, b)) {
                    e.add(this.c._inner[i]);
                    g.add(b.item(this.c._inner[i]));
                    f.add(b.item(this.c._inner[i]));
                }
            }
            for (let j = e.count - 1; j >= 0; j--) {
                let k = e._inner[j];
                let l = a.item(k);
                this.c.removeAt(l);
            }
            a.clear();
            for (let m = 0; m < this.c.count; m++) {
                a.addItem(this.c._inner[m], m);
            }
            for (let n = 0; n < f.count; n++) {
                f._inner[n].d.df = true;
                let o = this.h(f._inner[n], a);
                this.c.insert(o, f._inner[n].d);
                a.item(f._inner[n].d, o);
                for (let p = o; p < this.c.count; p++) {
                    let q = this.c._inner[p];
                    if (a.containsKey(q)) {
                        a.item(q, p);
                    }
                }
            }
        }
        l(a) {
            for (let b = this.a.count - 1; b >= 0; b--) {
                if (this.a._inner[b].a == a) {
                    this.a.removeAt(b);
                }
            }
        }
        h(a, b) {
            if (a.f) {
                return 0;
            }
            if (a.e) {
                return this.c.count;
            }
            if (a.c != null) {
                if (!b.containsKey(a.c)) {
                    return this.c.count;
                }
                let c = b.item(a.c);
                return c - 1;
            }
            if (a.b != null) {
                if (!b.containsKey(a.b)) {
                    return this.c.count;
                }
                let d = b.item(a.b);
                return d + 1;
            }
            return this.c.count;
        }
        d(a, b, c) {
            let d = b.item(a.d);
            if (a.f) {
                for (let e = d; d >= 0; e--) {
                    if (!c.containsKey(this.c._inner[e])) {
                        return true;
                    }
                }
            }
            if (a.e) {
                for (let f = d; d < this.c.count; f++) {
                    if (!c.containsKey(this.c._inner[f])) {
                        return true;
                    }
                }
            }
            if (a.c != null) {
                if (!b.containsKey(a.c)) {
                    return false;
                }
                let g = b.item(a.c);
                if (d != g - 1) {
                    return true;
                }
            }
            if (a.b != null) {
                if (!b.containsKey(a.b)) {
                    return false;
                }
                let h = b.item(a.b);
                if (d != h + 1) {
                    return true;
                }
            }
            return false;
        }
        get b() {
            return this.a;
        }
    }
    AutomaticSeriesManager.$t = /*@__PURE__*/ markType(AutomaticSeriesManager, 'AutomaticSeriesManager');
    return AutomaticSeriesManager;
})();
/**
 * @hidden
 */
export let AutomaticSeriesRequest = /*@__PURE__*/ (() => {
    class AutomaticSeriesRequest extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this.d = null;
            this.b = null;
            this.c = null;
            this.e = false;
            this.f = false;
        }
    }
    AutomaticSeriesRequest.$t = /*@__PURE__*/ markType(AutomaticSeriesRequest, 'AutomaticSeriesRequest');
    return AutomaticSeriesRequest;
})();
/**
 * @hidden
 */
export let AutomaticSeriesRequestCollection = /*@__PURE__*/ (() => {
    class AutomaticSeriesRequestCollection extends ObservableCollection$1 {
        constructor() {
            super(AutomaticSeriesRequest.$, 0);
        }
    }
    AutomaticSeriesRequestCollection.$t = /*@__PURE__*/ markType(AutomaticSeriesRequestCollection, 'AutomaticSeriesRequestCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(AutomaticSeriesRequest.$));
    return AutomaticSeriesRequestCollection;
})();
/**
 * @hidden
 */
export let IDataChartToolbarProvider_$type = /*@__PURE__*/ new Type(null, 'IDataChartToolbarProvider');
/**
 * @hidden
 */
export let ISeriesViewerScrollbarManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesViewerScrollbarManager');
/**
 * @hidden
 */
export let IHighlightingManager_$type = /*@__PURE__*/ new Type(null, 'IHighlightingManager');
/**
 * @hidden
 */
export let HighlightingInfo = /*@__PURE__*/ (() => {
    class HighlightingInfo extends Base {
        constructor() {
            super();
            this.i = 0;
            this.h = 0;
            this.g = 0;
            this.a = 0;
            this.f = 0;
            this.e = false;
            this.d = false;
            this.c = false;
            this.b = null;
            this.a = HighlightingState.outward;
            this.f = 0;
            this.e = false;
        }
    }
    HighlightingInfo.$t = /*@__PURE__*/ markType(HighlightingInfo, 'HighlightingInfo');
    return HighlightingInfo;
})();
/**
 * @hidden
 */
export let ISeriesInteractionManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesInteractionManager');
/**
 * @hidden
 */
export let ISeriesViewerInteractionManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesViewerInteractionManager');
/**
 * @hidden
 */
export let IDataChartVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'IDataChartVisualDataManager');
/**
 * @hidden
 */
export let IAxisVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'IAxisVisualDataManager');
/**
 * @hidden
 */
export let ISeriesVisualDataManager_$type = /*@__PURE__*/ new Type(null, 'ISeriesVisualDataManager');
/**
 * @hidden
 */
export let XamDataChart = /*@__PURE__*/ (() => {
    class XamDataChart extends SeriesViewer {
        constructor() {
            super();
            this._xsr = null;
            this.t1 = null;
            this.u2 = 1;
            this.u3 = 1;
            this.ul = false;
            this.up = false;
            this.uo = false;
            this.u4 = 0;
            this.u5 = 0;
            this.vm = NaN;
            this.vn = NaN;
            this.tw = new AxisCollection();
            this.axisRangeChanged = null;
            this.ua = null;
            this.ud = false;
            this.uz = 0;
            this.u1 = 0;
            this.u0 = 0;
            this.uy = 0;
            this.u7 = NaN;
            this.u9 = NaN;
            this.u8 = NaN;
            this.u6 = NaN;
            this.ab = XamDataChart.$;
            this.uo = true;
            let a = this.axes;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.wt));
            let b = this.axes;
            b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.wu));
        }
        get XSRP() {
            if (this._xsr == null) {
                this._xsr = new SRProvider(this.cu.j.ae);
            }
            return this._xsr;
        }
        get t2() {
            if (this.t1 == null) {
                this.t1 = DVContainer.instance.createInstance(IDataChartVisualDataManager_$type, () => this.XSRP.q);
            }
            return this.t1;
        }
        static staticInit() {
            XamDataChart.vj = -1.7976931348623157E+308;
            XamDataChart.vi = 1.7976931348623157E+308;
        }
        static vv(a) {
            if (a.cd == null) {
                return -1;
            }
            if (!a.dz) {
                return -1;
            }
            let b = XamDataChartView.aw(a);
            if (b.count == 0) {
                return -1;
            }
            let c = -1;
            for (let d = 0; d < b.count; d++) {
                c = Math.max(c, b._inner[d].index);
            }
            let e = c + 1;
            if (a.dv) {
                e = a.he();
                if (e == -1) {
                    return -1;
                }
                let f = a.bf();
                e = f.index + e;
            }
            return e;
        }
        n4(a, b, c, d) {
            super.n4(a, b, c, d);
            switch (b) {
                case XamDataChart.$$p[23]:
                    this.ve = this.vt;
                    break;
                case XamDataChart.$$p[24]:
                    this.vf = this.vu;
                    break;
                case "ActualWindowScaleHorizontal":
                case "ActualWindowScaleVertical":
                    if (!this.ff) {
                        this.pf(this.gm(), this.gn());
                    }
                    break;
                case XamDataChart.$$p[8]:
                    this.cu.fr(d);
                    {
                        for (let e of fromEnum(this.axes)) {
                            e.h6();
                        }
                    }
                    break;
                case XamDataChart.$$p[9]:
                    this.uk = this.uj;
                    break;
                case XamDataChart.$$p[22]:
                    this.un = this.uw;
                    break;
                case XamDataChart.$$p[11]:
                case XamDataChart.$$p[13]:
                    this.pb();
                    break;
                case XamDataChart.$$p[0]:
                case XamDataChart.$$p[17]:
                    if (c != d) {
                        for (let f of fromEnum(this.axes)) {
                            f.cp = true;
                            f.h6();
                        }
                    }
                    break;
                case XamDataChart.$$p[7]:
                case XamDataChart.$$p[5]:
                case XamDataChart.$$p[6]:
                    for (let g of fromEnum(this.axes)) {
                        g.ii();
                    }
                    break;
                case XamDataChart.$$p[4]:
                    this.wx();
                    break;
            }
        }
        ok() {
            super.ok();
            if (this.tv == 1 || this.tv == 2) {
                this.w1();
            }
        }
        mv() {
            super.mv();
            if (this.ue && this.tv != 0) {
                if (!this.uv) {
                    this.w1();
                }
            }
        }
        mm(a, b) {
            super.mm(a, b);
            if (this.ue && this.tv == 2) {
                if (!a.isEmpty && !b.isEmpty) {
                    if (Math.abs(a.width - b.width) > 1E-10) {
                        if (!this.uv) {
                            this.w1();
                        }
                    }
                }
            }
        }
        mq() {
            super.mq();
            if (this.ty == 1) {
                this.wx();
            }
        }
        w2() {
            this.wx();
        }
        wx() {
            let a = this.xx();
            this.ud = false;
            if (!isNaN_(this.vp)) {
                this.vb = this.vp;
            }
            else {
                this.vb = a.left;
            }
            if (!isNaN_(this.vr)) {
                this.vd = this.vr;
            }
            else {
                this.vd = a.top;
            }
            if (!isNaN_(this.vq)) {
                this.vc = this.vq;
            }
            else {
                this.vc = a.right;
            }
            if (!isNaN_(this.vo)) {
                this.va = this.vo;
            }
            else {
                this.va = a.bottom;
            }
            this.td = this.tb(this.to);
            if (this.ud) {
                this.ud = false;
                for (let b of fromEnum(this.axes)) {
                    b.cp = true;
                    b.h6();
                }
                for (let c of fromEnum(this.series)) {
                    c.ml(false);
                }
            }
        }
        xx() {
            this.w4();
            switch (this.ty) {
                case 1:
                    let a = this.xy();
                    return a;
                default: return new Thickness(1, 0, 0, 0, 0);
            }
        }
        w4() {
            this.bx = this.t4();
            this.bz = this.t7();
        }
        t7() {
            let a = 1;
            for (let b of fromEnum(this.series)) {
                let c = b.bw();
                a = this.t6(a, c);
            }
            return a;
        }
        t6(a, b) {
            switch (a) {
                case 2: return 2;
                case 4:
                    if (b == 2 || b == 3) {
                        return 2;
                    }
                    return a;
                case 3:
                    if (b == 2 || b == 4) {
                        return 2;
                    }
                    return a;
                case 1: return b;
            }
            return a;
        }
        t4() {
            let a = 1;
            for (let b of fromEnum(this.series)) {
                let c = b.bv();
                a = this.t3(a, c);
            }
            return a;
        }
        t3(a, b) {
            switch (a) {
                case 2: return 2;
                case 4:
                    if (b == 2 || b == 3) {
                        return 2;
                    }
                    return a;
                case 3:
                    if (b == 2 || b == 4) {
                        return 2;
                    }
                    return a;
                case 1: return b;
            }
            return a;
        }
        xy() {
            let a = new Thickness(1, 0, 0, 0, 0);
            for (let b = 0; b < this.series.count; b++) {
                let c = this.series._inner[b];
                let d = c.p4();
                a = new Thickness(1, Math.max(d.left, a.left), Math.max(d.top, a.top), Math.max(d.right, a.right), Math.max(d.bottom, a.bottom));
            }
            return a;
        }
        xz(a, b) {
            let c = new Thickness(1, 0, 0, 0, 0);
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                let f = e.p6(a, b);
                c = new Thickness(1, Math.max(f.left, c.left), Math.max(f.top, c.top), Math.max(f.right, c.right), Math.max(f.bottom, c.bottom));
            }
            return c;
        }
        get_d4() {
            return this.ty == 1;
        }
        gm() {
            return this.ve;
        }
        gn() {
            return this.vf;
        }
        o3() {
            super.o3();
            this.ve = this.s9.width;
            this.vf = this.s9.height;
        }
        get ve() {
            return this.u2;
        }
        set ve(a) {
            let b = this.u2;
            this.u2 = a;
            this.n8("ActualWindowScaleHorizontal", b, this.u2);
        }
        get vf() {
            return this.u3;
        }
        set vf(a) {
            let b = this.u3;
            this.u3 = a;
            this.n8("ActualWindowScaleVertical", b, this.u3);
        }
        er() {
            return this.uk;
        }
        es() {
            return this.un;
        }
        get ue() {
            return this.uq || this.ut;
        }
        get_e0() {
            return this.uf;
        }
        get uf() {
            return this.uu || (this.ez && this.tv != 0);
        }
        get_ez() {
            return this.ut;
        }
        get_ey() {
            return this.uq;
        }
        w1() {
            this.ul = false;
            this.up = true;
            this.uo = true;
            for (let a = 0; a < this.axes.count; a++) {
                this.axes._inner[a].cp = true;
                this.axes._inner[a].h6();
            }
        }
        w0() {
            this.ul = false;
            this.uo = true;
            for (let a = 0; a < this.axes.count; a++) {
                this.axes._inner[a].cp = true;
                this.axes._inner[a].h6();
            }
        }
        wz(a, b, c, d) {
            if (a.ad == null) {
                return;
            }
            if (a.ad.cp || a.ad.kc.isEmpty) {
                return;
            }
            let e = false;
            for (let f = 0; f < this.axes.count; f++) {
                let g = this.axes._inner[f].av.bh;
                this.axes._inner[f].av.ca();
                if (this.axes._inner[f].av.bh != g) {
                    e = true;
                }
            }
            if (e) {
                return;
            }
            if (isNaN_(this.vm)) {
                this.vm = this.cu.a4;
                this.vn = this.cu.a5;
            }
            let h = false;
            let i = false;
            let j = 0;
            if (a.au) {
                let k = this.uo;
                if (this.ut && this.uo) {
                    j = this.vs(a, b, c, d);
                    this.uo = false;
                    if (a.bl() != j) {
                        if (j == 0 && a.ad.b3) {
                            if (k) {
                                this.up = true;
                                a.ad.h9();
                                h = true;
                                i = true;
                            }
                        }
                        else {
                            if ((j > a.bl()) || k) {
                                this.up = true;
                                a.ad.ie(j);
                                h = true;
                                i = true;
                            }
                        }
                    }
                }
            }
            this.dr = h;
            if (a.bl() != 0 || j != 0 || h) {
                let l = a.bl();
                let m = c.left + c.width / 2;
                let n = d.left + d.width / 2;
                if (a.av) {
                    m = c.left;
                    n = d.left;
                }
                if (l == 0) {
                    m = m - a.c3.width / 2;
                    n = n - a.c3.width / 2;
                }
                let o = a.cz(new Rect(0, m, c.top, a.c3.width, a.c3.height), l);
                let p = a.cz(new Rect(0, n, d.top, a.c3.width, a.c3.height), l);
                c = o;
                d = p;
            }
            let q = false;
            if (this.up) {
                this.up = false;
                q = true;
            }
            this.ul = true;
            let r = 0;
            let s = 0;
            let t = 0;
            let u = c.left + t;
            let v = d.right + t;
            let w = 0;
            w = this.to.right + this.cu.a5;
            if (u < 0) {
                r = -u;
                r += this.vg;
            }
            if (v > w) {
                s = v - w;
                s += this.vg;
            }
            if (q) {
                if (u > 0) {
                    r = -u;
                    r += this.vg;
                }
                if (v < w) {
                    s = -(w - v);
                    s += this.vg;
                }
            }
            let x = false;
            let y = false;
            if (r != 0 || s != 0) {
                x = true;
                this.u4 = this.u4 + r;
                this.u5 = this.u5 + s;
                if (this.u4 > this.vh) {
                    this.u4 = this.vh;
                    y = true;
                }
                if (this.u5 > this.vh) {
                    this.u5 = this.vh;
                    y = true;
                }
                if (this.u4 < 0) {
                    this.u4 = 0;
                    y = true;
                }
                if (this.u5 < 0) {
                    this.u5 = 0;
                    y = true;
                }
            }
            else {
                if (this.dr) {
                    this.ww();
                }
                return;
            }
            this.fe = true;
            this.gw = this.vm + this.u4;
            this.g1 = this.vn + this.u5;
            this.fe = false;
            this.ew = x;
            if (y) {
                if (q && (this.ew || this.dr)) {
                    this.ww();
                }
                return;
            }
            if (this.ew || this.dr) {
                this.ww();
            }
        }
        vs(a, b, c, d) {
            let e = this.vk(-1, a, b, c, d);
            let f = a.bl();
            if (e < f) {
                let g = c.left + c.width / 2;
                let h = d.left + d.width / 2;
                if (a.av) {
                    g = c.left;
                    h = d.left;
                }
                let i = a.cz(new Rect(0, g, c.top, a.c3.width, a.c3.height), e);
                let j = a.cz(new Rect(0, h, d.top, a.c3.width, a.c3.height), e);
                if (e == 0) {
                    i = new Rect(0, g - a.c3.width / 2, c.top, a.c3.width, a.c3.height);
                    j = new Rect(0, h - a.c3.width / 2, d.top, a.c3.width, a.c3.height);
                }
                let k = a.cz(new Rect(0, g, c.top, a.c3.width, a.c3.height), f);
                let l = a.cz(new Rect(0, h, d.top, a.c3.width, a.c3.height), f);
                let m = j.right - l.right;
                let n = 0;
                let o = 0;
                o = this.to.right + this.cu.a5;
                let p = i.left + n;
                let q = j.right + n;
                let r = 0;
                let s = 0;
                if (p < 0) {
                    r = -p;
                    r += this.vg;
                }
                if (q > o) {
                    s = q - o;
                    s += this.vg;
                }
                let t = false;
                if (this.up || this.uo) {
                    t = true;
                }
                if (t) {
                    if (p > 0) {
                        r = -p;
                        r += this.vg;
                    }
                    if (q < o) {
                        s = -(o - q);
                        s += this.vg;
                    }
                }
                let u = false;
                let v = false;
                let w = 0;
                let x = 0;
                if (r != 0 || s != 0) {
                    v = true;
                    w = this.u4 + r;
                    x = this.u5 + s;
                    if (w > this.vh) {
                        w = this.vh;
                        u = true;
                    }
                    if (x > this.vh) {
                        x = this.vh;
                        u = true;
                    }
                    if (w < 0) {
                        w = 0;
                        u = true;
                    }
                    if (x < 0) {
                        x = 0;
                        u = true;
                    }
                }
                let y = this.cu.a4;
                let z = this.cu.a5;
                let aa = new Thickness(1, this.vm + w, 0, this.vn + x, 0);
                let ab = (aa.left - y) + (aa.right - z);
                let ac = a.ad.j6().width;
                let ad = ac - ab;
                let ae = ad / ac;
                let af = a.bn() * ae;
                let ag = this.vk(af, a, b, c, d);
                if (ag == e) {
                    return e;
                }
                else {
                    return f;
                }
            }
            return e;
        }
        vk(a, b, c, d, e) {
            let f = b.c3;
            let g = b.bn();
            if (a < 0) {
            }
            if (a > 0) {
                g = a;
            }
            if (f.width < g) {
                return 0;
            }
            let h = 45;
            let i = new Rect(0, 0, f.top, f.width, f.height);
            let j = new Rect(0, g, f.top, f.width, f.height);
            let k = b.ac(i, h);
            let l = b.ac(j, h);
            let m = true;
            for (let n = 0; n < k.length; n++) {
                if (PolygonUtil.a(l, k[n])) {
                    m = false;
                    break;
                }
            }
            if (!m) {
                h = 90;
            }
            return h;
        }
        ww() {
            for (let a = 0; a < this.axes.count; a++) {
                this.axes._inner[a].cp = true;
                this.axes._inner[a].h7(false);
            }
            this.ly(true, false, false);
            this.ul = false;
            for (let b = 0; b < this.axes.count; b++) {
                this.axes._inner[b].cp = true;
                this.axes._inner[b].h7(false);
            }
            this.ly(true, false, false);
        }
        get axes() {
            return this.tw;
        }
        wt(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (c != null) {
                        c.bn = null;
                        c.bh = null;
                        this.oo(c);
                        this.cu.dw(c);
                        c.rangeChanged = delegateRemove(c.rangeChanged, runOn(this, this.wv));
                        this.cu.dx(c);
                        if (c.dd != null) {
                            for (let d of fromEnum(c.da())) {
                                d.ml(false);
                            }
                        }
                    }
                }
                if (this.axes.count == 0) {
                    this.ot();
                }
            }
            if (b.newItems != null) {
                for (let e of fromEn(b.newItems)) {
                    if (e != null) {
                        this.o6(e);
                        e.bn = this.actualSyncLink;
                        e.bh = this;
                        e.a4.az();
                        this.cu.bo(e);
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.wv));
                        this.cu.bl(e);
                    }
                }
            }
            this.mj();
        }
        wu(a, b) {
            let c = new List$1(Series.$, 0);
            for (let d of fromEnum(this.axes)) {
                if (d.dd != null) {
                    for (let e of fromEnum(d.da())) {
                        if (!c.contains(e)) {
                            c.add(e);
                        }
                    }
                }
                d.bn = null;
                d.bh = null;
                this.oo(d);
                this.cu.dw(d);
                d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.wv));
                this.cu.dx(d);
                this.ot();
            }
            for (let f of fromEnum(this.series)) {
                if (!c.contains(f)) {
                    c.add(f);
                }
            }
            for (let g of fromEnum(c)) {
                g.ml(false);
            }
        }
        wv(a, b) {
            let c = typeCast(Axis.$, a);
            if (c == null) {
                return;
            }
            this.mj();
            if (this.axisRangeChanged != null) {
                this.axisRangeChanged(this, new ChartAxisRangeChangedEventArgs(this, c, b.oldMinimumValue, b.minimumValue, b.oldMaximumValue, b.maximumValue));
            }
            if (c.ai != null) {
                c.ai.h3();
            }
            c.h3();
            let d = this.ds;
            if (typeCast(CategoryAxisBase.$, c) !== null) {
                d = true;
            }
            for (let e of fromEnum(c.da())) {
                e.e1 = true;
                this.mj();
                e.ml(d);
            }
            if (c.bh != null) {
                for (let f of fromEnum(c.bh.series)) {
                    XamDataChart.wy(c, d, f);
                }
            }
            for (let g of fromEnum(this.axes)) {
                if (g != c && g.ai != null && g.ai == c) {
                    g.h3();
                }
            }
        }
        static wy(a, b, c) {
        }
        pd(a, b) {
            super.pd(a, b);
            if (this.axes == null) {
                return;
            }
            for (let c of fromEnum(this.axes)) {
                c.bn = this.actualSyncLink;
                c.bh = this;
            }
        }
        getFontInfo() {
            this.ua = this.t9.fo;
            return this.ua;
        }
        w3() {
            this.cu.ee();
            for (let a of fromEnum(this.axes)) {
                a.h7(false);
            }
            for (let b of fromEnum(this.series)) {
                b.b0.bj();
                b.ml(false);
            }
        }
        getFontBrush() {
            return this.t9.fw;
        }
        lt() {
            super.lt();
            let a = new List$1(Axis.$, 0);
            for (let b = 0; b < this.axes.count; b++) {
                a.add(this.axes._inner[b]);
            }
            for (let c = 0; c < a.count; c++) {
                this.axes.remove(a._inner[c]);
                if (typeCast(CategoryAxisBase.$, a._inner[c]) !== null) {
                    let d = a._inner[c];
                    this.oq(d.name, true);
                    d.itemsSource = null;
                }
                a._inner[c].hw(null, null);
            }
        }
        se() {
            return this.t9.fs;
        }
        e7() {
            return true;
        }
        o7() {
            super.o7();
            if (!this.eu) {
                return;
            }
            for (let a of fromEnum(this.axes)) {
                this.o6(a);
            }
        }
        d3() {
            if (this.um) {
                return true;
            }
            return this.ui();
        }
        ui() {
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].eb || this.series._inner[a].d7) {
                    return true;
                }
            }
            for (let b = 0; b < this.axes.count; b++) {
                if (this.axes._inner[b].b8 || this.axes._inner[b].cl) {
                    return true;
                }
            }
            return false;
        }
        ct() {
            return new XamDataChartView(this);
        }
        ns(a) {
            super.ns(a);
            this.t9 = a;
        }
        ol() {
            for (let a = 0; a < this.tw.count; a++) {
                this.tw._inner[a].cp = true;
                this.tw._inner[a].h7(false);
            }
            super.ol();
        }
        get vb() {
            return this.uz;
        }
        set vb(a) {
            let b = this.uz;
            this.uz = a;
            if (this.uz != b) {
                this.ud = true;
                this.n8(XamDataChart.vy, b, this.uz);
            }
        }
        get vd() {
            return this.u1;
        }
        set vd(a) {
            let b = this.u1;
            this.u1 = a;
            if (this.u1 != b) {
                this.ud = true;
                this.n8(XamDataChart.v0, b, this.u1);
            }
        }
        get vc() {
            return this.u0;
        }
        set vc(a) {
            let b = this.u0;
            this.u0 = a;
            if (this.u0 != b) {
                this.ud = true;
                this.n8(XamDataChart.vz, b, this.u0);
            }
        }
        get va() {
            return this.uy;
        }
        set va(a) {
            let b = this.uy;
            this.uy = a;
            if (this.uy != b) {
                this.ud = true;
                this.n8(XamDataChart.vx, b, this.uy);
            }
        }
        get vp() {
            return this.u7;
        }
        set vp(a) {
            this.u7 = a;
            this.wx();
        }
        get vr() {
            return this.u9;
        }
        set vr(a) {
            this.u9 = a;
            this.wx();
        }
        get vq() {
            return this.u8;
        }
        set vq(a) {
            this.u8 = a;
            this.wx();
        }
        get vo() {
            return this.u6;
        }
        set vo(a) {
            this.u6 = a;
            this.wx();
        }
        tb(a) {
            let b = super.tb(a);
            if (a.isEmpty) {
                return Rect.empty;
            }
            if (this.vb == 0 && this.vd == 0 && this.vc == 0 && this.va == 0) {
                return Rect.empty;
            }
            if (this.vb + this.vc >= a.width || this.vd + this.va >= a.height) {
                return Rect.empty;
            }
            let c = new Rect(0, a.left + this.vb, a.top + this.vd, a.width - this.vb - this.vc, a.height - this.vd - this.va);
            return c;
        }
        th() {
            let a = this.to;
            let b = this.tp;
            let c = this.td;
            if (c.isEmpty || a.isEmpty) {
                return a;
            }
            if (c.containsRect(a)) {
                return a;
            }
            if (a.containsRect(c)) {
                return c;
            }
            return a;
        }
        vw() {
            return this.t2.exportVisualData(this);
        }
        wb() {
            let cvd_ = this.vw();
            cvd_.scaleByViewport();
            return (cvd_.serialize());
        }
        n1() {
            super.n1();
            for (let a = 0; a < this.axes.count; a++) {
                let b = this.axes._inner[a];
                let c = 50;
                if (!isNaN_(b.av.bh)) {
                    c = b.av.bh;
                }
                b.d2 = c;
            }
        }
        on() {
            super.on();
            for (let a = 0; a < this.axes.count; a++) {
                let b = this.axes._inner[a];
                b.d2 = NaN;
                b.cp = true;
                b.h7(false);
            }
        }
        ux(a) {
            let b = new List$1(Axis.$, 0);
            for (let c of fromEnum(this.series)) {
                let d = c.an(a);
                if (d != null) {
                    b.add(d);
                }
            }
            return b;
        }
    }
    XamDataChart.$t = /*@__PURE__*/ markType(XamDataChart, 'XamDataChart', SeriesViewer.$);
    XamDataChart.vj = 0;
    XamDataChart.vi = 0;
    XamDataChart.vy = "ActualPlotAreaMarginLeft";
    XamDataChart.v0 = "ActualPlotAreaMarginTop";
    XamDataChart.vz = "ActualPlotAreaMarginRight";
    XamDataChart.vx = "ActualPlotAreaMarginBottom";
    XamDataChart.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, XamDataChart, 'n8', ['AlignsGridLinesToPixels:ug:w5', [0, true], 'AutoExpandMarginExtraPadding:vg:w6', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'AutoExpandMarginMaximumValue:vh:w7', [1, 60], 'AutoMarginAndAngleUpdateMode:tv:w8', [AutoMarginsAndAngleUpdateMode_$type, /*@__PURE__*/ enumGetBox(AutoMarginsAndAngleUpdateMode_$type, 0)], 'ComputedPlotAreaMarginMode:ty:w9', [ComputedPlotAreaMarginMode_$type, /*@__PURE__*/ enumGetBox(ComputedPlotAreaMarginMode_$type, 0)], 'DefaultAxisMajorStroke:xu:xa', [Brush.$, null], 'DefaultAxisMinorStroke:xv:xb', [Brush.$, null], 'DefaultAxisStroke:xw:xc', [Brush.$, null], 'GridMode:t0:xd', [GridMode_$type, /*@__PURE__*/ enumGetBox(GridMode_$type, 2)], 'HorizontalZoomable:uj:xe', [0, false], 'InitialCloseGridlinesThreshold:vl:xf', [1, NaN], 'IsHorizontalZoomEnabled:uk:xg', [0, false], 'IsSquare:um:xh', [0, false], 'IsVerticalZoomEnabled:un:xi', [0, false], 'SeriesPlotAreaMarginHorizontalMode:t5:xj', [SeriesPlotAreaMarginHorizontalMode_$type, /*@__PURE__*/ enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, 0)], 'SeriesPlotAreaMarginVerticalMode:t8:xk', [SeriesPlotAreaMarginVerticalMode_$type, /*@__PURE__*/ enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, 0)], 'ShouldAutoExpandMarginForInitialLabels:uq:xl', [0, false], 'ShouldClipGridlines:ur:xm', [0, true], 'ShouldClipInitialCloseGridlines:us:xn', [0, true], 'ShouldConsiderAutoRotationForInitialLabels:ut:xo', [0, false], 'ShouldSuppressAxisLabelTruncation:uu:xp', [0, false], 'SuppressAutoMarginAndAngleRecalculation:uv:xq', [0, false], 'VerticalZoomable:uw:xr', [0, false], 'WindowScaleHorizontal:vt:xs', [1, NaN], 'WindowScaleVertical:vu:xt', [1, NaN]]);
    return XamDataChart;
})();
/**
 * @hidden
 */
export let LabelPanelArranger = /*@__PURE__*/ (() => {
    class LabelPanelArranger extends Base {
        static e(a, b) {
            for (let c of fromEnum(a)) {
                let d = c.ad;
                let e = d.ai;
                e = LabelPanelArranger.a(c, d, e);
                let f = LabelPanelArranger.b(c);
                let g = 0;
                let h = 0;
                let i = 0;
                if (d.b7()) {
                    c.af.ac();
                    i = c.bh;
                }
                else {
                    i = c.bi(b);
                }
                g = i;
                h = i;
                if (c.ad.ay != null && c.ad.ay.visibility != 0) {
                    h = 0;
                    g = 0;
                }
                if (c.aq()) {
                    switch (f) {
                        case 0:
                            b.y = Math.max(0, b.top + h);
                            b.height = Math.max(0, b.height - h);
                            d.ay.c = 0;
                            break;
                        case 4:
                            if (e != null && (c.bg - b.top < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                                d.ay.c = 5;
                            }
                            else {
                                d.ay.c = 4;
                            }
                            break;
                        case 5:
                            if (e != null && (b.bottom - c.bg < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                                if (d.ay != null) {
                                    d.ay.c = 4;
                                }
                            }
                            else {
                                if (d.ay != null) {
                                    d.ay.c = 5;
                                }
                            }
                            break;
                        case 1:
                        default:
                            if (d.ay != null) {
                                d.ay.c = 1;
                            }
                            b.height = Math.max(0, b.height - h);
                            break;
                    }
                }
                if (typeCast(VerticalAxisLabelPanel.$, c) !== null) {
                    switch (f) {
                        case 3:
                            b.width = Math.max(0, b.width - g);
                            d.ay.c = 3;
                            break;
                        case 6:
                            if (e != null && c.bg - b.left < g) {
                                d.ay.c = 7;
                            }
                            else {
                                d.ay.c = 6;
                            }
                            break;
                        case 7:
                            if (e != null && b.right - c.bg < g) {
                                d.ay.c = 6;
                            }
                            else {
                                d.ay.c = 7;
                            }
                            break;
                        case 2:
                        default:
                            if (d.ay != null) {
                                d.ay.c = 2;
                            }
                            b.x = Math.max(0, b.left + g);
                            b.width = Math.max(0, b.width - g);
                            break;
                    }
                }
                if (c.ad.b8) {
                    if (d.ay != null) {
                        d.ay.c = f;
                    }
                }
            }
            return b;
        }
        static a(a, b, c) {
            return b.aj();
        }
        static b(a) {
            if (a == null) {
                return 1;
            }
            else {
                let b = a.ad;
                if (b != null && b.ay != null) {
                    let c = b.ay.c;
                    if (!a.ay(c)) {
                        return a.ai();
                    }
                    return c;
                }
                else {
                    return a.ai();
                }
            }
        }
        static c(a, b, c, d) {
            let e = a.ad;
            let f = e.ai;
            f = LabelPanelArranger.a(a, e, f);
            let g = LabelPanelArranger.b(a);
            let h;
            let i = a.bi(c);
            let j = Math.max(0, i);
            let k = Math.max(0, i);
            if (a.ad != null && a.ad.ay != null && a.ad.ay.visibility == 1) {
                return;
            }
            switch (g) {
                case 3:
                    b.g = b.g - k;
                    b.d = b.d - k;
                    h = new Rect(0, b.g, c.top, k, c.height);
                    d(a, h);
                    break;
                case 2:
                    h = new Rect(0, b.f, c.top, k, c.height);
                    d(a, h);
                    b.f = b.f + k;
                    b.c = b.c + k;
                    break;
                case 7:
                    if (f != null) {
                        h = new Rect(0, b.f + a.bg, c.top, k, c.height);
                    }
                    else {
                        b.d = b.d - k;
                        h = new Rect(0, b.d, c.top, k, c.height);
                    }
                    d(a, h);
                    break;
                case 6:
                    if (f != null) {
                        h = new Rect(0, b.f + a.bg - k, c.top, k, c.height);
                    }
                    else {
                        h = new Rect(0, b.c, c.top, k, c.height);
                        b.c = b.c + k;
                    }
                    d(a, h);
                    break;
                case 1:
                    b.a = b.a - j;
                    b.b = b.b - j;
                    h = new Rect(0, c.left, b.a, c.width, j);
                    d(a, h);
                    break;
                case 0:
                    h = new Rect(0, c.left, b.h, c.width, j);
                    d(a, h);
                    b.h = b.h + j;
                    b.e = b.e + j;
                    break;
                case 5:
                    if (f != null) {
                        h = new Rect(0, c.left, b.h + a.bg, c.width, j);
                    }
                    else {
                        b.b = b.b - j;
                        h = new Rect(0, c.left, b.b, c.width, j);
                    }
                    d(a, h);
                    break;
                case 4:
                    if (f != null) {
                        h = new Rect(0, c.left, b.h + a.bg - j, c.width, j);
                    }
                    else {
                        h = new Rect(0, c.left, b.e, c.width, j);
                        b.e = b.e + j;
                    }
                    d(a, h);
                    break;
            }
            if (a.ad.b8) {
                h = new Rect(0, c.left, c.top, c.width, c.height);
                d(a, h);
            }
        }
        static d(a, b, c, d) {
            let e = new List$1(AxisLabelPanelBase.$, 0);
            let f = new List$1(AxisLabelPanelBase.$, 0);
            for (let g of fromEnum(a)) {
                let h = LabelPanelArranger.b(g);
                switch (h) {
                    case 1:
                    case 2:
                    case 0:
                    case 3:
                        f.add(g);
                        break;
                    case 5:
                    case 6:
                    case 4:
                    case 7:
                        e.add(g);
                        break;
                }
            }
            for (let i of fromEnum(f)) {
                LabelPanelArranger.c(i, b, c, d);
            }
            for (let j of fromEnum(e)) {
                LabelPanelArranger.c(j, b, c, d);
            }
        }
    }
    LabelPanelArranger.$t = /*@__PURE__*/ markType(LabelPanelArranger, 'LabelPanelArranger');
    return LabelPanelArranger;
})();
/**
 * @hidden
 */
export let ChartContentManager = /*@__PURE__*/ (() => {
    class ChartContentManager extends DependencyObject {
        constructor(a) {
            super();
            this.l = null;
            this.r = new Dictionary$2(ChartContentType_$type, Dictionary$2.$.specialize(DependencyObject.$, ContentInfo.$), 0);
            this.t = new List$1(Series.$, 0);
            this.m = false;
            this.v = null;
            this.q = false;
            this.o = false;
            this.n = false;
            this.p = false;
            this.p = true;
            this.o = true;
            this.n = true;
            this.r.addItem(0, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.r.addItem(1, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.r.addItem(2, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.l = a;
        }
        get u() {
            return this.t;
        }
        set u(a) {
            this.t = a;
        }
        k(a, b, c) {
            let d = this.j(a, b);
            d.a = c;
            return d;
        }
        ad(a, b) {
            let c = this.r.item(a);
            if (c.containsKey(b)) {
                c.removeItem(b);
            }
            let d = typeCast(Series.$, b);
            if (d != null && this.u.contains(d)) {
                this.u.remove(d);
            }
        }
        aa(a) {
            let b = this.v;
            this.v = a;
            if (this.m && b == null && this.v != null) {
                this.v.setTimeout(runOn(this, this.w), 0);
            }
        }
        z() {
            if (!this.m) {
                this.m = true;
                if (this.v != null) {
                    this.v.setTimeout(runOn(this, this.w), 0);
                }
                else {
                }
            }
        }
        ac(a, b, c, d) {
            let e = c;
            if (!e.c) {
                e.b = d;
            }
            else {
                if (!d) {
                    e.b = false;
                }
            }
            if (!e.c) {
                e.c = true;
                this.z();
            }
        }
        j(a, b) {
            let c = this.r.item(a);
            let d = null;
            if (!((() => { let e = c.tryGetValue(b, d); d = e.p1; return e.ret; })())) {
                d = new ContentInfo();
                d.h = b;
                c.addItem(b, d);
                let e = typeCast(Series.$, b);
                if (e != null && !this.u.contains(e)) {
                    if (e.dv) {
                        let f = e.bf();
                        let g = this.u.indexOf(f) + 1;
                        g += e.hi();
                        if (this.u.count <= g || f.hn() == 0 || g == -1) {
                            this.u.add(e);
                        }
                        else {
                            this.u.insert(g, e);
                        }
                    }
                    else {
                        this.u.add(e);
                    }
                }
            }
            return d;
        }
        y() {
            this.w();
        }
        w() {
            if (this.l == null || this.r == null) {
                return;
            }
            if (!this.m) {
                return;
            }
            this.m = false;
            if (this.l != null) {
                this.l.ll();
            }
            for (let a of fromEnum(this.s())) {
                a.f();
            }
            if (!this.m) {
                this.l.n9();
            }
        }
        *_s() {
            let a = null;
            a = this.r.item(1);
            for (let b of fromEnum(a.values)) {
                yield b;
            }
            a = this.r.item(0);
            let c = new List$1(ContentInfo.$, 0);
            for (let d of fromEnum(this.u)) {
                if (!d.dc) {
                    c.add(a.item(d));
                }
            }
            for (let e of fromEnum(this.u)) {
                if (e.dc) {
                    c.add(a.item(e));
                }
            }
            for (let f of fromEnum(c)) {
                yield f;
            }
            a = this.r.item(2);
            for (let g of fromEnum(a.values)) {
                yield g;
            }
        }
        s() {
            return toEnum(() => this._s());
        }
        x(a) {
            for (let b of fromEnum(this.r.item(1).values)) {
                b.h.hs(a);
            }
            for (let c of fromEnum(this.r.item(1).values)) {
                c.f();
            }
            for (let d of fromEnum(this.r.item(1).values)) {
                d.h.ih();
            }
        }
        ae(a, b, c, d) {
            c.i = d;
        }
        ab(a, b) {
            if (!b.e) {
                b.e = true;
                this.z();
            }
        }
    }
    ChartContentManager.$t = /*@__PURE__*/ markType(ChartContentManager, 'ChartContentManager', DependencyObject.$);
    return ChartContentManager;
})();
/**
 * @hidden
 */
export let ContentInfo = /*@__PURE__*/ (() => {
    class ContentInfo extends Base {
        constructor() {
            super(...arguments);
            this.h = null;
            this.a = null;
            this.b = false;
            this.c = false;
            this.i = null;
            this.e = false;
        }
        get d() {
            if (this.i.isEmpty) {
                return false;
            }
            if (this.i.width == 0 && this.i.height == 0) {
                return false;
            }
            return true;
        }
        g() {
            if (this.e && typeCast(Axis.$, this.h) !== null) {
                this.e = false;
                let a = this.c;
                this.c = true;
                let b = this.h.c1(true);
                if (!b) {
                    this.c = a;
                }
            }
        }
        f() {
            this.g();
            if (typeCast(Axis.$, this.h) !== null) {
                let a = typeCast(Axis.$, this.h);
                if (a.ai != null) {
                    let b = a.ai;
                    if (b.a5 != null && b.a5.e) {
                        b.a5.g();
                    }
                }
            }
            if (this.c) {
                this.c = false;
                this.a(this.b);
                this.b = false;
            }
        }
    }
    ContentInfo.$t = /*@__PURE__*/ markType(ContentInfo, 'ContentInfo');
    return ContentInfo;
})();
/**
 * @hidden
 */
export let Series = /*@__PURE__*/ (() => {
    class Series extends Control {
        constructor() {
            super();
            this.b0 = null;
            this.hq = 0;
            this.pu = null;
            this.df = false;
            this.ha = null;
            this.cm = null;
            this.a7 = null;
            this.a5 = null;
            this.ce = null;
            this.nd = null;
            this.fd = new Dictionary$2(String_$type, String_$type, 0);
            this.fc = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.renderRequested = null;
            this.e2 = false;
            this.bz = null;
            this.as = null;
            this.cs = true;
            this.eu = false;
            this.ev = false;
            this.ct = false;
            this.cy = false;
            this.b7 = null;
            this.cc = null;
            this.fi = null;
            this.bd = null;
            this.cl = null;
            this.g7 = null;
            this.na = null;
            this.a0 = null;
            this.b6 = 0;
            this.b5 = 0;
            this.c0 = false;
            this.cr = false;
            this.fl = DeviceUtils.g(1);
            this.fp = NaN;
            this.fm = NaN;
            this.fn = NaN;
            this.fo = NaN;
            this.o8 = null;
            this.o9 = null;
            this.f2 = DeviceUtils.g(2);
            this.bj = 1;
            this.fk = 0.2;
            this.cq = false;
            this.b1 = 1;
            this.br = 1;
            this.ht = null;
            this.bg = new SeriesComponentsForView();
            this.cu = false;
            this.h4 = null;
            this.g9 = null;
            this._coercionMethods = null;
            this.cp = false;
            this.bn = 0;
            this.bm = 0;
            this.co = null;
            this.pk = { $type: Point_$type, x: NaN, y: NaN };
            this.fq = NaN;
            this.fr = NaN;
            this.a4 = null;
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            this.hq = Series.hc++;
            this.e1 = true;
            this.pu = Rect.empty;
            this.b0 = this.bx();
            this.b0.bu = Rect.empty;
            this.l2(this.b0);
            this.b0.n = true;
            this.b0.as();
            this.b0.n = false;
            this.ab = Series.$;
            this.cl = (a, b) => {
                if (this.cd == null || !this.cd.d8) {
                    this.m9(b.oldRect, b.newRect);
                }
            };
            this.bd = (a, b) => this.l7(a, b.propertyName, b.oldValue, b.newValue);
            this.g7 = (a, b) => {
                if (this.cd != null) {
                    this.e1 = true;
                    this.cd.mk();
                }
                this.k3(b.action, b.position, b.count, b.propertyName);
            };
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.l7(a, b.propertyName, b.oldValue, b.newValue));
            this.nd = new Canvas();
            this.ce = new DoubleAnimator(0, 1, this.ho);
            let a = this.ce;
            a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.ks));
            this.g(Series.ox, ((() => {
                let $ret = new Binding(1, "Visibility");
                $ret.d = this;
                return $ret;
            })()));
            this.bo = this.bp();
            this.b2 = this.b3();
        }
        get_dataLegendKey() {
            if (!stringIsNullOrEmpty(this.name)) {
                return this.name;
            }
            return "Index___" + this.index.toString();
        }
        get dataLegendKey() {
            return this.get_dataLegendKey();
        }
        get hb() {
            return this.ha;
        }
        set hb(a) {
            this.ha = a;
            this.ce.u(this.ha);
        }
        provideRenderer(a) {
            this.hb = a;
        }
        jt() {
            return this.a6.a$r(this);
        }
        m3(a) {
        }
        m2(a) {
        }
        m4(a) {
        }
        ks(a, b) {
            this.g2 = this.ce.o;
        }
        get cn() {
            if (this.cm == null) {
                this.cm = new SRProvider(this.hb);
            }
            if (this.cm.l == null) {
                if (this.hb != null) {
                    this.cm.l = this.hb;
                }
                else if (this.cd != null && this.cd.cu != null && this.cd.cu.j != null && this.cd.cu.j.ae != null) {
                    this.cm.l = this.cd.cu.j.ae;
                }
            }
            return this.cm;
        }
        get a8() {
            if (this.a7 == null) {
                this.a7 = DVContainer.instance.createInstance(ISeriesVisualDataManager_$type, () => this.cn.q);
            }
            return this.a7;
        }
        get fe() {
            return this.a6.a$h;
        }
        get a6() {
            if (this.a5 == null) {
                this.a5 = DVContainer.instance.createInstance(ISeriesInteractionManager_$type, () => this.cn.n);
                if (this.toolTip != null) {
                    this.a5.a$aj(this, this.toolTip);
                }
            }
            return this.a5;
        }
        get d0() {
            return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
        }
        l2(a) {
        }
        l0() {
            this.kt(this.a1, this.a1);
            if (this.ck == null && this.b8 != null && this.itemsSource != null) {
                this.ck = this.b8.getFastItemsSource(this.itemsSource);
            }
            this.b0.av();
        }
        l1() {
            this.kz();
            if (this.ck != null && this.b8 != null && this.itemsSource != null) {
                this.ck = this.b8.releaseFastItemsSource(this.itemsSource);
            }
            this.b0.aw();
        }
        by() {
            return this.bx();
        }
        bx() {
            return new SeriesView(this);
        }
        e8() {
            return false;
        }
        hy(a, b) {
            return null;
        }
        onLegendItemOver(a) {
        }
        onLegendItemPointerUp(a) {
        }
        onLegendItemPointerDown(a) {
        }
        onLegendItemEnter(a) {
            if (this.dy && this.d0 && this.cd != null && (this.cd.bb == 0 || this.cd.bb == 2) && this.bk != 1) {
                this.a6.a$v(this, a, { $type: Point_$type, x: NaN, y: NaN }, false, true, false, a == null, this == this.cd.bo, false);
            }
        }
        onLegendItemLeave(a) {
            if (this.dy && this.d0 && this.cd != null && (this.cd.bb == 0 || this.cd.bb == 2) && this.bk != 1) {
                this.a6.a$v(this, a, { $type: Point_$type, x: NaN, y: NaN }, false, true, true, a == null, this == this.cd.bo, false);
            }
        }
        js(a) {
            if (!this.fd.containsKey(a)) {
                let b = a.substr(0, 1).toUpperCase() + a.substr(1);
                this.fd.addItem(a, b);
            }
            return this.fd.item(a);
        }
        hz(a, b, c) {
            let d = null;
            if (!this.fc.containsKey(b)) {
                d = new FastReflectionHelper(false, c);
                this.fc.addItem(b, d);
            }
            else {
                d = this.fc.item(b);
            }
            d.propertyName = c;
            let e = d.getPropertyValue(a);
            if (this.expectFunctions) {
                let func_ = e;
                let item_ = a;
                if ((typeof func_ === 'function')) {
                    e = func_.apply(item_);
                }
            }
            return e;
        }
        f7(a) {
            return this.hf(a);
        }
        hh(a) {
            return -1;
        }
        get_ea() {
            return false;
        }
        get ea() {
            return this.get_ea();
        }
        ar() {
            return null;
        }
        hf(a) {
            return -1;
        }
        p4() {
            let a = 1;
            let b = 1;
            if (this.cd != null) {
                a = this.cd.bx;
                b = this.cd.bz;
            }
            return this.p5(a, b);
        }
        p6(a, b) {
            return this.p5(a, b);
        }
        p5(a, b) {
            return new Thickness(1, 0, 0, 0, 0);
        }
        bv() {
            return 1;
        }
        bw() {
            return 1;
        }
        hv(a) {
            return null;
        }
        h0(a, b) {
            return a.hv(b);
        }
        ay(a, b, c, d) {
            return a.aw(b, c, d);
        }
        az(a, b, c, d) {
            return a.ax(b, c, d);
        }
        he() {
            return -1;
        }
        hi() {
            return -1;
        }
        hn() {
            return -1;
        }
        get container() {
            return this.cd;
        }
        get hasSubItems() {
            return this.c3();
        }
        c3() {
            return false;
        }
        forSubItems(a) {
            this.lc(a);
        }
        lc(a) {
        }
        ld(a) {
        }
        jr() {
            return null;
        }
        pd() {
            return this.o7;
        }
        pe() {
            return this.pc;
        }
        resolveLegendIndex() {
            return this.index;
        }
        bf() {
            return null;
        }
        get_dc() {
            return false;
        }
        get dc() {
            return this.get_dc();
        }
        get_c9() {
            return false;
        }
        get c9() {
            return this.get_c9();
        }
        get_c8() {
            return false;
        }
        get c8() {
            return this.get_c8();
        }
        get_db() {
            return false;
        }
        get db() {
            return this.get_db();
        }
        get_da() {
            return true;
        }
        get da() {
            return this.get_da();
        }
        get_isVertical() {
            return false;
        }
        get isVertical() {
            return this.get_isVertical();
        }
        get_dv() {
            return false;
        }
        get dv() {
            return this.get_dv();
        }
        get_de() {
            return false;
        }
        get de() {
            return this.get_de();
        }
        get_dd() {
            return false;
        }
        get dd() {
            return this.get_dd();
        }
        get_c6() {
            return false;
        }
        get c6() {
            return this.get_c6();
        }
        get_ek() {
            return false;
        }
        get ek() {
            return this.get_ek();
        }
        get_d2() {
            return false;
        }
        get d2() {
            return this.get_d2();
        }
        get_d1() {
            return false;
        }
        get d1() {
            return this.get_d1();
        }
        get_eh() {
            return false;
        }
        get eh() {
            return this.get_eh();
        }
        get_di() {
            return false;
        }
        get di() {
            return this.get_di();
        }
        get_dg() {
            return false;
        }
        get dg() {
            return this.get_dg();
        }
        get_el() {
            return false;
        }
        get el() {
            return this.get_el();
        }
        get_d9() {
            return false;
        }
        get d9() {
            return this.get_d9();
        }
        get_d8() {
            return false;
        }
        get d8() {
            return this.get_d8();
        }
        get_d6() {
            return false;
        }
        get d6() {
            return this.get_d6();
        }
        get_d5() {
            return false;
        }
        get d5() {
            return this.get_d5();
        }
        get_ej() {
            return false;
        }
        get ej() {
            return this.get_ej();
        }
        get_ei() {
            return false;
        }
        get ei() {
            return this.get_ei();
        }
        get_ef() {
            return false;
        }
        get ef() {
            return this.get_ef();
        }
        get_d7() {
            return false;
        }
        get d7() {
            return this.get_d7();
        }
        get_ed() {
            return false;
        }
        get ed() {
            return this.get_ed();
        }
        get_eb() {
            return false;
        }
        get eb() {
            return this.get_eb();
        }
        get_isStacked() {
            return false;
        }
        get isStacked() {
            return this.get_isStacked();
        }
        get_dq() {
            return false;
        }
        get dq() {
            return this.get_dq();
        }
        get_ec() {
            return false;
        }
        get ec() {
            return this.get_ec();
        }
        get_dh() {
            return false;
        }
        get dh() {
            return this.get_dh();
        }
        get_dw() {
            return false;
        }
        get dw() {
            return this.get_dw();
        }
        get_ee() {
            return false;
        }
        get ee() {
            return this.get_ee();
        }
        get_isValueOverlay() {
            return false;
        }
        get isValueOverlay() {
            return this.get_isValueOverlay();
        }
        be() {
            return null;
        }
        get_c4() {
            return false;
        }
        get c4() {
            return this.get_c4();
        }
        get_dt() {
            return false;
        }
        get dt() {
            return this.get_dt();
        }
        get_ds() {
            return false;
        }
        get ds() {
            return this.get_ds();
        }
        get_dr() {
            return false;
        }
        get dr() {
            return this.get_dr();
        }
        get_du() {
            return false;
        }
        get du() {
            return this.get_du();
        }
        get_dk() {
            return false;
        }
        get dk() {
            return this.get_dk();
        }
        get_dl() {
            return false;
        }
        get dl() {
            return this.get_dl();
        }
        f5(a, b, c, d, e) {
            return Number.POSITIVE_INFINITY;
        }
        f6(a, b, c, d, e, f, g) {
            return this.a6.a$j(this, a, b, c, d, e, f, g);
        }
        get_fa() {
            return false;
        }
        get fa() {
            return this.get_fa();
        }
        gn(a, b, c, d, e, f, g, h) {
            return this.a6.a$m(this, a, b, c, d, e, f, g, h);
        }
        gb(a, b, c, d, e, f, g, h) {
            return this.a6.a$l(this, a, b, c, d, e, f, g, h);
        }
        hm(a, b, c, d, e) {
            return this.a6.a$o(this, a, b, c, d, e);
        }
        ga(a) {
            return (a ? 10 : 3);
        }
        ah(a) {
            return null;
        }
        ai(a) {
            return null;
        }
        ew(a, b) {
            return this.a6.a$d(this, a, b);
        }
        aj(a, b, c, d, e, f) {
            return this.a6.a$a(this, a, b, c, d, e, f);
        }
        ey(a, b, c) {
            return this.a6.a$e(this, a, b, c);
        }
        ez(a, b) {
            return this.a6.a$f(this, a, b);
        }
        hk(a, b, c, d, e) {
            return this.a6.a$n(this, a, b, c, d, e);
        }
        f9(a, b) {
            return this.a6.a$k(this, a, b);
        }
        hl(a, b) {
            return -1;
        }
        hj(a, b) {
            return -1;
        }
        gl(a, b, c) {
            return NaN;
        }
        pq(a, b, c) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        pz(a) {
            return Rect.empty;
        }
        ak(a) {
            let b = this.pz(a);
            if (!b.isEmpty) {
                let c = new Array(1);
                c[0] = b;
                return c;
            }
            return null;
        }
        p0(a) {
            return this.pz(this.pt(a));
        }
        al(a) {
            return this.ak(this.pt(a));
        }
        p1(a) {
            return Rect.empty;
        }
        p2(a) {
            return this.p1(this.pt(a));
        }
        e0(a, b) {
            return this.a6.a$g(this, a, b);
        }
        ps(a, b, c, d, e, f, g, h, i) {
            return this.a6.a$al(this, a, b, c, d, e, f, g, h, i);
        }
        gh(a, b, c) {
            return this.gl(a, b, c);
        }
        pm(a, b, c) {
            return this.pq(a, b, c);
        }
        gj(a, b, c) {
            return this.gl(a, b, c);
        }
        po(a, b, c) {
            return this.pq(a, b, c);
        }
        pr(a, b, c) {
            let d = this.pt(a);
            return this.pq(d, b, c);
        }
        gm(a, b, c) {
            let d = this.pt(a);
            return this.gl(d, b, c);
        }
        pn(a, b, c) {
            let d = this.pt(a);
            return this.pm(d, b, c);
        }
        gi(a, b, c) {
            let d = this.pt(a);
            return this.gh(d, b, c);
        }
        pp(a, b, c) {
            let d = this.pt(a);
            return this.po(d, b, c);
        }
        gk(a, b, c) {
            let d = this.pt(a);
            return this.gj(d, b, c);
        }
        hg(a) {
            let b = this.pt(a);
            return this.hf(b);
        }
        gc() {
            return 0;
        }
        f8(a) {
            let b = this.pt(a);
            return this.f7(b);
        }
        hw(a) {
            let b = this.pt(a);
            return this.hv(b);
        }
        c1(a, b, c, d) {
            return false;
        }
        gq(a) {
            let b = this.i2();
            if (b == null) {
                return NaN;
            }
            if (a.content == null) {
                return NaN;
            }
            if (a.content.item == null) {
                return NaN;
            }
            return FastItemColumn.i(this.hy(a.content.item, b));
        }
        i2() {
            return null;
        }
        raisePropertyChanged(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        get_hasMarkers() {
            return false;
        }
        get hasMarkers() {
            return this.get_hasMarkers();
        }
        lg() {
        }
        lh() {
            this.lg();
        }
        pa() {
            return null;
        }
        pb() {
            return null;
        }
        nh() {
            return null;
        }
        f4() {
            return NaN;
        }
        pt(a) {
            let b = this.cd != null ? this.cd.tc : this.b0.bu;
            let c = this.b0.bv;
            let d = { $type: Point_$type, x: c.left + c.width * (a.x - b.left) / b.width, y: c.top + c.height * (a.y - b.top) / b.height };
            return d;
        }
        pl(a) {
            let b = this.cd != null ? this.cd.tc : this.b0.bu;
            let c = this.b0.bv;
            let d = b.left + (a.x - c.left) / c.width * b.width;
            let e = b.top + (a.y - c.top) / c.height * b.height;
            return { $type: Point_$type, x: d, y: e };
        }
        h1(a, b) {
            let c = this.b0.c(a);
            let d = c != null ? c.item : null;
            if (d == null) {
                let e = this.pt(b);
                d = this.hv(e);
            }
            return d;
        }
        eo(a) {
            return false;
        }
        ap(a) {
            return new AxisRange(NaN, NaN);
        }
        aq(a) {
            return new AxisRange(NaN, NaN);
        }
        ao(a, b, c) {
            this.k9();
            if (!this.isVertical) {
                if (this.fx == 0 && this.f0 == 0) {
                    return a;
                }
                let d = new ScalerParams(0, c, this.cd.to, b.cg, this.getEffectiveViewport());
                d.b = this.ge();
                let e = b.ei(a.c, d);
                let f = b.ei(a.b, d);
                if (b.cg) {
                    f += this.fx;
                    e -= this.f0;
                }
                else {
                    f -= this.f0;
                    e += this.fx;
                }
                let g = b.el(e, d);
                let h = b.el(f, d);
                return new AxisRange(g, h);
            }
            else {
                if (this.fy == 0 && this.fz == 0) {
                    return a;
                }
                let i = new ScalerParams(0, c, this.cd.to, b.cg, this.getEffectiveViewport());
                i.b = this.ge();
                let j = b.ei(a.c, i);
                let k = b.ei(a.b, i);
                if (!b.cg) {
                    k += this.fz;
                    j -= this.fy;
                }
                else {
                    k -= this.fy;
                    j += this.fz;
                }
                let l = b.el(j, i);
                let m = b.el(k, i);
                return new AxisRange(l, m);
            }
        }
        k9() {
            if (isNaN_(this.f0)) {
                let a = this.p6(1, 1);
                this.f0 = a.top;
                if (isNaN_(this.f0)) {
                    this.f0 = 0;
                }
            }
            if (isNaN_(this.fx)) {
                let b = this.p6(1, 1);
                this.fx = b.bottom;
                if (isNaN_(this.fx)) {
                    this.fx = 0;
                }
            }
            if (isNaN_(this.fy)) {
                let c = this.p6(1, 1);
                this.fy = c.left;
                if (isNaN_(this.fy)) {
                    this.fy = 0;
                }
            }
            if (isNaN_(this.fz)) {
                let d = this.p6(1, 1);
                this.fz = d.right;
                if (isNaN_(this.fz)) {
                    this.fz = 0;
                }
            }
        }
        ml(a) {
            this.eu = false;
            if (this.cd != null) {
                this.cd.ar.ac(0, this, this.as, a);
                if (this.renderRequested != null) {
                    let b = new RenderRequestedEventArgs();
                    b.animate = a;
                    this.renderRequested(this, b);
                    a = b.animate;
                }
            }
        }
        k6(a) {
            this.mm(a);
            this.eu = false;
        }
        mm(a) {
            if (this.e4 && !this.es()) {
                this.e3 = false;
            }
        }
        kw() {
            if (this.e2 && !this.e4) {
                this.ce.r = truncate(Math.max(this.go(), this.gp()));
                this.k1();
            }
        }
        k1() {
        }
        mn(a, b) {
            if (this.bz == null) {
                this.bz = this.bx();
                this.bz.q = true;
                if (this.cd != null) {
                    this.cd.am.l(this.bz);
                    this.bz.a = this.cd.am;
                }
                this.bz.as();
            }
            this.bz.bu = a;
        }
        mk(a, b, c, d, e) {
            this.a6.a$t(this, a, b, d, e);
        }
        getEffectiveViewport1(a) {
            if (this.cd == null) {
                return Rect.empty;
            }
            if (a.p) {
                return this.cd.td;
            }
            if (a.q) {
                if (this.cd.td.isEmpty) {
                    return this.cd.td;
                }
                let b = this.cd.ti(a.bu, this.cd.to, this.cd.td);
                return b;
            }
            return this.cd.td;
        }
        pv(a) {
            if (this.cd == null || this.cd.tc.isEmpty) {
                return a.bu;
            }
            if (a.p) {
                return a.bu;
            }
            if (a.q) {
                if (this.cd.td.isEmpty) {
                    return a.bu;
                }
                if (this.cd.tc.equals1(this.cd.to)) {
                    return a.bu;
                }
                let b = this.cd.ti(a.bu, this.cd.to, this.cd.td);
                let c = this.cd.tg(a.bu, b, this.cd.s9);
                return c;
            }
            return this.cd.tc;
        }
        py(a) {
            if (!this.p3.equals1(a)) {
                return Rect.empty;
            }
            return this.getEffectiveViewport();
        }
        px(a) {
            if (this.cd == null || this.cd.td.isEmpty) {
                return Rect.empty;
            }
            let b = this.cd.td;
            let c = a.bu;
            let d = (b.left - c.left) / c.width;
            let e = (b.top - c.top) / c.height;
            let f = (b.right - c.left) / c.width;
            let g = (b.bottom - c.top) / c.height;
            return new Rect(0, d, e, f - d, g - e);
        }
        getEffectiveViewport() {
            return this.getEffectiveViewport1(this.b0);
        }
        mf() {
            this.mg(null);
        }
        get_c2() {
            return false;
        }
        get c2() {
            return this.get_c2();
        }
        get_c5() {
            return this.bk == 2 || this.bk == 4;
        }
        get c5() {
            return this.get_c5();
        }
        mg(a) {
            if (this.d0) {
                this.a6.a$ae(this, a);
            }
        }
        mh(a) {
            if (this.d0) {
                this.a6.a$af(this, a, this.cd);
            }
        }
        getViewInfo(a, b) {
            a = this.b0.bu;
            b = this.b0.bv;
            return {
                p0: a,
                p1: b
            };
        }
        fb(a, b, c) {
            if (a.width == 0 || a.height == 0) {
                return false;
            }
            if (this.dv) {
                return true;
            }
            return this._visibility == 0;
        }
        k0(a, b) {
            if (a) {
                this.e1 = true;
            }
        }
        cw() {
            return this.cx(this.b0);
        }
        cx(a) {
            let b = a.bu;
            let c = a.bv;
            if (!this.fb(b, c, a)) {
                this.k0(true, a);
                return true;
            }
            return false;
        }
        l3(a, b) {
            this.b0.bu = b;
            this.m8(a, b);
            if (this.cd != null) {
                this.cd.ar.ae(0, this, this.as, b);
                if (a.isEmpty || a.width == 0 || a.height == 0) {
                    this.cd.md();
                }
            }
        }
        m9(a, b) {
        }
        m8(a, b) {
        }
        get e1() {
            return this.cs;
        }
        set e1(a) {
            this.cs = a;
        }
        lb(a) {
            a.k7();
        }
        lt() {
            this.ev = false;
            this.e1 = true;
            if (this.cd != null) {
                this.cd.mk();
            }
        }
        ln() {
            this.mz();
            this.l4();
        }
        ls() {
            this.ev = false;
            this.e1 = true;
            if (this.cd != null) {
                this.cd.mj();
            }
        }
        get_dz() {
            return true;
        }
        get dz() {
            return this.get_dz();
        }
        get_isUsableInLegend() {
            return true;
        }
        get isUsableInLegend() {
            return this.get_isUsableInLegend();
        }
        ly() {
            this.b0.ao();
        }
        lu() {
            this.l4();
        }
        l4() {
            this.b0.az();
            this.l6(false);
            this.m0();
        }
        l5() {
            this.b0.az();
            this.l6(true);
        }
        en() {
            return false;
        }
        l6(a) {
            if (this.as == null || this.as.c) {
                return;
            }
            let b = this.b0.bu;
            let c = this.b0.bv;
            let d = this.fb(b, c, this.b0);
            let e = this.cd != null && this.cd.en && this.bz != null && this.fb(this.bz.bu, this.bz.bv, this.bz);
            if (d) {
                if (a) {
                    this.eu = !this.en();
                    this.k6(false);
                }
                else {
                    this.ml(false);
                    this.eu = !this.en();
                }
            }
            if (e) {
                if (!this.e1) {
                    this.ls();
                    this.ev = true;
                }
            }
        }
        get e3() {
            return this.ct;
        }
        set e3(a) {
            this.ct = a;
        }
        get e4() {
            if (this.e3 == false) {
                return false;
            }
            return this.gp() > 0;
        }
        v() {
            super.v();
            this.raisePropertyChanged("Opacity", this._opacity, this._opacity);
        }
        w(a, b) {
            super.w(a, b);
            this.raisePropertyChanged("Visibility", enumGetBox(Visibility_$type, a), enumGetBox(Visibility_$type, b));
        }
        lx() {
        }
        l7(a, b, c, d) {
            switch (b) {
                case "SyncLink":
                    if (typeCast(SyncLink.$, c) !== null) {
                        let e = c;
                        e.propertyUpdated = delegateRemove(e.propertyUpdated, this.bd);
                        this.me(typeCast(IFastItemsSourceProvider_$type, c));
                    }
                    if (typeCast(SyncLink.$, d) !== null) {
                        let f = d;
                        f.propertyUpdated = delegateCombine(f.propertyUpdated, this.bd);
                        this.md(typeCast(IFastItemsSourceProvider_$type, d));
                    }
                    if (this.index == -1) {
                        this.index = XamDataChart.vv(this);
                    }
                    break;
                case Series.$$p[25]:
                    this.bs = this.bu();
                    this.my();
                    this.k7();
                    this.l4();
                    break;
                case SeriesViewer.$$p[1]:
                case SeriesViewer.$$p[15]:
                case SeriesViewer.$$p[14]:
                case SeriesViewer.$$p[16]:
                    this.k7();
                    break;
                case "HighlightingMode":
                    this.bk = this.bl();
                    break;
                case "SeriesViewer":
                    if (typeCast(SeriesViewer.$, c) !== null) {
                        this.hb = null;
                        let g = c;
                        g.windowRectChanged = delegateRemove(g.windowRectChanged, this.cl);
                        let h = c.series;
                        h.collectionChanged = delegateRemove(h.collectionChanged, this.fi);
                        let i = c;
                        i.propertyUpdated = delegateRemove(i.propertyUpdated, this.bd);
                        c.ar.ad(0, this);
                        this.mg(c);
                        this.b0.ak(c);
                    }
                    if (typeCast(SeriesViewer.$, d) !== null) {
                        this.hb = d.cu.j.ae;
                        let j = d;
                        j.windowRectChanged = delegateCombine(j.windowRectChanged, this.cl);
                        let k = d.series;
                        k.collectionChanged = delegateCombine(k.collectionChanged, this.fi);
                        let l = d;
                        l.propertyUpdated = delegateCombine(l.propertyUpdated, this.bd);
                        this.as = d.ar.k(0, this, runOn(this, this.k6));
                        this.b0.ag(d);
                        this.bk = this.bl();
                        this.mw();
                        if (this.eh) {
                            this.fv = this.gw();
                        }
                        this.k8();
                        this.hq = this.cd.hu();
                    }
                    if (this.cd == null) {
                        this.externalObject._ensureTooltipDestroyed();
                        this.ce.w();
                    }
                    if (this.index != -1) {
                        this.mz();
                    }
                    if (this.index == -1 || d == null) {
                        this.index = XamDataChart.vv(this);
                    }
                    this.a1 = this.a2();
                    this.ku(typeCast(SeriesViewer.$, c), typeCast(SeriesViewer.$, d));
                    break;
                case Series.$$p[36]:
                    if (this.b0 != null) {
                        this.b0.ay();
                    }
                    break;
                case "HitTestMode":
                    this.bo = this.bp();
                    break;
                case "ActualHitTestMode":
                    if (this.cd != null) {
                        this.cd.oj();
                    }
                    break;
                case "LegendItemBadgeTemplate":
                case "LegendItemTemplate":
                case Series.$$p[20]:
                case Series.$$p[19]:
                    this.mz();
                    this.l4();
                    break;
                case Series.$$p[22]:
                    this.mx();
                    break;
                case Series.$$p[5]:
                case Series.$$p[9]:
                case Series.$$p[26]:
                case Series.$$p[10]:
                case Series.$$p[11]:
                    this.k7();
                    this.l4();
                    break;
                case "Index":
                    if (typeGetValue(c) != typeGetValue(d)) {
                        this.lx();
                        this.bs = this.bu();
                        this.my();
                        this.mx();
                        this.k7();
                        this.l4();
                    }
                    break;
                case "RadiusX":
                case "RadiusY":
                case "RoundedCornersLocation":
                    this.l4();
                    break;
                case Series.$$p[8]:
                    this.mw();
                    this.l4();
                    break;
                case Series.$$p[34]:
                case Series.$$p[12]:
                case Series.$$p[23]:
                    this.l4();
                    break;
                case Series.$$p[17]:
                    this.ly();
                    this.l4();
                    break;
                case Series.$$p[44]:
                case Series.$$p[29]:
                case Series.$$p[28]:
                case Series.$$p[30]:
                case Series.$$p[31]:
                    this.l4();
                    break;
                case Series.$$p[35]:
                    this.my();
                    if (this.a9 == 1) {
                        this.m0();
                    }
                    break;
                case Series.$$p[2]:
                case Series.$$p[3]:
                    this.l4();
                    break;
                case Series.$$p[1]:
                case Series.$$p[6]:
                case Series.$$p[7]:
                    this.o8 = this.o3;
                    this.o9 = this.o6;
                    this.f2 = this.fw;
                    this.o5 = this.o6;
                    this.o4 = this.o3;
                    this.l4();
                    this.b0.bj();
                    if (this.toolTip != null && this.a5 != null) {
                        this.a6.a$aj(this, this.toolTip);
                    }
                    break;
                case "Visibility":
                    this.b0.bk();
                    break;
                case "ItemsSource":
                    if (this.b8 != null) {
                        this.md(this.b8);
                    }
                    break;
                case Series.$$p[13]:
                    if (c != d && d != null) {
                        this.e3 = true;
                    }
                    this.lt();
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        let m = c;
                        m.event = delegateRemove(m.event, this.g7);
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        let n = d;
                        n.event = delegateCombine(n.event, this.g7);
                    }
                    break;
                case "Legend":
                    if (d != null) {
                        if (a == this) {
                            d.seriesOwner = this;
                        }
                        else if (typeCast(XamDataChart.$, a) !== null) {
                            d.chartOwner = a;
                        }
                    }
                    this.a1 = this.a2();
                    break;
                case "ActualLegend":
                    this.c7 = this.a1 == null ? false : this.a1.isFinancial;
                    this.kt(typeCast(IChartLegend_$type, c), typeCast(IChartLegend_$type, d));
                    break;
                case "LegendItem":
                    this.kv(typeCast(Control.$, c), typeCast(Control.$, d));
                    break;
                case Series.$$p[21]:
                    this.b0.at();
                    break;
                case Series.$$p[37]:
                    if (this.a5 != null) {
                        this.a6.a$aj(this, this.toolTip);
                    }
                    break;
                case "CrosshairPoint":
                    if (this.cd != null) {
                        this.m6(this.cd.s0);
                    }
                    if (this.cd != null) {
                        if (!this.cy) {
                            this.cd.ob(this, this.hv(this.cd.s0));
                        }
                    }
                    break;
                case Series.$$p[27]:
                    this.fv = this.gw();
                    break;
                case "ActualResolution":
                    this.ml(false);
                    this.ls();
                    break;
                case Series.$$p[48]:
                    this.f0 = this.g6;
                    if (this.cd != null) {
                        this.cd.l7();
                    }
                    break;
                case Series.$$p[45]:
                    this.fx = this.g3;
                    if (this.cd != null) {
                        this.cd.l7();
                    }
                    break;
                case Series.$$p[38]:
                case Series.$$p[39]:
                    this.ce.w();
                    this.ce.r = this.ho;
                    this.ce.b = this.cf;
                    this.ml(false);
                    break;
                case "DiscreteLegendItemTemplate":
                    this.ml(false);
                    break;
                case "VisibilityProxy":
                    if (c != d) {
                        this.ml(false);
                    }
                    this.ls();
                    this.b0.bk();
                    break;
                case Series.$$p[18]:
                    this.bk = this.bl();
                    this.ml(false);
                    break;
                case Series.$$p[14]:
                    this.ft = isNaN_(this.gr) ? 0.2 : this.gr;
                    break;
                case Series.$$p[33]:
                    this.k8();
                    break;
                case "FinalValue":
                    this.m5();
                    break;
                case Series.$$p[49]:
                    this.b2 = this.b3();
                    break;
            }
        }
        my() {
            let a = this.bs;
            let b = this.g1;
            if (isNaN_(b)) {
                b = DeviceUtils.g(2);
            }
            if (a == 2) {
                b = 1;
            }
            if (this.fw != b) {
                this.fw = b;
            }
            this.f2 = this.fw;
        }
        m6(a) {
            if (this.cd != null && this.cd.eh && this.bk != 1 && this.cd.ee) {
                if (isNaN_(a.x) || isNaN_(a.y)) {
                    this.a6.a$v(this, null, a, false, false, false, false, this.cd.bo == this, true);
                }
                else {
                    this.a6.a$v(this, this.hv(a), a, false, false, false, false, this.cd.bo == this, false);
                }
            }
        }
        k8() {
            if (this.cd != null && (this.externalObject.owner)) {
                let sv_ = this.cd;
                this.externalObject.owner._ensureDefaultTooltip(this.externalObject);
                ;
            }
        }
        get_dy() {
            return false;
        }
        get dy() {
            return this.get_dy();
        }
        k5(a) {
            a.cy = true;
        }
        get b8() {
            return this.b7;
        }
        set b8(a) {
            if (this.b8 != a) {
                let b = this.b8;
                this.b7 = a;
                this.raisePropertyChanged("SyncLink", b, this.b8);
            }
        }
        get cd() {
            return this.cc;
        }
        set cd(a) {
            if (this.cd != a) {
                let b = this.cd;
                this.cc = a;
                this.raisePropertyChanged("SeriesViewer", b, this.cc);
            }
        }
        get cb() {
            return typeCast(XamDataChart.$, this.cd);
        }
        set cb(a) {
            this.cd = a;
        }
        get itemsSource() {
            return this.c(Series.n3);
        }
        set itemsSource(a) {
            this.h(Series.n3, a);
        }
        k3(a, b, c, d) {
            if (this.cd != null) {
                this.cd.oc();
            }
        }
        get legend() {
            return this.c(Series.n9);
        }
        set legend(a) {
            this.h(Series.n9, a);
        }
        get nc() {
            if (this.na == null && this.a1 != null) {
                this.na = this.nb();
            }
            return this.na;
        }
        set nc(a) {
            if (this.nc != a) {
                let b = this.nc;
                this.na = a;
                this.raisePropertyChanged("LegendItem", b, this.na);
            }
        }
        h2() {
            return this.nb();
        }
        nb() {
            let a = typeCast(ContentControl.$, this.na);
            let b = this.legendItemTemplate;
            if (b == null) {
                b = this.b0.bl(this.b6);
            }
            if (b != null) {
                if (a == null) {
                    a = new ContentControl();
                }
                a.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = null;
                    return $ret;
                })());
                a.ah = b;
            }
            else {
                a = null;
            }
            return a;
        }
        get a1() {
            return this.a0;
        }
        set a1(a) {
            if (this.a1 != a) {
                let b = this.a0;
                this.a0 = a;
                this.raisePropertyChanged("ActualLegend", b, this.a0);
            }
        }
        get legendItemBadgeTemplate() {
            return this.c(Series.n6);
        }
        set legendItemBadgeTemplate(a) {
            this.h(Series.n6, a);
        }
        ng() {
            return this.legendItemBadgeTemplate;
        }
        get legendItemTemplate() {
            return this.c(Series.n7);
        }
        set legendItemTemplate(a) {
            this.h(Series.n7, a);
        }
        get nf() {
            return this.c(Series.nu);
        }
        set nf(a) {
            this.h(Series.nu, a);
        }
        get index() {
            return typeGetValue(this.c(Series.ny));
        }
        set index(a) {
            this.h(Series.ny, a);
        }
        m7() {
            this.mz();
        }
        k7() {
            this.mz();
        }
        mz() {
            this.ls();
            if (this.index < 0) {
                return;
            }
            if (this.o7 != null) {
                this.b0.a7();
                this.b0.ah();
            }
            else {
                this.o3 = this.cd == null ? null : this.cd.sg(this.index);
            }
            if (this.bs == 2) {
                this.b0.a8();
                this.o6 = this.o3;
            }
            else {
                if (this.pc != null) {
                    this.b0.a8();
                    this.b0.ai();
                }
                else {
                    this.o6 = this.cd == null ? null : this.cd.sm(this.index);
                }
            }
            if ((this.ed || this.dw) && this.d9) {
                this.o3 = this.o6;
            }
            else if ((this.ed || this.dw) && this.dd) {
                this.o6 = this.o3;
            }
            else if ((this.ed || this.dw) && this.d1) {
                this.o6 = this.o3;
            }
            else if (this.ej && this.legendItemBadgeShape == 2) {
                this.o3 = this.o6;
            }
        }
        cv() {
            return this.ce.f();
        }
        mu() {
            this.ce.v();
        }
        get fv() {
            if (!this.cr) {
                this.cr = true;
                this.fl = this.gw();
            }
            return this.fl;
        }
        set fv(a) {
            let b = this.fl;
            this.fl = a;
            if (b != this.fl) {
                this.raisePropertyChanged("ActualResolution", b, this.fl);
            }
        }
        gw() {
            if (!isNaN_(this.gv)) {
                return this.gv;
            }
            return DeviceUtils.g(1);
        }
        get f0() {
            return this.fp;
        }
        set f0(a) {
            this.fp = a;
        }
        get fx() {
            return this.fm;
        }
        set fx(a) {
            this.fm = a;
        }
        get fy() {
            return this.fn;
        }
        set fy(a) {
            this.fn = a;
        }
        get fz() {
            return this.fo;
        }
        set fz(a) {
            this.fo = a;
        }
        get bk() {
            return this.bj;
        }
        set bk(a) {
            let b = this.bj;
            this.bj = a;
            if (b != this.bj) {
                this.raisePropertyChanged("ActualHighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.bj));
            }
        }
        bl() {
            if (!this.dy) {
                return 1;
            }
            if (this.cd != null) {
                if (this.cd.bv != 1 && this.cd.bv != 0 && !this.dj) {
                    return this.cd.bv;
                }
            }
            if (this.dx) {
                return 2;
            }
            return 1;
        }
        eg(a) {
            switch (a) {
                case 2:
                case 4: return true;
            }
            return false;
        }
        get ft() {
            return this.fk;
        }
        set ft(a) {
            let b = this.fk;
            this.fk = a;
            if (b != this.fk) {
                this.raisePropertyChanged("ActualHighlightingFadeOpacity", b, this.fk);
            }
        }
        get_dp() {
            return true;
        }
        get dp() {
            return this.get_dp();
        }
        mw() {
            let a = (typeCast(XamDataChart.$, this.cd));
            if (a != null) {
                this.fs = isNaN_(this.f1) ? a.t9.fp : this.f1;
            }
        }
        mx() {
            this.fu = isNaN_(this.gs) ? this.gx() : this.gs;
        }
        gx() {
            return 1;
        }
        get dm() {
            return this.cq;
        }
        set dm(a) {
            this.cq = a;
        }
        get b2() {
            return this.b1;
        }
        set b2(a) {
            this.b1 = a;
        }
        b3() {
            if (this.b4 == 0) {
                return 1;
            }
            return this.b4;
        }
        get bs() {
            return this.br;
        }
        set bs(a) {
            this.br = a;
        }
        bu() {
            if (this.bt == 0) {
                return 1;
            }
            return this.bt;
        }
        au(a) {
            return ((() => {
                let $ret = new DataContext();
                $ret.series = this;
                $ret.item = a;
                return $ret;
            })());
        }
        b9() {
            return 1;
        }
        mj() {
            this.b0.a3();
        }
        mo() {
            this.e3 = true;
            this.ml(true);
        }
        mi() {
            this.kx();
        }
        kx() {
        }
        li() {
        }
        static *_fg(a, b, c) {
            for (let d = b; d < c; d++) {
                yield a(d);
            }
        }
        static fg(a, b, c) {
            return toEnum(() => Series._fg(a, b, c));
        }
        static ff(a, b) {
            return Series.fg(a, 0, b);
        }
        bh() {
            return this.bg;
        }
        mp(a) {
            this.m1(a);
        }
        go() {
            return this.ho;
        }
        gp() {
            return this.hp;
        }
        get_e5() {
            return this.cu;
        }
        set_e5(a) {
            this.cu = a;
        }
        get e5() {
            return this.get_e5();
        }
        set e5(a) {
            this.set_e5(a);
        }
        get eq() {
            return this.e5;
        }
        ky() {
            this.a6.a$s();
        }
        aw(a, b, c) {
            return null;
        }
        ax(a, b, c) {
            return null;
        }
        lz(a, b, c, d) {
            this.a6.a$y(this, a, b, c, d);
        }
        mt(a) {
            this.a6.a$ai(this, a);
        }
        ku(a, b) {
            if (this.a1 != null && this.nc != null) {
                if (b == null && this.a1.containsChild(this.nc)) {
                    this.a1.removeChild(this.nc);
                }
                if (b != null && !this.a1.containsChild(this.nc) && this.p7 != 1) {
                    this.a1.addChildInOrder(this.nc, this);
                }
            }
        }
        kz() {
            if (this.a1 == null || this.nc == null) {
                return;
            }
            this.a1.removeChild(this.nc);
        }
        kt(a, b) {
            if (this.nc != null) {
                if (a != null && a.containsChild(this.nc)) {
                    a.removeChild(this.nc);
                }
                if (this.cd != null && b != null && !b.containsChild(this.nc) && this.p7 != 1) {
                    b.addChildInOrder(this.nc, this);
                }
            }
        }
        kv(a, b) {
            if (this.a1 != null) {
                if (a != null && this.a1.containsChild(a)) {
                    this.a1.removeChild(a);
                }
                if (this.cd != null && b != null && this.p7 != 1) {
                    this.a1.addChildInOrder(b, this);
                }
            }
        }
        me(a) {
            this.ck = a.releaseFastItemsSource(this.itemsSource);
        }
        md(a) {
            this.ck = a.getFastItemsSource(this.itemsSource);
        }
        a2() {
            if (this.legend != null) {
                return this.legend;
            }
            if (this.cd != null && this.cd.legend != null) {
                return this.cd.legend;
            }
            return null;
        }
        es() {
            return false;
        }
        ep(a) {
            return (a && this.go() > 0) || this.cv() || (this.e4 && this.es() && this.gp() > 0);
        }
        k4(a) {
            if (a != null) {
                a.bz(this);
            }
        }
        mc(a) {
            if (a != null) {
                a.cs(this);
            }
        }
        bi() {
            return this.b0.g();
        }
        m1(a) {
            this.b0.a9(a);
        }
        ms(a, b) {
            this.a6.a$ah(this, a, b);
        }
        get_e7() {
            return false;
        }
        get e7() {
            return this.get_e7();
        }
        l8(a, b) {
            this.b0.ar(a, b);
        }
        ma(a) {
            this.l3(this.p3, a);
        }
        lf(a) {
            if (this.ck != null) {
                this.ck.handleCollectionChanged(a);
            }
        }
        lq(a, b, c) {
            this.lf(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        lm() {
            this.lf(new NotifyCollectionChangedEventArgs(0, 4));
        }
        lo(a, b) {
            this.lf(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        lp(a, b) {
            this.lf(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        mv() {
            this.ml(false);
        }
        ex(a, b) {
            return false;
        }
        get_coercionMethods() {
            return this._coercionMethods;
        }
        set_coercionMethods(a) {
            this._coercionMethods = a;
        }
        get coercionMethods() {
            return this.get_coercionMethods();
        }
        set coercionMethods(a) {
            this.set_coercionMethods(a);
        }
        get_expectFunctions() {
            return this.cp;
        }
        set_expectFunctions(a) {
            let b = this.cp;
            this.cp = a;
            if (b != this.cp) {
                this.raisePropertyChanged("ExpectFunctions", b, this.cp);
            }
        }
        get expectFunctions() {
            return this.get_expectFunctions();
        }
        set expectFunctions(a) {
            this.set_expectFunctions(a);
        }
        at(a, b) {
            return null;
        }
        get bq() {
            return this.bn;
        }
        set bq(a) {
            let b = this.bn;
            this.bn = a;
            if (b != this.bn) {
                this.raisePropertyChanged("HitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.bn));
            }
        }
        bp() {
            return this.bq == 0 ? 2 : this.bq;
        }
        get bo() {
            return this.bm;
        }
        set bo(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.raisePropertyChanged("ActualHitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.bm));
            }
        }
        ch(a) {
            if (a == null) {
                return this.ck.registerColumn(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.cg(a, this.coercionMethods);
            b = c.a;
            return this.ck.registerColumn(a, b, this.expectFunctions);
        }
        ci(a) {
            if (a == null) {
                return this.ck.registerColumnInt(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.cg(a, this.coercionMethods);
            b = c.a;
            return this.ck.registerColumnInt(a, b, this.expectFunctions);
        }
        cj(a) {
            if (a == null) {
                return this.ck.registerColumnObject(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.cg(a, this.coercionMethods);
            b = c.a;
            return this.ck.registerColumnObject(a, b, this.expectFunctions);
        }
        get p3() {
            return this.b0 != null ? this.b0.bu : Rect.empty;
        }
        get_d4() {
            return false;
        }
        get d4() {
            return this.get_d4();
        }
        get_d3() {
            return false;
        }
        get d3() {
            return this.get_d3();
        }
        mr(a) {
        }
        mq(a, b) {
        }
        k2(a, b) {
            this.a8.copyVisualData(a, b);
        }
        hu() {
            let a = this.a8.exportVisualData(this, this.p3);
            this.la(a);
            this.b0.al(a);
            return a;
        }
        la(a) {
        }
        lk(a) {
            if (this.pk.x != a.x || this.pk.y != a.y) {
                this.pk = a;
                this.lw(a);
            }
        }
        lw(a) {
        }
        ll() {
        }
        lr() {
        }
        an(a) {
            return null;
        }
        ag() {
            return null;
        }
        ge() {
            return NaN;
        }
        static gf(a, b) {
            if (a == null || a.count == 0) {
                return NaN;
            }
            if (b != null && b.i$b != null) {
                if (b.i$b.count != a.count) {
                    return NaN;
                }
                for (let c = 0; c < a.count; c++) {
                    if (!isNaN_(a.item(b.i$b._inner[c])) && a.item(b.i$b._inner[c]) != 0) {
                        return a.item(b.i$b._inner[c]);
                    }
                }
            }
            for (let d = 0; d < a.count; d++) {
                if (!isNaN_(a.item(d)) && a.item(d) != 0) {
                    return a.item(d);
                }
            }
            return NaN;
        }
        static gg(a, b) {
            if (a == null || a.count == 0) {
                return NaN;
            }
            if (b != null && b.i$b != null) {
                if (b.i$b.count != a.count) {
                    return NaN;
                }
                for (let c = 0; c < a.count; c++) {
                    if (!isNaN_(a.item(b.i$b._inner[c])) && a.item(b.i$b._inner[c]) != 0) {
                        return a.item(b.i$b._inner[c]);
                    }
                }
            }
            for (let d = 0; d < a.count; d++) {
                if (!isNaN_(a.item(d)) && a.item(d) != 0) {
                    return a.item(d);
                }
            }
            return NaN;
        }
        lv() {
        }
        get f3() {
            return this.fq;
        }
        set f3(a) {
            let b = this.f3;
            if (a != b) {
                this.fq = a;
                this.raisePropertyChanged("FinalValue", b, this.f3);
            }
        }
        get gu() {
            return this.fr;
        }
        set gu(a) {
            let b = this.gu;
            if (a != b) {
                this.fr = a;
                this.raisePropertyChanged("PercentChange", b, this.gu);
            }
        }
        m5() {
            let a = this.ge();
            this.gu = (this.f3 - a) / a * 100;
        }
        hx(a) {
            return null;
        }
        get ij() {
            return !stringIsNullOrWhiteSpace(this.cn.bz) ? this.cn.bz : "Open";
        }
        get h7() {
            return !stringIsNullOrWhiteSpace(this.cn.bw) ? this.cn.bw : "Close";
        }
        get h8() {
            return !stringIsNullOrWhiteSpace(this.cn.bx) ? this.cn.bx : "High";
        }
        get ih() {
            return !stringIsNullOrWhiteSpace(this.cn.by) ? this.cn.by : "Low";
        }
        get iq() {
            return !stringIsNullOrWhiteSpace(this.cn.b0) ? this.cn.b0 : "Volume";
        }
        get ip() {
            return !stringIsNullOrWhiteSpace(this.cn.b9) ? this.cn.b9 : "Value";
        }
        get il() {
            return !stringIsNullOrWhiteSpace(this.cn.m) ? this.cn.m : "Radius";
        }
        m0() {
            this.ne = this.ng();
            this.b0.bj();
        }
        am() {
            let a = this.legendItemBadgeShape;
            if (a == 0) {
                a = this.bb();
            }
            let b = 0;
            if (a == 3) {
                if (this.dt || this.el) {
                    b = 6;
                }
                else if (this.dr) {
                    b = 7;
                }
                else {
                    b = 5;
                }
            }
            else if (a == 4) {
                if (this.hasMarkers && !this.ds) {
                    b = 8;
                }
                else {
                    b = 0;
                }
            }
            else if (a == 2) {
                if (this.hasMarkers && !this.dc) {
                    b = 1;
                }
                else {
                    b = 2;
                }
            }
            else if (a == 1) {
                b = 0;
            }
            else if (a == 5) {
                b = 3;
            }
            else if (a == 6) {
                b = 4;
            }
            else if (a == 7) {
                b = 9;
            }
            return b;
        }
        ba(a) {
            return a;
        }
        bb() {
            if (this.dd || this.dg || this.di || this.d8 || this.ef || this.dt || this.dr || this.ds || this.ej || this.el) {
                return this.ba(3);
            }
            else if (this.d2 || this.eh || this.d9 || this.d1 || this.isValueOverlay) {
                return this.ba(2);
            }
            else if (this.dc || this.d6 || this.d5) {
                return this.ba(1);
            }
            else if (this.c4) {
                return this.ba(4);
            }
            return this.ba(1);
        }
        getDataLegendBadge() {
            let a = this.ng();
            if (a == null) {
                a = LegendTemplates.af(this);
            }
            return a;
        }
        getDataLegendBadgeContext() {
            if (this.a4 == null) {
                this.a4 = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = null;
                    return $ret;
                })());
            }
            return this.a4;
        }
        getDataLegendBadgeShapeAndMarker() {
            let a = this.am();
            if (a == 8) {
                return this.i0();
            }
            else if (a == 1) {
                if (this.a9 == 0) {
                    return "Line";
                }
                return "LineWith" + this.i0();
            }
            else if (a == 3) {
                return "Bar";
            }
            else if (a == 4) {
                return "Column";
            }
            else if (a == 9) {
                return "None";
            }
            else if (a == 0) {
                return "Circle";
            }
            else if (a == 2) {
                return "Line";
            }
            else if (a == 5) {
                return "Square";
            }
            else if (a == 6) {
                if (this.a9 == 0) {
                    return "Square";
                }
                else {
                    return "TwoColumns";
                }
            }
            else if (a == 7) {
                if (this.a9 == 0) {
                    return "Square";
                }
                else {
                    return "TwoBars";
                }
            }
            return EnumUtil.getName(ActualLegendItemBadgeShape_$type, a);
        }
        i0() {
            return null;
        }
        i1(a, b) {
            if (b == a.cd.pl) {
                return "Circle";
            }
            else if (b == a.cd.pm) {
                return "Diamond";
            }
            else if (b == a.cd.pn) {
                return "Hexagon";
            }
            else if (b == a.cd.po) {
                return "Hexagram";
            }
            else if (b == a.cd.pp) {
                return "Pentagon";
            }
            else if (b == a.cd.pq) {
                return "Pentagram";
            }
            else if (b == a.cd.pr) {
                return "Pyramid";
            }
            else if (b == a.cd.ps) {
                return "Square";
            }
            else if (b == a.cd.pt) {
                return "Tetragram";
            }
            else if (b == a.cd.pu) {
                return "Triangle";
            }
            else if (b != null) {
                return "Custom";
            }
            else {
                return "None";
            }
        }
        getDataLegendSeriesTitle() {
            return this.title == null ? null : this.title.toString();
        }
        gd(a, b) {
            return FastItemColumn.i(this.hy(a, b));
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.l = this.gl({ $type: Point_$type, x: a, y: b }, false, false);
            c.a = 0;
            c.p = "Value";
            c.q = "";
            let d = new DataLegendSeriesContext();
            d.f = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.b = this.av();
            return d;
        }
        av() {
            if (this.dw) {
                return 9;
            }
            if (this.ec) {
                return 1;
            }
            if (this.ee) {
                return 8;
            }
            if (this.ed) {
                return 6;
            }
            if (this.d7) {
                return 4;
            }
            if (this.eb) {
                return 5;
            }
            if (this.isStacked || this.dv) {
                return 7;
            }
            if (this.du) {
                return 0;
            }
            if (this.dq) {
                if (this.dt) {
                    return 2;
                }
                return 3;
            }
            return 0;
        }
        getDataLegendAxisLabelFromCursorPosition(a, b) {
            if (this.dh || this.dq || this.eb) {
                let c = { $type: Point_$type, x: a, y: b };
                let d = this.ar();
                if (d != null) {
                    if (!d.cn()) {
                        return null;
                    }
                    if (d.cm) {
                        let e = this.hh(c);
                        if (e < 0) {
                            return null;
                        }
                        let f = d;
                        let g = f.i$d(e);
                        let h = this.fj(g);
                        return h;
                    }
                    else {
                        if (d.cj) {
                            let i = this.f7(c);
                            if (i < 0) {
                                i = 0;
                            }
                            let j = d;
                            let k = j.getDateTime(i);
                            return k;
                        }
                        else {
                            let l = this.hf(c);
                            if (l < 0) {
                                return null;
                            }
                            let m = d.kq;
                            if (m == null || m.count == 0) {
                                return null;
                            }
                            if (l >= m.count) {
                                l = m.count - 1;
                            }
                            let n = d.gc(l);
                            return n;
                        }
                    }
                }
            }
            return null;
        }
        lj(message_) {
            console.log('Series >> ' + message_);
            ;
        }
        fj(ticks_) {
            let a = (new Date(ticks_));
            return a;
        }
    }
    Series.$t = /*@__PURE__*/ markType(Series, 'Series', Control.$, [INotifyPropertyChanged_$type, IProvidesViewport_$type, ILegendSeries_$type, ILegendSeriesInternal_$type, ILegendOwner_$type, ILegendTemplateProvider_$type, IDataLegendSeries_$type]);
    Series.hc = 0;
    Series.ox = /*@__PURE__*/ DependencyProperty.i("VisibilityProxy", Visibility_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, /*@__PURE__*/ enumGetBox(Visibility_$type, 0), (a, b) => a.raisePropertyChanged("VisibilityProxy", b.oldValue, b.newValue)));
    Series.n3 = /*@__PURE__*/ DependencyProperty.i("ItemsSource", IEnumerable_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        if (c.b8 != null) {
            c.b8.releaseFastItemsSource(b.oldValue);
        }
        a.raisePropertyChanged("ItemsSource", b.oldValue, b.newValue);
    }));
    Series.n9 = /*@__PURE__*/ DependencyProperty.i("Legend", IChartLegend_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("Legend", b.oldValue, b.newValue);
    }));
    Series.n6 = /*@__PURE__*/ DependencyProperty.i("LegendItemBadgeTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("LegendItemBadgeTemplate", b.oldValue, b.newValue);
        if (c.nc != null) {
            c.nc = c.nb();
        }
    }));
    Series.n7 = /*@__PURE__*/ DependencyProperty.i("LegendItemTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("LegendItemTemplate", b.oldValue, b.newValue);
        if (c.nc != null) {
            c.nc = c.nb();
        }
    }));
    Series.nu = /*@__PURE__*/ DependencyProperty.i("DiscreteLegendItemTemplate", DataTemplate.$, Series.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("DiscreteLegendItemTemplate", b.oldValue, b.newValue);
    }));
    Series.ny = /*@__PURE__*/ DependencyProperty.i("Index", Number_$type, Series.$, /*@__PURE__*/ new PropertyMetadata(2, -1, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("Index", b.oldValue, b.newValue);
        if (c.nc != null) {
            c.nc = c.nb();
        }
    }));
    Series.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, Series, 'raisePropertyChanged', ['ActualAreaFillOpacity:fs:ni', [1, 1], 'ActualBrush:o3:nj', [Brush.$], 'ActualLegendItemBadgeBrush:o4:nk', [Brush.$], 'ActualLegendItemBadgeOutline:o5:nl', [Brush.$], 'ActualLegendItemBadgeTemplate:ne:nm', [DataTemplate.$], 'ActualMarkerFillOpacity:fu:nn', [1, 1], 'ActualOutline:o6:no', [Brush.$], 'ActualThickness:fw:np', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'AreaFillOpacity:f1:nq', [1, NaN], 'Brush:o7:nr', [Brush.$, null], 'DashArray:pg:ns', [DoubleCollection.$], 'DashCap:ph:nt', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'EndCap:pi:nv', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'FastItemsSource:ck:nw', [IFastItemsSource_$type], 'HighlightingFadeOpacity:gr:nx', [1, NaN], 'IsActualLegendFinancial:c7:nz', [0, false], 'IsComponentHighlightingModeIgnored:dj:n0', [0, false], 'IsDropShadowEnabled:dn:n1', [0, false], 'IsHighlightingEnabled:dx:n2', [0, false], 'LegendItemBadgeMode:a9:n4', [LegendItemBadgeMode_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeMode_$type, 0)], 'LegendItemBadgeShape::n5', [LegendItemBadgeShape_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0)], 'LegendItemVisibility:p7:n8', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'MarkerFillOpacity:gs:oa', [1, NaN], 'MiterLimit:gt:ob', [1, 0], 'MouseOverEnabled:em:oc', [0, true], 'OutlineMode:bt:od', [SeriesOutlineMode_$type, /*@__PURE__*/ enumGetBox(SeriesOutlineMode_$type, 0)], 'Outline:pc:oe', [Brush.$, null], 'Resolution:gv:of', [1, NaN], 'ShadowBlur:gy:og', [1, NaN], 'ShadowColor:pf:oh', [Color.$], 'ShadowOffsetX:gz:oi', [1, NaN], 'ShadowOffsetY:g0:oj', [1, NaN], 'ShouldHideAutoCallouts:er:ok', [0, false], 'ShowDefaultTooltip:et:ol', [0, false], 'StartCap:pj:om', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 2)], 'Thickness:g1:on', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'Title::oo', [4, "Series Title"], 'ToolTip::op', [4, null], 'TransitionDuration:ho:oq', [1, 0], 'TransitionEasingFunction:cf:or', [Delegate_$type, null], 'TransitionInDuration:hp:os', [1, 1000], 'TransitionInEasingFunction:cg:ot', [Delegate_$type, null], 'TransitionInSpeedType:ca:ou', [TransitionInSpeedType_$type, /*@__PURE__*/ enumGetBox(TransitionInSpeedType_$type, 0)], 'TransitionProgress:g2:ov', [1, 0], 'UseSingleShadow:e9:ow', [0, true], 'VisibleRangeMarginBottom:g3:oy', [1, NaN], 'VisibleRangeMarginLeft:g4:oz', [1, NaN], 'VisibleRangeMarginRight:g5:o0', [1, NaN], 'VisibleRangeMarginTop:g6:o1', [1, NaN], 'VisibleRangeMode:b4:o2', [SeriesVisibleRangeMode_$type, /*@__PURE__*/ enumGetBox(SeriesVisibleRangeMode_$type, 0)]]);
    return Series;
})();
/**
 * @hidden
 */
export let MarkerSeries = /*@__PURE__*/ (() => {
    class MarkerSeries extends Series {
        constructor() {
            super();
            this.qc = 1;
            this.p8 = 1;
            this.q2 = null;
        }
        p5(a, b) {
            if (this.eb || this.d7) {
                return new Thickness(1, 0, 0, 0, 0);
            }
            if (this.qh != 1 && this.qh != 13) {
                let c = this.qg.cq();
                let d = (c.width / 2) + (this.qm / 2);
                let e = (c.height / 2) + (this.qm / 2);
                let f = e;
                let g = e;
                let h = d;
                let i = d;
                if (a == 2 || a == 4) {
                    h = 0;
                }
                if (a == 2 || a == 3) {
                    i = 0;
                }
                if (b == 2 || b == 3) {
                    f = 0;
                }
                if (b == 2 || b == 4) {
                    g = 0;
                }
                return new Thickness(1, h, f, i, g);
            }
            return new Thickness(1, 0, 0, 0, 0);
        }
        l2(a) {
            super.l2(a);
            this.qg = a;
        }
        get_hasMarkers() {
            return true;
        }
        pa() {
            return this.rh;
        }
        pb() {
            return this.ri;
        }
        nh() {
            return this.q2;
        }
        i0() {
            return this.i1(this, this.q2);
        }
        get qd() {
            return this.qc;
        }
        set qd(a) {
            this.qc = a;
        }
        qf() {
            if (this.qe == 0) {
                return 1;
            }
            return this.qe;
        }
        m3(a) {
            super.m3(a);
            this.qe = a;
        }
        get p9() {
            return this.p8;
        }
        set p9(a) {
            this.p8 = a;
        }
        qb() {
            if (this.qa == 0) {
                return 1;
            }
            return this.qa;
        }
        m2(a) {
            super.m2(a);
            this.qa = a;
        }
        m4(a) {
            super.m4(a);
            this.qm = a;
        }
        f4() {
            return this.qm;
        }
        static get q4() {
            if (MarkerSeries.q0 == null) {
                MarkerSeries.q0 = new DataTemplate();
            }
            return MarkerSeries.q0;
        }
        get rj() {
            return this.c(MarkerSeries.q8);
        }
        set rj(a) {
            this.h(MarkerSeries.q8, a);
        }
        qj() {
            return this.q2 != null && ((this.qh != 1 && this.qh != 0) || this.q3 != null);
        }
        lx() {
            super.lx();
            this.qd = this.qf();
            this.p9 = this.qb();
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case "MarkerBrush":
                case MarkerSeries.$$p[9]:
                case MarkerSeries.$$p[5]:
                case MarkerSeries.$$p[7]:
                case MarkerSeries.$$p[8]:
                    this.mz();
                    this.l4();
                    break;
                case MarkerSeries.$$p[4]:
                    this.qd = this.qf();
                    this.mz();
                    this.l4();
                    break;
                case MarkerSeries.$$p[3]:
                    this.p9 = this.qb();
                    this.mz();
                    this.l4();
                    break;
                case MarkerSeries.$$p[2]:
                    this.q2 = d;
                    if (c == MarkerSeries.q4 || d == MarkerSeries.q4 || (c == null || d != null)) {
                        this.qg.cg();
                        let e = typeCast(MarkerSeriesView.$, this.bz);
                        if (e != null) {
                            e.cg();
                        }
                        this.ml(false);
                    }
                    if (this.cd != null) {
                        this.cd.l5();
                    }
                    this.b0.bj();
                    if (this.toolTip != null && this.d0) {
                        this.a6.a$aj(this, this.toolTip);
                    }
                    this.ls();
                    break;
                case MarkerSeries.$$p[10]:
                    this.qg.cn(this.ql);
                    this.ml(false);
                    break;
                case MarkerSeries.$$p[0]:
                case MarkerSeries.$$p[1]:
                    if (this.c4) {
                        this.o4 = this.pa();
                        this.o5 = this.pb();
                    }
                    break;
            }
        }
        static qq(a) {
            switch (a) {
                case 3:
                case 13: return SeriesViewer.$$p[2];
                case 4: return SeriesViewer.$$p[37];
                case 5: return SeriesViewer.$$p[27];
                case 6: return SeriesViewer.$$p[31];
                case 7: return SeriesViewer.$$p[5];
                case 8: return SeriesViewer.$$p[19];
                case 9: return SeriesViewer.$$p[7];
                case 10: return SeriesViewer.$$p[34];
                case 11: return SeriesViewer.$$p[20];
                case 12: return SeriesViewer.$$p[8];
                case 0:
                case 1:
                default: return null;
            }
        }
        static qi(a, b) {
            let c = 1;
            let d = 0;
            if (a != null && a.cd != null) {
                d = a.cd.be;
            }
            if (a == null || a.cd == null) {
                c = 1;
                return c;
            }
            if (b != 2 && b != 0) {
                c = b;
            }
            else {
                if (d == 4) {
                    c = 3;
                }
                else if (d == 5) {
                    c = 4;
                }
                else if (d == 9) {
                    c = 8;
                }
                else if (d == 11) {
                    c = 10;
                }
                else if (d == 8) {
                    c = 7;
                }
                else if (d == 7) {
                    c = 6;
                }
                else if (d == 10) {
                    c = 9;
                }
                else if (d == 12) {
                    c = 11;
                }
                else if (d == 6) {
                    c = 5;
                }
                else if (d == 13) {
                    c = 12;
                }
                else if (d == 1) {
                    c = 1;
                }
                else if (d == 0) {
                    if (a.d3) {
                        c = 1;
                    }
                    else {
                        c = 3;
                    }
                }
                else if (d == 3 || d == 2) {
                    if (d == 2) {
                        if (a.d3) {
                            c = 1;
                            return c;
                        }
                    }
                    if (a.index < 0) {
                        c = 1;
                    }
                    else {
                        let e = [3, 4, 8, 10, 7, 6, 9, 11, 5, 12];
                        c = e[a.index % e.length];
                    }
                }
            }
            return c;
        }
        mz() {
            super.mz();
            if (this.index < 0) {
                return;
            }
            if (this.qg.b2()) {
                this.qg.ce();
                this.qg.b8();
            }
            else {
                let a = MarkerSeries.qi(this, this.qh);
                let b = MarkerSeries.qq(a);
                if (b == null) {
                    this.q1 = MarkerSeries.q4;
                }
                else {
                    this.qg.cb(b);
                }
            }
            if (this.rj != null && this.qh != 13) {
                this.qg.cc();
                this.qg.b9();
            }
            else {
                if (this.qh == 13) {
                    this.rh = this.b0.bq();
                }
                else {
                    if (this.p9 != 2) {
                        if (this.cd != null) {
                            let c = this.cd.sk(this.index);
                            if (!isNaN_(this.fu) && this.fu != 1) {
                                c = BrushUtil.o(c, this.fu);
                            }
                            this.rh = c;
                        }
                        else {
                            this.rh = null;
                        }
                    }
                }
            }
            if (this.rk != null) {
                this.qg.cd();
                this.qg.ca();
            }
            else {
                if (this.qh == 13) {
                    this.ri = this.b0.bq();
                }
                else {
                    if (this.qd == 2) {
                        this.ri = this.rh;
                    }
                    else {
                        this.ri = this.cd == null ? null : this.cd.sl(this.index);
                    }
                }
            }
            if (this.p9 == 2 && this.rj == null && this.qh != 13) {
                if (this.ri != null) {
                    let d = this.ri;
                    if (!isNaN_(this.fu) && this.fu != 1) {
                        d = BrushUtil.o(d, this.fu);
                    }
                    this.rh = d;
                }
                else {
                    this.rh = null;
                }
            }
        }
        la(a) {
            super.la(a);
            this.a8.exportMarkerVisualData(this, a);
        }
        qk(a, b) {
            if (this.hasMarkers && this.qj()) {
                let c = this.p2(a);
                if (c.isEmpty) {
                    return false;
                }
                let d = RectUtil.r(c, this.ga(b));
                if (d.containsPoint(a)) {
                    return true;
                }
            }
            return false;
        }
        at(a, b) {
            let c = this.qg.by(a);
            let d = null;
            if (c != null) {
                d = c.content;
            }
            return d;
        }
    }
    MarkerSeries.$t = /*@__PURE__*/ markType(MarkerSeries, 'MarkerSeries', Series.$);
    MarkerSeries.q0 = null;
    MarkerSeries.q8 = /*@__PURE__*/ DependencyProperty.i("MarkerBrush", Brush.$, MarkerSeries.$, /*@__PURE__*/ new PropertyMetadata(1, (a, b) => {
        let c = (typeCast(MarkerSeries.$, a));
        c.raisePropertyChanged("MarkerBrush", b.oldValue, b.newValue);
    }));
    MarkerSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, MarkerSeries, 'raisePropertyChanged', ['ActualMarkerBrush:rh:q5', [Brush.$], 'ActualMarkerOutline:ri:q6', [Brush.$], 'ActualMarkerTemplate:q1:q7', [DataTemplate.$, null], 'MarkerFillMode:qa:q9', [MarkerFillMode_$type, /*@__PURE__*/ enumGetBox(MarkerFillMode_$type, 0)], 'MarkerOutlineMode:qe:ra', [MarkerOutlineMode_$type, /*@__PURE__*/ enumGetBox(MarkerOutlineMode_$type, 0)], 'MarkerOutline:rk:rb', [Brush.$], 'MarkerStyle:rl:rc', [Style.$], 'MarkerTemplate:q3:rd', [DataTemplate.$, null], 'MarkerThickness:qm:re', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'MarkerType:qh:rf', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'UseLightweightMarkers:ql:rg', [0, false]]);
    return MarkerSeries;
})();
/**
 * @hidden
 */
export let SyncLink = /*@__PURE__*/ (() => {
    class SyncLink extends FrameworkElement {
        constructor() {
            super();
            this.ak = null;
            this.ah = new Dictionary$2(IEnumerable_$type, FastItemsSourceReference.$, 0);
            this.av = null;
            this.ad = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.aq(a, b.propertyName, b.oldValue, b.newValue));
            this.ad = new ChartCollection();
            let a = this.ad;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.am));
            this.av = new Rect(0, 0, 0, 1, 1);
        }
        aq(a, b, c, d) {
        }
        releaseFastItemsSource(a) {
            if (a != null) {
                let b = null;
                if (((() => { let c = this.ah.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                    --b.b;
                    if (b.b == 0) {
                        this.ah.removeItem(a);
                    }
                }
            }
            return null;
        }
        static af(a) {
            return ((() => {
                let $ret = new FastItemsSource();
                $ret.e = a;
                return $ret;
            })());
        }
        getFastItemsSource(a) {
            if (SyncLink.aj == null) {
                SyncLink.aj = SyncLink.af;
            }
            let b = null;
            if (a != null) {
                let c = null;
                if (!((() => { let d = this.ah.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                    b = SyncLink.aj(a);
                    c = new FastItemsSourceReference(b);
                    this.ah.addItem(a, c);
                }
                c.b++;
                b = c.a;
            }
            return b;
        }
        ag(a) {
            let b = null;
            if (a != null) {
                let c = null;
                if (!((() => { let d = this.ah.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                    return null;
                }
                b = c.a;
            }
            return b;
        }
        aw(a, b, c) {
            return this.ax(a, b, c, false);
        }
        ax(a, b, c, d) {
            if (!c.isEmpty) {
                c = new Rect(0, c.left, c.top, c.width, c.height);
                let e = a.gg;
                let f = a.gf;
                if (b == a) {
                    if (!d) {
                        if (!b.er()) {
                            c.x = b.tp.x;
                            c.width = b.tp.width;
                        }
                        if (!b.es()) {
                            c.y = b.tp.y;
                            c.height = b.tp.height;
                        }
                    }
                }
                else {
                    let g = SyncManager.a(b);
                    if (g == null || !g.synchronizeHorizontally) {
                        c.x = b.tp.x;
                        c.width = b.tp.width;
                    }
                    if (g == null || !g.synchronizeVertically) {
                        c.y = b.tp.y;
                        c.height = b.tp.height;
                    }
                }
                let h = 0.5 * (c.left + c.right);
                let i = 0.5 * (c.top + c.bottom);
                let j = c.width;
                let k = c.height;
                let l = MathUtil.d(c.width, e, 1);
                let m = MathUtil.d(c.height, f, 1);
                let n = false;
                if (a.fg() && !a.to.isEmpty) {
                    let o = a.to;
                    let p = o.width / o.height;
                    let q = l * o.width;
                    let r = m * o.height;
                    let s = q / r;
                    if (s != p) {
                        if (r * p > q) {
                            q = r * p;
                            l = q / o.width;
                        }
                        else {
                            r = q / p;
                            m = r / o.height;
                        }
                    }
                }
                else if (a.d3()) {
                    let t = false;
                    let u = false;
                    if (Math.abs(l - a.s9.width) > e) {
                        t = true;
                    }
                    if (Math.abs(m - a.s9.height) > f) {
                        u = true;
                    }
                    let v = a.l8(l, m, t, u);
                    l = v.p0;
                    m = v.p1;
                    l = MathUtil.d(l, e, 1);
                    m = MathUtil.d(m, f, 1);
                }
                else if (b.fb) {
                    let w = 1.7976931348623157E+308;
                    let x = -1.7976931348623157E+308;
                    let y = 1.7976931348623157E+308;
                    let z = -1.7976931348623157E+308;
                    let aa = c.left;
                    let ab = c.right;
                    let ac = c.top;
                    let ad = c.bottom;
                    let ae = c.width;
                    let af = c.height;
                    if (b.cd == 1) {
                        if (aa < 0) {
                            aa = 0;
                            ab = aa + ae;
                        }
                        if (ab > 1) {
                            ab = 1;
                            aa = ab - ae;
                        }
                        if (ac < 0) {
                            ac = 0;
                            ad = ac + af;
                        }
                        if (ad > 1) {
                            ad = 1;
                            ac = ad - af;
                        }
                    }
                    let ag = new Rect(0, aa, ac, ab - aa, ad - ac);
                    let ah = [w, x];
                    let ai = [y, z];
                    for (let aj = 0; aj < b.series.count; aj++) {
                        let ak = b.series._inner[aj];
                        if (ak.dc) {
                            continue;
                        }
                        {
                            let al = ak;
                            if (al.isVertical) {
                                if (c.height < 1) {
                                    ai = this.ac(al, b, ag, ai);
                                    y = ai[0];
                                    z = ai[1];
                                }
                            }
                            else {
                                if (c.width < 1) {
                                    ah = this.ab(al, b, ag, ah);
                                    w = ah[0];
                                    x = ah[1];
                                }
                            }
                        }
                    }
                    let am = (w == 1.7976931348623157E+308 || x == -1.7976931348623157E+308 || isNaN_(w) || isNaN_(x));
                    let an = (y == 1.7976931348623157E+308 || z == -1.7976931348623157E+308 || isNaN_(y) || isNaN_(z));
                    if (!am || !an) {
                        if (am) {
                            c = new Rect(0, y, c.top, z - y, c.height);
                        }
                        else if (an) {
                            c = new Rect(0, c.left, w, c.width, x - w);
                        }
                        else {
                            c = new Rect(0, y, w, z - y, x - w);
                        }
                        l = c.width;
                        m = c.height;
                        n = true;
                    }
                }
                let ao = l != j;
                let ap = m != k;
                let aq = ao && !n ? h - 0.5 * l : c.left;
                let ar = ap && !n ? i - 0.5 * m : c.top;
                let as = ao && !n ? h + 0.5 * l : c.right;
                let at = ap && !n ? i + 0.5 * m : c.bottom;
                if (b.cd == 1) {
                    if (aq < 0) {
                        aq = 0;
                        as = aq + l;
                    }
                    if (as > 1) {
                        as = 1;
                        aq = as - l;
                    }
                    if (ar < 0) {
                        ar = 0;
                        at = ar + m;
                    }
                    if (at > 1) {
                        at = 1;
                        ar = at - m;
                    }
                }
                c = new Rect(0, aq, ar, as - aq, at - ar);
            }
            return c;
        }
        ab(a, b, c, d) {
            let e = a.ag();
            let f = d[0];
            let g = d[1];
            let h = null;
            for (let i = 0; i < e.length; i++) {
                if (e[i].co) {
                    h = e[i];
                }
            }
            if (h != null) {
                let j = new Rect(0, 0, 0, 1, 1);
                let k = new ScalerParams(0, j, j, h.cg, b.ti(j, b.to, b.td));
                k.b = a.ge();
                let l = a.aq(c);
                let m = l == null || l.c == 1.7976931348623157E+308 || isNaN_(l.c);
                if (m) {
                    return d;
                }
                let n = h.ei(l.c, k);
                let o = h.ei(l.b, k);
                if (h.cg) {
                    let p = n;
                    n = o;
                    o = p;
                }
                g = Math.max(g, n);
                f = Math.min(f, o);
                if (a.b2 == 2) {
                    if (h.ci) {
                        let q = h;
                        let r = q.l5;
                        r = h.d0(r, k);
                        let s = h.ei(r, k);
                        g = Math.max(g, s);
                        f = Math.min(f, s);
                    }
                }
            }
            d[0] = f;
            d[1] = g;
            return d;
        }
        ac(a, b, c, d) {
            let e = a.ag();
            let f = d[0];
            let g = d[1];
            let h = null;
            for (let i = 0; i < e.length; i++) {
                if (!e[i].co) {
                    h = e[i];
                }
            }
            if (h != null) {
                let j = new Rect(0, 0, 0, 1, 1);
                let k = new ScalerParams(0, j, j, h.cg, b.ti(j, b.to, b.td));
                k.b = a.ge();
                let l = a.aq(c);
                let m = l == null || l.c == 1.7976931348623157E+308 || isNaN_(l.c);
                if (m) {
                    return d;
                }
                let n = h.ei(l.c, k);
                let o = h.ei(l.b, k);
                if (h.cg) {
                    let p = n;
                    n = o;
                    o = p;
                }
                g = Math.max(g, o);
                f = Math.min(f, n);
                if (a.b2 == 2) {
                    if (h.ci) {
                        let q = h;
                        let r = q.l5;
                        r = h.d0(r, k);
                        let s = h.ei(r, k);
                        g = Math.max(g, s);
                        f = Math.min(f, s);
                    }
                }
            }
            d[0] = f;
            d[1] = g;
            return d;
        }
        get ai() {
            return this.ad;
        }
        al(a) {
            this.ad.add(a);
        }
        as(a) {
            this.ad.remove(a);
        }
        ao() {
            for (let a of fromEnum(this.ad)) {
                if (a.tp.isEmpty) {
                    a.tp = this.aw(null, a, this.av);
                }
            }
        }
        am(a, b) {
            if (b.newItems != null) {
                for (let c of fromEn(b.newItems)) {
                    if (c.tp.isEmpty) {
                        c.tp = this.aw(null, c, this.av);
                    }
                }
            }
        }
        an(a, b) {
            for (let c of fromEnum(this.ai)) {
                if (c == a) {
                    c.s0 = { $type: Point_$type, x: b.x, y: b.y };
                }
                else {
                    let d = { $type: Point_$type, x: b.x, y: b.y };
                    let e = SyncManager.a(c);
                    if (e == null || !e.synchronizeHorizontally) {
                        d.x = NaN;
                    }
                    if (e == null || !e.synchronizeVertically) {
                        d.y = NaN;
                    }
                    c.s0 = d;
                }
            }
        }
        ap(a, b) {
            for (let c of fromEnum(this.ai)) {
                c.tj = this.aw(a, c, b);
            }
        }
        at(a, b) {
            this.au(a, b, false);
        }
        au(a, b, c) {
            let d = b.isEmpty || isNaN_(b.x) || isNaN_(b.y) || isNaN_(b.width) || isNaN_(b.height);
            if (!d && !a.d1) {
                for (let e of fromEnum(this.ai)) {
                    e.d1 = true;
                    e.tp = this.ax(a, e, b, c);
                    e.d1 = false;
                }
            }
        }
        ar(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
    }
    SyncLink.$t = /*@__PURE__*/ markType(SyncLink, 'SyncLink', FrameworkElement.$, [INotifyPropertyChanged_$type, IFastItemsSourceProvider_$type]);
    SyncLink.aj = null;
    return SyncLink;
})();
/**
 * @hidden
 */
export let SyncLinkManager = /*@__PURE__*/ (() => {
    class SyncLinkManager extends Base {
        constructor() {
            super();
            this.d = null;
            this.d = new Dictionary$2(String_$type, SyncLink.$, 0);
        }
        static instance() {
            if (SyncLinkManager.b == null) {
                SyncLinkManager.b = new SyncLinkManager();
            }
            return SyncLinkManager.b;
        }
        get e() {
            return this.d.count;
        }
        getLink(a) {
            let b;
            if (((() => { let c = this.d.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                return b;
            }
            b = new SyncLink();
            b.ak = a;
            this.d.addItem(a, b);
            return b;
        }
        releaseLink(a) {
            if (a.ai.count == 0 && a.ak != null && this.d.containsKey(a.ak)) {
                this.d.removeItem(a.ak);
            }
        }
    }
    SyncLinkManager.$t = /*@__PURE__*/ markType(SyncLinkManager, 'SyncLinkManager');
    SyncLinkManager.b = null;
    return SyncLinkManager;
})();
/**
 * @hidden
 */
export let SyncManager = /*@__PURE__*/ (() => {
    class SyncManager extends Base {
        static e(a) {
            let b = SyncManager.a(a);
            if (b == null) {
                return;
            }
            if (!a.em) {
                return;
            }
            if (a.syncChannel != b.syncChannel) {
                return;
            }
            SyncManager.b(a, a.syncChannel, null);
        }
        static c(a) {
            let b = SyncManager.a(a);
            if (b == null) {
                return;
            }
            if (a.em && a.syncChannel == b.syncChannel) {
                return;
            }
            let c = null;
            if (a.em) {
                c = a.syncChannel;
            }
            SyncManager.b(a, c, b.syncChannel);
        }
        static b(a, b, c) {
            if (a != null) {
                if (stringIsNullOrEmpty(c)) {
                    let d = a.actualSyncLink;
                    a.actualSyncLink = null;
                    a.actualSyncLink = new SyncLink();
                    if (d != null) {
                        SyncLinkManager.instance().releaseLink(d);
                    }
                    a.syncChannel = null;
                }
                else {
                    if (!stringIsNullOrEmpty(b)) {
                        let e = a.actualSyncLink;
                        a.actualSyncLink = null;
                        if (e != null) {
                            SyncLinkManager.instance().releaseLink(e);
                        }
                    }
                    a.actualSyncLink = SyncLinkManager.instance().getLink(c);
                    a.syncChannel = c;
                }
            }
        }
        static d(a, b) {
            a.syncSettings = b;
        }
        static a(a) {
            return a.syncSettings;
        }
    }
    SyncManager.$t = /*@__PURE__*/ markType(SyncManager, 'SyncManager');
    return SyncManager;
})();
/**
 * @hidden
 */
export let ChartCollection = /*@__PURE__*/ (() => {
    class ChartCollection extends ObservableCollection$1 {
        constructor() {
            super(SeriesViewer.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    ChartCollection.$t = /*@__PURE__*/ markType(ChartCollection, 'ChartCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(SeriesViewer.$));
    return ChartCollection;
})();
/**
 * @hidden
 */
export let SeriesCollection = /*@__PURE__*/ (() => {
    class SeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(Series.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    SeriesCollection.$t = /*@__PURE__*/ markType(SeriesCollection, 'SeriesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(Series.$));
    return SeriesCollection;
})();
/**
 * @hidden
 */
export let PlotAreaMouseEventArgs = /*@__PURE__*/ (() => {
    class PlotAreaMouseEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._chartPosition = null;
            this._plotAreaPosition = null;
            this._isDuringManipulation = false;
            this._viewer = null;
            this.viewer = a;
            this.chartPosition = b;
            this.plotAreaPosition = c;
        }
        get chartPosition() {
            return this._chartPosition;
        }
        set chartPosition(a) {
            this._chartPosition = a;
        }
        get plotAreaPosition() {
            return this._plotAreaPosition;
        }
        set plotAreaPosition(a) {
            this._plotAreaPosition = a;
        }
        get isDuringManipulation() {
            return this._isDuringManipulation;
        }
        set isDuringManipulation(a) {
            this._isDuringManipulation = a;
        }
        get viewer() {
            return this._viewer;
        }
        set viewer(a) {
            this._viewer = a;
        }
    }
    PlotAreaMouseEventArgs.$t = /*@__PURE__*/ markType(PlotAreaMouseEventArgs, 'PlotAreaMouseEventArgs', EventArgs.$);
    return PlotAreaMouseEventArgs;
})();
/**
 * @hidden
 */
export let PlotAreaMouseButtonEventArgs = /*@__PURE__*/ (() => {
    class PlotAreaMouseButtonEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._chartPosition = null;
            this._plotAreaPosition = null;
            this._manipulationOccurred = false;
            this._viewer = null;
            this.viewer = a;
            this.chartPosition = b;
            this.plotAreaPosition = c;
        }
        get chartPosition() {
            return this._chartPosition;
        }
        set chartPosition(a) {
            this._chartPosition = a;
        }
        get plotAreaPosition() {
            return this._plotAreaPosition;
        }
        set plotAreaPosition(a) {
            this._plotAreaPosition = a;
        }
        get manipulationOccurred() {
            return this._manipulationOccurred;
        }
        set manipulationOccurred(a) {
            this._manipulationOccurred = a;
        }
        get viewer() {
            return this._viewer;
        }
        set viewer(a) {
            this._viewer = a;
        }
    }
    PlotAreaMouseButtonEventArgs.$t = /*@__PURE__*/ markType(PlotAreaMouseButtonEventArgs, 'PlotAreaMouseButtonEventArgs', EventArgs.$);
    return PlotAreaMouseButtonEventArgs;
})();
/**
 * @hidden
 */
export let ChartCursorEventArgs = /*@__PURE__*/ (() => {
    class ChartCursorEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._item = null;
            this._series = null;
            this._seriesViewer = null;
            this.seriesViewer = a;
            this.series = b;
            this.item = c;
        }
        toString() {
            return this.seriesViewer.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "");
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get seriesViewer() {
            return this._seriesViewer;
        }
        set seriesViewer(a) {
            this._seriesViewer = a;
        }
        get chart() {
            return typeCast(XamDataChart.$, this.seriesViewer);
        }
    }
    ChartCursorEventArgs.$t = /*@__PURE__*/ markType(ChartCursorEventArgs, 'ChartCursorEventArgs', EventArgs.$);
    return ChartCursorEventArgs;
})();
/**
 * @hidden
 */
export let DataChartMouseButtonEventArgs = /*@__PURE__*/ (() => {
    class DataChartMouseButtonEventArgs extends EventArgs {
        constructor(a, b, c, d) {
            super();
            this.g = null;
            this._item = null;
            this._series = null;
            this._chart = null;
            this.chart = a;
            this.series = b;
            this.item = c;
            this.g = d;
        }
        toString() {
            return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
        }
        get handled() {
            return this.g.handled;
        }
        set handled(a) {
            this.g.handled = a;
        }
        getPosition(a) {
            return this.g.getPosition(a);
        }
        get originalSource() {
            return this.g.originalSource;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
    }
    DataChartMouseButtonEventArgs.$t = /*@__PURE__*/ markType(DataChartMouseButtonEventArgs, 'DataChartMouseButtonEventArgs', EventArgs.$);
    return DataChartMouseButtonEventArgs;
})();
/**
 * @hidden
 */
export let ChartMouseEventArgs = /*@__PURE__*/ (() => {
    class ChartMouseEventArgs extends EventArgs {
        constructor(a, b, c, d) {
            super();
            this.f = null;
            this._item = null;
            this._series = null;
            this._chart = null;
            this.chart = a;
            this.series = b;
            this.item = c;
            this.f = d;
        }
        toString() {
            return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
        }
        getPosition(a) {
            return this.f.getPosition(a);
        }
        get originalSource() {
            return this.f.originalSource;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
    }
    ChartMouseEventArgs.$t = /*@__PURE__*/ markType(ChartMouseEventArgs, 'ChartMouseEventArgs', EventArgs.$);
    return ChartMouseEventArgs;
})();
/**
 * @hidden
 */
export let AxisComponentsForView = /*@__PURE__*/ (() => {
    class AxisComponentsForView extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
    }
    AxisComponentsForView.$t = /*@__PURE__*/ markType(AxisComponentsForView, 'AxisComponentsForView');
    return AxisComponentsForView;
})();
/**
 * @hidden
 */
export let AxisLabelPanelBaseView = /*@__PURE__*/ (() => {
    class AxisLabelPanelBaseView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.aw = null;
            this.e = null;
            this.av = Rect.empty;
            this.c = null;
            this.h = 0;
            this.i = NaN;
            this.a = a;
        }
        aa(a, b, c, d, e, f) {
            let g = typeCast(FrameworkElement.$, a);
            if (g != null) {
                g._visibility = 0;
                if (b.width == 0 && b.height == 0) {
                    g._visibility = 1;
                }
                let h = b.height - (d + f);
                let i = b.width - (c + e);
                g.n = b.left + c;
                g.o = b.top + d;
                if (i < 0) {
                    i = 0;
                }
                if (h < 0) {
                    h = 0;
                }
                g.l = h;
                g.m = i;
                if (g.j != null) {
                    let j = g.j;
                    let k = j.j._inner[0];
                    k.k = k.k + g.n;
                    k.l = k.l + g.o;
                }
            }
        }
        z(a, b, c, d, e, f, g, h) {
            let i = Math.max(e, Math.max(f, Math.max(g, h)));
            let j = new Thickness(0, i);
            if (this.a.av) {
                j = new Thickness(0, Math.sqrt((i * i) / 2));
            }
            let k = c.d;
            if (isNaN_(k.left) || isNaN_(k.top) || isNaN_(k.right) || isNaN_(k.bottom)) {
                k = j;
            }
            if (k.left > j.left || k.top > j.top || k.right > j.right || k.bottom > j.bottom) {
                k = j;
            }
            let l = new Rect(0, d.left - k.left, d.top - k.top, d.width + k.left + k.right, d.height + k.top + k.bottom);
            let m = a.j;
            a.j = null;
            this.aa(a, l, e, f, g, h);
            a.j = m;
            a.width = a.m;
            a.height = a.l;
        }
        ae(a) {
            let b = a;
            b.j = null;
        }
        ah(a) {
        }
        ai(a, b) {
        }
        aj(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = 0;
            let e = 0;
            let f = new TransformGroup();
            let g = ((() => {
                let $ret = new RotateTransform();
                $ret.j = b;
                $ret.k = d;
                $ret.l = e;
                return $ret;
            })());
            f.j.add(g);
            c.j = f;
        }
        ar(a, b, c, d, e, f, g, h, i) {
            let j = Math.max(e, Math.max(f, Math.max(g, h)));
            let k = new Thickness(0, j);
            if (this.a.av) {
                k = new Thickness(0, Math.sqrt((j * j) / 2));
            }
            let l = c.d;
            if (isNaN_(l.left) || isNaN_(l.top) || isNaN_(l.right) || isNaN_(l.bottom)) {
                l = k;
            }
            if (l.left > k.left || l.top > k.top || l.right > k.right || l.bottom > k.bottom) {
                l = k;
            }
            let m = b.j;
            let n = new TransformGroup();
            let o = a.n + l.left;
            let p = a.o + l.top;
            n.j.add(m);
            a.j = n;
        }
        ad(a) {
            a.j = null;
        }
        x(a, b, c, d) {
            let e = a.al.length;
            let f = a.al;
            let g = a.al;
            while ((this.m(a) + c + d) > b && e > 0) {
                e--;
                f = f.substr(0, e) + "\u2026";
                a.al = f;
            }
            a.al = g;
            return f;
        }
        af() {
            if (this.e == null) {
                return;
            }
            let a = this.g();
            for (let b of fromEnum(a)) {
                let c = typeCast(FrameworkElement.$, b);
                if (c != null) {
                    this.a.cg(c);
                }
                this.a.b7(b);
            }
        }
        g() {
            let a = this.a.a1();
            let b = this.a.a0();
            if (!this.a.ad.c6) {
                return a;
            }
            else {
                return b;
            }
        }
        l(a) {
            if (this.a.ad != null && this.a.ad.by) {
                return this.ax(a).height;
            }
            else {
                return this.h;
            }
        }
        n(a) {
            return this.l(a) + this.r() + this.o();
        }
        an() {
            this.aw = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
        }
        m(a) {
            if (this.a.ad != null && this.a.ad.by) {
                return this.ax(a).width;
            }
            else {
                let b = a;
                if (b != null && b.al != null) {
                    return this.e.e(b);
                }
                return 0;
            }
        }
        w(a) {
            let b = a;
            if (b != null && b.al != null) {
                return this.m(a) + this.p() + this.q();
            }
            return 0;
        }
        ax(a) {
            let b = a;
            if (b != null && b.al != null) {
                b.ag = true;
                let c = this.e.ag(b, this.h, true);
                return new Size(1, c.c, c.b);
            }
            return new Size(1, 0, 0);
        }
        ac() {
            this.a.bh = this.a.ad.eo();
        }
        ak() {
            this.ag();
            this.a.c8(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        }
        f() {
            return this.e;
        }
        al(a) {
            this.e = a;
        }
        y() {
            if (this.a.c1.isEmpty) {
                return;
            }
            let a = this.a.bd;
            this.a.c6(new Size(1, this.a.c1.width, this.a.c1.height));
            if (this.a.bd != a) {
                this.a.ad.bf.l6();
                this.am();
            }
        }
        am() {
        }
        ap(a) {
            this.e.w(a);
        }
        ao() {
            if (this.e == null) {
                return;
            }
            if (this.e.d) {
                if (this.a.ad.bh != null && this.a.ad.bh.gc != 1) {
                    this.e.z();
                    this.e.aa(this.a.ad.bh.gc, this.a.ad.bh.gc);
                }
                this.ag();
                this.av = this.a.c1;
                let a = this.a.ad.bf.getFontBrush();
                if (this.a.ag != null && this.a.ag.textColor != null) {
                    a = this.a.ag.textColor;
                }
                if (this.a.j != null) {
                    this.e.z();
                    this.e.j(this.a.j);
                }
                let b = false;
                for (let c of fromEnum(this.g())) {
                    let d = typeCast(TextBlock.$, c);
                    if (d != null) {
                        if (d.s != 0) {
                            b = true;
                            continue;
                        }
                        d.ao = a;
                        if (d.j != null) {
                            this.e.z();
                            this.e.j(d.j);
                        }
                        this.ap(d);
                        if (d.j != null) {
                            this.e.y();
                        }
                    }
                }
                if (b) {
                    for (let e of fromEnum(this.a.ab)) {
                        let f = typeCast(Rectangle.$, e);
                        if (f != null) {
                            if (f.s == 0) {
                                continue;
                            }
                            if (f.j != null) {
                                this.e.z();
                                this.e.j(f.j);
                            }
                            this.e.v(f);
                            if (f.j != null) {
                                this.e.y();
                            }
                        }
                        let g = typeCast(TextBlock.$, e);
                        if (g != null) {
                            if (g.s == 0) {
                                continue;
                            }
                            if (g.j != null) {
                                this.e.z();
                                this.e.j(g.j);
                            }
                            if (g.ao == null) {
                                g.ao = a;
                            }
                            this.e.w(g);
                            if (g.j != null) {
                                this.e.y();
                            }
                        }
                    }
                }
                if (this.a.j != null) {
                    this.e.y();
                }
                this.aq();
                a = this.at();
                this.e.ac(this.d());
                let h = this.a.ad.ir;
                if (h != null) {
                    h.ao = a;
                    if (h.j != null) {
                        this.e.z();
                        this.e.j(h.j);
                    }
                    this.e.w(h);
                    if (h.j != null) {
                        this.e.y();
                    }
                }
                if (this.a.ad.bh != null && this.a.ad.bh.gc != 1) {
                    this.e.y();
                }
            }
        }
        d() {
            let a = this.a.ad.bh.getFontInfo();
            if (this.a.ad.be != null && this.a.ad.be.textStyle != null) {
                a = this.a.ad.be.h(this.a.ad.bh.cu.j.ae);
            }
            else {
                let b = this.a.ad.bh.cx();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        at() {
            let a = this.a.ad.bf.getFontBrush();
            if (this.a.ad.be != null && this.a.ad.be.textColor != null) {
                a = this.a.ad.be.textColor;
            }
            else {
                let b = this.a.ad.bh.sh();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        ag() {
            if (this.e == null) {
                return;
            }
            let a = this.a.ad.bh.getFontInfo();
            if (this.a.ag != null && this.a.ag.j) {
                a = this.a.ag.h(this.a.ad.bh.cu.j.ae);
            }
            if (this.c != a) {
                this.c = a;
                this.as();
            }
            this.e.ac(a);
        }
        as() {
            if (this.a.ad != null && this.a.ad.bh != null) {
                if (this.a.ag == null || this.a.ag.textStyle == null) {
                    this.h = this.a.ad.bh.cu.a9;
                    return;
                }
                if (this.h == 0) {
                    this.h = this.a.ad.bh.cu.a9;
                }
                let a = this.h;
                let b = this.a.ad.bh.getFontInfo();
                if (this.a.ag != null && this.a.ag.textStyle != null) {
                    b = this.a.ag.h(this.a.ad.bh.cu.j.ae);
                }
                let c = FontUtil.getCurrentFontHeight(this.a.ad.bh.cu.j.ae, b);
                this.h = c;
                if (a != this.h) {
                    this.a.ad.bh.l6();
                }
            }
        }
        j() {
            if (this.a.ad.g5 == null) {
                return 0;
            }
            if (this.a.ad.be != null && this.a.ad.be.visibility == 1) {
                return 0;
            }
            if (!isNaN_(this.i)) {
                return this.i;
            }
            let a = this.d();
            if (this.a.ad.bh == null) {
                return this.h;
            }
            this.i = FontUtil.getCurrentFontHeight(this.a.ad.bh.cu.j.ae, a);
            return this.i;
        }
        k() {
            if (this.a.ad.be != null && this.a.ad.be.visibility == 1) {
                return 0;
            }
            if (this.e == null) {
                return 0;
            }
            let a = this.a.ad.ir;
            if (a != null && a.al != null) {
                this.e.ac(this.d());
                let b = this.e.e(a);
                this.ag();
                return b;
            }
            return 0;
        }
        aq() {
            if (this.a.ab.count == 0) {
                return;
            }
            if (this.a.ad.jz == null) {
                this.aw._stroke = this.a.ad.bf.se();
            }
            else {
                this.aw._stroke = this.a.ad.jz;
            }
            this.aw.ac = this.a.ad.fh;
            this.e.s(this.aw);
        }
        ab(a) {
        }
        ay() {
            return this.a.ad.bh.tr();
        }
        v() {
            if (this.a.ad.be != null && !isNaN_(this.a.ad.be.topMargin)) {
                return Math.max(0, this.a.ad.be.topMargin);
            }
            else {
                return this.ay().top;
            }
        }
        s() {
            if (this.a.ad.be != null && !isNaN_(this.a.ad.be.bottomMargin)) {
                return Math.max(0, this.a.ad.be.bottomMargin);
            }
            else {
                return this.ay().bottom;
            }
        }
        t() {
            if (this.a.ad.be != null && !isNaN_(this.a.ad.be.leftMargin)) {
                return Math.max(0, this.a.ad.be.leftMargin);
            }
            else {
                return this.ay().left;
            }
        }
        u() {
            if (this.a.ad.be != null && !isNaN_(this.a.ad.be.rightMargin)) {
                return Math.max(0, this.a.ad.be.rightMargin);
            }
            else {
                return this.ay().right;
            }
        }
        au() {
            return this.aw.ak.d;
        }
        b() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.ad.jz;
                $ret.c = this.a.ad.fh;
                return $ret;
            })());
            if (this.a.ad != null && typeCast(XamDataChart.$, this.a.ad.bf) !== null) {
                let b = this.a.ad.bf;
                if (b.ug && b.cl != 2 && b.cl != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        r() {
            if (this.a.ag == null) {
                return 0;
            }
            return Math.max(0, this.a.ag.topMargin);
        }
        p() {
            if (this.a.ag == null) {
                return 0;
            }
            return Math.max(0, this.a.ag.leftMargin);
        }
        q() {
            if (this.a.ag == null) {
                return 0;
            }
            return Math.max(0, this.a.ag.rightMargin);
        }
        o() {
            if (this.a.ag == null) {
                return 0;
            }
            return Math.max(0, this.a.ag.bottomMargin);
        }
    }
    AxisLabelPanelBaseView.$t = /*@__PURE__*/ markType(AxisLabelPanelBaseView, 'AxisLabelPanelBaseView');
    return AxisLabelPanelBaseView;
})();
/**
 * @hidden
 */
export let AxisView = /*@__PURE__*/ (() => {
    class AxisView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.ba = null;
            this.bb = null;
            this.bd = null;
            this.bc = null;
            this.b = new AxisComponentsFromView();
            this.h = null;
            this.k = null;
            this.j = null;
            this._isDirty = false;
            this.be = null;
            this.a8 = Rect.empty;
            this.a = a;
            this.be = new Rectangle();
        }
        aj() {
            this.ba = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                return $ret;
            })());
            this.bd = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                $ret.stroke = null;
                return $ret;
            })());
            this.bb = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
            this.bc = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
            this.a.jz = AxisDefaults.j;
            this.a.fg = AxisDefaults.d;
            this.a.fh = AxisDefaults.e;
            this.a.eq = AxisDefaults.b;
            this.a.et = AxisDefaults.c;
            this.a.ff = AxisDefaults.a;
        }
        al(a) {
        }
        a0() {
            let a = new TextBlock();
            return a;
        }
        at(a) {
            a._visibility = 0;
            a.s = 0;
            if (a.x == null) {
                this.a.av.ab.add(a);
            }
        }
        av(a) {
            a._visibility = 1;
        }
        au(a) {
            if (this.a.av.ab.contains(a)) {
                this.a.av.ab.remove(a);
            }
        }
        bf() {
            let a = new Rectangle();
            return a;
        }
        s(a) {
            if (a.x == null) {
                this.d.ab.add(a);
            }
            a._visibility = 0;
        }
        u(a) {
            a._visibility = 1;
        }
        t(a) {
            if (this.a.av.ab.contains(a)) {
                this.a.av.ab.remove(a);
            }
        }
        am() {
        }
        o() {
            return true;
        }
        get index() {
            if (this.a.bh != null && this.a.bh.ej) {
                return this.a.bh.series.count + 1;
            }
            let a = typeCast(XamDataChart.$, this.a.bf);
            let b = 0;
            if (a == null) {
                return 0;
            }
            if (a != null && a.t0 == 1) {
                let c = 0;
                for (let d = 0; d < this.a.bh.series.count; d++) {
                    if (this.a.bh.series._inner[d].isStacked) {
                        c += this.a.bh.series._inner[d].hn();
                    }
                    else {
                        c++;
                    }
                }
                b = c;
            }
            return b + a.axes.indexOf(this.a);
        }
        ag() {
            this.d.cf();
            this.d.b3();
        }
        ae() {
            this.d.ca();
        }
        aa() {
            if (this.d != null) {
                this.d.ab.clear();
            }
            this.ac(this.ba.ak.d);
            this.ac(this.bd.ak.d);
            this.ac(this.bb.ak.d);
            this.ac(this.bc.ak.d);
            this.ah();
        }
        ay(a) {
            this.ba._visibility = a;
            this.bb._visibility = a;
            this.bd._visibility = a;
            this.bc._visibility = a;
        }
        aq() {
        }
        z(a) {
            this.a.cp = true;
            if (this.a.bh != null) {
                this.a.bh.l6();
            }
            this.a.h6();
        }
        c() {
            this.b.a = this.ba;
            this.b.b = this.bb;
            this.b.c = this.bc;
            this.b.d = this.bd;
            return this.b;
        }
        ac(a) {
            if (a != null) {
                a.clear();
            }
        }
        a1() {
            return this.ba.ak.d;
        }
        e() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.jy;
                $ret.c = this.a.ff;
                $ret.f = this.a.j2;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bf) !== null) {
                let b = this.a.bf;
                if (b.ug && b.cl != 2 && b.cl != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        a4() {
            return this.bd.ak.d;
        }
        a2() {
            return this.bb.ak.d;
        }
        f() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.jv;
                $ret.c = this.a.eq;
                $ret.f = this.a.j0;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bf) !== null) {
                let b = this.a.bf;
                if (b.ug && b.cl != 2 && b.cl != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        a3() {
            return this.bc.ak.d;
        }
        g() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.jw;
                $ret.c = this.a.et;
                $ret.f = this.a.j1;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bf) !== null) {
                let b = this.a.bf;
                if (b.ug && b.cl != 2 && b.cl != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        get d() {
            return this.a.ap().a;
        }
        aw(a, b, c) {
            this.d.ad = a;
            this.d.c5 = b;
            this.d.c4 = c;
            this.ah();
        }
        ab() {
            this.d.ab.clear();
            this.ah();
        }
        as(a) {
            this.d.bw = a;
            this.ah();
        }
        ax(a, b) {
            this.d.a9 = a;
            this.d.ba = b;
            this.d.ar = false;
        }
        ar(a) {
            this.d.bg = a;
        }
        y() {
        }
        r(a) {
            return null;
        }
        n() {
            return false;
        }
        l() {
            return false;
        }
        q(dataItem_) {
            if (this.a.at != null) {
                return this.a.at(dataItem_);
            }
            if (this.a.ah != null) {
                return this.a.ah.i(dataItem_);
            }
            return null;
        }
        p(dataItem_) {
            if (this.n() && this.l()) {
                return this.q(dataItem_);
            }
            else {
                if (this.a.at != null) {
                    return this.a.at(dataItem_);
                }
                if (this.a.ah != null) {
                    return this.a.ah.i(dataItem_);
                }
            }
            let label_ = this.a.fz;
            let a = typeof dataItem_ === 'number' && typeof label_ === 'string';
            let labelValue_ = null;
            if (this.h != null) {
                labelValue_ = this.h.getPropertyValue(dataItem_);
                if ((labelValue_ === undefined)) {
                    labelValue_ = label_;
                }
            }
            else {
                labelValue_ = a ? stringFormat(label_, dataItem_) : (typeof dataItem_[label_] != 'undefined') ? dataItem_[label_] : label_;
                ;
            }
            if (this.a.expectFunctions) {
                if ((typeof (labelValue_) == 'function')) {
                    labelValue_ = labelValue_();
                }
            }
            return labelValue_;
        }
        ai(a, b) {
            this.j = a;
            this.k = b;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            this._isDirty = a;
        }
        ah() {
            if (this.a.bf == null || this.j == null) {
                return;
            }
            if (!this.isDirty) {
                this.isDirty = true;
                this.a.bf.al.o(this.j, this.k);
            }
        }
        undirty(a) {
            this.isDirty = false;
            this.ao(a);
        }
        ao(a) {
            if (this.j == null) {
                return;
            }
            if (this.j.d) {
                if (this.a.bh != null && this.a.bh.gc != 1) {
                    this.j.z();
                    this.j.aa(this.a.bh.gc, this.a.bh.gc);
                }
                let b = this.a.bf.te();
                if (a) {
                    this.j.k(b.left, b.top, b.width, b.height);
                }
                if (a) {
                    if (this.a.bh.sq != null && !this.a.kc.isEmpty) {
                        this.be.o = this.a.kc.top;
                        this.be.n = this.a.kc.left;
                        this.be.width = this.a.kc.width;
                        this.be.height = this.a.kc.height;
                        this.be._fill = this.a.bh.sq;
                        this.j.v(this.be);
                    }
                }
                this.j.z();
                this.j.ae(this.a.kc);
                this.ap();
                this.j.y();
                if (this.a.bh != null && this.a.bh.gc != 1) {
                    this.j.y();
                }
            }
            if (this.k.d) {
                if (this.a.bh != null && this.a.bh.gc != 1) {
                    this.k.z();
                    this.k.aa(this.a.bh.gc, this.a.bh.gc);
                }
                let c = this.a8;
                let d = this.a.bf.te();
                if (!c.isEmpty && a) {
                    this.k.k(d.left, d.top, d.width, d.height);
                }
                if (this.a.bh != null && this.a.bh.gc != 1) {
                    this.k.y();
                }
            }
        }
        postRender() {
            this.d.ck();
        }
        ap() {
            if (this.j.d) {
                this.ba._stroke = this.a.ju;
                this.bd._fill = this.a.jx;
                this.bc._stroke = this.a.jt;
                this.bb._stroke = this.a.js;
                this.bc.ac = this.a.et;
                this.bb.ac = this.a.eq;
                this.ba.ac = this.a.ff;
                this.bc.ai = this.a.j1;
                this.bb.ai = this.a.j0;
                this.ba.ai = this.a.j2;
                this.a8 = this.a.kc;
                this.j.s(this.ba);
                this.j.s(this.bd);
                this.j.s(this.bb);
                this.j.s(this.bc);
            }
        }
        af() {
            this.ah();
        }
        ad(a) {
            if (a != null) {
                a.al.r(this);
                a.cu.cq();
            }
        }
        x(a) {
            if (a != null) {
                a.al.l(this);
                this.ah();
            }
        }
        i() {
            if (this.a.bh == null || this.a.bh.cu.j.ae == null) {
                return null;
            }
            return FontUtil.getFont(this.a.bh.cu.j.ae);
        }
        m() {
            return this.j == null;
        }
        an() {
            if (this.a.b8 || this.a.cl) {
                return;
            }
            if (this.a.g5 == null) {
                this.a.ir = null;
                this.a.cp = true;
                this.a.h6();
                return;
            }
            if (this.a.ir == null) {
                let a = new TextBlock();
                a.al = this.a.g5;
                a.dataContext = this.a.be;
                this.a.ir = a;
            }
            else {
                this.a.ir.al = this.a.g5;
                this.a.ir.dataContext = this.a.be;
            }
            this.a.cp = true;
            this.a.h6();
        }
        w() {
            let a;
            let b = new AxisLabelSettings();
            if (this.a.b8) {
                a = "ui-angular-axis-labels";
                b.margin = 0;
            }
            else if (this.a.co) {
                a = "ui-vertical-axis-labels";
                b.location = 2;
            }
            else if (this.a.a1 == 3) {
                a = "ui-radial-axis-labels";
                b.location = 5;
            }
            else {
                a = "ui-horizontal-axis-labels";
                b.location = 1;
            }
            this.v(b, a);
        }
        az() {
            if (this.a.bh == null) {
                return;
            }
            let a = this.a.bh.t9;
            let b = a.fv;
            let c = a.fu;
            if (this.a.jy == null) {
                if (b == null) {
                    this.a.jy = a.fs;
                }
                else if (b.color.l != 0) {
                    this.a.jy = b;
                }
            }
            if (this.a.jv == null) {
                if (c == null) {
                    this.a.jv = a.fs;
                }
                else if (c.color.l != 0) {
                    this.a.jv = c;
                }
            }
        }
        v(a, b) {
            this.a.fk.startCSSQuery();
            let c = this.a.fk.getCssDefaultPropertyValue(b, "margin-top");
            let d = this.a.fk.getCssDefaultPropertyValue(b, "margin-right");
            let e = this.a.fk.getCssDefaultPropertyValue(b, "margin-bottom");
            let f = this.a.fk.getCssDefaultPropertyValue(b, "margin-left");
            let g = this.a.fk.getCssDefaultPropertyValue(b, "text-align");
            let h = this.a.fk.getCssDefaultPropertyValue(b, "vertical-align");
            let i = this.a.fk.getCssDefaultPropertyValue(b, "color");
            let j = FontUtil.getFontForClass(this.a.fk, b);
            this.a.fk.endCSSQuery();
            if (c != null) {
                a.topMargin = parseFloat(c);
            }
            if (d != null) {
                a.rightMargin = parseFloat(d);
            }
            if (e != null) {
                a.bottomMargin = parseFloat(e);
            }
            if (f != null) {
                a.leftMargin = parseFloat(f);
            }
            if (i != null) {
                if (a.textColor == null) {
                    a.textColor = new Brush();
                }
                a.textColor._fill = i;
            }
            if (j != null) {
                a.g = j;
            }
            if (g != null) {
                switch (g) {
                    case "right":
                        a.horizontalAlignment = 2;
                        break;
                    case "left":
                        a.horizontalAlignment = 0;
                        break;
                    default:
                        a.horizontalAlignment = 1;
                        break;
                }
            }
            if (h != null) {
                switch (h) {
                    case "top":
                        a.verticalAlignment = 0;
                        break;
                    case "bottom":
                        a.verticalAlignment = 2;
                        break;
                    default:
                        a.verticalAlignment = 1;
                        break;
                }
            }
            this.a.ay = a;
        }
        preRender() {
            if (this.a.bh != null) {
                this.a.bh.lv();
            }
        }
        isValid() {
            return this.a != null && !this.a.kc.isEmpty;
        }
        a5(a) {
            return { $type: Point_$type, x: a.n, y: a.o };
        }
        a6() {
            return { $type: Point_$type, x: this.a.av.c1.left, y: this.a.av.c1.top };
        }
        a9() {
            let a = this.a.av.c1;
            return a;
        }
        a7(a) {
            return { $type: Point_$type, x: a.n, y: a.o };
        }
        bg(a) {
            let b = this.a.av.af.t();
            let c = this.a.av.af.v();
            let d = this.a.av.af.u();
            let e = this.a.av.af.s();
            return new Thickness(1, b, c, d, e);
        }
        ak() {
            if (FastReflectionHelper.needsHelper(this.a.fz)) {
                this.h = new FastReflectionHelper(true, this.a.fz);
            }
            else {
                this.h = null;
            }
        }
    }
    AxisView.$t = /*@__PURE__*/ markType(AxisView, 'AxisView', Base.$, [ISchedulableRender_$type]);
    return AxisView;
})();
/**
 * @hidden
 */
export let CategoryAxisBaseView = /*@__PURE__*/ (() => {
    class CategoryAxisBaseView extends AxisView {
        constructor(a) {
            super(a);
            this.bh = null;
            this.bh = a;
        }
        r(a) {
            let b = 0;
            if (this.bh.categoryMode == 0) {
                b = truncate(Math.round(a));
            }
            else {
                b = truncate(Math.floor(a));
            }
            if (b < 0 || b > this.a.lf - 1) {
                return null;
            }
            let c = this.a.kq.item(b);
            let d = this.p(c);
            if (d == null) {
                return null;
            }
            return d.toString();
        }
        bi(a) {
            let b = 0;
            let c = false;
            for (let d = 0; d < a.count; d++) {
                let e = typeCast(FrameworkElement.$, a._inner[d]);
                if (e == null) {
                    e = this.a.bq.item(d);
                    let f = a._inner[d] == null ? "" : a._inner[d].toString();
                    let g = e.al;
                    let h = 0;
                    let i = 0;
                    if (g != null) {
                        h = g.length;
                    }
                    if (f != null) {
                        i = f.length;
                    }
                    if (h != i) {
                        c = true;
                    }
                    e.al = f;
                    b++;
                }
                else {
                    this.d.ab.add(e);
                }
            }
            if (c) {
                this.a.cp = true;
            }
            this.a.he();
            return b;
        }
    }
    CategoryAxisBaseView.$t = /*@__PURE__*/ markType(CategoryAxisBaseView, 'CategoryAxisBaseView', AxisView.$);
    return CategoryAxisBaseView;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanelBaseView = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanelBaseView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.az = null;
            this.az = a;
        }
        a1() {
        }
        a0() {
            return false;
        }
        a2(a) {
            let b = this.a.bs();
            let c, d;
            c = this.az.dh();
            d = this.az.de();
            let e = this.a.ag != null ? this.a.ag.verticalAlignment : 1;
            let f = this.a.bd;
            let g = a.count;
            let h = this.a.c1;
            let i = this.az.dg();
            let j = i / 2;
            for (let k = 0; k < g; k++) {
                let l = a._inner[k];
                let m = l.height / 2;
                switch (e) {
                    case 0:
                        l.y = h.top + c;
                        break;
                    case 1:
                    case 3:
                        l.y = (h.top + c + j) - m;
                        break;
                    case 2:
                        l.y = (h.bottom - d) - l.height;
                        break;
                }
            }
        }
    }
    HorizontalAxisLabelPanelBaseView.$t = /*@__PURE__*/ markType(HorizontalAxisLabelPanelBaseView, 'HorizontalAxisLabelPanelBaseView', AxisLabelPanelBaseView.$);
    return HorizontalAxisLabelPanelBaseView;
})();
/**
 * @hidden
 */
export let NumericAxisBaseView = /*@__PURE__*/ (() => {
    class NumericAxisBaseView extends AxisView {
        constructor(a) {
            super(a);
            this.bh = null;
            this.bh = a;
        }
        bi() {
        }
        n() {
            return this.bh.lf;
        }
        l() {
            if (this.bh.ko != null) {
                return true;
            }
            if (this.bh.kn != null) {
                return true;
            }
            return false;
        }
        q(dataItem_) {
            if (this.bh.ko != null) {
                return this.bh.ko(dataItem_);
            }
            if (this.bh.kn != null) {
                return this.bh.kn.i(dataItem_);
            }
            return null;
        }
        r(a) {
            let b = this.bh.ky.d(this.bh.kc, this.bh.bh.s9, this.bh.j7(), this.bh.j6());
            return this.bh.ky.w(b, a, -1, NaN);
        }
    }
    NumericAxisBaseView.$t = /*@__PURE__*/ markType(NumericAxisBaseView, 'NumericAxisBaseView', AxisView.$);
    return NumericAxisBaseView;
})();
/**
 * @hidden
 */
export let VerticalAxisLabelPanelView = /*@__PURE__*/ (() => {
    class VerticalAxisLabelPanelView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.az = null;
            this.az = a;
        }
        a0() {
        }
        d() {
            let a = this.a.ad.bh.getFontInfo();
            if (this.a.ad.be != null && this.a.ad.be.textStyle != null) {
                a = this.a.ad.be.h(this.a.ad.bh.cu.j.ae);
            }
            else {
                let b = this.a.ad.bh.cy();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        ay() {
            return this.a.ad.bh.ts();
        }
        at() {
            let a = this.a.ad.bf.getFontBrush();
            if (this.a.ad.be != null && this.a.ad.be.textColor != null) {
                a = this.a.ad.be.textColor;
            }
            else {
                let b = this.a.ad.bh.si();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        a1(a, b) {
            let c, d;
            c = this.az.db();
            d = this.az.dd();
            let e = this.a.ag != null ? this.a.ag.horizontalAlignment : 1;
            let f = this.a.bd;
            let g = this.az.de();
            let h = g / 2;
            let i = this.a.c1;
            for (let j = 0; j < a.count; j++) {
                let k = a._inner[j];
                let l = k.width / 2;
                switch (e) {
                    case 0:
                        k.x = i.left + c;
                        break;
                    case 1:
                    case 3:
                        k.x = (i.left + c + h) - l;
                        break;
                    case 2:
                        k.x = (i.right - d) - k.width;
                        break;
                }
            }
        }
    }
    VerticalAxisLabelPanelView.$t = /*@__PURE__*/ markType(VerticalAxisLabelPanelView, 'VerticalAxisLabelPanelView', AxisLabelPanelBaseView.$);
    return VerticalAxisLabelPanelView;
})();
/**
 * @hidden
 */
export let XamDataChartView = /*@__PURE__*/ (() => {
    class XamDataChartView extends SeriesViewerView {
        constructor(a) {
            super(a);
            this.fn = null;
            this.fw = null;
            this.fs = null;
            this.ft = null;
            this.fv = null;
            this.fu = null;
            this.fp = 0;
            this.fq = 0;
            this.fo = null;
            this.fn = a;
        }
        fr(a) {
            this.p.al.p();
        }
        ds() {
            super.ds();
            if (this.b.count == 0 && this.y != null) {
                if (this.p.gc != 1) {
                    this.y.z();
                    this.y.aa(this.p.gc, this.p.gc);
                }
                this.y.k(0, 0, this.a8, this.a7);
                if (this.p.gc != 1) {
                    this.y.y();
                }
            }
        }
        d4() {
            let a, b;
            let c = 1, d = 0;
            let e = false;
            let f = this.j.e();
            let g;
            let h = this.j.a6(c, g, a, b, d, e);
            c = h.p0;
            g = h.p1;
            a = h.p2;
            b = h.p3;
            d = h.p4;
            e = h.p5;
            if (isNaN_(this.p.ha)) {
                this.p.ha = g[0];
            }
            if (isNaN_(this.p.g1)) {
                this.p.g1 = g[1];
            }
            if (isNaN_(this.p.gj)) {
                this.p.gj = g[2];
            }
            if (isNaN_(this.p.gw)) {
                this.p.gw = g[3];
            }
            this.fn.xw = f.i;
            this.fn.xu = AxisDefaults.h;
            this.fn.xv = AxisDefaults.i;
            this.fn.ug = e;
            this.fv = a;
            this.fu = b;
            this.fn.ag = f.a;
            this.fn.aj = f.f;
            this.fn.ah = f.b != null ? f.b : new BrushCollection();
            this.fn.ai = f.c != null ? f.c : new BrushCollection();
            if (this.fn.ah.count == 0) {
                for (let i = 0; i < f.a.count; i++) {
                    this.fn.ah.add(f.a.item(i));
                }
            }
            if (f.c.count == 0) {
                for (let j = 0; j < f.f.count; j++) {
                    this.fn.ai.add(f.f.item(j));
                }
            }
            this.ft = f.j;
            this.fw = f.k;
            this.fo = f.h;
            this.fs = f.i;
            this.fp = c;
            for (let k of fromEnum(this.fn.series)) {
                k.mw();
            }
            this.fq = d;
        }
        d1() {
            this.fe.ac = Defaults.j;
            this.fd.ac = Defaults.j;
            this.fe._stroke = this.p.sw != null ? this.p.sw : this.ft;
            this.fd._stroke = this.p.sn != null ? this.p.sn : this.ft;
            super.d1();
        }
    }
    XamDataChartView.$t = /*@__PURE__*/ markType(XamDataChartView, 'XamDataChartView', SeriesViewerView.$);
    return XamDataChartView;
})();
/**
 * @hidden
 */
export let SeriesView = /*@__PURE__*/ (() => {
    class SeriesView extends Base {
        constructor(a) {
            super();
            this.e = null;
            this.s = false;
            this.h = null;
            this.d = null;
            this._isDirty = false;
            this.bw = null;
            this.bn = null;
            this.v = 0;
            this.br = Rect.empty;
            this.bm = new Brush();
            this.f = new SeriesComponentsFromView();
            this.k = null;
            this.l = null;
            this.bs = null;
            this.bt = null;
            this.m = false;
            this.a = null;
            this.r = false;
            this.n = false;
            this.p = false;
            this.ad = null;
            this.v = NaN;
            this.r = true;
            this.e = a;
            this.q = false;
            this.bw = new Rectangle();
            this.s = false;
        }
        getDefaultTooltipTemplate() {
            return this.e.a6.a$q(this.e);
        }
        ap() {
            if (this.e.d0) {
                this.e.a6.a$u(this.e);
            }
        }
        j() {
            return new DOMExecutionContext(this.e.cd.cu.j.ae);
        }
        get i() {
            if (this.h == null) {
                this.h = this.j();
            }
            return this.h;
        }
        as() {
            if (!this.q) {
                this.e.f1 = 0.8;
                this.e.b6 = 0;
                this.e.b5 = 1;
                this.d = new DataContext();
                this.d.series = this.e;
                this.e.cg = EasingFunctions.cubicEase;
                this.af();
            }
        }
        getEffectiveViewport() {
            return this.e.getEffectiveViewport1(this);
        }
        az() {
            this.aq();
        }
        aj() {
        }
        get w() {
            if (this.e.cd != null) {
                return this.e.cd.cu.j.ae;
            }
            return null;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            this._isDirty = a;
        }
        get_index() {
            if (this.e == null || this.e.cd == null) {
                return 0;
            }
            if (this.e.cd.ej) {
                if (this.e.dw) {
                    return this.e.cd.series.indexOf(this.e);
                }
                else {
                    let a = this.e.cd.series.indexOf(this.e);
                    if (a >= 0) {
                        return a;
                    }
                    for (let b = 0; b < this.e.cd.series.count; b++) {
                        if (this.e.cd.series._inner[b].dw) {
                            let c = this.e.cd.series._inner[b].be();
                            if (c == this.e) {
                                return b;
                            }
                        }
                    }
                    return a;
                }
            }
            let d = typeCast(XamDataChart.$, this.e.cb);
            let e = 0;
            if (d != null) {
                if (d.t0 == 2 || d.t0 == 0) {
                    e = d.axes.count;
                }
            }
            let f = 0;
            for (let g = 0; g < this.e.cd.series.count; g++) {
                if (this.e.cd.series._inner[g] == this.e) {
                    break;
                }
                if (this.e.cd.series._inner[g].isStacked) {
                    f += this.e.cd.series._inner[g].hn();
                }
                else {
                    f++;
                }
            }
            return e + f;
        }
        get index() {
            return this.get_index();
        }
        aq() {
            if (this.e.cd == null) {
                return;
            }
            if (!this.isDirty) {
                this.isDirty = true;
                this.a.o(this.k, this.l);
            }
        }
        undirty(a) {
            this.isDirty = false;
            this.a4(a);
        }
        au() {
            this.aq();
        }
        bq() {
            if (this.bn == null) {
                this.bn = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(0, 0, 0, 0);
                    return $ret;
                })());
            }
            return this.bn;
        }
        u() {
            if (!isNaN_(this.v)) {
                return this.v;
            }
            if (this.e.cd != null) {
                return this.e.cd.gc;
            }
            else {
                return 1;
            }
        }
        a4(a) {
            if (this.k == null) {
                return;
            }
            if (this.br.isEmpty) {
                this.br = this.bu;
            }
            let b = this.br;
            let c = this.e.cd.te();
            let d = c.left;
            let e = c.top;
            let f = c.width;
            let g = c.height;
            let h = this.u();
            if (this.p) {
                d = this.bu.left;
                e = this.bu.top;
                f = this.bu.width;
                g = this.bu.height;
            }
            if (this.k.d) {
                if (h != 1) {
                    this.k.z();
                    this.k.aa(h, h);
                }
                if (a) {
                    this.k.k(d, e, f, g);
                }
                if (a) {
                    if (this.e.cd.sq != null && !this.bu.isEmpty) {
                        this.bw.o = this.bu.top;
                        this.bw.n = this.bu.left;
                        this.bw.width = this.bu.width;
                        this.bw.height = this.bu.height;
                        this.bw._fill = this.e.cd.sq;
                        this.k.v(this.bw);
                    }
                }
                if (h != 1) {
                    this.k.y();
                }
            }
            if (this.l != null && this.r) {
                if (this.l.d) {
                    if (this.e.cd != null && h != 1) {
                        this.l.z();
                        this.l.aa(h, h);
                    }
                    if (!b.isEmpty && a) {
                        this.l.k(b.left, b.top, b.width, b.height);
                    }
                    this.ba(true);
                    this.a6(this.l, true);
                    this.a5(this.l, true);
                    if (h != 1) {
                        this.l.y();
                    }
                }
            }
            if (this.k.d && this.r) {
                if (h != 1) {
                    this.k.z();
                    this.k.aa(h, h);
                }
                this.k.z();
                if (!this.q && Rect.l_op_Inequality(this.e.pu, null) && !this.e.pu.isEmpty && (this.e.pu.width != 1 || this.e.pu.height != 1)) {
                    this.k.ae(new Rect(0, this.bu.left + this.bu.width * this.e.pu.left, this.bu.top + this.bu.height * this.e.pu.top, this.bu.width * this.e.pu.width, this.bu.height * this.e.pu.height));
                }
                else {
                    this.k.ae(this.bu);
                }
                this.ba(false);
                this.k.ad(this.e._opacity);
                if (this.e.dn && this.e.dp && !this.q) {
                    if (this.e.e9) {
                        this.k.o(this.e.pf.colorString, 0, this.e.gz, this.e.g0);
                        let i = this.e.cd.cu.j.x;
                        let j = this.e.cd.cu.j.ak;
                        if (h != 1) {
                            i.z();
                            i.aa(h, h);
                        }
                        i.k(c.left, c.top, c.width, c.height);
                        this.a6(i, false);
                        this.a5(i, false);
                        this.k.m(j.getNativeElement(), 1, 0, 0, c.width, c.height);
                        if (h != 1) {
                            i.y();
                        }
                    }
                    else {
                        this.k.o(this.e.pf.colorString, this.e.gy, this.e.gz, this.e.g0);
                        this.a6(this.k, false);
                        this.a5(this.k, false);
                    }
                    this.k.l();
                }
                else {
                    this.a6(this.k, false);
                    this.a5(this.k, false);
                }
                this.k.ad(1);
                this.k.y();
                if (h != 1) {
                    this.k.y();
                }
            }
        }
        bd(a, b, c) {
            if (c) {
                this.bf(a, b);
            }
            else {
                this.be(a, b);
            }
        }
        bg(a, b, c) {
            if (c) {
                this.bi(a, b);
            }
            else {
                this.bh(a, b);
            }
        }
        aa(a, b) {
            if (b) {
                return this.ab(a);
            }
            else {
                return this.ac(a);
            }
        }
        ab(a) {
            return null;
        }
        ac(a) {
            return null;
        }
        be(a, b) {
        }
        bh(a, b) {
        }
        bf(a, b) {
        }
        bi(a, b) {
        }
        ba(a) {
            if (a) {
                this.bc();
            }
            else {
                this.bb();
            }
        }
        bb() {
        }
        bc() {
        }
        bp(a) {
            return this.bo();
        }
        bo() {
            let a = this.e.hq;
            let num_ = (a + 1) * 1000;
            let b = ((num_ & 0x3F) << 2);
            num_ = (num_ >> 6);
            let c = ((num_ & 0x3F) << 2);
            num_ = (num_ >> 6);
            let d = ((num_ & 0x3F) << 2);
            this.bm._fill = "rgb(" + b + "," + c + "," + d + ")";
            return this.bm;
        }
        a6(a, b) {
            this.br = this.bu;
        }
        a5(a, b) {
        }
        ax() {
        }
        am() {
        }
        an() {
        }
        g() {
            return this.f;
        }
        a9(a) {
        }
        t() {
            return true;
        }
        aw() {
        }
        av() {
        }
        a7() {
            this.e.o3 = null;
        }
        ah() {
            this.e.o3 = this.e.o7;
        }
        a8() {
            this.e.o6 = null;
        }
        ai() {
            this.e.o6 = this.e.pc;
        }
        c(a) {
            if (typeCast(DataContext.$, a) !== null) {
                return a;
            }
            return null;
        }
        ar(a, b) {
            this.k = a;
            this.l = b;
        }
        get bu() {
            return this.bs;
        }
        set bu(a) {
            this.bs = a;
        }
        get_bv() {
            if (this.p) {
                return this.bt;
            }
            else if (this.q) {
                return XamDataChart.tl;
            }
            else {
                return this.e.cd != null ? this.e.cd.s9 : Rect.empty;
            }
        }
        get bv() {
            return this.get_bv();
        }
        get q() {
            return this.m;
        }
        set q(a) {
            this.m = a;
        }
        ak(a) {
            if (a != null) {
                this.a.r(this);
                if (this.e.bz != null) {
                    this.e.bz.a.r(this.e.bz);
                }
            }
        }
        ag(a) {
            if (a != null) {
                if (this.e.e7) {
                    this.k = this.e.cd.cu.z;
                    a.cu.a.l(this);
                    this.a = a.cu.a;
                }
                else {
                    this.k = this.e.cd.cu.y;
                    a.al.l(this);
                    this.a = a.al;
                }
                if (this.e.bz != null) {
                    a.am.l(this.e.bz);
                    this.e.bz.a = a.am;
                    this.e.bz.aq();
                }
                if (this.e.d0) {
                    for (let b of fromEnum(this.e.a6.a$h.keys)) {
                        a.ak.l(this.e.a6.a$h.item(b));
                        this.e.a6.a$h.item(b).a = a.ak;
                        this.e.a6.a$h.item(b).aq();
                    }
                }
                this.aq();
            }
        }
        postRender() {
            this.a0();
        }
        a0() {
        }
        b(a) {
            return null;
        }
        a2(a) {
            this.e.bz.k = a.a;
        }
        al(a) {
        }
        bj() {
            if (this.n) {
                return;
            }
            if (this.e.cd != null) {
                let a = (this.e.legend != null) ? this.e.legend : this.e.cd.legend;
                if (a != null && this.e.nc != null && a.containsChild(this.e.nc)) {
                    a.removeChild(this.e.nc);
                    let b = this.e.h2();
                    b.content.actualItemBrush = this.e.o3;
                    b.content.outline = this.e.o6;
                    b.content.thickness = this.e.fw;
                    a.addChildInOrder(this.e.nc, this.e);
                }
            }
        }
        at() {
            this.e.kt(this.e.a1, this.e.a1);
        }
        ay() {
            this.bj();
        }
        getViewInfo(a, b) {
            a = this.bu;
            b = this.bv;
            return {
                p0: a,
                p1: b
            };
        }
        o() {
            return this.k != null;
        }
        bk() {
            this.r = this.e._visibility == 0;
            this.aq();
        }
        a3() {
            this.e.a6.a$ag(this.e);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.pf = a;
            this.e.gy = 5;
            this.e.gz = 5;
            this.e.g0 = 5;
        }
        ao() {
        }
        preRender() {
            if (this.e.cd != null && !this.q) {
                this.e.cd.lv();
            }
        }
        isValid() {
            return true;
        }
        a1(a) {
            this.k = a.a;
        }
        bl(type_) {
            let legendTemplates_ = TypeRegistrar.get("LegendTemplates");
            let a = (legendTemplates_.resolveLegendItemTemplate(type_));
            return a;
        }
    }
    SeriesView.$t = /*@__PURE__*/ markType(SeriesView, 'SeriesView', Base.$, [ISchedulableRender_$type, IProvidesViewport_$type]);
    return SeriesView;
})();
/**
 * @hidden
 */
export let MarkerSeriesView = /*@__PURE__*/ (() => {
    class MarkerSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.b1 = null;
            this.b5 = 1;
            this.b7 = Defaults.ab;
            this.b6 = 3;
            this.b4 = null;
            this.b3 = false;
            this.bx = new Marker();
            this.co = null;
            this.bx = new Marker();
            this.bx.content = new DataContext();
            this.b1 = a;
        }
        as() {
            super.as();
            this.b4 = new List$1(Marker.$, 0);
            this.co = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.c;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
        }
        cg() {
            for (let a of fromEnum(this.b4)) {
                a.ah = this.b1.q2;
            }
            this.aq();
        }
        cq() {
            if (this.k == null) {
                return new Size(1, 0, 0);
            }
            let a = new DataTemplatePassInfo();
            a.isHitTestRender = false;
            a.context = this.k.g();
            a.viewportTop = this.bu.top;
            a.viewportLeft = this.bu.left;
            a.viewportWidth = this.bu.width;
            a.viewportHeight = this.bu.height;
            a.passID = "TestMeasure";
            let b = new DataTemplateRenderInfo();
            b.isHitTestRender = false;
            b.passInfo = a;
            let c = new DataTemplateMeasureInfo();
            c.passInfo = a;
            let d = this.k.g();
            c.context = d;
            b.context = d;
            let e = 0;
            let f = 0;
            if (this.b1.q2 != null && this.b1.q2.passStarting != null) {
                this.b1.q2.passStarting(a);
            }
            let g = this.b1.q2;
            if (this.b4.count > 0) {
                let h = this.b4._inner[0];
                c.data = h.content;
                c.width = h.width;
                c.height = h.height;
                c.renderOffsetX = 0;
                c.renderOffsetY = 0;
                c.renderContext = this.k;
                g = h.ah;
            }
            let i = 0;
            let j = 0;
            if (g != null && g.measure != null) {
                g.measure(c);
                i = c.width;
                j = c.height;
            }
            if (this.b1.q2 != null && this.b1.q2.passCompleted != null) {
                this.b1.q2.passCompleted(a);
            }
            return new Size(1, i, j);
        }
        cn(a) {
        }
        b0() {
            let a = new Marker();
            a.content = ((() => {
                let $ret = new DataContext();
                $ret.series = this.e;
                return $ret;
            })());
            a.ah = this.b1.q2;
            this.b4.add(a);
            return a;
        }
        cj(a) {
            a._visibility = 0;
        }
        cl(a) {
            a._visibility = 1;
        }
        ck(a) {
            this.b4.remove(a);
        }
        b2() {
            return this.b1.q3 != null;
        }
        ce() {
            this.b1.q1 = null;
        }
        b8() {
            this.b1.q1 = this.b1.q3;
        }
        cp(a) {
            let b = a.n;
            let c = a.o;
            let d = a.m;
            let e = a.l;
            return new Rect(0, b - d / 2, c - d / 2, d, e);
        }
        cb(a) {
            switch (a) {
                case SeriesViewer.$$p[2]:
                    this.b1.q1 = this.b1.cd.pl;
                    break;
                case SeriesViewer.$$p[37]:
                    this.b1.q1 = this.b1.cd.pu;
                    break;
                case SeriesViewer.$$p[27]:
                    this.b1.q1 = this.b1.cd.pr;
                    break;
                case SeriesViewer.$$p[31]:
                    this.b1.q1 = this.b1.cd.ps;
                    break;
                case SeriesViewer.$$p[5]:
                    this.b1.q1 = this.b1.cd.pm;
                    break;
                case SeriesViewer.$$p[19]:
                    this.b1.q1 = this.b1.cd.pp;
                    break;
                case SeriesViewer.$$p[7]:
                    this.b1.q1 = this.b1.cd.pn;
                    break;
                case SeriesViewer.$$p[34]:
                    this.b1.q1 = this.b1.cd.pt;
                    break;
                case SeriesViewer.$$p[20]:
                    this.b1.q1 = this.b1.cd.pq;
                    break;
                case SeriesViewer.$$p[8]:
                    this.b1.q1 = this.b1.cd.po;
                    break;
            }
        }
        cc() {
            this.b1.rh = null;
        }
        b9() {
            if (!isNaN_(this.e.fu) && this.e.fu != 1) {
                let a = BrushUtil.o(this.b1.rj, this.e.fu);
                this.b1.rh = a;
            }
            else {
                this.b1.rh = this.b1.rj;
            }
        }
        cd() {
            this.b1.ri = null;
        }
        ca() {
            this.b1.ri = this.b1.rk;
        }
        cm() {
            this.aq();
        }
        bh(a, b) {
            super.bh(a, b);
            if (!this.b3) {
                let c = a;
                let d = c.content;
                if (d != null) {
                    d.actualItemBrush = this.b1.rh;
                    if (d.itemBrush != null) {
                        d.actualItemBrush = d.itemBrush;
                    }
                    d.outline = this.b1.ri;
                    d.thickness = this.b1.qm;
                }
            }
        }
        bi(a, b) {
            super.bi(a, b);
            let c = a;
            this.bx._visibility = c._visibility;
            this.bx.ah = c.ah;
            this.bx.width = c.width;
            this.bx.height = c.height;
            this.bx.m = c.m;
            this.bx.l = c.l;
            this.bx.n = c.n;
            this.bx.o = c.o;
            let d = this.bp(b);
            let e = this.bx.content;
            let f = c.content;
            e.item = f.item;
            e.series = f.series;
            e.thickness = f.thickness;
            if (e != null) {
                e.actualItemBrush = d;
                e.outline = d;
                e.thickness = this.b5 + this.b6;
            }
        }
        b(a) {
            if (a >= 0 && a < this.b4.count) {
                return this.b4._inner[a].content;
            }
            return super.b(a);
        }
        a5(a, b) {
            super.a5(a, b);
            if (a.d) {
                let c = new DataTemplatePassInfo();
                c.isHitTestRender = b;
                c.context = a.g();
                c.viewportTop = this.bu.top;
                c.viewportLeft = this.bu.left;
                c.viewportWidth = this.bu.width;
                c.viewportHeight = this.bu.height;
                c.passID = "Markers";
                let d = new DataTemplateRenderInfo();
                d.isHitTestRender = b;
                d.passInfo = c;
                let e = new DataTemplateMeasureInfo();
                e.passInfo = c;
                let f = false;
                let g = a.g();
                e.context = g;
                d.context = g;
                let h = 0;
                let i = 0;
                if (this.b1.q2 != null && this.b1.q2.passStarting != null) {
                    this.b1.q2.passStarting(c);
                }
                for (let j = 0; j < this.b4.count; j++) {
                    let k = this.b4._inner[j];
                    if (k._visibility == 1) {
                        continue;
                    }
                    this.bg(k, j, b);
                    if (b) {
                        k = this.bx;
                    }
                    if (!f) {
                        e.data = k.content;
                        e.width = k.width;
                        e.height = k.height;
                        e.renderOffsetX = 0;
                        e.renderOffsetY = 0;
                        e.renderContext = a;
                        let l = k.ah;
                        if (l.measure != null) {
                            e.data = k.content;
                            l.measure(e);
                            f = e.isConstant;
                            if (f) {
                                h = e.width;
                                i = e.height;
                            }
                        }
                        d.availableWidth = e.width;
                        d.availableHeight = e.height;
                        d.renderOffsetX = e.renderOffsetX;
                        d.renderOffsetY = e.renderOffsetY;
                        d.renderContext = a;
                    }
                    else {
                        d.availableWidth = h;
                        d.availableHeight = i;
                    }
                    if (!isNaN_(k.width) && !isInfinity(k.width)) {
                        d.availableWidth = k.width;
                    }
                    if (!isNaN_(k.height) && !isInfinity(k.height)) {
                        d.availableHeight = k.height;
                    }
                    a.p(d, k);
                    k.m = d.availableWidth;
                    k.l = d.availableHeight;
                    k.ai = d.renderOffsetX;
                    k.aj = d.renderOffsetY;
                }
                if (this.b1.q2 != null && this.b1.q2.passCompleted != null) {
                    this.b1.q2.passCompleted(c);
                }
            }
        }
        ch(a) {
            a.create = runOn(this, this.b0);
            a.destroy = runOn(this, this.ck);
            a.activate = runOn(this, this.cj);
            a.disactivate = runOn(this, this.cl);
        }
        ci(a) {
            a.create = runOn(this, this.b0);
            a.destroy = runOn(this, this.ck);
            a.activate = runOn(this, this.cj);
            a.disactivate = runOn(this, this.cl);
        }
        by(a) {
            let b = this.bz(a, 0);
            if (b == null) {
                b = this.bz(a, 3);
            }
            return b;
        }
        bz(a, b) {
            let c;
            let d;
            let e;
            let f;
            for (let g = this.b4.count - 1; g >= 0; g--) {
                let h = this.b4._inner[g];
                if (h._visibility == 1 || h._opacity == 0) {
                    continue;
                }
                c = (h.m / 2) + b;
                d = (h.l / 2) + b;
                e = h.ai;
                f = h.aj;
                if ((h.n + e) - c <= a.x && (h.n + e) + c >= a.x && (h.o + f) - d <= a.y && (h.o + f) + d >= a.y) {
                    return h;
                }
            }
            return null;
        }
    }
    MarkerSeriesView.$t = /*@__PURE__*/ markType(MarkerSeriesView, 'MarkerSeriesView', SeriesView.$);
    return MarkerSeriesView;
})();
/**
 * @hidden
 */
export let ChartAxisRangeChangedEventArgs = /*@__PURE__*/ (() => {
    class ChartAxisRangeChangedEventArgs extends EventArgs {
        constructor(a, b, c, d, e, f) {
            super();
            this._chart = null;
            this._axis = null;
            this._oldMinimumValue = 0;
            this._minimumValue = 0;
            this._oldMaximumValue = 0;
            this._maximumValue = 0;
            this.chart = a;
            this.axis = b;
            this.oldMinimumValue = c;
            this.minimumValue = d;
            this.oldMaximumValue = e;
            this.maximumValue = f;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
        get axis() {
            return this._axis;
        }
        set axis(a) {
            this._axis = a;
        }
        get oldMinimumValue() {
            return this._oldMinimumValue;
        }
        set oldMinimumValue(a) {
            this._oldMinimumValue = a;
        }
        get minimumValue() {
            return this._minimumValue;
        }
        set minimumValue(a) {
            this._minimumValue = a;
        }
        get oldMaximumValue() {
            return this._oldMaximumValue;
        }
        set oldMaximumValue(a) {
            this._oldMaximumValue = a;
        }
        get maximumValue() {
            return this._maximumValue;
        }
        set maximumValue(a) {
            this._maximumValue = a;
        }
    }
    ChartAxisRangeChangedEventArgs.$t = /*@__PURE__*/ markType(ChartAxisRangeChangedEventArgs, 'ChartAxisRangeChangedEventArgs', EventArgs.$);
    return ChartAxisRangeChangedEventArgs;
})();
(function (v) { callStaticConstructors(); })(true);
