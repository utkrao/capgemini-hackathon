/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType, runOn, EnumUtil, typeCast, fromEnum, markDep } from "igniteui-react-core";
import { IBucketizer_$type } from "./IBucketizer";
import { NotImplementedException } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { truncate, intDivide, isNaN_ } from "igniteui-react-core";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { DependencyProperty } from "igniteui-react-core";
import { HighlightingInfo } from "./HighlightingInfo";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { ScalerParams } from "./ScalerParams";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { RadialAxes } from "./RadialAxes";
import { Visibility_$type } from "igniteui-react-core";
import { SeriesRenderingArguments } from "./SeriesRenderingArguments";
import { PropertyMetadata } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let RadialBucketCalculator = /*@__PURE__*/ (() => {
    class RadialBucketCalculator extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.c = 0;
            this.d = 0;
            this.b = 0;
            this.a = a;
        }
        getBucket(a) {
            throw new NotImplementedException(0);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getErrorBucket(a, b) {
            return NaN;
        }
        getBucketInfo(a, b, c, d) {
            a = this.c;
            b = this.d;
            c = this.b;
            d = this.a.cr.fv;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d
            };
        }
        e(a) {
            let b = this.a.bv;
            let c = this.a.bu;
            let d = this.a.cr.rp;
            if (b.isEmpty || c.isEmpty || d == null || this.a.cr.ck == null || this.a.cr.ck.count == 0) {
                this.b = 0;
                return;
            }
            let e = Math.floor(d.mw(c, b));
            let f = Math.ceil(d.mv(c, b));
            if (d.cg) {
                f = Math.ceil(d.mw(c, b));
                e = Math.floor(d.mv(c, b));
            }
            if (f < e) {
                f = d.le + f;
            }
            let g = this.a.cr.rw;
            let h = g != null ? g.nm : 0.75;
            let i = Math.min(c.width, c.height) * 0.5 * (h) * 2 * Math.PI;
            let j = Math.floor((f - e + 1) * a / i);
            this.b = truncate(Math.max(1, j));
            this.c = truncate(Math.max(0, Math.floor(e / this.b) - 1));
            this.d = truncate(Math.ceil(f / this.b));
        }
        cacheValues() {
        }
        unCacheValues() {
        }
    }
    RadialBucketCalculator.$t = /*@__PURE__*/ markType(RadialBucketCalculator, 'RadialBucketCalculator', Base.$, [IBucketizer_$type]);
    return RadialBucketCalculator;
})();
/**
 * @hidden
 */
export let RadialBase = /*@__PURE__*/ (() => {
    class RadialBase extends MarkerSeries {
        constructor() {
            super();
            this.r3 = null;
            this.r4 = null;
            this.r6 = false;
            this.r5 = false;
            this.ru = null;
            this.rv = null;
            this.assigningRadialStyle = null;
            this.assigningRadialMarkerStyle = null;
            this.r1 = new RadialFrame(3);
            this.r2 = new RadialFrame(3);
            this.rz = new RadialFrame(3);
            this.rx = null;
            this.r3 = new RadialSeriesRenderManager();
            this.r4 = new SeriesRenderer$2(RadialFrame.$, RadialBaseView.$, 1, runOn(this, this.sr), runOn(this, this.su), runOn(this, this.cv), runOn(this, this.mu), runOn(this, this.sq), (a) => this.ry.cs.e(this.fv));
        }
        l2(a) {
            super.l2(a);
            this.ry = a;
        }
        sq() {
            if (this.ce.g) {
                this.ce.t();
            }
        }
        get categoryAxis() {
            return this.rp;
        }
        ar() {
            return this.rp;
        }
        rm(a, b) {
            return null;
        }
        c1(a, b, c, d) {
            if (!this.hasMarkers) {
                return false;
            }
            let e = this.rp;
            let f = new ScalerParams(1, this.cd.s9, this.p3, e.cg);
            f.c = this.getEffectiveViewport1(this.b0);
            let g = this.rw;
            let h = new ScalerParams(1, this.cd.s9, this.p3, g.cg);
            h.c = this.getEffectiveViewport1(this.b0);
            a.clear();
            this.qg.cf((i) => {
                if (i._visibility == 0) {
                    let j = new SeriesPointOfInterest();
                    let k = i.n;
                    let l = i.o;
                    if (k < this.p3.left || k > this.p3.right || l < this.p3.top || l > this.p3.bottom) {
                        return;
                    }
                    let m;
                    let n;
                    let o = this.rx.g(k, l, this.b0.bv, this.b0.bu, m, n);
                    m = o.p4;
                    n = o.p5;
                    j.b = m;
                    j.c = n;
                    if (b) {
                        if (c) {
                            j.d = this.sl(j.c, d);
                        }
                        else {
                            let p = this.gq(i);
                            if (!isNaN_(p)) {
                                j.d = this.sl(p, d);
                            }
                            else {
                                j.d = this.sl(j.c, d);
                            }
                        }
                    }
                    else {
                        j.d = e.gc(i.ak);
                    }
                    j.a = i.content;
                    a.add(j);
                }
            });
            return true;
        }
        sl(a, b) {
            if (b >= 0) {
                return round10N(a, b).toString();
            }
            else {
                return a.toString();
            }
        }
        get_eb() {
            return true;
        }
        get_dy() {
            return true;
        }
        rr(a, b, c) {
            let d = new HighlightingInfo();
            d.b = this;
            d.h = 0;
            d.g = this.ck.count - 1;
            d.d = true;
            if (c != null && c.h == d.h && c.g == d.g) {
                return c;
            }
            return d;
        }
        rs(a, b, c) {
            let d = this.ry.cs.c;
            let e = this.ry.cs.d;
            let f = this.ry.cs.b;
            let g = this.r0();
            let h = this.ck.count;
            let i = this.rp;
            let j = -1;
            let k = -1;
            let l = this.hf(b);
            j = truncate(Math.floor((intDivide(l, f)))) * f;
            k = j + (f - 1);
            if (c != null && c.h == j && c.g == k) {
                return c;
            }
            let m = new HighlightingInfo();
            m.b = this;
            m.h = j;
            m.g = k;
            return m;
        }
        rt(a, b, c) {
            let d = this.ry.cs.c;
            let e = this.ry.cs.d;
            let f = this.ry.cs.b;
            let g = this.r0();
            let h = this.ck.count;
            let i = this.rp;
            let j = -1;
            let k = -1;
            let l = this.hf(b);
            j = truncate(Math.floor((intDivide(l, f)))) * f;
            k = j + (f - 1);
            if (c != null && c.h == j && c.g == k) {
                return c;
            }
            let m = new HighlightingInfo();
            m.e = true;
            m.b = this;
            m.h = j;
            m.g = k;
            return m;
        }
        aw(a, b, c) {
            if (this.c2 && this.eg(this.bk) && !c) {
                let d = this.rs(a, b, this.ru);
                this.ru = d;
                return d;
            }
            else {
                let e = this.rr(a, b, this.ru);
                this.ru = e;
                return e;
            }
        }
        ax(a, b, c) {
            if (this.eg(this.bk) && !c) {
                let d = this.rt(a, b, this.rv);
                this.rv = d;
                return d;
            }
            else {
                let e = this.rr(a, b, this.rv);
                e.e = true;
                this.rv = e;
                return e;
            }
        }
        sf() {
            return (this.assigningRadialStyle != null && this.r6) || (this.bk != 1);
        }
        se() {
            return (this.assigningRadialMarkerStyle != null && this.r5) || (this.bk != 1);
        }
        st(a) {
            if (this.assigningRadialStyle != null && this.r6) {
                this.assigningRadialStyle(this, a);
            }
        }
        ss(a) {
            if (this.assigningRadialMarkerStyle != null && this.r5) {
                this.assigningRadialMarkerStyle(this, a);
            }
        }
        sh(a) {
            return a.cs.b;
        }
        si(a) {
            return a.cs.c;
        }
        ag() {
            return [this.rp, this.rw];
        }
        m9(a, b) {
            this.ry.cs.e(this.fv);
            this.ml(false);
        }
        m8(a, b) {
            this.ry.cs.e(this.fv);
            this.ml(false);
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        if (this.rp != null) {
                            this.rp.bz(this);
                        }
                        if (this.rw != null) {
                            this.rw.bz(this);
                        }
                    }
                    if (c == null && d != null) {
                        if (this.rp != null) {
                            this.rp.cs(this);
                        }
                        if (this.rw != null) {
                            this.rw.cs(this);
                        }
                    }
                    this.ry.cs.e(this.fv);
                    this.ml(false);
                    break;
                case RadialBase.$$p[0]:
                    if (this.rp != null && this.rw != null) {
                        this.rx = new RadialAxes(this.rw, this.rp);
                    }
                    if (c != null) {
                        c.bz(this);
                    }
                    if (d != null) {
                        d.cs(this);
                    }
                    this.ry.cs.e(this.fv);
                    this.ml(false);
                    break;
                case RadialBase.$$p[4]:
                    if (this.rp != null && this.rw != null) {
                        this.rx = new RadialAxes(this.rw, this.rp);
                    }
                    if (c != null) {
                        c.bz(this);
                    }
                    if (d != null) {
                        d.cs(this);
                    }
                    this.ry.cs.e(this.fv);
                    if (this.rw == null || !this.rw.c0()) {
                        this.ml(false);
                    }
                    break;
                case "SyncLink":
                    if (this.b8 != null && this.cd != null) {
                        this.ry.cs.e(this.fv);
                        this.ml(false);
                    }
                    break;
                case "TransitionProgress":
                    this.r2.c(this.g2, this.r1, this.rz);
                    if (this.cx(this.b0)) {
                        return;
                    }
                    if (this.g2 == 1) {
                        this.su(this.rz, this.ry);
                    }
                    else {
                        this.su(this.r2, this.ry);
                    }
                    if (this.cd != null) {
                        this.cd.oa(this);
                    }
                    break;
                case RadialBase.$$p[1]:
                    this.ml(false);
                    this.ls();
                    break;
                case "VisibilityProxy":
                    if (EnumUtil.getEnumValue(Visibility_$type, c) != 0 && EnumUtil.getEnumValue(Visibility_$type, d) == 0) {
                        this.ry.cs.e(this.fv);
                    }
                    break;
                case RadialBase.$$p[3]:
                    this.r6 = this.sd();
                    this.ml(false);
                    break;
                case RadialBase.$$p[2]:
                    this.r5 = this.sc();
                    this.ml(false);
                    break;
            }
        }
        sd() {
            return this.sb;
        }
        sc() {
            return this.sa;
        }
        r8(a) {
            if (typeCast(NumericRadiusAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        r7(a) {
            if (typeCast(CategoryAngleAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        hv(a) {
            let b = this.hf(a);
            return b >= 0 && this.ck != null && b < this.ck.count ? this.ck.item(b) : null;
        }
        sg(a) {
            let b = this.b0.bv;
            let c = this.b0.bu;
            if (this.rp != null && !b.isEmpty && !c.isEmpty && this.rx != null) {
                let d = this.rx.c(a);
                if (d < 0) {
                    d += Math.PI * 2;
                }
                if (d > Math.PI * 2) {
                    d -= Math.PI * 2;
                }
                return d;
            }
            return NaN;
        }
        f7(a) {
            let b = this.b0.bv;
            let c = this.b0.bu;
            let d = -1;
            if (this.rp != null && !b.isEmpty && !c.isEmpty && this.rx != null) {
                let e = this.rx.c(a);
                if (e < 0) {
                    e += Math.PI * 2;
                }
                if (e > Math.PI * 2) {
                    e -= Math.PI * 2;
                }
                let f = this.rp.getUnscaledAngle(e);
                if (this.rp.categoryMode != 0) {
                    f -= 0.5;
                }
                d = f;
            }
            return d;
        }
        hf(a) {
            let b = truncate(Math.round(this.f7(a)));
            if (this.ck != null && b == this.ck.count) {
                b = 0;
            }
            return b;
        }
        eo(a) {
            return false;
        }
        r0() {
            let a = this.rz;
            if (this.cv()) {
                if (this.ce.g) {
                    this.ce.t();
                }
                a = this.r2;
            }
            return a;
        }
        li() {
            super.li();
            if (this.rp != null) {
                this.rp.h7(false);
            }
            if (this.rw != null) {
                this.rw.h7(false);
            }
        }
        fb(a, b, c) {
            let d = true;
            let e = c;
            if (!super.fb(a, b, c) || !c.o() || b.isEmpty || a.isEmpty || this.rp == null || this.rp.itemsSource == null || this.rw == null || this.rx == null || this.ck == null || this.rp.bh == null || this.rw.bh == null || this.rw.lv == this.rw.lu) {
                e.cs.b = 0;
                d = false;
            }
            return d;
        }
        mm(a) {
            let b;
            let c;
            let d = this.getViewInfo(c, b);
            c = d.p0;
            b = d.p1;
            if (!this.fb(c, b, this.b0)) {
                this.k0(true, this.b0);
                return;
            }
            let e = new SeriesRenderingArguments(this, c, b, a, this.eu);
            let f = this.r4.g(e, this.r1, this.rz, this.r2, this.ry);
            this.r1 = f.p1;
            this.rz = f.p2;
            this.r2 = f.p3;
        }
        sj() {
            let a = 0;
            for (let b of fromEnum(this.cd.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(RadialBase.$, b);
                if (c != null && c.rp == this.rp && c.preferredCategoryMode(c.rp) == 2) {
                    a++;
                }
            }
            return -1;
        }
    }
    RadialBase.$t = /*@__PURE__*/ markType(RadialBase, 'RadialBase', MarkerSeries.$, [IHasCategoryModePreference_$type]);
    RadialBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, RadialBase, 'raisePropertyChanged', ['AngleAxis:rp:sv', [CategoryAngleAxis.$, null], 'ClipSeriesToBounds:r9:sw', [0, false], 'IsCustomRadialMarkerStyleAllowed:sa:sx', [0, false], 'IsCustomRadialStyleAllowed:sb:sy', [0, false], 'ValueAxis:rw:sz', [NumericRadiusAxis.$, null]]);
    return RadialBase;
})();
/**
 * @hidden
 */
export let RadialBaseView = /*@__PURE__*/ (() => {
    class RadialBaseView extends MarkerSeriesView {
        constructor(a) {
            super(a);
            this.cs = null;
            this.cr = null;
            this.ct = null;
            this.cu = 0;
            this.cv = null;
            this.cr = a;
            this.ct = new Pool$1(Marker.$);
            this.ci(this.ct);
        }
        cf(a) {
            this.ct.c(a);
        }
    }
    RadialBaseView.$t = /*@__PURE__*/ markType(RadialBaseView, 'RadialBaseView', MarkerSeriesView.$);
    return RadialBaseView;
})();
