/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { TrendLineType_$type } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PriceDisplayType_$type } from "./PriceDisplayType";
import { Series } from "./Series";
import { Defaults } from "./Defaults";
import { enumGetBox, EnumUtil, typeCast, fromEnum, runOn, Point_$type, markType, markDep } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { AxisRange } from "./AxisRange";
import { ScalerParams } from "./ScalerParams";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { Pool$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { LineGeometry } from "igniteui-react-core";
import { RectangleGeometry } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { boxArray$1 } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
import { FinancialPriceBucketCalculator } from "./FinancialPriceBucketCalculator";
import { Extensions } from "igniteui-react-core";
/**
 * @hidden
 */
export let FinancialPriceSeries = /*@__PURE__*/ (() => {
    class FinancialPriceSeries extends FinancialSeries {
        constructor() {
            super();
            this.ab = FinancialPriceSeries.$;
            this.qk = new CategoryFrame(5);
            this.qm = new CategoryFrame(5);
            this.qi = new CategoryFrame(5);
        }
        get_dt() {
            return true;
        }
        gw() {
            if (!isNaN_(this.gv)) {
                return super.gw();
            }
            return Defaults.k;
        }
        bx() {
            return new FinancialPriceSeriesView(this);
        }
        l2(a) {
            super.l2(a);
            this.tr = a;
        }
        get uz() {
            return this.c(FinancialPriceSeries.uh);
        }
        set uz(a) {
            this.h(FinancialPriceSeries.uh, a);
        }
        k3(a, b, c, d) {
            super.k3(a, b, c, d);
            if (this.qg != null && typeCast(ISortingAxis_$type, this.qg) !== null) {
                this.qg.i$i();
            }
            this.tr.bx.e(this.fv);
            if (this.tr.b7) {
                this.tr.b5.g$e(a, b, c, d);
            }
            if (this.q2 != null) {
                this.q2.c0();
            }
            this.ml(true);
        }
        bp() {
            if (this.bq == 0) {
                return 1;
            }
            else {
                return super.bp();
            }
        }
        pz(a) {
            if (this.qi == null || this.qi.f.count == 0) {
                return Rect.empty;
            }
            let b = this.pl(a);
            let c = this.b0.bv;
            let d = this.b0.bu;
            let e = this.getEffectiveViewport1(this.b0);
            let f = this.aj(this.qg, this.qi.f, this.sd(this.b0), this.sf(this.b0), a, true);
            let g = f[0];
            let h = f[1];
            let i = Math.abs(b.x - g[0]);
            let j = Math.abs(b.x - h[0]);
            let k = this.tt(this.qx, e);
            k = Math.max(k, 3);
            let l = (k - 1) / 2;
            if (i < j) {
                let m = g[0] - l;
                let n = g[0];
                let o = g[0] + l;
                let p = g[1];
                let q = g[2];
                let r = g[3];
                let s = g[4];
                let t = Math.min(Math.min(Math.min(p, q), r), s);
                let u = Math.max(Math.max(Math.max(p, q), r), s);
                return new Rect(0, m, t, Math.abs(o - m), u - t);
            }
            else {
                let v = h[0] - l;
                let w = h[0];
                let x = h[0] + l;
                let y = h[1];
                let z = h[2];
                let aa = h[3];
                let ab = h[4];
                let ac = Math.min(Math.min(Math.min(y, z), aa), ab);
                let ad = Math.max(Math.max(Math.max(y, z), aa), ab);
                return new Rect(0, v, ac, Math.abs(x - v), ad - ac);
            }
        }
        tq(a, b) {
            let c = a[0] - b;
            let d = a[0];
            let e = a[0] + b;
            let f = a[1];
            let g = a[2];
            let h = a[3];
            let i = a[4];
            let j = Math.min(Math.min(Math.min(f, g), h), i);
            let k = Math.max(Math.max(Math.max(f, g), h), i);
            let l = Math.min(g, h);
            let m = Math.max(g, h);
            let n = Math.min(f, i);
            let o = Math.max(f, i);
            if (this.ts == 1) {
                let p = new Array(3);
                let q = new Rect(0, c, f, b, 0);
                let r = new Rect(0, d, i, b, 0);
                let s = new Rect(0, d, l, 0, m - l);
                p[0] = q;
                p[1] = r;
                p[2] = s;
                return p;
            }
            else {
                let t = new Array(2);
                let u = new Rect(0, d, l, 0, m - l);
                let v = new Rect(0, c, n, b * 2, o - n);
                t[0] = u;
                t[1] = v;
                return t;
            }
        }
        ak(a) {
            let b = new List$1(Rect.$, 0);
            let c = this.pl(a);
            let d = this.b0.bv;
            let e = this.b0.bu;
            let f = this.getEffectiveViewport1(this.b0);
            let g = this.aj(this.qg, this.qi.f, this.sd(this.b0), this.sf(this.b0), a, true);
            let h = g[0];
            let i = g[1];
            let j = Math.abs(c.x - h[0]);
            let k = Math.abs(c.x - i[0]);
            let l = this.tt(this.qx, f);
            l = Math.max(l, 3);
            let m = (l - 1) / 2;
            if (j < k) {
                return this.tq(h, m);
            }
            else {
                return this.tq(i, m);
            }
        }
        ex(a, b) {
            if (this.e0(a, b)) {
                return true;
            }
            return false;
        }
        e0(a, b) {
            let c = this.p0(a);
            if (c.isEmpty) {
                return false;
            }
            let d = RectUtil.r(c, (this.fw / 2) + this.ga(b));
            if (d.containsPoint(a)) {
                let e = this.al(a);
                if (e != null) {
                    for (let f = 0; f < e.length; f++) {
                        let g = e[f];
                        let h = RectUtil.r(g, (this.fw / 2) + this.ga(b));
                        if (h.containsPoint(a)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        l7(a, b, c, d) {
            switch (b) {
                case FinancialSeries.$$p[9]:
                    this.tr.cd();
                    if (this.cd != null) {
                        this.cd.l5();
                    }
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.tr.b5 = CategoryTrendLineManagerFactory.a(this.tr.b5, this.qg, this.nd, this, this.cn);
                    }
                    break;
            }
            super.l7(a, b, c, d);
            if (this.tr.b7 && this.tr.b5 != null && this.tr.b5.g$b(a, b, c, d)) {
                this.ml(false);
                this.ls();
            }
            switch (b) {
                case FinancialPriceSeries.$$p[2]:
                    if (this.nd != null) {
                        this.ug();
                        this.m0();
                        this.qi.w();
                        this.s9(this.qi, this.tr);
                    }
                    this.ls();
                    break;
                case "ActualHighlightingMode":
                    this.ml(true);
                    break;
                case "TrendLineBrush":
                    this.mz();
                    break;
                case "TrendLineType":
                    this.ls();
                    break;
                case FinancialSeries.$$p[5]:
                case FinancialPriceSeries.$$p[7]:
                    this.l4();
                    break;
            }
        }
        ug() {
            this.tr.ch();
            if (this.bz != null) {
                this.bz.ch();
            }
        }
        ap(a) {
            if (a != null && a == this.q2 && this.rb != null && !isNaN_(this.rb.minimum) && this.ra != null && !isNaN_(this.ra.maximum)) {
                return new AxisRange(this.rb.minimum, this.ra.maximum);
            }
            return null;
        }
        aq(a) {
            if (a.isEmpty && this.cd != null) {
                a = this.cd.s9;
            }
            if (this.rb == null || this.ra == null) {
                return null;
            }
            let b = this.pv(this.b0);
            let c = new ScalerParams(0, a, this.cd.to, this.qg.cg, this.getEffectiveViewport());
            let d = (this.qg.el(b.left, c));
            let e = (this.qg.el(b.right, c));
            if (this.qg.cg) {
                let f = d;
                d = e;
                e = f;
            }
            let g = null;
            if (this.qg.cm) {
                g = this.qg;
                d = g.i$f(d);
                e = g.i$f(e);
            }
            else {
                d = Math.floor(d);
                e = Math.ceil(e);
            }
            d = Math.max(0, Math.min(this.rb.count - 1, d));
            e = Math.max(0, Math.min(this.rb.count - 1, e));
            let h = 1.7976931348623157E+308;
            let i = -1.7976931348623157E+308;
            for (let j = truncate(d); j <= truncate(e); j++) {
                let k = j;
                if (g != null) {
                    k = g.i$b._inner[j];
                }
                let l = this.rb.item(k);
                if (this.rb.mayContainUnknowns) {
                    if (isInfinity(l) || isNaN_(l)) {
                        continue;
                    }
                }
                let m = this.ra.item(k);
                if (this.ra.mayContainUnknowns) {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                h = Math.min(h, l);
                i = Math.max(i, m);
            }
            let n = new AxisRange(h, i);
            n = this.ao(n, this.q2, a);
            return n;
        }
        ge() {
            return Series.gf(this.rc, typeCast(ISortingAxis_$type, this.qg));
        }
        eo(a) {
            let b = this.ck != null ? this.ck.indexOf(a) : -1;
            let c = this.b0.bv;
            c = c.copy();
            let d = this.b0.bu;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.px(this.b0);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.qg != null) {
                    let g = new ScalerParams(0, e, e, this.qg.cg, f);
                    let h = this.qg.ei(b, g);
                    if (h < c.left + 0.1 * c.width) {
                        h = h + 0.4 * c.width;
                    }
                    if (h > c.right - 0.1 * c.width) {
                        h = h - 0.4 * c.width;
                    }
                    c.x = h - 0.5 * c.width;
                }
                if (this.q2 != null && this.rb != null && this.ra != null && b < this.rb.count && b < this.ra.count) {
                    let i = new ScalerParams(0, e, e, this.q2.cg, f);
                    i.b = this.ge();
                    let j = this.q2.ei(this.rb.item(b), i);
                    let k = this.q2.ei(this.ra.item(b), i);
                    if (!isNaN_(j) && !isNaN_(k)) {
                        let l = Math.abs(j - k);
                        if (c.height < l) {
                            c.height = l;
                            c.y = Math.min(j, k);
                        }
                        else {
                            if (j < c.top + 0.1 * c.height) {
                                j = j + 0.4 * c.height;
                            }
                            if (j > c.bottom - 0.1 * c.height) {
                                j = j - 0.4 * c.height;
                            }
                            c.y = j - 0.5 * c.height;
                        }
                    }
                }
                this.b8.au(this.cd, c, true);
            }
            return b >= 0;
        }
        fb(a, b, c) {
            let d = super.fb(a, b, c);
            if (this.rc == null || this.q9 == null || this.ra == null || this.rb == null) {
                d = false;
            }
            return d;
        }
        s7(a, b) {
            super.s7(a, b);
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = this.qg;
            let g = this.q2;
            let h = new ScalerParams(0, c, d, f.cg, e);
            let i = ((() => {
                let $ret = new ScalerParams(0, c, d, g.cg, e);
                $ret.b = this.ge();
                return $ret;
            })());
            a.f.clear();
            a.m.clear();
            a.p.clear();
            let j = 0;
            let k = typeCast(ISortingAxis_$type, this.qg);
            if (k != null && (k.i$b == null || k.i$b.count != this.ck.count)) {
                return;
            }
            j = this.r7(c, d, e);
            let l = typeCast(FinancialPriceSeriesView.$, b);
            let m = this.fv;
            if (this.trendLineType != 0) {
                let n = new Array(this.ck.count);
                let o = 0;
                for (let p of fromEnum(this.ry)) {
                    n[o] = p;
                    o++;
                }
                if (this.tr.b7) {
                    this.tr.b5.prepareLineCore(a.p, this.trendLineType, boxArray$1(n), this.trendLinePeriod, (q) => this.qg.ei(q, h), (q) => this.q2.ei(q, i), ((() => {
                        let $ret = new TrendResolutionParams();
                        $ret.c = b.bx.b;
                        $ret.d = b.bx.c;
                        $ret.e = b.bx.d;
                        $ret.a = j;
                        $ret.b = m;
                        $ret.f = d;
                        return $ret;
                    })()));
                }
            }
            let q = this.qg.el(2, h) - this.qg.el(1, h);
            for (let r = b.bx.c; r <= b.bx.d; ++r) {
                let s;
                if (k == null) {
                    s = b.bx.getBucket(r);
                }
                else {
                    let t = k.i$b._inner[r];
                    let u = k.i$d(t);
                    let v = this.rc.item(t);
                    let w = this.ra.item(t);
                    let x = this.rb.item(t);
                    let y = this.q9.item(t);
                    let z = v;
                    let aa = w;
                    let ab = x;
                    let ac = y;
                    let ad = u;
                    while (r < b.bx.d) {
                        t = k.i$b._inner[r + 1];
                        ad = k.i$d(t);
                        if (ad - u > q * m) {
                            break;
                        }
                        r++;
                        aa = Math.max(aa, this.ra.item(t));
                        ab = Math.min(ab, this.rb.item(t));
                        ac = this.q9.item(t);
                    }
                    let ae = NaN;
                    if (!isNaN_(u)) {
                        ae = this.qg.ei(u, h);
                    }
                    s = [ae, z, aa, ab, ac];
                }
                if (!isNaN_(s[0])) {
                    if (k != null) {
                        s[0] = s[0] + j;
                    }
                    else {
                        s[0] = f.ei(s[0], h) + j;
                    }
                    s[1] = g.ei(s[1], i);
                    s[2] = g.ei(s[2], i);
                    s[3] = g.ei(s[3], i);
                    s[4] = g.ei(s[4], i);
                    a.f.add(s);
                }
            }
            return;
        }
        k0(a, b) {
            super.k0(a, b);
            let c = typeCast(FinancialPriceSeriesView.$, b);
            c.cb();
            if (a) {
                c.b6.count = 0;
            }
            if (c.b7 && c.b5 != null) {
                c.b5.g$d();
            }
        }
        m8(a, b) {
            super.m8(a, b);
            if (this.cd != null) {
                this.cd.l5();
            }
        }
        p5(a, b) {
            if (this.qg != null && this.qg.categoryMode == 0) {
                let c = this.getEffectiveViewport1(this.b0);
                let d = this.tt(this.qx, c) / 2;
                return new Thickness(1, d, 0, d, 0);
            }
            return super.p5(a, b);
        }
        get_c2() {
            return true;
        }
        s9(a, b) {
            super.s9(a, b);
            if (this.qg == null || this.q2 == null) {
                return;
            }
            let c = false;
            if (b.b0(a)) {
                c = true;
                b.b2(a);
            }
            this.qp.a0(this, this.ro(), runOn(this, this.p8), this.sd(b), this.sf(b));
            let d = false;
            let e = this.qp.b;
            if (e != null) {
                d = true;
            }
            let f = typeCast(FinancialPriceSeriesView.$, b);
            f.ca();
            f.b8 = false;
            if (f.b7) {
                f.b5.g$d();
            }
            if (this.trendLineType != 0) {
                f.b5.g$g(a.p);
            }
            if (d) {
                this.uf(a, b, c);
            }
            else {
                f.b6.count = 0;
                this.ue(a, b);
            }
        }
        gc() {
            let a = this.getEffectiveViewport1(this.b0);
            return this.tt(this.qx, a);
        }
        uf(a, b, c) {
            let d = this.ts;
            let e = this.getEffectiveViewport1(b);
            let f = this.tt(b, e);
            let g = (f - 1) / 2;
            let h = typeCast(FinancialPriceSeriesView.$, b);
            h.b8 = true;
            let i = a.f;
            let j = 0;
            let k = this.ck.count;
            let l = this.qg;
            let m = new ScalerParams(0, b.bv, b.bu, l.cg, e);
            let n = this.o3;
            let o = this.tm;
            if (o == null) {
                o = n;
            }
            let p = this.o6;
            let q = this.u0;
            if (q == null) {
                q = p;
            }
            for (let r = 0; r < i.count; ++r) {
                let s = i._inner[r][0] - g;
                let t = i._inner[r][0];
                let u = i._inner[r][0] + g;
                let v = i._inner[r][1];
                let w = i._inner[r][2];
                let x = i._inner[r][3];
                let y = i._inner[r][4];
                if (isNaN_(v) || isNaN_(w) || isNaN_(x) || isNaN_(y)) {
                    continue;
                }
                let z = h.b6.item(j);
                j++;
                let aa = v < y;
                let ab = new PathGeometry();
                if (c) {
                    switch (d) {
                        case 0:
                            if (aa) {
                                let ac = v;
                                v = y;
                                y = ac;
                            }
                            let ad = new PathFigure();
                            ad._startPoint = { $type: Point_$type, x: t, y: x };
                            ad._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: t, y: v };
                                return $ret;
                            })()));
                            let ae = new PathFigure();
                            ae._startPoint = { $type: Point_$type, x: s, y: y };
                            ae._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: u, y: y };
                                return $ret;
                            })()));
                            ae._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: u, y: v };
                                return $ret;
                            })()));
                            ae._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: s, y: v };
                                return $ret;
                            })()));
                            ae._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: s, y: y };
                                return $ret;
                            })()));
                            let af = new PathFigure();
                            af._startPoint = { $type: Point_$type, x: t, y: y };
                            af._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: t, y: w };
                                return $ret;
                            })()));
                            ab.c.add(ad);
                            ab.c.add(ae);
                            ab.c.add(af);
                            break;
                        case 1:
                            let ag = new PathFigure();
                            ag._startPoint = { $type: Point_$type, x: s, y: v };
                            ag._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: t, y: v };
                                return $ret;
                            })()));
                            let ah = new PathFigure();
                            ah._startPoint = { $type: Point_$type, x: t, y: x };
                            ah._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: t, y: w };
                                return $ret;
                            })()));
                            let ai = new PathFigure();
                            ai._startPoint = { $type: Point_$type, x: t, y: y };
                            ai._segments.add(((() => {
                                let $ret = new LineSegment(1);
                                $ret.c = { $type: Point_$type, x: u, y: y };
                                return $ret;
                            })()));
                            ab.c.add(ag);
                            ab.c.add(ah);
                            ab.c.add(ai);
                            break;
                    }
                }
                if (aa) {
                    this.qp.ak = o;
                    this.qp.ag = o;
                    this.qp.ah = q;
                    this.qp.al = q;
                    this.qp.f = true;
                }
                else {
                    this.qp.ak = n;
                    this.qp.ag = n;
                    this.qp.ah = p;
                    this.qp.al = p;
                    this.qp.f = false;
                }
                this.s6(i, r, k, l, m, b.q);
                if (d == 1) {
                    this.qp.ad(z, true, false, false, false);
                }
                else {
                    this.qp.ad(z, false, false, false, false);
                }
                if (c) {
                    z.ak = ab;
                }
            }
            h.b6.count = j;
            h.cc();
        }
        tt(a, b) {
            let c = this.qg.k3(a.bv, a.bu, b);
            c = Math.max(c, this.fv * 0.9);
            c = Math.max(c, 3);
            return c;
        }
        ue(a, b) {
            let c = this.ts;
            let d = this.getEffectiveViewport1(b);
            let e = this.tt(b, d);
            let f = (e - 1) / 2;
            let g = typeCast(FinancialPriceSeriesView.$, b);
            let h = g.ck();
            let i = g.cj();
            let j = a.f;
            for (let k = 0; k < j.count; ++k) {
                let l = j._inner[k][0] - f;
                let m = j._inner[k][0];
                let n = j._inner[k][0] + f;
                let o = j._inner[k][1];
                let p = j._inner[k][2];
                let q = j._inner[k][3];
                let r = j._inner[k][4];
                if (isNaN_(o) || isNaN_(p) || isNaN_(q) || isNaN_(r)) {
                    continue;
                }
                let s = o < r;
                let t = s ? i : h;
                switch (c) {
                    case 0:
                        if (s) {
                            let u = o;
                            o = r;
                            r = u;
                        }
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: m, y: q };
                            $ret.c = { $type: Point_$type, x: m, y: o };
                            return $ret;
                        })()));
                        t.d.add(((() => {
                            let $ret = new RectangleGeometry();
                            $ret.e = new Rect(0, l, r, n - l, o - r);
                            return $ret;
                        })()));
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: m, y: r };
                            $ret.c = { $type: Point_$type, x: m, y: p };
                            return $ret;
                        })()));
                        break;
                    case 1:
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: l, y: o };
                            $ret.c = { $type: Point_$type, x: m, y: o };
                            return $ret;
                        })()));
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: m, y: q };
                            $ret.c = { $type: Point_$type, x: m, y: p };
                            return $ret;
                        })()));
                        t.d.add(((() => {
                            let $ret = new LineGeometry();
                            $ret.d = { $type: Point_$type, x: m, y: r };
                            $ret.c = { $type: Point_$type, x: n, y: r };
                            return $ret;
                        })()));
                        break;
                }
            }
        }
        h1(a, b) {
            if (this.tr.b7 && a == this.tr.b5.g$j) {
                return null;
            }
            return super.h1(a, b);
        }
        mz() {
            super.mz();
            if (this.index < 0) {
                return;
            }
            this.tr.ci();
        }
        la(a) {
            super.la(a);
            if (this.tr.b7) {
                this.a8.exportTrendlineData(this, a, this.tr.b5.g$j);
            }
        }
        pe() {
            return this.u0;
        }
        mq(a, b) {
            super.mq(a, b);
            this.u0 = b;
        }
        ba(a) {
            if (this.ts == 0) {
                return 3;
            }
            else if (this.ts == 1) {
                if (this.a9 == 1) {
                    return 3;
                }
                return 2;
            }
            return a;
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = { $type: Point_$type, x: a, y: b };
            let d = this.gj(c, false, false);
            let e = this.gh(c, false, false);
            let f = new DataLegendSeriesValueInfo();
            f.a = 4;
            f.l = this.r8(c, false, false);
            f.p = this.sk != null ? this.sk : "Close";
            f.q = this.tw != null ? this.tw : "C:";
            f.r = this.ty != null ? this.ty : "";
            let g = new DataLegendSeriesValueInfo();
            g.l = this.r9(c, false, false);
            g.a = 3;
            g.p = this.sw != null ? this.sw : "Open";
            g.q = this.ua != null ? this.ua : "O:";
            g.r = this.uc != null ? this.uc : "";
            g.k = true;
            let h = new DataLegendSeriesValueInfo();
            h.l = (f.l - g.l) / g.l * 100;
            h.l = round10N(h.l, 1);
            h.a = 9;
            h.p = "Change";
            h.q = "";
            h.t = "";
            h.v = "+";
            h.u = "%";
            h.w = "%";
            h.r = null;
            h.c = false;
            h.k = true;
            h.e = false;
            h.f = true;
            h.h = false;
            h.g = false;
            h.d = false;
            h.n = 1;
            h.m = 1;
            g.x = h.l >= 0 ? this.o3 : this.tm;
            f.x = h.l >= 0 ? this.o3 : this.tm;
            h.x = h.l >= 0 ? this.o3 : this.tm;
            let i = new DataLegendSeriesValueInfo();
            i.l = e > d ? d : e;
            i.a = 1;
            i.p = this.ss != null ? this.ss : "Low";
            i.q = this.t5 != null ? this.t5 : "L:";
            i.r = this.t7 != null ? this.t7 : "";
            i.k = true;
            let j = new DataLegendSeriesValueInfo();
            j.l = e > d ? e : d;
            j.a = 2;
            j.p = this.sn != null ? this.sn : "High";
            j.q = this.t1 != null ? this.t1 : "H:";
            j.r = this.t3 != null ? this.t3 : "";
            j.k = true;
            let k = new DataLegendSeriesValueInfo();
            k.l = (j.l + i.l + f.l) / 3;
            k.l = round10N(k.l, 2);
            k.a = 5;
            k.p = "TypicalPrice";
            k.q = "TP:";
            k.r = "";
            k.k = true;
            let l = new DataLegendSeriesValueInfo();
            l.l = this.sa(c, false, false);
            l.a = 8;
            l.p = this.s0 != null ? this.s0 : "Volume";
            l.q = "VOL:";
            l.r = "";
            l.k = true;
            l.n = 0;
            l.m = 0;
            l.e = false;
            l.f = false;
            l.h = false;
            let m = new List$1(DataLegendSeriesValueInfo.$, 0);
            m.add(g);
            m.add(j);
            m.add(i);
            m.add(f);
            m.add(k);
            m.add(h);
            m.add(l);
            let n = new DataLegendSeriesContext();
            n.b = this.av();
            n.f = m;
            return n;
        }
    }
    FinancialPriceSeries.$t = /*@__PURE__*/ markType(FinancialPriceSeries, 'FinancialPriceSeries', FinancialSeries.$, [ITrendLineSeries_$type]);
    FinancialPriceSeries.uh = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, FinancialPriceSeries.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    FinancialPriceSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, FinancialPriceSeries, 'raisePropertyChanged', ['CloseMemberAsLegendLabel:tw:ui', [2, null], 'CloseMemberAsLegendUnit:ty:uj', [2, null], 'DisplayType:ts:uk', [PriceDisplayType_$type, /*@__PURE__*/ enumGetBox(PriceDisplayType_$type, 0)], 'HighMemberAsLegendLabel:t1:ul', [2, null], 'HighMemberAsLegendUnit:t3:um', [2, null], 'LowMemberAsLegendLabel:t5:un', [2, null], 'LowMemberAsLegendUnit:t7:uo', [2, null], 'NegativeOutline:u0:up', [Brush.$, null], 'OpenMemberAsLegendLabel:ua:uq', [2, null], 'OpenMemberAsLegendUnit:uc:ur', [2, null], 'TrendLineType::ux', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::uw', [1, 1.5], 'TrendLinePeriod::uv', [1, 7], 'TrendLineBrush::us', [Brush.$, null], 'TrendLineZIndex:tv:uy', [1, 1001], 'TrendLineDashArray:u1:ut', [DoubleCollection.$], 'TrendLineDashCap:u2:uu', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return FinancialPriceSeries;
})();
/**
 * @hidden
 */
export let FinancialPriceSeriesView = /*@__PURE__*/ (() => {
    class FinancialPriceSeriesView extends FinancialSeriesView {
        constructor(a) {
            super(a);
            this.b3 = null;
            this.b6 = null;
            this.b9 = null;
            this.cn = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                return $ret;
            })());
            this.cm = ((() => {
                let $ret = new Path();
                $ret.ak = new GeometryGroup();
                return $ret;
            })());
            this.b4 = null;
            this.cl = new Path();
            this.b8 = false;
            this.b3 = a;
            this.b9 = new List$1(Path.$, 0);
            this.b6 = ((() => {
                let $ret = new Pool$1(Path.$);
                $ret.create = runOn(this, this.co);
                $ret.activate = runOn(this, this.ce);
                $ret.disactivate = runOn(this, this.cg);
                $ret.destroy = runOn(this, this.cf);
                return $ret;
            })());
        }
        co() {
            let a = new Path();
            this.b9.add(a);
            a._visibility = 1;
            return a;
        }
        ce(a) {
            a._visibility = 0;
        }
        cg(a) {
            a._visibility = 1;
        }
        cf(a) {
            this.b9.remove(a);
        }
        by() {
            return new FinancialPriceBucketCalculator(this);
        }
        as() {
            super.as();
            if (!this.q) {
                this.b3.ts = Defaults.g;
                this.b3.tm = Defaults.ah;
                this.b3.u0 = Defaults.ai;
                this.b3.g1 = Defaults.l;
                this.b3.pc = this.b3.o6;
            }
        }
        get b5() {
            if (this.b4 == null) {
                this.b4 = CategoryTrendLineManagerFactory.a(this.b4, this.e.ar(), this.e.nd, this.e, this.e.cn);
            }
            return this.b4;
        }
        set b5(a) {
            this.b4 = a;
        }
        get b7() {
            return this.b4 != null;
        }
        ch() {
            if (this.b3.ts == 1) {
                this.cn._stroke = this.e.o3;
            }
            else {
                this.cn._stroke = this.e.o6;
            }
            if (this.b3.ts == 1) {
                this.cm._stroke = this.bz.tm;
            }
            else {
                this.cm._stroke = this.b3.u0;
            }
        }
        cb() {
            this.aq();
            this.b6.count = 0;
            this.ca();
        }
        ca() {
            let a = typeCast(GeometryGroup.$, this.cn.ak);
            let b = typeCast(GeometryGroup.$, this.cm.ak);
            Extensions.d(a);
            Extensions.d(b);
        }
        ck() {
            this.aq();
            return typeCast(GeometryGroup.$, this.cn.ak);
        }
        cj() {
            this.aq();
            return typeCast(GeometryGroup.$, this.cm.ak);
        }
        ci() {
            this.b3.uz = null;
            if (this.b3.trendLineBrush != null) {
                this.b3.uz = this.b3.trendLineBrush;
            }
            else {
                this.b3.uz = this.b3.o3;
            }
        }
        bb() {
            super.bb();
            this.cn.ac = this.e.fw;
            this.cn.ai = this.e.pg;
            this.cn.ad = this.e.ph;
            if (this.b3.ts == 1) {
                this.cn._stroke = this.e.o3;
            }
            else {
                this.cn._stroke = this.e.o6;
                this.cn._fill = this.e.o3;
            }
            this.cm.ac = this.e.fw;
            this.cm.ai = this.e.pg;
            this.cm.ad = this.e.ph;
            if (this.b3.ts == 1) {
                this.cm._stroke = this.bz.tm;
            }
            else {
                this.cm._stroke = this.b3.u0;
                this.cm._fill = this.bz.tm;
            }
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.cn.ac = this.e.fw + 3;
            if (this.b3.ts == 1) {
                this.cn._stroke = a;
            }
            else {
                this.cn._stroke = a;
                this.cn._fill = a;
            }
            this.cm.ac = this.e.fw + 3;
            if (this.b3.ts == 1) {
                this.cm._stroke = a;
            }
            else {
                this.cm._stroke = a;
                this.cm._fill = a;
            }
        }
        ac(a) {
            return this.b9._inner[a];
        }
        ab(a) {
            let b = this.b9._inner[a];
            this.cl._visibility = b._visibility;
            this.cl.ak = b.ak;
            let c = this.bp(a);
            this.cl._fill = c;
            this.cl._stroke = c;
            this.cl.ac = this.e.fw + 3;
            return this.cl;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (this.b8) {
                    for (let c = 0; c < this.b9.count; c++) {
                        let d = this.aa(c, b);
                        if (d._visibility == 0) {
                            a.s(d);
                        }
                    }
                }
                else {
                    a.s(this.cn);
                    a.s(this.cm);
                }
            }
        }
        a5(a, b) {
            if (a.d) {
                if (this.b3.trendLineType != 0 && !b) {
                    let c = this.b5.g$j;
                    c.ac = this.b3.trendLineThickness;
                    c._stroke = this.b3.uz;
                    c.ai = this.b3.u1;
                    c.ad = this.b3.u2;
                    a.u(c);
                }
            }
            super.a5(a, b);
        }
        al(a) {
            super.al(a);
            if (this.b3.ro()) {
                for (let b = 0; b < this.b9.count; b++) {
                    let c = this.b9._inner[b];
                    if (c._fill == this.b3.tm) {
                        this.e.a8.exportPathData(a, c, "negativePathShape" + b, ["Negative"]);
                    }
                    else {
                        this.e.a8.exportPathData(a, c, "positivePathShape" + b, ["Positive", "Main"]);
                    }
                }
            }
            else {
                this.e.a8.exportPathData(a, this.cn, "positivePathShape", ["Positive", "Main"]);
                this.e.a8.exportPathData(a, this.cm, "negativePathShape", ["Negative"]);
            }
        }
        cc() {
            this.aq();
        }
        cd() {
            if (this.b7) {
                this.b4 = CategoryTrendLineManagerFactory.a(this.b4, this.e.ar(), this.e.nd, this.e, this.e.cn);
            }
        }
    }
    FinancialPriceSeriesView.$t = /*@__PURE__*/ markType(FinancialPriceSeriesView, 'FinancialPriceSeriesView', FinancialSeriesView.$);
    return FinancialPriceSeriesView;
})();
