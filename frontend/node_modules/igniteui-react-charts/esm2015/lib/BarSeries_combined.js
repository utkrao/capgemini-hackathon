/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { VerticalAnchoredCategorySeries } from "./VerticalAnchoredCategorySeries";
import { IBarSeries_$type } from "./IBarSeries";
import { DependencyProperty } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { Rect } from "igniteui-react-core";
import { typeCast, fromEnum, runOn, markType, markDep } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { List$1 } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { BarFramePreparer } from "./BarFramePreparer";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { BarTrendLineManager } from "./BarTrendLineManager";
import { Color } from "igniteui-react-core";
/**
 * @hidden
 */
export let BarSeries = /*@__PURE__*/ (() => {
    class BarSeries extends VerticalAnchoredCategorySeries {
        constructor() {
            super();
            this.ab = BarSeries.$;
            this.ry = new BarFramePreparer(1, this, this.u3, this, this, this.u3.cr);
        }
        get_dg() {
            return true;
        }
        gw() {
            if (!isNaN_(this.gv)) {
                return super.gw();
            }
            return Defaults.h;
        }
        get_d3() {
            return true;
        }
        bx() {
            return new BarSeriesView(this);
        }
        r3() {
            return 1;
        }
        b3() {
            if (this.b4 == 0) {
                return 2;
            }
            return super.b3();
        }
        l2(a) {
            super.l2(a);
            this.u3 = a;
        }
        get_c2() {
            return true;
        }
        pz(a) {
            if (this.xAxis == null || this.yAxis == null || this.rt.f.count == 0) {
                return Rect.empty;
            }
            let b = this.b0.bv;
            let c = this.b0.bu;
            let d = this.getEffectiveViewport1(this.b0);
            let e = new ScalerParams(0, b, c, this.xAxis.cg, d);
            let f = this.pl(a);
            let g = this.hl(a, true);
            let h = this.hj(a, true);
            let i = truncate(Math.floor(g / this.st(this.b0)));
            let j = truncate(Math.floor(h / this.st(this.b0)));
            let k = i - this.su(this.b0);
            let l = j - this.su(this.b0);
            if (k < 0) {
                k = 0;
            }
            if (k > this.rt.f.count - 1) {
                k = this.rt.f.count - 1;
            }
            if (l < 0) {
                l = 0;
            }
            if (l > this.rt.f.count - 1) {
                l = this.rt.f.count - 1;
            }
            let m = this.rt.f._inner[k];
            let n = this.rt.f._inner[l];
            let o = Math.abs(f.y - m[0]);
            let p = Math.abs(f.y - n[0]);
            let q = this.tu(this.r2);
            let r = this.yAxis.k3(b, c, d);
            if (o < p) {
                let s = m[0] - 0.5 * r;
                let t = m[1];
                let u = q;
                return new Rect(0, Math.min(u, t), s, Math.max(u, t) - Math.min(u, t), r);
            }
            else {
                let v = n[0] - 0.5 * r;
                let w = n[1];
                let x = q;
                return new Rect(0, Math.min(x, w), v, Math.max(x, w) - Math.min(x, w), r);
            }
        }
        ex(a, b) {
            if (this.e0(a, b)) {
                return true;
            }
            if (this.qk(a, b)) {
                return true;
            }
            return false;
        }
        rz(a) {
            let b = typeCast(CategorySeriesView.$, a);
            if (b != null && b.q) {
                if (b.p) {
                    return new BarFramePreparer(1, this, typeCast(ISupportsMarkers_$type, b), b, this, b.cr);
                }
                else {
                    return new BarFramePreparer(1, this, typeCast(ISupportsMarkers_$type, b), this.cd.cu.o, this, b.cr);
                }
            }
            else {
                return this.ry;
            }
        }
        ac() {
            super.ac();
        }
        preferredCategoryMode(a) {
            return 2;
        }
        k0(a, b) {
            super.k0(a, b);
            let c = typeCast(BarSeriesView.$, b);
            if (a && c != null && c.db != null) {
                c.db.count = 0;
            }
        }
        sw() {
            let a = 0;
            for (let b of fromEnum(this.cd.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(IBarSeries_$type, b);
                if (c != null && c.yAxis == this.yAxis && c.getPreferredCategoryMode() == 2) {
                    a++;
                }
            }
            return -1;
        }
        tu(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            if (!c.isEmpty && !d.isEmpty && this.xAxis != null) {
                let f = new ScalerParams(0, c, d, this.xAxis.cg, e);
                b = this.xAxis.ei(this.xAxis.l5, f);
            }
            return b;
        }
        ap(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            if (a == this.yAxis) {
                return new AxisRange(0, this.valueColumn.count - 1);
            }
            if (a == this.xAxis) {
                return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
            }
            return null;
        }
        eo(a) {
            let b = this.b0.bv;
            b = b.copy();
            let c = this.b0.bu;
            let d = new Rect(0, 0, 0, 1, 1);
            let e = !b.isEmpty && !c.isEmpty && this.ck != null ? this.ck.indexOf(a) : -1;
            let f = this.px(this.b0);
            let g = new ScalerParams(0, d, d, this.xAxis.cg, f);
            let h = new ScalerParams(0, d, d, this.yAxis.cg, f);
            let i = this.yAxis != null ? this.yAxis.ei(e, h) : NaN;
            let j = this.yAxis != null ? this.ry.r(this.yAxis, d, d, f) : 0;
            i += j;
            let k = this.xAxis != null && this.valueColumn != null && e < this.valueColumn.count ? this.xAxis.ei(this.valueColumn.item(e), g) : NaN;
            if (!isNaN_(k)) {
                if (k < b.left + 0.1 * b.width) {
                    k = k + 0.4 * b.width;
                    b.x = k - 0.5 * b.width;
                }
                if (k > b.right - 0.1 * b.width) {
                    k = k - 0.4 * b.width;
                    b.x = k - 0.5 * b.width;
                }
            }
            if (!isNaN_(i)) {
                if (i < b.top + 0.1 * b.height) {
                    i = i + 0.4 * b.height;
                    b.y = i - 0.5 * b.height;
                }
                if (i > b.bottom - 0.1 * b.height) {
                    i = i - 0.4 * b.height;
                    b.y = i - 0.5 * b.height;
                }
            }
            if (this.b8 != null) {
                this.b8.au(this.cd, b, true);
            }
            return e >= 0;
        }
        gc() {
            return this.yAxis.k3(this.b0.bv, this.b0.bu, this.getEffectiveViewport1(this.b0));
        }
        tb(a, b) {
            super.tb(a, b);
            let c = a.f;
            if (!b.o()) {
                return;
            }
            let d = b.bv;
            let e = b.bu;
            let f = this.getEffectiveViewport1(b);
            let g = new ScalerParams(0, d, e, this.xAxis.cg, f);
            let h = this.yAxis;
            let i = new ScalerParams(0, d, e, this.yAxis.cg, f);
            let j = this.xAxis;
            let k = j.ei(j.l5, g);
            let l = this.yAxis.k3(d, e, f);
            let m = typeCast(BarSeriesView.$, b);
            if (isNaN_(l) || isInfinity(l) || isNaN_(k)) {
                m.db.count = 0;
                return;
            }
            this.r1.a0(this, this.sl(), runOn(this, this.rm), this.st(b), this.su(b));
            this.r1.r = this.u4;
            this.r1.s = this.u5;
            this.r1.k = this.u4;
            this.r1.l = this.u5;
            let n = false;
            let o = this.r1.b;
            if (o != null) {
                n = true;
            }
            let p = this.xAxis.cm;
            let q = this.valueColumn.count;
            let r = this.st(b);
            let s = 0;
            for (let t = 0; t < c.count; ++t) {
                let u = c._inner[t][0] - 0.5 * l;
                let v = c._inner[t][1];
                let w = k;
                w = Math.max(w, -100);
                v = Math.min(v, e.right + 100);
                let x = Math.abs(v - w);
                if (isInfinity(x) || isNaN_(x)) {
                    continue;
                }
                let y = m.db.item(s);
                s++;
                y.height = l;
                y.width = x;
                if (n) {
                    this.s7(c, t, q, h, i, b.q);
                }
                this.r1.ad(y, false, false, false, false);
                y.am = this.r1.k;
                y.an = this.r1.l;
                m.dg(y, Math.min(v, w), u);
            }
            m.db.count = s;
            b.cy(a);
        }
        k3(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.tl.cr.g(this.fv);
                    break;
            }
            if (this.tl.c3) {
                this.tl.c2.g$e(a, b, c, d);
            }
            switch (a) {
                case 4:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.ml(true);
                    }
                    break;
                case 1:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.ml(true);
                    }
                    break;
                case 0:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.ml(true);
                    }
                    break;
                case 2:
                    if (this.t5 != null && this.tl.cr.d > 0) {
                        this.ml(true);
                    }
                    break;
                case 3:
                    if (d == this.t5) {
                        if (this.xAxis != null && !this.xAxis.c0()) {
                            this.ml(true);
                        }
                    }
                    break;
            }
        }
        l7(a, b, c, d) {
            super.l7(a, b, c, d);
            switch (b) {
                case VerticalAnchoredCategorySeries.$$p[0]:
                    if (c != null) {
                        c.bz(this);
                    }
                    if (d != null) {
                        d.cs(this);
                    }
                    this.tl.cr.g(this.fv);
                    if (this.xAxis != null && this.xAxis.c0()) {
                        this.ml(false);
                    }
                    break;
                case VerticalAnchoredCategorySeries.$$p[1]:
                    if (c != null) {
                        c.bz(this);
                    }
                    if (d != null) {
                        d.cs(this);
                    }
                    if (this.tl.c3) {
                        this.tl.c2 = CategoryTrendLineManagerFactory.a(this.tl.c2, this.yAxis, this.nd, this, this.cn);
                    }
                    this.tl.cr.g(this.fv);
                    this.ml(false);
                    break;
                case "FastItemsSource":
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.tl.cr.g(this.fv);
                        this.ml(false);
                    }
                    break;
                case "ValueColumn":
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.tl.cr.g(this.fv);
                        this.ml(false);
                    }
                    break;
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.k4(this.xAxis);
                        this.k4(this.yAxis);
                    }
                    if (c == null && d != null) {
                        this.mc(this.xAxis);
                        this.mc(this.yAxis);
                    }
                    this.tl.cr.g(this.fv);
                    this.ml(false);
                    break;
            }
        }
        getPreferredCategoryMode() {
            return this.preferredCategoryMode(this.yAxis);
        }
        get useHighMarkerFidelity() {
            return this.so;
        }
    }
    BarSeries.$t = /*@__PURE__*/ markType(BarSeries, 'BarSeries', VerticalAnchoredCategorySeries.$, [IBarSeries_$type]);
    BarSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, BarSeries, 'raisePropertyChanged', ['RadiusX:u4:u8', [1, 0], 'RadiusY:u5:u9', [1, 0]]);
    return BarSeries;
})();
/**
 * @hidden
 */
export let BarBucketCalculator = /*@__PURE__*/ (() => {
    class BarBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
            this.i = null;
            this.h = null;
            this.j = 0;
            this.i = a;
        }
        g(a) {
            let b = this.c.bv;
            let c = this.c.bu;
            let d = this.c.ct.ck;
            if (b.isEmpty || c.isEmpty || this.i.da.yAxis == null || d == null || d.count == 0) {
                this.d = 0;
                return;
            }
            let e = typeCast(BarSeries.$, this.c.ct);
            let f = e.pv(this.c);
            let g = e.getEffectiveViewport1(this.c);
            let h = new ScalerParams(0, b, c, e.yAxis.cg, g);
            let i = Math.floor(e.yAxis.em(f.top, h, 0));
            let j = Math.ceil(e.yAxis.em(f.bottom, h, 0));
            if (!e.yAxis.cg) {
                j = Math.ceil(e.yAxis.em(f.top, h, 0));
                i = Math.floor(e.yAxis.em(f.bottom, h, 0));
            }
            let k = Math.floor((j - i + 1) * a / f.height);
            this.d = truncate(Math.max(1, k));
            this.e = truncate(Math.max(0, Math.floor(i / this.d) - 1));
            this.f = truncate(Math.ceil(j / this.d));
        }
        getBucketWithoutUnknowns(a) {
            let b = this.h;
            let c = this.j;
            let d = a * this.d;
            let e = d + this.d - 1;
            let f = c - 1;
            d = d < f ? d : f;
            e = e < f ? e : f;
            let g = 1.7976931348623157E+308;
            let h = -1.7976931348623157E+308;
            let i = true;
            for (let j = d; j <= e; ++j) {
                let k = b[j];
                g = g < k ? g : k;
                h = h > k ? h : k;
                Math.max(h, k);
                i = false;
            }
            if (!i) {
                return [0.5 * (d + e), g, h];
            }
            return [0.5 * (d + e), NaN, NaN];
        }
        getBucket(a) {
            let b = this.h;
            let c = this.j;
            let d = a * this.d;
            let e = d + this.d - 1;
            let f = c - 1;
            d = d < f ? d : f;
            e = e < f ? e : f;
            let g = NaN;
            let h = NaN;
            for (let i = d; i <= e; ++i) {
                let j = b[i];
                if (!isNaN_(g)) {
                    if (!isNaN_(j)) {
                        g = Math.min(g, j);
                        h = Math.max(h, j);
                    }
                }
                else {
                    g = j;
                    h = j;
                }
            }
            if (!isNaN_(g)) {
                return [0.5 * (d + e), g, h];
            }
            return [0.5 * (d + e), NaN, NaN];
        }
        cacheValues() {
            this.j = this.i.da.valueColumn.count;
            this.h = this.i.da.valueColumn.asArray();
        }
        unCacheValues() {
            this.h = null;
        }
    }
    BarBucketCalculator.$t = /*@__PURE__*/ markType(BarBucketCalculator, 'BarBucketCalculator', CategoryBucketCalculator.$);
    return BarBucketCalculator;
})();
/**
 * @hidden
 */
export let BarSeriesView = /*@__PURE__*/ (() => {
    class BarSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.db = null;
            this.dc = null;
            this.dh = new Rectangle();
            this.da = a;
            this.db = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.di);
                $ret.activate = runOn(this, this.dd);
                $ret.disactivate = runOn(this, this.df);
                $ret.destroy = runOn(this, this.de);
                return $ret;
            })());
            this.c2 = new BarTrendLineManager();
        }
        as() {
            super.as();
            this.dc = new List$1(Rectangle.$, 0);
            if (!this.q) {
                this.da.qh = Defaults.c;
                this.da.g1 = Defaults.i;
            }
        }
        di() {
            let a = new Rectangle();
            this.dc.add(a);
            a._visibility = 1;
            return a;
        }
        dd(a) {
            a._visibility = 0;
        }
        df(a) {
            a._visibility = 1;
        }
        de(a) {
            this.dc.remove(a);
        }
        dg(a, b, c) {
            if (!this.isDirty) {
                this.aq();
            }
            a.o = c;
            a.n = b;
        }
        cs() {
            return new BarBucketCalculator(this);
        }
        bf(a, b) {
            super.bf(a, b);
            let c = a;
            let d = this.bp(b);
            c._fill = d;
            c._stroke = d;
            c.ac = this.e.fw;
        }
        ac(a) {
            return this.dc._inner[a];
        }
        ab(a) {
            let b = this.dc._inner[a];
            this.dh.n = b.n;
            this.dh.o = b.o;
            this.dh.width = b.width;
            this.dh.height = b.height;
            let c = this.bp(a);
            this.dh._fill = c;
            this.dh._stroke = c;
            this.dh.ac = this.e.fw + 3;
            return this.dh;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                for (let c = 0; c < this.dc.count; c++) {
                    let d = this.aa(c, b);
                    this.bd(d, c, b);
                    a.v(d);
                }
            }
        }
        al(a) {
            super.al(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.db.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.o > f.o) {
                    return -1;
                }
                else if (e.o < f.o) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                this.e.a8.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
            }
            b++;
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.pf = a;
            this.e.gy = 5;
            this.e.gz = 5;
            this.e.g0 = -5;
        }
    }
    BarSeriesView.$t = /*@__PURE__*/ markType(BarSeriesView, 'BarSeriesView', AnchoredCategorySeriesView.$);
    return BarSeriesView;
})();
