import { IgrValueBrushScale } from "./igr-value-brush-scale";
import { IgrContourValueResolver } from "./igr-contour-value-resolver";
import { IgrScatterTriangulationSeries } from "./igr-scatter-triangulation-series";
import { ScatterContourSeries } from "./ScatterContourSeries";
/**
 * Series class for rendering isarithmic contours based on a triangulation of X+Y+Value points in the ItemsSource.
*/
export class IgrScatterContourSeries extends IgrScatterTriangulationSeries {
    createImplementation() {
        return new ScatterContourSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets whether the current series shows a line contour shape.
    */
    get isLineContour() {
        return this.i.d1;
    }
    /**
     * Gets or set the name of the property from which to retrieve the numeric values from the ItemsSource items.
    */
    get valueMemberPath() {
        return this.i.sf;
    }
    set valueMemberPath(v) {
        this.i.sf = v;
    }
    /**
     * Gets or sets the label displayed before series value in the Data Legend.
    */
    get valueMemberAsLegendLabel() {
        return this.i.sb;
    }
    set valueMemberAsLegendLabel(v) {
        this.i.sb = v;
    }
    /**
     * Gets or sets the unit displayed after series value in the Data Legend.
    */
    get valueMemberAsLegendUnit() {
        return this.i.sd;
    }
    set valueMemberAsLegendUnit(v) {
        this.i.sd = v;
    }
    /**
     * Gets or sets the ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
    */
    get fillScale() {
        if (this.i.r5 == null) {
            return null;
        }
        if (!this.i.r5.externalObject) {
            let e = IgrValueBrushScale._createFromInternal(this.i.r5);
            if (e) {
                e._implementation = this.i.r5;
            }
            this.i.r5.externalObject = e;
        }
        return this.i.r5.externalObject;
    }
    set fillScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.r5 = null : this.i.r5 = v.i;
    }
    /**
     * Gets actual fill scale that is set on the FillScale property or default FillScale
    */
    get actualFillScale() {
        if (this.i.r4 == null) {
            return null;
        }
        if (!this.i.r4.externalObject) {
            let e = IgrValueBrushScale._createFromInternal(this.i.r4);
            if (e) {
                e._implementation = this.i.r4;
            }
            this.i.r4.externalObject = e;
        }
        return this.i.r4.externalObject;
    }
    set actualFillScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.r4 = null : this.i.r4 = v.i;
    }
    /**
     * Gets or set the ContourValueResolver used to determine the numeric values of contours.
    */
    get valueResolver() {
        if (this.i.r2 == null) {
            return null;
        }
        if (!this.i.r2.externalObject) {
            let e = IgrContourValueResolver._createFromInternal(this.i.r2);
            if (e) {
                e._implementation = this.i.r2;
            }
            this.i.r2.externalObject = e;
        }
        return this.i.r2.externalObject;
    }
    set valueResolver(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.r2 = null : this.i.r2 = v.i;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        if (this.actualFillScale && this.actualFillScale.name && this.actualFillScale.name == name) {
            return this.actualFillScale;
        }
        if (this.valueResolver && this.valueResolver.name && this.valueResolver.name == name) {
            return this.valueResolver;
        }
        return null;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        if (this.actualFillScale && this.actualFillScale._styling) {
            this.actualFillScale._styling(container, component, this);
        }
        if (this.valueResolver && this.valueResolver._styling) {
            this.valueResolver._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.hy(item, memberPathName);
        return (iv);
    }
}
