import { HorizontalAlignment_$type } from "igniteui-react-core";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { YAxisLabelLocation_$type } from "./YAxisLabelLocation";
import { XAxisLabelLocation_$type } from "./XAxisLabelLocation";
import { IgrDomainChart } from "./igr-domain-chart";
import { brushToString, stringToBrush, ensureBool, ensureEnum, arrayFindByName } from "igniteui-react-core";
/**
 * Represents a base class for domain charts with X/Y axes
*/
export class IgrXYChart extends IgrDomainChart {
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets function which takes an context object and returns a formatted label for the X-axis.
    *
    * To customize the text of the x-axis label, set `xAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be your data item.
    *
    * ```ts
    * formatX(item: any): string {
    *     return "[ " + item.label + "! ]";
    * }
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisFormatLabel="formatX"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisFormatLabel() {
        return this.i.vj;
    }
    set xAxisFormatLabel(v) {
        this.i.vj = v;
    }
    /**
     * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.
    *
    * To customize the text of the y-axis label, set `yAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be the numeric value corresponding to a position on the y-axis.
    *
    * ```ts
    * formatY(value: any): string {
    *     return "[ " + value+ "! ]";
    * }
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisFormatLabel="formatY"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisFormatLabel() {
        return this.i.vk;
    }
    set yAxisFormatLabel(v) {
        this.i.vk = v;
    }
    /**
     * Gets or sets the left margin of labels on the X-axis
    *
    * Use the `xAxisLabelLeftMargin` property to apply a margin left of the x-axis labels.
    *
    * ```ts
    * this.chart.xAxisLabelLeftMargin ="100";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisLabelLeftMargin={100}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelLeftMargin() {
        return this.i.w0;
    }
    set xAxisLabelLeftMargin(v) {
        this.i.w0 = +v;
    }
    /**
     * Gets or sets the top margin of labels on the X-axis
    *
    * Use the `xAxisLabelTopMargin` property to apply a margin above the x-axis labels.
    *
    * ```ts
    * this.chart.xAxisTitleTopMargin="250";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTitleTopMargin	={250}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelTopMargin() {
        return this.i.w2;
    }
    set xAxisLabelTopMargin(v) {
        this.i.w2 = +v;
    }
    /**
     * Gets or sets the right margin of labels on the X-axis
    *
    * Use the `xAxisLabelRightMargin` property to apply a margin right of the x-axis labels.
    *
    * ```ts
    * this.chart.xAxisLabelRightMargin="100";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisLabelRightMargin={250}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelRightMargin() {
        return this.i.w1;
    }
    set xAxisLabelRightMargin(v) {
        this.i.w1 = +v;
    }
    /**
     * Gets or sets the bottom margin of labels on the X-axis
    *
    * Use the `xAxisLabelBottomMargin` property to apply a margin below the x-axis labels.
    *
    * ```ts
    * this.chart.xAxisLabelBottomMargin ="100";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisLabelBottomMargin={100}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelBottomMargin() {
        return this.i.wz;
    }
    set xAxisLabelBottomMargin(v) {
        this.i.wz = +v;
    }
    /**
     * Gets or sets the left margin of labels on the Y-axis
    *
    * Use the `yAxisLabelLeftMargin` property to apply a margin left of the y-axis labels.
    *
    * ```ts
    * this.chart. yAxisLabelLeftMargin="250";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 yAxisLabelLeftMargin={250}
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelLeftMargin() {
        return this.i.xh;
    }
    set yAxisLabelLeftMargin(v) {
        this.i.xh = +v;
    }
    /**
     * Gets or sets the top margin of labels on the Y-axis
    *
    * Use the `yAxisLabelTopMargin` property to apply a margin above the y-axis labels.
    *
    * ```ts
    * this.chart.yAxisLabelTopMargin="250";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisLabelTopMargin	={250}
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelTopMargin() {
        return this.i.xj;
    }
    set yAxisLabelTopMargin(v) {
        this.i.xj = +v;
    }
    /**
     * Gets or sets the right margin of labels on the Y-axis
    *
    * Use the `yAxisLabelRightMargin` property to apply a margin right of the y-axis labels.
    *
    * ```ts
    * this.chart.yAxisLabelRightMargin="250";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisLabelRightMargin={250}
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelRightMargin() {
        return this.i.xi;
    }
    set yAxisLabelRightMargin(v) {
        this.i.xi = +v;
    }
    /**
     * Gets or sets the bottom margin of labels on the Y-axis
    *
    * Use the `yAxisLabelBottomMargin` property to apply a margin below the y-axis labels.
    *
    * ```ts
    * this.chart.yAxisLabelBottomMargin="250";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisLabelBottomMargin={250}
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelBottomMargin() {
        return this.i.xg;
    }
    set yAxisLabelBottomMargin(v) {
        this.i.xg = +v;
    }
    /**
     * Gets or sets color of labels on the X-axis
    *
    * To change the color of x-axis labels, set the `xAxisLabelTextColor` property to a color string.
    *
    * ```ts
    * this.chart.xAxisLabelTextColor="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisLabelTextColor="green"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelTextColor() {
        return brushToString(this.i.abo);
    }
    set xAxisLabelTextColor(v) {
        this.i.abo = stringToBrush(v);
    }
    /**
     * Gets or sets color of labels on the Y-axis
    *
    * To change the color of y-axis labels, set the `yAxisLabelTextColor` property to a color string.
    *
    * ```ts
    * this.chart.yAxisLabelTextColor="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisLabelTextColor="green"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelTextColor() {
        return brushToString(this.i.abv);
    }
    set yAxisLabelTextColor(v) {
        this.i.abv = stringToBrush(v);
    }
    /**
     * Gets the actual color of labels on the X-axis
    */
    get actualXAxisLabelTextColor() {
        return brushToString(this.i.abm);
    }
    set actualXAxisLabelTextColor(v) {
        this.i.abm = stringToBrush(v);
    }
    /**
     * Gets the actual color of labels on the Y-axis
    */
    get actualYAxisLabelTextColor() {
        return brushToString(this.i.abn);
    }
    set actualYAxisLabelTextColor(v) {
        this.i.abn = stringToBrush(v);
    }
    /**
     * Gets or sets the margin around a title on the X-axis
    *
    * Use the `xAxisTitleMargin` property to set a margin around the y-axis title.
    */
    get xAxisTitleMargin() {
        return this.i.xb;
    }
    set xAxisTitleMargin(v) {
        this.i.xb = +v;
    }
    /**
     * Gets or sets the margin around a title on the Y-axis
    *
    * Use the `yAxisTitleMargin` property to set a margin around the y-axis title.
    */
    get yAxisTitleMargin() {
        return this.i.xs;
    }
    set yAxisTitleMargin(v) {
        this.i.xs = +v;
    }
    /**
     * Gets or sets the left margin of a title on the X-axis
    *
    * Use the `xAxisTitleLeftMargin` property to apply a margin left of the x-axis title.
    *
    * ```ts
    * this.chart.xAxisTitleLeftMargin="150";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTitleLeftMargin={150}
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitleLeftMargin() {
        return this.i.xa;
    }
    set xAxisTitleLeftMargin(v) {
        this.i.xa = +v;
    }
    /**
     * Gets or sets the left margin of a title on the Y-axis
    *
    * Use the `yAxisTitleLeftMargin` property to apply a margin left of the y-axis title.
    *
    * ```ts
    * this.chart.yAxisTitleLeftMargin="150";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitleLeftMargin={150}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitleLeftMargin() {
        return this.i.xr;
    }
    set yAxisTitleLeftMargin(v) {
        this.i.xr = +v;
    }
    /**
     * Gets or sets the top margin of a title on the X-axis
    *
    * Use the `xAxisTitleTopMargin` property to apply a margin above the x-axis title.
    *
    * ```ts
    * this.chart.xAxisTitleTopMargin="150";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTitleTopMargin	={150}
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitleTopMargin() {
        return this.i.xd;
    }
    set xAxisTitleTopMargin(v) {
        this.i.xd = +v;
    }
    /**
     * Gets or sets the top margin of a title on the Y-axis
    *
    * Use the `yAxisTitleTopMargin` property to apply a margin above the y-axis title.
    *
    * ```ts
    * this.chart.yAxisTitleTopMargin="150";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitleTopMargin	={150}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitleTopMargin() {
        return this.i.xu;
    }
    set yAxisTitleTopMargin(v) {
        this.i.xu = +v;
    }
    /**
     * Gets or sets the right margin of a title on the X-axis
    *
    * Use the `xAxisTitleRightMargin` property to apply a margin right of the x-axis title.
    *
    * ```ts
    * this.chart.xAxisTitleRightMargin="100";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTitleRightMargin="100"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitleRightMargin() {
        return this.i.xc;
    }
    set xAxisTitleRightMargin(v) {
        this.i.xc = +v;
    }
    /**
     * Gets or sets the right margin of a title on the Y-axis
    *
    * Use the `yAxisTitleRightMargin` property to apply a margin right of the y-axis title.
    *
    * ```ts
    * this.chart.yAxisTitleRightMargin="150";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitleRightMargin={150}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitleRightMargin() {
        return this.i.xt;
    }
    set yAxisTitleRightMargin(v) {
        this.i.xt = +v;
    }
    /**
     * Gets or sets the bottom margin of a title on the X-axis
    *
    * Use the `xAxisTitleBottomMargin` property to apply a margin below the x-axis title.
    *
    * ```ts
    * this.chart.xAxisTitleBottomMargin="150";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTitleBottomMargin={250}
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitleBottomMargin() {
        return this.i.w9;
    }
    set xAxisTitleBottomMargin(v) {
        this.i.w9 = +v;
    }
    /**
     * Gets or sets the bottom margin of a title on the Y-axis
    *
    * Use the `yAxisTitleBottomMargin` property to apply a margin below the y-axis title.
    *
    * ```ts
    * this.chart.yAxisTitleBottomMargin="150";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitleBottomMargin	={150}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitleBottomMargin() {
        return this.i.xq;
    }
    set yAxisTitleBottomMargin(v) {
        this.i.xq = +v;
    }
    /**
     * Gets or sets color of title on the X-axis
    *
    * To change the color of the x-axis title, set the `xAxisTitleTextColor` property to a color string.
    *
    * ```ts
    * this.chart.xAxisTitleTextColor="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisTitleTextColor="green"
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitleTextColor() {
        return brushToString(this.i.abu);
    }
    set xAxisTitleTextColor(v) {
        this.i.abu = stringToBrush(v);
    }
    /**
     * Gets or sets color of title on the Y-axis
    *
    * To change the color of the y-axis title, set the `yAxisTitleTextColor` property to a color string.
    *
    * ```ts
    * this.chart.yAxisTitleTextColor="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitleTextColor="green"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitleTextColor() {
        return brushToString(this.i.ab1);
    }
    set yAxisTitleTextColor(v) {
        this.i.ab1 = stringToBrush(v);
    }
    /**
     * Gets or sets CSS font property for labels on X-axis
    *
    * To change the font of x-axis labels, set the `xAxisLabelTextStyle` property.
    *
    * ```ts
    * this.chart.xAxisLabelTextStyle="italic 15px arial, sans-serif";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisLabelTextStyle="italic 15px arial, sans-serif"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelTextStyle() {
        return this.i.yo;
    }
    set xAxisLabelTextStyle(v) {
        this.i.yo = v;
    }
    /**
     * Gets or sets CSS font property for labels on Y-axis
    *
    * To change the font of x-axis labels, set the `yAxisLabelTextStyle` property.
    *
    * ```ts
    * this.chart. yAxisLabelTextStyle="italic 15px arial, sans-serif";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 yAxisLabelTextStyle="italic 15px arial, sans-serif"
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelTextStyle() {
        return this.i.zt;
    }
    set yAxisLabelTextStyle(v) {
        this.i.zt = v;
    }
    /**
     * Gets or sets CSS font property for title on X-axis
    *
    * To change the font of the x-axis title, set the `xAxisTitleTextStyle` property.
    *
    * ```ts
    * this.chart.xAxisTitleTextStyle="italic 15px arial, sans-serif";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTitleTextStyle="italic 15px arial, sans-serif"
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitleTextStyle() {
        return this.i.zc;
    }
    set xAxisTitleTextStyle(v) {
        this.i.zc = v;
    }
    /**
     * Gets or sets CSS font property for title on Y-axis
    *
    * To change the font of the x-axis title, set the `yAxisTitleTextStyle` property.
    *
    * ```ts
    * this.chart.yAxisTitleTextStyle="italic 15px arial, sans-serif";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitleTextStyle="italic 15px arial, sans-serif"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitleTextStyle() {
        return this.i.aah;
    }
    set yAxisTitleTextStyle(v) {
        this.i.aah = v;
    }
    /**
     * Gets or sets the format for labels along the X-axis.
    */
    get xAxisLabel() {
        return this.i.xx;
    }
    set xAxisLabel(v) {
        this.i.xx = v;
    }
    /**
     * Gets or sets the property or string from which the labels are derived.
    */
    get yAxisLabel() {
        return this.i.xy;
    }
    set yAxisLabel(v) {
        this.i.xy = v;
    }
    /**
     * Gets or sets the color to apply to major gridlines along the X-axis.
    *
    * Set `xAxisMajorStroke` to control the color of major gridlines extending vertically from the x-axis.
    *
    * ```ts
    * this.chart.xAxisMajorStroke="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisMajorStroke="green"
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisMajorStroke() {
        return brushToString(this.i.abp);
    }
    set xAxisMajorStroke(v) {
        this.i.abp = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to major gridlines along the Y-axis.
    *
    * Set `yAxisMajorStroke` to control the color of major gridlines extending horizontally from the y-axis.
    *
    * ```ts
    * this.chart.yAxisMajorStroke="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    *     yAxisMajorStroke="green"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisMajorStroke() {
        return brushToString(this.i.abw);
    }
    set yAxisMajorStroke(v) {
        this.i.abw = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness to apply to major gridlines along the X-axis.
    *
    * Set `xAxisMajorStrokeThickness` to control the thickness of major gridlines extending vertically from the x-axis.
    *
    * ```ts
    * this.chart.xAxisMajorStrokeThickness="3" ;
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisMajorStrokeThickness="3"
    * 	xAxisExtent	={250}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisMajorStrokeThickness() {
        return this.i.w3;
    }
    set xAxisMajorStrokeThickness(v) {
        this.i.w3 = +v;
    }
    /**
     * Gets or sets the thickness to apply to major gridlines along the Y-axis.
    *
    * Set `yAxisMajorStrokeThickness` to control the thickness of major gridlines extending horizontally from the y-axis.
    *
    * ```ts
    * this.chart.yAxisMajorStrokeThickness="2";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisMajorStrokeThickness={2}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisMajorStrokeThickness() {
        return this.i.xk;
    }
    set yAxisMajorStrokeThickness(v) {
        this.i.xk = +v;
    }
    /**
     * Gets or sets the thickness to apply to minor gridlines along the X-axis.
    *
    * Set `xAxisMinorStrokeThickness` to control the thickness of minor gridlines extending vertically from the x-axis.
    *
    * ```ts
    * this.chart.xAxisMinorStrokeThickness="3";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisMinorStrokeThickness="3"
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisMinorStrokeThickness() {
        return this.i.w4;
    }
    set xAxisMinorStrokeThickness(v) {
        this.i.w4 = +v;
    }
    /**
     * Gets or sets the thickness to apply to minor gridlines along the Y-axis.
    *
    * Set `yAxisMinorStrokeThickness` to control the thickness of minor gridlines extending horizontally from the y-axis.
    *
    * ```ts
    * this.chart.yAxisMinorStrokeThickness="3";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisMinorStrokeThickness={3}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisMinorStrokeThickness() {
        return this.i.xl;
    }
    set yAxisMinorStrokeThickness(v) {
        this.i.xl = +v;
    }
    /**
     * Gets or sets the color to apply to stripes along the X-axis.
    *
    * Set `xAxisStrip` to control the alternating color of stripes extending vertically from the x-axis.
    *
    * ```ts
    * this.chart.xAxisStrip="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisStrip="green"
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisStrip() {
        return brushToString(this.i.abr);
    }
    set xAxisStrip(v) {
        this.i.abr = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to stripes along the Y-axis.
    *
    * Set `yAxisStrip` to control the alternating color of stripes extending horizontally from the y-axis.
    *
    * ```ts
    * this.chart.yAxisStrip="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisStrip="green"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisStrip() {
        return brushToString(this.i.aby);
    }
    set yAxisStrip(v) {
        this.i.aby = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to the X-axis line.
    *
    * Set `xAxisStroke` to control the color of the x-axis line.
    *
    * ```ts
    * this.chart.xAxisStroke="green"";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisStroke="green"
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisStroke() {
        return brushToString(this.i.abs);
    }
    set xAxisStroke(v) {
        this.i.abs = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to the Y-axis line.
    *
    * Set `yAxisStroke` to control the color of the y-axis line.
    *
    * ```ts
    * this.chart.yAxisStroke="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisStroke="green"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisStroke() {
        return brushToString(this.i.abz);
    }
    set yAxisStroke(v) {
        this.i.abz = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness to apply to the X-axis line.
    *
    * Set `xAxisStrokeThickness` to control the thickness of the x-axis line.
    *
    * ```ts
    * this.chart.xAxisStrokeThickness="2";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisStrokeThickness={2}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisStrokeThickness() {
        return this.i.w5;
    }
    set xAxisStrokeThickness(v) {
        this.i.w5 = +v;
    }
    /**
     * Gets or sets the thickness to apply to the Y-axis line.
    *
    * Set `yAxisStrokeThickness` to control the thickness of the y-axis line.
    *
    * ```ts
    * this.chart. yAxisStrokeThickness="2";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 yAxisStrokeThickness={2}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisStrokeThickness() {
        return this.i.xm;
    }
    set yAxisStrokeThickness(v) {
        this.i.xm = +v;
    }
    /**
     * Gets or sets the length of tickmarks along the X-axis.
    *
    * Set `xAxisTickLength` to control the length of tickmarks extending vertically from the x-axis line.
    *
    * ```ts
    * this.chart.xAxisTickLength="25";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTickLength	={25}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTickLength() {
        return this.i.w6;
    }
    set xAxisTickLength(v) {
        this.i.w6 = +v;
    }
    /**
     * Gets or sets the length of tickmarks along the Y-axis.
    *
    * Set `yAxisTickLength` to control the length of tickmarks extending horizontally from the y-axis line.
    *
    * ```ts
    * this.chart.yAxisTickLength="25";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTickLength	={25}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTickLength() {
        return this.i.xn;
    }
    set yAxisTickLength(v) {
        this.i.xn = +v;
    }
    /**
     * Gets or sets the color to apply to tickmarks along the X-axis.
    *
    * Set `xAxisTickStroke` to control the color of tickmarks extending vertically from the x-axis line.
    *
    * ```ts
    * this.chart. xAxisTickStroke="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisTickStroke="green"
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTickStroke() {
        return brushToString(this.i.abt);
    }
    set xAxisTickStroke(v) {
        this.i.abt = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to tickmarks along the Y-axis.
    *
    * Set `yAxisTickStroke` to control the color of tickmarks extending horizontally from the y-axis line.
    *
    * ```ts
    * this.chart.yAxisTickStroke="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTickStroke="green"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTickStroke() {
        return brushToString(this.i.ab0);
    }
    set yAxisTickStroke(v) {
        this.i.ab0 = stringToBrush(v);
    }
    /**
     * Gets or sets the thickness to apply to tickmarks along the X-axis.
    *
    * Set `xAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the x-axis line.
    *
    * ```ts
    * this.chart.xAxisTickStrokeThickness="20";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTickStrokeThickness={20}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTickStrokeThickness() {
        return this.i.w7;
    }
    set xAxisTickStrokeThickness(v) {
        this.i.w7 = +v;
    }
    /**
     * Gets or sets the thickness to apply to tickmarks along the Y-axis.
    *
    * Set `yAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the y-axis line.
    *
    * ```ts
    * this.chart.yAxisTickStrokeThickness="25";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTickStrokeThickness	={25}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTickStrokeThickness() {
        return this.i.xo;
    }
    set yAxisTickStrokeThickness(v) {
        this.i.xo = +v;
    }
    /**
     * Gets or sets the Text to display below the X-axis.
    *
    * Set `xAxisTitle` to display a label adjacent to the x-axis.
    *
    * ```ts
    * this.chart. xAxisTitle="x axis";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTitle="x axis"
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitle() {
        return this.i.y3;
    }
    set xAxisTitle(v) {
        this.i.y3 = v;
    }
    /**
     * Gets or sets the Text to display to the left of the Y-axis.
    *
    * Set `yAxisTitle` to display a label adjacent to the y-axis.
    *
    * ```ts
    * this.chart.yAxisTitle="y axis";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitle="y axis"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitle() {
        return this.i.z8;
    }
    set yAxisTitle(v) {
        this.i.z8 = v;
    }
    /**
     * Gets or sets the color to apply to minor gridlines along the X-axis.
    *
    * Set `xAxisMinorStroke` to control the color of minor gridlines extending vertically from the x-axis.
    *
    * ```ts
    * this.chart.xAxisExtent="250";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisMinorStroke="green"
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisMinorStroke() {
        return brushToString(this.i.abq);
    }
    set xAxisMinorStroke(v) {
        this.i.abq = stringToBrush(v);
    }
    /**
     * Gets or sets the color to apply to minor gridlines along the Y-axis.
    *
    * Set `yAxisMinorStroke` to control the color of minor gridlines extending horizontally from the y-axis.
    *
    * ```ts
    * this.chart.yAxisMinorStroke="green";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisMinorStroke="green"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisMinorStroke() {
        return brushToString(this.i.abx);
    }
    set yAxisMinorStroke(v) {
        this.i.abx = stringToBrush(v);
    }
    /**
     * Gets or sets the angle of rotation for labels along the X-axis.
    *
    * To control the rotation of labels on the x-axis, set the `xAxisLabelAngle` property to a number of rotational degrees.
    *
    * ```ts
    * this.chart.xAxisLabelAngle="45";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisLabelAngle={45}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelAngle() {
        return this.i.wy;
    }
    set xAxisLabelAngle(v) {
        this.i.wy = +v;
    }
    /**
     * Gets or sets the angle of rotation for labels along the Y-axis.
    *
    * To control the rotation of labels on the y-axis, set the `yAxisLabelAngle` property to a number of rotational degrees.
    *
    * ```ts
    * this.chart.yAxisLabelAngle="25";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisLabelAngle	={25}
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelAngle() {
        return this.i.xf;
    }
    set yAxisLabelAngle(v) {
        this.i.xf = +v;
    }
    /**
     * Gets or sets the distance between the X-axis and the bottom of the chart.
    *
    * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.
    *
    * ```ts
    * this.chart.xAxisExtent="250";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisExtent	={250}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisExtent() {
        return this.i.wx;
    }
    set xAxisExtent(v) {
        this.i.wx = +v;
    }
    /**
     * Gets or sets the distance between the Y-axis and the left edge of the chart.
    *
    * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.
    *
    * ```ts
    * this.chart.xAxisExtent="250";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisExtent	={250}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisExtent() {
        return this.i.xe;
    }
    set yAxisExtent(v) {
        this.i.xe = +v;
    }
    /**
     * Gets or sets the angle of rotation for the X-axis title.
    *
    * Set `xAxisTitleAngle` to control the rotation of the x-axis title.
    *
    * ```ts
    * this.chart.xAxisTitleAngle="50";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisTitleAngle	={50}
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitleAngle() {
        return this.i.w8;
    }
    set xAxisTitleAngle(v) {
        this.i.w8 = +v;
    }
    /**
     * Gets or sets the angle of rotation for the Y-axis title.
    *
    * Set `yAxisTitleAngle` to control the rotation of the y-axis title.
    *
    * ```ts
    * this.chart.yAxisTitleAngle="25";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitleAngle	={24}
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitleAngle() {
        return this.i.xp;
    }
    set yAxisTitleAngle(v) {
        this.i.xp = +v;
    }
    /**
     * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
    *
    * To reverse the direction of items along the x-axis, set the `xAxisInverted` property to true.
    *
    * ```ts
    * this.chart.XAxisInverted="True";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	XAxisInverted="True"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisInverted() {
        return this.i.vt;
    }
    set xAxisInverted(v) {
        this.i.vt = ensureBool(v);
    }
    /**
     * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
    *
    * You can use `yAxisInverted` to invert the scale of the y axis like this:
    *
    * ```ts
    * this.chart.yAxisInverted="true";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 yAxisInverted="true"
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    *
    * The default value of `yAxisInverted` is false.
    */
    get yAxisInverted() {
        return this.i.vu;
    }
    set yAxisInverted(v) {
        this.i.vu = ensureBool(v);
    }
    /**
     * Gets or sets Horizontal alignment of the X-axis title.
    *
    * Set `xAxisTitleAlignment` to control the horizontal alignment of the x-axis title.
    *
    * ```ts
    * this.chart.xAxisTitleAlignment="right";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisTitleAlignment="right"
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisTitleAlignment() {
        return this.i.aa4;
    }
    set xAxisTitleAlignment(v) {
        this.i.aa4 = ensureEnum(HorizontalAlignment_$type, v);
    }
    /**
     * Gets or sets Vertical alignment of the Y-axis title.
    *
    * Set `yAxisTitleAlignment` to control the vertical alignment of the x-axis title.
    *
    * ```ts
    * this.chart.yAxisTitleAlignment="bottom";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisTitleAlignment="bottom"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisTitleAlignment() {
        return this.i.ab7;
    }
    set yAxisTitleAlignment(v) {
        this.i.ab7 = ensureEnum(VerticalAlignment_$type, v);
    }
    /**
     * Gets or sets Horizontal alignment of X-axis labels.
    */
    get xAxisLabelHorizontalAlignment() {
        return this.i.aa3;
    }
    set xAxisLabelHorizontalAlignment(v) {
        this.i.aa3 = ensureEnum(HorizontalAlignment_$type, v);
    }
    /**
     * Gets or sets Horizontal alignment of Y-axis labels.
    *
    * Set the `yAxisLabelHorizontalAlignment` property to change the horizontal alignment of y-axis labels.
    */
    get yAxisLabelHorizontalAlignment() {
        return this.i.aa5;
    }
    set yAxisLabelHorizontalAlignment(v) {
        this.i.aa5 = ensureEnum(HorizontalAlignment_$type, v);
    }
    /**
     * Gets or sets Vertical alignment of X-axis labels.
    *
    * Use the `xAxisLabelVerticalAlignment` property to change the vertical position of x-axis labels.
    *
    * ```ts
    * this.chart.xAxisLabelVerticalAlignment="bottom";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	xAxisLabelVerticalAlignment="bottom"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelVerticalAlignment() {
        return this.i.ab5;
    }
    set xAxisLabelVerticalAlignment(v) {
        this.i.ab5 = ensureEnum(VerticalAlignment_$type, v);
    }
    /**
     * Gets or sets Vertical alignment of Y-axis labels.
    */
    get yAxisLabelVerticalAlignment() {
        return this.i.ab6;
    }
    set yAxisLabelVerticalAlignment(v) {
        this.i.ab6 = ensureEnum(VerticalAlignment_$type, v);
    }
    /**
     * Gets or sets Visibility of X-axis labels.
    *
    * To hide the x-axis labels, set `xAxisLabelVisibility` to collapsed.
    *
    * ```ts
    * this.chart.xAxisLabelVisibility="collapsed";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	 xAxisLabelVisibility="collapsed"
    * 	dataSource={this.state.data}>
    * </IgrCategoryChart>
    * ```
    */
    get xAxisLabelVisibility() {
        return this.i.aca;
    }
    set xAxisLabelVisibility(v) {
        this.i.aca = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets Visibility of Y-axis labels.
    *
    * To hide the y-axis labels, set `yAxisLabelVisibility` to collapsed.
    *
    * ```ts
    * this.chart.yAxisLabelVisibility="collapsed"";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisLabelVisibility="collapsed"
    * 	dataSource={this.state.data}
    * 	chartType="stepArea" >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelVisibility() {
        return this.i.acb;
    }
    set yAxisLabelVisibility(v) {
        this.i.acb = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets location of Y-axis labels, relative to the plot area.
    *
    * Set the `yAxisLabelLocation` property to change the location of the y-axis and its labels.
    *
    * ```ts
    * this.chart.yAxisLabelLocation="outsideRight";
    * ```
    *
    * ```ts
    * <IgrCategoryChart
    * 	yAxisLabelLocation="outsideRight"
    * 	dataSource={this.state.data} >
    * </IgrCategoryChart>
    * ```
    */
    get yAxisLabelLocation() {
        return this.i.vq;
    }
    set yAxisLabelLocation(v) {
        this.i.vq = ensureEnum(YAxisLabelLocation_$type, v);
    }
    /**
     * Gets or sets location of X-axis labels, relative to the plot area.
    */
    get xAxisLabelLocation() {
        return this.i.vo;
    }
    set xAxisLabelLocation(v) {
        this.i.vo = ensureEnum(XAxisLabelLocation_$type, v);
    }
    /**
     * Gets or sets the format string for the X axis label.
    */
    get xAxisLabelFormat() {
        return this.i.yf;
    }
    set xAxisLabelFormat(v) {
        this.i.yf = v;
    }
    /**
     * Gets or sets the format specifiers to use with the XAxisLabelFormat string.
    */
    get xAxisLabelFormatSpecifiers() {
        return this.i.vd;
    }
    set xAxisLabelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.vd = v;
    }
    /**
     * Gets or sets the format string for the Y axis label.
    */
    get yAxisLabelFormat() {
        return this.i.zk;
    }
    set yAxisLabelFormat(v) {
        this.i.zk = v;
    }
    /**
     * Gets or sets the format specifiers to use with the YAxisLabelFormat string.
    */
    get yAxisLabelFormatSpecifiers() {
        return this.i.ve;
    }
    set yAxisLabelFormatSpecifiers(v) {
        if (v && !Array.isArray(v) && typeof (v) == "string") {
            const re = /\s*(?:,|\s|$)\s*/gm;
            v = v.split(re);
        }
        this.i.ve = v;
    }
    findByName(name) {
        var baseResult = super.findByName(name);
        if (baseResult) {
            return baseResult;
        }
        if (this.xAxisLabelFormatSpecifiers != null && arrayFindByName(this.xAxisLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.xAxisLabelFormatSpecifiers, name);
        }
        if (this.yAxisLabelFormatSpecifiers != null && arrayFindByName(this.yAxisLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.yAxisLabelFormatSpecifiers, name);
        }
        return null;
    }
    /**
     * Called by the UI framework to provide a UI container for rendering this control.
    
    * @param container  * The UI container element.
    */
    provideContainer(container) {
        this.i.provideContainer(container);
    }
    /**
     * Converts the given visual location to a data value.
    
    * @param unscaledValue  * The x-coordinate of the location to scale.
    */
    getScaledValueX(unscaledValue) {
        let iv = this.i.wt(unscaledValue);
        return (iv);
    }
    /**
     * Converts the given data value to a visual location.
    
    * @param scaledValue  * The data value to un-scale.
    */
    getUnscaledValueX(scaledValue) {
        let iv = this.i.wv(scaledValue);
        return (iv);
    }
    /**
     * Converts the given visual location to a data value.
    
    * @param unscaledValue  * The y-coordinate of the location to scale.
    */
    getScaledValueY(unscaledValue) {
        let iv = this.i.wu(unscaledValue);
        return (iv);
    }
    /**
     * Converts the given data value to a visual location.
    
    * @param scaledValue  * The data value to un-scale.
    */
    getUnscaledValueY(scaledValue) {
        let iv = this.i.ww(scaledValue);
        return (iv);
    }
}
