/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_TextBody_DML } from "./CT_TextBody_DML";
import { CT_TableCellProperties } from "./CT_TableCellProperties";
import { CT_OfficeArtExtensionList } from "./CT_OfficeArtExtensionList";
import { CultureInfo } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_TableCell = /*@__PURE__*/ (() => {
    class CT_TableCell extends Base {
        constructor() {
            super();
            this.f = null;
            this.d = null;
            this.b = null;
            this.p = toNullable(Number_$type, null);
            this.l = toNullable(Number_$type, null);
            this.n = toNullable(Boolean_$type, null);
            this.r = toNullable(Boolean_$type, null);
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        static t(a, b, c, d, e) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(Boolean_$type, null);
            e = toNullable(Boolean_$type, null);
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "rowSpan":
                        b = toNullable(Number_$type, parseInt32_1(f.d, CultureInfo.invariantCulture));
                        break;
                    case "gridSpan":
                        c = toNullable(Number_$type, parseInt32_1(f.d, CultureInfo.invariantCulture));
                        break;
                    case "hMerge":
                        d = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    case "vMerge":
                        e = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        static u(a, b, c = toNullable(Number_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(Number_$type, null), f = toNullable(Boolean_$type, null)) {
            a.ad.p(b, "a");
            let g = null;
            let h = null;
            if (c.hasValue) {
                h = "gridSpan";
                g = c.value.toString();
                a.ad.h(h, g);
            }
            if (d.hasValue) {
                h = "hMerge";
                g = ST_OnOff.g(d.value);
                a.ad.h(h, g);
            }
            if (e.hasValue) {
                h = "rowSpan";
                g = e.value.toString();
                a.ad.h(h, g);
            }
            if (f.hasValue) {
                h = "vMerge";
                g = ST_OnOff.g(f.value);
                a.ad.h(h, g);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1777:
                    this.e = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 1701:
                    this.c = typeCast(CT_TableCellProperties.$, b);
                    break;
                case 601:
                    this.a = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TableCell.$t = /*@__PURE__*/ markType(CT_TableCell, 'CT_TableCell', Base.$, [ISupportSetProperty_$type]);
    return CT_TableCell;
})();
