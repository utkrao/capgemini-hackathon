/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
import { truncate, intDivide } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionPermut = /*@__PURE__*/ (() => {
    class UltraCalcFunctionPermut extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = a.pop();
            if (c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let d = truncate(c._toDecimal2());
            c = a.pop();
            if (c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let e = truncate(c._toDecimal2());
            if (e < 0 || d < 0 || d > e) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            let f = UltraCalcFunctionPermut._ak(e, d);
            return new ExcelCalcValue(f);
        }
        get_name() {
            return "permut";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 2;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 2;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        static _ak(a, b) {
            if (b > a) {
                return NaN;
            }
            let c = 1;
            while (true) {
                if (b == 0) {
                    break;
                }
                if (b < 0) {
                    break;
                }
                if (b > intDivide(a, 2)) {
                    b = a - b;
                }
                else {
                    c *= a;
                    a--;
                    b--;
                }
            }
            return c;
        }
    }
    UltraCalcFunctionPermut.$t = /*@__PURE__*/ markType(UltraCalcFunctionPermut, 'UltraCalcFunctionPermut', BuiltInFunctionBase.$);
    return UltraCalcFunctionPermut;
})();
