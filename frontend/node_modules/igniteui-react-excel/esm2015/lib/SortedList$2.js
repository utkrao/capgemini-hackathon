/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, IEnumerable$1_$type, Type, toEnum, markType } from "igniteui-react-core";
import { KeyValuePair$2 } from "igniteui-react-core";
import { Comparer$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { KeyNotFoundException } from "./KeyNotFoundException";
/**
 * @hidden
 */
export let SortedList$2 = /*@__PURE__*/ (() => {
    class SortedList$2 extends Base {
        constructor($tKey, $tValue, a, ..._rest) {
            super();
            this.$tKey = null;
            this.$tValue = null;
            this._f = null;
            this._g = null;
            this._i = null;
            this.$tKey = $tKey;
            this.$tValue = $tValue;
            this.$type = this.$type.specialize(this.$tKey, this.$tValue);
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = [Comparer$1.defaultComparerValue(this.$tKey)];
                        {
                            let e = c[0];
                            this._f = e;
                            this._g = new List$1(this.$tKey, 0);
                            this._i = new List$1(this.$tValue, 0);
                        }
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        this._f = c;
                        this._g = new List$1(this.$tKey, 0);
                        this._i = new List$1(this.$tValue, 0);
                    }
                    break;
            }
        }
        *_getEnumerator() {
            for (let a = 0; a < this._g.count; a++) {
                yield new KeyValuePair$2(this.$tKey, this.$tValue, 1, this._g._inner[a], this._i._inner[a]);
            }
        }
        getEnumerator() {
            return toEnum(() => this._getEnumerator()).getEnumerator();
        }
        getEnumeratorObject() {
            return this.getEnumerator();
        }
        _m(a, b) {
            let c = this._g.g(a, this._f);
            if (c < 0) {
                this._g.insert(~c, a);
                this._i.insert(~c, b);
            }
            else {
            }
        }
        _b(a) {
            let b = this._g.g(a, this._f);
            return 0 <= b;
        }
        _l(a) {
            let b = this._g.g(a, this._f);
            if (b < 0) {
                return -1;
            }
            return b;
        }
        _c(a) {
            let b = this._g.g(a, this._f);
            if (b < 0) {
                return false;
            }
            this._n(b);
            return true;
        }
        _n(a) {
            this._g.removeAt(a);
            this._i.removeAt(a);
        }
        _d(a, b) {
            let c = this._g.g(a, this._f);
            if (c < 0) {
                b = Type.getDefaultValue(this.$tValue);
                return {
                    ret: false,
                    p1: b
                };
            }
            b = this._i._inner[c];
            return {
                ret: true,
                p1: b
            };
        }
        get _e() {
            return this._f;
        }
        get _k() {
            return this._g.count;
        }
        _item(a, b) {
            if (arguments.length === 2) {
                let c = this._g.g(a, this._f);
                if (c < 0) {
                    this._g.insert(~c, a);
                    this._i.insert(~c, b);
                }
                else {
                    this._i._inner[c] = b;
                }
                return b;
            }
            else {
                let b = this._g.g(a, this._f);
                if (b < 0) {
                    throw new KeyNotFoundException(null, null);
                }
                return this._i._inner[b];
            }
        }
        get _h() {
            return this._g;
        }
        get _j() {
            return this._i;
        }
    }
    SortedList$2.$t = /*@__PURE__*/ markType(SortedList$2, 'SortedList$2', Base.$, [/*@__PURE__*/ IEnumerable$1_$type.specialize(/*@__PURE__*/ KeyValuePair$2.$.specialize(0, 1))]);
    return SortedList$2;
})();
