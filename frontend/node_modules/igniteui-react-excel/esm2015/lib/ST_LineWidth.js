/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ValueType, Base, toNullable, typeCast, Number_$type, markStruct } from "igniteui-react-core";
import { ST_Coordinate32Unqualified } from "./ST_Coordinate32Unqualified";
import { DocCoreUtils } from "./DocCoreUtils";
/**
 * @hidden
 */
export let ST_LineWidth = /*@__PURE__*/ (() => {
    class ST_LineWidth extends ValueType {
        constructor(a, ..._rest) {
            super();
            this.a = new ST_Coordinate32Unqualified();
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        DocCoreUtils.aw(ST_LineWidth.$, ST_Coordinate32Unqualified.e(c), "value", 0, 20116800);
                        this.a = c;
                    }
                    break;
            }
        }
        equals(a) {
            let b = toNullable(ST_LineWidth.$, typeCast(ST_LineWidth.$, a));
            if (ST_LineWidth.j(b, toNullable(ST_LineWidth.$, null))) {
                return false;
            }
            return ST_LineWidth.g(this, b.getValueOrDefault());
        }
        getHashCode() {
            return Base.getHashCodeStatic(this.a);
        }
        toString() {
            return this.a.toString();
        }
        static f(a) {
            let b = ST_LineWidth.t(a);
            if (ST_LineWidth.j(b, toNullable(ST_LineWidth.$, null))) {
                return b.getValueOrDefault();
            }
            throw DocCoreUtils.n(ST_LineWidth.$, a);
        }
        static t(a) {
            return ST_LineWidth.s(ST_Coordinate32Unqualified.j(a));
        }
        static g(a, b) {
            return ST_Coordinate32Unqualified.e(a.a) == ST_Coordinate32Unqualified.e(b.a);
        }
        static h(a, b) {
            if (!a.hasValue) {
                return !b.hasValue;
            }
            else if (!b.hasValue) {
                return false;
            }
            return ST_LineWidth.g(a.value, b.value);
        }
        static i(a, b) {
            return !(ST_LineWidth.g(a, b));
        }
        static j(a, b) {
            if (!a.hasValue) {
                return b.hasValue;
            }
            else if (!b.hasValue) {
                return true;
            }
            return ST_LineWidth.i(a.value, b.value);
        }
        static d(a) {
            return new ST_LineWidth(1, a);
        }
        static s(a) {
            if (!a.hasValue) {
                return toNullable(ST_LineWidth.$, null);
            }
            return toNullable(ST_LineWidth.$, ST_LineWidth.d(a.value));
        }
        static b(a) {
            return a.a;
        }
        static r(a) {
            if (!a.hasValue) {
                return toNullable(ST_Coordinate32Unqualified.$, null);
            }
            return toNullable(ST_Coordinate32Unqualified.$, ST_LineWidth.b(a.value));
        }
        static m(a) {
            return ST_Coordinate32Unqualified.e(a.a);
        }
        static q(a) {
            if (!a.hasValue) {
                return toNullable(Number_$type, null);
            }
            return toNullable(Number_$type, ST_LineWidth.m(a.value));
        }
    }
    ST_LineWidth.$t = /*@__PURE__*/ markStruct(ST_LineWidth, 'ST_LineWidth');
    return ST_LineWidth;
})();
