/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_PageSetupOrientation_$type } from "./ST_PageSetupOrientation";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { parseUInt32_1, parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_PageSetup_Chart = /*@__PURE__*/ (() => {
    class CT_PageSetup_Chart extends Base {
        constructor() {
            super();
            this.t = toNullable(Number_$type, null);
            this.n = toNullable(Number_$type, null);
            this.r = toNullable(ST_PageSetupOrientation_$type, null);
            this.h = toNullable(Boolean_$type, null);
            this.l = toNullable(Boolean_$type, null);
            this.v = toNullable(Boolean_$type, null);
            this.p = toNullable(Number_$type, null);
            this.x = toNullable(Number_$type, null);
            this.j = toNullable(Number_$type, null);
        }
        get s() {
            return this.t;
        }
        set s(a) {
            this.t = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get u() {
            return this.v;
        }
        set u(a) {
            this.v = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get w() {
            return this.x;
        }
        set w(a) {
            this.x = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        static ac(a, b, c, d, e, f, g, h, i, j) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(ST_PageSetupOrientation_$type, null);
            e = toNullable(Boolean_$type, null);
            f = toNullable(Boolean_$type, null);
            g = toNullable(Boolean_$type, null);
            h = toNullable(Number_$type, null);
            i = toNullable(Number_$type, null);
            j = toNullable(Number_$type, null);
            for (let k of fromEnum(a.ab.u)) {
                switch (k.a.e(a.d)) {
                    case "paperSize":
                        b = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "firstPageNumber":
                        c = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "orientation":
                        d = toNullable(ST_PageSetupOrientation_$type, XmlNamespaceDefinitionBase.b(ST_PageSetupOrientation_$type, k.d));
                        break;
                    case "blackAndWhite":
                        e = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "draft":
                        f = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "useFirstPageNumber":
                        g = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "horizontalDpi":
                        h = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "verticalDpi":
                        i = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "copies":
                        j = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j
            };
        }
        static ad(a, b, c = toNullable(Boolean_$type, null), d = toNullable(Number_$type, null), e = toNullable(Boolean_$type, null), f = toNullable(Number_$type, null), g = toNullable(Number_$type, null), h = toNullable(ST_PageSetupOrientation_$type, null), i = toNullable(Number_$type, null), j = toNullable(Boolean_$type, null), k = toNullable(Number_$type, null)) {
            a.ad.p(b, "c");
            let l = null;
            let m = null;
            if (c.hasValue) {
                m = "blackAndWhite";
                l = ST_OnOff.g(c.value);
                a.ad.h(m, l);
            }
            if (d.hasValue) {
                m = "copies";
                l = d.value.toString();
                a.ad.h(m, l);
            }
            if (e.hasValue) {
                m = "draft";
                l = ST_OnOff.g(e.value);
                a.ad.h(m, l);
            }
            if (f.hasValue) {
                m = "firstPageNumber";
                l = f.value.toString();
                a.ad.h(m, l);
            }
            if (g.hasValue) {
                m = "horizontalDpi";
                l = g.value.toString();
                a.ad.h(m, l);
            }
            if (h.hasValue) {
                m = "orientation";
                l = XmlNamespaceDefinitionBase.p(ST_PageSetupOrientation_$type, h.value);
                a.ad.h(m, l);
            }
            if (i.hasValue) {
                m = "paperSize";
                l = i.value.toString();
                a.ad.h(m, l);
            }
            if (j.hasValue) {
                m = "useFirstPageNumber";
                l = ST_OnOff.g(j.value);
                a.ad.h(m, l);
            }
            if (k.hasValue) {
                m = "verticalDpi";
                l = k.value.toString();
                a.ad.h(m, l);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PageSetup_Chart.$t = /*@__PURE__*/ markType(CT_PageSetup_Chart, 'CT_PageSetup_Chart');
    return CT_PageSetup_Chart;
})();
