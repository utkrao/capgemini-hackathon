/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionFind = /*@__PURE__*/ (() => {
    class UltraCalcFunctionFind extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = 0;
            if (b > 2) {
                if (a.peek().isError) {
                    return new ExcelCalcValue(a.pop().toErrorValue());
                }
                c = a.pop()._toInt321() - 1;
                if (c < 0) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
            }
            if (a.peek().isError) {
                return new ExcelCalcValue(a.pop().toErrorValue());
            }
            let d = a.pop().toString();
            if (c > d.length - 1) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            if (a.peek().isError) {
                return new ExcelCalcValue(a.pop().toErrorValue());
            }
            let e = -1;
            let f = a.pop().toString();
            if (f.length == 0) {
                e = 1;
            }
            else {
                e = d.indexOf(f, c);
            }
            if (e != -1) {
                return new ExcelCalcValue(e + 1);
            }
            else {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
        }
        get_name() {
            return "find";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 2;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 3;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return true;
        }
    }
    UltraCalcFunctionFind.$t = /*@__PURE__*/ markType(UltraCalcFunctionFind, 'UltraCalcFunctionFind', BuiltInFunctionBase.$);
    return UltraCalcFunctionFind;
})();
