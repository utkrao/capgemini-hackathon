/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ValueType, toNullable, markStruct } from "igniteui-react-core";
import { ST_CoordinateUnqualified } from "./ST_CoordinateUnqualified";
import { ST_UniversalMeasure } from "./ST_UniversalMeasure";
import { DocCoreUtils } from "./DocCoreUtils";
import { nullableNotEquals } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ST_Coordinate = /*@__PURE__*/ (() => {
    class ST_Coordinate extends ValueType {
        constructor(a, ..._rest) {
            super();
            this.m = toNullable(ST_CoordinateUnqualified.$, null);
            this.n = toNullable(ST_UniversalMeasure.$, null);
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.m = toNullable(ST_CoordinateUnqualified.$, c);
                        this.n = toNullable(ST_UniversalMeasure.$, null);
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        this.m = toNullable(ST_CoordinateUnqualified.$, null);
                        this.n = toNullable(ST_UniversalMeasure.$, c);
                    }
                    break;
            }
        }
        l() {
            if (nullableNotEquals(this.m, null)) {
                return this.m.getValueOrDefault().f();
            }
            if (ST_UniversalMeasure.f(this.n, toNullable(ST_UniversalMeasure.$, null))) {
                return this.n.getValueOrDefault().m();
            }
            return 0;
        }
        k() {
            if (nullableNotEquals(this.m, null)) {
                return this.m.getValueOrDefault().d();
            }
            if (ST_UniversalMeasure.f(this.n, toNullable(ST_UniversalMeasure.$, null))) {
                return this.n.getValueOrDefault().k();
            }
            return 0;
        }
        static h(a) {
            let b = ST_Coordinate.s(a);
            if (nullableNotEquals(b, null)) {
                return b.getValueOrDefault();
            }
            throw DocCoreUtils.n(ST_Coordinate.$, a);
        }
        static s(a) {
            let b = ST_CoordinateUnqualified.k(a);
            if (nullableNotEquals(b, null)) {
                return toNullable(ST_Coordinate.$, ST_Coordinate.c(b.getValueOrDefault()));
            }
            let c = ST_UniversalMeasure.o(a);
            if (ST_UniversalMeasure.f(c, toNullable(ST_UniversalMeasure.$, null))) {
                return toNullable(ST_Coordinate.$, ST_Coordinate.d(c.getValueOrDefault()));
            }
            return toNullable(ST_Coordinate.$, null);
        }
        toString() {
            if (nullableNotEquals(this.m, null)) {
                return this.m.getValueOrDefault().toString();
            }
            if (ST_UniversalMeasure.f(this.n, toNullable(ST_UniversalMeasure.$, null))) {
                return this.n.getValueOrDefault().toString();
            }
            return stringEmpty();
        }
        static a(a) {
            return new ST_Coordinate(1, ST_CoordinateUnqualified.a(a));
        }
        static b(a) {
            return new ST_Coordinate(1, ST_CoordinateUnqualified.a(a));
        }
        static p(a) {
            if (!a.hasValue) {
                return toNullable(ST_Coordinate.$, null);
            }
            return toNullable(ST_Coordinate.$, ST_Coordinate.b(a.value));
        }
        static c(a) {
            return new ST_Coordinate(1, a);
        }
        static q(a) {
            if (!a.hasValue) {
                return toNullable(ST_Coordinate.$, null);
            }
            return toNullable(ST_Coordinate.$, ST_Coordinate.c(a.value));
        }
        static i(a) {
            return a.m.value;
        }
        static o(a) {
            if (!a.hasValue) {
                return toNullable(ST_CoordinateUnqualified.$, null);
            }
            return toNullable(ST_CoordinateUnqualified.$, ST_Coordinate.i(a.value));
        }
        static d(a) {
            return new ST_Coordinate(2, a);
        }
        static r(a) {
            if (!a.hasValue) {
                return toNullable(ST_Coordinate.$, null);
            }
            return toNullable(ST_Coordinate.$, ST_Coordinate.d(a.value));
        }
    }
    ST_Coordinate.$t = /*@__PURE__*/ markStruct(ST_Coordinate, 'ST_Coordinate');
    return ST_Coordinate;
})();
