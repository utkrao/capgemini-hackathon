/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ValueType, toNullable, Number_$type, markStruct } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { CultureInfo } from "igniteui-react-core";
import { parseInt64_2, tryParseInt64_2 } from "igniteui-react-core";
/**
 * @hidden
 */
export let ST_CoordinateUnqualified = /*@__PURE__*/ (() => {
    class ST_CoordinateUnqualified extends ValueType {
        constructor(a, ..._rest) {
            super();
            this.e = 0;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.e = c;
                    }
                    break;
            }
        }
        f() {
            return this.e;
        }
        d() {
            return DocCoreUtils.i(this.e);
        }
        static c(a) {
            return ST_CoordinateUnqualified.a(parseInt64_2(a, 7, CultureInfo.invariantCulture));
        }
        static k(a) {
            let b;
            if (((() => { let c = tryParseInt64_2(a, 7, CultureInfo.invariantCulture, b); b = c.p3; return c.ret; })())) {
                return toNullable(ST_CoordinateUnqualified.$, ST_CoordinateUnqualified.a(b));
            }
            return toNullable(ST_CoordinateUnqualified.$, null);
        }
        toString() {
            return this.e.toString();
        }
        static g(a) {
            return a.e;
        }
        static i(a) {
            if (!a.hasValue) {
                return toNullable(Number_$type, null);
            }
            return toNullable(Number_$type, ST_CoordinateUnqualified.g(a.value));
        }
        static a(a) {
            return new ST_CoordinateUnqualified(1, a);
        }
        static j(a) {
            if (!a.hasValue) {
                return toNullable(ST_CoordinateUnqualified.$, null);
            }
            return toNullable(ST_CoordinateUnqualified.$, ST_CoordinateUnqualified.a(a.value));
        }
    }
    ST_CoordinateUnqualified.$t = /*@__PURE__*/ markStruct(ST_CoordinateUnqualified, 'ST_CoordinateUnqualified');
    return ST_CoordinateUnqualified;
})();
