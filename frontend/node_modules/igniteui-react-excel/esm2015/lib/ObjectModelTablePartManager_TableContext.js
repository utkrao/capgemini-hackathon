/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { Filter } from "./Filter";
import { Dictionary$2 } from "igniteui-react-core";
import { SortCondition } from "./SortCondition";
import { List$1 } from "igniteui-react-core";
import { KeyValuePair$2 } from "igniteui-react-core";
/**
 * @hidden
 */
export let ObjectModelTablePartManager_TableContext = /*@__PURE__*/ (() => {
    class ObjectModelTablePartManager_TableContext extends Base {
        constructor(a) {
            super();
            this.b = null;
            this.c = null;
            this.a = null;
            this.a = a;
        }
        d(a, b) {
            if (b == null) {
                return;
            }
            if (this.b == null) {
                this.b = new Dictionary$2(Number_$type, Filter.$, 0);
            }
            this.b.item(a, b);
        }
        e(a, b) {
            if (this.c == null) {
                this.c = new List$1(KeyValuePair$2.$.specialize(Number_$type, SortCondition.$), 0);
            }
            this.c.add(new KeyValuePair$2(Number_$type, SortCondition.$, 1, a, b));
        }
        f() {
            if (this.b != null) {
                for (let a of fromEnum(this.b)) {
                    let b = a.key;
                    if (b < 0 || this.a._columns$i.count <= b) {
                        continue;
                    }
                    let c = this.a._columns$i._item(b);
                    if (c == null) {
                        continue;
                    }
                    let d = a.value;
                    d._j(c);
                    c.filter = d;
                }
            }
            if (this.c != null) {
                for (let e of fromEnum(this.c)) {
                    let f = e.key - this.a._by._w;
                    if (f < 0 || this.a._columns$i.count <= f) {
                        continue;
                    }
                    let g = this.a._columns$i._item(f);
                    this.a.sortSettings._sortConditions$i._addItem$i(g, e.value);
                }
            }
        }
    }
    ObjectModelTablePartManager_TableContext.$t = /*@__PURE__*/ markType(ObjectModelTablePartManager_TableContext, 'ObjectModelTablePartManager_TableContext');
    return ObjectModelTablePartManager_TableContext;
})();
