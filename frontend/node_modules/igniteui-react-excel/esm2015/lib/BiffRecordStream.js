/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Stream, typeCast, toNullable, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { IBiffRecordStream_$type } from "./IBiffRecordStream";
import { List$1 } from "igniteui-react-core";
import { BiffRecordStream_RecordBlockInfo } from "./BiffRecordStream_RecordBlockInfo";
import { InPlaceTransform } from "./InPlaceTransform";
import { MemoryStream } from "igniteui-react-core";
import { Buffer } from "igniteui-react-core";
import { EndOfStreamException } from "./EndOfStreamException";
import { BitConverter } from "igniteui-react-core";
import { StringElement } from "./StringElement";
import { BiffRecordStream_FormattedStringInfo } from "./BiffRecordStream_FormattedStringInfo";
import { FormattedStringElement } from "./FormattedStringElement";
import { Async } from "./Async";
import { CellAddress } from "./CellAddress";
import { CellAddressRange } from "./CellAddressRange";
import { Encoding } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Workbook } from "./Workbook";
import { FormattedStringRun } from "./FormattedStringRun";
import { ExcelUtils } from "./ExcelUtils";
import { truncate, intDivide } from "igniteui-react-core";
/**
 * @hidden
 */
export let BiffRecordStream = /*@__PURE__*/ (() => {
    class BiffRecordStream extends Stream {
        constructor(a, ..._rest) {
            super();
            this._aj = false;
            this._bi = 0;
            this._bm = null;
            this._bl = null;
            this._a4 = 0;
            this._a7 = 0;
            this._am = new List$1(BiffRecordStream_RecordBlockInfo.$, 0);
            this._aw = 0;
            this._ah = false;
            this._a8 = 0;
            this._au = 0;
            this._at = 0;
            this._w = null;
            this._ap = null;
            this._o = null;
            this._ai = false;
            this._q = null;
            this._loadManager_1 = null;
            this._saveManager = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        this._o = new Array(8);
                        this._q = c || InPlaceTransform.b;
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = [f];
                        {
                            let i = g[0];
                            this._o = new Array(8);
                            this._q = i || InPlaceTransform.b;
                        }
                        this._ai = true;
                        this._aj = true;
                        this._loadManager = c;
                        this._bm = d;
                        this._bl = e;
                        this._au = this._bb(e);
                        if (this._au == this._a1()) {
                            this._am.add(this._aa(this._bm.position, 0));
                            return;
                        }
                        let h = this._ba(this._bl);
                        this._bi = this._bm.position;
                        this._a4 = h;
                        this._am.add(this._aa(this._bm.position, h));
                        this._bm.position = this._bi + this._a4;
                        this._bw();
                        this._bm.position = this._bi;
                        this._b8(0);
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = [f];
                        {
                            let i = g[0];
                            this._o = new Array(8);
                            this._q = i || InPlaceTransform.b;
                        }
                        this._aj = true;
                        this.saveManager = c;
                        this._bm = d;
                        this._au = e;
                        this._am.add(this._aa(this._bm.position + this._ax() + this._bj(), 0));
                        this._bi = this._bm.position;
                        this._b8(0);
                    }
                    break;
            }
        }
        get parentStreamRaw() {
            return this._w;
        }
        set parentStreamRaw(a) {
            this._w = typeCast(BiffRecordStream.$, a);
        }
        writeByte(a) {
            this._write9(a);
        }
        writeByteArray(a) {
            this._write2(a);
        }
        writeDouble(a) {
            this._write10(a);
        }
        writeString(a, b) {
            this._write15(a, b);
        }
        get_canRead() {
            return true;
        }
        get canRead() {
            return this.get_canRead();
        }
        get_canSeek() {
            return true;
        }
        get canSeek() {
            return this.get_canSeek();
        }
        get_canWrite() {
            return true;
        }
        get canWrite() {
            return this.get_canWrite();
        }
        disposeCore(a) {
            try {
                if (a) {
                    this._b1();
                    if (this._q.d && this._q.c == false) {
                        for (let b = 0; b < this._am.count; b++) {
                            let c = this._am._inner[b];
                            this._bm.position = c.g;
                            this._q.g(this._bm, c.b);
                        }
                        this._q.f();
                    }
                    this._bm.position = this.endUnderlyingStreamPosition;
                    if (this._w != null) {
                        this._w._aj = true;
                    }
                }
                this._aj = false;
            }
            finally {
                super.disposeCore(a);
            }
        }
        get_length() {
            return this._a4;
        }
        get length() {
            return this.get_length();
        }
        flush() {
        }
        get_position() {
            return this._a7;
        }
        set_position(a) {
            if (this._aj == false) {
                return;
            }
            if (this._a7 == a) {
                return;
            }
            if (a < 0) {
                return;
            }
            let b = (a - this._a7);
            let c = this._a8 + b;
            this._a7 = a;
            if (this._bi == this._bm.position && 0 <= c && c < this._am._inner[this._aw].b) {
                this._a8 = c;
                this._bi += b;
                this._bm.position = this._bi;
            }
            else {
                this._b9();
            }
        }
        get position() {
            return this.get_position();
        }
        set position(a) {
            this.set_position(a);
        }
        read(a, b, c) {
            if (this._aj == false) {
                return 0;
            }
            if (a == null) {
                return 0;
            }
            if (b < 0) {
                return 0;
            }
            if (c < 0) {
                return 0;
            }
            if (b + c > a.length) {
                return 0;
            }
            let d = Math.min(c, (this._a4 - this._a7));
            if (d < 0) {
                return 0;
            }
            let e = 0;
            while (e < d) {
                e += this._bc(a, b + e, d - e);
            }
            return e;
        }
        seek(a, b) {
            switch (b) {
                case 0:
                    this.position = a;
                    break;
                case 1:
                    this.position += a;
                    break;
                case 2:
                    this.position = this.length + a;
                    break;
                default: break;
            }
            return this._a7;
        }
        setLength(a) {
            if (a == this._a4) {
                return;
            }
            if (a < this._a4) {
                return;
            }
            let b = a - this._a4;
            this._a4 = a;
            let c = false;
            let d = this._bm.position;
            while (true) {
                let e = this._am.count - 1;
                let f = this._am._inner[e];
                let g = f.b;
                if (g + b <= f.d) {
                    f.b = (g + b);
                    break;
                }
                else {
                    let h = f.d - f.b;
                    b -= h;
                    f.b = f.d;
                    this._bm.position += h;
                    this._cz(this._a3());
                    c = true;
                }
            }
            if (c) {
                this._bm.position = d;
            }
        }
        write(a, b, c) {
            if (a == null) {
                return;
            }
            if (b < 0) {
                return;
            }
            if (c < 0) {
                return;
            }
            if (b + c > a.length) {
                return;
            }
            let d = 0;
            let e = true;
            if (this._ai == false) {
                this._cx(Math.min(c, this._am._inner[0].d));
                e = false;
            }
            let f = this._a7 + c;
            if (f > this.length) {
                this.setLength(f);
            }
            while (d < c) {
                d += this._bh(a, b + d, c - d);
            }
            if (e == false) {
                this._ah = false;
            }
        }
        _addSubStream(a) {
            let b = typeCast(BiffRecordStream.$, a);
            if (this._ap == null) {
                this._ap = new List$1(IBiffRecordStream_$type, 0);
            }
            this._ap.add(a);
            b.parentStreamRaw = this;
            this._aj = false;
            this._am._inner[this._aw].h();
        }
        _appendNextRecordIfType(a) {
            if (this._af(a) == false) {
                return false;
            }
            this._bm.seek(this._am._inner[this._am.count - 1].b, 1);
            this._bw();
            return true;
        }
        _capCurrentBlock() {
            this._syncWorkbookStreamPosition();
            this._am._inner[this._aw].h();
        }
        _getDataSize(a, b, c) {
            let d = this.position;
            try {
                this.position = a;
                {
                    let e = new MemoryStream(0);
                    try {
                        let f = this._x(e, -a);
                        if (f._a4 < a) {
                            f.setLength(a);
                        }
                        f.position = a;
                        f._write15(c, b);
                        return e.position;
                    }
                    finally {
                        if (e != null) {
                            e.dispose();
                        }
                    }
                }
            }
            finally {
                this.position = d;
            }
        }
        _getStartOfRecord() {
            return this._am._inner[0].g - this._ax() - this._bj();
        }
        readByteFromBuffer(a, b) {
            if (b == a.length) {
                let c = this._by(a, b);
                a = c.p0;
                b = c.p1;
            }
            return {
                ret: a[b++],
                p0: a,
                p1: b
            };
        }
        _readBytes(a) {
            if (a < 0) {
                return new Array(0);
            }
            let b = new Array(a);
            let c = this.read(b, 0, a);
            if (c == a) {
                return b;
            }
            if (c == 0) {
                return new Array(0);
            }
            let d = new Array(c);
            Buffer.c(b, 0, d, 0, c);
            return d;
        }
        readBytesFromBuffer(a, b, c) {
            if (a < 0) {
                return {
                    ret: new Array(0),
                    p1: b,
                    p2: c
                };
            }
            let d = new Array(a);
            let e = 0;
            while (true) {
                let f = Math.min(a - e, b.length - c);
                Buffer.c(b, c, d, e, f);
                c += f;
                e += f;
                if (e == a) {
                    return {
                        ret: d,
                        p1: b,
                        p2: c
                    };
                }
                if (this.position == this.length) {
                    let g = new Array(e);
                    Buffer.c(d, 0, g, 0, e);
                    return {
                        ret: g,
                        p1: b,
                        p2: c
                    };
                }
                let h = this._by(b, c);
                b = h.p0;
                c = h.p1;
            }
        }
        _readDouble() {
            if (this.read(this._o, 0, 8) != 8) {
                throw new EndOfStreamException(null, null);
            }
            return BitConverter.o(this._o, 0);
        }
        readDoubleFromBuffer(a, b) {
            if (b + 8 > a.length) {
                let c = this._by(a, b);
                a = c.p0;
                b = c.p1;
            }
            let d = BitConverter.o(a, b);
            b += 8;
            return {
                ret: d,
                p0: a,
                p1: b
            };
        }
        _readFormattedString(a) {
            if (a != 0 && a != 1) {
                return null;
            }
            let b = a == 0 ? this.readByte() : this._readUInt16();
            return this._readFormattedString1(b);
        }
        _readFormattedString1(a) {
            let b;
            if (((() => { let c = this._tryReadFormattedString(a, b); b = c.p1; return c.ret; })()) == false) {
                throw new EndOfStreamException(null, null);
            }
            return b;
        }
        _tryReadFormattedString(a, b) {
            b = null;
            let c = this._z(a);
            if (c == null) {
                return {
                    ret: false,
                    p1: b
                };
            }
            if (c.a) {
                let d = new FormattedStringElement(1, c.c);
                this._b6(d, c.d);
                b = d;
            }
            else {
                b = new StringElement(c.c);
            }
            this._b4(c.b);
            return {
                ret: true,
                p1: b
            };
        }
        _readFormattedStringBlock(a, b) {
            if (a == 0) {
                return null;
            }
            let c = new Array(0);
            let d = 0;
            let e = this._by(c, d);
            c = e.p0;
            d = e.p1;
            let f = 0;
            return Async.f(0, a, 1, (g) => {
                b.add(((() => { let h = this.readFormattedStringFromBuffer(1, c, d); c = h.p1; d = h.p2; return h.ret; })()));
                f++;
                if (1000 < f) {
                    f = 0;
                    return false;
                }
                return true;
            });
        }
        readFormattedStringFromBuffer(a, b, c) {
            let d = a == 0 ? ((() => { let e = this.readByteFromBuffer(b, c); b = e.p0; c = e.p1; return e.ret; })()) : ((() => { let e = this._readUInt16FromBuffer(b, c); b = e.p0; c = e.p1; return e.ret; })());
            return {
                ret: ((() => { let e = this._readFormattedStringFromBuffer1(d, b, c); b = e.p1; c = e.p2; return e.ret; })()),
                p1: b,
                p2: c
            };
        }
        _readFormattedStringFromBuffer1(a, b, c) {
            let d = ((() => { let e = this._y(a, b, c); b = e.p1; c = e.p2; return e.ret; })());
            let e;
            if (d.a) {
                let f = new FormattedStringElement(1, d.c);
                let g = this._readFormattingRunsFromBuffer(f, d.d, b, c);
                b = g.p2;
                c = g.p3;
                e = f;
            }
            else {
                e = new StringElement(d.c);
            }
            let h = this._b5(b, c, d.b);
            b = h.p0;
            c = h.p1;
            return {
                ret: e,
                p1: b,
                p2: c
            };
        }
        _readFormulaCellAddressFromBuffer(a, b) {
            let c = ((() => { let d = this._readUInt16FromBuffer(a, b); a = d.p0; b = d.p1; return d.ret; })());
            let d = ((() => { let e = this._readUInt16FromBuffer(a, b); a = e.p0; b = e.p1; return e.ret; })());
            return {
                ret: BiffRecordStream._t(c, d),
                p0: a,
                p1: b
            };
        }
        _readFormulaCellAddressRangeFromBuffer(a, b) {
            let c = ((() => { let d = this._readUInt16FromBuffer(a, b); a = d.p0; b = d.p1; return d.ret; })());
            let d = ((() => { let e = this._readUInt16FromBuffer(a, b); a = e.p0; b = e.p1; return e.ret; })());
            let e = ((() => { let f = this._readUInt16FromBuffer(a, b); a = f.p0; b = f.p1; return f.ret; })());
            let f = ((() => { let g = this._readUInt16FromBuffer(a, b); a = g.p0; b = g.p1; return g.ret; })());
            let g = BiffRecordStream._t(c, e);
            let h = BiffRecordStream._t(d, f);
            return {
                ret: new CellAddressRange(1, g, h),
                p0: a,
                p1: b
            };
        }
        _ao(a, b) {
            let c = ((() => { let d = this._readUInt16FromBuffer(a, b); a = d.p0; b = d.p1; return d.ret; })());
            let d = new List$1(CellAddressRange.$, 2, c);
            for (let e = 0; e < c; e++) {
                d.add(((() => { let f = this._readFormulaCellAddressRangeFromBuffer(a, b); a = f.p0; b = f.p1; return f.ret; })()));
            }
            return {
                ret: d,
                p0: a,
                p1: b
            };
        }
        _readInt16() {
            if (this.read(this._o, 0, 2) != 2) {
                throw new EndOfStreamException(null, null);
            }
            return BitConverter.p(this._o, 0);
        }
        _readInt32() {
            if (this.read(this._o, 0, 4) != 4) {
                throw new EndOfStreamException(null, null);
            }
            return BitConverter.q(this._o, 0);
        }
        _readInt16FromBuffer(a, b) {
            if (b + 2 > a.length) {
                let c = this._by(a, b);
                a = c.p0;
                b = c.p1;
            }
            let d = BitConverter.p(a, b);
            b += 2;
            return {
                ret: d,
                p0: a,
                p1: b
            };
        }
        _readInt32FromBuffer(a, b) {
            if (b + 4 > a.length) {
                let c = this._by(a, b);
                a = c.p0;
                b = c.p1;
            }
            let d = BitConverter.q(a, b);
            b += 4;
            return {
                ret: d,
                p0: a,
                p1: b
            };
        }
        _readNextBlockType() {
            if (this._bm.position >= this._bm.length - 1) {
                return toNullable(Number_$type, null);
            }
            let a = this._bm.position;
            let b = this._bb(this._bl);
            this._bm.position = a;
            return toNullable(Number_$type, b);
        }
        _readNullTerminatedUnicodeString() {
            let a = new List$1(Number_$type, 0);
            while (true) {
                let b = this.readByte();
                let c = this.readByte();
                if (b <= 0 && c <= 0) {
                    break;
                }
                a.add(b);
                a.add(c);
            }
            return Encoding.unicode.getString(a.toArray());
        }
        _writeNullTerminatedUnicodeString(a) {
            this._write2(Encoding.unicode.getBytes1(a));
            this.writeByte(0);
            this.writeByte(0);
        }
        _readRect() {
            let a = this._readInt32();
            let b = this._readInt32();
            let c = this._readInt32();
            let d = this._readInt32();
            return new Rect(0, a, b, c - a, d - b);
        }
        _readUInt16() {
            if (this.read(this._o, 0, 2) != 2) {
                throw new EndOfStreamException(null, null);
            }
            return BitConverter.w(this._o, 0);
        }
        _readUInt16FromBuffer(a, b) {
            if (b + 2 > a.length) {
                let c = this._by(a, b);
                a = c.p0;
                b = c.p1;
            }
            let d = BitConverter.w(a, b);
            b += 2;
            return {
                ret: d,
                p0: a,
                p1: b
            };
        }
        _readUInt32() {
            if (this.read(this._o, 0, 4) != 4) {
                throw new EndOfStreamException(null, null);
            }
            return BitConverter.x(this._o, 0);
        }
        _readUInt32FromBuffer(a, b) {
            if (b + 4 > a.length) {
                let c = this._by(a, b);
                a = c.p0;
                b = c.p1;
            }
            let d = BitConverter.x(a, b);
            b += 4;
            return {
                ret: d,
                p0: a,
                p1: b
            };
        }
        _syncWorkbookStreamPosition() {
            if (this._bi == this._bm.position) {
                return;
            }
            this._b9();
        }
        _write9(a) {
            let b = new Array(1);
            b[0] = a;
            this._write2(b);
        }
        _write2(a) {
            if (a == null) {
                return;
            }
            this.write(a, 0, a.length);
        }
        _write10(a) {
            this._write2(BitConverter.c(a));
        }
        _write12(a) {
            this._write2(BitConverter.e(a));
        }
        _write11(a) {
            this._write2(BitConverter.d(a));
        }
        _write17(a) {
            this._write2(BitConverter.h(a));
        }
        _write18(a) {
            this._write2(BitConverter.i(a));
        }
        _write19(a) {
            this._write2(BitConverter.j(a));
        }
        _write14(a) {
            this._write5(new StringElement(a));
        }
        _write15(a, b) {
            this._write6(new StringElement(a), b);
        }
        _write16(a, b, c) {
            this._write7(new StringElement(a), b, c);
        }
        _write3(a) {
            let b;
            let c;
            let d = BiffRecordStream._b0(a, b, c);
            b = d.p1;
            c = d.p2;
            this._write17(b);
            this._write17(c);
        }
        _write4(a) {
            let b;
            let c;
            let d;
            let e;
            let f = BiffRecordStream._b0(a.d, b, d);
            b = f.p1;
            d = f.p2;
            let g = BiffRecordStream._b0(a.b, c, e);
            c = g.p1;
            e = g.p2;
            this._write17(b);
            this._write17(c);
            this._write17(d);
            this._write17(e);
        }
        _write1(a, b = true) {
            let c = this.position;
            this._write17(0);
            let d;
            for (d = 0; d < a.count; d++) {
                if (b == false && this._bytesAvailableInCurrentBlock < 8) {
                    break;
                }
                this._write4(a._inner[d]);
            }
            let e = this.position;
            this.position = c;
            this._write17(d);
            this.position = e;
            return d;
        }
        _write5(a) {
            this._write8(a, true);
        }
        _write8(a, b) {
            this._cy(a, 0, true, false, 0, true, b);
        }
        _write6(a, b) {
            this._write7(a, b, true);
        }
        _write7(a, b, c) {
            if (b != 0 && b != 1) {
                return;
            }
            this._cy(a, 0, true, true, b, c, true);
        }
        _write13(a) {
            let b = a.length;
            let c = this._am._inner[0];
            if (this._ai || a.length > c.d) {
                this.write(a.getBuffer(), 0, b);
                return;
            }
            let d = this._getStartOfRecord();
            if (this._bi != d || this._bi != this._bm.position) {
                this._bi = d;
                this._bm.position = d;
            }
            let e = new Array(4 + b);
            Buffer.c(BitConverter.d(this._au), 0, e, 0, 2);
            Buffer.c(BitConverter.d(b), 0, e, 2, 2);
            Buffer.c(a.getBuffer(), 0, e, 4, b);
            this._q.l(this._bm.position + 4, e, 4, b);
            this._bm.write(e, 0, e.length);
            this._ai = true;
            this._bi += e.length;
            this._a4 = this._a7 = this._a8 = c.b = b;
        }
        _writeEMURect(a) {
            this._write12(truncate(a.left));
            this._write12(truncate(a.top));
            this._write12(truncate(a.right));
            this._write12(truncate(a.bottom));
        }
        _bw() {
            let a = this._a3();
            while (true) {
                if (this._af(a) == false) {
                    break;
                }
                this._bm.position += this._am._inner[this._am.count - 1].b;
            }
        }
        _af(a) {
            if (this._bm.position >= this._bm.length - 1) {
                return false;
            }
            let b = this._bm.position;
            let c = this._bb(this._bl);
            if (this._ak(a, c) == false) {
                this._bm.position = b;
                return false;
            }
            let d = this._ba(this._bl);
            let e = this._ay(c);
            d -= e;
            this._bn.position += e;
            this._a4 += d;
            this._am.add(this._aa(this._bm.position, d));
            return true;
        }
        _ay(a) {
            switch (a) {
                case 2165: return 12;
                default: return 0;
            }
        }
        _aa(a, b) {
            return new BiffRecordStream_RecordBlockInfo(a, b, this._a2());
        }
        _b3(a, b, c) {
            a._bi = -1;
            a._a4 = this._a4;
            a._a7 = this._a7;
            a._am = new List$1(BiffRecordStream_RecordBlockInfo.$, 0);
            let d = c - this._am._inner[0].g;
            for (let e of fromEnum(this._am)) {
                a._am.add(new BiffRecordStream_RecordBlockInfo(e.g + d, e.b, e.d));
            }
            a._aw = this._aw;
            a._a8 = this._a8;
            a._au = this._au;
            a._aj = this._aj;
            a._loadManager = this._loadManager;
            a._bm = b;
            a._w = this._w;
            a.saveManager = this.saveManager;
            if (this._ap != null) {
                a._ap = new List$1(IBiffRecordStream_$type, 1, this._ap);
            }
            a._at = this._at;
            a._ai = this._ai;
        }
        _z(a) {
            if (this.position == this.length) {
                return null;
            }
            let b = this.readByte();
            let c = (b & 1) == 0;
            let d = (b & 4) == 4;
            let e = (b & 8) == 8;
            if (e && this.position + 1 >= this.length) {
                return null;
            }
            let f = e ? this._readUInt16() : 0;
            let g = 0;
            if (d) {
                if (this.position + 3 >= this.length) {
                    return null;
                }
                g = this._readInt32();
            }
            let h = c ? Workbook._g1 : Encoding.unicode;
            let i = a;
            if (c == false) {
                i *= 2;
            }
            let j = new Array(i);
            let k = this._bc(j, 0, i);
            let l = h.getString1(j, 0, k);
            if (l.length != a && this._bytesAvailableInCurrentBlock == 0) {
                let m = this._z(a - l.length);
                if (m == null) {
                    return null;
                }
                l += m.c;
            }
            let n = new BiffRecordStream_FormattedStringInfo();
            n.b = g;
            n.a = e;
            n.d = f;
            n.c = l;
            return n;
        }
        _ak(a, b) {
            return a == b;
        }
        _bh(a, b, c) {
            this._syncWorkbookStreamPosition();
            let d = this._am._inner[this._aw];
            if (this._a8 == d.d) {
                this._b2();
                d = this._am._inner[this._aw];
                this._a8 = 0;
                this._bm.position = d.g;
                this._bi = this._bm.position;
                this._ct(this._au);
            }
            let e = Math.min(c, d.d - this._a8);
            this._q.l(this._bm.position, a, b, e);
            this._bm.write(a, b, e);
            let f = (this._bm.position - this._bi);
            if (f > 0) {
                this._ah = true;
            }
            this._a8 += f;
            this._a7 += f;
            this._bi += f;
            return f;
        }
        _ct(a) {
        }
        _bv(a, b, c) {
            if (b + c > a.length) {
                let d = this._by(a, b);
                a = d.p0;
                b = d.p1;
            }
            b += c;
            return {
                p0: a,
                p1: b
            };
        }
        _bx() {
            this._cz(this._a3());
            this._bi += 4;
            this._b2();
            this._a8 = 0;
        }
        _by(a, b) {
            let c = 0;
            if (b < a.length) {
                c = a.length - b;
            }
            let d = this._am._inner[this._aw];
            let e = d.b;
            let f;
            if (this._a8 == e) {
                f = this._am._inner[this._aw + 1].b;
            }
            else {
                f = e - this._a8;
            }
            let g = new Array(c + f);
            if (c != 0) {
                Buffer.c(a, b, g, 0, c);
            }
            this._bc(g, c, f);
            b = 0;
            a = g;
            return {
                p0: a,
                p1: b
            };
        }
        static _t(a, b) {
            let c = (b & 16384) == 16384;
            let d = (b & 32768) == 32768;
            let e = (b & 255);
            return new CellAddress(1, a, d, e, c);
        }
        static _b0(a, b, c) {
            c = a.r;
            if (a.g) {
                c |= 16384;
            }
            if (a.p) {
                c |= 32768;
            }
            b = a.t;
            return {
                p1: b,
                p2: c
            };
        }
        _b1() {
            if (this._ah) {
                let a = this._bm.position;
                let b = this._am._inner[this._aw];
                this._bm.position = b.g - this._ax();
                this._cu(this._bm, b.b, false);
                this._bm.position = a;
                this._ah = false;
            }
            else if (this._ai == false) {
                this._cx(0);
            }
        }
        _a3() {
            let a = this._nextBlockTypeInternal;
            if (a == this._a1()) {
                return this._a0();
            }
            this._nextBlockTypeInternal = this._a1();
            return a;
        }
        _b2() {
            this._b1();
            this._b8(this._aw + 1);
        }
        _b4(a) {
            this.seek(a, 1);
        }
        _b5(a, b, c) {
            let d = this._bv(a, b, c);
            a = d.p0;
            b = d.p1;
            return {
                p0: a,
                p1: b
            };
        }
        _y(a, b, c) {
            let d = ((() => { let e = this.readByteFromBuffer(b, c); b = e.p0; c = e.p1; return e.ret; })());
            let e = (d & 1) == 0;
            let f = (d & 4) == 4;
            let g = (d & 8) == 8;
            let h = g ? ((() => { let i = this._readUInt16FromBuffer(b, c); b = i.p0; c = i.p1; return i.ret; })()) : 0;
            let i = 0;
            if (f) {
                i = ((() => { let j = this._readInt32FromBuffer(b, c); b = j.p0; c = j.p1; return j.ret; })());
            }
            let j = e ? Workbook._g1 : Encoding.unicode;
            let k = a;
            if (e == false) {
                k *= 2;
            }
            let l = Math.min(k, b.length - c);
            let m = j.getString1(b, c, l);
            c += l;
            if (m.length != a && c >= b.length) {
                let n = this._by(b, c);
                b = n.p0;
                c = n.p1;
                let o = ((() => { let p = this._y(a - m.length, b, c); b = p.p1; c = p.p2; return p.ret; })());
                m += o.c;
            }
            let p = new BiffRecordStream_FormattedStringInfo();
            p.b = i;
            p.a = g;
            p.d = h;
            p.c = m;
            return {
                ret: p,
                p1: b,
                p2: c
            };
        }
        _b6(a, b) {
            let c = this._loadManager._b;
            for (let d = 0; d < b; d++) {
                let e = this._readUInt16();
                let f = this._readUInt16();
                let g = new FormattedStringRun(a, e);
                g.f(c).setFontFormatting(this._loadManager._h._inner[f]);
                a._ah.add(g);
            }
        }
        _readFormattingRunsFromBuffer(a, b, c, d) {
            let e = this._loadManager;
            let f = e._b;
            for (let g = 0; g < b; g++) {
                let h = ((() => { let i = this._readUInt16FromBuffer(c, d); c = i.p0; d = i.p1; return i.ret; })());
                let i = ((() => { let j = this._readUInt16FromBuffer(c, d); c = j.p0; d = j.p1; return j.ret; })());
                if (h < a._w) {
                    let j = new FormattedStringRun(a, h);
                    j.d(f).setFontFormatting(e._h._inner[i]);
                    a._ah.add(j);
                }
            }
            return {
                p2: c,
                p3: d
            };
        }
        _bc(a, b, c) {
            if (c == 0) {
                return 0;
            }
            this._syncWorkbookStreamPosition();
            let d = this._am._inner[this._aw];
            let e = d.b;
            if (this._a8 == e) {
                if (this._aw == this._am.count - 1) {
                    return 0;
                }
                else {
                    this._b2();
                    d = this._am._inner[this._aw];
                    this._a8 = 0;
                    this._bm.position = d.g;
                    this._bi = this._bm.position;
                    e = d.b;
                }
            }
            let f = Math.min(c, e - this._a8);
            let g = this._bm.read(a, b, f);
            this._q.l(this._bi, a, b, g);
            this._a8 += g;
            this._a7 += g;
            this._bi += g;
            return f;
        }
        _b8(a) {
            this._aw = a;
            if (this._aw < this._am.count) {
                this._q.j(this._am._inner[this._aw].b);
            }
        }
        _b9() {
            this._b1();
            this._b8(0);
            let a = 0;
            while (true) {
                if (this._aw == this._am.count) {
                    this._bi = -1;
                    return;
                }
                let b = this._am._inner[this._aw];
                let c = b.b;
                let d = b.g;
                this._a8 = (this._a7 - a);
                if (this._a8 <= c) {
                    d += this._a8;
                    this._bi = d;
                    this._bm.position = this._bi;
                    return;
                }
                a += c;
                this._b2();
            }
        }
        _cx(a) {
            let b = this._getStartOfRecord();
            if (this._bi != b || this._bi != this._bm.position) {
                this._bm.position = b;
                this._bi = b;
            }
            this._cv(this._bm, this._au);
            this._cu(this._bm, a, false);
            this._ai = true;
            this._bi = this._bm.position;
        }
        _cy(a, b, c, d, e, f, g) {
            let h = typeCast(FormattedStringElement.$, a);
            let i = 0;
            let j = 0;
            if (h != null) {
                i = h._ah.count;
                if (i != 0) {
                    let k = h._ah._inner[0];
                    if (k.i == 0) {
                        let l = k.f(this.saveManager._b);
                        if (l._r.getValueOrDefault() == 0) {
                            j++;
                            i--;
                        }
                    }
                }
            }
            let m = 0;
            let n = false;
            if (c) {
                if (d) {
                    if (e == 0) {
                        m += 1;
                    }
                    else {
                        m += 2;
                    }
                }
                if (g) {
                    n = i != 0;
                }
            }
            m++;
            if (n) {
                m += 2;
            }
            let o = m;
            if (b < a._y.length) {
                if (f == false || ExcelUtils.be(a._y.substr(b, 1))) {
                    o += 2;
                }
                else {
                    o += 1;
                }
            }
            if (this._bytesAvailableInCurrentBlock < o) {
                this._syncWorkbookStreamPosition();
                this._b1();
                this._bx();
            }
            let p = this._bytesAvailableInCurrentBlock - m;
            if (c) {
                if (d) {
                    if (e == 0) {
                        this._write9(a._y.length);
                    }
                    else {
                        this._write17(a._y.length);
                    }
                }
            }
            let q = a._y.length - b;
            let r;
            let s;
            if (f) {
                r = a._y.substr(b, Math.min(q, p));
                s = true;
                if (ExcelUtils.be(r)) {
                    r = a._y.substr(b, Math.min(q, intDivide(p, 2)));
                    s = false;
                }
            }
            else {
                r = a._y.substr(b, Math.min(q, intDivide(p, 2)));
                s = false;
            }
            let t = 0;
            {
                if (s == false) {
                    t |= 1;
                }
                if (n) {
                    t |= 8;
                }
            }
            this._write9(t);
            if (n) {
                this._write17(i);
            }
            let u = s ? Workbook._g1 : Encoding.unicode;
            this._write2(u.getBytes1(r));
            let v = b + r.length;
            if (v < a._y.length) {
                this._cy(a, v, false, false, e, f, g);
            }
            if (n) {
                for (let w = j; w < h._ah.count; w++) {
                    let x = h._ah._inner[w];
                    if (this._bytesAvailableInCurrentBlock < 4) {
                        this._b1();
                        this._bx();
                    }
                    this._write17(x.i);
                    let y = 0;
                    if (x.h) {
                        let z = x.f(this.saveManager._b)._r;
                        y = z.getValueOrDefault();
                    }
                    this._write17(y);
                }
            }
        }
        _cz(a) {
            this._cv(this._bm, a);
            this._cu(this._bm, 0, false);
            this._am.add(this._aa(this._bm.position, 0));
        }
        get _an() {
            return this._am;
        }
        get _bytesAvailableInCurrentBlock() {
            this._syncWorkbookStreamPosition();
            return this._am._inner[this._aw].d - this._a8;
        }
        get endUnderlyingStreamPosition() {
            let a = this._am._inner[this._am.count - 1].e;
            if (this._ap != null) {
                for (let b of fromEnum(this._ap)) {
                    a = Math.max(a, b.endUnderlyingStreamPosition);
                }
            }
            return a;
        }
        get _loadManager() {
            return this._loadManager_1;
        }
        set _loadManager(a) {
            this._loadManager_1 = a;
        }
        get _nextBlockTypeInternal() {
            return this._at;
        }
        set _nextBlockTypeInternal(a) {
            this._at = a;
        }
        get _bn() {
            return this._bm;
        }
        get _positionInCurrentBlock() {
            return this._a8;
        }
        get _bf() {
            return this._au;
        }
        get saveManager() {
            return this._saveManager;
        }
        set saveManager(a) {
            this._saveManager = a;
        }
        get _transform() {
            return this._q;
        }
    }
    BiffRecordStream.$t = /*@__PURE__*/ markType(BiffRecordStream, 'BiffRecordStream', Stream.$, [IBiffRecordStream_$type]);
    return BiffRecordStream;
})();
