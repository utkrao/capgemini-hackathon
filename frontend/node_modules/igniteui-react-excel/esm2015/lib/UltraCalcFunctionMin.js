/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType } from "igniteui-react-core";
import { CalcFunctionUtilities } from "./CalcFunctionUtilities";
/**
 * @hidden
 */
export let UltraCalcFunctionMin = /*@__PURE__*/ (() => {
    class UltraCalcFunctionMin extends BuiltInFunctionBase {
        evaluate(a, b) {
            return CalcFunctionUtilities.d(a, b, 1229, UltraCalcFunctionMin._ak);
        }
        canParameterBeEnumerable(a) {
            return true;
        }
        static _ak(a) {
            if (a.count == 0) {
                return new ExcelCalcValue(0);
            }
            let b = a._inner[0];
            for (let c = 1; c < a.count; c++) {
                if (a._inner[c] < b) {
                    b = a._inner[c];
                }
            }
            return new ExcelCalcValue(b);
        }
        get_name() {
            return "min";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 1;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 0x7FFFFFFF;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return (b == false);
        }
    }
    UltraCalcFunctionMin.$t = /*@__PURE__*/ markType(UltraCalcFunctionMin, 'UltraCalcFunctionMin', BuiltInFunctionBase.$);
    return UltraCalcFunctionMin;
})();
