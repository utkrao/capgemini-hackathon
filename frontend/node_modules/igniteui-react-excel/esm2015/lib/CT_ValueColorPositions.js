/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_ValueColorEndPosition } from "./CT_ValueColorEndPosition";
import { CT_ValueColorMiddlePosition } from "./CT_ValueColorMiddlePosition";
import { CultureInfo } from "igniteui-react-core";
import { parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_ValueColorPositions = /*@__PURE__*/ (() => {
    class CT_ValueColorPositions extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.b = null;
            this.i = toNullable(Number_$type, null);
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        static k(a, b) {
            b = toNullable(Number_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "count":
                        b = toNullable(Number_$type, parseInt32_1(c.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static l(a, b, c = toNullable(Number_$type, null)) {
            a.ad.p(b, "cx");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "count";
                d = c.value.toString();
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1008:
                    this.c = typeCast(CT_ValueColorEndPosition.$, b);
                    break;
                case 1005:
                    this.e = typeCast(CT_ValueColorMiddlePosition.$, b);
                    break;
                case 984:
                    this.a = typeCast(CT_ValueColorEndPosition.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ValueColorPositions.$t = /*@__PURE__*/ markType(CT_ValueColorPositions, 'CT_ValueColorPositions', Base.$, [ISupportSetProperty_$type]);
    return CT_ValueColorPositions;
})();
