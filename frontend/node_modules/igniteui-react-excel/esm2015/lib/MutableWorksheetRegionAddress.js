/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { WorksheetRegionAddress } from "./WorksheetRegionAddress";
import { CellAddress } from "./CellAddress";
import { stringFormat } from "igniteui-react-core";
/**
 * @hidden
 */
export let MutableWorksheetRegionAddress = /*@__PURE__*/ (() => {
    class MutableWorksheetRegionAddress extends Base {
        constructor() {
            super();
            this.d = 0;
            this.h = 0;
            this.e = 0;
            this.i = 0;
            this.n();
        }
        get f() {
            return this.d;
        }
        get j() {
            return this.h;
        }
        get b() {
            return this.d < 0;
        }
        get c() {
            return this.d == this.e && this.h == this.i;
        }
        get g() {
            return this.e;
        }
        get k() {
            return this.i;
        }
        n() {
            this.d = this.e = -1;
            this.h = this.e = -1;
        }
        a() {
            if (this.b) {
                return WorksheetRegionAddress._b;
            }
            else {
                return new WorksheetRegionAddress(1, this.h, this.i, this.d, this.e);
            }
        }
        toString() {
            return this.m(1, true);
        }
        m(a, b) {
            let c = (((d, e, f, g, h) => CellAddress.u(d, e, void 0, g, h, void 0, void 0, void 0, f))(this.h, this.d, a, b, b));
            if (this.c) {
                return c;
            }
            return stringFormat("{0}{1}{2}", c, ":", (((i, j, k, l, m) => CellAddress.u(i, j, void 0, l, m, void 0, void 0, void 0, k))(this.i, this.e, a, b, b)));
        }
        q(n, o) {
            if (this.b) {
                this.h = this.i = n;
                this.d = this.e = o;
            }
            else {
                if (n < this.h) {
                    this.h = n;
                }
                else if (n > this.i) {
                    this.i = n;
                }
                if (o < this.d) {
                    this.d = o;
                }
                else if (o > this.e) {
                    this.e = o;
                }
            }
        }
        o(n) {
            this.q(n.o, n.m);
        }
        p(n) {
            if (this.b) {
                this.d = n._w;
                this.h = n._ac;
                this.e = n._x;
                this.i = n._ae;
            }
            else {
                this.d = Math.min(this.d, n._w);
                this.h = Math.min(this.h, n._ac);
                this.e = Math.max(this.e, n._x);
                this.i = Math.max(this.i, n._ae);
            }
        }
    }
    MutableWorksheetRegionAddress.$t = /*@__PURE__*/ markType(MutableWorksheetRegionAddress, 'MutableWorksheetRegionAddress');
    return MutableWorksheetRegionAddress;
})();
