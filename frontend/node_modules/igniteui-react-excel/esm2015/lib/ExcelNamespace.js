/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_TrueFalseBlank } from "./ST_TrueFalseBlank";
import { ST_CF_$type } from "./ST_CF";
import { ST_ObjectType_$type } from "./ST_ObjectType";
import { markType } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ExcelNamespace = /*@__PURE__*/ (() => {
    class ExcelNamespace extends XmlNamespaceDefinitionBase {
        constructor() {
            super();
        }
        s(a) {
            switch (a) {
                case 0:
                case 1: return "urn:schemas-microsoft-com:office:excel";
                default: return "urn:schemas-microsoft-com:office:excel";
            }
        }
        get_t() {
            return "x";
        }
        get t() {
            return this.get_t();
        }
        static dn(a, b, c) {
            c = ST_TrueFalseBlank.d(a.ab.ad);
            return {
                p2: c
            };
        }
        static e8(a, b, c, d) {
            a.ad.p(b, c);
            let e = ST_TrueFalseBlank.f(d);
            if (stringIsNullOrEmpty(e) == false) {
                a.ad.u(e);
            }
        }
        static cb(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.aq);
            return {
                p1: b
            };
        }
        static dw(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.aq, "x", b);
        }
        static cc(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.ar, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static dx(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.ar, "x", b);
        }
        static cd(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.as, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static dy(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.as, "x", b);
        }
        static ce(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.at, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static dz(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.at, "x", b);
        }
        static cf(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.au, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static d0(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.au, "x", b);
        }
        static cg(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.av, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static d1(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.av, "x", b);
        }
        static ch(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.aw, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static d2(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.aw, "x", b);
        }
        static ci(a, b) {
            b = XmlNamespaceDefinitionBase.b(ST_CF_$type, a.ab.ad);
            return {
                p1: b
            };
        }
        static d3(a, b) {
            a.ad.p(ExcelNamespace.ax, "x");
            a.ad.u(XmlNamespaceDefinitionBase.p(ST_CF_$type, b));
        }
        static cj(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.ay);
            return {
                p1: b
            };
        }
        static d4(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.ay, "x", b);
        }
        static ck(a, b) {
            b = 0;
            let c = a.ao("ObjectType");
            if (c != null) {
                b = XmlNamespaceDefinitionBase.b(ST_ObjectType_$type, c, b);
            }
            return {
                p1: b
            };
        }
        static d5(a, b) {
            a.ad.p(ExcelNamespace.az, "x");
            let c;
            c = XmlNamespaceDefinitionBase.p(ST_ObjectType_$type, b);
            a.ad.h("ObjectType", c);
        }
        static cl(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.a0, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static d6(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.a0, "x", b);
        }
        static cm(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.a1, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static d7(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.a1, "x", b);
        }
        static cn(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.a2);
            return {
                p1: b
            };
        }
        static d8(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.a2, "x", b);
        }
        static co(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.a3, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static d9(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.a3, "x", b);
        }
        static cp(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.a4, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static ea(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.a4, "x", b);
        }
        static cq(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.a5, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static eb(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.a5, "x", b);
        }
        static cr(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.a6, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static ec(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.a6, "x", b);
        }
        static cs(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.a7, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static ed(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.a7, "x", b);
        }
        static ct(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.a8, false);
            return {
                p1: b
            };
        }
        static ee(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.a8, "x", b);
        }
        static cu(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.a9);
            return {
                p1: b
            };
        }
        static ef(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.a9, "x", b);
        }
        static cv(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.ba, false);
            return {
                p1: b
            };
        }
        static eg(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.ba, "x", b);
        }
        static cw(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bb, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static eh(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bb, "x", b);
        }
        static cx(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.bc);
            return {
                p1: b
            };
        }
        static ei(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.bc, "x", b);
        }
        static cy(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.bd);
            return {
                p1: b
            };
        }
        static ej(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.bd, "x", b);
        }
        static cz(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.be);
            return {
                p1: b
            };
        }
        static ek(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.be, "x", b);
        }
        static c0(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bf, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static el(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bf, "x", b);
        }
        static c1(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bg, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static em(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bg, "x", b);
        }
        static c2(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.bh, false);
            return {
                p1: b
            };
        }
        static en(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.bh, "x", b);
        }
        static c3(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bi, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static eo(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bi, "x", b);
        }
        static c4(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.bj);
            return {
                p1: b
            };
        }
        static ep(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.bj, "x", b);
        }
        static c6(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bl, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static er(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bl, "x", b);
        }
        static c5(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bk, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static eq(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bk, "x", b);
        }
        static c7(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bm, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static es(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bm, "x", b);
        }
        static c8(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.bn, false);
            return {
                p1: b
            };
        }
        static et(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.bn, "x", b);
        }
        static c9(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.bo, false);
            return {
                p1: b
            };
        }
        static eu(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.bo, "x", b);
        }
        static da(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bp, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static ev(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bp, "x", b);
        }
        static db(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bq, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static ew(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bq, "x", b);
        }
        static dd(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bs, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static ey(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bs, "x", b);
        }
        static dc(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bt, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static ex(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bt, "x", b);
        }
        static de(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.bv, false);
            return {
                p1: b
            };
        }
        static ez(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.bv, "x", b);
        }
        static df(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bw, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static e0(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bw, "x", b);
        }
        static dg(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bx, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static e1(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bx, "x", b);
        }
        static dh(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.by);
            return {
                p1: b
            };
        }
        static e2(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.by, "x", b);
        }
        static di(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.bz, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static e3(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.bz, "x", b);
        }
        static dj(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.b0, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static e4(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.b0, "x", b);
        }
        static dk(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.b1, false);
            return {
                p1: b
            };
        }
        static e5(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.b1, "x", b);
        }
        static dl(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.b2);
            return {
                p1: b
            };
        }
        static e6(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.b2, "x", b);
        }
        static dm(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.b3, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static e7(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.b3, "x", b);
        }
        static dp(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.b4);
            return {
                p1: b
            };
        }
        static e9(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.b4, "x", b);
        }
        static dq(a, b) {
            b = XmlNamespaceDefinitionBase.u(a, ExcelNamespace.b5);
            return {
                p1: b
            };
        }
        static fa(a, b) {
            XmlNamespaceDefinitionBase.aj(a, ExcelNamespace.b5, "x", b);
        }
        static dr(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.b6, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static fb(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.b6, "x", b);
        }
        static dv(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.ca, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static ff(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.ca, "x", b);
        }
        static dt(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.b8, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static fd(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.b8, "x", b);
        }
        static ds(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, ExcelNamespace.b7, false);
            return {
                p1: b
            };
        }
        static fc(a, b) {
            XmlNamespaceDefinitionBase.ag(a, ExcelNamespace.b7, "x", b);
        }
        static du(a, b) {
            let c = ExcelNamespace.dn(a, ExcelNamespace.b9, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static fe(a, b) {
            ExcelNamespace.e8(a, ExcelNamespace.b9, "x", b);
        }
    }
    ExcelNamespace.$t = /*@__PURE__*/ markType(ExcelNamespace, 'ExcelNamespace', XmlNamespaceDefinitionBase.$);
    ExcelNamespace.aq = "urn:schemas-microsoft-com:office:excel" + "/Anchor";
    ExcelNamespace.ar = "urn:schemas-microsoft-com:office:excel" + "/AutoFill";
    ExcelNamespace.as = "urn:schemas-microsoft-com:office:excel" + "/AutoLine";
    ExcelNamespace.at = "urn:schemas-microsoft-com:office:excel" + "/AutoPict";
    ExcelNamespace.au = "urn:schemas-microsoft-com:office:excel" + "/AutoScale";
    ExcelNamespace.av = "urn:schemas-microsoft-com:office:excel" + "/Camera";
    ExcelNamespace.aw = "urn:schemas-microsoft-com:office:excel" + "/Cancel";
    ExcelNamespace.ax = "urn:schemas-microsoft-com:office:excel" + "/CF";
    ExcelNamespace.ay = "urn:schemas-microsoft-com:office:excel" + "/Checked";
    ExcelNamespace.az = "urn:schemas-microsoft-com:office:excel" + "/ClientData";
    ExcelNamespace.a0 = "urn:schemas-microsoft-com:office:excel" + "/ColHidden";
    ExcelNamespace.a1 = "urn:schemas-microsoft-com:office:excel" + "/Colored";
    ExcelNamespace.a2 = "urn:schemas-microsoft-com:office:excel" + "/Column";
    ExcelNamespace.a3 = "urn:schemas-microsoft-com:office:excel" + "/DDE";
    ExcelNamespace.a4 = "urn:schemas-microsoft-com:office:excel" + "/Default";
    ExcelNamespace.a5 = "urn:schemas-microsoft-com:office:excel" + "/DefaultSize";
    ExcelNamespace.a6 = "urn:schemas-microsoft-com:office:excel" + "/Disabled";
    ExcelNamespace.a7 = "urn:schemas-microsoft-com:office:excel" + "/Dismiss";
    ExcelNamespace.a8 = "urn:schemas-microsoft-com:office:excel" + "/DropLines";
    ExcelNamespace.a9 = "urn:schemas-microsoft-com:office:excel" + "/DropStyle";
    ExcelNamespace.ba = "urn:schemas-microsoft-com:office:excel" + "/Dx";
    ExcelNamespace.bb = "urn:schemas-microsoft-com:office:excel" + "/FirstButton";
    ExcelNamespace.bc = "urn:schemas-microsoft-com:office:excel" + "/FmlaLink";
    ExcelNamespace.bd = "urn:schemas-microsoft-com:office:excel" + "/FmlaMacro";
    ExcelNamespace.be = "urn:schemas-microsoft-com:office:excel" + "/FmlaRange";
    ExcelNamespace.bf = "urn:schemas-microsoft-com:office:excel" + "/Help";
    ExcelNamespace.bg = "urn:schemas-microsoft-com:office:excel" + "/Horiz";
    ExcelNamespace.bh = "urn:schemas-microsoft-com:office:excel" + "/Inc";
    ExcelNamespace.bi = "urn:schemas-microsoft-com:office:excel" + "/JustLastX";
    ExcelNamespace.bj = "urn:schemas-microsoft-com:office:excel" + "/LCT";
    ExcelNamespace.bl = "urn:schemas-microsoft-com:office:excel" + "/LockText";
    ExcelNamespace.bk = "urn:schemas-microsoft-com:office:excel" + "/Locked";
    ExcelNamespace.bo = "urn:schemas-microsoft-com:office:excel" + "/Min";
    ExcelNamespace.bm = "urn:schemas-microsoft-com:office:excel" + "/MapOCX";
    ExcelNamespace.bn = "urn:schemas-microsoft-com:office:excel" + "/Max";
    ExcelNamespace.bp = "urn:schemas-microsoft-com:office:excel" + "/MoveWithCells";
    ExcelNamespace.bq = "urn:schemas-microsoft-com:office:excel" + "/MultiLine";
    ExcelNamespace.bs = "urn:schemas-microsoft-com:office:excel" + "/NoThreeD";
    ExcelNamespace.bt = "urn:schemas-microsoft-com:office:excel" + "/NoThreeD2";
    ExcelNamespace.bv = "urn:schemas-microsoft-com:office:excel" + "/Page";
    ExcelNamespace.bw = "urn:schemas-microsoft-com:office:excel" + "/PrintObject";
    ExcelNamespace.bx = "urn:schemas-microsoft-com:office:excel" + "/RecalcAlways";
    ExcelNamespace.by = "urn:schemas-microsoft-com:office:excel" + "/Row";
    ExcelNamespace.bz = "urn:schemas-microsoft-com:office:excel" + "/RowHidden";
    ExcelNamespace.b0 = "urn:schemas-microsoft-com:office:excel" + "/SecretEdit";
    ExcelNamespace.b1 = "urn:schemas-microsoft-com:office:excel" + "/Sel";
    ExcelNamespace.b2 = "urn:schemas-microsoft-com:office:excel" + "/SelType";
    ExcelNamespace.b3 = "urn:schemas-microsoft-com:office:excel" + "/SizeWithCells";
    ExcelNamespace.b4 = "urn:schemas-microsoft-com:office:excel" + "/TextHAlign";
    ExcelNamespace.b5 = "urn:schemas-microsoft-com:office:excel" + "/TextVAlign";
    ExcelNamespace.b6 = "urn:schemas-microsoft-com:office:excel" + "/UIObj";
    ExcelNamespace.ca = "urn:schemas-microsoft-com:office:excel" + "/VScroll";
    ExcelNamespace.b7 = "urn:schemas-microsoft-com:office:excel" + "/Val";
    ExcelNamespace.b8 = "urn:schemas-microsoft-com:office:excel" + "/ValidIds";
    ExcelNamespace.b9 = "urn:schemas-microsoft-com:office:excel" + "/Visible";
    ExcelNamespace.ao = /*@__PURE__*/ new ExcelNamespace();
    return ExcelNamespace;
})();
