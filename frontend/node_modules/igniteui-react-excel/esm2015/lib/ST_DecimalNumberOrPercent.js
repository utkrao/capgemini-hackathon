/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ValueType, toNullable, typeCast, markStruct } from "igniteui-react-core";
import { ST_Percentage } from "./ST_Percentage";
import { ST_DecimalNumber } from "./ST_DecimalNumber";
import { nullableNotEquals } from "igniteui-react-core";
/**
 * @hidden
 */
export let ST_DecimalNumberOrPercent = /*@__PURE__*/ (() => {
    class ST_DecimalNumberOrPercent extends ValueType {
        constructor(a, ..._rest) {
            super();
            this.b = false;
            this.a = new ST_Percentage();
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.b = d;
                        this.a = c;
                    }
                    break;
            }
        }
        equals(a) {
            let b = toNullable(ST_DecimalNumberOrPercent.$, typeCast(ST_DecimalNumberOrPercent.$, a));
            if (ST_DecimalNumberOrPercent.f(b, toNullable(ST_DecimalNumberOrPercent.$, null))) {
                return false;
            }
            return ST_DecimalNumberOrPercent.c(this, b.getValueOrDefault());
        }
        getHashCode() {
            return this.a.getHashCode();
        }
        toString() {
            return this.k(0);
        }
        k(a) {
            if (this.b) {
                return (ST_Percentage.l(this.a)).toString();
            }
            return this.a.r(a);
        }
        i(a) {
            a = this.b;
            return {
                ret: ST_Percentage.l(this.a),
                p0: a
            };
        }
        static j(a, b) {
            let c = ST_DecimalNumber.j(a);
            if (nullableNotEquals(c, null)) {
                return toNullable(ST_DecimalNumberOrPercent.$, new ST_DecimalNumberOrPercent(1, new ST_Percentage(1, ST_DecimalNumber.f(c.getValueOrDefault())), true));
            }
            let d = ST_Percentage.q(a, b);
            if (ST_Percentage.h(d, toNullable(ST_Percentage.$, null))) {
                return toNullable(ST_DecimalNumberOrPercent.$, new ST_DecimalNumberOrPercent(1, d.getValueOrDefault(), false));
            }
            return toNullable(ST_DecimalNumberOrPercent.$, null);
        }
        static c(a, b) {
            return ST_Percentage.e(a.a, b.a);
        }
        static d(a, b) {
            if (!a.hasValue) {
                return !b.hasValue;
            }
            else if (!b.hasValue) {
                return false;
            }
            return ST_DecimalNumberOrPercent.c(a.value, b.value);
        }
        static e(a, b) {
            return !(ST_DecimalNumberOrPercent.c(a, b));
        }
        static f(a, b) {
            if (!a.hasValue) {
                return b.hasValue;
            }
            else if (!b.hasValue) {
                return true;
            }
            return ST_DecimalNumberOrPercent.e(a.value, b.value);
        }
    }
    ST_DecimalNumberOrPercent.$t = /*@__PURE__*/ markStruct(ST_DecimalNumberOrPercent, 'ST_DecimalNumberOrPercent');
    return ST_DecimalNumberOrPercent;
})();
