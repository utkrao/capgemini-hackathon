/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
import { ExcelUtils } from "./ExcelUtils";
import { stringToCharArray } from "igniteui-react-core";
import { tryParseInt64_2 } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionXBase2Dec = /*@__PURE__*/ (() => {
    class UltraCalcFunctionXBase2Dec extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = a.pop();
            if (c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let d = c.toString();
            if (d.length > this._am) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            let e;
            let f = ((() => { let g = UltraCalcFunctionXBase2Dec._al(a._w, d, this._ak, this._ao, this._an, e); e = g.p5; return g.ret; })());
            if (null != e) {
                return new ExcelCalcValue(e);
            }
            return new ExcelCalcValue(f);
        }
        get_minArgs() {
            return 1;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 1;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        static _al(a, b, c, d, e, f) {
            f = null;
            b = b.trim();
            let g = 0;
            let h = b.length;
            let i = stringToCharArray(b);
            let j = 1;
            let k = String.fromCharCode(0);
            for (let l = h - 1; l >= 0; l--) {
                let m = i[l];
                if (m == '-') {
                    continue;
                }
                let n;
                let o = ((() => { let p = tryParseInt64_2(m.toString(), 167 | 64, a, n); n = p.p3; return p.ret; })());
                if (o == false) {
                    n = m.charCodeAt(0) - 65;
                    n += 10;
                }
                if (n >= c) {
                    k = m;
                    continue;
                }
                g += n * j;
                j *= c;
            }
            if (0 != k.charCodeAt(0)) {
                f = new ExcelCalcErrorValue(4, ExcelUtils.eg("Error_InvalidNumberSystemDigit", k, b, c));
                return {
                    ret: 0,
                    p5: f
                };
            }
            if (e < g) {
                g -= (e - d + 1);
            }
            return {
                ret: g,
                p5: f
            };
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return (b == false);
        }
    }
    UltraCalcFunctionXBase2Dec.$t = /*@__PURE__*/ markType(UltraCalcFunctionXBase2Dec, 'UltraCalcFunctionXBase2Dec', BuiltInFunctionBase.$);
    return UltraCalcFunctionXBase2Dec;
})();
