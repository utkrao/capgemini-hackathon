/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { parseInt32_1, parseInt64_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_TransformEffect = /*@__PURE__*/ (() => {
    class CT_TransformEffect extends Base {
        constructor() {
            super();
            this.m = toNullable(Number_$type, null);
            this.o = toNullable(Number_$type, null);
            this.i = toNullable(Number_$type, null);
            this.k = toNullable(Number_$type, null);
            this.q = toNullable(Number_$type, null);
            this.s = toNullable(Number_$type, null);
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        static a(a) {
            let b = toNullable(Number_$type, null);
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = CT_TransformEffect.u(a, b, c, d, e, f, g);
            b = h.p1;
            c = h.p2;
            d = h.p3;
            e = h.p4;
            f = h.p5;
            g = h.p6;
            return ((() => {
                let $ret = new CT_TransformEffect();
                $ret.h = d;
                $ret.j = e;
                $ret.l = b;
                $ret.n = c;
                $ret.p = f;
                $ret.r = g;
                return $ret;
            })());
        }
        static u(a, b, c, d, e, f, g) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(Number_$type, null);
            e = toNullable(Number_$type, null);
            f = toNullable(Number_$type, null);
            g = toNullable(Number_$type, null);
            for (let h of fromEnum(a.ab.u)) {
                switch (h.a.e(a.d)) {
                    case "sx":
                        b = toNullable(Number_$type, parseInt32_1(h.d, CultureInfo.invariantCulture));
                        break;
                    case "sy":
                        c = toNullable(Number_$type, parseInt32_1(h.d, CultureInfo.invariantCulture));
                        break;
                    case "kx":
                        d = toNullable(Number_$type, parseInt32_1(h.d, CultureInfo.invariantCulture));
                        break;
                    case "ky":
                        e = toNullable(Number_$type, parseInt32_1(h.d, CultureInfo.invariantCulture));
                        break;
                    case "tx":
                        f = toNullable(Number_$type, parseInt64_1(h.d, CultureInfo.invariantCulture));
                        break;
                    case "ty":
                        g = toNullable(Number_$type, parseInt64_1(h.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g
            };
        }
        static v(a, b, c = toNullable(Number_$type, null), d = toNullable(Number_$type, null), e = toNullable(Number_$type, null), f = toNullable(Number_$type, null), g = toNullable(Number_$type, null), h = toNullable(Number_$type, null)) {
            a.ad.p(b, "a");
            let i = null;
            let j = null;
            if (c.hasValue) {
                j = "kx";
                i = c.value.toString();
                a.ad.h(j, i);
            }
            if (d.hasValue) {
                j = "ky";
                i = d.value.toString();
                a.ad.h(j, i);
            }
            if (e.hasValue) {
                j = "sx";
                i = e.value.toString();
                a.ad.h(j, i);
            }
            if (f.hasValue) {
                j = "sy";
                i = f.value.toString();
                a.ad.h(j, i);
            }
            if (g.hasValue) {
                j = "tx";
                i = g.value.toString();
                a.ad.h(j, i);
            }
            if (h.hasValue) {
                j = "ty";
                i = h.value.toString();
                a.ad.h(j, i);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TransformEffect.$t = /*@__PURE__*/ markType(CT_TransformEffect, 'CT_TransformEffect');
    return CT_TransformEffect;
})();
