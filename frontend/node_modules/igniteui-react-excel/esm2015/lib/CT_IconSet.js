/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { List$1 } from "igniteui-react-core";
import { CT_Cfvo } from "./CT_Cfvo";
import { ST_IconSetType_$type } from "./ST_IconSetType";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_IconSet = /*@__PURE__*/ (() => {
    class CT_IconSet extends Base {
        constructor() {
            super();
            this.e = null;
            this.f = toNullable(ST_IconSetType_$type, null);
            this.h = toNullable(Boolean_$type, null);
            this.d = false;
            this.g = toNullable(Boolean_$type, null);
            this.e = new List$1(CT_Cfvo.$, 0);
        }
        static j(a, b, c, d, e) {
            b = toNullable(ST_IconSetType_$type, null);
            c = toNullable(Boolean_$type, null);
            d = false;
            e = toNullable(Boolean_$type, null);
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "iconSet":
                        b = toNullable(ST_IconSetType_$type, XmlNamespaceDefinitionBase.b(ST_IconSetType_$type, f.d));
                        break;
                    case "showValue":
                        c = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    case "percent":
                        d = ST_OnOff.e(f.d);
                        break;
                    case "reverse":
                        e = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        static k(a, b, c, d, e, f) {
            a.ad.p(b, null);
            let g = null;
            let h = null;
            if (c.hasValue) {
                h = "iconSet";
                g = XmlNamespaceDefinitionBase.p(ST_IconSetType_$type, c.value);
                a.ad.h(h, g);
            }
            if (d.hasValue) {
                h = "reverse";
                g = ST_OnOff.g(d.value);
                a.ad.h(h, g);
            }
            if (e.hasValue) {
                h = "showValue";
                g = ST_OnOff.g(e.value);
                a.ad.h(h, g);
            }
            h = "percent";
            g = ST_OnOff.g(f);
            a.ad.h(h, g);
        }
        setProperty(a, b) {
            switch (a) {
                case 252:
                    this.e.add(typeCast(CT_Cfvo.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_IconSet.$t = /*@__PURE__*/ markType(CT_IconSet, 'CT_IconSet', Base.$, [ISupportSetProperty_$type]);
    return CT_IconSet;
})();
