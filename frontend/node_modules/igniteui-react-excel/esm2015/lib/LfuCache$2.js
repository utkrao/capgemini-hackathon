/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Type, markType } from "igniteui-react-core";
import { ArgumentOutOfRangeException } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { LfuCache_CacheNode$2 } from "./LfuCache_CacheNode$2";
import { EqualityComparer$1 } from "igniteui-react-core";
import { LinkedList } from "./LinkedList";
import { LfuCache_FrequencyNode$2 } from "./LfuCache_FrequencyNode$2";
/**
 * @hidden
 */
export let LfuCache$2 = /*@__PURE__*/ (() => {
    class LfuCache$2 extends Base {
        constructor($tKey, $tValue, a, b) {
            super();
            this.$tKey = null;
            this.$tValue = null;
            this.e = 0;
            this.d = null;
            this.b = null;
            this.$tKey = $tKey;
            this.$tValue = $tValue;
            this.$type = this.$type.specialize(this.$tKey, this.$tValue);
            if (b == null) {
                b = EqualityComparer$1.defaultEqualityComparerValue(this.$tKey);
            }
            this.d = new Dictionary$2(this.$tKey, LfuCache_CacheNode$2.$.specialize(this.$tKey, this.$tValue), 2, b);
            this.b = new LinkedList();
            this.f = a;
        }
        get f() {
            return this.e;
        }
        set f(a) {
            if (a <= 0) {
                throw new ArgumentOutOfRangeException(0);
            }
            this.e = a;
            for (let b = this.d.count - a; b > 0; b--) {
                this.l();
            }
        }
        get g() {
            return this.d.count;
        }
        item(a) {
            let b;
            let c;
            if (((() => { let d = this.d.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                b = c.o;
                this.j(c);
            }
            else {
                b = Type.getDefaultValue(this.$tValue);
            }
            return b;
        }
        h(a, b) {
            let c;
            if (((() => { let d = this.d.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                c.o = b;
                this.j(c);
            }
            else {
                c = new LfuCache_CacheNode$2(this.$tKey, this.$tValue);
                c.n = a;
                c.o = b;
                this.j(c);
                this.d.addItem(a, c);
                if (this.d.count > this.e) {
                    this.l();
                }
            }
        }
        i() {
            this.d.clear();
            this.b.e();
        }
        j(a) {
            let b = a.p;
            if (b == null) {
                b = this.b.d;
                if (b == null || b.o != 1) {
                    b = new LfuCache_FrequencyNode$2(this.$tKey, this.$tValue);
                    b.o = 1;
                    b.l(this.b);
                }
            }
            else {
                let c = b.f;
                if (b.n.c == b.n.d) {
                    if (c == null || c.o - 1 > b.o) {
                        b.o++;
                    }
                    else {
                        a.m();
                        b.m();
                        b = c;
                    }
                }
                else {
                    if (c == null || c.o - 1 > b.o) {
                        let d = new LfuCache_FrequencyNode$2(this.$tKey, this.$tValue);
                        d.o = b.o + 1;
                        d.h(b);
                        b = d;
                    }
                    else {
                        b = c;
                    }
                    a.m();
                }
            }
            a.p = b;
            a.j(b.n);
        }
        c(a) {
            let b;
            let c;
            b = ((() => { let d = this.d.tryGetValue(a, c); c = d.p1; return d.ret; })());
            if (b) {
                this.k(c);
            }
            return b;
        }
        k(a) {
            this.d.removeItem(a.n);
            a.m();
            let b = a.p;
            if (b.n.c == null) {
                b.m();
            }
        }
        l() {
            let a = this.b.d;
            let b = a.n.d;
            this.k(b);
        }
    }
    LfuCache$2.$t = /*@__PURE__*/ markType(LfuCache$2, 'LfuCache$2');
    return LfuCache$2;
})();
