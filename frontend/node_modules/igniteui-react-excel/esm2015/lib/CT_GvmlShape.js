/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_GvmlShapeNonVisual } from "./CT_GvmlShapeNonVisual";
import { CT_ShapeProperties_DML } from "./CT_ShapeProperties_DML";
import { CT_GvmlTextShape } from "./CT_GvmlTextShape";
import { CT_ShapeStyle } from "./CT_ShapeStyle";
import { CT_OfficeArtExtensionList } from "./CT_OfficeArtExtensionList";
/**
 * @hidden
 */
export let CT_GvmlShape = /*@__PURE__*/ (() => {
    class CT_GvmlShape extends Base {
        constructor() {
            super();
            this.b = null;
            this.h = null;
            this.d = null;
            this.j = null;
            this.f = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1106:
                    this.a = typeCast(CT_GvmlShapeNonVisual.$, b);
                    break;
                case 1570:
                    this.g = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1784:
                    this.c = typeCast(CT_GvmlTextShape.$, b);
                    break;
                case 1618:
                    this.i = typeCast(CT_ShapeStyle.$, b);
                    break;
                case 601:
                    this.e = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_GvmlShape.$t = /*@__PURE__*/ markType(CT_GvmlShape, 'CT_GvmlShape', Base.$, [ISupportSetProperty_$type]);
    return CT_GvmlShape;
})();
