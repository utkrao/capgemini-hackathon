/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
export class ExcelLocaleZhHans {
    constructor() {
        this["DefaultTotalLabel"] = "总计";
        this["Error_AnchoredReference"] = "尝试访问 {0} 作为未锚定的引用";
        this["Error_ExplicitThis"] = "{0} - 显式，不支持";
        this["Error_ExternalRange"] = "范围包含外部引用";
        this["Error_FormulaNotSupported"] = "{0} - 尝试访问不支持公式的引用中的公式";
        this["Error_Internal"] = "方法 {0} 中发生内部错误。";
        this["Error_InvalidFunction"] = "{1} 的函数 '{0}' 无效。";
        this["Error_InvalidFunctionArgCountTooFew"] = "{1} 引用的函数 '{0}' 不包含正确数量的自变量。该函数至少需要 {2} 个参数。";
        this["Error_InvalidFunctionArgCountTooMany"] = "{1} 引用的函数 '{0}' 不包含正确数量的自变量。自变量计数不得超过 {2} 个参数。";
        this["Error_InvalidNumberSystemDigit"] = "基数为 {2} 的数字系统的值 '{1}' 中遇到无效数字 '{0}'。";
        this["Error_InvalidOperand"] = "无效操作数";
        this["Error_InvalidOperatorArgCount"] = "'{0} 函数必须接受 {1} 个自变量。";
        this["Error_InvalidReference"] = "引用无效或不可用";
        this["Error_Location"] = "第 {0} 行第 {1} 行";
        this["Error_MethodNotSupported"] = "{0} 不支持 {1}。";
        this["Error_NoCurrentRangeElement"] = "无当前范围元素";
        this["Error_NullFunctionResult"] = "评估 '{0}' 返回空值。";
        this["Error_NullOperand"] = "空操作数";
        this["Error_ParseRef"] = "{0} 处引用未知。";
        this["Error_RangeFromLast"] = "fromT.Last 未设置";
        this["Error_RangeFromNull"] = "RefRange: from 为 null";
        this["Error_RangeFromRefBase"] = "RefRange: from 不是 RefBase: {0}";
        this["Error_RangeLast"] = "RefRange Validate: 最后一个元组 [{0}] != [{1}]";
        this["Error_RangeNormalizeScope"] = "RefRange Normalize: 错误范围 [{0}/{1}]";
        this["Error_RangeToNull"] = "RefRange: to 为 null";
        this["Error_RangeToRefBase"] = "RefRange: to 不是 RefBase: {0}";
        this["Error_RangeTuple"] = "RefRange Validate: 元组 [{0}] != [{1}]";
        this["Error_RangeValidateCount"] = "RefRange Validate: 从计数 {0} != 到计数 {1}";
        this["Error_ReadOnlyReference"] = "{0} - 尝试设置只读引用的值";
        this["Error_ReferenceNotEumerable"] = "{0} 不是可枚举的引用";
        this["Error_RefMalformed"] = "{0} - 引用 {1} 格式错误";
        this["Error_RP_ContainsBase"] = "RefParser.Contains - 空基类";
        this["Error_RP_ContainsTarget"] = "RefParser.Contains - 空目标";
        this["Error_RP_EmptyElement"] = "无效引用 {0}。在位置 {1} 遇到空元素。";
        this["Error_RP_EmptyReference"] = "无效引用 {0}。引用为空。";
        this["Error_RP_MalformedExtra"] = "RefParser 错误引用: 在 [{1}] 中找到多个 [{0}]";
        this["Error_RP_MalformedUnexpected"] = "RefParser 错误引用: 在[{1}] 中发现异常 [{0}]";
        this["Error_RP_MergeRelativeBase"] = "RefParser.Merge: 基数相对";
        this["Error_RP_MissingCloseParenthesis"] = "无效引用 {0}。缺少右括号。";
        this["Error_RP_MissingEndQuotes"] = "无效引用 {0}。缺少结束引号。";
        this["Error_RT_Expected"] = "RefTuple: [{1}] 中应有 [{0}]";
        this["Error_RT_InvalidScope"] = "无效范围: {0}。";
        this["Error_RT_InvalidScope_CharactersAfterClosingQuotes"] = "位置 {1} 处 {0} 范围内的右双引号后出现的字符。";
        this["Error_RT_InvalidTuple_CharactersAfterScopeEnd"] = "无效元素 {0}。范围结束后出现的字符。";
        this["Error_RT_InvalidTuple_MissingCloseParenthesis"] = "无效元素 {0}。缺少右括号。";
        this["Error_RT_InvalidTuple_MissingEndQuotes"] = "无效元素 {0}。缺少结束引号。";
        this["Error_RT_InvalidTuple_NamePortionEmpty"] = "无效元素 {0}。元素名称部分为空。";
        this["Error_RT_InvalidTuple_ScopeIndexLarge"] = "无效元素 {0}。索引 {1} 无效: {2}。";
        this["Error_RT_InvalidTuple_UnescapedCharacter"] = "在 {1} 的位置 {2} 遇到未转义的 {0} 字符。";
        this["Error_RT_NullRefName"] = "RefTuple: null RefName";
        this["Error_RT_Unexpected"] = "RefTuple: [{1}] 中的意外 [{0}]";
        this["Error_ScopeAllNotLast"] = "{0} - 全部范围必须出现在最后一个元素 {1} 中";
        this["Error_UCErrorCode_Div"] = "除以零";
        this["Error_UCErrorCode_Fail"] = "失败";
        this["Error_UCErrorCode_NA"] = "不适用";
        this["Error_UCErrorCode_Name"] = "无效名称";
        this["Error_UCErrorCode_Null"] = "空值";
        this["Error_UCErrorCode_Num"] = "函数或公式中的无效数值。";
        this["Error_UCErrorCode_Ok"] = "成功";
        this["Error_UCErrorCode_Reference"] = "引用无效或不可用";
        this["Error_UCErrorCode_Unknown"] = "无效代码";
        this["Error_UCErrorCode_Value"] = "自变量或操作数的类型不正确。";
        this["Error_UnexpectedScope"] = "{0} - 父级 {1} 的意外范围";
        this["Error_UnknownRange"] = "未知范围类型";
        this["Error_UnknownRefType"] = "{0} - 未知引用类型 {1}";
        this["Error_UnknownScope"] = "{0} - 未知范围 {1}";
        this["Error_UnresolvedExternal"] = "未解析的外部引用";
        this["Func_abs_Arg_0"] = "number";
        this["Func_abs_ArgDesc_0"] = "要获取绝对值的实数。";
        this["Func_abs_Category"] = "Math";
        this["Func_abs_CategoryURL"] = "Math";
        this["Func_abs_Desc"] = "返回某个数值的绝对值。数字的绝对值是不带符号的数字。";
        this["Func_acos_Arg_0"] = "number";
        this["Func_acos_ArgDesc_0"] = "要获取的角度的余弦值，必须为 -1 至 1。";
        this["Func_acos_Category"] = "Math";
        this["Func_acos_CategoryURL"] = "Math";
        this["Func_acos_Desc"] = "返回数字的反余弦或反余弦。反余弦是其余弦为指定数的角度。返回的角度为弧度，范围为 0 至 pi。要将结果从弧度转换为度，请乘以 180/PI()。";
        this["Func_acosh_Arg_0"] = "number";
        this["Func_acosh_ArgDesc_0"] = "查找其反双曲余弦值的大于 1 的实数。";
        this["Func_acosh_Category"] = "Math";
        this["Func_acosh_CategoryURL"] = "Math";
        this["Func_acosh_Desc"] = "返回给定数字的反双曲余弦值。反双曲余弦是双曲余弦为指定数的角度。";
        this["Func_and_Arg_0"] = "logical{0}";
        this["Func_and_ArgDesc_0"] = "逻辑值 (真或假)。";
        this["Func_and_Category"] = "Logical";
        this["Func_and_CategoryURL"] = "Logical";
        this["Func_and_Desc"] = "如果所有值均为 true，则返回 true; 如果一个或多个值均为 false，则返回 false。";
        this["Func_asin_Arg_0"] = "number";
        this["Func_asin_ArgDesc_0"] = "要获取的角度正弦，必须为 -1 至 1 弧度。";
        this["Func_asin_Category"] = "Math";
        this["Func_asin_CategoryURL"] = "Math";
        this["Func_asin_Desc"] = "返回数字的反正弦或反正弦。反正弦是其正弦为指定数的角度。返回的角度为弧度，范围为 -pi/2 至 pi/2。要以度表示反正弦，请将结果乘以 180/PI()。";
        this["Func_asinh_Arg_0"] = "number";
        this["Func_asinh_ArgDesc_0"] = "查找其反双曲正弦值的实数。";
        this["Func_asinh_Category"] = "Math";
        this["Func_asinh_CategoryURL"] = "Math";
        this["Func_asinh_Desc"] = "返回给定数字的反双曲正弦值。反双曲正弦是双曲正弦为指定数的角度。";
        this["Func_atan_Arg_0"] = "number";
        this["Func_atan_ArgDesc_0"] = "要获取的角度正切。";
        this["Func_atan_Category"] = "Math";
        this["Func_atan_CategoryURL"] = "Math";
        this["Func_atan_Desc"] = "返回数值的反正切或反正切。反正切是其正切为指定数值的角度。返回的角度为弧度，范围为 -pi/2 至 pi/2。要以度表示反正切，请将结果乘以 180/PI()。";
        this["Func_atan2_Arg_0"] = "x";
        this["Func_atan2_Arg_1"] = "y";
        this["Func_atan2_ArgDesc_0"] = "点的 x 坐标。";
        this["Func_atan2_ArgDesc_1"] = "点的 y 坐标。";
        this["Func_atan2_Category"] = "Math";
        this["Func_atan2_CategoryURL"] = "Math";
        this["Func_atan2_Desc"] = "返回指定 x 和 y 坐标的反正切或反正切。反正切是从x轴到包含原点 (0，0) 和坐标为 (x_num，y_num) 的点的线的夹角。角度以 -pi 和 pi 之间的弧度表示，不包括 -pi。";
        this["Func_atanh_Arg_0"] = "number";
        this["Func_atanh_ArgDesc_0"] = "要获取其反双曲正切值的介于 -1 和 1 之间的实数。";
        this["Func_atanh_Category"] = "Math";
        this["Func_atanh_CategoryURL"] = "Math";
        this["Func_atanh_Desc"] = "返回给定数值的反双曲正切值。反双曲正切是双曲正切为指定数的角度。";
        this["Func_avedev_Arg_0"] = "number{0}";
        this["Func_avedev_ArgDesc_0"] = "Number1，number2... 是一个或多个数值或数值引用。";
        this["Func_avedev_Category"] = "Statistical";
        this["Func_avedev_CategoryURL"] = "Statistical";
        this["Func_avedev_Desc"] = "返回所有数值平均值的平均值偏差。";
        this["Func_average_Arg_0"] = "number{0}";
        this["Func_average_ArgDesc_0"] = "一个数值或数值范围，用于与其他自变量一起求平均值。";
        this["Func_average_Category"] = "Statistical";
        this["Func_average_CategoryURL"] = "Statistical";
        this["Func_average_Desc"] = "返回一个或多个值的平均值 (算术平均值)。";
        this["Func_bin2dec_Arg_0"] = "Number";
        this["Func_bin2dec_ArgDesc_0"] = "表示二进制数的文本表达式。";
        this["Func_bin2dec_Category"] = "Engineering";
        this["Func_bin2dec_CategoryURL"] = "Engineering";
        this["Func_bin2dec_Desc"] = "返回二进制数字系统中数字的文本表示形式的十进制值。";
        this["Func_bin2hex_Arg_0"] = "Number";
        this["Func_bin2hex_Arg_1"] = "Places";
        this["Func_bin2hex_ArgDesc_0"] = "表示二进制数的文本表达式。";
        this["Func_bin2hex_ArgDesc_1"] = "表示值时使用的字符数。如果未指定，将使用表示该值的最小字符数。这允许您指定前导零。";
        this["Func_bin2hex_Category"] = "Engineering";
        this["Func_bin2hex_CategoryURL"] = "Engineering";
        this["Func_bin2hex_Desc"] = "在十六进制系统中，将表示二进制数的文本表达式转换为表示相同数的文本表达式。";
        this["Func_bin2oct_Arg_0"] = "Number";
        this["Func_bin2oct_Arg_1"] = "Places";
        this["Func_bin2oct_ArgDesc_0"] = "表示二进制数的文本表达式。";
        this["Func_bin2oct_ArgDesc_1"] = "表示值时使用的字符数。如果未指定，将使用表示该值的最小字符数。这允许您指定前导零。";
        this["Func_bin2oct_Category"] = "Engineering";
        this["Func_bin2oct_CategoryURL"] = "Engineering";
        this["Func_bin2oct_Desc"] = "在八进制数字系统中，将表示二进制数的文本表达式转换为表示相同数字的文本表达式。";
        this["Func_binomdist_Arg_0"] = "Number";
        this["Func_binomdist_Arg_1"] = "试用";
        this["Func_binomdist_Arg_2"] = "概率";
        this["Func_binomdist_Arg_3"] = "累积";
        this["Func_binomdist_ArgDesc_0"] = "试用成功的次数。";
        this["Func_binomdist_ArgDesc_1"] = "独立试验的次数。";
        this["Func_binomdist_ArgDesc_2"] = "每次试验成功的概率。";
        this["Func_binomdist_ArgDesc_3"] = "确定函数形式的逻辑值。如果为 true，则函数将返回累积分布，该累积分布是最多成功次数的概率，否则将返回概率质量，即成功次数的概率。";
        this["Func_binomdist_Category"] = "Statistical";
        this["Func_binomdist_CategoryURL"] = "Statistical";
        this["Func_binomdist_Desc"] = "返回给定的一组项目和从该组中选择的若干项目的可能组合的数量 (重复)。";
        this["Func_CategoryURL_Template"] = "ms-help://INFRAGISTICS_HELP/NetAdvantagev{2}{3}/Win/WinElements/WinCalcManager_{0}_Functions.html#FUNC_{1}";
        this["Func_ceiling_Arg_0"] = "number";
        this["Func_ceiling_Arg_1"] = "significance";
        this["Func_ceiling_ArgDesc_0"] = "要舍入的数字。";
        this["Func_ceiling_ArgDesc_1"] = "要舍入的倍数。如果省略，则假定为 1。";
        this["Func_ceiling_Category"] = "Math";
        this["Func_ceiling_CategoryURL"] = "Math";
        this["Func_ceiling_Desc"] = "返回大于或等于指定数字的最小有效倍数 (默认为 1 )。";
        this["Func_char_Arg_0"] = "charCode";
        this["Func_char_ArgDesc_0"] = "要转换为字符的数字。";
        this["Func_char_Category"] = "TextAndData";
        this["Func_char_CategoryURL"] = "Text_and_Data";
        this["Func_char_Desc"] = "返回由您的计算机字符集中的代码编号指定的字符。";
        this["Func_choose_Arg_0"] = "IndexNum";
        this["Func_choose_Arg_1"] = "Value{0}";
        this["Func_choose_ArgDesc_0"] = "从以 1 为基础的索引，到要使用的值的其余自变量。";
        this["Func_choose_ArgDesc_1"] = "可以根据 IndexNum 值选择一个值。";
        this["Func_choose_Category"] = "LookupAndReference";
        this["Func_choose_CategoryURL"] = "Lookup_And_Reference";
        this["Func_choose_Desc"] = "根据第一个自变量中的数字返回其自变量中提供的值之一。";
        this["Func_code_Arg_0"] = "text";
        this["Func_code_ArgDesc_0"] = "将评估其第一个字符的文本表达式。";
        this["Func_code_Category"] = "TextAndData";
        this["Func_code_CategoryURL"] = "Text_and_Data";
        this["Func_code_Desc"] = "返回使用计算机使用的字符集的文本表达式中第一个字符的数字代码。";
        this["Func_combin_Arg_0"] = "Number";
        this["Func_combin_Arg_1"] = "NumberChosen";
        this["Func_combin_ArgDesc_0"] = "项目数。";
        this["Func_combin_ArgDesc_1"] = "每个组合中选择的项目数。";
        this["Func_combin_Category"] = "Math";
        this["Func_combin_CategoryURL"] = "Math";
        this["Func_combin_Desc"] = "返回给定的一组项目和从该组中选择的若干项目的可能组合的数量。";
        this["Func_combina_Arg_0"] = "Number";
        this["Func_combina_Arg_1"] = "NumberChosen";
        this["Func_combina_ArgDesc_0"] = "项目数。";
        this["Func_combina_ArgDesc_1"] = "每个组合中选择的项目数。";
        this["Func_combina_Category"] = "Math";
        this["Func_combina_CategoryURL"] = "Math";
        this["Func_combina_Desc"] = "返回给定的一组项目和从该组中选择的若干项目的可能组合的数量 (重复)。";
        this["Func_complex_Arg_0"] = "RealNumber";
        this["Func_complex_Arg_1"] = "ImaginaryNumber";
        this["Func_complex_Arg_2"] = "Suffix";
        this["Func_complex_ArgDesc_0"] = "复数的实系数。";
        this["Func_complex_ArgDesc_1"] = "数字的虚数系数。";
        this["Func_complex_ArgDesc_2"] = "指定要使用的后缀。可接受的值为 \"i\" 或 \"j\"。如果省略，则使用 \"i\"。注意，后缀区分大小写; 不允许使用大写字母 \"I\" 和 \"J\"，否则会导致 #VALUE 错误。";
        this["Func_complex_Category"] = "Engineering";
        this["Func_complex_CategoryURL"] = "Engineering";
        this["Func_complex_Desc"] = "通过组合实数和虚数，以 \"x + yi\" 或 \"x + yj\" 格式返回用文本表达式表示的复数。";
        this["Func_concatenate_Arg_0"] = "text{0}";
        this["Func_concatenate_ArgDesc_0"] = "一个文本表达式或一系列文本表达式，将它们合并为一个文本表达式。";
        this["Func_concatenate_Category"] = "TextAndData";
        this["Func_concatenate_CategoryURL"] = "Text_and_Data";
        this["Func_concatenate_Desc"] = "将所有自变量合并为一个文本表达式。";
        this["Func_convert_Arg_0"] = "Number";
        this["Func_convert_Arg_1"] = "FromUnit";
        this["Func_convert_Arg_2"] = "ToUnit";
        this["Func_convert_ArgDesc_0"] = "要转换的值。";
        this["Func_convert_ArgDesc_1"] = "给出数字的单位。\r\n    \r\n重量和质量单位: \"g\" = gram; \"sg\" = 斯勒格; \"lbm\" = 磅质量 (常衡制); \"u\" = U (原子质量单位); \"ozm\" = 盎司质量 (常衡制)\r\n距离单位: \"m\" = 仪表; \"mi\" = 法定英里; \"nmi\" = 海里; \"in\" = 英寸; \"ft\" = 英尺; \"yd\" = 码; \"ang\" = 埃; \"Pica\" = Pica (1/72英寸)\r\n时间单位: \"yr\" = 明年; \"day\" = 天; \"hr\" = 小时; \"mn\" = 分钟; \"sec\" = 秒; \r\n压力单位: \"Pa\" (或 \"p\") = 帕斯卡; \"atm\" (或 \"ar\") = 大气; \"mmHg\" = 毫米汞柱\r\n力单位: \"N\" = 牛顿; \"dyn\" (或 \"dy\") = 达因; \"lbf\" = 磅力\r\n能量单位: \"J\" = 焦耳; \"e\" = 尔格; \"c\" = 热力学卡路里; \"cal\" = IT 卡路里; \"eV\" (或 \"ev\") = 电子伏特; \"HPh\" (或 \"hh\") = 马力小时; \"Wh\" (或 \"wh\") = 瓦特小时; \"flb\" = 英尺磅; \"BTU\" (或 \"btu\") = BTU\r\n功率单位: \"HP\" (或 \"h\") = 马力; \"W\" (或 \"w\") = 瓦特\r\n磁性单元: \"T\" = 特斯拉; \"ga\" = 高斯\r\n温度单位: \"C\" (或 \"cel\") = 摄氏度; F (或 \"fah\") = 华氏度; \"K\" (或 \"kel\") = 开尔文\r\n液体测量单位: \"tsp\" = 茶匙; \"tbs\" = 汤匙; \"oz\" = 液量盎司; \"cup\" = 杯; \"pt\" (或 us_pt) = 美国品脱; \"uk_pt\" =  英国品脱; \"qt\" = 夸脱; \"gal\" = 加仑; \"I\" (或 \"It\") = 升\r\n\r\n\r\n任何度量单位都可以添加以下任一前缀: exa (\"E\") = 1E+18; peta (\"P\") = 1E+15; tera (\"T\") = 1E+12; giga (\"G\") = 1E+09; mega (\"M\") = 1E+06; kilo (\"k\") = 1E+03; hecto (\"h\") = 1E+02; dekao (\"e\") = 1E+01; deci (\"d\") = 1E-01; centi (\"c\") = 1E-02; milli (\"m\") = 1E-03; micro (\"u\") = 1E-06; nano (\"n\") = 1E-09; pico (\"p\") = 1E-12; femto (\"f\") = 1E-15; atto (\"a\") = 1E-18\r\n    ";
        this["Func_convert_ArgDesc_2"] = "返回转换值的单位。\r\n    \r\n重量和质量单位: \"g\" = gram; \"sg\" = 斯勒格; \"lbm\" = 磅质量 (常衡制); \"u\" = U (原子质量单位); \"ozm\" = 盎司质量 (常衡制)\r\n距离单位: \"m\" = 仪表; \"mi\" = 法定英里; \"nmi\" = 海里; \"in\" = 英寸; \"ft\" = 英尺; \"yd\" = 码; \"ang\" = 埃; \"Pica\" = Pica (1/72英寸)\r\n时间单位: \"yr\" = 明年; \"day\" = 天; \"hr\" = 小时; \"mn\" = 分钟; \"sec\" = 秒; \r\n压力单位: \"Pa\" (或 \"p\") = 帕斯卡; \"atm\" (或 \"ar\") = 大气; \"mmHg\" = 毫米汞柱\r\n力单位: \"N\" = 牛顿; \"dyn\" (或 \"dy\") = 达因; \"lbf\" = 磅力\r\n能量单位: \"J\" = 焦耳; \"e\" = 尔格; \"c\" = 热力学卡路里; \"cal\" = IT 卡路里; \"eV\" (或 \"ev\") = 电子伏特; \"HPh\" (或 \"hh\") = 马力小时; \"Wh\" (或 \"wh\") = 瓦特小时; \"flb\" = 英尺磅; \"BTU\" (或 \"btu\") = BTU\r\n功率单位: \"HP\" (或 \"h\") = 马力; \"W\" (或 \"w\") = 瓦特\r\n磁性单元: \"T\" = 特斯拉; \"ga\" = 高斯\r\n温度单位: \"C\" (或 \"cel\") = 摄氏度; F (或 \"fah\") = 华氏度; \"K\" (或 \"kel\") = 开尔文\r\n液体测量单位: \"tsp\" = 茶匙; \"tbs\" = 汤匙; \"oz\" = 液量盎司; \"cup\" = 杯; \"pt\" (或 us_pt) = 美国品脱; \"uk_pt\" =  英国品脱; \"qt\" = 夸脱; \"gal\" = 加仑; \"I\" (或 \"It\") = 升\r\n\r\n\r\n任何度量单位都可以添加以下任一前缀: exa (\"E\") = 1E+18; peta (\"P\") = 1E+15; tera (\"T\") = 1E+12; giga (\"G\") = 1E+09; mega (\"M\") = 1E+06; kilo (\"k\") = 1E+03; hecto (\"h\") = 1E+02; dekao (\"e\") = 1E+01; deci (\"d\") = 1E-01; centi (\"c\") = 1E-02; milli (\"m\") = 1E-03; micro (\"u\") = 1E-06; nano (\"n\") = 1E-09; pico (\"p\") = 1E-12; femto (\"f\") = 1E-15; atto (\"a\") = 1E-18\r\n    ";
        this["Func_convert_Category"] = "Engineering";
        this["Func_convert_CategoryURL"] = "Engineering";
        this["Func_convert_Desc"] = "将值从一种测量系统转换为另一种测量系统，例如米至英寸或小时至秒。";
        this["Func_cos_Arg_0"] = "number";
        this["Func_cos_ArgDesc_0"] = "求取其余弦的弧度角。";
        this["Func_cos_Category"] = "Math";
        this["Func_cos_CategoryURL"] = "Math";
        this["Func_cos_Desc"] = "返回给定角度的余弦值。";
        this["Func_cosh_Arg_0"] = "number";
        this["Func_cosh_ArgDesc_0"] = "查找其双曲余弦值的实数。";
        this["Func_cosh_Category"] = "Math";
        this["Func_cosh_CategoryURL"] = "Math";
        this["Func_cosh_Desc"] = "返回数字的双曲余弦值。";
        this["Func_count_Arg_0"] = "value{0}";
        this["Func_count_ArgDesc_0"] = "可能包含数字的引用或引用范围。";
        this["Func_count_Category"] = "Statistical";
        this["Func_count_CategoryURL"] = "Statistical";
        this["Func_count_Desc"] = "计算包含数字的引用的数量。";
        this["Func_counta_Arg_0"] = "value{0}";
        this["Func_counta_ArgDesc_0"] = "可能包含数字的引用或引用范围。";
        this["Func_counta_Category"] = "Statistical";
        this["Func_counta_CategoryURL"] = "Statistical";
        this["Func_counta_Desc"] = "计算非空白引用的数量。";
        this["Func_critbinom_Arg_0"] = "试用";
        this["Func_critbinom_Arg_1"] = "概率";
        this["Func_critbinom_Arg_2"] = "Alpha";
        this["Func_critbinom_ArgDesc_0"] = "独立试验的次数。";
        this["Func_critbinom_ArgDesc_1"] = "每次试验成功的概率。";
        this["Func_critbinom_ArgDesc_2"] = "标准值。";
        this["Func_critbinom_Category"] = "Statistical";
        this["Func_critbinom_CategoryURL"] = "Statistical";
        this["Func_critbinom_Desc"] = "返回累积二项式分布大于或等于标准值的最小值。";
        this["Func_date_Arg_0"] = "年";
        this["Func_date_Arg_1"] = "月";
        this["Func_date_Arg_2"] = "日";
        this["Func_date_ArgDesc_0"] = "表示年份的数字。";
        this["Func_date_ArgDesc_1"] = "一个数字，表示一年中的月份。";
        this["Func_date_ArgDesc_2"] = "一个数字，表示当月的日期。";
        this["Func_date_Category"] = "DateAndTime";
        this["Func_date_CategoryURL"] = "Date_and_Time";
        this["Func_date_Desc"] = "返回代表特定日期的序列号。";
        this["Func_dateadd_Arg_0"] = "interval";
        this["Func_dateadd_Arg_1"] = "number";
        this["Func_dateadd_Arg_2"] = "date";
        this["Func_dateadd_ArgDesc_0"] = "表示要添加的时间间隔的文本表达式。\r\nd = 天\r\ny = 年\r\nh = 小时\r\nn = 分钟\r\nm = 月\r\nq = 季度\r\ns = 秒\r\nw = 周\r\nww = 日历周\r\nyyyy = 年\r\n";
        this["Func_dateadd_ArgDesc_1"] = "要添加的间隔数。该值可以为正值 (以获取将来的 DateTime) 或为负值 (以获取过去的 DateTime)。当间隔指定小时，分钟或秒时，它可以包含小数部分。对于其他间隔值，将忽略 Number 的任何小数部分。";
        this["Func_dateadd_ArgDesc_2"] = "要添加间隔的 date。";
        this["Func_dateadd_Category"] = "DateAndTime";
        this["Func_dateadd_CategoryURL"] = "Date_and_Time";
        this["Func_dateadd_Desc"] = "返回已添加指定间隔的日期。";
        this["Func_datediff_Arg_0"] = "interval";
        this["Func_datediff_Arg_1"] = "date1";
        this["Func_datediff_Arg_2"] = "date2";
        this["Func_datediff_ArgDesc_0"] = "表示时间间隔的文本表达式，用作 date1 和 date2 之差的单位。\r\nd = 天\r\ny = 天\r\nh = 小时\r\nn = 分钟\r\nm = 月\r\nq = 季度\r\ns = 秒\r\nw = 周\r\nww = 日历周\r\nyyyy = 年\r\n";
        this["Func_datediff_ArgDesc_1"] = "差分计算中使用的第一个日期。";
        this["Func_datediff_ArgDesc_2"] = "差分计算中使用的第二个日期。";
        this["Func_datediff_Category"] = "DateAndTime";
        this["Func_datediff_CategoryURL"] = "Date_and_Time";
        this["Func_datediff_Desc"] = "返回一个值，该值指示两个 DateTime 值之间的间隔数。";
        this["Func_datevalue_Arg_0"] = "date_text";
        this["Func_datevalue_ArgDesc_0"] = "表示日期的文本表达式。";
        this["Func_datevalue_Category"] = "DateAndTime";
        this["Func_datevalue_CategoryURL"] = "Date_and_Time";
        this["Func_datevalue_Desc"] = "返回指定日期文本的日期值。";
        this["Func_day_Arg_0"] = "Date_value";
        this["Func_day_ArgDesc_0"] = "用于获取日期的日期值。";
        this["Func_day_Category"] = "DateAndTime";
        this["Func_day_CategoryURL"] = "Date_and_Time";
        this["Func_day_Desc"] = "返回日期值 (某月某天)。";
        this["Func_days360_Arg_0"] = "start_date";
        this["Func_days360_Arg_1"] = "end_date";
        this["Func_days360_Arg_2"] = "method";
        this["Func_days360_ArgDesc_0"] = "天数范围的开始日期。如果在结束日期之后，函数将返回负数。";
        this["Func_days360_ArgDesc_1"] = "天数范围的结束日期。如果在开始日期之前，该函数将返回负数。";
        this["Func_days360_ArgDesc_2"] = "一个逻辑值，用于指定在计算中使用 US (false) 还是 European (true) 方法。";
        this["Func_days360_Category"] = "DateAndTime";
        this["Func_days360_CategoryURL"] = "Date_and_Time";
        this["Func_days360_Desc"] = "返回 360 天年份中两个日期之间的天数。";
        this["Func_db_Arg_0"] = "cost";
        this["Func_db_Arg_1"] = "salvage";
        this["Func_db_Arg_2"] = "life";
        this["Func_db_Arg_3"] = "period";
        this["Func_db_Arg_4"] = "month";
        this["Func_db_ArgDesc_0"] = "资产的初始成本。";
        this["Func_db_ArgDesc_1"] = "折旧结束时的值 (有时称为资产的残值)。";
        this["Func_db_ArgDesc_2"] = "资产折旧的期数 (有时称为资产的使用寿命)。";
        this["Func_db_ArgDesc_3"] = "计算折旧的期间。周期必须使用与寿命相同的单位。";
        this["Func_db_ArgDesc_4"] = "第一年的月数。如果省略 month，则假定为 12。";
        this["Func_db_Category"] = "Financial";
        this["Func_db_CategoryURL"] = "Financial";
        this["Func_db_Desc"] = "使用固定递减余额法返回指定期间内资产的折旧。";
        this["Func_dbnull_Category"] = "Information";
        this["Func_dbnull_CategoryURL"] = "Information";
        this["Func_dbnull_Desc"] = "返回表示不存在的值的信息。";
        this["Func_ddb_Arg_0"] = "cost";
        this["Func_ddb_Arg_1"] = "salvage";
        this["Func_ddb_Arg_2"] = "life";
        this["Func_ddb_Arg_3"] = "period";
        this["Func_ddb_Arg_4"] = "factor";
        this["Func_ddb_ArgDesc_0"] = "资产的初始成本。";
        this["Func_ddb_ArgDesc_1"] = "折旧结束时的值 (有时称为资产的残值)。";
        this["Func_ddb_ArgDesc_2"] = "资产折旧的期数 (有时称为资产的使用寿命)。";
        this["Func_ddb_ArgDesc_3"] = "计算折旧的期间。周期必须使用与寿命相同的单位。";
        this["Func_ddb_ArgDesc_4"] = "余额下降的速率。如果省略 factor，则假定为 2 (双倍余额递减法)。";
        this["Func_ddb_Category"] = "Financial";
        this["Func_ddb_CategoryURL"] = "Financial";
        this["Func_ddb_Desc"] = "使用双倍余额递减法或指定的其他方法返回指定期间内资产的折旧。";
        this["Func_dec2bin_Arg_0"] = "Number";
        this["Func_dec2bin_Arg_1"] = "Places";
        this["Func_dec2bin_ArgDesc_0"] = "要转换的十进制值。";
        this["Func_dec2bin_ArgDesc_1"] = "表示值时使用的字符数。如果未指定 places，将使用表示该值所需的最少字符数。这允许您指定前导零。";
        this["Func_dec2bin_Category"] = "Engineering";
        this["Func_dec2bin_CategoryURL"] = "Engineering";
        this["Func_dec2bin_Desc"] = "返回将指定十进制值表示为二进制数的文本表达式。";
        this["Func_dec2hex_Arg_0"] = "Number";
        this["Func_dec2hex_Arg_1"] = "Places";
        this["Func_dec2hex_ArgDesc_0"] = "要转换的十进制值。";
        this["Func_dec2hex_ArgDesc_1"] = "表示值时使用的字符数。如果未指定 places，将使用表示该值所需的最少字符数。这允许您指定前导零。";
        this["Func_dec2hex_Category"] = "Engineering";
        this["Func_dec2hex_CategoryURL"] = "Engineering";
        this["Func_dec2hex_Desc"] = "返回将指定十进制值表示为十六进制数的文本表达式。";
        this["Func_dec2oct_Arg_0"] = "Number";
        this["Func_dec2oct_Arg_1"] = "Places";
        this["Func_dec2oct_ArgDesc_0"] = "要转换的十进制值。";
        this["Func_dec2oct_ArgDesc_1"] = "表示值时使用的字符数。如果未指定 places，将使用表示该值所需的最少字符数。这允许您指定前导零。";
        this["Func_dec2oct_Category"] = "Engineering";
        this["Func_dec2oct_CategoryURL"] = "Engineering";
        this["Func_dec2oct_Desc"] = "返回将指定十进制值表示为八进制数的文本表达式。";
        this["Func_degrees_Arg_0"] = "Radians";
        this["Func_degrees_ArgDesc_0"] = "弧度值将转换为度。";
        this["Func_degrees_Category"] = "Math";
        this["Func_degrees_CategoryURL"] = "Math";
        this["Func_degrees_Desc"] = "将弧度转换为度。";
        this["Func_delta_Arg_0"] = "Number1";
        this["Func_delta_Arg_1"] = "Number2";
        this["Func_delta_ArgDesc_0"] = "要比较的第一个数字。";
        this["Func_delta_ArgDesc_1"] = "要比较的第二个数字。如果未指定，则假定为零。";
        this["Func_delta_Category"] = "Engineering";
        this["Func_delta_CategoryURL"] = "Engineering";
        this["Func_delta_Desc"] = "比较两个数字，如果相等则返回 1，否则返回 0。";
        this["Func_dollarde_Arg_0"] = "FractionDollarAmount";
        this["Func_dollarde_Arg_1"] = "Fraction";
        this["Func_dollarde_ArgDesc_0"] = "表示为分数的美元金额。";
        this["Func_dollarde_ArgDesc_1"] = "用作分数分母的值。如果该值不是整数，将被截断。";
        this["Func_dollarde_Category"] = "Financial";
        this["Func_dollarde_CategoryURL"] = "Financial";
        this["Func_dollarde_Desc"] = "将以分数表示的美元金额转换为以小数表示的美元金额。";
        this["Func_dollarfr_Arg_0"] = "DecimalDollarAmount";
        this["Func_dollarfr_Arg_1"] = "Fraction";
        this["Func_dollarfr_ArgDesc_0"] = "表示为小数的美元金额。";
        this["Func_dollarfr_ArgDesc_1"] = "用作分数分母的值。如果该值不是整数，将被截断。";
        this["Func_dollarfr_Category"] = "Financial";
        this["Func_dollarfr_CategoryURL"] = "Financial";
        this["Func_dollarfr_Desc"] = "将以小数表示的美元金额转换为以分数表示的美元金额。";
        this["Func_edate_Arg_0"] = "date";
        this["Func_edate_Arg_1"] = "numberOfMonths";
        this["Func_edate_ArgDesc_0"] = "开始日期。";
        this["Func_edate_ArgDesc_1"] = "转换日期的月数。正数表示开始日期之后的日期。负数表示开始日期之前的日期。";
        this["Func_edate_Category"] = "DateAndTime";
        this["Func_edate_CategoryURL"] = "DateAndTime";
        this["Func_edate_Desc"] = "返回日期，它是起始日期之前或之后指定的月数。";
        this["Func_eomonth_Arg_0"] = "date";
        this["Func_eomonth_Arg_1"] = "numberOfMonths";
        this["Func_eomonth_ArgDesc_0"] = "开始日期。";
        this["Func_eomonth_ArgDesc_1"] = "转换日期的月数。正数表示开始日期之后的日期。负数表示开始日期之前的日期。";
        this["Func_eomonth_Category"] = "DateAndTime";
        this["Func_eomonth_CategoryURL"] = "DateAndTime";
        this["Func_eomonth_Desc"] = "返回月末的日期，该日期是开始日期之前或之后指定的月数。";
        this["Func_errortype_Arg_0"] = "error_value";
        this["Func_errortype_ArgDesc_0"] = "应找到其标识号的错误值。";
        this["Func_errortype_Category"] = "Information";
        this["Func_errortype_CategoryURL"] = "Information";
        this["Func_errortype_Desc"] = "返回与错误值对应的数字。";
        this["Func_even_Arg_0"] = "number";
        this["Func_even_ArgDesc_0"] = "要取整的值。";
        this["Func_even_Category"] = "Math";
        this["Func_even_CategoryURL"] = "Math";
        this["Func_even_Desc"] = "将正数向上取整，负数向下取整至最接近的偶数整数。";
        this["Func_exp_Arg_0"] = "number";
        this["Func_exp_ArgDesc_0"] = "对 e 求乘方的指数。";
        this["Func_exp_Category"] = "Math";
        this["Func_exp_CategoryURL"] = "Math";
        this["Func_exp_Desc"] = "返回 e 的指定数值的次幂。常数 e 等于 2.71828182845904。";
        this["Func_fact_Arg_0"] = "Number";
        this["Func_fact_ArgDesc_0"] = "将计算其阶乘的正数。";
        this["Func_fact_Category"] = "Math";
        this["Func_fact_CategoryURL"] = "Math";
        this["Func_fact_Desc"] = "返回数值的阶乘。";
        this["Func_factdouble_Arg_0"] = "Number";
        this["Func_factdouble_ArgDesc_0"] = "将计算其双阶乘的正数。";
        this["Func_factdouble_Category"] = "Math";
        this["Func_factdouble_CategoryURL"] = "Math";
        this["Func_factdouble_Desc"] = "返回数字的双阶乘。";
        this["Func_false_Category"] = "Logical";
        this["Func_false_CategoryURL"] = "Logical";
        this["Func_false_Desc"] = "返回逻辑值 false。";
        this["Func_find_Arg_0"] = "find_text";
        this["Func_find_Arg_1"] = "within_text";
        this["Func_find_Arg_2"] = "start_num";
        this["Func_find_ArgDesc_0"] = "要查找的文本。";
        this["Func_find_ArgDesc_1"] = "包含要查找文本的文本。";
        this["Func_find_ArgDesc_2"] = "从以 1 为基础的索引字符开始搜索。如果省略，则假定为 1。";
        this["Func_find_Category"] = "TextAndData";
        this["Func_find_CategoryURL"] = "Text_and_Data";
        this["Func_find_Desc"] = "返回一个文本表达式在另一个文本表达式中的起始位置，区分大小写。";
        this["Func_fixed_Arg_0"] = "number";
        this["Func_fixed_Arg_1"] = "decimals";
        this["Func_fixed_Arg_2"] = "no_commas";
        this["Func_fixed_ArgDesc_0"] = "要舍入并转换为文本的数字。";
        this["Func_fixed_ArgDesc_1"] = "返回值中小数点右边的位数。如果此值为负，则\"数字\"四舍五入到小数点左边。默认值为 2。";
        this["Func_fixed_ArgDesc_2"] = "如果逗号不应该在返回值中，则为 true。如果省略，则假定为 false。";
        this["Func_fixed_Category"] = "TextAndData";
        this["Func_fixed_CategoryURL"] = "Text_and_Data";
        this["Func_fixed_Desc"] = "将数值四舍五入至指定的小数位数，并以带或不带逗号的文本形式返回结果。";
        this["Func_floor_Arg_0"] = "number";
        this["Func_floor_Arg_1"] = "significance";
        this["Func_floor_ArgDesc_0"] = "要舍入的数字。";
        this["Func_floor_ArgDesc_1"] = "要舍入的倍数。如果省略，则假定为 1。";
        this["Func_floor_Category"] = "Math";
        this["Func_floor_CategoryURL"] = "Math";
        this["Func_floor_Desc"] = "返回小于或等于给定数字的最大有效倍数 (默认为 1)。";
        this["Func_fv_Arg_0"] = "rate";
        this["Func_fv_Arg_1"] = "nper";
        this["Func_fv_Arg_2"] = "pmt";
        this["Func_fv_Arg_3"] = "pv";
        this["Func_fv_Arg_4"] = "type";
        this["Func_fv_ArgDesc_0"] = "每期利率。";
        this["Func_fv_ArgDesc_1"] = "年金的总支付期数。";
        this["Func_fv_ArgDesc_2"] = "每期支付的金额，在年金的使用期限内无法更改。";
        this["Func_fv_ArgDesc_3"] = "现值，或一系列未来付款累积和的当前值。如果省略，则假定为零。";
        this["Func_fv_ArgDesc_4"] = "数字 0 或 1，表示应在期末 (0，默认值) 还是开始 (1) 支付。";
        this["Func_fv_Category"] = "Financial";
        this["Func_fv_CategoryURL"] = "Financial";
        this["Func_fv_Desc"] = "返回基于周期的投资的终值。";
        this["Func_gcd_Arg_0"] = "number{0}";
        this["Func_gcd_ArgDesc_0"] = "整数值。非整数值将被截断。";
        this["Func_gcd_Category"] = "Math";
        this["Func_gcd_CategoryURL"] = "Math";
        this["Func_gcd_Desc"] = "返回一个或多个整数值的最大公约数。";
        this["Func_gestep_Arg_0"] = "Number1";
        this["Func_gestep_Arg_1"] = "Step";
        this["Func_gestep_ArgDesc_0"] = "要比较的第一个数字。";
        this["Func_gestep_ArgDesc_1"] = "要比较的第二个数字。如果未指定，则假定为零。";
        this["Func_gestep_Category"] = "Engineering";
        this["Func_gestep_CategoryURL"] = "Engineering";
        this["Func_gestep_Desc"] = "比较两个数字，如果第一个数字大于或等于第二个数字，则返回一个，否则返回零。";
        this["Func_hex2bin_Arg_0"] = "Number";
        this["Func_hex2bin_Arg_1"] = "Places";
        this["Func_hex2bin_ArgDesc_0"] = "表示十六进制数的文本表达式。";
        this["Func_hex2bin_ArgDesc_1"] = "表示值时使用的字符数。如果未指定，将使用表示该值的最小字符数。这允许您指定前导零。";
        this["Func_hex2bin_Category"] = "Engineering";
        this["Func_hex2bin_CategoryURL"] = "Engineering";
        this["Func_hex2bin_Desc"] = "在二进制数系统中，将表示十六进制数字的文本表达式转换为表示相同数字的文本表达式。";
        this["Func_hex2dec_Arg_0"] = "Number";
        this["Func_hex2dec_ArgDesc_0"] = "表示十六进制数的文本表达式。";
        this["Func_hex2dec_Category"] = "Engineering";
        this["Func_hex2dec_CategoryURL"] = "Engineering";
        this["Func_hex2dec_Desc"] = "返回十六进制数字系统中数字文本表示形式的十进制值。";
        this["Func_hex2oct_Arg_0"] = "Number";
        this["Func_hex2oct_Arg_1"] = "Places";
        this["Func_hex2oct_ArgDesc_0"] = "表示十六进制数的文本表达式。";
        this["Func_hex2oct_ArgDesc_1"] = "表示值时使用的字符数。如果未指定，将使用表示该值的最小字符数。这允许您指定前导零。";
        this["Func_hex2oct_Category"] = "Engineering";
        this["Func_hex2oct_CategoryURL"] = "Engineering";
        this["Func_hex2oct_Desc"] = "在八进制系统中，将表示十六进制数字的文本表达式转换为表示相同数字的文本表达式。";
        this["Func_hour_Arg_0"] = "Time_value";
        this["Func_hour_ArgDesc_0"] = "从中获取小时的时间值。";
        this["Func_hour_Category"] = "DateAndTime";
        this["Func_hour_CategoryURL"] = "Date_and_Time";
        this["Func_hour_Desc"] = "返回时间值的小时。";
        this["Func_if_Arg_0"] = "logical_test";
        this["Func_if_Arg_1"] = "value_if_true";
        this["Func_if_Arg_2"] = "value_if_false";
        this["Func_if_ArgDesc_0"] = "要测试的条件。";
        this["Func_if_ArgDesc_1"] = "条件评定为 true 时的结果。";
        this["Func_if_ArgDesc_2"] = "条件评定为 false 时的结果。如果省略，则假定为逻辑值 false。";
        this["Func_if_Category"] = "Logical";
        this["Func_if_CategoryURL"] = "Logical";
        this["Func_if_Desc"] = "如果指定条件的计算结果为 true，则返回一个值; 如果指定的条件计算结果为 false，则返回另一个值。";
        this["Func_iferror_Arg_0"] = "value";
        this["Func_iferror_Arg_1"] = "value_if_error";
        this["Func_iferror_ArgDesc_0"] = "无错误时使用的值。";
        this["Func_iferror_ArgDesc_1"] = "如果值参数为错误，则使用该值。";
        this["Func_iferror_Category"] = "Logical";
        this["Func_iferror_CategoryURL"] = "Logical";
        this["Func_iferror_Desc"] = "返回两个值中的一个，具体取决于第一个值是否为错误。";
        this["Func_imabs_Arg_0"] = "ComplexNumber";
        this["Func_imabs_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imabs_Category"] = "Engineering";
        this["Func_imabs_CategoryURL"] = "Engineering";
        this["Func_imabs_Desc"] = "返回复数的绝对值。";
        this["Func_imaginary_Arg_0"] = "ComplexNumber";
        this["Func_imaginary_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imaginary_Category"] = "Engineering";
        this["Func_imaginary_CategoryURL"] = "Engineering";
        this["Func_imaginary_Desc"] = "返回复数的虚数系数。";
        this["Func_imargument_Arg_0"] = "ComplexNumber";
        this["Func_imargument_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imargument_Category"] = "Engineering";
        this["Func_imargument_CategoryURL"] = "Engineering";
        this["Func_imargument_Desc"] = "返回自变量 theta，以弧度表示的角度。";
        this["Func_imconjugate_Arg_0"] = "ComplexNumber";
        this["Func_imconjugate_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imconjugate_Category"] = "Engineering";
        this["Func_imconjugate_CategoryURL"] = "Engineering";
        this["Func_imconjugate_Desc"] = "返回复数的共轭。";
        this["Func_imcos_Arg_0"] = "ComplexNumber";
        this["Func_imcos_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imcos_Category"] = "Engineering";
        this["Func_imcos_CategoryURL"] = "Engineering";
        this["Func_imcos_Desc"] = "返回复数的余弦值。";
        this["Func_imdiv_Arg_0"] = "Dividend";
        this["Func_imdiv_Arg_1"] = "Divisor";
        this["Func_imdiv_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imdiv_ArgDesc_1"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imdiv_Category"] = "Engineering";
        this["Func_imdiv_CategoryURL"] = "Engineering";
        this["Func_imdiv_Desc"] = "返回两个复数 (被除数/除数) 的商。";
        this["Func_imexp_Arg_0"] = "ComplexNumber";
        this["Func_imexp_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imexp_Category"] = "Engineering";
        this["Func_imexp_CategoryURL"] = "Engineering";
        this["Func_imexp_Desc"] = "返回复数的指数。";
        this["Func_imln_Arg_0"] = "ComplexNumber";
        this["Func_imln_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imln_Category"] = "Engineering";
        this["Func_imln_CategoryURL"] = "Engineering";
        this["Func_imln_Desc"] = "返回复数的自然对数。";
        this["Func_imlog10_Arg_0"] = "ComplexNumber";
        this["Func_imlog10_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imlog10_Category"] = "Engineering";
        this["Func_imlog10_CategoryURL"] = "Engineering";
        this["Func_imlog10_Desc"] = "返回一个复数的以 10 为底的对数。";
        this["Func_imlog2_Arg_0"] = "ComplexNumber";
        this["Func_imlog2_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imlog2_Category"] = "Engineering";
        this["Func_imlog2_CategoryURL"] = "Engineering";
        this["Func_imlog2_Desc"] = "返回一个复数的以 2 为底的对数。";
        this["Func_impower_Arg_0"] = "ComplexNumber";
        this["Func_impower_Arg_1"] = "Power";
        this["Func_impower_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_impower_ArgDesc_1"] = "复数将被提高的幂。";
        this["Func_impower_Category"] = "Engineering";
        this["Func_impower_CategoryURL"] = "Engineering";
        this["Func_impower_Desc"] = "返回复数的指定次幂。";
        this["Func_improduct_Arg_0"] = "ComplexNumber{0}";
        this["Func_improduct_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_improduct_Category"] = "Engineering";
        this["Func_improduct_CategoryURL"] = "Engineering";
        this["Func_improduct_Desc"] = "返回一个或多个复数的乘积。";
        this["Func_imreal_Arg_0"] = "ComplexNumber";
        this["Func_imreal_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imreal_Category"] = "Engineering";
        this["Func_imreal_CategoryURL"] = "Engineering";
        this["Func_imreal_Desc"] = "返回复数的实系数。";
        this["Func_imsin_Arg_0"] = "ComplexNumber";
        this["Func_imsin_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imsin_Category"] = "Engineering";
        this["Func_imsin_CategoryURL"] = "Engineering";
        this["Func_imsin_Desc"] = "返回复数的正弦值。";
        this["Func_imsqrt_Arg_0"] = "ComplexNumber";
        this["Func_imsqrt_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imsqrt_Category"] = "Engineering";
        this["Func_imsqrt_CategoryURL"] = "Engineering";
        this["Func_imsqrt_Desc"] = "返回复数的平方根。";
        this["Func_imsub_Arg_0"] = "ComplexNumber1";
        this["Func_imsub_Arg_1"] = "ComplexNumber2";
        this["Func_imsub_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"，将从中减去 ComplexNumber2。";
        this["Func_imsub_ArgDesc_1"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"，将从 ComplexNumber1 中减去。";
        this["Func_imsub_Category"] = "Engineering";
        this["Func_imsub_CategoryURL"] = "Engineering";
        this["Func_imsub_Desc"] = "返回两个复数之间的差。";
        this["Func_imsum_Arg_0"] = "ComplexNumber{0}";
        this["Func_imsum_ArgDesc_0"] = "复数的文本表示格式: \"x + yi\" 或 \"x + yj\"。";
        this["Func_imsum_Category"] = "Engineering";
        this["Func_imsum_CategoryURL"] = "Engineering";
        this["Func_imsum_Desc"] = "返回一个或多个复数的和。";
        this["Func_info_Arg_0"] = "Type";
        this["Func_info_ArgDesc_0"] = "文本表达式，指示要返回的信息类型。\r\n\"directory\" = 当前文件夹的完整路径。\r\n\"osversion\" = 当前操作系统版本，以文本表达式表示。\r\n\"system\" = 当前的操作系统。 Macintosh = \"mac\", Windows = \"pcdos\".\r\n    ";
        this["Func_info_Category"] = "Information";
        this["Func_info_CategoryURL"] = "Information";
        this["Func_info_Desc"] = "返回有关当前操作环境的信息。";
        this["Func_int_Arg_0"] = "number";
        this["Func_int_ArgDesc_0"] = "实数下舍入为整数。";
        this["Func_int_Category"] = "Math";
        this["Func_int_CategoryURL"] = "Math";
        this["Func_int_Desc"] = "将数字四舍五入至最接近的整数。";
        this["Func_intrate_Arg_0"] = "settlement";
        this["Func_intrate_Arg_1"] = "maturity";
        this["Func_intrate_Arg_2"] = "investment";
        this["Func_intrate_Arg_3"] = "redemption";
        this["Func_intrate_Arg_4"] = "basis";
        this["Func_intrate_ArgDesc_0"] = "证券的结算日期。";
        this["Func_intrate_ArgDesc_1"] = "证券的到期日。";
        this["Func_intrate_ArgDesc_2"] = "投资于证券的金额。";
        this["Func_intrate_ArgDesc_3"] = "到期时收取的金额。";
        this["Func_intrate_ArgDesc_4"] = "要使用的天数计算类型。\r\n0 或忽略 = US (NASD) 30/360，\r\n1 = Actual/actual，\r\n2 = Actual/360，\r\n3 = Actual/365，\r\n4 = European 30/360\r\n    ";
        this["Func_intrate_Category"] = "Financial";
        this["Func_intrate_CategoryURL"] = "Financial";
        this["Func_intrate_Desc"] = "返回完全投资证券的利率。";
        this["Func_ipmt_Arg_0"] = "rate";
        this["Func_ipmt_Arg_1"] = "per";
        this["Func_ipmt_Arg_2"] = "nper";
        this["Func_ipmt_Arg_3"] = "pv";
        this["Func_ipmt_Arg_4"] = "fv";
        this["Func_ipmt_Arg_5"] = "type";
        this["Func_ipmt_ArgDesc_0"] = "每期利率。";
        this["Func_ipmt_ArgDesc_1"] = "周期，必须在 1 到 nper 之间。";
        this["Func_ipmt_ArgDesc_2"] = "年金的总支付期数。";
        this["Func_ipmt_ArgDesc_3"] = "现值，或一系列未来付款累积和的当前值。";
        this["Func_ipmt_ArgDesc_4"] = "末次付款后您想要获得的终值或现金余额。如果省略，则假定为零。";
        this["Func_ipmt_ArgDesc_5"] = "数字 0 或 1，表示应在期末 (0，默认值) 还是开始 (1) 支付。";
        this["Func_ipmt_Category"] = "Financial";
        this["Func_ipmt_CategoryURL"] = "Financial";
        this["Func_ipmt_Desc"] = "根据周期，固定还款额和固定利率，返回给定投资期限内的利息支付。";
        this["Func_irr_Arg_0"] = "values";
        this["Func_irr_Arg_1"] = "guess";
        this["Func_irr_ArgDesc_0"] = "定期发生的付款 (负值) 和收入 (正值) 值的集合。";
        this["Func_irr_ArgDesc_1"] = "您猜到的接近结果的数字。默认值为 0.1 (10%)。";
        this["Func_irr_Category"] = "Financial";
        this["Func_irr_CategoryURL"] = "Financial";
        this["Func_irr_Desc"] = "返回一系列现金流量的内部收益率。";
        this["Func_isblank_Arg_0"] = "value";
        this["Func_isblank_ArgDesc_0"] = "要测试的值。";
        this["Func_isblank_Category"] = "Information";
        this["Func_isblank_CategoryURL"] = "Information";
        this["Func_isblank_Desc"] = "如果值为空白，则返回 true。";
        this["Func_isdbnull_Arg_0"] = "value";
        this["Func_isdbnull_ArgDesc_0"] = "要测试的值。";
        this["Func_isdbnull_Category"] = "Information";
        this["Func_isdbnull_CategoryURL"] = "Information";
        this["Func_isdbnull_Desc"] = "如果该值表示不存在的值，则返回 true。";
        this["Func_iserr_Arg_0"] = "value";
        this["Func_iserr_ArgDesc_0"] = "要测试的值。";
        this["Func_iserr_Category"] = "Information";
        this["Func_iserr_CategoryURL"] = "Information";
        this["Func_iserr_Desc"] = "如果该值是除 #N/A 以外的任何错误值，则返回 true。";
        this["Func_iserror_Arg_0"] = "value";
        this["Func_iserror_ArgDesc_0"] = "要测试的值。";
        this["Func_iserror_Category"] = "Information";
        this["Func_iserror_CategoryURL"] = "Information";
        this["Func_iserror_Desc"] = "如果该值是任何错误值，则返回 true。";
        this["Func_iseven_Arg_0"] = "value";
        this["Func_iseven_ArgDesc_0"] = "要测试的值。";
        this["Func_iseven_Category"] = "Information";
        this["Func_iseven_CategoryURL"] = "Information";
        this["Func_iseven_Desc"] = "如果值为偶数，则返回 true，否则返回 false。";
        this["Func_islogical_Arg_0"] = "value";
        this["Func_islogical_ArgDesc_0"] = "要测试的值。";
        this["Func_islogical_Category"] = "Information";
        this["Func_islogical_CategoryURL"] = "Information";
        this["Func_islogical_Desc"] = "如果值为逻辑值 (true 或 false)，则返回 true。";
        this["Func_isna_Arg_0"] = "value";
        this["Func_isna_ArgDesc_0"] = "要测试的值。";
        this["Func_isna_Category"] = "Information";
        this["Func_isna_CategoryURL"] = "Information";
        this["Func_isna_Desc"] = "如果该值为错误值 #N/A (值不可用)，则返回 true。";
        this["Func_isnontext_Arg_0"] = "value";
        this["Func_isnontext_ArgDesc_0"] = "要测试的值。";
        this["Func_isnontext_Category"] = "Information";
        this["Func_isnontext_CategoryURL"] = "Information";
        this["Func_isnontext_Desc"] = "如果值是非文本项，则返回 true。";
        this["Func_isnull_Arg_0"] = "value";
        this["Func_isnull_ArgDesc_0"] = "要测试的值。";
        this["Func_isnull_Category"] = "Information";
        this["Func_isnull_CategoryURL"] = "Information";
        this["Func_isnull_Desc"] = "如果该值不存在，则返回 true。";
        this["Func_isnumber_Arg_0"] = "value";
        this["Func_isnumber_ArgDesc_0"] = "要测试的值。";
        this["Func_isnumber_Category"] = "Information";
        this["Func_isnumber_CategoryURL"] = "Information";
        this["Func_isnumber_Desc"] = "如果值为数字，则返回 true。";
        this["Func_isodd_Arg_0"] = "value";
        this["Func_isodd_ArgDesc_0"] = "要测试的值。";
        this["Func_isodd_Category"] = "Information";
        this["Func_isodd_CategoryURL"] = "Information";
        this["Func_isodd_Desc"] = "如果值为奇数，则返回 true，否则返回 false。";
        this["Func_isref_Arg_0"] = "value";
        this["Func_isref_ArgDesc_0"] = "要测试的值。";
        this["Func_isref_Category"] = "Information";
        this["Func_isref_CategoryURL"] = "Information";
        this["Func_isref_Desc"] = "如果值为引用，则返回 true。";
        this["Func_istext_Arg_0"] = "value";
        this["Func_istext_ArgDesc_0"] = "要测试的值。";
        this["Func_istext_Category"] = "Information";
        this["Func_istext_CategoryURL"] = "Information";
        this["Func_istext_Desc"] = "如果值为文本值，则返回 true。";
        this["Func_lcm_Arg_0"] = "number{0}";
        this["Func_lcm_ArgDesc_0"] = "整数值。非整数值将被截断。";
        this["Func_lcm_Category"] = "Math";
        this["Func_lcm_CategoryURL"] = "Math";
        this["Func_lcm_Desc"] = "返回一个或多个整数值的最小公倍数。";
        this["Func_left_Arg_0"] = "text";
        this["Func_left_Arg_1"] = "num_chars";
        this["Func_left_ArgDesc_0"] = "包含要提取字符的文本表达式。";
        this["Func_left_ArgDesc_1"] = "要提取的字符数。";
        this["Func_left_Category"] = "TextAndData";
        this["Func_left_CategoryURL"] = "Text_and_Data";
        this["Func_left_Desc"] = "返回文本表达式中的第一个字符。";
        this["Func_len_Arg_0"] = "text";
        this["Func_len_ArgDesc_0"] = "要查找其长度的文本表达式。空格计为字符。";
        this["Func_len_Category"] = "TextAndData";
        this["Func_len_CategoryURL"] = "Text_and_Data";
        this["Func_len_Desc"] = "返回文本表达式中的字符数。";
        this["Func_ln_Arg_0"] = "number";
        this["Func_ln_ArgDesc_0"] = "要获取自然对数的正实数。";
        this["Func_ln_Category"] = "Math";
        this["Func_ln_CategoryURL"] = "Math";
        this["Func_ln_Desc"] = "返回数字的自然对数。";
        this["Func_log_Arg_0"] = "number";
        this["Func_log_Arg_1"] = "底数";
        this["Func_log_ArgDesc_0"] = "要获取对数的正实数。";
        this["Func_log_ArgDesc_1"] = "对数的底数。";
        this["Func_log_Category"] = "Math";
        this["Func_log_CategoryURL"] = "Math";
        this["Func_log_Desc"] = "返回数值以指定底数为底的对数。";
        this["Func_log10_Arg_0"] = "number";
        this["Func_log10_ArgDesc_0"] = "要获取以 10 为底的对数的正实数。";
        this["Func_log10_Category"] = "Math";
        this["Func_log10_CategoryURL"] = "Math";
        this["Func_log10_Desc"] = "返回一个数的以 10 为底的对数。";
        this["Func_lower_Arg_0"] = "text";
        this["Func_lower_ArgDesc_0"] = "转换为小写的文本。";
        this["Func_lower_Category"] = "TextAndData";
        this["Func_lower_CategoryURL"] = "Text_and_Data";
        this["Func_lower_Desc"] = "将文本表达式中的所有大写字母转换为小写。";
        this["Func_max_Arg_0"] = "number{0}";
        this["Func_max_ArgDesc_0"] = "一个数值或数值范围。";
        this["Func_max_Category"] = "Statistical";
        this["Func_max_CategoryURL"] = "Statistical";
        this["Func_max_Desc"] = "返回一组数字中的最大数字。";
        this["Func_median_Arg_0"] = "number{0}";
        this["Func_median_ArgDesc_0"] = "一个数值或数值范围。";
        this["Func_median_Category"] = "Statistical";
        this["Func_median_CategoryURL"] = "Statistical";
        this["Func_median_Desc"] = "返回一组数字的中位数。中位数是对数字进行排序时的中间数字，或者在指定数字为偶数时为两个中间数字的平均值。";
        this["Func_mid_Arg_0"] = "text";
        this["Func_mid_Arg_1"] = "start_num";
        this["Func_mid_Arg_2"] = "num_chars";
        this["Func_mid_ArgDesc_0"] = "包含要提取字符的文本表达式。";
        this["Func_mid_ArgDesc_1"] = "要提取的第一个字符的以 1 为基础的索引。";
        this["Func_mid_ArgDesc_2"] = "要提取的字符数。";
        this["Func_mid_Category"] = "TextAndData";
        this["Func_mid_CategoryURL"] = "Text_and_Data";
        this["Func_mid_Desc"] = "返回文本表达式中特定数量的字符。";
        this["Func_min_Arg_0"] = "number{0}";
        this["Func_min_ArgDesc_0"] = "一个数值或数值范围。";
        this["Func_min_Category"] = "Statistical";
        this["Func_min_CategoryURL"] = "Statistical";
        this["Func_min_Desc"] = "返回一组数字中的最小数字。";
        this["Func_minute_Arg_0"] = "Time_value";
        this["Func_minute_ArgDesc_0"] = "用于获取分钟的时间值。";
        this["Func_minute_Category"] = "DateAndTime";
        this["Func_minute_CategoryURL"] = "Date_and_Time";
        this["Func_minute_Desc"] = "返回时间值的分钟。";
        this["Func_mod_Arg_0"] = "number";
        this["Func_mod_Arg_1"] = "divisor";
        this["Func_mod_ArgDesc_0"] = "要查找余数的数字。";
        this["Func_mod_ArgDesc_1"] = "数值除以的数值。";
        this["Func_mod_Category"] = "Math";
        this["Func_mod_CategoryURL"] = "Math";
        this["Func_mod_Desc"] = "返回除以除数后的余数。结果与除数的符号相同。";
        this["Func_month_Arg_0"] = "Date_value";
        this["Func_month_ArgDesc_0"] = "从中获取月份的日期值。";
        this["Func_month_Category"] = "DateAndTime";
        this["Func_month_CategoryURL"] = "Date_and_Time";
        this["Func_month_Desc"] = "返回日期值的月份。";
        this["Func_mround_Arg_0"] = "数字";
        this["Func_mround_Arg_1"] = "多个";
        this["Func_mround_ArgDesc_0"] = "要四舍五入的数字。";
        this["Func_mround_ArgDesc_1"] = "一个数字，指示要四舍五入的倍数。";
        this["Func_mround_Category"] = "Math";
        this["Func_mround_CategoryURL"] = "Math";
        this["Func_mround_Desc"] = "将数字四舍五入至另一个数字的最接近倍数。";
        this["Func_multinomial_Arg_0"] = "number{0}";
        this["Func_multinomial_ArgDesc_0"] = "要获取多项式的一个数字。";
        this["Func_multinomial_Category"] = "Math";
        this["Func_multinomial_CategoryURL"] = "Math";
        this["Func_multinomial_Desc"] = "返回一组数字的多项式。多项式是值之和的阶乘与其阶乘乘积之比。";
        this["Func_n_Arg_0"] = "Value";
        this["Func_n_ArgDesc_0"] = "要转换为数字的值。以下是可接受的值:\r\n数字 - 返回数字。\r\n日期 - 返回日期。\r\nTrue - 返回 1。\r\nFalse - 返回 0。\r\n错误值-返回错误值。\r\n任何其他值-返回 0。\r\n    ";
        this["Func_n_Category"] = "Information";
        this["Func_n_CategoryURL"] = "信息";
        this["Func_n_Desc"] = "将值转换为数字。";
        this["Func_na_Category"] = "Information";
        this["Func_na_CategoryURL"] = "Information";
        this["Func_na_Desc"] = "返回错误值 #N/A (值不可用)。";
        this["Func_networkdays_Arg_0"] = "startDate";
        this["Func_networkdays_Arg_1"] = "endDate";
        this["Func_networkdays_Arg_2"] = "holidays";
        this["Func_networkdays_ArgDesc_0"] = "开始日期。";
        this["Func_networkdays_ArgDesc_1"] = "结束日期。";
        this["Func_networkdays_ArgDesc_2"] = "包含非工作日的一个或多个引用的范围。";
        this["Func_networkdays_Category"] = "DateAndTime";
        this["Func_networkdays_CategoryURL"] = "DateAndTime";
        this["Func_networkdays_Desc"] = "返回指定日期之间的总工作日总数，不包括任何指定的假日。";
        this["Func_not_Arg_0"] = "logical";
        this["Func_not_ArgDesc_0"] = "逻辑值 (真或假)。";
        this["Func_not_Category"] = "Logical";
        this["Func_not_CategoryURL"] = "Logical";
        this["Func_not_Desc"] = "反转逻辑值 (将 true 更改为 false，将 false 更改为 true)。";
        this["Func_now_Category"] = "DateAndTime";
        this["Func_now_CategoryURL"] = "Date_and_Time";
        this["Func_now_Desc"] = "返回表示当前日期和时间的值。";
        this["Func_nper_Arg_0"] = "rate";
        this["Func_nper_Arg_1"] = "pmt";
        this["Func_nper_Arg_2"] = "pv";
        this["Func_nper_Arg_3"] = "fv";
        this["Func_nper_Arg_4"] = "type";
        this["Func_nper_ArgDesc_0"] = "每期利率。";
        this["Func_nper_ArgDesc_1"] = "每期支付的金额，在年金的使用期限内无法更改。";
        this["Func_nper_ArgDesc_2"] = "现值，或一系列未来付款累积和的当前值。";
        this["Func_nper_ArgDesc_3"] = "末次付款后您想要获得的终值或现金余额。";
        this["Func_nper_ArgDesc_4"] = "数字 0 或 1，表示应在期末 (0，默认值) 还是开始 (1) 支付。";
        this["Func_nper_Category"] = "Financial";
        this["Func_nper_CategoryURL"] = "Financial";
        this["Func_nper_Desc"] = "返回基于定期，固定还款额和固定利率的投资的周期数。";
        this["Func_npv_Arg_0"] = "rate";
        this["Func_npv_Arg_1"] = "value{0}";
        this["Func_npv_ArgDesc_0"] = "一段期间内的折扣率。";
        this["Func_npv_ArgDesc_1"] = "付款 (负值) 或收入 (正值)。";
        this["Func_npv_Category"] = "Financial";
        this["Func_npv_CategoryURL"] = "Financial";
        this["Func_npv_Desc"] = "通过使用折现率以及一系列未来支付 (负值) 和收入 (正值) 来计算投资的净现值。";
        this["Func_null_Category"] = "Information";
        this["Func_null_CategoryURL"] = "Information";
        this["Func_null_Desc"] = "返回不存在的值。";
        this["Func_oct2bin_Arg_0"] = "Number";
        this["Func_oct2bin_Arg_1"] = "Places";
        this["Func_oct2bin_ArgDesc_0"] = "表示八进制数的文本表达式。";
        this["Func_oct2bin_ArgDesc_1"] = "表示值时使用的字符数。如果未指定，将使用表示该值的最小字符数。这允许您指定前导零。";
        this["Func_oct2bin_Category"] = "Engineering";
        this["Func_oct2bin_CategoryURL"] = "Engineering";
        this["Func_oct2bin_Desc"] = "在二进制系统中，将表示八进制数字的文本表达式转换为表示相同数字的文本表达式。";
        this["Func_oct2dec_Arg_0"] = "Number";
        this["Func_oct2dec_ArgDesc_0"] = "表示八进制数的文本表达式。";
        this["Func_oct2dec_Category"] = "Engineering";
        this["Func_oct2dec_CategoryURL"] = "Engineering";
        this["Func_oct2dec_Desc"] = "返回八进制数字系统中数字文本表示形式的十进制值。";
        this["Func_oct2hex_Arg_0"] = "Number";
        this["Func_oct2hex_Arg_1"] = "Places";
        this["Func_oct2hex_ArgDesc_0"] = "表示八进制数的文本表达式。";
        this["Func_oct2hex_ArgDesc_1"] = "表示值时使用的字符数。如果未指定，将使用表示该值的最小字符数。这允许您指定前导零。";
        this["Func_oct2hex_Category"] = "Engineering";
        this["Func_oct2hex_CategoryURL"] = "Engineering";
        this["Func_oct2hex_Desc"] = "在十六进制系统中，将表示八进制数字的文本表达式转换为表示相同数字的文本表达式。";
        this["Func_odd_Arg_0"] = "number";
        this["Func_odd_ArgDesc_0"] = "要取整的值。";
        this["Func_odd_Category"] = "Math";
        this["Func_odd_CategoryURL"] = "Math";
        this["Func_odd_Desc"] = "将正数向上取整，负数向下取整至最接近的奇数整数。";
        this["Func_or_Arg_0"] = "logical{0}";
        this["Func_or_ArgDesc_0"] = "逻辑值 (真或假)。";
        this["Func_or_Category"] = "Logical";
        this["Func_or_CategoryURL"] = "Logical";
        this["Func_or_Desc"] = "如果一个或多个值为 true，则返回 true; 否则返回 false。如果所有值均为 false，则返回 false。";
        this["Func_pi_Category"] = "Math";
        this["Func_pi_CategoryURL"] = "Math";
        this["Func_pi_Desc"] = "返回常数 pi，即 3.14159265358979。";
        this["Func_pmt_Arg_0"] = "rate";
        this["Func_pmt_Arg_1"] = "nper";
        this["Func_pmt_Arg_2"] = "pv";
        this["Func_pmt_Arg_3"] = "fv";
        this["Func_pmt_Arg_4"] = "type";
        this["Func_pmt_ArgDesc_0"] = "贷款利率。";
        this["Func_pmt_ArgDesc_1"] = "贷款的还款总数。";
        this["Func_pmt_ArgDesc_2"] = "现值，或一系列未来付款累积和的当前值，也称为本金。";
        this["Func_pmt_ArgDesc_3"] = "末次付款后您想要获得的终值或现金余额。";
        this["Func_pmt_ArgDesc_4"] = "数字 0 或 1，表示应在期末 (0，默认值) 还是开始 (1) 支付。";
        this["Func_pmt_Category"] = "Financial";
        this["Func_pmt_CategoryURL"] = "Financial";
        this["Func_pmt_Desc"] = "根据固定还款额和固定利率计算贷款还款额。";
        this["Func_power_Arg_0"] = "number";
        this["Func_power_Arg_1"] = "power";
        this["Func_power_ArgDesc_0"] = "要加幂的基数。";
        this["Func_power_ArgDesc_1"] = "对基数求乘方的指数。";
        this["Func_power_Category"] = "Math";
        this["Func_power_CategoryURL"] = "Math";
        this["Func_power_Desc"] = "返回数值加幂的结果。";
        this["Func_ppmt_Arg_0"] = "rate";
        this["Func_ppmt_Arg_1"] = "per";
        this["Func_ppmt_Arg_2"] = "nper";
        this["Func_ppmt_Arg_3"] = "pv";
        this["Func_ppmt_Arg_4"] = "fv";
        this["Func_ppmt_Arg_5"] = "type";
        this["Func_ppmt_ArgDesc_0"] = "每期利率。";
        this["Func_ppmt_ArgDesc_1"] = "周期，必须在 1 到 nper 之间。";
        this["Func_ppmt_ArgDesc_2"] = "年金的总支付期数。";
        this["Func_ppmt_ArgDesc_3"] = "现值，或一系列未来付款累积和的当前值。";
        this["Func_ppmt_ArgDesc_4"] = "末次付款后您想要获得的终值或现金余额。";
        this["Func_ppmt_ArgDesc_5"] = "数字 0 或 1，表示应在期末 (0，默认值) 还是开始 (1) 支付。";
        this["Func_ppmt_Category"] = "Financial";
        this["Func_ppmt_CategoryURL"] = "Financial";
        this["Func_ppmt_Desc"] = "根据定期，固定还款额和固定利率返回给定投资本金的支付。";
        this["Func_product_Arg_0"] = "number{0}";
        this["Func_product_ArgDesc_0"] = "与其他数字相乘的数字。";
        this["Func_product_Category"] = "Math";
        this["Func_product_CategoryURL"] = "Math";
        this["Func_product_Desc"] = "将给定的所有自变量数值相乘并返回乘积。";
        this["Func_pv_Arg_0"] = "rate";
        this["Func_pv_Arg_1"] = "nper";
        this["Func_pv_Arg_2"] = "pmt";
        this["Func_pv_Arg_3"] = "fv";
        this["Func_pv_Arg_4"] = "type";
        this["Func_pv_ArgDesc_0"] = "每期利率。";
        this["Func_pv_ArgDesc_1"] = "年金的总支付期数。";
        this["Func_pv_ArgDesc_2"] = "每期支付的金额，在年金的使用期限内无法更改。";
        this["Func_pv_ArgDesc_3"] = "末次付款后您想要获得的终值或现金余额。";
        this["Func_pv_ArgDesc_4"] = "数字 0 或 1，表示应在期末 (0，默认值) 还是开始 (1) 支付。";
        this["Func_pv_Category"] = "Financial";
        this["Func_pv_CategoryURL"] = "Financial";
        this["Func_pv_Desc"] = "返回投资的现值。";
        this["Func_quotient_Arg_0"] = "numerator";
        this["Func_quotient_Arg_1"] = "denominator";
        this["Func_quotient_ArgDesc_0"] = "除法运算的被除数。";
        this["Func_quotient_ArgDesc_1"] = "除法运算的除数。";
        this["Func_quotient_Category"] = "Math";
        this["Func_quotient_CategoryURL"] = "Math";
        this["Func_quotient_Desc"] = "返回除法的整数部分。这将放弃除法的余数。";
        this["Func_radians_Arg_0"] = "Degrees";
        this["Func_radians_ArgDesc_0"] = "以度为单位的数值将转换为弧度。";
        this["Func_radians_Category"] = "Math";
        this["Func_radians_CategoryURL"] = "Math";
        this["Func_radians_Desc"] = "将度转换为弧度。";
        this["Func_rand_Category"] = "Math";
        this["Func_rand_CategoryURL"] = "Math";
        this["Func_rand_Desc"] = "返回大于或等于 0 且小于 1 的均匀分布的随机数";
        this["Func_randbetween_Arg_0"] = "底部";
        this["Func_randbetween_Arg_1"] = "顶部";
        this["Func_randbetween_ArgDesc_0"] = "将返回的最小值。";
        this["Func_randbetween_ArgDesc_1"] = "将返回的最大值。";
        this["Func_randbetween_Category"] = "Math";
        this["Func_randbetween_CategoryURL"] = "Math";
        this["Func_randbetween_Desc"] = "在两个指定数字之间生成一个伪随机整数。";
        this["Func_rate_Arg_0"] = "NPer";
        this["Func_rate_Arg_1"] = "Pmt";
        this["Func_rate_Arg_2"] = "Pv";
        this["Func_rate_Arg_3"] = "Fv";
        this["Func_rate_Arg_4"] = "类型";
        this["Func_rate_Arg_5"] = "Guess";
        this["Func_rate_ArgDesc_0"] = "年金的总支付期数。";
        this["Func_rate_ArgDesc_1"] = "付款是按每个周期进行的，并且在年金的使用期限内无法更改。";
        this["Func_rate_ArgDesc_2"] = "现值，或一系列未来付款累积和的当前值。";
        this["Func_rate_ArgDesc_3"] = "末次付款后您想要获得的终值或现金余额。如果省略 fv，则假定为 0 (例如，贷款的终值为 0)。例如，如果您想节省 $50,000 来支付 18 年内的特殊项目，则 $50,000 是终值。然后，您可以保守估计利率，并确定每个月必须节省多少。如果省略 fv，则必须包含 pmt 自变量。fv 的默认值为零。";
        this["Func_rate_ArgDesc_4"] = "数字 0 或 1，表示应在期末 (0，默认值) 还是开始 (1) 支付。";
        this["Func_rate_ArgDesc_5"] = "您猜到的接近结果的数字。如果省略，则假定为 0.1 (10%)。";
        this["Func_rate_Category"] = "Financial";
        this["Func_rate_CategoryURL"] = "Financial";
        this["Func_rate_Desc"] = "返回年金的每期利率。";
        this["Func_replace_Arg_0"] = "Old_text";
        this["Func_replace_Arg_1"] = "Start_num";
        this["Func_replace_Arg_2"] = "Num_chars";
        this["Func_replace_Arg_3"] = "New_text";
        this["Func_replace_ArgDesc_0"] = "要在其中替换某些字符的文本表达式。";
        this["Func_replace_ArgDesc_1"] = "old_text 中以 1 为基础的字符索引替换为 new_text。";
        this["Func_replace_ArgDesc_2"] = "old_text 中要替换为 new_text 的字符数。";
        this["Func_replace_ArgDesc_3"] = "将替换 old_text 中字符的文本。";
        this["Func_replace_Category"] = "TextAndData";
        this["Func_replace_CategoryURL"] = "Text_and_Data";
        this["Func_replace_Desc"] = "替换文本表达式的一部分。";
        this["Func_rept_Arg_0"] = "TextValue";
        this["Func_rept_Arg_1"] = "RepeatCount";
        this["Func_rept_ArgDesc_0"] = "要重复的文本。";
        this["Func_rept_ArgDesc_1"] = "重复文本的正次数。";
        this["Func_rept_Category"] = "TextAndData";
        this["Func_rept_CategoryURL"] = "Text_and_Data";
        this["Func_rept_Desc"] = "重复文本特定次数。";
        this["Func_right_Arg_0"] = "text";
        this["Func_right_Arg_1"] = "num_chars";
        this["Func_right_ArgDesc_0"] = "包含要提取字符的文本表达式。";
        this["Func_right_ArgDesc_1"] = "要提取的字符数。";
        this["Func_right_Category"] = "TextAndData";
        this["Func_right_CategoryURL"] = "Text_and_Data";
        this["Func_right_Desc"] = "返回文本表达式中的最后一个或多个字符。";
        this["Func_roman_Arg_0"] = "Number";
        this["Func_roman_Arg_1"] = "Form";
        this["Func_roman_ArgDesc_0"] = "要转换为罗马数字的数字。";
        this["Func_roman_ArgDesc_1"] = "一个数字或布尔值，指示是使用经典罗马数字还是使用更简洁的版本。\r\n0 = (默认) 经典。(499 = \"CDXCIX\")\r\n1 = 更简洁。(499 = \"LDVLIV\")\r\n2 = 更简洁。(499 = \"XDIX\")\r\n3 = 更简洁。(499 = \"VDIV\")\r\n4  = 简化。(499 = \"ID\")\r\nTrue = 经典。\r\nFalse = 简化。\r\n    ";
        this["Func_roman_Category"] = "Math";
        this["Func_roman_CategoryURL"] = "Math";
        this["Func_roman_Desc"] = "将数字转换为罗马数字作为文本表达式。";
        this["Func_round_Arg_0"] = "number";
        this["Func_round_Arg_1"] = "num_digits";
        this["Func_round_Arg_2"] = "round_Style";
        this["Func_round_ArgDesc_0"] = "要舍入的数字。";
        this["Func_round_ArgDesc_1"] = "数字要四舍五入的位数。";
        this["Func_round_ArgDesc_2"] = "一个数字，指示要使用的舍入样式。\r\n0  - 算术舍入 (默认) - 如果舍入的最后一位有效数字为 5，则将数字舍入。\r\n1 - 银行家舍入 - 当最后一位有效数字为 5 时，前一位用于确定是向上舍入还是向下舍入。如果数字为偶数，则下舍入。如果为奇数，则上舍入。\r\n    ";
        this["Func_round_Category"] = "Math";
        this["Func_round_CategoryURL"] = "Math";
        this["Func_round_Desc"] = "将数字四舍五入到指定的位数。";
        this["Func_rounddown_Arg_0"] = "Number";
        this["Func_rounddown_Arg_1"] = "Digits";
        this["Func_rounddown_ArgDesc_0"] = "要上舍入的数字。";
        this["Func_rounddown_ArgDesc_1"] = "要舍入的小数位数。正数表示小数点后的位置，负数表示小数点前的位置。";
        this["Func_rounddown_Category"] = "Math";
        this["Func_rounddown_CategoryURL"] = "Math";
        this["Func_rounddown_Desc"] = "将数字四舍五入至指定位数。";
        this["Func_roundup_Arg_0"] = "Number";
        this["Func_roundup_Arg_1"] = "Digits";
        this["Func_roundup_ArgDesc_0"] = "要下舍入的数字。";
        this["Func_roundup_ArgDesc_1"] = "要舍入的小数位数。正数表示小数点后的位置，负数表示小数点前的位置。";
        this["Func_roundup_Category"] = "Math";
        this["Func_roundup_CategoryURL"] = "Math";
        this["Func_roundup_Desc"] = "将数字四舍五入至指定位数。";
        this["Func_search_Arg_0"] = "search_text";
        this["Func_search_Arg_1"] = "value";
        this["Func_search_Arg_2"] = "start_index";
        this["Func_search_ArgDesc_0"] = "要在值中查找的文本。";
        this["Func_search_ArgDesc_1"] = "要在其中查找 search_text 的文本。";
        this["Func_search_ArgDesc_2"] = "从以 1 为基础的索引开始搜索 (如果省略，start_index 为 1)。";
        this["Func_search_Category"] = "TextAndData";
        this["Func_search_CategoryURL"] = "TextAndData";
        this["Func_search_Desc"] = "返回一个字符串在另一个字符串中的从 1 开始的索引，搜索不区分大小写。";
        this["Func_searchb_Arg_0"] = "search_text";
        this["Func_searchb_Arg_1"] = "value";
        this["Func_searchb_Arg_2"] = "start_index";
        this["Func_searchb_ArgDesc_0"] = "要在值中查找的文本。";
        this["Func_searchb_ArgDesc_1"] = "要在其中查找 search_text 的文本。";
        this["Func_searchb_ArgDesc_2"] = "从以 1 为基础的索引开始搜索 (如果省略，start_index 为 1)。";
        this["Func_searchb_Category"] = "TextAndData";
        this["Func_searchb_CategoryURL"] = "TextAndData";
        this["Func_searchb_Desc"] = "返回一个字符串在另一个字符串中的从 1 开始的索引，搜索不区分大小写。";
        this["Func_second_Arg_0"] = "Time_value";
        this["Func_second_ArgDesc_0"] = "从中获取秒的时间值。";
        this["Func_second_Category"] = "DateAndTime";
        this["Func_second_CategoryURL"] = "Date_and_Time";
        this["Func_second_Desc"] = "返回时间值的秒。";
        this["Func_seriessum_Arg_0"] = "InputValue";
        this["Func_seriessum_Arg_1"] = "InitialPower";
        this["Func_seriessum_Arg_2"] = "Step";
        this["Func_seriessum_Arg_3"] = "Coefficients";
        this["Func_seriessum_ArgDesc_0"] = "幂级数的输入值。";
        this["Func_seriessum_ArgDesc_1"] = "InputValue 的初始幂。";
        this["Func_seriessum_ArgDesc_2"] = "该步骤将用于增加系列中每一期的幂。";
        this["Func_seriessum_ArgDesc_3"] = "与 InputValue 的每个连续幂相乘的一组系数。";
        this["Func_seriessum_Category"] = "Math";
        this["Func_seriessum_CategoryURL"] = "Math";
        this["Func_seriessum_Desc"] = "返回幂级数的和。";
        this["Func_sign_Arg_0"] = "Number";
        this["Func_sign_ArgDesc_0"] = "将返回其符号的数字。";
        this["Func_sign_Category"] = "Math";
        this["Func_sign_CategoryURL"] = "Math";
        this["Func_sign_Desc"] = "返回数字的符号 (-1，0 或 1)。";
        this["Func_sin_Arg_0"] = "number";
        this["Func_sin_ArgDesc_0"] = "求取其正弦的弧度角。";
        this["Func_sin_Category"] = "Math";
        this["Func_sin_CategoryURL"] = "Math";
        this["Func_sin_Desc"] = "返回指定角度的正弦值。";
        this["Func_sinh_Arg_0"] = "number";
        this["Func_sinh_ArgDesc_0"] = "要获取其双曲正弦值的实数。";
        this["Func_sinh_Category"] = "Math";
        this["Func_sinh_CategoryURL"] = "Math";
        this["Func_sinh_Desc"] = "返回数字的双曲正弦值。";
        this["Func_sln_Arg_0"] = "cost";
        this["Func_sln_Arg_1"] = "salvage";
        this["Func_sln_Arg_2"] = "life";
        this["Func_sln_ArgDesc_0"] = "资产的初始成本。";
        this["Func_sln_ArgDesc_1"] = "折旧结束时的值。";
        this["Func_sln_ArgDesc_2"] = "资产折旧的期数。";
        this["Func_sln_Category"] = "Financial";
        this["Func_sln_CategoryURL"] = "Financial";
        this["Func_sln_Desc"] = "返回某一时期内资产的直线折旧。";
        this["Func_sqrt_Arg_0"] = "number";
        this["Func_sqrt_ArgDesc_0"] = "要获取平方根的数字。";
        this["Func_sqrt_Category"] = "Math";
        this["Func_sqrt_CategoryURL"] = "Math";
        this["Func_sqrt_Desc"] = "返回数字的正平方根。";
        this["Func_sqrtpi_Arg_0"] = "Number";
        this["Func_sqrtpi_ArgDesc_0"] = "要乘以 pi 的数字。";
        this["Func_sqrtpi_Category"] = "Math";
        this["Func_sqrtpi_CategoryURL"] = "Math";
        this["Func_sqrtpi_Desc"] = "将指定的数值乘以 pi 并返回结果的平方根。";
        this["Func_stdev_Arg_0"] = "number{0}";
        this["Func_stdev_ArgDesc_0"] = "用于指定总体样本的数值或数值范围。";
        this["Func_stdev_Category"] = "Statistical";
        this["Func_stdev_CategoryURL"] = "Statistical";
        this["Func_stdev_Desc"] = "返回总体样本的标准差。";
        this["Func_subtotal_Arg_0"] = "FunctionNum";
        this["Func_subtotal_Arg_1"] = "Ref{0}";
        this["Func_subtotal_ArgDesc_0"] = "一个数字，表示要计算的函数。将值加 100 可忽略隐藏值。\r\n1 (或 101) - AVERAGE\r\n2 (或 102) - COUNT\r\n4 (或 104) - MAX\r\n5 (或 105) - MIN\r\n6 (或 106) - PRODUCT\r\n7 (或 107) - STDEV\r\n9 (或 109) - SUM\r\n10 (或 110) - VAR\r\n    ";
        this["Func_subtotal_ArgDesc_1"] = "用于查找小计的一个或多个引用。";
        this["Func_subtotal_Category"] = "Math";
        this["Func_subtotal_CategoryURL"] = "Math";
        this["Func_subtotal_Desc"] = "计算多个引用之一中的小计。";
        this["Func_sum_Arg_0"] = "number{0}";
        this["Func_sum_ArgDesc_0"] = "要与其他数字相加的数字。";
        this["Func_sum_Category"] = "Math";
        this["Func_sum_CategoryURL"] = "Math";
        this["Func_sum_Desc"] = "对所有作为自变量给出的数字求和并返回总和。";
        this["Func_syd_Arg_0"] = "cost";
        this["Func_syd_Arg_1"] = "salvage";
        this["Func_syd_Arg_2"] = "life";
        this["Func_syd_Arg_3"] = "per";
        this["Func_syd_ArgDesc_0"] = "资产的初始成本。";
        this["Func_syd_ArgDesc_1"] = "折旧结束时的值。";
        this["Func_syd_ArgDesc_2"] = "资产折旧的期数。";
        this["Func_syd_ArgDesc_3"] = "周期，必须使用与寿命相同的单位。";
        this["Func_syd_Category"] = "Financial";
        this["Func_syd_CategoryURL"] = "Financial";
        this["Func_syd_Desc"] = "返回指定期间内某项资产的年折旧值。";
        this["Func_tan_Arg_0"] = "number";
        this["Func_tan_ArgDesc_0"] = "求取其正切的弧度角。";
        this["Func_tan_Category"] = "Math";
        this["Func_tan_CategoryURL"] = "Math";
        this["Func_tan_Desc"] = "返回指定角度的切线。";
        this["Func_tanh_Arg_0"] = "number";
        this["Func_tanh_ArgDesc_0"] = "求取其双曲正切的弧度角。";
        this["Func_tanh_Category"] = "Math";
        this["Func_tanh_CategoryURL"] = "Math";
        this["Func_tanh_Desc"] = "返回指定角度的双曲正切值。";
        this["Func_text_Arg_0"] = "Value";
        this["Func_text_Arg_1"] = "FormatText";
        this["Func_text_ArgDesc_0"] = "应当格式化的数值。";
        this["Func_text_ArgDesc_1"] = "用于格式化值的数字格式。";
        this["Func_text_Category"] = "TextAndData";
        this["Func_text_CategoryURL"] = "Text_and_Data";
        this["Func_text_Desc"] = "将值转换为基于指定格式的文本。";
        this["Func_time_Arg_0"] = "小时";
        this["Func_time_Arg_1"] = "分钟";
        this["Func_time_Arg_2"] = "秒";
        this["Func_time_ArgDesc_0"] = "一个数字，表示时间的小时。";
        this["Func_time_ArgDesc_1"] = "一个数字，表示时间的分钟。";
        this["Func_time_ArgDesc_2"] = "一个数字，表示时间的秒。";
        this["Func_time_Category"] = "DateAndTime";
        this["Func_time_CategoryURL"] = "Date_and_Time";
        this["Func_time_Desc"] = "返回表示特定时间值的数字。";
        this["Func_timevalue_Arg_0"] = "time_text";
        this["Func_timevalue_ArgDesc_0"] = "表示时间的文本表达式。";
        this["Func_timevalue_Category"] = "DateAndTime";
        this["Func_timevalue_CategoryURL"] = "Date_and_Time";
        this["Func_timevalue_Desc"] = "将表示时间的文本表达式转换为其等效时间值。";
        this["Func_today_Category"] = "DateAndTime";
        this["Func_today_CategoryURL"] = "Date_and_Time";
        this["Func_today_Desc"] = "返回当前日期。";
        this["Func_trim_Arg_0"] = "text";
        this["Func_trim_ArgDesc_0"] = "要从中删除多余空格的文本。";
        this["Func_trim_Category"] = "TextAndData";
        this["Func_trim_CategoryURL"] = "Text_and_Data";
        this["Func_trim_Desc"] = "移除文本中的所有空格，单词之间的单个空格除外。";
        this["Func_true_Category"] = "Logical";
        this["Func_true_CategoryURL"] = "Logical";
        this["Func_true_Desc"] = "返回逻辑值 true。";
        this["Func_trunc_Arg_0"] = "number";
        this["Func_trunc_Arg_1"] = "num_digits";
        this["Func_trunc_ArgDesc_0"] = "要截断的数字。";
        this["Func_trunc_ArgDesc_1"] = "一个数字，指定截断的精度。默认值为零。";
        this["Func_trunc_Category"] = "Math";
        this["Func_trunc_CategoryURL"] = "Math";
        this["Func_trunc_Desc"] = "通过移除数字的小数部分，将数字截断为整数。";
        this["Func_type_Arg_0"] = "value";
        this["Func_type_ArgDesc_0"] = "获取类型的值。";
        this["Func_type_Category"] = "Information";
        this["Func_type_CategoryURL"] = "Information";
        this["Func_type_Desc"] = "返回表示数值类型的数值: 数字 = 1; 文本 = 2; 逻辑值 (true 或 false) = 4; 错误值 = 16; 数组 = 64。";
        this["Func_upper_Arg_0"] = "text";
        this["Func_upper_ArgDesc_0"] = "转换为大写的文本。";
        this["Func_upper_Category"] = "TextAndData";
        this["Func_upper_CategoryURL"] = "Text_and_Data";
        this["Func_upper_Desc"] = "将文本表达式中的所有小写字母转换为大写。";
        this["Func_value_Arg_0"] = "text";
        this["Func_value_ArgDesc_0"] = "要转换的文本表达式。";
        this["Func_value_Category"] = "TextAndData";
        this["Func_value_CategoryURL"] = "Text_and_Data";
        this["Func_value_Desc"] = "将表示数字的文本表达式转换为数字。";
        this["Func_var_Arg_0"] = "number{0}";
        this["Func_var_ArgDesc_0"] = "用于指定总体样本的数值或数值范围。";
        this["Func_var_Category"] = "Statistical";
        this["Func_var_CategoryURL"] = "Statistical";
        this["Func_var_Desc"] = "返回总体样本的方差。";
        this["Func_weekday_Arg_0"] = "Date";
        this["Func_weekday_Arg_1"] = "ReturnType";
        this["Func_weekday_ArgDesc_0"] = "查找星期数的日期。";
        this["Func_weekday_ArgDesc_1"] = "确定一周的编号方案。\r\n1 (默认) = 星期日 (1) 至星期六 (7)\r\n2 = 星期一 (1) 至星期日 (7)\r\n3 = 星期一 (0) 至星期日 (6)\r\n    ";
        this["Func_weekday_Category"] = "DateAndTime";
        this["Func_weekday_CategoryURL"] = "DateAndTime";
        this["Func_weekday_Desc"] = "返回表示指定日期的星期几的数字。";
        this["Func_weeknum_Arg_0"] = "date";
        this["Func_weeknum_Arg_1"] = "returnType";
        this["Func_weeknum_ArgDesc_0"] = "查找星期数的日期。";
        this["Func_weeknum_ArgDesc_1"] = "确定一周的第一天。\r\n1 (默认) = 星期日是一周的第一天。\r\n2 = 星期一是一周的第一天。\r\n    ";
        this["Func_weeknum_Category"] = "DateAndTime";
        this["Func_weeknum_CategoryURL"] = "DateAndTime";
        this["Func_weeknum_Desc"] = "返回指定日期所属的星期数。";
        this["Func_workday_Arg_0"] = "startDate";
        this["Func_workday_Arg_1"] = "days";
        this["Func_workday_Arg_2"] = "holidays";
        this["Func_workday_ArgDesc_0"] = "开始日期。";
        this["Func_workday_ArgDesc_1"] = "从开始日期起抵消的工作日数。";
        this["Func_workday_ArgDesc_2"] = "包含非工作日的一个或多个引用的范围。";
        this["Func_workday_Category"] = "DateAndTime";
        this["Func_workday_CategoryURL"] = "DateAndTime";
        this["Func_workday_Desc"] = "返回从指定日期起指定天数的工作日，不包括任何指定假日。";
        this["Func_year_Arg_0"] = "Date_value";
        this["Func_year_ArgDesc_0"] = "用于获取年份的日期值。";
        this["Func_year_Category"] = "DateAndTime";
        this["Func_year_CategoryURL"] = "Date_and_Time";
        this["Func_year_Desc"] = "返回日期值的年份。";
        this["Func_yearfrac_Arg_0"] = "StartDate";
        this["Func_yearfrac_Arg_1"] = "EndDate";
        this["Func_yearfrac_Arg_2"] = "Basis";
        this["Func_yearfrac_ArgDesc_0"] = "开始日期是该范围内的开始日期。";
        this["Func_yearfrac_ArgDesc_1"] = "结束日期是该范围内的结束日期。";
        this["Func_yearfrac_ArgDesc_2"] = "\r\n      基准确定要使用的天数的基准。\r\n      0 (默认) = US (NASD) 30/360\r\n1 = Actual/actual，\r\n2 = Actual/360，\r\n3 = Actual/365，\r\n4 = European 30/360\r\n    ";
        this["Func_yearfrac_Category"] = "DateAndTime";
        this["Func_yearfrac_CategoryURL"] = "DateAndTime";
        this["Func_yearfrac_Desc"] = "返回表示指定开始日期和结束日期之间指定年份的一部分的分数。";
        this["GenerateTableColumnName"] = "列";
        this["GenerateTableName"] = "表";
        this["LD_Chart_AxisDisplayUnits"] = "Hundreds:Hundreds, Thousands:Thousands, TenThousands:x 10000, HundredThousands:x 100000, Millions:Millions, TenMillions:x 10000000, HundredMillions:x 100000000, ThousandMillions:Billions, MillionMillions:Trillions";
        this["LD_Fallback_ChartEx_Line1"] = "此图表在您的 Excel 版本中不可用。";
        this["LD_Fallback_ChartEx_Line2"] = "编辑此形状或将此工作簿保存为其他文件格式将永久破坏图表。";
        this["LE_AllMustHavGuidsIfAnyHasThem"] = "如果任何现有组具有 Guid，则无法将 GenerateGuidsForGroups 设置为 false。";
        this["LE_ArgumentException_AnchorCellFromOtherWorksheet"] = "指定的单元格与形状不在同一工作表中。";
        this["LE_ArgumentException_ArrayFormulaMustHaveSingleRegion"] = "数组公式只能应用于一个单元格区域。";
        this["LE_ArgumentException_ArrayTooSmall"] = "数组的大小不足以将所有值复制到其中。";
        this["LE_ArgumentException_CannotAddStandardTableStyle"] = "无法将标准表格样式添加到 CustomTableStyleCollection。";
        this["LE_ArgumentException_CannotApplyDVRuleToTotalCell"] = "指定引用中的一个或多个单元格为表格中的全部单元格，无法应用数据验证规则。";
        this["LE_ArgumentException_CannotCreateEmptyColorInfo"] = "空白色不能用于创建 WorkbookColorInfo 实例。";
        this["LE_ArgumentException_CellMustBeOnSameWorksheetAsReferencesCollection"] = "该单元格必须与引用集合来自同一工作表。";
        this["LE_ArgumentException_CellShiftedOffWorksheet"] = "该单元格已被删除或移出工作表，不再代表工作表位置。";
        this["LE_ArgumentException_CellsInTableFromOtherWorksheet"] = "指定的区域与数据表不在同一工作表中。";
        this["LE_ArgumentException_CellValueStringLength"] = "分配给单元格的字符串值的长度不能大于 {0}。";
        this["LE_ArgumentException_ColumnFormulaAlreadyAppliedToCell"] = "该公式已应用于单元格。复制它以用作列公式。";
        this["LE_ArgumentException_ColumnFromDifferentWorksheet"] = "该列与此集合不属于同一工作表。";
        this["LE_ArgumentException_ColumnInputCellFromOtherWorksheet"] = "指定的列输入单元格与数据表格不在同一工作表中。";
        this["LE_ArgumentException_ColumnNotInTable"] = "该列来自另一个表格。";
        this["LE_ArgumentException_ColumnRemovedFromWorksheet"] = "已从工作表中删除该列。";
        this["LE_ArgumentException_ColumnsToRepeatAtLeftOutsideRange"] = "范围超出工作表中可用列的范围。";
        this["LE_ArgumentException_CommentTooLong"] = "注释长度必须小于 255 个字符。";
        this["LE_ArgumentException_CustomViewNameAlreadyExists"] = "名称为 \"{0}\" 的自定义视图已存在。";
        this["LE_ArgumentException_DefaultTableStyleNotInWorkbook"] = "指定的表格样式不在 CustomTableStyles 或 StandardTableStyles 集合中。";
        this["LE_ArgumentException_DisplayTextTooLong"] = "超链接显示文本必须少于 256 个字符。";
        this["LE_ArgumentException_DuplicateDisplayValue"] = "指定的显示值已在集合中。";
        this["LE_ArgumentException_DuplicateFixedDateGroup"] = "指定的 FixedDateGroup 已在集合中。";
        this["LE_ArgumentException_DuplicateTableStyle"] = "指定的样式已在 CustomTableStyleCollection 中。";
        this["LE_ArgumentException_DuplicateTableStyleName_Existing"] = "指定的名称与集合中其他样式的名称匹配。";
        this["LE_ArgumentException_DuplicateTableStyleName_New"] = "指定的样式的名称与集合中的另一样式匹配。";
        this["LE_ArgumentException_DuplicateWorksheetProtectedRangeTitle"] = "标题为 '{0}' 的范围已存在。";
        this["LE_ArgumentException_DV_ArrayFormulaCannotBeUsed"] = "不能将 ArrayFormula 用作 {0}。";
        this["LE_ArgumentException_DV_CellFromOtherWorksheet"] = "该单元格与数据验证规则的集合不属于同一工作表。";
        this["LE_ArgumentException_DV_ConstraintFormulaMustBeNumberOrReference"] = "{0} 必须设置为数字，数字表达式或单个单元格的引用。";
        this["LE_ArgumentException_DV_FormulaCannotBeNull"] = "将数据验证规则应用于工作表时，不能将 {0} 设置为 null。";
        this["LE_ArgumentException_DV_FormulaCannotFindNamedReference"] = "{0} 包含工作簿中不存在的已命名引用。";
        this["LE_ArgumentException_DV_FormulaCannotFindWorksheetReference"] = "{0} 包含工作簿中不存在的工作表上的引用。";
        this["LE_ArgumentException_DV_FormulaCannotReferenceOtherWorkbook"] = "{0} 不能包含对外部工作簿的引用。";
        this["LE_ArgumentException_DV_FormulaInvalidForWorkbookFormat"] = "{0} 引用了 {1} 工作簿格式的无效单元格。";
        this["LE_ArgumentException_DV_InvalidAddress"] = "指定的地址不是有效的单元格或区域地址。";
        this["LE_ArgumentException_DV_InvalidExcelDate"] = "无法在 Excel 中表示指定的日期。";
        this["LE_ArgumentException_DV_InvalidFormula"] = "数据验证规则中使用的公式无效。";
        this["LE_ArgumentException_DV_InvalidMessageLength"] = "{0} 不得超过 {1} 个字符。";
        this["LE_ArgumentException_DV_ListFormulaCannotHaveEmptyString"] = "ValuesFormula 中的字符串常量不得为空字符串。";
        this["LE_ArgumentException_DV_ListFormulaMustBeStringOrReference"] = "必须将 ValuesFormula 设置为字符串常量或对同一工作簿中单个单元格或区域的引用。";
        this["LE_ArgumentException_DV_ListFormulaReferenceMustBeOneDimensional"] = "ValuesFormula 包含具有多个行和列的区域引用。区域必须包含一行或一列。";
        this["LE_ArgumentException_DV_LowerGreaterThanUpperContraint"] = "下限约束的值必须小于或等于上限约束。";
        this["LE_ArgumentException_DV_MustHaveOneAcceptedValue"] = "必须至少指定一个值作为接受值。";
        this["LE_ArgumentException_DV_ReferencesAlreadyContainDVs"] = "指定的引用已包含一个或多个数据验证规则。";
        this["LE_ArgumentException_DV_ReferencesFromOtherWorksheet"] = "引用集合与数据验证规则的集合不属于同一工作表。";
        this["LE_ArgumentException_DV_RegionFromOtherWorksheet"] = "该区域与数据验证规则的集合不属于同一工作表。";
        this["LE_ArgumentException_DV_RuleAppliedOnOtherWorksheet"] = "数据验证规则已应用于另一工作表。";
        this["LE_ArgumentException_DV_UpperLessThanLowerContraint"] = "上限约束的值必须大于或等于下限约束。";
        this["LE_ArgumentException_EditRangeAlreadyOwned"] = "该范围已在工作表的 AllowedEditRanges 中。";
        this["LE_ArgumentException_EditRangeHasRangeFromOtherWorksheet"] = "编辑范围的工作表范围不同于 AllowedEditRanges。";
        this["LE_ArgumentException_EmptyCustomList"] = "列表中必须至少包含一个字符串。";
        this["LE_ArgumentException_EndIndexLessThanZero"] = "范围的结尾必须大于或等于零。";
        this["LE_ArgumentException_FileDoesntContainsWorkbookStream"] = "指定的流或文件不包含有效的工作簿。";
        this["LE_ArgumentException_FormulaReferencesInvalidCells"] = "指定的公式引用工作簿当前文件格式不支持的单元格。";
        this["LE_ArgumentException_HashSetFull"] = "哈希集中的项目过多。";
        this["LE_ArgumentException_HyperlinkAlreadyOwned"] = "超链接已属于超链接集合。";
        this["LE_ArgumentException_HyperlinkSourceFromOtherWorksheet"] = "超链接具有来自不同工作表的源单元格或区域。";
        this["LE_ArgumentException_HyperlinkTargetFromOtherWorkbook"] = "目标来自与超链接所有者不同的工作簿。";
        this["LE_ArgumentException_InfiniteColumnWidth"] = "列宽不能为无穷大。";
        this["LE_ArgumentException_Interval"] = "Interval 参数应为 DateInterval 枚举中的值之一";
        this["LE_ArgumentException_IntervalStr"] = "间隔参数无法转换为 DateInterval 枚举中的值之一";
        this["LE_ArgumentException_InvalidCellAddress"] = "指定的地址不是有效的单元格地址。";
        this["LE_ArgumentException_InvalidCommentPositioningMode"] = "仅 DontMoveOrSizeWithCells 和 MoveAndSizeWithCells ShapePositioningModes 可以应用于注释形状。";
        this["LE_ArgumentException_InvalidCustomFilterOperandNumber"] = "值不能为无穷大或 NaN。";
        this["LE_ArgumentException_InvalidCustomFilterOperator"] = "当比较值不是字符串时，比较运算符不能为 BeginsWith，DoesNotBeginWith，Contains，DoesNotContain，EndsWith 或 DoesNotEndWith。";
        this["LE_ArgumentException_InvalidDatePeriodFilterValue"] = "该值不在范围内。对于月份筛选类型，必须为 1-12。对于季度筛选类型，必须为 1-4。";
        this["LE_ArgumentException_InvalidDpi"] = "指定的 Dpi 值无效。";
        this["LE_ArgumentException_InvalidExcelDate"] = "该值无法在 Excel 中表示为日期。";
        this["LE_ArgumentException_InvalidFileFormat"] = "无效或无法识别的文件格式。";
        this["LE_ArgumentException_InvalidFormula"] = "指定的公式无效。";
        this["LE_ArgumentException_InvalidGradientStopColor"] = "渐变停止中无法使用自动和系统颜色。";
        this["LE_ArgumentException_InvalidNamedReferenceName"] = "该名称不是有效的命名引用名称。";
        this["LE_ArgumentException_InvalidPaletteColor_EmptyOrSystem"] = "空白或系统颜色无法添加至调色板。";
        this["LE_ArgumentException_InvalidPaletteColor_NonOpaque"] = "调色板中只能添加不透明的颜色。";
        this["LE_ArgumentException_InvalidReferencesString"] = "引用值的格式不正确。";
        this["LE_ArgumentException_InvalidRegionAddress"] = "指定的地址不是有效的区域地址。";
        this["LE_ArgumentException_InvalidRowOrColumnRange"] = "无效的行或列范围。";
        this["LE_ArgumentException_InvalidSeriesValues"] = "无效的序列值。必须至少有一个值，并且每个值必须是字符串或可以转换为双精度值的对象。";
        this["LE_ArgumentException_InvalidTarget"] = "超链接目标必须为字符串，WorksheetCell，WorksheetRegion 或 NamedReference。";
        this["LE_ArgumentException_InvalidTopOrBottomFilterValue"] = "该值必须在 1 到 500 之间。";
        this["LE_ArgumentException_InvalidWorksheetName"] = "工作表名称不得包含以下任何字符: : \\ / ? * [ ]";
        this["LE_ArgumentException_InvalidWorksheetNameStartingQuote"] = "工作表名称不能以单引号开头或结尾。";
        this["LE_ArgumentException_LessThanTwoGradientStops"] = "必须至少指定两个梯度停止点。";
        this["LE_ArgumentException_NamedReferenceNameTooLong"] = "已命名引用的名称不得超过 255 个字符。";
        this["LE_ArgumentException_NaNDefaultColumnWidth"] = "NaN 不能用作默认列宽。";
        this["LE_ArgumentException_NewRegionOverlapsFilterArea"] = "该操作正在尝试更改您的工作表上的筛选范围，无法完成。要完成此操作，需要移除工作表中的自动筛选器。";
        this["LE_ArgumentException_NewTableRegionCannotMoveHeaders"] = "新表格区域无法将标题移动到新行。";
        this["LE_ArgumentException_NewTableRegionFromWrongWorksheet"] = "指定的区域与表格不在同一工作表中。";
        this["LE_ArgumentException_NewTableRegionMustHaveDataRows"] = "新表格区域必须包含至少一个数据行。";
        this["LE_ArgumentException_NewTableRegionOverlapOld"] = "新表格区域必须与前一个表格区域重叠。";
        this["LE_ArgumentException_NewTableRegionOverlapsBlockingValue"] = "该表格包含多单元格数组公式或数据表，因此无法将其调整为指定区域的大小。";
        this["LE_ArgumentException_NewTableRegionOverlapsMergedRegion"] = "该表格包含合并的单元格，因此无法将其调整为指定区域的大小。";
        this["LE_ArgumentException_NewTableRegionOverlapsOtherTable"] = "不能将表格的大小调整到指定的区域，因为它包含另一个表格。";
        this["LE_ArgumentException_NoRegionsInArray"] = "指定的数组没有区域。";
        this["LE_ArgumentException_NotEnum"] = "类型 '{0}' 不是枚举";
        this["LE_ArgumentException_NotSupportedCodePage"] = "不支持的代码页";
        this["LE_ArgumentException_NPer"] = "nPer 不能为 0";
        this["LE_ArgumentException_NPerFunction"] = "Nper 函数的参数组合错误";
        this["LE_ArgumentException_PA_PrintAreasCannotOverlap"] = "指定的打印区域与现有打印区域之一重叠。";
        this["LE_ArgumentException_ParentStyleFromOtherWorkbook"] = "指定的样式来自与单元格格式不同的工作簿。";
        this["LE_ArgumentException_PB_CantInsertBreakAtIndex"] = "该集合不支持在索引处插入项目。";
        this["LE_ArgumentException_PB_CantSetBreakAtIndex"] = "该集合不支持在索引处设置项目。";
        this["LE_ArgumentException_PB_MustBeWithinPrintArea"] = "分页符必须在打印区域内。";
        this["LE_ArgumentException_PB_PageBreakCantBeA1Cell"] = "无法在工作表的左上方插入分页符。";
        this["LE_ArgumentException_PB_PageBreakCantBeBeforeLeftColumn"] = "无法在工作表的左侧插入分页符。";
        this["LE_ArgumentException_PB_PageBreakCantBeBeforeTopRow"] = "无法在工作表顶部插入分页符。";
        this["LE_ArgumentException_PB_PageBreaksCannotAddExistingInstance"] = "集合中已存在指定的实例。";
        this["LE_ArgumentException_PB_PageBreaksCannotOverlap"] = "分页符不得与工作表上的其他分页符重叠。";
        this["LE_ArgumentException_PB_PrintAreaMustBeInPrintAreas"] = "分页符位于 PrintAreas 集合中未包含的打印区域中。";
        this["LE_ArgumentException_PB_PrintAreaMustBeOnSameWorksheet"] = "分页符位于与分页符集合不在同一工作表中的打印区域中。";
        this["LE_ArgumentException_Pmt"] = "Pmt 不能为 0";
        this["LE_ArgumentException_PrintAreaShiftedOffWorksheet"] = "分页符位于已移出工作表的打印区域中，不再代表有效的单元格范围。";
        this["LE_ArgumentException_RangeFromOtherWorksheetThanProtectedRange"] = "指定的范围来自与编辑范围不同的工作表。";
        this["LE_ArgumentException_RegionMustBeOnSameWorksheet"] = "该区域必须来自同一工作表。";
        this["LE_ArgumentException_RegionMustBeOnSameWorksheetAsReferencesCollection"] = "该区域必须与引用集合来自同一工作表。";
        this["LE_ArgumentException_RegionsFromMixedWorksheets"] = "数组中指定的所有区域必须来自同一工作表。";
        this["LE_ArgumentException_RegionShiftedOffWorksheet"] = "该区域已移出工作表，不再代表有效的单元格范围。";
        this["LE_ArgumentException_RegionsShiftedOffWorksheet"] = "指定的一个或多个区域已移出工作表，不再代表有效的单元格范围。";
        this["LE_ArgumentException_RowFromDifferentWorksheet"] = "该行与此集合不属于同一工作表。";
        this["LE_ArgumentException_RowInputCellFromOtherWorksheet"] = "指定的行输入单元格与数据表不在同一工作表中。";
        this["LE_ArgumentException_RowRemovedFromWorksheet"] = "该行已从工作表中删除。";
        this["LE_ArgumentException_SelectedWorksheetFromOtherWorkbook"] = "该工作表不属于与这些窗口选项相关的工作簿。";
        this["LE_ArgumentException_ShapeCannotBeAdded"] = "指定的形状无法添加到形状集合中。";
        this["LE_ArgumentException_SourceFromOtherWorksheetThanHyperlink"] = "指定的源单元格或区域来自与超链接不同的工作表。";
        this["LE_ArgumentException_StartIndexLessThanZero"] = "范围的开始必须大于或等于零。";
        this["LE_ArgumentException_StyleNameAlreadyExists"] = "工作簿中已存在名称为 \"{0}\" 的样式。";
        this["LE_ArgumentException_StyleNameTooLong"] = "样式名称不得超过 255 个字符。";
        this["LE_ArgumentException_TableColumnRemovedFromTable"] = "已从表格中移除表格列。";
        this["LE_ArgumentException_TableStyleFromOtherWorkbook"] = "指定的 WorksheetTableStyle 与表格不属于同一工作簿。";
        this["LE_ArgumentException_TargetTooLong"] = "超链接目标地址必须少于 256 个字符。";
        this["LE_ArgumentException_TextLengthGreaterThanMax"] = "形状或注释中的文本长度不能大于 {0}。";
        this["LE_ArgumentException_ToolTipTooLong"] = "超链接工具提示必须少于 256 个字符。";
        this["LE_ArgumentException_TopLeftWindowBounds"] = "窗口边界的左侧和顶部必须在 - 32768 和 32767 之间。";
        this["LE_ArgumentException_WeekdayFirst"] = "WeekdayFirst 参数应介于 FirstDayOfWeek.System 和 FirstDayOfWeek.Saturday 之间";
        this["LE_ArgumentException_WidthHeightWindowBounds"] = "窗口边界的宽度和高度必须在 0 到 65535 之间。";
        this["LE_ArgumentException_WorksheetNameAlreadyExists"] = "工作簿中已存在名称为 \"{0}\" 的工作表。";
        this["LE_ArgumentException_WorksheetNameTooLong"] = "工作表名称的长度必须在 1 到 31 个字符之间。";
        this["LE_ArgumentException_WorksheetProtectedRangeTitleTooLong"] = "编辑范围的标题不得超过 255 个字符。";
        this["LE_ArgumentException_WorksheetScopeFromOtherWorkbook"] = "该工作表与此集合不属于同一工作簿。";
        this["LE_ArgumentNullException_AnchorCell"] = "当形状存在于工作表或组中时，单元格不能为空。";
        this["LE_ArgumentNullException_CustomViewName"] = "自定义视图名称不得为 null 或空白。";
        this["LE_ArgumentNullException_Encoder"] = "图片编码器不得为空白。";
        this["LE_ArgumentNullException_FindNamedReference"] = "要查找的名称不得为 null 或空白。";
        this["LE_ArgumentNullException_FormulaCantBeNull"] = "已命名引用的公式不得为 null 或空白。";
        this["LE_ArgumentNullException_HiddenColumn"] = "无法将空列添加到集合中。";
        this["LE_ArgumentNullException_HiddenRow"] = "无法将空行添加到集合中。";
        this["LE_ArgumentNullException_Image"] = "图片不得为空白。";
        this["LE_ArgumentNullException_NamedReferenceNameCantBeNull"] = "已命名引用的名称不得为 null 或空白。";
        this["LE_ArgumentNullException_SaveStream"] = "无法将工作簿保存为空流。";
        this["LE_ArgumentNullException_SelectedWorksheet"] = "工作簿必须具有有效的所选工作表。";
        this["LE_ArgumentNullException_Shape"] = "无法将空形状添加到集合中。";
        this["LE_ArgumentNullException_SourceFont"] = "源字体不得为 null。";
        this["LE_ArgumentNullException_SourceFormatting"] = "源格式不得为 null。";
        this["LE_ArgumentNullException_StyleName"] = "样式名称不得为 null 或空白。";
        this["LE_ArgumentNullException_UnformattedString"] = "未格式化的字符串不得为 null。";
        this["LE_ArgumentNullException_Workbook"] = "工作簿不能为空。";
        this["LE_ArgumentNullException_WorkbookRequiredToResolveThemeColor"] = "必须指定工作簿以解析主题色。";
        this["LE_ArgumentNullException_WorksheetName"] = "工作表名称不得为 null 或空白。";
        this["LE_ArgumentNullException_WorksheetProtectedRangeTitleCantBeNull"] = "编辑范围的标题不得为 null 或空白。";
        this["LE_ArgumentNullException_WorksheetScope"] = "工作表范围不得为 null。";
        this["LE_ArgumentOutOfRange_RelativeColumnIndex"] = "相对列索引在指定区域之外。";
        this["LE_ArgumentOutOfRange_RelativeRowIndex"] = "相对行索引在指定区域之外。";
        this["LE_ArgumentOutOfRangeException_AnchorPosition"] = "指定位置的一个百分比小于 0。";
        this["LE_ArgumentOutOfRangeException_BadInsertIndex"] = "指定的索引必须大于或等于 0 且小于或等于现有段落数。";
        this["LE_ArgumentOutOfRangeException_BadRemoveAtIndex"] = "索引必须大于零且小于格式化字符串中的段落数。";
        this["LE_ArgumentOutOfRangeException_CollectionIndex"] = "索引超出范围。它必须为非负数且小于集合的大小。";
        this["LE_ArgumentOutOfRangeException_ColumnWidth"] = "列宽必须在 0 到 65535 之间。";
        this["LE_ArgumentOutOfRangeException_DefaultColumnWidth"] = "默认列宽必须在 0 到 65535 之间。";
        this["LE_ArgumentOutOfRangeException_DefaultFontHeight"] = "默认字体高度必须在 20 到 8180 之间。";
        this["LE_ArgumentOutOfRangeException_DefaultRowHeight"] = "默认行高必须在 -1 和 8192 之间。";
        this["LE_ArgumentOutOfRangeException_DuplicateItemSorted"] = "指定的项目已应用排序条件。";
        this["LE_ArgumentOutOfRangeException_FirstVisibleTabIndex"] = "第一个可见标签索引必须大于或等于零。";
        this["LE_ArgumentOutOfRangeException_FontHeight"] = "字体高度必须在 20 到 8180 之间。";
        this["LE_ArgumentOutOfRangeException_GroupAddedToSelf"] = "不能将组添加到自己的形状集合中。";
        this["LE_ArgumentOutOfRangeException_Indent"] = "缩进级别必须在 0 到 250 之间。";
        this["LE_ArgumentOutOfRangeException_IndexNegative"] = "索引必须为非负数。";
        this["LE_ArgumentOutOfRangeException_InvalidCollectionIndex"] = "指定的索引在集合中无效。";
        this["LE_ArgumentOutOfRangeException_InvalidColorInfoTint"] = "色调值必须在 -1.0 到 1.0 之间。";
        this["LE_ArgumentOutOfRangeException_InvalidColumnCount"] = "{0} 不是当前格式的有效列数。该值必须在 {1} 和 {2} 之间。";
        this["LE_ArgumentOutOfRangeException_InvalidColumnIndex"] = "{0} 不是当前格式的有效列索引。该值必须在 {1} 和 {2} 之间。";
        this["LE_ArgumentOutOfRangeException_InvalidGradientStopOffset"] = "梯度停止偏移必须在 0.0 到 1.0 之间。";
        this["LE_ArgumentOutOfRangeException_InvalidRelativeRectangleValueForGradient"] = "矩形渐变的内部矩形的值必须在 0.0 到 1.0 之间。";
        this["LE_ArgumentOutOfRangeException_InvalidRemoveAtIndex_SortConditions"] = "删除排序条件的索引超出范围。";
        this["LE_ArgumentOutOfRangeException_InvalidRowCount"] = "{0} 在当前格式中不是有效的行计数。该值必须在 {1} 和 {2} 之间。";
        this["LE_ArgumentOutOfRangeException_InvalidRowIndex"] = "{0} 不是当前格式的有效行索引。该值必须在 {1} 和 {2} 之间。";
        this["LE_ArgumentOutOfRangeException_InvalidTableStyleAreaStripeExtent"] = "{0} 必须介于 1 到 9 之间 (含 1 和 9)。";
        this["LE_ArgumentOutOfRangeException_LeftPaneWidth"] = "指定的窗格宽度超出有效范围 {0} 和 {1}。";
        this["LE_ArgumentOutOfRangeException_LengthMustBePositive"] = "长度必须大于或等于 1。";
        this["LE_ArgumentOutOfRangeException_MagnificationLevel"] = "视图放大倍数必须在 10 到 400 之间。";
        this["LE_ArgumentOutOfRangeException_Margins"] = "边距必须在 0 到 100 之间。";
        this["LE_ArgumentOutOfRangeException_MaxPagesHorizontally"] = "水平最大页面数必须在 0 到 32767 之间。";
        this["LE_ArgumentOutOfRangeException_MaxPagesVertically"] = "垂直最大页面数必须在 0 到 32767 之间。";
        this["LE_ArgumentOutOfRangeException_MaxRecursionIterations"] = "最大递归迭代次数必须在 1 到 32767 之间。";
        this["LE_ArgumentOutOfRangeException_MaxSortConditions"] = "集合中的排序条件不得超过 {0}。";
        this["LE_ArgumentOutOfRangeException_NegativeStartIndex"] = "开始索引不得为负。";
        this["LE_ArgumentOutOfRangeException_NumberOfCopies"] = "份数必须在 1 到 65535 之间。";
        this["LE_ArgumentOutOfRangeException_Per"] = "每个值应在 0 到 nPer + 1 之间";
        this["LE_ArgumentOutOfRangeException_Rate"] = "速率应大于 -1";
        this["LE_ArgumentOutOfRangeException_Resolution"] = "分辨率必须在 0 到 65535 之间。";
        this["LE_ArgumentOutOfRangeException_RowHeight"] = "行高必须在 0 到 8192 之间。";
        this["LE_ArgumentOutOfRangeException_ScalingFactor"] = "比例因子必须在 10 到 400 之间。";
        this["LE_ArgumentOutOfRangeException_StartPageNumber"] = "起始页码必须在 -32765 和 32767 之间。";
        this["LE_ArgumentOutOfRangeException_TabBarWidth"] = "标签栏的宽度必须在 0 到 1000 之间。";
        this["LE_ArgumentOutOfRangeException_TopPaneHeight"] = "指定的窗格高度超出有效范围 {0} 和 {1}。";
        this["LE_AutoColorNotAllowed"] = "颜色不得为 'Auto'。";
        this["LE_Axis_MajorMinorUnit"] = "majorUnit 参数的值必须大于 minorUnit 参数的值。";
        this["LE_Axis_NoCrossAxis"] = "如果在一个 Axis 对象上设置了 CrossAxis 属性，则必须在所有对象上都设置。如果您的图表只有两个轴，则只有在所有 Axis 对象上未设置 CrossAxis 属性时，才可以自动确定交叉轴。";
        this["LE_Biff8SerializerNotLoaded"] = "'{0}' 格式需要未加载的序列化程序，它包含在 JavaScript 的 infragistics.excel_serialization_biff8.js 文件中";
        this["LE_CategoryAxisBinning_BinWidthAndNumberOfBins"] = "'binWidth' 和 'numberOfBins' 参数互斥。两者都可以不指定，但如果指定了一个，则不得指定另一个。";
        this["LE_ChartGradientFill_EmptyStops"] = "必须包含至少一个梯度停止点。";
        this["LE_ChartObject_DifferentChart"] = "所分配的对象实例已与其他图表相关联，无法分配给该实例。";
        this["LE_ColumnsToRepeatAtLeftAreOutsideAvailableRange"] = "打印选项的列在左侧重复，它们超出了新格式中的可用列范围。";
        this["LE_ComboChartGroupCollection_DoesNotExist"] = "指定的 ComboChartGroup 在此集合中不存在。";
        this["LE_FillPercentInvalid"] = "值 {0} 不是 {1} 属性的有效值。";
        this["LE_FormatLimitError_Indent"] = "缩进超过当前格式提供的 {0} 的最大值。";
        this["LE_FormatLimitError_MacroWorkbook"] = "该工作簿具有 VBA 代码，无法保存为启用宏的工作簿。";
        this["LE_FormatLimitError_MaxColumnIndex"] = "{0} 的列索引大于指定格式支持的 {1} 最大值。";
        this["LE_FormatLimitError_MaxRowIndex"] = "行索引 {0} 超过此格式支持的 {1} 最大值。";
        this["LE_FormulaParseException_ArrayContainsConstants"] = "数组只能包含常量表达式。";
        this["LE_FormulaParseException_ArrayHasEmptyFirstRow"] = "公式中的常量数组第一行中没有项。";
        this["LE_FormulaParseException_ArrayHasMisalignedRows"] = "公式中的常量数组行未对齐。数组中的每一行必须具有相同的列数。";
        this["LE_FormulaParseException_CellReferenceAfterWorkbookName"] = "外部工作簿引用后面必须跟随已命名的引用，而不是单元格引用。";
        this["LE_FormulaParseException_ExtraExpressions"] = "公式末尾有额外的表达式。";
        this["LE_FormulaParseException_FunctionMissingClosingParen"] = "公式中的函数没有右括号。";
        this["LE_FormulaParseException_FunctionNestingTooDeep"] = "公式中的一个函数在其他函数中嵌套太深。";
        this["LE_FormulaParseException_IncorrectNumberOfArguments"] = "公式中的函数未指定正确数量的自变量。";
        this["LE_FormulaParseException_InvalidArguments"] = "公式中的运算符或函数的自变量无效。";
        this["LE_FormulaParseException_InvalidConditionalFormatFormula"] = "条件格式公式不能使用诸如并集或相交，数组常量或结构化表引用之类的引用运算符。";
        this["LE_FormulaParseException_InvalidErrorValue"] = "指定的错误类型无效。它必须是以下值之一: \"#NULL!\"，\"#DIV/0!\"，\"#VALUE!\"，\"#REF!\"，\"#NAME?\"，\"#NUM!\", 或 \"#N/A\".";
        this["LE_FormulaParseException_InvalidFileNameInBrackets"] = "方括号之间的文件名无效。";
        this["LE_FormulaParseException_InvalidStructuredTableReference"] = "结构化表格引用不正确。";
        this["LE_FormulaParseException_InvalidWorkbookName"] = "带引号的工作簿引用不是有效的工作簿文件名。";
        this["LE_FormulaParseException_InvalidWorksheetName"] = "工作表名称无效。";
        this["LE_FormulaParseException_MacroFunctionNotAllowed"] = "'{0}' 函数仅在已命名引用中有效。";
        this["LE_FormulaParseException_Message_PortionWithError"] = "部分错误: {0}";
        this["LE_FormulaParseException_MissingArgumentAfterBinary"] = "公式中的二进制运算符后面缺少操作数。";
        this["LE_FormulaParseException_MissingArgumentAfterParen"] = "左括号后没有表达式。";
        this["LE_FormulaParseException_MissingArgumentAfterUnary"] = "公式中的一元运算符后面没有有效表达式。";
        this["LE_FormulaParseException_MissingArgumentBeforeBinary"] = "公式中的二进制运算符在其前面缺少操作数。";
        this["LE_FormulaParseException_NamedReferenceRefsNeedSheetName"] = "已命名的引用公式中的所有单元格引用必须标识工作表。";
        this["LE_FormulaParseException_NoElementAfterArraySerapator"] = "公式中的元素分隔符后没有数组元素。";
        this["LE_FormulaParseException_NoEqualsSign"] = "公式必须以等号开头。";
        this["LE_FormulaParseException_NoExclamationAfterWorkbookName"] = "工作簿引用后面必须带有感叹号。";
        this["LE_FormulaParseException_NoExclamationAfterWorksheetName"] = "工作表引用后必须带有感叹号。";
        this["LE_FormulaParseException_NoExpressions"] = "公式在等号后没有有效表达式。";
        this["LE_FormulaParseException_NoFileNameAfterBracket"] = "请在左方括号后输入有效的文件名。";
        this["LE_FormulaParseException_NoValidTermAfterWorkbookName"] = "外部工作簿引用后面必须跟随已命名的引用。";
        this["LE_FormulaParseException_NoValidTermAfterWorksheetName"] = "工作表引用后必须跟随一个单元格或已命名的引用。";
        this["LE_FormulaParseException_NoWorksheetAfterWorkbookName"] = "方括号中的工作簿文件名称后必须带有工作表名称。";
        this["LE_FormulaParseException_StringConstantLengthTooLong"] = "指定的公式不能包含超过 {0} 个字符的字符串。";
        this["LE_FormulaParseException_TooLong"] = "对于指定的工作簿格式，公式的最大长度不能超过 {0}。";
        this["LE_FormulaParseException_UnknownFunction"] = "公式中的函数没有有效的函数名称。";
        this["LE_FormulaParseException_UnmatchedOpenBracket"] = "公式中的常量数组没有右括号。";
        this["LE_FormulaParseException_UnmatchedOpenParen"] = "公式中的左括号没有匹配的右括号。";
        this["LE_FormulaParseException_UnmatchedOpenSquareBracket"] = "工作簿文件名称后应有一个右方括号。";
        this["LE_FormulaParseException_WorkbookNameMissingEndQuote"] = "工作簿引用没有结尾引号。";
        this["LE_FormulaParseException_WorksheetRangeMissingEndingName"] = "工作表范围未指定第二个工作表名称。";
        this["LE_GradientStop_InvalidPosition"] = "必须指定0到 1 之间的数字。";
        this["LE_IconSetInvalid"] = "'IconSetNoIcon' 不是 IconSet 属性的有效设置。";
        this["LE_IndexOutOfRangeException_ArrayBounds"] = "索引超出数组范围。";
        this["LE_InvalidEnumArgumentException_DefaultPatternCannotBeUsed"] = "默认 FillPatternStyle 不能用于创建 CellFillPattern。";
        this["LE_InvalidLineWeight"] = "LineWeight 不得小于 0 或大于 1584。";
        this["LE_InvalidOperationException_AnchorCommentBeforeApplyingToCell"] = "注释必须同时设置 TopLeftCornerCell 和 BottomRightCornerCell，或者在将注释应用于单元格之前，它们都必须为 null。";
        this["LE_InvalidOperationException_AnchorShapeBeforeAddingToCollection"] = "将形状添加到工作表或组之前，必须同时设置 TopLeftCornerCell 和 BottomRightCornerCell 设置。";
        this["LE_InvalidOperationException_ArrayFormulaAlreadyApplied"] = "数组公式已应用于单元格区域。首先清除现有单元格范围。";
        this["LE_InvalidOperationException_ArrayFormulaAppliedInTable"] = "数组公式无法应用于存在表格的区域。";
        this["LE_InvalidOperationException_ArrayFormulaInMergedCell"] = "数组公式在合并的单元格中无效。";
        this["LE_InvalidOperationException_BottomRightAnchorFromOtherWorksheet"] = "将形状添加到此集合会将其放置在与其 BottomRightCornerCell 不同的工作表中。";
        this["LE_InvalidOperationException_BuiltInStyleNameCannotBeChanged"] = "内置样式的名称无法更改。";
        this["LE_InvalidOperationException_CannotAddColorsToPaletteDirectly"] = "无法将颜色添加至 WorkbookColorPalette。使用索引器在特定索引处设置颜色。";
        this["LE_InvalidOperationException_CannotAddParagraphDirectly"] = "不能直接添加段落。";
        this["LE_InvalidOperationException_CannotAddTableDirectly"] = "无法将 WorksheetTable 实例直接插入集合中。使用 Add 方法。";
        this["LE_InvalidOperationException_CannotAddTableToRemovedWorksheet"] = "不能将表格添加到已从其所属工作簿中移除的工作表中。";
        this["LE_InvalidOperationException_CannotApplyFilterWhileHeaderRowIsHidden"] = "隐藏表标题行时无法应用筛选器。";
        this["LE_InvalidOperationException_CannotApplyFilterWhileUIIsHidden"] = "隐藏筛选器用户界面时无法应用筛选器。";
        this["LE_InvalidOperationException_CannotInsertTableRow_LossOfData"] = "无法插入 {0}，因为它会将数据移出工作表的底部。";
        this["LE_InvalidOperationException_CannotInsertTableRow_LossOfObject"] = "无法插入 {0}，因为它会移动工作表底部的形状或注释。";
        this["LE_InvalidOperationException_CannotInsertTableRow_SplitBlockingValue"] = "无法插入 {0}，因为它会移动数组公式或数据表中的单元格。";
        this["LE_InvalidOperationException_CannotInsertTableRow_SplitMergedRegion"] = "无法插入 {0}，因为它将移动合并区域中的单元格。";
        this["LE_InvalidOperationException_CannotInsertTableRow_SplitTable"] = "无法插入 {0}，因为它将移动另一个表格中的单元格。";
        this["LE_InvalidOperationException_CannotInsertTableRow_TableOnBottomOfWorksheet"] = "无法插入 {0}，因为表格位于工作表的底部。";
        this["LE_InvalidOperationException_CannotModifyKeysCollection"] = "无法修改 Keys 集合。";
        this["LE_InvalidOperationException_CannotModifyStandardTableStyle"] = "无法修改标准表格样式。";
        this["LE_InvalidOperationException_CannotModifyValuesCollection"] = "无法修改值集合。";
        this["LE_InvalidOperationException_CannotMoveDisconnectedWorksheet"] = "无法移动工作表，因为它不属于工作簿。";
        this["LE_InvalidOperationException_CannotRemoveColorsToPaletteDirectly"] = "无法从 WorkbookColorPalette 中删除颜色。使用 Reset 方法清除所有自定义颜色。";
        this["LE_InvalidOperationException_CannotRemoveNormalStyle"] = "无法删除普通样式。";
        this["LE_InvalidOperationException_CannotSetParentStyleOnStyle"] = "无法将样式设置为属于另一种样式的格式。";
        this["LE_InvalidOperationException_CannotShift_LossOfData"] = "无法将数据移出工作表。";
        this["LE_InvalidOperationException_CannotShift_LossOfObject"] = "无法将对象移出工作表。";
        this["LE_InvalidOperationException_CannotShift_SplitBlockingValue"] = "无法移入数组公式或数据表。";
        this["LE_InvalidOperationException_CannotShift_SplitMergedRegion"] = "无法在合并的区域中移动。";
        this["LE_InvalidOperationException_CannotShift_SplitTable"] = "无法移入表格。";
        this["LE_InvalidOperationException_CantAddChartInChart"] = "不能将一个图表添加到另一个图表的 Shapes 集合中。";
        this["LE_InvalidOperationException_CantAddCustomView"] = "自定义视图不能直接添加到集合中。";
        this["LE_InvalidOperationException_CantAddDataTable"] = "无法直接添加数据表格。";
        this["LE_InvalidOperationException_CantAddMergedRegion"] = "无法直接添加合并的单元格区域。";
        this["LE_InvalidOperationException_CantAddNamedReference"] = "不能直接添加已命名的引用。";
        this["LE_InvalidOperationException_CantAddWorksheet"] = "无法将工作表直接添加到该集合中。";
        this["LE_InvalidOperationException_CantApplyRemovedCustomView"] = "如果自定义视图已从工作簿的自定义视图集合中移除，则无法应用。";
        this["LE_InvalidOperationException_CantChangeArrayFormula"] = "不能更改数组公式的单元格。";
        this["LE_InvalidOperationException_CantChangeDataTable"] = "不能更改数据表格的内部单元格。";
        this["LE_InvalidOperationException_CantModifyCollection"] = "无法修改集合。";
        this["LE_InvalidOperationException_CantOverlapArrayFormula"] = "合并的单元格区域不能与数组公式区域重叠。";
        this["LE_InvalidOperationException_CantOverlapDataTableInterior"] = "如果合并的单元格区域超出了这些单元格的最上一行或最左列，则不能与数据表中的单元格重叠。";
        this["LE_InvalidOperationException_CantSaveEditRangeWithoutRange"] = "工作表的 AllowedEditRanges 必须具有至少一个范围。";
        this["LE_InvalidOperationException_CantSaveWithNoVisibleWorksheets"] = "工作簿中至少必须有一个工作表可见。";
        this["LE_InvalidOperationException_CantSaveWithNoWorksheets"] = "没有工作表的工作簿无法保存";
        this["LE_InvalidOperationException_CantSetCircularityErrorDirectly"] = "圆度误差值不能直接应用于单元格。";
        this["LE_InvalidOperationException_CantSetDataTableDirectly"] = "不能将数据表格设置为单元格上的值。";
        this["LE_InvalidOperationException_CantSetFormulaDirectly"] = "无法直接在单元格上设置公式，而应使用 ApplyFormula 方法或公式实例的 ApplyTo 方法之一。";
        this["LE_InvalidOperationException_CellsInTableMinSize"] = "数据表中的单元格区域必须在每个维度上至少包含两个单元格。";
        this["LE_InvalidOperationException_ChartNotSupported"] = "此格式不支持 WorksheetChart 修改。";
        this["LE_InvalidOperationException_ClearUnknownShapeData"] = "该形状的所有数据未知，请从其集合中移除该形状。";
        this["LE_InvalidOperationException_CollectionLongerThanMaxValue"] = "集合包含的条目数量超过指定的最大值。";
        this["LE_InvalidOperationException_CollectionModifiedWhileEnumerating"] = "在枚举时修改集合。";
        this["LE_InvalidOperationException_CurrentTableRowAddressNeedsOriginCell"] = "要使用当前行解析结构化表格引用，必须指定一个原始单元格。";
        this["LE_InvalidOperationException_CustomViewNoVisibleWorksheets"] = "名为 \"{0}\" 的自定义视图中的至少一个工作表必须可见。";
        this["LE_InvalidOperationException_DataTableAppliedInTable"] = "数据表不能位于存在表的区域中。";
        this["LE_InvalidOperationException_DataTableFormulaCannotBeApplied"] = "数据表公式不能直接应用于单元格。";
        this["LE_InvalidOperationException_DataTableInMergedCell"] = "数据表格的内部单元格不能为合并单元格区域的一部分。";
        this["LE_InvalidOperationException_DataTableRemoved"] = "从工作表中删除数据表格后，无法设置行和列输入单元格。";
        this["LE_InvalidOperationException_DeprecatedFillColorSetWithGradientFill"] = "在单元格上设置渐变时，无法设置填充图案颜色。";
        this["LE_InvalidOperationException_EncryptedWorkbooksNotSupported"] = "正在加载的工作簿已加密。不支持加密的工作簿。";
        this["LE_InvalidOperationException_ExtensionDoesntMatchCurrentFormat"] = "保存文件的文件扩展名与工作簿的当前格式不匹配。";
        this["LE_InvalidOperationException_FixedValuesFilterMustAcceptAValue"] = "不能拥有不允许值的 FixedValuesFilter。";
        this["LE_InvalidOperationException_FormattedStringAlreadyOwned"] = "格式化的字符串已经是另一个单元格或注释的值。首先复制它，并将复制内容应用于新的单元格或形状。";
        this["LE_InvalidOperationException_FormattedStringNotOwned"] = "格式化的字符串或文本未应用于单元格或形状时，无法访问字体属性。";
        this["LE_InvalidOperationException_FormattedTextAlreadyOwned"] = "格式化的字符串已经是另一个形状的值。首先复制它，并将复制内容应用于新的单元格或形状。";
        this["LE_InvalidOperationException_FormulaAlreadyOwned"] = "该公式已应用于另一个单元格。";
        this["LE_InvalidOperationException_FormulaReferencesInvalidCells"] = "该公式引用工作簿当前文件格式不支持的单元格。";
        this["LE_InvalidOperationException_GetBoundsBeforeAnchorsSet"] = "在设置锚单元格之前，形状没有边界。";
        this["LE_InvalidOperationException_HiddenWorksheetCannotBeSelected"] = "无法选择隐藏的工作表。";
        this["LE_InvalidOperationException_HyperlinkSealed"] = "无法修改超链接。";
        this["LE_InvalidOperationException_ImageDisposed"] = "WorksheetImage 的图像已被处理或无效。";
        this["LE_InvalidOperationException_InputCellsBothNull"] = "列输入单元格和行输入单元格均不能为 null。";
        this["LE_InvalidOperationException_InputCellsInTable"] = "输入的单元格不能在数据表格单元格内。";
        this["LE_InvalidOperationException_InputCellsSame"] = "列输入单元格和行输入单元格不能为同一单元格。";
        this["LE_InvalidOperationException_InvalidCharacterRange"] = "字体覆盖的字符范围不再存在于格式化字符串中。";
        this["LE_InvalidOperationException_InvalidFormatOptionsInWholeTableArea"] = "在 WholeTable 表格区域中，指定的 FormatOptions 格式值无效。";
        this["LE_InvalidOperationException_InvalidFormatString"] = "指定的格式字符串无效。";
        this["LE_InvalidOperationException_InvalidFormatString_GetTextCall"] = "单元格的格式字符串无效。要在设置 FormatString 时收到通知，请将 Workbook.ValidateFormatStrings 设置为 True。";
        this["LE_InvalidOperationException_InvalidForWorkbookFormat"] = "公式不适用于指定格式。";
        this["LE_InvalidOperationException_InvalidHeaderCellColumnAreaFormatProperty"] = "不能在 HeaderCell 表格列区域格式中设置顶部边框值。";
        this["LE_InvalidOperationException_InvalidHeaderRowAreaFormatProperty"] = "不能在 HeaderRow 表格区域格式中设置顶部边框值。";
        this["LE_InvalidOperationException_InvalidTableStyleAreaFontProperty"] = "无法在表格样式区域设置 {0} 字体值。";
        this["LE_InvalidOperationException_InvalidTableStyleAreaFormatOptions"] = "指定的 FormatOptions 格式值在表格样式区域无效。";
        this["LE_InvalidOperationException_InvalidTableStyleAreaFormatProperty"] = "不能在表格样式区域设置 {0} 格式值。";
        this["LE_InvalidOperationException_InvalidTotalsCellColumnAreaFormatProperty"] = "无法在 TotalCell 表格列区域格式中设置底部边框值。";
        this["LE_InvalidOperationException_InvalidTotalsRowAreaFormatProperty"] = "无法在 TotalsRow 表格区域格式中设置底部边框值。";
        this["LE_InvalidOperationException_InvalidWholeTableAreaFormatProperty"] = "在 WholeTable 表格区域格式中只能设置边缘边界值。";
        this["LE_InvalidOperationException_LastColumnBeforeFirst"] = "区域中的最后一列应大于或等于第一列。";
        this["LE_InvalidOperationException_LastRowBeforeFirst"] = "区域中的最后一行应大于第一行。";
        this["LE_InvalidOperationException_MaxCellFormats"] = "excel 文件中不同单元格格式的最大数量为: {0}";
        this["LE_InvalidOperationException_MaxColors"] = "excel 工作簿中的最大颜色数为: {0}";
        this["LE_InvalidOperationException_MaxColumns"] = "当前格式的 excel 工作表中的最大列数为: {0}";
        this["LE_InvalidOperationException_MaxFonts"] = "工作簿中的字体数量不得超过 {0}。";
        this["LE_InvalidOperationException_MaxFormattedStrings"] = "工作簿中的唯一字符串数不得超过 {0}。";
        this["LE_InvalidOperationException_MaxRows"] = "当前格式的 excel 工作表中的最大行数为: {0}";
        this["LE_InvalidOperationException_MergedCellCrossesDataTableLeftColumn"] = "为数据表格指定的单元格的最左列包含一个合并的单元格区域，该区域延伸到这些单元格区域之外。";
        this["LE_InvalidOperationException_MergedCellCrossesDataTableTopLeftCell"] = "为数据表格指定的单元格的左上角单元格是合并单元格的一部分，该单元格延伸到这些单元格区域之外。";
        this["LE_InvalidOperationException_MergedCellCrossesDataTableTopRow"] = "为数据表格指定的单元格的第一行包含一个合并的单元格区域，该区域延伸到那些单元格区域之外。";
        this["LE_InvalidOperationException_MergedCellsAppliedInTable"] = "表中的单元格无法合并。";
        this["LE_InvalidOperationException_NamedReferenceNameAlreadyExists"] = "表格或工作簿中具有相同范围的已命名引用使用名称 \"{0}\"。";
        this["LE_InvalidOperationException_NoRegionHasBeenSpecified"] = "未指定任何区域。";
        this["LE_InvalidOperationException_NoWorksheetContextToSetShapeBounds"] = "当 shapes 集合未与工作表关联时，无法调用 Add 的此过载。调用带有工作表实例的 Add 的过载。";
        this["LE_InvalidOperationException_OverlappingTable"] = "指定区域中还有另一个表格。";
        this["LE_InvalidOperationException_ReadOnlyFont"] = "字体对象是只读的，无法更改。";
        this["LE_InvalidOperationException_ReadOnlyFormat"] = "格式对象是只读的，无法更改。";
        this["LE_InvalidOperationException_RelativeR1C1AddressNeedsOriginCell"] = "要解析相对 R1C1 地址，必须指定一个原始单元格。";
        this["LE_InvalidOperationException_ResizedTableMustBeOnWorksheet"] = "表格必须位于要调整大小的工作表上。";
        this["LE_InvalidOperationException_ResolvedFormatCannotBeModified"] = "解析的单元格格式为只读格式，无法更改。";
        this["LE_InvalidOperationException_ShapeCantChangeOrientation"] = "此形状不能旋转或翻转。";
        this["LE_InvalidOperationException_ShapeFillSolidIsImmutable"] = "ShapeFillSolid 是不可变的。创建一个新的 ShapeFillSolid。";
        this["LE_InvalidOperationException_ShapeInAnotherCollection"] = "该形状已存在于另一个工作表或形状组中。";
        this["LE_InvalidOperationException_ShapeOutlineSolidIsImmutable"] = "ShapeOutlineSolid 是不可变的。创建一个新的 ShapeOutlineSolid。";
        this["LE_InvalidOperationException_ShowFilterUIWhileHeaderRowHidden"] = "隐藏标题行时无法显示筛选器用户界面。";
        this["LE_InvalidOperationException_SystemColorsAccessedFromWrongThread"] = "无法从后台线程中访问 SystemColors。";
        this["LE_InvalidOperationException_TableReferenceMustBeUsedFromInsideTable"] = "该公式具有结构化表格引用，只能在表格内部使用。";
        this["LE_InvalidOperationException_TableReferenceToMissingTable"] = "公式中引用了不存在的表格。";
        this["LE_InvalidOperationException_TableReferenceToMissingTableColumn"] = "该公式引用了不存在的表格列。";
        this["LE_InvalidOperationException_TopLeftAnchorFromOtherWorksheet"] = "将形状添加到此集合会将其放置在与其 TopLeftCornerCell 不同的工作表中。";
        this["LE_InvalidOperationException_TotalsRowCannotBeShownInLastRow"] = "当表格占据工作表的最后一行时，无法显示总计行。";
        this["LE_InvalidOperationException_UnknownBIFFFormat"] = "工作簿文件的格式未知。";
        this["LE_InvalidOperationException_UnsupportedBIFFFormat"] = "工作簿文件已保存为 {0}，不支持该格式。";
        this["LE_InvalidOperationException_WorkbookDataViolatesFormatLimits"] = "该工作簿包含的数据将超过指定格式所施加的限制。";
        this["LE_InvalidRegion"] = "无效的区域地址。";
        this["LE_InvalidValueType"] = "'{0}' 不是 ValueType 属性的有效值。";
        this["LE_LocationNotSingleRowOrColumn"] = "位置引用无效，因为单元格不在同一列或同一行中。选择全部在单个列或行中的单元格。";
        this["LE_LocationOrDataAreaInvalid"] = "位置或数据范围的引用无效。";
        this["LE_LocationWorksheetMismatch"] = "位置必须来自此工作表。";
        this["LE_NotSingleTargetFormula"] = "只能支持单个目标公式。";
        this["LE_NotSupportedException_CellType"] = "{0} 不是支持的单元格值类型。";
        this["LE_NotSupportedException_NoPackageFactory"] = "packageFactory 不得为空。从 Excel2007 工作簿格式加载并使用 Infragistics2.Documents.Excel 程序集时，必须提供 IPackageFactory 来处理数据打包。如果您使用的是 DotNet Framework 3.0 或更高版本，请改用 Infragistics3.Documents.Excel 程序集，打包将由 WindowsBase 类处理。";
        this["LE_OpenPackagingNonConformanceException_ContainsDublinCoreRefinements"] = "IPackagePart 是核心属性关系，除 'dcterms:created' 和 'dcterms:modified' 之外，还包含对都柏林核心元素的改进。";
        this["LE_OpenPackagingNonConformanceException_ContainsXmlLanguageAttribute"] = "IPackagePart 是核心属性关系，并包含拥有 'xml:lang' 属性的元素。";
        this["LE_OpenPackagingNonConformanceException_CorePropertiesRelationshipAlreadyProcessed"] = "IPackagePart 是核心属性关系，但已经为关联的 Ipackage 处理过。";
        this["LE_OpenPackagingNonConformanceException_DuplicatePartName"] = "具有相同名称的 IPackagePart 已属于此 IPackage。Ipackage 不能包含具有相同名称的部件。注意，检查重复值不区分大小写。";
        this["LE_OpenPackagingNonConformanceException_UsesMarkupCompatibilityNamespace"] = "IPackagePart 是核心属性关系，并使用标记兼容性命名空间。";
        this["LE_OpenPackagingNonConformanceException_XmlContainsDocumentTypeDefinition"] = "IPackagePart 包含 DTD (文档类型定义) 声明。Open Packaging Convention 规则禁止在 DTD 声明中使用 XML 内容。";
        this["LE_OpenPackagingNonConformanceException_XsiTypeAttributeInvalid"] = "IPackagePart 是核心属性关系，并包含拥有 'xsi:type' 属性的元素，或包含要求但没有 'xsi:type' 属性的元素。";
        this["LE_OpenXmlSerializerNotLoaded"] = "'{0}' 格式需要未加载的序列化程序，它包含在 JavaScript 的 infragistics.excel_serialization_openxml.js 文件中";
        this["LE_PercentageValueOutOfRange"] = "百分比值 {0} 必须在 0 到 100 之间。";
        this["LE_PercentileValueOutOfRange"] = "百分点值 {0} 必须在 0 到 100 之间。";
        this["LE_PercentRangeInvalid"] = "{0} 必须小于 {1}。";
        this["LE_RowsToRepeatAtTopAreOutsideAvailableRange"] = "打印选项的行在顶部重复，它们超出了新格式中的可用行范围。";
        this["LE_Serialization_NoPrimaryCategoryAxis"] = "图表类型 '{0}' 需要主类别轴。将主分类轴添加到图表的 AxisCollection。";
        this["LE_Serialization_NoPrimaryValueAxis"] = "图表类型 '{0}' 需要主值轴。将主值轴添加到图表的 AxisCollection。";
        this["LE_Series_ChartType_ChartEx"] = "'{0}' 对于 '{1}' 图表中的一系列 ChartType 无效。";
        this["LE_Series_ChartType_InvalidForComboChart"] = "图表类型 '{0}' 不适用于组合图表。";
        this["LE_Series_ChartType_NonCombo"] = "该系列的图表类型由父图表的类型 ('{0}') 决定，无法设置。将父图表的 ChartType 属性设置为 '{1}'。";
        this["LE_Series_Explosion_OutOfRange"] = "Explosion 属性支持 0 到 400 (含 0 和 400) 范围内的值。";
        this["LE_Series_InvalidAxisGroup"] = "无法将 AxisGroup 属性设置为 '{0}'，因为同一轴上存在一系列 '{1}' 类型，且与一系列 '{2}' 类型无法共享同一轴。";
        this["LE_Series_InvalidSeriesTypeForComboChart"] = "组合图中不能使用 '{0}' 类型系列。";
        this["LE_Series_NoPrimaryAxis"] = "主轴上必须绘制至少一个系列。将至少一个系列的 AxisGroup 属性更改为 'Primary'。";
        this["LE_Series_OwningSeries_NotClusteredColumn"] = "OwningSeries 属性只能设置为帕累托图中的群集列系列。";
        this["LE_Series_OwningSeries_NotParetoLine"] = "只能为帕累托图中的线系列设置 OwningSeries 属性。";
        this["LE_Series_OwningSeries_Same"] = "OwningSeries 无法引用自身。";
        this["LE_Series_SeriesType_ChartEx"] = "SeriesType 值 '{0}' 对于 '{1}' 图表无效。";
        this["LE_Series_SeriesType_NonCombo"] = "Type 属性仅适用于组合图表，不能为类型为 '{0}' 的图表进行设置。";
        this["LE_SetValue_Formula"] = "'{0}' 值类型仅对公式有效。请改用 SetFormula 方法。";
        this["LE_SetValue_NonNumeric"] = "值参数不适用于值类型 '{0}'。使用仅接受值类型的过载。";
        this["LE_SetValue_Numeric"] = "必须为值类型 '{0}' 指定值参数。使用同时包含值和值类型的过载。";
        this["LE_WorksheetChart_ChartType_ChartEx_CannotTransition"] = "ChartType 属性无法从 '{0}' 更改为 '{1}'。";
        this["LE_WorksheetChart_ChartType_ComboChart_From"] = "组合图的 ChartType 属性不能更改为 '{0}'。";
        this["LE_WorksheetChart_ChartType_ComboChart_To"] = "类型为 '{0}' 的图表无法更改为 'Combo'。可以使用 AddChart 方法创建新的组合图，但不支持将现有的图表更改为组合图。";
        this["LE_WorksheetChart_ComboChart_NotEnoughSeries"] = "组合图至少需要 2 个系列。向图表的 SeriesCollection 添加更多项。";
        this["LE_WorksheetChart_MissingRequiredAxis_StockCharts"] = "'{0}' 图表需要主分类轴，主值轴，次分类轴和次值轴。";
        this["LE_WorksheetChart_NotEnoughSeries"] = "'{0}' 图表需要最少 {1} 个系列。要使用此图表类型，必须向 SeriesCollection 添加更多项。";
        this["LE_WorksheetChart_Save_Series"] = "'{0}' 图表必须包含至少一个系列。在尝试保存工作簿之前，向图表中添加更多系列。";
        this["LE_WorksheetChart_Save_Series_Pareto"] = "'Pareto' 图表必须包含一个 'ColumnClustered' 系列和一个 'Pareto' 系列。在尝试保存工作簿之前，将适当的系列添加到图表中。";
        this["LE_WorksheetChart_SetComboChartSourceData_InvalidChartTypes"] = "一种或多种指定图表类型不适用于组合图表: {0}";
        this["LE_WorksheetChart_SetComboChartSourceData_NotAComboChart"] = "无法调用 SetComboChartSourceData，因为当前图表类型为 '{0}'。将 ChartType 更改为 'Combo'。";
        this["LE_WorksheetChart_SetComboChartSourceData_SeriesChartTypesNotSupported"] = "对于 '{0}' 图表，seriesChartTypes 参数必须为 null。";
        this["LE_WorksheetChart_SetSourceData_NotEnoughSeries"] = "组合图至少需要 2 个系列。将 'dataRange' 参数更改为将产生至少 2 个系列的范围。";
        this["LE_WorksheetChart_SetSourceData_TooManyAxes"] = "图表类型的指定组合要求的轴数超过最大允许值。";
        this["LE_WorksheetChart_StockChartNotSupported"] = "当前不支持图表类型 '{0}' 的编辑。";
        this["LE_WorksheetChart_UnknownChartNotSupported"] = "此图表是从现有工作表加载的，但无法确定其图表类型。目前不支持未知图表类型的编辑。";
        this["LER_ArgumentOutOfRangeException_OutlineLevel"] = "大纲级别必须在0到 7 之间。";
        this["LER_Exception_KeyNotFound"] = "未找到密钥。";
        this["LER_Exception_MergedRegionsOverlap"] = "合并的单元格区域不能重叠。";
        this["TableHeaderRowDescription"] = "标题行";
        this["TableInsertRowDescription"] = "插入行";
        this["TableTotalsRowDescription"] = "总计行";
        this["Value_UCErrorCode_Div"] = "#DIV/0!";
        this["Value_UCErrorCode_Fail"] = "#FAIL";
        this["Value_UCErrorCode_NA"] = "#N/A";
        this["Value_UCErrorCode_Name"] = "#NAME?";
        this["Value_UCErrorCode_Null"] = "#NULL!";
        this["Value_UCErrorCode_Num"] = "#NUM!";
        this["Value_UCErrorCode_Ok"] = "#OK";
        this["Value_UCErrorCode_Reference"] = "#REF!";
        this["Value_UCErrorCode_Unknown"] = "#N/A";
        this["Value_UCErrorCode_Value"] = "#VALUE!";
        this["WorkbookColorInfo_Automatic_Description"] = "自动";
        this["WorkbookColorInfo_Description"] = "颜色信息: {0}";
        this["WorkbookColorInfo_WithTint_Description"] = "颜色信息: {0}，色调: {1}";
        this["WorksheetShapeSerialization_GroupName"] = "组";
        this["WorksheetShapeSerialization_ImageName"] = "图片";
        this["WorksheetShapeSerialization_ShapeName"] = "形状";
    }
}
