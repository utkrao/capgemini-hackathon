/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, typeCast, Point_$type, EnumUtil, markType, Number_$type, fromEnum } from "igniteui-react-core";
import { CT_GroupTransform2D } from "./CT_GroupTransform2D";
import { ST_Angle } from "./ST_Angle";
import { CT_Transform2D } from "./CT_Transform2D";
import { CT_Point2D } from "./CT_Point2D";
import { ExcelUtils } from "./ExcelUtils";
import { ST_CoordinateUnqualified } from "./ST_CoordinateUnqualified";
import { ST_Coordinate } from "./ST_Coordinate";
import { CT_PositiveSize2D } from "./CT_PositiveSize2D";
import { ST_PositiveCoordinate } from "./ST_PositiveCoordinate";
import { ImageHolder } from "./ImageHolder";
import { MemoryStream } from "igniteui-react-core";
import { ExcelImage } from "./ExcelImage";
import { FillPatternStyle_$type } from "./FillPatternStyle";
import { ST_PatternType_$type } from "./ST_PatternType";
import { ST_HorizontalAlignment_$type } from "./ST_HorizontalAlignment";
import { ST_SystemColorVal_$type } from "./ST_SystemColorVal";
import { Color } from "igniteui-react-core";
import { SystemColorsInternal } from "./SystemColorsInternal";
import { ST_VerticalAlignment_$type } from "./ST_VerticalAlignment";
import { ColorsInternal } from "./ColorsInternal";
import { WorkbookColorInfo } from "./WorkbookColorInfo";
import { Workbook } from "./Workbook";
import { WorksheetCellAddress } from "./WorksheetCellAddress";
import { Tuple } from "igniteui-react-core";
import { ST_PresetColorVal_$type } from "./ST_PresetColorVal";
import { wrapNullable, nullableEquals, nullableNotEquals } from "igniteui-react-core";
import { stringStartsWith } from "igniteui-react-core";
import { IEG_ColorChoiceVisitor$2_$type } from "./IEG_ColorChoiceVisitor$2";
import { IEG_FillPropertiesVisitor$2_$type } from "./IEG_FillPropertiesVisitor$2";
import { ST_HexColorRGB } from "./ST_HexColorRGB";
import { ColorTransform_LumMod } from "./ColorTransform_LumMod";
import { ColorTransform_LumOff } from "./ColorTransform_LumOff";
import { ST_Percentage } from "./ST_Percentage";
import { WorkbookColorTransform } from "./WorkbookColorTransform";
import { XlsxUtilities_ColorTransformsApplicator } from "./XlsxUtilities_ColorTransformsApplicator";
/**
 * @hidden
 */
export let XlsxUtilities = /*@__PURE__*/ (() => {
    class XlsxUtilities extends Base {
        static ag(a) {
            let b = a._getBoundsInTwips();
            return ((() => {
                let $ret = new CT_GroupTransform2D();
                $ret.j = toNullable(ST_Angle.$, ST_Angle.a(a._b6));
                $ret.i = toNullable(Boolean_$type, a.flippedHorizontally);
                $ret.k = toNullable(Boolean_$type, a.flippedVertically);
                $ret.a = ((() => {
                    let $ret = new CT_Point2D();
                    $ret.a = new ST_Coordinate(1, ST_CoordinateUnqualified.a(ExcelUtils.dm(b.x)));
                    $ret.b = new ST_Coordinate(1, ST_CoordinateUnqualified.a(ExcelUtils.dm(b.y)));
                    return $ret;
                })());
                $ret.b = ((() => {
                    let $ret = new CT_PositiveSize2D();
                    $ret.a = new ST_PositiveCoordinate(1, ExcelUtils.dm(b.width));
                    $ret.b = new ST_PositiveCoordinate(1, ExcelUtils.dm(b.height));
                    return $ret;
                })());
                $ret.l = ((() => {
                    let $ret = new CT_Point2D();
                    $ret.a = new ST_Coordinate(1, ST_CoordinateUnqualified.a(ExcelUtils.dm(b.x)));
                    $ret.b = new ST_Coordinate(1, ST_CoordinateUnqualified.a(ExcelUtils.dm(b.y)));
                    return $ret;
                })());
                $ret.m = ((() => {
                    let $ret = new CT_PositiveSize2D();
                    $ret.a = new ST_PositiveCoordinate(1, ExcelUtils.dm(b.width));
                    $ret.b = new ST_PositiveCoordinate(1, ExcelUtils.dm(b.height));
                    return $ret;
                })());
                return $ret;
            })());
        }
        static ah(a) {
            let b = a._getBoundsInTwips();
            return ((() => {
                let $ret = new CT_Transform2D();
                $ret.j = toNullable(ST_Angle.$, ST_Angle.a(a._b6));
                $ret.i = toNullable(Boolean_$type, a.flippedHorizontally);
                $ret.k = toNullable(Boolean_$type, a.flippedVertically);
                $ret.a = ((() => {
                    let $ret = new CT_Point2D();
                    $ret.a = new ST_Coordinate(1, ST_CoordinateUnqualified.a(ExcelUtils.dm(b.x)));
                    $ret.b = new ST_Coordinate(1, ST_CoordinateUnqualified.a(ExcelUtils.dm(b.y)));
                    return $ret;
                })());
                $ret.b = ((() => {
                    let $ret = new CT_PositiveSize2D();
                    $ret.a = new ST_PositiveCoordinate(1, ExcelUtils.dm(b.width));
                    $ret.b = new ST_PositiveCoordinate(1, ExcelUtils.dm(b.height));
                    return $ret;
                })());
                return $ret;
            })());
        }
        static v(a) {
            let b = typeCast(ImageHolder.$, a.e);
            if (b == null) {
                {
                    let c = new MemoryStream(2, a.b);
                    try {
                        b = XlsxUtilities.w(c, a.d);
                    }
                    finally {
                        if (c != null) {
                            c.dispose();
                        }
                    }
                }
                a.e = b;
            }
            return b;
        }
        static w(a, b) {
            let c = new ExcelImage(1, b, a);
            return new ImageHolder(c, b);
        }
        static a(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                case 0: return 0;
                default: return 1;
            }
        }
        static g(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                case 8: return 8;
                case 9: return 9;
                case 10: return 10;
                case 11: return 11;
                case 12: return 12;
                case 13: return 13;
                default: return 10;
            }
        }
        static b(a) {
            switch (a) {
                case 9: return 9;
                case 11: return 11;
                case 3: return 3;
                case 4: return 4;
                case 6: return 6;
                case 7: return 7;
                case 2: return 2;
                case 10: return 10;
                case 12: return 12;
                case 8: return 8;
                case 0: return 0;
                case 13: return 13;
                case 5: return 5;
                case 1: return 1;
                default: return 0;
            }
        }
        static c(a) {
            switch (a) {
                case 0: return 1;
                case 1: return 0;
                default: return 1;
            }
        }
        static d(a) {
            switch (a) {
                case 2: return 2;
                case 0: return 0;
                case 1: return 1;
                default: return 2;
            }
        }
        static e(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 2;
                case 2: return 1;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                case 8: return 8;
                case 9: return 9;
                case 10: return 10;
                default: return 0;
            }
        }
        static t(a) {
            switch (a) {
                case 0: return 0;
                case 2: return 2;
                case 6: return 4;
                case 7: return 6;
                case 4: return 5;
                case 5: return 7;
                case 1: return 1;
                case 3: return 3;
                default: return 2;
            }
        }
        static u(a) {
            switch (a) {
                case 0: return 0;
                case 4: return 4;
                case 2: return 2;
                case 7: return 7;
                case 3: return 3;
                case 6: return 6;
                case 5: return 5;
                case 1: return 1;
                default: return 0;
            }
        }
        static a9(a) {
            return wrapNullable(Boolean_$type, (a));
        }
        static a8(a) {
            let b = toNullable(Boolean_$type, a);
            return wrapNullable(Boolean_$type, (b));
        }
        static ba(a) {
            if (nullableEquals(a, null)) {
                return toNullable(FillPatternStyle_$type, null);
            }
            return toNullable(FillPatternStyle_$type, XlsxUtilities.f(a.value));
        }
        static f(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                case 8: return 8;
                case 9: return 9;
                case 10: return 10;
                case 11: return 11;
                case 12: return 12;
                case 13: return 13;
                case 14: return 14;
                case 15: return 15;
                case 16: return 16;
                case 17: return 17;
                case 18: return 18;
                default: return 0;
            }
        }
        static h(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                default: return 0;
            }
        }
        static j(a) {
            switch (a) {
                case 4: return 0;
                case 0: return 1;
                case 1: return 2;
                case 2: return 33;
                case 3: return 34;
                default: return 0;
            }
        }
        static i(a) {
            switch (a) {
                case 0: return 0;
                case 2: return 1;
                case 3: return 2;
                default: return 1;
            }
        }
        static l(a) {
            if (nullableEquals(a, null)) {
                return -1;
            }
            return XlsxUtilities.k(a.value);
        }
        static k(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                default: return 0;
            }
        }
        static m(a) {
            switch (a) {
                case 1: return 0;
                case 3: return 2;
                case 4: return 3;
                case 0: return 4;
                case 2: return 5;
                case 5: return 6;
                case 6: return 1;
                default: return 4;
            }
        }
        static q(a) {
            switch (a) {
                case 3: return 3;
                case 1: return 1;
                case 2: return 2;
                case 0: return 0;
                default: return 3;
            }
        }
        static n(a) {
            switch (a) {
                case 2: return 2;
                case 0: return 0;
                case 1: return 1;
                default: return 0;
            }
        }
        static o(a) {
            switch (a) {
                case 0: return 2;
                case 2: return 0;
                case 1: return 1;
                default: return 2;
            }
        }
        static p(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                default: return 1;
            }
        }
        static r(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                case 0: return 0;
                case 3: return 3;
                default: return 0;
            }
        }
        static s(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                default: return 0;
            }
        }
        static x(a) {
            switch (a) {
                case 2: return 3;
                case 0: return 0;
                case 1: return 2;
                default: return 3;
            }
        }
        static an(a) {
            switch (a) {
                case 9: return 9;
                case 11: return 11;
                case 3: return 3;
                case 4: return 4;
                case 6: return 6;
                case 7: return 7;
                case 2: return 2;
                case 10: return 10;
                case 12: return 12;
                case 8: return 8;
                case -1:
                case 0: return 0;
                case 13: return 13;
                case 5: return 5;
                case 1: return 1;
                default: return 0;
            }
        }
        static ar(a) {
            switch (a) {
                case 2: return 2;
                case 0: return 0;
                case 1: return 1;
                default: return 2;
            }
        }
        static as(a) {
            switch (a) {
                case 0: return 0;
                case 2: return 1;
                case 1: return 2;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                case 8: return 8;
                case 9: return 9;
                case 10: return 10;
                default: return 0;
            }
        }
        static at(a) {
            switch (a) {
                case 0: return 0;
                case 2: return 2;
                case 4: return 6;
                case 6: return 7;
                case 5: return 4;
                case 7: return 5;
                case 1: return 1;
                case 3: return 3;
                default: return 2;
            }
        }
        static au(a) {
            switch (a) {
                case 0: return 0;
                case 4: return 4;
                case 2: return 2;
                case 7: return 7;
                case 3: return 3;
                case 6: return 6;
                case 5: return 5;
                case 1: return 1;
                default: return 0;
            }
        }
        static ao(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                case 0: return 0;
                default: return 1;
            }
        }
        static ap(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                case 8: return 8;
                case 9: return 9;
                case 10: return 10;
                case 11: return 11;
                case 12: return 12;
                case 13: return 13;
                default: return 10;
            }
        }
        static aq(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                default: return 0;
            }
        }
        static av(a) {
            switch (a) {
                case 3: return 2;
                case 0: return 0;
                case 2: return 1;
                default: return 2;
            }
        }
        static bb(a) {
            switch (a) {
                case -1: return toNullable(ST_HorizontalAlignment_$type, null);
                case 0: return toNullable(ST_HorizontalAlignment_$type, 0);
                case 1: return toNullable(ST_HorizontalAlignment_$type, 1);
                case 2: return toNullable(ST_HorizontalAlignment_$type, 2);
                case 3: return toNullable(ST_HorizontalAlignment_$type, 3);
                case 4: return toNullable(ST_HorizontalAlignment_$type, 4);
                case 5: return toNullable(ST_HorizontalAlignment_$type, 5);
                case 6: return toNullable(ST_HorizontalAlignment_$type, 6);
                case 7: return toNullable(ST_HorizontalAlignment_$type, 7);
                default: return toNullable(ST_HorizontalAlignment_$type, 0);
            }
        }
        static aw(a) {
            switch (a) {
                case 2: return 2;
                case 0: return 0;
                case 1: return 1;
                default: return 0;
            }
        }
        static ax(a) {
            switch (a) {
                case 2: return 0;
                case 0: return 2;
                case 1: return 1;
                default: return 0;
            }
        }
        static ay(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                default: return 1;
            }
        }
        static az(a) {
            switch (a) {
                case 3: return 3;
                case 1: return 1;
                case 2: return 2;
                case 0: return 0;
                default: return 3;
            }
        }
        static bc(a) {
            if (nullableEquals(a, null)) {
                return toNullable(ST_PatternType_$type, null);
            }
            return toNullable(ST_PatternType_$type, XlsxUtilities.a0(a.value));
        }
        static a0(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                case 8: return 8;
                case 9: return 9;
                case 10: return 10;
                case 11: return 11;
                case 12: return 12;
                case 13: return 13;
                case 14: return 14;
                case 15: return 15;
                case 16: return 16;
                case 17: return 17;
                case 18: return 18;
                default: return 0;
            }
        }
        static a1(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                case 0: return 0;
                case 3: return 3;
                default: return 0;
            }
        }
        static a2(a) {
            switch (a) {
                case 1: return 0;
                case 0: return 1;
                default: return 0;
            }
        }
        static ai(a) {
            switch (a) {
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                case 8: return 8;
                case 9: return 9;
                case 1: return 13;
                case 3: return 15;
                case 11: return 11;
                case 10: return 10;
                case 0: return 14;
                case 2: return 16;
                default: return 4;
            }
        }
        static a3(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                case 0: return 0;
                default: return 0;
            }
        }
        static a4(a) {
            switch (a) {
                case 0: return 0;
                case 2: return 1;
                case 1: return 2;
                default: return 0;
            }
        }
        static a5(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                default: return 0;
            }
        }
        static bd(a) {
            if (ExcelUtils.al(a) == false) {
                return toNullable(ST_SystemColorVal_$type, null);
            }
            if (a.equals(SystemColorsInternal.d)) {
                return toNullable(ST_SystemColorVal_$type, 0);
            }
            if (a.equals(SystemColorsInternal.f)) {
                return toNullable(ST_SystemColorVal_$type, 1);
            }
            if (a.equals(SystemColorsInternal.j)) {
                return toNullable(ST_SystemColorVal_$type, 3);
            }
            if (a.equals(SystemColorsInternal.ab)) {
                return toNullable(ST_SystemColorVal_$type, 10);
            }
            if (a.equals(SystemColorsInternal.l)) {
                return toNullable(ST_SystemColorVal_$type, 4);
            }
            if (a.equals(SystemColorsInternal.n)) {
                return toNullable(ST_SystemColorVal_$type, 8);
            }
            if (a.equals(SystemColorsInternal.z)) {
                return toNullable(ST_SystemColorVal_$type, 9);
            }
            if (a.equals(SystemColorsInternal.h)) {
                return toNullable(ST_SystemColorVal_$type, 2);
            }
            if (a.equals(SystemColorsInternal.t)) {
                return toNullable(ST_SystemColorVal_$type, 5);
            }
            if (a.equals(SystemColorsInternal.af)) {
                return toNullable(ST_SystemColorVal_$type, 11);
            }
            if (a.equals(SystemColorsInternal.ah)) {
                return toNullable(ST_SystemColorVal_$type, 12);
            }
            if (a.equals(SystemColorsInternal.aj)) {
                return toNullable(ST_SystemColorVal_$type, 13);
            }
            if (a.equals(SystemColorsInternal.al)) {
                return toNullable(ST_SystemColorVal_$type, 14);
            }
            if (a.equals(SystemColorsInternal.an)) {
                return toNullable(ST_SystemColorVal_$type, 15);
            }
            if (a.equals(SystemColorsInternal.ap)) {
                return toNullable(ST_SystemColorVal_$type, 16);
            }
            if (a.equals(SystemColorsInternal.ar)) {
                return toNullable(ST_SystemColorVal_$type, 17);
            }
            if (a.equals(SystemColorsInternal.av)) {
                return toNullable(ST_SystemColorVal_$type, 19);
            }
            if (a.equals(SystemColorsInternal.ax)) {
                return toNullable(ST_SystemColorVal_$type, 21);
            }
            if (a.equals(SystemColorsInternal.v)) {
                return toNullable(ST_SystemColorVal_$type, 7);
            }
            if (a.equals(SystemColorsInternal.a3)) {
                return toNullable(ST_SystemColorVal_$type, 22);
            }
            if (a.equals(SystemColorsInternal.a1)) {
                return toNullable(ST_SystemColorVal_$type, 23);
            }
            if (a.equals(SystemColorsInternal.a5)) {
                return toNullable(ST_SystemColorVal_$type, 24);
            }
            if (a.equals(SystemColorsInternal.a7)) {
                return toNullable(ST_SystemColorVal_$type, 25);
            }
            if (a.equals(SystemColorsInternal.a9)) {
                return toNullable(ST_SystemColorVal_$type, 26);
            }
            if (a.equals(SystemColorsInternal.bb)) {
                return toNullable(ST_SystemColorVal_$type, 27);
            }
            if (a.equals(SystemColorsInternal.bd)) {
                return toNullable(ST_SystemColorVal_$type, 28);
            }
            if (a.equals(SystemColorsInternal.bf)) {
                return toNullable(ST_SystemColorVal_$type, 29);
            }
            return toNullable(ST_SystemColorVal_$type, null);
        }
        static a6(a) {
            return a;
        }
        static aj(a) {
            switch (a) {
                case 0: return 1;
                case 2: return 3;
                case 3: return 4;
                case 4: return 0;
                case 5: return 2;
                case 1: return 6;
                case 6: return 5;
                default: return 0;
            }
        }
        static ak(a) {
            switch (a) {
                case 0: return 2;
                case 1: return 1;
                case 2: return 0;
                default: return 2;
            }
        }
        static al(a) {
            switch (a) {
                case -1:
                case 0: return 0;
                case 1:
                case 33: return 2;
                case 2:
                case 34: return 3;
                default: return 0;
            }
        }
        static a7(a) {
            switch (a) {
                case -1:
                case 0: return 4;
                case 1: return 0;
                case 2: return 1;
                case 33: return 2;
                case 34: return 3;
                default: return 4;
            }
        }
        static be(a) {
            switch (a) {
                case -1: return toNullable(ST_VerticalAlignment_$type, null);
                case 0: return toNullable(ST_VerticalAlignment_$type, 0);
                case 1: return toNullable(ST_VerticalAlignment_$type, 1);
                case 2: return toNullable(ST_VerticalAlignment_$type, 2);
                case 3: return toNullable(ST_VerticalAlignment_$type, 3);
                case 4: return toNullable(ST_VerticalAlignment_$type, 4);
                default: return toNullable(ST_VerticalAlignment_$type, 2);
            }
        }
        static am(a) {
            switch (a) {
                case -1:
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                default: return 0;
            }
        }
        static bh(a) {
            switch (a) {
                case 0: return SystemColorsInternal.d;
                case 1: return SystemColorsInternal.f;
                case 3: return SystemColorsInternal.j;
                case 10: return SystemColorsInternal.ab;
                case 4: return SystemColorsInternal.l;
                case 8: return SystemColorsInternal.n;
                case 9: return SystemColorsInternal.z;
                case 2: return SystemColorsInternal.h;
                case 5: return SystemColorsInternal.t;
                case 11: return SystemColorsInternal.af;
                case 12: return SystemColorsInternal.ah;
                case 13: return SystemColorsInternal.aj;
                case 14: return SystemColorsInternal.al;
                case 15: return SystemColorsInternal.an;
                case 16: return SystemColorsInternal.ap;
                case 17: return SystemColorsInternal.ar;
                case 19: return SystemColorsInternal.av;
                case 21: return SystemColorsInternal.ax;
                case 7: return SystemColorsInternal.v;
                case 22: return SystemColorsInternal.a3;
                case 23: return SystemColorsInternal.a1;
                case 24: return SystemColorsInternal.a5;
                case 25: return SystemColorsInternal.a7;
                case 26: return SystemColorsInternal.a9;
                case 27: return SystemColorsInternal.bb;
                case 28: return SystemColorsInternal.bd;
                case 29: return SystemColorsInternal.bf;
                default: break;
            }
            return ColorsInternal.c;
        }
        static z(a) {
            if (nullableEquals(a, null)) {
                return -1;
            }
            return XlsxUtilities.y(a.value);
        }
        static y(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                case 2: return 2;
                case 3: return 3;
                case 4: return 4;
                default: return 2;
            }
        }
        static aa(a) {
            switch (a) {
                case 2: return 0;
                case 1: return 1;
                case 4: return 0;
                case 3: return 0;
                case 0: return 2;
                default: return 0;
            }
        }
        static ab(a, b) {
            return a._accept$2$i(Workbook.$, WorkbookColorInfo.$, XlsxUtilities_WorkbookColorInfoCreator.a, b);
        }
        static ac(a, b) {
            return a._accept$2$i(Workbook.$, WorkbookColorInfo.$, XlsxUtilities_WorkbookColorInfoCreator.a, b);
        }
        static ad(a) {
            switch (a) {
                case 4: return 4;
                case 5: return 5;
                case 6: return 6;
                case 7: return 7;
                case 8: return 8;
                case 9: return 9;
                case 13: return 1;
                case 15: return 3;
                case 1: return 1;
                case 3: return 3;
                case 11: return 11;
                case 10: return 10;
                case 14: return 0;
                case 16: return 2;
                case 0: return 0;
                case 2: return 2;
                default: return 4;
            }
        }
        static bf(a, b) {
            let c = new WorksheetCellAddress(1, a.d, a.c);
            let d = b._gd(a.c, true);
            let e = b._gh(a.d, true, true);
            let f = a.a.k();
            let g = a.b.k();
            let h = { $type: Point_$type, x: d == 0 ? 0 : ((f * 100) / d), y: e == 0 ? 0 : ((g * 100) / e) };
            return Tuple.a(WorksheetCellAddress.$, Point_$type, c, h);
        }
        static ae(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 2;
                case 2: return 1;
                default: return 0;
            }
        }
        static af(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                case 0: return 0;
                default: return 0;
            }
        }
        static bg(a) {
            let b = EnumUtil.getName(ST_PresetColorVal_$type, a);
            if (stringStartsWith(b, "dk")) {
                b = "dark" + b.substr(2);
            }
            else if (stringStartsWith(b, "lt")) {
                b = "light" + b.substr(2);
            }
            else if (stringStartsWith(b, "med")) {
                b = "medium" + b.substr(3);
            }
            let c = new Color();
            c = new Color();
            c.colorString = b;
            return c;
        }
    }
    XlsxUtilities.$t = /*@__PURE__*/ markType(XlsxUtilities, 'XlsxUtilities');
    return XlsxUtilities;
})();
/**
 * @hidden
 */
export let XlsxUtilities_WorkbookColorInfoCreator = /*@__PURE__*/ (() => {
    class XlsxUtilities_WorkbookColorInfoCreator extends Base {
        constructor() {
            super();
        }
        _visitCT_SchemeColor$i(a, b) {
            let c = new WorkbookColorInfo(XlsxUtilities.ad(a.c));
            let d = XlsxUtilities_WorkbookColorInfoCreator.b(a, b, c);
            c = d.p2;
            return c;
        }
        _visitCT_SRgbColor$i(a, b) {
            let c = new WorkbookColorInfo(ST_HexColorRGB.s(a.c));
            let d = XlsxUtilities_WorkbookColorInfoCreator.b(a, b, c);
            c = d.p2;
            return c;
        }
        _visitCT_SysColor$i(a, b) {
            if (a.d == 27 && a.b.count == 0) {
                return WorkbookColorInfo.automatic;
            }
            let c = new WorkbookColorInfo(XlsxUtilities.bh(a.d));
            let d = XlsxUtilities_WorkbookColorInfoCreator.b(a, b, c);
            c = d.p2;
            return c;
        }
        _visitCT_PresetColor$i(a, b) {
            let c = XlsxUtilities.bg(a.c);
            let d = new WorkbookColorInfo(c);
            let e = XlsxUtilities_WorkbookColorInfoCreator.b(a, b, d);
            d = e.p2;
            return d;
        }
        _visitCT_BlipFillProperties$i(a, b) {
            return null;
        }
        _visitCT_GroupFillProperties$i(a, b) {
            return null;
        }
        _visitCT_NoFillProperties$i(a, b) {
            return null;
        }
        _visitCT_SolidFillProperties$i(a, b) {
            return XlsxUtilities.ab(a.a, b);
        }
        static b(a, b, c) {
            if (a.b.count == 0) {
                return {
                    p2: c
                };
            }
            if (nullableNotEquals(c._themeColorType$i, null) && nullableEquals(c._tint$i, null)) {
                if (a.b.count == 1) {
                    let d = typeCast(ColorTransform_LumMod.$, a.b._inner[0]);
                    if (d != null) {
                        c = c._h(new WorkbookColorTransform(toNullable(Number_$type, null), toNullable(Number_$type, ST_Percentage.l(d.a) / 100), toNullable(Number_$type, null), toNullable(Number_$type, null)));
                        return {
                            p2: c
                        };
                    }
                }
                else if (a.b.count == 2) {
                    let e = typeCast(ColorTransform_LumMod.$, a.b._inner[0]);
                    let f = typeCast(ColorTransform_LumOff.$, a.b._inner[1]);
                    if (e == null && f == null) {
                        e = typeCast(ColorTransform_LumMod.$, a.b._inner[1]);
                        f = typeCast(ColorTransform_LumOff.$, a.b._inner[0]);
                    }
                    if (e != null && f != null) {
                        c = c._h(new WorkbookColorTransform(toNullable(Number_$type, null), toNullable(Number_$type, ST_Percentage.l(e.a) / 100), toNullable(Number_$type, ST_Percentage.l(f.a) / 100), toNullable(Number_$type, null)));
                        return {
                            p2: c
                        };
                    }
                }
            }
            let g = c._getResolvedColor1(b);
            for (let h of fromEnum(a.b)) {
                g = h._accept$2$i(Color.$, Color.$, XlsxUtilities_ColorTransformsApplicator.a, g);
            }
            c = new WorkbookColorInfo(g);
            return {
                p2: c
            };
        }
    }
    XlsxUtilities_WorkbookColorInfoCreator.$t = /*@__PURE__*/ markType(XlsxUtilities_WorkbookColorInfoCreator, 'XlsxUtilities_WorkbookColorInfoCreator', Base.$, [/*@__PURE__*/ IEG_ColorChoiceVisitor$2_$type.specialize(Workbook.$, WorkbookColorInfo.$), /*@__PURE__*/ IEG_FillPropertiesVisitor$2_$type.specialize(Workbook.$, WorkbookColorInfo.$)]);
    XlsxUtilities_WorkbookColorInfoCreator.a = /*@__PURE__*/ new XlsxUtilities_WorkbookColorInfoCreator();
    return XlsxUtilities_WorkbookColorInfoCreator;
})();
