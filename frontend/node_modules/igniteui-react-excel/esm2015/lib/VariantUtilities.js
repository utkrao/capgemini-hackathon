/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, Array_$type, Boolean_$type, Date_$type, typeGetValue, markType } from "igniteui-react-core";
import { Encoding } from "igniteui-react-core";
import { Guid } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { truncate } from "igniteui-react-core";
import { arrayGetValue } from "igniteui-react-core";
import { dateFromFileTime, dateToFileTime } from "igniteui-react-core";
/**
 * @hidden
 */
export let VariantUtilities = /*@__PURE__*/ (() => {
    class VariantUtilities extends Base {
        static a(a) {
            let b = typeCast(Array_$type, a);
            if (b != null) {
                let c = VariantUtilities.a(arrayGetValue(b, 0));
                for (let d = 1; d < b.length; d++) {
                    let e = VariantUtilities.a(arrayGetValue(b, d));
                    if (e != c) {
                        c = 12;
                        break;
                    }
                }
                return 4096 | c;
            }
            else if (typeCast(Boolean_$type, a) !== null) {
                return 11;
            }
            else if (typeof a === 'number') {
                return 14;
            }
            else if (typeCast(Date_$type, a) !== null) {
                return 64;
            }
            else if (typeof a === 'number') {
                return 3;
            }
            else if (typeof a === 'number') {
                return 16;
            }
            else if (typeof a === 'number') {
                return 2;
            }
            else if (typeof a === 'number') {
                return 20;
            }
            else if (typeof a === 'number') {
                return 4;
            }
            else if (typeof a === 'number') {
                return 5;
            }
            else if (typeof a === 'number') {
                return 17;
            }
            else if (typeof a === 'number') {
                return 18;
            }
            else if (typeof a === 'number') {
                return 19;
            }
            else if (typeof a === 'number') {
                return 21;
            }
            else if (typeof a === 'string') {
                return 30;
            }
            else if (a == null) {
                return 1;
            }
            return 13;
        }
        static d(a, b, c) {
            let d = a.readInt32();
            if (c == false) {
                d += (d % 2);
                d *= 2;
            }
            let e = new Array(d);
            let f;
            for (f = 0; f < d; f++) {
                let g = a.readByte();
                if (g == 0) {
                    break;
                }
                e[f] = g;
                if (c == false) {
                    f++;
                    e[f] = a.readByte();
                }
            }
            for (let h = f + 1; h < d; h++) {
                let i = a.readByte();
            }
            return b.getString1(e, 0, f);
        }
        static b(a, b) {
            let c = a.readInt32();
            return VariantUtilities.c(a, c, b);
        }
        static c(a, b, c) {
            if ((b & 4096) == 4096) {
                let d = b & ~4096;
                let e = a.readInt32();
                let f = new Array(e);
                for (let g = 0; g < e; g++) {
                    f[g] = VariantUtilities.c(a, d, c);
                }
                return f;
            }
            switch (b) {
                case 8192:
                case 69:
                case 8:
                case 16384:
                case 28:
                case 70:
                case 6:
                case 7:
                case 9:
                case 10:
                case 25:
                case 26:
                case 32768:
                case 27:
                case 67:
                case 66:
                case 68:
                case 13:
                case 29:
                case 4096:
                case 24: break;
                case 65:
                    let h = a.readInt32();
                    return a.readBytes(h);
                case 11: return a.readBoolean();
                case 71: return new Guid(1, a.readBytes(16));
                case 0: return null;
                case 64:
                    let i = a.readUInt32();
                    let j = a.readUInt32();
                    return dateFromFileTime(truncate((j * Math.pow(2, 32) + i)));
                case 16: return a.readSByte();
                case 2: return a.readInt16();
                case 3:
                case 22: return a.readInt32();
                case 30: return VariantUtilities.d(a, c, Base.equalsStatic(c, Encoding.unicode) == false);
                case 31: return VariantUtilities.d(a, Encoding.unicode, false);
                case 1: return null;
                case 4: return a.readSingle();
                case 5: return a.readDouble();
                case 17: return a.readByte();
                case 18: return a.readUInt16();
                case 19:
                case 23: return a.readUInt32();
                case 12: return VariantUtilities.b(a, c);
                default: break;
            }
            return null;
        }
        static e(a, b, c, d) {
            let e = b.getBytes1(c);
            let f = e.length + 1;
            if (d) {
                f = DocCoreUtils.t(f, 4);
            }
            a.q(f);
            a.h(e);
            a.m(0);
        }
        static f(a, b, c) {
            VariantUtilities.g(a, b, c, true);
        }
        static g(a, b, c, d) {
            let e = VariantUtilities.a(c);
            a.q(e);
            VariantUtilities.h(a, e, b, c, d);
            if (d && (e & 4096) == 0) {
                while (a.c.position % 4 != 0) {
                    a.m(0);
                }
            }
        }
        static h(a, b, c, d, e) {
            if ((b & 4096) == 4096) {
                let f = b & ~4096;
                let g = d;
                let h = g.length;
                a.q(h);
                for (let i = 0; i < h; i++) {
                    VariantUtilities.h(a, f, c, arrayGetValue(g, i), false);
                }
                return;
            }
            switch (b) {
                case 8192:
                case 65:
                case 69:
                case 8:
                case 16384:
                case 28:
                case 70:
                case 71:
                case 6:
                case 7:
                case 9:
                case 10:
                case 25:
                case 26:
                case 32768:
                case 27:
                case 67:
                case 66:
                case 68:
                case 13:
                case 29:
                case 4096:
                case 24: break;
                case 11:
                    a.l(d);
                    break;
                case 0:
                    a.q(0);
                    break;
                case 64:
                    a.r(dateToFileTime(d));
                    break;
                case 16:
                    a.s(typeGetValue(d));
                    break;
                case 2:
                    a.p(typeGetValue(d));
                    break;
                case 3:
                case 22:
                    a.q(typeGetValue(d));
                    break;
                case 20:
                    a.r(typeGetValue(d));
                    break;
                case 30:
                    VariantUtilities.e(a, c, d, e);
                    break;
                case 31:
                    VariantUtilities.e(a, Encoding.unicode, d, e);
                    break;
                case 1:
                    a.q(0);
                    break;
                case 4:
                    a.t(d);
                    break;
                case 5:
                    a.o(d);
                    break;
                case 17:
                    a.m(typeGetValue(d));
                    break;
                case 18:
                    a.v(typeGetValue(d));
                    break;
                case 19:
                case 23:
                    a.w(typeGetValue(d));
                    break;
                case 21:
                    a.x(typeGetValue(d));
                    break;
                case 12:
                    VariantUtilities.g(a, c, d, e);
                    break;
                default: break;
            }
        }
    }
    VariantUtilities.$t = /*@__PURE__*/ markType(VariantUtilities, 'VariantUtilities');
    return VariantUtilities;
})();
