/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Type, Base, ICollection$1_$type, NotSupportedException, fromEnum, toNullable, Number_$type, toEnum, markType, getEnumerator, typeCast } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { LoadOnDemandTree_ChangeHistoryItem$1 } from "./LoadOnDemandTree_ChangeHistoryItem$1";
import { LoadOnDemandTree_ChangeHistoryItemAdd$1 } from "./LoadOnDemandTree_ChangeHistoryItemAdd$1";
import { LoadOnDemandTree_ChangeHistoryItemRemove$1 } from "./LoadOnDemandTree_ChangeHistoryItemRemove$1";
import { Stack$1 } from "igniteui-react-core";
import { nullableLessThan, nullableGreaterThan, nullableEquals, nullableGreaterThanOrEqual } from "igniteui-react-core";
/**
 * @hidden
 */
export let IBinaryTreeNodeOwner$1_$type = /*@__PURE__*/ new Type(null, 'IBinaryTreeNodeOwner$1');
/**
 * @hidden
 */
export let LoadOnDemandTree$1 = /*@__PURE__*/ (() => {
    class LoadOnDemandTree$1 extends Base {
        constructor($t, a, b) {
            super();
            this.$t = null;
            this._a = null;
            this._aj = 0;
            this._h = null;
            this._i = null;
            this._ae = 0;
            this._n = false;
            this._q = 0;
            this._r = 0;
            this._s = 0;
            this._ab = null;
            this._aa = null;
            this.$t = $t;
            this.$type = this.$type.specialize(this.$t);
            this._a = a;
            this._ae = b;
        }
        recalculateHeight() {
            return false;
        }
        verifyBalanceOfChild(a) {
            return ((() => { let b = LoadOnDemandTree_BinaryTreeNode$1.j(this.$t, this._h); this._h = b.p0; return b.ret; })());
        }
        add(a) {
        }
        clear() {
            this._h = null;
            this._aj = 0;
        }
        contains(a) {
            for (let b of fromEnum(this)) {
                if (Base.equalsStatic(b, a)) {
                    return true;
                }
            }
            return false;
        }
        copyTo(a, b) {
            for (let c of fromEnum(this)) {
                a[b++] = c;
            }
        }
        get isReadOnly() {
            return false;
        }
        remove(a) {
            return false;
        }
        getEnumerator() {
            return getEnumerator(this._x(0, 0x7FFFFFFF, true));
        }
        *__x(a, b, c) {
            b = Math.min(b, this._ae - 1);
            let d = null;
            let e = null;
            let f = -1;
            let g = a;
            let h = b;
            if (this._aa != null && this._aa.count > 0) {
                g = this._ah(a);
                h = this._ah(b);
                let i = this._w(a, b, c);
                d = getEnumerator(i);
                if (d.moveNext()) {
                    e = d.current;
                    f = this._a._getItemIndex$i(e);
                }
            }
            let j = c ? (k, l) => k < l : (k, l) => k > l;
            for (let k of fromEnum(this._z(g, h, c))) {
                let l = k.b;
                let m = 0;
                if (k.l < g) {
                    m = g - k.l;
                }
                let n = Math.min(h - k.l, 32 - 1);
                let o;
                let p;
                let q;
                if (c) {
                    o = m;
                    p = n + 1;
                    q = 1;
                }
                else {
                    o = n;
                    p = m - 1;
                    q = -1;
                }
                for (let r = o; r != p; r += q) {
                    let s = l[r];
                    if (s != null) {
                        let t = toNullable(Number_$type, null);
                        if (this._ab != null) {
                            t = toNullable(Number_$type, this._a._getItemIndex$i(s));
                            if (t.value < 0) {
                                l[r] = null;
                                continue;
                            }
                            while (e != null && j(f, t.value)) {
                                if (f < a || f > b) {
                                    break;
                                }
                                yield e;
                                if (!d.moveNext()) {
                                    e = null;
                                    break;
                                }
                                e = d.current;
                                f = this._a._getItemIndex$i(e);
                            }
                        }
                        let u = !(nullableLessThan(t, a) || nullableGreaterThan(t, b));
                        if (nullableEquals(t, null)) {
                            if (u) {
                                yield s;
                            }
                        }
                        else {
                            if (u) {
                                yield s;
                            }
                            else {
                                if (nullableLessThan(t, 0) || nullableGreaterThanOrEqual(t, this._ae)) {
                                    l[r] = null;
                                    this._a._initializeItemIndex$i(s, -1, this._n);
                                }
                            }
                        }
                    }
                }
            }
            while (e != null) {
                f = this._a._getItemIndex$i(e);
                if (f >= 0) {
                    if (f < a || f > b) {
                        break;
                    }
                    yield e;
                }
                if (!d.moveNext()) {
                    break;
                }
                e = d.current;
            }
        }
        _x(a, b, c) {
            return toEnum(() => this.__x(a, b, c));
        }
        getEnumeratorObject() {
            return getEnumerator(this);
        }
        _af(a, b) {
            if (b == this._s) {
                b = 0;
            }
            if (b == this._q || a < 0) {
                return a;
            }
            let c;
            if (this._r > b) {
                c = b;
            }
            else {
                c = b - this._r;
            }
            let d = this._ad;
            let e = d.count;
            let f = a;
            for (let g = c; g < e; g++) {
                let h = d._inner[g];
                if (h.a) {
                    if (h.f <= f) {
                        f += h.c;
                    }
                }
                else {
                    let i = h.f + h.c - 1;
                    if (i < f) {
                        f -= h.c;
                    }
                    else {
                        if (h.f <= f && i >= f) {
                            return -1;
                        }
                    }
                }
            }
            return f;
        }
        _ah(a) {
            let b = 0;
            let c = this._aa != null ? this._aa.count : 0;
            for (let d = 0; d < c; d++) {
                let e = this._aa._inner[d];
                if (e.n > a) {
                    break;
                }
                if (e.e) {
                    if (e.l >= a) {
                        b += e.n - a;
                        continue;
                    }
                    b -= e.k;
                }
                else {
                    b += e.k;
                }
            }
            return a + b;
        }
        _ai(a) {
            let b = a;
            let c = this._aa != null ? this._aa.count : 0;
            for (let d = 0; d < c; d++) {
                let e = this._aa._inner[d];
                if (e.n > b) {
                    break;
                }
                if (e.e) {
                    b += e.k;
                }
                else {
                    b -= e.k;
                }
            }
            return b;
        }
        _j(a) {
            return this._k(a, 0, a.c);
        }
        _k(a, b, c) {
            return new LoadOnDemandTree_ChangeAdjustmentPoint$1(this.$t, this, a, b, c);
        }
        _l(a, b) {
            return new LoadOnDemandTree_ChangeHistoryItemAdd$1(this.$t, a, b);
        }
        _m(a, b) {
            return new LoadOnDemandTree_ChangeHistoryItemRemove$1(this.$t, a, b);
        }
        _f(a, b) {
            return new LoadOnDemandTree_BinaryTreeNode$1(this.$t, a, b, this);
        }
        *__w(a, b, c) {
            if (this._aa != null && this._aa.count > 0) {
                let d;
                let e;
                let f;
                let g;
                if (c) {
                    d = 0;
                    f = this._aa.count;
                    e = 1;
                }
                else {
                    d = this._aa.count - 1;
                    f = -1;
                    e = -1;
                }
                g = this._aa._inner[d];
                while (g != null) {
                    if (g.d && g.f(a, b)) {
                        let h;
                        let i;
                        if (c) {
                            h = Math.max(0, a);
                            i = Math.min(g.l, b) + 1;
                        }
                        else {
                            h = Math.min(g.l, b);
                            i = Math.max(0, a) - 1;
                        }
                        for (let j = h; j != i; j += e) {
                            if (g.f(j, j)) {
                                let k = g.item(j - g.n);
                                if (k != null && this._a._getItemIndex$i(k) >= 0) {
                                    yield k;
                                }
                            }
                        }
                    }
                    d += e;
                    if (d == f) {
                        g = null;
                    }
                    else {
                        g = this._aa._inner[d];
                    }
                }
            }
        }
        _w(a, b, c) {
            return toEnum(() => this.__w(a, b, c));
        }
        _y() {
            return this._z(0, 0x7FFFFFFF, true);
        }
        *__z(a, b, c) {
            let d = new Stack$1(LoadOnDemandTree_BinaryTreeNode$1.$.specialize(this.$t));
            let e = this._h;
            while (true) {
                LoadOnDemandTree$1._aq(this.$t, e, d, c);
                if (d.f == 0) {
                    return undefined;
                }
                let f = d.e();
                if (a < (f.l + 32) && f.l <= b) {
                    yield f;
                }
                if (c) {
                    e = f.i;
                }
                else {
                    e = f.g;
                }
            }
        }
        _z(a, b, c) {
            return toEnum(() => this.__z(a, b, c));
        }
        _b(a, b, c) {
            let d = this._aa != null ? this._aa.count : 0;
            let e = a;
            for (let f = 0; f < d; f++) {
                let g = this._aa._inner[f];
                if (g.n > a) {
                    break;
                }
                if (g.e) {
                    if (g.l >= a) {
                        c = 0;
                        if (false == b && false == g.d) {
                            return {
                                ret: null,
                                p2: c
                            };
                        }
                        let h = a - g.n;
                        let i = g.item(h);
                        if (i == null) {
                            if (b) {
                                i = this._a._createValue$i(a);
                                g.item(h, i);
                                c = 2;
                                this._aj++;
                            }
                        }
                        else {
                            c = 1;
                        }
                        return {
                            ret: i,
                            p2: c
                        };
                    }
                    e -= g.k;
                }
                else {
                    e += g.k;
                }
            }
            let j = e % 32;
            let k = e - j;
            let l = null;
            if (this._h == null) {
                if (b == false) {
                    c = 0;
                    return {
                        ret: null,
                        p2: c
                    };
                }
                c = 2;
                l = this._h = this._f(k, this);
                l.b[j] = this._a._createValue$i(a);
            }
            else {
                if (this._i != null) {
                    if (k == this._i.l) {
                        l = this._i;
                    }
                    else if (k == this._i.l + 32) {
                        l = this._i.i;
                        if (l != null) {
                            while (true) {
                                let m = l.g;
                                if (m == null) {
                                    break;
                                }
                                l = m;
                            }
                        }
                        else {
                        }
                    }
                    else if (k == this._i.l - 32) {
                        l = this._i.g;
                        if (l != null) {
                            while (true) {
                                let n = l.i;
                                if (n == null) {
                                    break;
                                }
                                l = n;
                            }
                        }
                        else {
                        }
                    }
                }
                if (l == null) {
                    l = this._h;
                }
                l = ((() => { let o = l.e(a, e, b, b, this, c); c = o.p5; return o.ret; })());
            }
            if (l == null) {
                return {
                    ret: null,
                    p2: c
                };
            }
            this._i = l;
            if (c == 2) {
                this._aj++;
            }
            let o = l.b[j];
            if (o != null) {
                if (!this._a._isItemStillValid$i(o)) {
                    if (b) {
                        o = this._a._createValue$i(a);
                    }
                    else {
                        o = null;
                    }
                    l.b[j] = o;
                }
            }
            return {
                ret: o,
                p2: c
            };
        }
        _ao(a, b) {
            let c = Math.max(this._ae - b, a + b);
            let d = this._ae - 1;
            if (c <= d) {
                for (let e of fromEnum(this._x(c, d, true))) {
                    this._aj--;
                }
            }
            this._am(this._l(a, b));
        }
        static _aq($t, a, b, c) {
            while (true) {
                if (a == null) {
                    break;
                }
                b.h(a);
                if (c) {
                    a = a.g;
                }
                else {
                    a = a.i;
                }
            }
        }
        _ar(a, b) {
            for (let c of fromEnum(this._x(a, a + b - 1, true))) {
                this._aj--;
            }
            this._am(this._m(a, b));
        }
        _e(a, b) {
            let c = this._aa != null ? this._aa.count : 0;
            let d = b;
            for (let e = 0; e < c; e++) {
                let f = this._aa._inner[e];
                if (f.n > b) {
                    break;
                }
                if (f.e) {
                    if (f.l >= b) {
                        let g = b - f.n;
                        let h = f.item(g);
                        f.item(g, a);
                        return h;
                    }
                    d -= f.k;
                }
                else {
                    d += f.k;
                }
            }
            let i = null;
            let j;
            return ((() => { let k = this._d(i, a, b, j); i = k.p0; j = k.p3; return k.ret; })());
        }
        _p(a, b) {
            let c;
            b = ((() => { let d = this._b(a, false, c); c = d.p2; return d.ret; })());
            return {
                ret: c == 1,
                p1: b
            };
        }
        _am(a) {
            this._i = null;
            let b = this._ad;
            b.add(a);
            this._q++;
            this._ap(a);
            this._as();
            if (this._aa == null) {
                return;
            }
            let c = this._aa.count - 1;
            for (; c >= 0; c--) {
                let d = this._aa._inner[c];
                if (d.l < this._ae) {
                    break;
                }
                if (d.n < this._ae) {
                    d.u(this._ae - d.n);
                }
                else {
                    this._aa.removeAt(c);
                }
            }
            let e = this._aa.count;
            let f = 0;
            for (c = 0; c < e; c++) {
                let g = this._aa._inner[c];
                if (g.e) {
                    f += g.k;
                }
                else {
                    f -= g.k;
                }
            }
            if (f < 0) {
                let h = this._ae + f;
                let i = this._l(h, -f);
                b.add(i);
                this._q++;
                this._aa.add(this._j(i));
            }
        }
        _an() {
            if (this._ab == null) {
                return;
            }
            this._n = true;
            try {
                let a = new List$1(this.$t, 1, this._w(0, this._ae, true));
                let b = new List$1(LoadOnDemandTree_BinaryTreeNode$1.$.specialize(this.$t), 1, this._y());
                let c = null;
                let d = b.count;
                for (let e = 0; e < d; e++) {
                    c = b._inner[e];
                    for (let f = 0; f < 32; f++) {
                        let g = c.b[f];
                        if (g != null) {
                            let h = c.l + f;
                            let i = this._a._getItemIndex$i(g);
                            this._a._initializeItemIndex$i(g, i, true);
                            if (i < 0) {
                                c.b[f] = null;
                                continue;
                            }
                            if (h != i) {
                                c.b[f] = null;
                                let j;
                                let k = c;
                                let l = ((() => { let m = this._d(k, g, i, j); k = m.p0; j = m.p3; return m.ret; })());
                                while (l != null) {
                                    let m = i;
                                    if (j < 0) {
                                        this._a._initializeItemIndex$i(l, i, true);
                                        break;
                                    }
                                    l = ((() => { let n = this._d(k, l, j, j); k = n.p0; j = n.p3; return n.ret; })());
                                }
                            }
                        }
                    }
                }
                for (let n of fromEnum(a)) {
                    let o = this._a._getItemIndex$i(n);
                    if (o < 0) {
                        this._a._initializeItemIndex$i(n, o, true);
                    }
                    else {
                        let p;
                        let q = ((() => { let r = this._d(c, n, o, p); c = r.p0; p = r.p3; return r.ret; })());
                    }
                }
            }
            finally {
                this._n = false;
                this._aa = null;
                this._ab = null;
                if (this._q >= 150) {
                    this._s = this._q;
                    this._q = 0;
                }
                this._r = this._q;
            }
        }
        _o(a, b) {
            if (this._aa == null) {
                return false;
            }
            let c = this._aa.count;
            for (let d = 0; d < c; d++) {
                let e = this._aa._inner[d];
                if (e.e) {
                    if (e.n + e.k <= b) {
                        continue;
                    }
                }
                else if (e.m <= b) {
                    continue;
                }
                if (e.e && a > 0 && b + a > e.n && b != e.m + 1 && b != e.n) {
                    this._an();
                    return true;
                }
            }
            return false;
        }
        _ap(a) {
            let b = this._j(a);
            if (this._aa == null) {
                this._aa = new List$1(LoadOnDemandTree_ChangeAdjustmentPoint$1.$.specialize(this.$t), 0);
                this._aa.add(b);
            }
            else {
                let c = false;
                let d = new List$1(LoadOnDemandTree_ChangeAdjustmentPoint$1.$.specialize(this.$t), 2, 3);
                let e = this._aa.count;
                for (let f = 0; f < e; f++) {
                    let g = this._aa._inner[f];
                    if (g.e) {
                        if (g.n + g.k <= a.f) {
                            continue;
                        }
                    }
                    else if (g.m <= a.f) {
                        continue;
                    }
                    let h = g.q(b, d, c);
                    c = h.p2;
                    if (d.count == 1) {
                        this._aa._inner[f] = d._inner[0];
                    }
                    else {
                        this._aa.removeAt(f);
                        this._aa.s(f, d);
                        e += d.count - 1;
                        f += d.count - 1;
                    }
                }
                if (!c) {
                    this._aa.add(b);
                }
            }
        }
        _d(a, b, c, d) {
            d = -1;
            let e = !(c < 0 || c >= this._ae);
            let f = this._n ? c : this._ah(c);
            if (a == null || a.l > f || a.l + 32 <= f) {
                a = this._g(a, c, f);
            }
            if (a == null) {
                this._a._initializeItemIndex$i(b, -1, this._n);
                return {
                    ret: null,
                    p0: a,
                    p3: d
                };
            }
            let g = f - a.l;
            let h = a.b[g];
            a.b[g] = b;
            this._a._initializeItemIndex$i(b, c, this._n);
            if (h == null || Base.equalsStatic(h, b)) {
                return {
                    ret: null,
                    p0: a,
                    p3: d
                };
            }
            d = this._a._getItemIndex$i(h);
            if (d == c) {
                return {
                    ret: null,
                    p0: a,
                    p3: d
                };
            }
            return {
                ret: h,
                p0: a,
                p3: d
            };
        }
        _g(a, b, c) {
            if (b < 0) {
                return null;
            }
            let d = a == null ? false : c >= a.l && c < a.l + 32;
            let e;
            if (!d) {
                if (this._h == null) {
                    let f = c % 32;
                    let g = c - f;
                    a = this._h = this._f(g, this);
                }
                else {
                    a = ((() => { let h = this._h.e(b, c, true, false, this, e); e = h.p5; return h.ret; })());
                }
            }
            return a;
        }
        _as() {
            let a = this._ad;
            if (a.count == 0) {
                return;
            }
            if (a.count > 60 || a._inner[a.count - 1].c > 100) {
                this._an();
            }
        }
        get _ac() {
            return this._aa;
        }
        get _u() {
            return this._q;
        }
        get count() {
            return this._aj;
        }
        _item(a) {
            let b;
            return ((() => { let c = this._b(a, true, b); b = c.p2; return c.ret; })());
        }
        get _al() {
            return this._ae;
        }
        set _al(a) {
            if (a != this._ae) {
                this._an();
                this._ae = a;
            }
        }
        get _ad() {
            if (this._ab == null) {
                this._ab = new List$1(LoadOnDemandTree_ChangeHistoryItem$1.$.specialize(this.$t), 0);
            }
            return this._ab;
        }
    }
    LoadOnDemandTree$1.$t = /*@__PURE__*/ markType(LoadOnDemandTree$1, 'LoadOnDemandTree$1', Base.$, [/*@__PURE__*/ ICollection$1_$type.specialize(0), /*@__PURE__*/ IBinaryTreeNodeOwner$1_$type.specialize(0)]);
    return LoadOnDemandTree$1;
})();
/**
 * @hidden
 */
export let LoadOnDemandTree_ChangeAdjustmentPoint$1 = /*@__PURE__*/ (() => {
    class LoadOnDemandTree_ChangeAdjustmentPoint$1 extends Base {
        constructor($t, a, b, c, d) {
            super();
            this.$t = null;
            this.a = null;
            this.i = 0;
            this.h = 0;
            this.j = 0;
            this.c = null;
            this.$t = $t;
            this.$type = this.$type.specialize(this.$t);
            this.a = a;
            this.c = b;
            this.j = c;
            this.i = b.f + c;
            this.h = d;
        }
        get n() {
            return this.i;
        }
        get l() {
            return this.i + this.h - 1;
        }
        get m() {
            if (!this.e) {
                return this.i;
            }
            return this.l;
        }
        get k() {
            return this.h;
        }
        set k(a) {
            if (this.h != a) {
                this.h = a;
                this.t();
            }
        }
        get p() {
            return this.c.c;
        }
        get o() {
            return this.j;
        }
        get d() {
            if (!this.e) {
                return false;
            }
            return (this.c).j;
        }
        get e() {
            return this.c.a;
        }
        item(a, b) {
            if (arguments.length === 2) {
                if (!this.e) {
                    throw new NotSupportedException(1, "Indexer is only supported on a add operation");
                }
                let c = typeCast(LoadOnDemandTree_ChangeHistoryItemAdd$1.$.specialize(this.$t), this.c);
                c.i[a + this.o] = b;
                return b;
            }
            else {
                if (!this.e) {
                    throw new NotSupportedException(1, "Indexer is only supported on a add operation");
                }
                return this.c.i[a + this.o];
            }
        }
        q(a, b, c) {
            b.clear();
            let d = this.f(a.n, a.l);
            if (d) {
                if (a.c.a) {
                    let e = this.r(a, b, c);
                    c = e.p2;
                    return {
                        p2: c
                    };
                }
                if (this.c.a) {
                    let f = this.s(a, b, c);
                    c = f.p2;
                }
                else {
                    if (c) {
                        this.i -= a.k;
                    }
                    else {
                        let g = Math.min(this.i, a.n);
                        this.i = g;
                        this.k += a.h;
                        c = true;
                    }
                    b.add(this);
                }
                return {
                    p2: c
                };
            }
            if (a.n < this.i) {
                if (!c) {
                    c = true;
                    b.add(a);
                }
                b.add(this);
                if (a.c.a) {
                    this.i += a.p;
                }
                else {
                    this.i -= a.p;
                }
            }
            else {
                b.add(this);
                if (!c) {
                    c = true;
                    b.add(a);
                }
            }
            return {
                p2: c
            };
        }
        r(a, b, c) {
            if (a.n <= this.n) {
                if (!c) {
                    c = true;
                    if (false == this.e && a.i == this.i && a.h == this.h) {
                        return {
                            p2: c
                        };
                    }
                    b.add(a);
                }
                this.i += a.k;
                b.add(this);
                return {
                    p2: c
                };
            }
            if (c) {
                this.i += a.k;
                b.add(this);
                return {
                    p2: c
                };
            }
            let d = a.n - this.n;
            b.o(this.g(d, 0, a));
            c = true;
            return {
                p2: c
            };
        }
        s(a, b, c) {
            let d = a.n - this.n;
            if (d == 0) {
                c = true;
                if (this.h == a.h) {
                }
                else if (this.h < a.h) {
                    a.k -= this.h;
                    b.add(a);
                }
                else {
                    this.k -= a.h;
                    this.j += a.h;
                    b.add(this);
                }
                return {
                    p2: c
                };
            }
            if (d > 0) {
                c = true;
                if (a.l <= this.l) {
                    b.o(this.g(d, a.k, null));
                }
                else {
                    let e = this.h;
                    this.k = d;
                    a.k -= e - this.h;
                    b.add(this);
                    b.add(a);
                }
                return {
                    p2: c
                };
            }
            if (this.l <= a.l) {
                a.k -= this.h;
                if (!c) {
                    b.add(a);
                    c = true;
                }
            }
            else {
                d *= -1;
                let f = this.h;
                this.i -= d;
                this.k -= a.h - d;
                this.j += f - this.h;
                a.k = d;
                if (!c) {
                    b.add(a);
                    c = true;
                }
                b.add(this);
            }
            return {
                p2: c
            };
        }
        t() {
        }
        f(a, b) {
            let c = Math.max(a, this.i);
            let d = Math.min(b, this.m);
            return (c <= d);
        }
        g(a, b, c) {
            let d = new List$1(LoadOnDemandTree_ChangeAdjustmentPoint$1.$.specialize(this.$t), 2, 3);
            let e = this.a._k(this.c, this.o, a);
            let f = this.a._k(this.c, this.o + a + b, this.k - (a + b));
            if (e.k > 0) {
                d.add(e);
            }
            if (c != null) {
                c.i = e.i + a;
                d.add(c);
                f.i = c.l + 1;
            }
            if (f.k > 0) {
                f.i -= b;
                d.add(f);
            }
            return d;
        }
        u(a) {
            this.c.g(a + this.o);
            this.k = a;
        }
    }
    LoadOnDemandTree_ChangeAdjustmentPoint$1.$t = /*@__PURE__*/ markType(LoadOnDemandTree_ChangeAdjustmentPoint$1, 'LoadOnDemandTree_ChangeAdjustmentPoint$1');
    return LoadOnDemandTree_ChangeAdjustmentPoint$1;
})();
/**
 * @hidden
 */
export let LoadOnDemandTree_BinaryTreeNode$1 = /*@__PURE__*/ (() => {
    class LoadOnDemandTree_BinaryTreeNode$1 extends Base {
        constructor($t, a, b, c) {
            super();
            this.$t = null;
            this.n = 0;
            this.k = 0;
            this.c = null;
            this.f = null;
            this.h = null;
            this.a = null;
            this.$t = $t;
            this.$type = this.$type.specialize(this.$t);
            this.k = a;
            this.a = new Array(32);
            this.c = b;
        }
        verifyBalanceOfChild(a) {
            if (a == this.f) {
                return ((() => { let b = LoadOnDemandTree_BinaryTreeNode$1.j(this.$t, this.f); this.f = b.p0; return b.ret; })());
            }
            else if (a == this.h) {
                return ((() => { let b = LoadOnDemandTree_BinaryTreeNode$1.j(this.$t, this.h); this.h = b.p0; return b.ret; })());
            }
            else {
                return false;
            }
        }
        static j($t, a) {
            let b = a.f;
            let c = a.h;
            let d = LoadOnDemandTree_BinaryTreeNode$1.m($t, b);
            let e = LoadOnDemandTree_BinaryTreeNode$1.m($t, c);
            if (d < e - 1) {
                let f = c.f;
                let g = c.h;
                let h = LoadOnDemandTree_BinaryTreeNode$1.m($t, f);
                let i = LoadOnDemandTree_BinaryTreeNode$1.m($t, g);
                if (h < i) {
                    let j = c.f;
                    c.c = a.c;
                    a.i = j;
                    c.g = a;
                    a.recalculateHeight();
                    a = c;
                }
                else {
                    let k = f.f;
                    let l = f.h;
                    f.c = a.c;
                    f.g = a;
                    f.i = c;
                    a.i = k;
                    c.g = l;
                    a.recalculateHeight();
                    c.recalculateHeight();
                    f.recalculateHeight();
                    a = f;
                }
                return {
                    ret: true,
                    p0: a
                };
            }
            if (e < d - 1) {
                let m = b.f;
                let n = b.h;
                let o = LoadOnDemandTree_BinaryTreeNode$1.m($t, m);
                let p = LoadOnDemandTree_BinaryTreeNode$1.m($t, n);
                if (p < o) {
                    let q = b.h;
                    b.c = a.c;
                    a.g = q;
                    b.i = a;
                    a.recalculateHeight();
                    a = b;
                }
                else {
                    let r = n.f;
                    let s = n.h;
                    n.c = a.c;
                    n.g = b;
                    n.i = a;
                    a.g = s;
                    b.i = r;
                    a.recalculateHeight();
                    b.recalculateHeight();
                    n.recalculateHeight();
                    a = n;
                }
                return {
                    ret: true,
                    p0: a
                };
            }
            return {
                ret: false,
                p0: a
            };
        }
        e(a, b, c, d, e, f) {
            if (d) {
                c = true;
            }
            let g = b % 32;
            let h = b - g;
            f = 0;
            let i = this;
            let j = null;
            while (true) {
                if (h == i.k) {
                    if (i.b[g] == null) {
                        if (d) {
                            i.b[g] = e._a._createValue$i(a);
                            f = 2;
                        }
                        else {
                            f = 0;
                        }
                    }
                    else {
                        f = 1;
                    }
                    return {
                        ret: i,
                        p5: f
                    };
                }
                let k = i;
                if (h < i.k) {
                    i = i.f;
                    if (i == null) {
                        if (c) {
                            j = e._f(h, this);
                            if (d) {
                                j.b[g] = e._a._createValue$i(a);
                                f = 2;
                            }
                            else {
                                f = 0;
                            }
                            i = j;
                            k.g = i;
                        }
                        break;
                    }
                }
                else {
                    i = i.h;
                    if (i == null) {
                        if (c) {
                            j = e._f(h, this);
                            if (d) {
                                j.b[g] = e._a._createValue$i(a);
                                f = 2;
                            }
                            else {
                                f = 0;
                            }
                            i = j;
                            k.i = i;
                        }
                        break;
                    }
                }
            }
            if (f == 2) {
                let l = i.c;
                while (i != null) {
                    l = i.c;
                    if (l.verifyBalanceOfChild(i)) {
                        break;
                    }
                    if (l.recalculateHeight() == false) {
                        break;
                    }
                    i = typeCast(LoadOnDemandTree_BinaryTreeNode$1.$.specialize(this.$t), l);
                }
            }
            return {
                ret: j,
                p5: f
            };
        }
        static m($t, a) {
            return a == null ? -1 : a.n;
        }
        recalculateHeight() {
            let a = LoadOnDemandTree_BinaryTreeNode$1.m(this.$t, this.f);
            let b = LoadOnDemandTree_BinaryTreeNode$1.m(this.$t, this.h);
            let c = this.n;
            if (a < b) {
                this.n = b + 1;
            }
            else {
                this.n = a + 1;
            }
            return this.n != c;
        }
        get l() {
            return this.k;
        }
        get g() {
            return this.f;
        }
        set g(a) {
            if (this.f != a) {
                this.f = a;
                if (this.f != null) {
                    this.f.c = this;
                }
            }
        }
        get d() {
            return this.c;
        }
        get i() {
            return this.h;
        }
        set i(a) {
            if (this.h != a) {
                this.h = a;
                if (this.h != null) {
                    this.h.c = this;
                }
            }
        }
        get b() {
            return this.a;
        }
    }
    LoadOnDemandTree_BinaryTreeNode$1.$t = /*@__PURE__*/ markType(LoadOnDemandTree_BinaryTreeNode$1, 'LoadOnDemandTree_BinaryTreeNode$1', Base.$, [/*@__PURE__*/ IBinaryTreeNodeOwner$1_$type.specialize(0)]);
    return LoadOnDemandTree_BinaryTreeNode$1;
})();
