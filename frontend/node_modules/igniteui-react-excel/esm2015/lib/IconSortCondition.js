/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SortCondition } from "./SortCondition";
import { toNullable, Number_$type, typeCast, Boolean_$type, markType } from "igniteui-react-core";
import { FormatConditionIconSet_$type } from "./FormatConditionIconSet";
import { ExcelUtils } from "./ExcelUtils";
import { IconSetConditionalFormat } from "./IconSetConditionalFormat";
import { ArgumentOutOfRangeException } from "igniteui-react-core";
import { wrapNullable, nullableEquals, nullableNotEquals, unwrapNullable } from "igniteui-react-core";
import { intSToU } from "igniteui-react-core";
/**
 * Represents a sort condition which will sort cells based on a specific conditioanl formmat icon.
 * <p class="body">
 * This sort condition specifies a single icon. Cells with this icon will be moved to the beginning of the data range for the ascending
 * sort direction and moved to the end of the data range for the descending sort direction. All matching cells will be kept in their same
 * relative order to each other. In addition, all non-matching cells will be kept in their same relative order to each other.
 * </p>
 * @see [[SortSettings`1.sortConditions]]
 * @see [[SortCondition.sortDirection]]
 */
export let IconSortCondition = /*@__PURE__*/ (() => {
    class IconSortCondition extends SortCondition {
        constructor(..._rest) {
            let a;
            if (arguments.length === 2) {
                a = 1;
            }
            else if (arguments.length === 3) {
                if (typeCast(Boolean_$type, arguments[0]) !== null) {
                    a = 0;
                }
                else if (typeof arguments[0] === 'number') {
                    a = 2;
                }
            }
            switch (a) {
                case 0:
                    {
                        let ascending = _rest[0];
                        let iconSetInternal = _rest[1];
                        let iconIndex = _rest[2];
                        super(1, ascending ? 0 : 1);
                        this._l = toNullable(Number_$type, null);
                        this._j = 0;
                        this._l = iconIndex;
                        this._j = iconSetInternal;
                    }
                    break;
                case 1:
                    {
                        let iconSet = _rest[0];
                        let iconIndex = _rest[1];
                        let b = [iconSet, iconIndex, 0];
                        {
                            let iconSet = b[0];
                            let iconIndex = b[1];
                            let sortDirection = b[2];
                            super(1, sortDirection);
                            this._l = toNullable(Number_$type, null);
                            this._j = 0;
                            iconIndex = wrapNullable(Number_$type, iconIndex);
                            ExcelUtils.gn(FormatConditionIconSet_$type, iconSet);
                            this._j = ExcelUtils.ai(iconSet);
                            if (nullableEquals(iconIndex, null)) {
                                this._l = toNullable(Number_$type, null);
                            }
                            else {
                                let c = IconSetConditionalFormat._b9(iconSet);
                                if (iconIndex.value < 0 || iconIndex.value >= c.length) {
                                    throw new ArgumentOutOfRangeException(1, "iconIndex");
                                }
                                this._l = toNullable(Number_$type, intSToU((iconIndex.value)));
                            }
                        }
                        iconIndex = wrapNullable(Number_$type, iconIndex);
                    }
                    break;
                case 2:
                    {
                        let iconSet = _rest[0];
                        let iconIndex = _rest[1];
                        let sortDirection = _rest[2];
                        super(1, sortDirection);
                        this._l = toNullable(Number_$type, null);
                        this._j = 0;
                        iconIndex = wrapNullable(Number_$type, iconIndex);
                        ExcelUtils.gn(FormatConditionIconSet_$type, iconSet);
                        this._j = ExcelUtils.ai(iconSet);
                        if (nullableEquals(iconIndex, null)) {
                            this._l = toNullable(Number_$type, null);
                        }
                        else {
                            let b = IconSetConditionalFormat._b9(iconSet);
                            if (iconIndex.value < 0 || iconIndex.value >= b.length) {
                                throw new ArgumentOutOfRangeException(1, "iconIndex");
                            }
                            this._l = toNullable(Number_$type, intSToU((iconIndex.value)));
                        }
                    }
                    break;
                default: throw new Error('Invalid arguments');
            }
        }
        /**
         * @hidden
         */
        _a() {
            let a = new IconSortCondition(this.sortDirection == 0, this._j, this._l);
            return a;
        }
        /**
         * @hidden
         */
        _g($t, a, b, c, d, e) {
            let f = ExcelUtils.ao(a.a(b, d), this._j, this._l);
            let g = ExcelUtils.ao(a.a(c, e), this._j, this._l);
            if (f == g) {
                return 0;
            }
            else {
                let h = f ? -1 : 1;
                if (this.sortDirection == 1) {
                    h *= -1;
                }
                return h;
            }
        }
        /**
         * @hidden
         */
        _f(a) {
            let b = typeCast(IconSortCondition.$, a);
            return b == null || b._j != this._j || nullableNotEquals(b._l, this._l);
        }
        /**
         * @hidden
         */
        get__d() {
            return 3;
        }
        /**
         * @hidden
         */
        get _d() {
            return this.get__d();
        }
        /**
         * The icon set (read-only).
         */
        get iconIndex() {
            return unwrapNullable(this._iconIndex$i);
        }
        /**
         * @hidden
         */
        get _iconIndex$i() {
            return nullableNotEquals(this._l, null) ? toNullable(Number_$type, this._l.value) : toNullable(Number_$type, null);
        }
        /**
         * The icon's index in the associated icon set or null for 'NoCellIcon' (read-only).
         */
        get iconSet() {
            return ExcelUtils.s(this._j);
        }
        /**
         * @hidden
         */
        get _n() {
            return this._l;
        }
        /**
         * @hidden
         */
        get _k() {
            return this._j;
        }
    }
    IconSortCondition.$t = /*@__PURE__*/ markType(IconSortCondition, 'IconSortCondition', SortCondition.$);
    return IconSortCondition;
})();
