/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { fromEn, typeCast, markType } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { NamedCalcReferenceUnconnected } from "./NamedCalcReferenceUnconnected";
/**
 * @hidden
 */
export let UltraCalcFunctionCountBlank = /*@__PURE__*/ (() => {
    class UltraCalcFunctionCountBlank extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = a.pop();
            if (!c.isReference) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            if (c.isArrayGroup) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            if (c.isArray) {
                let d = c.toArrayProxy();
                let e = 0;
                d._n(false, (f, g) => {
                    if (!f.isNull) {
                        e++;
                    }
                });
                let f = d.getLength(0) * d.getLength(1);
                return new ExcelCalcValue(f - e);
            }
            let g = c.toReference();
            let h = 0;
            if (g.isEnumerable) {
                for (let i of fromEn(g.references)) {
                    if (i.value.isNull) {
                        h++;
                    }
                }
            }
            else if (typeCast(NamedCalcReferenceUnconnected.$, g) !== null) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(7));
            }
            else {
                h = c.isNull ? 1 : 0;
            }
            return new ExcelCalcValue(h);
        }
        get_name() {
            return "countblank";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 1;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 1;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
    }
    UltraCalcFunctionCountBlank.$t = /*@__PURE__*/ markType(UltraCalcFunctionCountBlank, 'UltraCalcFunctionCountBlank', BuiltInFunctionBase.$);
    return UltraCalcFunctionCountBlank;
})();
