/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_PageOrientation_$type } from "./ST_PageOrientation";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { parseUInt32_1, parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_PageSetup = /*@__PURE__*/ (() => {
    class CT_PageSetup extends Base {
        constructor() {
            super();
            this.u = toNullable(Number_$type, null);
            this.o = toNullable(Number_$type, null);
            this.s = toNullable(ST_PageOrientation_$type, null);
            this.i = toNullable(Boolean_$type, null);
            this.m = toNullable(Boolean_$type, null);
            this.w = toNullable(Boolean_$type, null);
            this.q = toNullable(Number_$type, null);
            this.y = toNullable(Number_$type, null);
            this.k = toNullable(Number_$type, null);
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        static a(a) {
            let b = toNullable(Number_$type, null);
            let c = toNullable(Number_$type, null);
            let d = toNullable(ST_PageOrientation_$type, null);
            let e = toNullable(Boolean_$type, null);
            let f = toNullable(Boolean_$type, null);
            let g = toNullable(Boolean_$type, null);
            let h = toNullable(Number_$type, null);
            let i = toNullable(Number_$type, null);
            let j = toNullable(Number_$type, null);
            let k = CT_PageSetup.ad(a, b, c, d, e, f, g, h, i, j);
            b = k.p1;
            c = k.p2;
            d = k.p3;
            e = k.p4;
            f = k.p5;
            g = k.p6;
            h = k.p7;
            i = k.p8;
            j = k.p9;
            return ((() => {
                let $ret = new CT_PageSetup();
                $ret.t = b;
                $ret.n = c;
                $ret.r = d;
                $ret.h = e;
                $ret.j = j;
                $ret.l = f;
                $ret.v = g;
                $ret.p = h;
                $ret.x = i;
                return $ret;
            })());
        }
        static ad(a, b, c, d, e, f, g, h, i, j) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(ST_PageOrientation_$type, null);
            e = toNullable(Boolean_$type, null);
            f = toNullable(Boolean_$type, null);
            g = toNullable(Boolean_$type, null);
            h = toNullable(Number_$type, null);
            i = toNullable(Number_$type, null);
            j = toNullable(Number_$type, null);
            for (let k of fromEnum(a.ab.u)) {
                switch (k.a.e(a.d)) {
                    case "paperSize":
                        b = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "firstPageNumber":
                        c = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "orientation":
                        d = toNullable(ST_PageOrientation_$type, XmlNamespaceDefinitionBase.b(ST_PageOrientation_$type, k.d));
                        break;
                    case "blackAndWhite":
                        e = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "draft":
                        f = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "useFirstPageNumber":
                        g = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "horizontalDpi":
                        h = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "verticalDpi":
                        i = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "copies":
                        j = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j
            };
        }
        static ae(a, b, c = toNullable(Boolean_$type, null), d = toNullable(Number_$type, null), e = toNullable(Boolean_$type, null), f = toNullable(Number_$type, null), g = toNullable(Number_$type, null), h = toNullable(ST_PageOrientation_$type, null), i = toNullable(Number_$type, null), j = toNullable(Boolean_$type, null), k = toNullable(Number_$type, null)) {
            a.ad.p(b, "cx");
            let l = null;
            let m = null;
            if (c.hasValue) {
                m = "blackAndWhite";
                l = ST_OnOff.g(c.value);
                a.ad.h(m, l);
            }
            if (d.hasValue) {
                m = "copies";
                l = d.value.toString();
                a.ad.h(m, l);
            }
            if (e.hasValue) {
                m = "draft";
                l = ST_OnOff.g(e.value);
                a.ad.h(m, l);
            }
            if (f.hasValue) {
                m = "firstPageNumber";
                l = f.value.toString();
                a.ad.h(m, l);
            }
            if (g.hasValue) {
                m = "horizontalDpi";
                l = g.value.toString();
                a.ad.h(m, l);
            }
            if (h.hasValue) {
                m = "orientation";
                l = XmlNamespaceDefinitionBase.p(ST_PageOrientation_$type, h.value);
                a.ad.h(m, l);
            }
            if (i.hasValue) {
                m = "paperSize";
                l = i.value.toString();
                a.ad.h(m, l);
            }
            if (j.hasValue) {
                m = "useFirstPageNumber";
                l = ST_OnOff.g(j.value);
                a.ad.h(m, l);
            }
            if (k.hasValue) {
                m = "verticalDpi";
                l = k.value.toString();
                a.ad.h(m, l);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PageSetup.$t = /*@__PURE__*/ markType(CT_PageSetup, 'CT_PageSetup');
    return CT_PageSetup;
})();
