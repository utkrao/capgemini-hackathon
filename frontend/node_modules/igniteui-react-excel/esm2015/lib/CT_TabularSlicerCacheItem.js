/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_TabularSlicerCacheItem = /*@__PURE__*/ (() => {
    class CT_TabularSlicerCacheItem extends Base {
        constructor() {
            super();
            this.h = 0;
            this.f = toNullable(Boolean_$type, null);
            this.d = toNullable(Boolean_$type, null);
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        static i(a, b, c, d) {
            b = 0;
            c = toNullable(Boolean_$type, null);
            d = toNullable(Boolean_$type, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "x":
                        b = parseUInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    case "s":
                        c = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    case "nd":
                        d = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static j(a, b, c, d, e) {
            a.ad.p(b, null);
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "nd";
                f = ST_OnOff.g(c.value);
                a.ad.h(g, f);
            }
            if (d.hasValue) {
                g = "s";
                f = ST_OnOff.g(d.value);
                a.ad.h(g, f);
            }
            g = "x";
            f = e.toString();
            a.ad.h(g, f);
            ;
        }
    }
    CT_TabularSlicerCacheItem.$t = /*@__PURE__*/ markType(CT_TabularSlicerCacheItem, 'CT_TabularSlicerCacheItem');
    return CT_TabularSlicerCacheItem;
})();
