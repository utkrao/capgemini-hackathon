/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, markType } from "igniteui-react-core";
import { PatternFillInfo } from "./PatternFillInfo";
import { GradientFillInfo } from "./GradientFillInfo";
import { CellFillPattern } from "./CellFillPattern";
import { CellFillGradient } from "./CellFillGradient";
/**
 * @hidden
 */
export let FillInfo = /*@__PURE__*/ (() => {
    class FillInfo extends Base {
        constructor() {
            super(...arguments);
            this.e = null;
            this.c = null;
        }
        equals(a) {
            if (Base.referenceEquals(this, a)) {
                return true;
            }
            let b = typeCast(FillInfo.$, a);
            if (b == null) {
                return false;
            }
            return Base.equalsStatic(this.e, b.e) && Base.equalsStatic(this.c, b.c);
        }
        getHashCode() {
            let a = 0;
            if (this.e != null) {
                a ^= this.e.getHashCode();
            }
            if (this.c != null) {
                a ^= this.c.getHashCode();
            }
            return a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        h(a, b) {
            if (this.d != null) {
                a.fill = this.d.a(b, a);
            }
            else if (this.b != null) {
                a.fill = this.b.a(b);
            }
            else {
            }
        }
        static a(a, b) {
            let c = new FillInfo();
            let d = b._ar;
            let e = typeCast(CellFillPattern.$, d);
            if (e != null) {
                c.d = PatternFillInfo.f(a, b, e);
            }
            else {
                let f = typeCast(CellFillGradient.$, d);
                if (f != null) {
                    c.b = GradientFillInfo.b(a, f);
                }
                else {
                }
            }
            return c;
        }
    }
    FillInfo.$t = /*@__PURE__*/ markType(FillInfo, 'FillInfo');
    return FillInfo;
})();
