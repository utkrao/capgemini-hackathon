/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_EntityType_$type } from "./ST_EntityType";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { CultureInfo } from "igniteui-react-core";
import { parseNumber } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_GeoDataPointQuery = /*@__PURE__*/ (() => {
    class CT_GeoDataPointQuery extends Base {
        constructor() {
            super(...arguments);
            this.c = 0;
            this.e = 0;
            this.g = 0;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        static a(a) {
            let b = 0;
            let c = 0;
            let d = 0;
            let e = CT_GeoDataPointQuery.i(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            return ((() => {
                let $ret = new CT_GeoDataPointQuery();
                $ret.b = b;
                $ret.d = c;
                $ret.f = d;
                return $ret;
            })());
        }
        static i(a, b, c, d) {
            b = 0;
            c = 0;
            d = 0;
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "entityType":
                        b = XmlNamespaceDefinitionBase.b(ST_EntityType_$type, e.d);
                        break;
                    case "latitude":
                        c = parseNumber(e.d, CultureInfo.invariantCulture);
                        break;
                    case "longitude":
                        d = parseNumber(e.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static j(a, b, c, d, e) {
            a.ad.p(b, "cx");
            let f = null;
            let g = null;
            g = "entityType";
            f = XmlNamespaceDefinitionBase.p(ST_EntityType_$type, c);
            a.ad.h(g, f);
            g = "latitude";
            f = d.toString();
            a.ad.h(g, f);
            g = "longitude";
            f = e.toString();
            a.ad.h(g, f);
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_GeoDataPointQuery.$t = /*@__PURE__*/ markType(CT_GeoDataPointQuery, 'CT_GeoDataPointQuery');
    return CT_GeoDataPointQuery;
})();
