/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_ExtensionList } from "./CT_ExtensionList";
import { ST_CfvoType_$type } from "./ST_CfvoType";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_Cfvo = /*@__PURE__*/ (() => {
    class CT_Cfvo extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = 0;
            this.f = null;
            this.d = toNullable(Boolean_$type, null);
        }
        static g(a, b, c, d) {
            b = 0;
            c = null;
            d = toNullable(Boolean_$type, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "type":
                        b = XmlNamespaceDefinitionBase.b(ST_CfvoType_$type, e.d);
                        break;
                    case "val":
                        c = e.d;
                        break;
                    case "gte":
                        d = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static h(a, b, c, d, e) {
            a.ad.p(b, null);
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "gte";
                f = ST_OnOff.g(c.value);
                a.ad.h(g, f);
            }
            if (d != null) {
                g = "val";
                f = d;
                a.ad.h(g, f);
            }
            g = "type";
            f = XmlNamespaceDefinitionBase.p(ST_CfvoType_$type, e);
            a.ad.h(g, f);
        }
        setProperty(a, b) {
            switch (a) {
                case 601:
                    this.a = typeCast(CT_ExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Cfvo.$t = /*@__PURE__*/ markType(CT_Cfvo, 'CT_Cfvo', Base.$, [ISupportSetProperty_$type]);
    return CT_Cfvo;
})();
