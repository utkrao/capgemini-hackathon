/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_ProtectedRange_SML2009 = /*@__PURE__*/ (() => {
    class CT_ProtectedRange_SML2009 extends Base {
        constructor() {
            super();
            this.b = null;
            this.l = null;
            this.f = null;
            this.h = null;
            this.n = null;
            this.d = toNullable(Number_$type, null);
            this.j = null;
            this.p = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        static q(a, b, c, d, e, f, g, h) {
            b = null;
            c = null;
            d = null;
            e = null;
            f = toNullable(Number_$type, null);
            g = null;
            h = null;
            for (let i of fromEnum(a.ab.u)) {
                switch (i.a.e(a.d)) {
                    case "password":
                        b = i.d;
                        break;
                    case "algorithmName":
                        c = i.d;
                        break;
                    case "hashValue":
                        d = i.d;
                        break;
                    case "saltValue":
                        e = i.d;
                        break;
                    case "spinCount":
                        f = toNullable(Number_$type, parseUInt32_1(i.d, CultureInfo.invariantCulture));
                        break;
                    case "name":
                        g = i.d;
                        break;
                    case "securityDescriptor":
                        h = i.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h
            };
        }
        static r(a, b, c, d, e, f, g, h, i) {
            a.ad.p(b, null);
            let j = null;
            let k = null;
            if (c != null) {
                k = "algorithmName";
                j = c;
                a.ad.h(k, j);
            }
            if (d != null) {
                k = "hashValue";
                j = d;
                a.ad.h(k, j);
            }
            if (e != null) {
                k = "password";
                j = e;
                a.ad.h(k, j);
            }
            if (f != null) {
                k = "saltValue";
                j = f;
                a.ad.h(k, j);
            }
            if (g != null) {
                k = "securityDescriptor";
                j = g;
                a.ad.h(k, j);
            }
            if (h.hasValue) {
                k = "spinCount";
                j = h.value.toString();
                a.ad.h(k, j);
            }
            if (i != null) {
                k = "name";
                j = i;
                a.ad.h(k, j);
            }
            ;
        }
    }
    CT_ProtectedRange_SML2009.$t = /*@__PURE__*/ markType(CT_ProtectedRange_SML2009, 'CT_ProtectedRange_SML2009');
    return CT_ProtectedRange_SML2009;
})();
