/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, EnumUtil, markType } from "igniteui-react-core";
import { ST_StyleColorEnum_$type } from "./ST_StyleColorEnum";
import { tryParseUInt32_2 } from "igniteui-react-core";
/**
 * @hidden
 */
export let ST_StyleColorVal = /*@__PURE__*/ (() => {
    class ST_StyleColorVal extends Base {
        constructor() {
            super(...arguments);
            this.c = toNullable(Number_$type, null);
            this.d = toNullable(ST_StyleColorEnum_$type, null);
            this.g = null;
        }
        get e() {
            return this.c;
        }
        set e(a) {
            this.c = a;
        }
        get f() {
            return this.d;
        }
        set f(a) {
            this.d = a;
        }
        get j() {
            return this.g;
        }
        set j(a) {
            this.g = a;
        }
        static a(a) {
            return ST_StyleColorVal.b(a);
        }
        h() {
            return this.i();
        }
        static b(a) {
            let b = new ST_StyleColorVal();
            let c;
            let d;
            if (((() => { let e = tryParseUInt32_2(a, 7, null, c); c = e.p3; return e.ret; })())) {
                b.e = toNullable(Number_$type, c);
            }
            else if (((() => { let e = EnumUtil.tryParse$1(ST_StyleColorEnum_$type, a, true, d); d = e.p2; return e.ret; })())) {
                b.f = toNullable(ST_StyleColorEnum_$type, d);
            }
            else {
                b.j = a;
            }
            return b;
        }
        i() {
            return this.e.hasValue ? this.e.value.toString() : this.f.hasValue ? EnumUtil.getName(ST_StyleColorEnum_$type, this.f.value) : this.j;
        }
    }
    ST_StyleColorVal.$t = /*@__PURE__*/ markType(ST_StyleColorVal, 'ST_StyleColorVal');
    return ST_StyleColorVal;
})();
