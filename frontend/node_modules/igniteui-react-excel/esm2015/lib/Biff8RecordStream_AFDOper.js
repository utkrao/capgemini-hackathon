/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, String_$type, Boolean_$type, markType } from "igniteui-react-core";
import { ErrorValue } from "./ErrorValue";
import { stringContains } from "igniteui-react-core";
/**
 * @hidden
 */
export let Biff8RecordStream_AFDOper = /*@__PURE__*/ (() => {
    class Biff8RecordStream_AFDOper extends Base {
        constructor(a, ..._rest) {
            super();
            this.c = 0;
            this.a = 2;
            this.l = null;
            this.m = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        if (c.length > 255) {
                            c = c.substr(0, 255);
                        }
                        this.m = c;
                        this.c = 6;
                        this.l = c.length;
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.n(c, d);
                    }
                    break;
                case 3:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        if (d == null) {
                            return;
                        }
                        let e;
                        let f;
                        let g = d._q(c, e, f);
                        e = g.p1;
                        f = g.p2;
                        this.n(f, e);
                    }
                    break;
            }
        }
        n(a, b) {
            this.a = b;
            let c = typeCast(String_$type, a);
            if (c != null) {
                if (c.length == 0 && this.a == 5) {
                    this.c = 14;
                }
                else {
                    this.c = 6;
                    this.m = c;
                    this.l = this.m.length;
                }
            }
            else {
                this.l = a;
                if (typeof a === 'number') {
                    this.c = 4;
                }
                else if (typeCast(Boolean_$type, a) !== null || typeCast(ErrorValue.$, a) !== null) {
                    this.c = 8;
                }
                else {
                }
            }
        }
        get k() {
            if (this.c == 6) {
                return this.m;
            }
            return this.l;
        }
        get b() {
            if (this.c != 6) {
                return false;
            }
            return stringContains(this.m, "*") || stringContains(this.m, "?");
        }
    }
    Biff8RecordStream_AFDOper.$t = /*@__PURE__*/ markType(Biff8RecordStream_AFDOper, 'Biff8RecordStream_AFDOper');
    return Biff8RecordStream_AFDOper;
})();
