/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DrawingNamespaceDefinitionBase } from "./DrawingNamespaceDefinitionBase";
import { ST_Coordinate } from "./ST_Coordinate";
import { fromEnum, markType } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { DrawingMLMain } from "./DrawingMLMain";
import { ST_EditAs_$type } from "./ST_EditAs";
/**
 * @hidden
 */
export let DrawingMLSpreadsheetDrawing = /*@__PURE__*/ (() => {
    class DrawingMLSpreadsheetDrawing extends DrawingNamespaceDefinitionBase {
        constructor() {
            super(DrawingMLSpreadsheetDrawing.dr, DrawingMLSpreadsheetDrawing.ds);
        }
        get_t() {
            return "xdr";
        }
        get t() {
            return this.get_t();
        }
        static er(a, b) {
        }
        static e6(a, b) {
            a.ad.p(b, "xdr");
        }
        static ey(a, b, c) {
            c = ST_Coordinate.h(a.ab.ad);
            return {
                p2: c
            };
        }
        static fd(a, b, c) {
            a.ad.p(b, "xdr");
            a.ad.u(c.toString());
        }
        static en(a) {
        }
        static e2(a) {
            a.ad.p(DrawingMLSpreadsheetDrawing.dt, "xdr");
        }
        static eo(a, b, c) {
            b = true;
            c = true;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "fLocksWithSheet":
                        b = ST_OnOff.e(d.d);
                        break;
                    case "fPrintsWithSheet":
                        c = ST_OnOff.e(d.d);
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c
            };
        }
        static e3(a, b = true, c = true) {
            a.ad.p(DrawingMLSpreadsheetDrawing.du, "xdr");
            let d;
            if (b != true) {
                d = ST_OnOff.g(b);
                a.ad.h("fLocksWithSheet", d);
            }
            if (c != true) {
                d = ST_OnOff.g(c);
                a.ad.h("fPrintsWithSheet", d);
            }
        }
        static ep(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, DrawingMLSpreadsheetDrawing.dx);
            return {
                p1: b
            };
        }
        static e4(a, b) {
            XmlNamespaceDefinitionBase.ag(a, DrawingMLSpreadsheetDrawing.dx, "xdr", b);
        }
        static eq(a, b) {
            let c = DrawingMLSpreadsheetDrawing.ey(a, DrawingMLSpreadsheetDrawing.dy, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static e5(a, b) {
            DrawingMLSpreadsheetDrawing.fd(a, DrawingMLSpreadsheetDrawing.dy, b);
        }
        static es(a, b, c) {
            let d = DrawingMLMain.k6(a, DrawingMLSpreadsheetDrawing.d1, b, c);
            b = d.p2;
            c = d.p3;
            return {
                p1: b,
                p2: c
            };
        }
        static e7(a, b, c) {
            DrawingMLMain.n7(a, DrawingMLSpreadsheetDrawing.d1, b, c);
        }
        static et(a) {
        }
        static e8(a) {
            DrawingMLSpreadsheetDrawing.e6(a, DrawingMLSpreadsheetDrawing.d4);
        }
        static eu(a) {
        }
        static e9(a) {
            a.ad.p(DrawingMLSpreadsheetDrawing.eb, "xdr");
        }
        static ev(a, b, c) {
            let d = DrawingMLMain.k2(a, DrawingMLSpreadsheetDrawing.ed, b, c);
            b = d.p2;
            c = d.p3;
            return {
                p1: b,
                p2: c
            };
        }
        static fa(a, b, c) {
            DrawingMLMain.n3(a, DrawingMLSpreadsheetDrawing.ed, b, c);
        }
        static ew(a, b) {
            b = XmlNamespaceDefinitionBase.l(a, DrawingMLSpreadsheetDrawing.ee);
            return {
                p1: b
            };
        }
        static fb(a, b) {
            XmlNamespaceDefinitionBase.ag(a, DrawingMLSpreadsheetDrawing.ee, "xdr", b);
        }
        static ex(a, b) {
            let c = DrawingMLSpreadsheetDrawing.ey(a, DrawingMLSpreadsheetDrawing.ef, b);
            b = c.p2;
            return {
                p1: b
            };
        }
        static fc(a, b) {
            DrawingMLSpreadsheetDrawing.fd(a, DrawingMLSpreadsheetDrawing.ef, b);
        }
        static ez(a) {
        }
        static fe(a) {
            DrawingMLSpreadsheetDrawing.e6(a, DrawingMLSpreadsheetDrawing.ej);
        }
        static e0(a, b) {
            b = 0;
            let c = a.ao("editAs");
            if (c != null) {
                b = XmlNamespaceDefinitionBase.b(ST_EditAs_$type, c, b);
            }
            return {
                p1: b
            };
        }
        static ff(a, b = 0) {
            a.ad.p(DrawingMLSpreadsheetDrawing.ek, "xdr");
            let c;
            if (b != 0) {
                c = XmlNamespaceDefinitionBase.p(ST_EditAs_$type, b);
                a.ad.h("editAs", c);
            }
        }
        static e1(a) {
        }
        static fg(a) {
            a.ad.p(DrawingMLSpreadsheetDrawing.em, "xdr");
            let b = a.d._z;
            a.ad.l(DrawingMLMain.ao);
            a.ad.l(DrawingMLSpreadsheetDrawing.dp);
        }
    }
    DrawingMLSpreadsheetDrawing.$t = /*@__PURE__*/ markType(DrawingMLSpreadsheetDrawing, 'DrawingMLSpreadsheetDrawing', DrawingNamespaceDefinitionBase.$);
    DrawingMLSpreadsheetDrawing.ds = "http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing";
    DrawingMLSpreadsheetDrawing.dr = "http://purl.oclc.org/ooxml/drawingml/spreadsheetDrawing";
    DrawingMLSpreadsheetDrawing.dt = DrawingMLSpreadsheetDrawing.dr + "/absoluteAnchor";
    DrawingMLSpreadsheetDrawing.du = DrawingMLSpreadsheetDrawing.dr + "/clientData";
    DrawingMLSpreadsheetDrawing.dx = DrawingMLSpreadsheetDrawing.dr + "/col";
    DrawingMLSpreadsheetDrawing.dy = DrawingMLSpreadsheetDrawing.dr + "/colOff";
    DrawingMLSpreadsheetDrawing.d1 = DrawingMLSpreadsheetDrawing.dr + "/ext";
    DrawingMLSpreadsheetDrawing.d4 = DrawingMLSpreadsheetDrawing.dr + "/from";
    DrawingMLSpreadsheetDrawing.eb = DrawingMLSpreadsheetDrawing.dr + "/oneCellAnchor";
    DrawingMLSpreadsheetDrawing.ed = DrawingMLSpreadsheetDrawing.dr + "/pos";
    DrawingMLSpreadsheetDrawing.ee = DrawingMLSpreadsheetDrawing.dr + "/row";
    DrawingMLSpreadsheetDrawing.ef = DrawingMLSpreadsheetDrawing.dr + "/rowOff";
    DrawingMLSpreadsheetDrawing.ej = DrawingMLSpreadsheetDrawing.dr + "/to";
    DrawingMLSpreadsheetDrawing.ek = DrawingMLSpreadsheetDrawing.dr + "/twoCellAnchor";
    DrawingMLSpreadsheetDrawing.em = DrawingMLSpreadsheetDrawing.dr + "/wsDr";
    DrawingMLSpreadsheetDrawing.dz = DrawingMLSpreadsheetDrawing.dr + "/cxnSp";
    DrawingMLSpreadsheetDrawing.d5 = DrawingMLSpreadsheetDrawing.dr + "/graphicFrame";
    DrawingMLSpreadsheetDrawing.d6 = DrawingMLSpreadsheetDrawing.dr + "/grpSp";
    DrawingMLSpreadsheetDrawing.ec = DrawingMLSpreadsheetDrawing.dr + "/pic";
    DrawingMLSpreadsheetDrawing.eg = DrawingMLSpreadsheetDrawing.dr + "/sp";
    DrawingMLSpreadsheetDrawing.ea = DrawingMLSpreadsheetDrawing.dr + "/nvSpPr";
    DrawingMLSpreadsheetDrawing.dv = DrawingMLSpreadsheetDrawing.dr + "/cNvPr";
    DrawingMLSpreadsheetDrawing.dw = DrawingMLSpreadsheetDrawing.dr + "/cNvSpPr";
    DrawingMLSpreadsheetDrawing.eh = DrawingMLSpreadsheetDrawing.dr + "/spPr";
    DrawingMLSpreadsheetDrawing.el = DrawingMLSpreadsheetDrawing.dr + "/txBody";
    DrawingMLSpreadsheetDrawing.dp = /*@__PURE__*/ new DrawingMLSpreadsheetDrawing();
    return DrawingMLSpreadsheetDrawing;
})();
