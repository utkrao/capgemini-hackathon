/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_CalculatedMember_SML2009 = /*@__PURE__*/ (() => {
    class CT_CalculatedMember_SML2009 extends Base {
        constructor() {
            super();
            this.b = null;
            this.m = null;
            this.i = toNullable(Boolean_$type, null);
            this.g = toNullable(Boolean_$type, null);
            this.k = toNullable(Boolean_$type, null);
            this.o = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        static p(a, b, c, d, e, f) {
            b = null;
            c = toNullable(Boolean_$type, null);
            d = toNullable(Boolean_$type, null);
            e = toNullable(Boolean_$type, null);
            f = null;
            for (let g of fromEnum(a.ab.u)) {
                switch (g.a.e(a.d)) {
                    case "displayFolder":
                        b = g.d;
                        break;
                    case "flattenHierarchies":
                        c = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "dynamicSet":
                        d = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "hierarchizeDistinct":
                        e = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "mdxLong":
                        f = g.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        static q(a, b, c = null, d = toNullable(Boolean_$type, null), e = toNullable(Boolean_$type, null), f = toNullable(Boolean_$type, null), g = null) {
            a.ad.p(b, null);
            let h = null;
            let i = null;
            if (c != null) {
                i = "displayFolder";
                h = c;
                a.ad.h(i, h);
            }
            if (d.hasValue) {
                i = "dynamicSet";
                h = ST_OnOff.g(d.value);
                a.ad.h(i, h);
            }
            if (e.hasValue) {
                i = "flattenHierarchies";
                h = ST_OnOff.g(e.value);
                a.ad.h(i, h);
            }
            if (f.hasValue) {
                i = "hierarchizeDistinct";
                h = ST_OnOff.g(f.value);
                a.ad.h(i, h);
            }
            if (g != null) {
                i = "mdxLong";
                h = g;
                a.ad.h(i, h);
            }
            ;
        }
    }
    CT_CalculatedMember_SML2009.$t = /*@__PURE__*/ markType(CT_CalculatedMember_SML2009, 'CT_CalculatedMember_SML2009');
    return CT_CalculatedMember_SML2009;
})();
