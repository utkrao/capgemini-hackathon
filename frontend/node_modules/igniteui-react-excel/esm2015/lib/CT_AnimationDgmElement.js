/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_DgmBuildStep_$type } from "./ST_DgmBuildStep";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
/**
 * @hidden
 */
export let CT_AnimationDgmElement = /*@__PURE__*/ (() => {
    class CT_AnimationDgmElement extends Base {
        constructor() {
            super();
            this.f = null;
            this.c = toNullable(ST_DgmBuildStep_$type, null);
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        static h(a, b, c) {
            b = null;
            c = toNullable(ST_DgmBuildStep_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "id":
                        b = d.d;
                        break;
                    case "bldStep":
                        c = toNullable(ST_DgmBuildStep_$type, XmlNamespaceDefinitionBase.b(ST_DgmBuildStep_$type, d.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static i(a, b, c = toNullable(ST_DgmBuildStep_$type, null), d = null) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "bldStep";
                e = XmlNamespaceDefinitionBase.p(ST_DgmBuildStep_$type, c.value);
                a.ad.h(f, e);
            }
            if (d != null) {
                f = "id";
                e = d;
                a.ad.h(f, e);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_AnimationDgmElement.$t = /*@__PURE__*/ markType(CT_AnimationDgmElement, 'CT_AnimationDgmElement');
    return CT_AnimationDgmElement;
})();
