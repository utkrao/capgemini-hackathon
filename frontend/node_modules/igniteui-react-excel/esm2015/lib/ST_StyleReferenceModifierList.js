/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, fromEnum, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ST_StyleReferenceModifier } from "./ST_StyleReferenceModifier";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { StringBuilder } from "igniteui-react-core";
/**
 * @hidden
 */
export let ST_StyleReferenceModifierList = /*@__PURE__*/ (() => {
    class ST_StyleReferenceModifierList extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
        static a(a) {
            return ST_StyleReferenceModifierList.b(a);
        }
        e() {
            return this.f();
        }
        static b(a) {
            let b = new ST_StyleReferenceModifierList();
            let c = XmlNamespaceDefinitionBase.g(String_$type, a, (d) => d);
            if (c != null) {
                b.d = new List$1(ST_StyleReferenceModifier.$, 2, c.count);
                for (let d of fromEnum(c)) {
                    let e = ST_StyleReferenceModifier.a(d);
                    if (e == null) {
                        continue;
                    }
                    if (b.d == null) {
                        b.d = new List$1(ST_StyleReferenceModifier.$, 0);
                    }
                    b.d.add(e);
                }
            }
            return b;
        }
        f() {
            if (this.d == null) {
                return null;
            }
            let a = new StringBuilder(0);
            let b = this.d.count - 1;
            for (let c = 0; c <= b; c++) {
                let d = this.d._inner[c];
                a.l(d.f());
                a.l(" ");
            }
            return a.toString();
        }
    }
    ST_StyleReferenceModifierList.$t = /*@__PURE__*/ markType(ST_StyleReferenceModifierList, 'ST_StyleReferenceModifierList');
    return ST_StyleReferenceModifierList;
})();
