/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_SlicerCacheDefinition = /*@__PURE__*/ (() => {
    class CT_SlicerCacheDefinition extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.f = null;
            this.h = null;
            this.j = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        static k(a, b, c) {
            b = null;
            c = null;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "name":
                        b = d.d;
                        break;
                    case "sourceName":
                        c = d.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static l(a, b, c, d) {
            a.ad.p(b, null);
            let e = null;
            let f = null;
            if (c != null) {
                f = "name";
                e = c;
                a.ad.h(f, e);
            }
            if (d != null) {
                f = "sourceName";
                e = d;
                a.ad.h(f, e);
            }
            ;
        }
    }
    CT_SlicerCacheDefinition.$t = /*@__PURE__*/ markType(CT_SlicerCacheDefinition, 'CT_SlicerCacheDefinition');
    return CT_SlicerCacheDefinition;
})();
