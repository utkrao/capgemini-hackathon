/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ExcelDocumentManager } from "./ExcelDocumentManager";
import { WorkbookLoadManagerExcel2007_FontCollection } from "./WorkbookLoadManagerExcel2007_FontCollection";
import { Workbook } from "./Workbook";
import { Stream, Nullable$1, Base, Type, markType, BaseError, String_$type, ValueType, markStruct, toNullable, Number_$type, typeCast, Boolean_$type, fromEnum, Date_$type, getBoxIfEnum, runOn, enumGetBox, EnumUtil, getInstanceType, callStaticConstructors, Array_$type, fromEn, typeGetValue } from "igniteui-react-core";
import { ST_ConformanceClass_$type } from "./ST_ConformanceClass";
import { Excel2007ChartData } from "./Excel2007ChartData";
import { HashSet$1 } from "igniteui-react-core";
import { Office2007ExtensibilityPartManager } from "./Office2007ExtensibilityPartManager";
import { Office2010ExtensibilityPartManager } from "./Office2010ExtensibilityPartManager";
import { ObjectModelCalcChainPartManager } from "./ObjectModelCalcChainPartManager";
import { ObjectModelChartUserShapePartManager } from "./ObjectModelChartUserShapePartManager";
import { ObjectModelPrinterSettingsPartManager } from "./ObjectModelPrinterSettingsPartManager";
import { RoundTripControlData } from "./RoundTripControlData";
import { WorkItem } from "./WorkItem";
import { Tuple$2 } from "igniteui-react-core";
import { Uri } from "igniteui-react-core";
import { WorkItemExtensions } from "./WorkItemExtensions";
import { ExcelImage } from "./ExcelImage";
import { ImageFormat } from "./ImageFormat";
import { ImagePartManagerBase } from "./ImagePartManagerBase";
import { Guid } from "igniteui-react-core";
import { ImageData } from "./ImageData";
import { MemoryStream } from "igniteui-react-core";
import { ExcelUtils } from "./ExcelUtils";
import { InvalidOperationException } from "igniteui-react-core";
import { PngPartManager } from "./PngPartManager";
import { JpegPartManager } from "./JpegPartManager";
import { GifPartManager } from "./GifPartManager";
import { TiffPartManager } from "./TiffPartManager";
import { EmfPartManager } from "./EmfPartManager";
import { WmfPartManager } from "./WmfPartManager";
import { BmpPartManager } from "./BmpPartManager";
import { Tuple } from "igniteui-react-core";
import { Async } from "./Async";
import { WorkbookFormat_$type } from "./WorkbookFormat";
import { List$1 } from "igniteui-react-core";
import { BinaryData } from "./BinaryData";
import { BorderInfo } from "./BorderInfo";
import { StyleInfo } from "./StyleInfo";
import { FillInfo } from "./FillInfo";
import { ProtectionInfo } from "./ProtectionInfo";
import { AlignmentInfo } from "./AlignmentInfo";
import { WorksheetCellFormatData } from "./WorksheetCellFormatData";
import { WorkbookStyle } from "./WorkbookStyle";
import { IWorkbookFontDefaultsResolver_$type } from "./IWorkbookFontDefaultsResolver";
import { WorkbookFontData } from "./WorkbookFontData";
import { Dictionary$2 } from "igniteui-react-core";
import { WorkbookStyleCollection } from "./WorkbookStyleCollection";
import { IWorkbookFont_$type } from "./IWorkbookFont";
import { WorkbookFormatCollection } from "./WorkbookFormatCollection";
import { nullableNotEquals, nullableEquals, nullableLessThan, nullableIsNull, unwrapNullable, wrapNullable, nullableDivide } from "igniteui-react-core";
import { stringFormat, stringCompare3, stringInsert, stringSplit, stringEquals1 } from "igniteui-react-core";
import { PartManagerBase } from "./PartManagerBase";
import { CT_AbsoluteAnchor } from "./CT_AbsoluteAnchor";
import { CT_TwoCellAnchor } from "./CT_TwoCellAnchor";
import { WorksheetShape } from "./WorksheetShape";
import { SpreadsheetMLMain } from "./SpreadsheetMLMain";
import { XlsxUtilities } from "./XlsxUtilities";
import { EG_Anchor } from "./EG_Anchor";
import { DrawingMLSpreadsheetDrawing } from "./DrawingMLSpreadsheetDrawing";
import { CT_AnchorClientData } from "./CT_AnchorClientData";
import { CT_Marker } from "./CT_Marker";
import { ST_Coordinate } from "./ST_Coordinate";
import { ColorInfo } from "./ColorInfo";
import { ST_UnsignedIntHex } from "./ST_UnsignedIntHex";
import { WorkbookColorInfo } from "./WorkbookColorInfo";
import { WorkbookThemeColorType_$type } from "./WorkbookThemeColorType";
import { Color } from "igniteui-react-core";
import { ExternalWorkbookReference } from "./ExternalWorkbookReference";
import { NamedReference } from "./NamedReference";
import { SingleTargetFormula } from "./SingleTargetFormula";
import { WorkbookLoadManagerExcel2007_NamedReferenceInfo } from "./WorkbookLoadManagerExcel2007_NamedReferenceInfo";
import { CultureInfo } from "igniteui-react-core";
import { Formula } from "./Formula";
import { WorkbookReferenceBase } from "./WorkbookReferenceBase";
import { ReferenceToken } from "./ReferenceToken";
import { ST_PositiveCoordinate } from "./ST_PositiveCoordinate";
import { CT_PositiveSize2D } from "./CT_PositiveSize2D";
import { CT_OneCellAnchor } from "./CT_OneCellAnchor";
import { CT_Point2D } from "./CT_Point2D";
import { FormattedStringElement } from "./FormattedStringElement";
import { FormattedStringRun } from "./FormattedStringRun";
import { StringElement } from "./StringElement";
import { WorkbookFontProxy } from "./WorkbookFontProxy";
import { Convert } from "igniteui-react-core";
import { ST_CellType_$type } from "./ST_CellType";
import { ST_OnOff } from "./ST_OnOff";
import { FormulaParser } from "./FormulaParser";
import { KnownBoxes } from "./KnownBoxes";
import { ObjectModelCommonPartHelpers_DoubleValueCache } from "./ObjectModelCommonPartHelpers_DoubleValueCache";
import { WorkbookLoadManager } from "./WorkbookLoadManager";
import { FormattedString } from "./FormattedString";
import { Worksheet } from "./Worksheet";
import { WorkbookSaveManager } from "./WorkbookSaveManager";
import { Sheet } from "./Sheet";
import { CellReferenceMode_$type } from "./CellReferenceMode";
import { intSToU, tryParseInt32_1, tryParseNumber1, intToString1, u32BitwiseOr, numberToString, parseUInt32_1, intToString, tryParseUInt32_2, parseNumber, parseInt64_1, parseInt32_1 } from "igniteui-react-core";
import { stringReplace, stringStartsWith, stringConcat, stringEmpty, stringIsNullOrEmpty, stringContains, stringIsNullOrWhiteSpace, stringJoin1 } from "igniteui-react-core";
import { dateParse } from "igniteui-react-core";
import { TablePartManager } from "./TablePartManager";
import { WorksheetTable } from "./WorksheetTable";
import { WorksheetTableArea_$type } from "./WorksheetTableArea";
import { WorksheetRegion } from "./WorksheetRegion";
import { WorksheetTableColumn } from "./WorksheetTableColumn";
import { ObjectModelTablePartManager_FilterColumnElementContext } from "./ObjectModelTablePartManager_FilterColumnElementContext";
import { FillFilter } from "./FillFilter";
import { FontColorFilter } from "./FontColorFilter";
import { ObjectModelTablePartManager_CustomFilterContext } from "./ObjectModelTablePartManager_CustomFilterContext";
import { CustomFilterCondition } from "./CustomFilterCondition";
import { FixedValuesFilter } from "./FixedValuesFilter";
import { FixedDateGroup } from "./FixedDateGroup";
import { DynamicValuesFilter } from "./DynamicValuesFilter";
import { ObjectModelTablePartManager_TableContext } from "./ObjectModelTablePartManager_TableContext";
import { ST_IconSetType_$type } from "./ST_IconSetType";
import { IconFilter } from "./IconFilter";
import { FillSortCondition } from "./FillSortCondition";
import { FontColorSortCondition } from "./FontColorSortCondition";
import { IconSortCondition } from "./IconSortCondition";
import { OrderedSortCondition } from "./OrderedSortCondition";
import { CustomListSortCondition } from "./CustomListSortCondition";
import { WorksheetTableColumnArea_$type } from "./WorksheetTableColumnArea";
import { WorksheetTableStyle } from "./WorksheetTableStyle";
import { TopOrBottomFilter } from "./TopOrBottomFilter";
import { ArrayFormula } from "./ArrayFormula";
import { CustomFilter } from "./CustomFilter";
import { IColorFilter_$type } from "./IColorFilter";
import { DateRangeFilter } from "./DateRangeFilter";
import { AverageFilter } from "./AverageFilter";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { KeyValuePair$2 } from "igniteui-react-core";
import { SpreadsheetML2009Main } from "./SpreadsheetML2009Main";
import { truncate, isNaN_, intDivide, tryParseNumber } from "igniteui-react-core";
import { dateGetMonth, dateNow } from "igniteui-react-core";
import { ConditionSortContext } from "./ConditionSortContext";
import { ConditionBase } from "./ConditionBase";
import { ConditionSortContextComparer } from "./ConditionSortContextComparer";
import { DocCoreUtils } from "./DocCoreUtils";
import { DxfInfo } from "./DxfInfo";
import { CfRuleInfo_ResolvedValues } from "./CfRuleInfo_ResolvedValues";
import { ST_CfType_$type } from "./ST_CfType";
import { ST_ConditionalFormattingOperator_$type } from "./ST_ConditionalFormattingOperator";
import { ST_TimePeriod_$type } from "./ST_TimePeriod";
import { CfvoWrapper } from "./CfvoWrapper";
import { FormatConditionOperator_$type } from "./FormatConditionOperator";
import { FormatConditionTextOperator_$type } from "./FormatConditionTextOperator";
import { EnumConverter } from "./EnumConverter";
import { IconCriterionWrapper } from "./IconCriterionWrapper";
import { IconSetConditionalFormat } from "./IconSetConditionalFormat";
import { IconCriterion } from "./IconCriterion";
import { ST_DataBarDirection_$type } from "./ST_DataBarDirection";
import { ST_DataBarAxisPosition_$type } from "./ST_DataBarAxisPosition";
import { CommentsPartManager } from "./CommentsPartManager";
import { WorksheetCellCommentData } from "./WorksheetCellCommentData";
import { WorksheetCellComment } from "./WorksheetCellComment";
import { WorksheetCell } from "./WorksheetCell";
import { ST_Guid } from "./ST_Guid";
import { CellAddress } from "./CellAddress";
import { OperatorConditionalFormat } from "./OperatorConditionalFormat";
import { FormulaConditionalFormat } from "./FormulaConditionalFormat";
import { RankConditionalFormat } from "./RankConditionalFormat";
import { AverageConditionalFormat } from "./AverageConditionalFormat";
import { UniqueConditionalFormat } from "./UniqueConditionalFormat";
import { DuplicateConditionalFormat } from "./DuplicateConditionalFormat";
import { BlanksConditionalFormat } from "./BlanksConditionalFormat";
import { NoBlanksConditionalFormat } from "./NoBlanksConditionalFormat";
import { ErrorsConditionalFormat } from "./ErrorsConditionalFormat";
import { NoErrorsConditionalFormat } from "./NoErrorsConditionalFormat";
import { TextOperatorConditionalFormat } from "./TextOperatorConditionalFormat";
import { DateTimeConditionalFormat } from "./DateTimeConditionalFormat";
import { ColorScaleConditionalFormat } from "./ColorScaleConditionalFormat";
import { DataBarConditionalFormat } from "./DataBarConditionalFormat";
import { ConditionalFormatBase } from "./ConditionalFormatBase";
import { WorksheetCellAddress } from "./WorksheetCellAddress";
import { ConditionValue } from "./ConditionValue";
import { ConditionValueInfo } from "./ConditionValueInfo";
import { Excel2006Main } from "./Excel2006Main";
import { StringBuilder } from "igniteui-react-core";
import { CT_SparklineGroup } from "./CT_SparklineGroup";
import { ST_SparklineType_$type } from "./ST_SparklineType";
import { ST_DispBlanksAs_$type } from "./ST_DispBlanksAs";
import { ST_SparklineAxisMinMax_$type } from "./ST_SparklineAxisMinMax";
import { CT_Sparkline } from "./CT_Sparkline";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { CT_Sqref } from "./CT_Sqref";
import { SparklineGroup } from "./SparklineGroup";
import { Sparkline } from "./Sparkline";
import { WorksheetRegionAddress } from "./WorksheetRegionAddress";
import { WorksheetPartManager } from "./WorksheetPartManager";
import { SheetRelationships } from "./SheetRelationships";
import { AttributeValue } from "./AttributeValue";
import { LegacyShapeData } from "./LegacyShapeData";
import { WorksheetRow } from "./WorksheetRow";
import { Regex } from "igniteui-react-core";
import { PrintOptions } from "./PrintOptions";
import { HorizontalPageBreakCollection } from "./HorizontalPageBreakCollection";
import { VerticalPageBreakCollection } from "./VerticalPageBreakCollection";
import { HorizontalPageBreak } from "./HorizontalPageBreak";
import { VerticalPageBreak } from "./VerticalPageBreak";
import { MathUtilities } from "./MathUtilities";
import { UnknownShape } from "./UnknownShape";
import { CustomView } from "./CustomView";
import { CustomViewCollection } from "./CustomViewCollection";
import { DisplayOptions } from "./DisplayOptions";
import { ObjectModelWorksheetPartManager_DVInfo } from "./ObjectModelWorksheetPartManager_DVInfo";
import { DataValidationRule } from "./DataValidationRule";
import { AnyValueDataValidationRule } from "./AnyValueDataValidationRule";
import { ListDataValidationRule } from "./ListDataValidationRule";
import { CustomDataValidationRule } from "./CustomDataValidationRule";
import { TwoConstraintDataValidationRule } from "./TwoConstraintDataValidationRule";
import { OneConstraintDataValidationRule } from "./OneConstraintDataValidationRule";
import { WorksheetReferenceCollection } from "./WorksheetReferenceCollection";
import { PackageUtilities } from "./PackageUtilities";
import { FormulaContext } from "./FormulaContext";
import { WorksheetColumnFilter } from "./WorksheetColumnFilter";
import { PrintOptionsBase } from "./PrintOptionsBase";
import { WorksheetHyperlink } from "./WorksheetHyperlink";
import { WorksheetCellBlock } from "./WorksheetCellBlock";
import { IPackageRelationship_$type } from "./IPackageRelationship";
import { LegacyDrawingHFInfo } from "./LegacyDrawingHFInfo";
import { PaperSize_$type } from "./PaperSize";
import { ProtectionValidationInfo } from "./ProtectionValidationInfo";
import { WorksheetProtectedRange } from "./WorksheetProtectedRange";
import { ST_UnsignedShortHex } from "./ST_UnsignedShortHex";
import { WorksheetPaneSelection } from "./WorksheetPaneSelection";
import { RelativeIndex } from "./RelativeIndex";
import { WorksheetDataTable } from "./WorksheetDataTable";
import { CalcUtilities } from "./CalcUtilities";
import { WorksheetShapeGroupBase } from "./WorksheetShapeGroupBase";
import { StringElementIndex } from "./StringElementIndex";
import { ErrorValue } from "./ErrorValue";
import { WorksheetColumnBlock } from "./WorksheetColumnBlock";
import { Enumerable } from "igniteui-react-core";
import { PivotTableInfo } from "./PivotTableInfo";
import { AlternateContentChoice } from "./AlternateContentChoice";
import { VmlNamespace } from "./VmlNamespace";
import { WorksheetMergedCellsRegion } from "./WorksheetMergedCellsRegion";
import { WorksheetChart } from "./WorksheetChart";
import { OleLinkWorkbookReference } from "./OleLinkWorkbookReference";
import { ActiveXPartManager } from "./ActiveXPartManager";
import { ExcelStylesPartManager } from "./ExcelStylesPartManager";
import { PatternFillInfo } from "./PatternFillInfo";
import { GradientFillInfo } from "./GradientFillInfo";
import { SerializationNumberFormatInfo } from "./SerializationNumberFormatInfo";
import { StopInfo } from "./StopInfo";
import { BuiltInStyleInfo } from "./BuiltInStyleInfo";
import { WorkbookBuiltInStyle } from "./WorkbookBuiltInStyle";
import { WorksheetTableStyleArea_$type } from "./WorksheetTableStyleArea";
import { ObjectModelStylesPartManager_TableStylesCollectionInfo } from "./ObjectModelStylesPartManager_TableStylesCollectionInfo";
import { NotImplementedException } from "igniteui-react-core";
import { StandardTableStyleCollection } from "./StandardTableStyleCollection";
import { WorkbookLoadOptions } from "./WorkbookLoadOptions";
import { WorkbookOptionsBase } from "./WorkbookOptionsBase";
import { CT_Transform2D } from "./CT_Transform2D";
import { WorkbookLoadManagerExcel2007_ShapeAnchorApplicator } from "./WorkbookLoadManagerExcel2007_ShapeAnchorApplicator";
import { WorkItemScheduler } from "./WorkItemScheduler";
import { PackageFactory } from "./PackageFactory";
import { GZipStream } from "./GZipStream";
import { WorkbookLoadManagerExcel2007_UpdateIndexedWorkbookReferencesVisitor } from "./WorkbookLoadManagerExcel2007_UpdateIndexedWorkbookReferencesVisitor";
import { WorkbookPartManagerBase } from "./WorkbookPartManagerBase";
import { IOPath } from "igniteui-react-core";
import { FillPatternStyle_$type } from "./FillPatternStyle";
import { DisplayUnit_$type } from "./DisplayUnit";
import { GetFormulaStringInfo } from "./GetFormulaStringInfo";
import { XLSXFormulaStringGenerator } from "./XLSXFormulaStringGenerator";
import { OleDataSpaces } from "./OleDataSpaces";
import { Package } from "./Package";
import { IWorksheetImage_$type } from "./IWorksheetImage";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_CommonTypeBase } from "./CT_CommonTypeBase";
import { CT_X } from "./CT_X";
import { DrawingMLChart } from "./DrawingMLChart";
import { CT_PositiveFixedPercentage } from "./CT_PositiveFixedPercentage";
import { CT_PositivePercentage } from "./CT_PositivePercentage";
import { CT_FixedPercentage } from "./CT_FixedPercentage";
import { CT_Percentage } from "./CT_Percentage";
import { CT_ComplementTransform } from "./CT_ComplementTransform";
import { CT_GammaTransform } from "./CT_GammaTransform";
import { CT_GrayscaleTransform } from "./CT_GrayscaleTransform";
import { CT_PositiveFixedAngle } from "./CT_PositiveFixedAngle";
import { CT_Angle } from "./CT_Angle";
import { CT_InverseTransform } from "./CT_InverseTransform";
import { CT_InverseGammaTransform } from "./CT_InverseGammaTransform";
import { CT_StretchInfoProperties } from "./CT_StretchInfoProperties";
import { CT_RelativeRect } from "./CT_RelativeRect";
import { ST_PathShadeType_$type } from "./ST_PathShadeType";
import { ST_PositiveFixedPercentage } from "./ST_PositiveFixedPercentage";
import { ST_EffectContainerType_$type } from "./ST_EffectContainerType";
import { ST_TileFlipMode_$type } from "./ST_TileFlipMode";
import { CT_AlphaBiLevelEffect } from "./CT_AlphaBiLevelEffect";
import { CT_AlphaCeilingEffect } from "./CT_AlphaCeilingEffect";
import { CT_AlphaFloorEffect } from "./CT_AlphaFloorEffect";
import { CT_AlphaModulateFixedEffect } from "./CT_AlphaModulateFixedEffect";
import { CT_AlphaReplaceEffect } from "./CT_AlphaReplaceEffect";
import { CT_BiLevelEffect } from "./CT_BiLevelEffect";
import { CT_BlurEffect } from "./CT_BlurEffect";
import { ST_BlendMode_$type } from "./ST_BlendMode";
import { CT_GrayscaleEffect } from "./CT_GrayscaleEffect";
import { CT_HSLEffect } from "./CT_HSLEffect";
import { ST_RectAlignment_$type } from "./ST_RectAlignment";
import { ST_PresetShadowVal_$type } from "./ST_PresetShadowVal";
import { CT_ReflectionEffect } from "./CT_ReflectionEffect";
import { CT_SoftEdgesEffect } from "./CT_SoftEdgesEffect";
import { CT_Camera } from "./CT_Camera";
import { CT_LightRig } from "./CT_LightRig";
import { CT_Point3D } from "./CT_Point3D";
import { CT_Vector3D } from "./CT_Vector3D";
import { CT_SphereCoords } from "./CT_SphereCoords";
import { ST_BevelPresetType_$type } from "./ST_BevelPresetType";
import { CT_Bevel } from "./CT_Bevel";
import { CT_LineJoinBevel } from "./CT_LineJoinBevel";
import { CT_DashStopList } from "./CT_DashStopList";
import { CT_LineEndProperties } from "./CT_LineEndProperties";
import { CT_LinePropertiesBase } from "./CT_LinePropertiesBase";
import { CT_LineJoinMiterProperties } from "./CT_LineJoinMiterProperties";
import { CT_PresetLineDashProperties } from "./CT_PresetLineDashProperties";
import { CT_LineJoinRound } from "./CT_LineJoinRound";
import { CT_DashStop } from "./CT_DashStop";
import { ISaveToXLSX_$type } from "./ISaveToXLSX";
import { CT_BackgroundFillStyleList } from "./CT_BackgroundFillStyleList";
import { CT_FillStyleList } from "./CT_FillStyleList";
import { ST_TextVertOverflowType_$type } from "./ST_TextVertOverflowType";
import { ST_TextHorzOverflowType_$type } from "./ST_TextHorzOverflowType";
import { ST_TextVerticalType_$type } from "./ST_TextVerticalType";
import { ST_TextWrappingType_$type } from "./ST_TextWrappingType";
import { ST_TextAnchoringType_$type } from "./ST_TextAnchoringType";
import { ST_StyleReferenceModifierList } from "./ST_StyleReferenceModifierList";
import { ST_StyleEntryModifierList } from "./ST_StyleEntryModifierList";
import { ST_FontCollectionIndex_$type } from "./ST_FontCollectionIndex";
import { ST_PresetMaterialType_$type } from "./ST_PresetMaterialType";
import { DrawingMLMain } from "./DrawingMLMain";
import { ST_PresetPatternVal_$type } from "./ST_PresetPatternVal";
import { ST_BlackWhiteMode_$type } from "./ST_BlackWhiteMode";
import { ST_ColorSchemeIndex_$type } from "./ST_ColorSchemeIndex";
import { CT_PresetTextShape } from "./CT_PresetTextShape";
import { CT_TextSpacingPercent } from "./CT_TextSpacingPercent";
import { CT_TextSpacingPoint } from "./CT_TextSpacingPoint";
import { CT_NoFillProperties } from "./CT_NoFillProperties";
import { CT_GroupFillProperties } from "./CT_GroupFillProperties";
import { CT_AlphaOutsetEffect } from "./CT_AlphaOutsetEffect";
import { CT_EffectReference } from "./CT_EffectReference";
import { CT_LuminanceEffect } from "./CT_LuminanceEffect";
import { CT_RelativeOffsetEffect } from "./CT_RelativeOffsetEffect";
import { CT_TintEffect } from "./CT_TintEffect";
import { CT_TransformEffect } from "./CT_TransformEffect";
import { CT_CustomGeometry2D } from "./CT_CustomGeometry2D";
import { CT_PresetGeometry2D } from "./CT_PresetGeometry2D";
import { CT_TextNoAutofit } from "./CT_TextNoAutofit";
import { CT_TextNormalAutofit } from "./CT_TextNormalAutofit";
import { CT_TextShapeAutofit } from "./CT_TextShapeAutofit";
import { CT_FlatText } from "./CT_FlatText";
import { CT_TileInfoProperties } from "./CT_TileInfoProperties";
import { WorkbookColorTransform } from "./WorkbookColorTransform";
import { ST_Percentage } from "./ST_Percentage";
import { CT_TextUnderlineLineFollowText } from "./CT_TextUnderlineLineFollowText";
import { CT_TextUnderlineFillFollowText } from "./CT_TextUnderlineFillFollowText";
import { CT_TextBulletColorFollowText } from "./CT_TextBulletColorFollowText";
import { CT_TextBulletSizeFollowText } from "./CT_TextBulletSizeFollowText";
import { CT_TextBulletSizePercent } from "./CT_TextBulletSizePercent";
import { CT_TextBulletSizePoint } from "./CT_TextBulletSizePoint";
import { CT_TextBulletTypefaceFollowText } from "./CT_TextBulletTypefaceFollowText";
import { CT_TextFont } from "./CT_TextFont";
import { CT_TextNoBullet } from "./CT_TextNoBullet";
import { CT_TextAutonumberBullet } from "./CT_TextAutonumberBullet";
import { CT_TextCharBullet } from "./CT_TextCharBullet";
import { CT_BlipFillPropertiesBase } from "./CT_BlipFillPropertiesBase";
import { CT_TextCharacterPropertiesBase } from "./CT_TextCharacterPropertiesBase";
import { CT_Hyperlink } from "./CT_Hyperlink";
import { ST_TextFontSize } from "./ST_TextFontSize";
import { ST_TextUnderlineType_$type } from "./ST_TextUnderlineType";
import { ST_TextStrikeType_$type } from "./ST_TextStrikeType";
import { ST_TextCapsType_$type } from "./ST_TextCapsType";
import { ST_TextPoint } from "./ST_TextPoint";
import { CT_Blip } from "./CT_Blip";
import { ST_BlipCompression_$type } from "./ST_BlipCompression";
import { ST_LineWidth } from "./ST_LineWidth";
import { ST_LineCap_$type } from "./ST_LineCap";
import { ST_CompoundLine_$type } from "./ST_CompoundLine";
import { ST_PenAlignment_$type } from "./ST_PenAlignment";
import { ST_HexColorRGB } from "./ST_HexColorRGB";
import { ST_SystemColorVal_$type } from "./ST_SystemColorVal";
import { ST_SchemeColorVal_$type } from "./ST_SchemeColorVal";
import { ST_PresetColorVal_$type } from "./ST_PresetColorVal";
import { CT_TextParagraphProperties } from "./CT_TextParagraphProperties";
import { CT_TextTabStop } from "./CT_TextTabStop";
import { ST_TextAlignType_$type } from "./ST_TextAlignType";
import { ST_Coordinate32 } from "./ST_Coordinate32";
import { ST_TextFontAlignType_$type } from "./ST_TextFontAlignType";
import { ST_TextIndent } from "./ST_TextIndent";
import { ST_TextIndentLevelType } from "./ST_TextIndentLevelType";
import { ST_TextMargin } from "./ST_TextMargin";
import { CT_TextTabStopList } from "./CT_TextTabStopList";
import { ST_PositivePercentage } from "./ST_PositivePercentage";
import { CT_StyleMatrixReference } from "./CT_StyleMatrixReference";
import { ST_FixedPercentage } from "./ST_FixedPercentage";
import { ST_PositiveFixedAngle } from "./ST_PositiveFixedAngle";
import { ST_Angle } from "./ST_Angle";
import { CT_EmbeddedWAVAudioFile } from "./CT_EmbeddedWAVAudioFile";
import { ST_LineEndLength_$type } from "./ST_LineEndLength";
import { ST_LineEndType_$type } from "./ST_LineEndType";
import { ST_LineEndWidth_$type } from "./ST_LineEndWidth";
import { ST_PresetLineDashVal_$type } from "./ST_PresetLineDashVal";
import { ST_ShapeType_$type } from "./ST_ShapeType";
import { CT_GeomRect } from "./CT_GeomRect";
import { ST_AdjCoordinate } from "./ST_AdjCoordinate";
import { CT_ConnectionSite } from "./CT_ConnectionSite";
import { ST_AdjAngle } from "./ST_AdjAngle";
import { CT_AdjPoint2D } from "./CT_AdjPoint2D";
import { CT_GeomGuide } from "./CT_GeomGuide";
import { CT_Path2D } from "./CT_Path2D";
import { ST_PathFillMode_$type } from "./ST_PathFillMode";
import { CT_PolarAdjustHandle } from "./CT_PolarAdjustHandle";
import { ST_GeomGuideName } from "./ST_GeomGuideName";
import { CT_XYAdjustHandle } from "./CT_XYAdjustHandle";
import { CT_Path2DArcTo } from "./CT_Path2DArcTo";
import { OfficeDocumentRelationships } from "./OfficeDocumentRelationships";
import { CT_GeomGuideList } from "./CT_GeomGuideList";
import { CT_AdjustHandleList } from "./CT_AdjustHandleList";
import { CT_ConnectionSiteList } from "./CT_ConnectionSiteList";
import { CT_Path2DList } from "./CT_Path2DList";
import { CT_BarDir } from "./CT_BarDir";
import { CT_BarGrouping } from "./CT_BarGrouping";
import { CT_NumFmt_Chart } from "./CT_NumFmt_Chart";
import { CT_DLblPos } from "./CT_DLblPos";
import { CT_AxPos } from "./CT_AxPos";
import { CT_TickMark } from "./CT_TickMark";
import { CT_TickLblPos } from "./CT_TickLblPos";
import { CT_Crosses } from "./CT_Crosses";
import { CT_Grouping } from "./CT_Grouping";
import { CT_TextLanguageID } from "./CT_TextLanguageID";
import { CT_Style } from "./CT_Style";
import { CT_PrintSettings } from "./CT_PrintSettings";
import { CT_RelId } from "./CT_RelId";
import { CT_LegendPos } from "./CT_LegendPos";
import { CT_LayoutTarget } from "./CT_LayoutTarget";
import { CT_LayoutMode } from "./CT_LayoutMode";
import { ST_TimeUnit_$type } from "./ST_TimeUnit";
import { ST_LblAlgn_$type } from "./ST_LblAlgn";
import { CategoryType_$type } from "./CategoryType";
import { CT_Skip } from "./CT_Skip";
import { CT_LogBase } from "./CT_LogBase";
import { CT_Orientation } from "./CT_Orientation";
import { IProvideXValuesData_$type } from "./IProvideXValuesData";
import { CT_StrVal } from "./CT_StrVal";
import { CT_LblOffset } from "./CT_LblOffset";
import { CT_TimeUnit } from "./CT_TimeUnit";
import { CT_AxisUnit } from "./CT_AxisUnit";
import { CT_LblAlgn } from "./CT_LblAlgn";
import { CT_BuiltInUnit } from "./CT_BuiltInUnit";
import { CT_CrossBetween } from "./CT_CrossBetween";
import { SeriesValues } from "./SeriesValues";
import { ChartType_$type } from "./ChartType";
import { CT_MarkerStyle } from "./CT_MarkerStyle";
import { CT_MarkerSize } from "./CT_MarkerSize";
import { CT_PictureFormat } from "./CT_PictureFormat";
import { CT_PictureStackUnit } from "./CT_PictureStackUnit";
import { CT_TrendlineType } from "./CT_TrendlineType";
import { CT_Order } from "./CT_Order";
import { CT_Period } from "./CT_Period";
import { CT_ErrDir } from "./CT_ErrDir";
import { CT_ErrBarType } from "./CT_ErrBarType";
import { CT_ErrValType } from "./CT_ErrValType";
import { CT_NumVal } from "./CT_NumVal";
import { ST_Shape_$type } from "./ST_Shape";
import { CT_GapAmount } from "./CT_GapAmount";
import { CT_BubbleScale } from "./CT_BubbleScale";
import { CT_SizeRepresents } from "./CT_SizeRepresents";
import { IChart3D_$type } from "./IChart3D";
import { CT_OfPieType } from "./CT_OfPieType";
import { CT_SplitType } from "./CT_SplitType";
import { CT_SecondPieSize } from "./CT_SecondPieSize";
import { CT_Shape_Chart } from "./CT_Shape_Chart";
import { ST_BarDir_$type } from "./ST_BarDir";
import { CT_Overlap } from "./CT_Overlap";
import { CT_FirstSliceAng } from "./CT_FirstSliceAng";
import { CT_HoleSize } from "./CT_HoleSize";
import { CT_ScatterStyle } from "./CT_ScatterStyle";
import { ST_MarkerStyle_$type } from "./ST_MarkerStyle";
import { CT_RadarStyle } from "./CT_RadarStyle";
import { CT_RotX } from "./CT_RotX";
import { CT_HPercent } from "./CT_HPercent";
import { CT_RotY } from "./CT_RotY";
import { CT_DepthPercent } from "./CT_DepthPercent";
import { CT_Perspective } from "./CT_Perspective";
import { CT_DispBlanksAs } from "./CT_DispBlanksAs";
import { CT_Lvl } from "./CT_Lvl";
import { DrawingMLChart2012 } from "./DrawingMLChart2012";
import { Environment } from "igniteui-react-core";
import { ErrorBars } from "./ErrorBars";
import { ChartGradientFill } from "./ChartGradientFill";
import { GradientStop } from "./GradientStop";
import { ChartSolidFill } from "./ChartSolidFill";
import { ChartEmptyFill } from "./ChartEmptyFill";
import { ST_BuiltInUnit_$type } from "./ST_BuiltInUnit";
import { ChartGridLines } from "./ChartGridLines";
import { ChartTickLines } from "./ChartTickLines";
import { SeriesValuesBase } from "./SeriesValuesBase";
import { XValues } from "./XValues";
import { SeriesName } from "./SeriesName";
import { Legend } from "./Legend";
import { ST_LegendPos_$type } from "./ST_LegendPos";
import { ChartBorder } from "./ChartBorder";
import { LegendEntry } from "./LegendEntry";
import { ST_AxPos_$type } from "./ST_AxPos";
import { Axis } from "./Axis";
import { VerticalTitleAlignment_$type } from "./VerticalTitleAlignment";
import { BorderLineStyle_$type } from "./BorderLineStyle";
import { TextHorizontalOverflow_$type } from "./TextHorizontalOverflow";
import { TextVerticalOverflow_$type } from "./TextVerticalOverflow";
import { ST_Crosses_$type } from "./ST_Crosses";
import { AxisCrosses_$type } from "./AxisCrosses";
import { ChartLineBase } from "./ChartLineBase";
import { BarShape_$type } from "./BarShape";
import { MarkerStyle_$type } from "./MarkerStyle";
import { ChartLine } from "./ChartLine";
import { DataLabelPosition_$type } from "./DataLabelPosition";
import { AxisGroup_$type } from "./AxisGroup";
import { IComparer$1_$type } from "igniteui-react-core";
import { CT_PrintSettingsEx } from "./CT_PrintSettingsEx";
import { Series } from "./Series";
import { DrawingMLChart2014 } from "./DrawingMLChart2014";
import { ST_SidePos_$type } from "./ST_SidePos";
import { ST_PosAlign_$type } from "./ST_PosAlign";
import { ST_TickMarksType_$type } from "./ST_TickMarksType";
import { CT_TextData } from "./CT_TextData";
import { ST_AxisUnit_$type } from "./ST_AxisUnit";
import { CT_CategoryAxisScaling } from "./CT_CategoryAxisScaling";
import { CT_ValueAxisScaling } from "./CT_ValueAxisScaling";
import { CT_NumberFormat } from "./CT_NumberFormat";
import { ST_IntervalClosedSide_$type } from "./ST_IntervalClosedSide";
import { ST_DoubleOrAutomatic } from "./ST_DoubleOrAutomatic";
import { CT_ParentLabelLayout } from "./CT_ParentLabelLayout";
import { CT_RegionLabelLayout } from "./CT_RegionLabelLayout";
import { CT_SeriesElementVisibilities } from "./CT_SeriesElementVisibilities";
import { CT_Aggregation } from "./CT_Aggregation";
import { CT_Geography } from "./CT_Geography";
import { CT_Statistics } from "./CT_Statistics";
import { CT_Subtotals } from "./CT_Subtotals";
import { CT_DataLabelVisibilities } from "./CT_DataLabelVisibilities";
import { ST_DataLabelPos_$type } from "./ST_DataLabelPos";
import { CT_DataLabelHidden } from "./CT_DataLabelHidden";
import { CT_ValueColorPositions } from "./CT_ValueColorPositions";
import { CT_DataId } from "./CT_DataId";
import { ST_SeriesLayout_$type } from "./ST_SeriesLayout";
import { CT_NumericDimension } from "./CT_NumericDimension";
import { CT_StringDimension } from "./CT_StringDimension";
import { ChartExElements } from "./ChartExElements";
import { CT_Formula } from "./CT_Formula";
import { CT_StringValue } from "./CT_StringValue";
import { CT_NumericValue } from "./CT_NumericValue";
import { CT_NumericLevel } from "./CT_NumericLevel";
import { CT_ValueColorEndPosition } from "./CT_ValueColorEndPosition";
import { CT_ValueColorMiddlePosition } from "./CT_ValueColorMiddlePosition";
import { CT_ExtremeValueColorPosition } from "./CT_ExtremeValueColorPosition";
import { CT_NumberColorPosition } from "./CT_NumberColorPosition";
import { CT_PercentageColorPosition } from "./CT_PercentageColorPosition";
import { CT_GeoCache } from "./CT_GeoCache";
import { CT_Clear } from "./CT_Clear";
import { CT_GeoLocationQueryResults } from "./CT_GeoLocationQueryResults";
import { CT_GeoDataEntityQueryResults } from "./CT_GeoDataEntityQueryResults";
import { CT_GeoDataPointToEntityQueryResults } from "./CT_GeoDataPointToEntityQueryResults";
import { CT_GeoChildEntitiesQueryResults } from "./CT_GeoChildEntitiesQueryResults";
import { CT_GeoLocationQueryResult } from "./CT_GeoLocationQueryResult";
import { CT_GeoLocationQuery } from "./CT_GeoLocationQuery";
import { CT_GeoLocations } from "./CT_GeoLocations";
import { CT_GeoLocation } from "./CT_GeoLocation";
import { CT_Address } from "./CT_Address";
import { CT_GeoDataEntityQueryResult } from "./CT_GeoDataEntityQueryResult";
import { CT_GeoDataEntityQuery } from "./CT_GeoDataEntityQuery";
import { CT_GeoData } from "./CT_GeoData";
import { CT_GeoPolygons } from "./CT_GeoPolygons";
import { CT_GeoPolygon } from "./CT_GeoPolygon";
import { CT_Copyrights } from "./CT_Copyrights";
import { CT_GeoDataPointToEntityQueryResult } from "./CT_GeoDataPointToEntityQueryResult";
import { CT_GeoDataPointQuery } from "./CT_GeoDataPointQuery";
import { CT_GeoDataPointToEntityQuery } from "./CT_GeoDataPointToEntityQuery";
import { CT_GeoChildEntitiesQueryResult } from "./CT_GeoChildEntitiesQueryResult";
import { CT_GeoChildEntitiesQuery } from "./CT_GeoChildEntitiesQuery";
import { ST_EntityType_$type } from "./ST_EntityType";
import { CT_GeoChildEntities } from "./CT_GeoChildEntities";
import { CT_GeoHierarchyEntity } from "./CT_GeoHierarchyEntity";
import { CT_GeoChildTypes } from "./CT_GeoChildTypes";
import { CT_HeaderFooter } from "./CT_HeaderFooter";
import { CT_PageMargins } from "./CT_PageMargins";
import { CT_PageSetup } from "./CT_PageSetup";
import { CT_StringLevel } from "./CT_StringLevel";
import { ChartTitle } from "./ChartTitle";
import { ST_GapWidthRatio } from "./ST_GapWidthRatio";
import { DisplayUnitLabel } from "./DisplayUnitLabel";
import { GeographicMapProjection_$type } from "./GeographicMapProjection";
import { ST_GeoProjectionType_$type } from "./ST_GeoProjectionType";
import { GeographicMappingArea_$type } from "./GeographicMappingArea";
import { ST_GeoMappingLevel_$type } from "./ST_GeoMappingLevel";
import { ChartStyleUtils } from "./ChartStyleUtils";
import { CT_MarkerLayout } from "./CT_MarkerLayout";
import { ST_Coordinate32Unqualified } from "./ST_Coordinate32Unqualified";
import { ST_StyleColorVal } from "./ST_StyleColorVal";
import { ST_StyleColorEnum_$type } from "./ST_StyleColorEnum";
import { ST_TextPointUnqualified } from "./ST_TextPointUnqualified";
import { ST_StyleEntryModifierEnum_$type } from "./ST_StyleEntryModifierEnum";
import { ST_StyleEntryModifier } from "./ST_StyleEntryModifier";
import { ChartStyleElements } from "./ChartStyleElements";
import { ST_ColorStyleMethod } from "./ST_ColorStyleMethod";
import { ST_ColorStyleMethodEnum_$type } from "./ST_ColorStyleMethodEnum";
import { InvalidXLSXElementException } from "./InvalidXLSXElementException";
import { ChartDeserializationCache } from "./ChartDeserializationCache";
import { CT_ShapeProperties } from "./CT_ShapeProperties";
import { CT_SRgbColor } from "./CT_SRgbColor";
import { ST_TextTabAlignType_$type } from "./ST_TextTabAlignType";
import { CT_Path2DClose } from "./CT_Path2DClose";
import { CT_Path2DMoveTo } from "./CT_Path2DMoveTo";
import { CT_Path2DLineTo } from "./CT_Path2DLineTo";
import { CT_Path2DQuadBezierTo } from "./CT_Path2DQuadBezierTo";
import { CT_Path2DCubicBezierTo } from "./CT_Path2DCubicBezierTo";
import { CT_HeaderFooter_Chart } from "./CT_HeaderFooter_Chart";
import { CT_PageMargins_Chart } from "./CT_PageMargins_Chart";
import { ST_PageSetupOrientation_$type } from "./ST_PageSetupOrientation";
import { CT_PageSetup_Chart } from "./CT_PageSetup_Chart";
import { CT_TextListStyle } from "./CT_TextListStyle";
import { ST_QuartileMethod_$type } from "./ST_QuartileMethod";
import { CategoryAxisBinning } from "./CategoryAxisBinning";
import { BoxAndWhiskerSettings } from "./BoxAndWhiskerSettings";
import { SeriesGroup } from "./SeriesGroup";
import { ChartSeriesLines } from "./ChartSeriesLines";
import { LeaderLines } from "./LeaderLines";
import { ChartHighLowLines } from "./ChartHighLowLines";
import { ChartDropLines } from "./ChartDropLines";
import { UpDownBars } from "./UpDownBars";
import { SeriesDataLabels } from "./SeriesDataLabels";
import { DataPoint } from "./DataPoint";
import { Trendline } from "./Trendline";
import { TrendlineLabel } from "./TrendlineLabel";
import { DataLabel } from "./DataLabel";
import { GeographicMapSettings } from "./GeographicMapSettings";
import { GeographicMapColors } from "./GeographicMapColors";
import { ComboChartGroup } from "./ComboChartGroup";
import { TrendlineLine } from "./TrendlineLine";
import { ConditionX14Wrapper } from "./ConditionX14Wrapper";
import { ConditionalFormattingWrapper } from "./ConditionalFormattingWrapper";
import { ConditionalFormattingWrapperBase } from "./ConditionalFormattingWrapperBase";
import { ConditionalFormattingX14Wrapper } from "./ConditionalFormattingX14Wrapper";
import { ConditionBaseExtensions } from "./ConditionBaseExtensions";
import { ConditionalFormattingUtils } from "./ConditionalFormattingUtils";
import { Excel2006Elements } from "./Excel2006Elements";
import { ChartExPartManager } from "./ChartExPartManager";
import { ChartsheetPartManager } from "./ChartsheetPartManager";
import { Chartsheet } from "./Chartsheet";
import { ActiveXBinaryPartManager } from "./ActiveXBinaryPartManager";
import { RoundTripDataPartManager } from "./RoundTripDataPartManager";
import { ChartColorStylePartManager } from "./ChartColorStylePartManager";
import { ChartPartManager } from "./ChartPartManager";
import { ChartStylePartManager } from "./ChartStylePartManager";
import { ConnectionsPartManager } from "./ConnectionsPartManager";
import { CorePropertiesPartManager } from "./CorePropertiesPartManager";
import { CoreProperties } from "./CoreProperties";
import { DocumentProperties } from "./DocumentProperties";
import { DcElements } from "./DcElements";
import { DcTerms } from "./DcTerms";
import { CtrlPropPartManager } from "./CtrlPropPartManager";
import { CustomXmlItemPartManager } from "./CustomXmlItemPartManager";
import { CustomXmlItemPropsPartManager } from "./CustomXmlItemPropsPartManager";
import { DrawingPartManager } from "./DrawingPartManager";
import { DrawingPartManagerHelpers } from "./DrawingPartManagerHelpers";
import { ObjectModelDrawingPartManager_ShapeIdentity } from "./ObjectModelDrawingPartManager_ShapeIdentity";
import { CT_Connector } from "./CT_Connector";
import { CT_ConnectorNonVisual } from "./CT_ConnectorNonVisual";
import { CT_NonVisualDrawingProps } from "./CT_NonVisualDrawingProps";
import { ST_DrawingElementId } from "./ST_DrawingElementId";
import { CT_NonVisualConnectorProperties } from "./CT_NonVisualConnectorProperties";
import { ShapeFill } from "./ShapeFill";
import { IEG_FillProperties_$type } from "./IEG_FillProperties";
import { ShapeOutline } from "./ShapeOutline";
import { CT_LineProperties } from "./CT_LineProperties";
import { IGraphicalObjectContent_$type } from "./IGraphicalObjectContent";
import { CT_GraphicalObjectFrame } from "./CT_GraphicalObjectFrame";
import { CT_GraphicalObject } from "./CT_GraphicalObject";
import { CT_GraphicalObjectData } from "./CT_GraphicalObjectData";
import { Drawing2010Slicer } from "./Drawing2010Slicer";
import { CT_Slicer } from "./CT_Slicer";
import { CT_GraphicalObjectFrameNonVisual } from "./CT_GraphicalObjectFrameNonVisual";
import { CT_NonVisualGraphicFrameProperties } from "./CT_NonVisualGraphicFrameProperties";
import { WorksheetShapeGroup } from "./WorksheetShapeGroup";
import { Drawing2010Main } from "./Drawing2010Main";
import { CT_GroupShape } from "./CT_GroupShape";
import { CT_GroupShapeNonVisual } from "./CT_GroupShapeNonVisual";
import { CT_NonVisualGroupDrawingShapeProps } from "./CT_NonVisualGroupDrawingShapeProps";
import { CT_GroupShapeProperties } from "./CT_GroupShapeProperties";
import { CT_Picture } from "./CT_Picture";
import { WorksheetImage } from "./WorksheetImage";
import { CT_PictureNonVisual } from "./CT_PictureNonVisual";
import { CT_NonVisualPictureProperties } from "./CT_NonVisualPictureProperties";
import { CT_PictureLocking } from "./CT_PictureLocking";
import { CT_BlipFillProperties } from "./CT_BlipFillProperties";
import { CT_Shape } from "./CT_Shape";
import { CT_ShapeNonVisual } from "./CT_ShapeNonVisual";
import { CT_NonVisualDrawingShapeProps } from "./CT_NonVisualDrawingShapeProps";
import { CT_SolidFillProperties } from "./CT_SolidFillProperties";
import { CT_SysColor } from "./CT_SysColor";
import { SystemColorsInternal } from "./SystemColorsInternal";
import { CT_SchemeColor } from "./CT_SchemeColor";
import { ColorTransform_Alpha } from "./ColorTransform_Alpha";
import { ColorTransform_LumMod } from "./ColorTransform_LumMod";
import { ColorTransform_LumOff } from "./ColorTransform_LumOff";
import { CT_TextBody } from "./CT_TextBody";
import { WorksheetShapeWithText } from "./WorksheetShapeWithText";
import { HorizontalTextAlignment_$type } from "./HorizontalTextAlignment";
import { FormattedTextParagraph } from "./FormattedTextParagraph";
import { CT_TextParagraph } from "./CT_TextParagraph";
import { FormattedTextRun } from "./FormattedTextRun";
import { CT_RegularTextRun } from "./CT_RegularTextRun";
import { FormattedText } from "./FormattedText";
import { CT_TextBodyProperties } from "./CT_TextBodyProperties";
import { CT_TextCharacterProperties } from "./CT_TextCharacterProperties";
import { CT_ShapeStyle } from "./CT_ShapeStyle";
import { CT_FontReference } from "./CT_FontReference";
import { ColorTransform_Shade } from "./ColorTransform_Shade";
import { AlternateGraphicalObjectContent } from "./AlternateGraphicalObjectContent";
import { ObjectModelDrawingPartManager_ShapeLoadContext } from "./ObjectModelDrawingPartManager_ShapeLoadContext";
import { ST_CoordinateUnqualified } from "./ST_CoordinateUnqualified";
import { ChartExUtils } from "./ChartExUtils";
import { MarkupCompatibility2006 } from "./MarkupCompatibility2006";
import { DrawingMLChartEx2015_9_8 } from "./DrawingMLChartEx2015_9_8";
import { DrawingMLChartEx2015_10_21 } from "./DrawingMLChartEx2015_10_21";
import { DrawingMLChartEx2016_5_10 } from "./DrawingMLChartEx2016_5_10";
import { IGraphicalObjectContentVisitor$2_$type } from "./IGraphicalObjectContentVisitor$2";
import { ObjectModelDrawingPartManager_ShapeLoader_ShapeTypeCreator } from "./ObjectModelDrawingPartManager_ShapeLoader_ShapeTypeCreator";
import { RectangleShape } from "./RectangleShape";
import { ColorsInternal } from "./ColorsInternal";
import { ShapeFillSolid } from "./ShapeFillSolid";
import { ShapeOutlineSolid } from "./ShapeOutlineSolid";
import { ObjectModelDrawingPartManager_ShapeLoader_ShapeOutlineCreator } from "./ObjectModelDrawingPartManager_ShapeLoader_ShapeOutlineCreator";
import { IEG_TextRunVisitor$2_$type } from "./IEG_TextRunVisitor$2";
import { IEG_FillPropertiesVisitor$2_$type } from "./IEG_FillPropertiesVisitor$2";
import { ShapeFillImage } from "./ShapeFillImage";
import { IShapeFillVisitor$2_$type } from "./IShapeFillVisitor$2";
import { ShapeFillNoFill } from "./ShapeFillNoFill";
import { IShapeOutlineVisitor$2_$type } from "./IShapeOutlineVisitor$2";
import { UltimateFontDefaultsResolver } from "./UltimateFontDefaultsResolver";
import { ExtendedPropertiesPartManager } from "./ExtendedPropertiesPartManager";
import { OfficeDocumentDocPropsVTypes } from "./OfficeDocumentDocPropsVTypes";
import { CT_Vector } from "./CT_Vector";
import { OfficeDocumentExtendedProperties } from "./OfficeDocumentExtendedProperties";
import { ExternalLinkPartManager } from "./ExternalLinkPartManager";
import { DdeLinkWorkbookReference } from "./DdeLinkWorkbookReference";
import { WorksheetReferenceExternalRowValues } from "./WorksheetReferenceExternalRowValues";
import { DdeItem } from "./DdeItem";
import { WorksheetReferenceExternal } from "./WorksheetReferenceExternal";
import { OleItem } from "./OleItem";
import { UriUtilities } from "./UriUtilities";
import { PivotCacheInfo } from "./PivotCacheInfo";
import { CurrentWorkbookReference } from "./CurrentWorkbookReference";
import { PivotCacheDefinitionPartManager } from "./PivotCacheDefinitionPartManager";
import { PivotCacheRecordsPartManager } from "./PivotCacheRecordsPartManager";
import { PivotTablePartManager } from "./PivotTablePartManager";
import { SharedStringsPartManager } from "./SharedStringsPartManager";
import { SlicerCachePartManager } from "./SlicerCachePartManager";
import { SlicerPartManager } from "./SlicerPartManager";
import { ThemeManagerPartManager } from "./ThemeManagerPartManager";
import { IGOfficeExtensions } from "./IGOfficeExtensions";
import { ThemePartManager } from "./ThemePartManager";
import { StreamReader } from "igniteui-react-core";
import { Encoding } from "igniteui-react-core";
import { VbaProjectPartManager } from "./VbaProjectPartManager";
import { VmlDrawingPartManager } from "./VmlDrawingPartManager";
import { ExcelNamespace } from "./ExcelNamespace";
import { ST_CF_$type } from "./ST_CF";
import { LegacyShapeTypeData } from "./LegacyShapeTypeData";
import { ST_Ext_$type } from "./ST_Ext";
import { LegacyShapeLockData } from "./LegacyShapeLockData";
import { OfficeNamespace } from "./OfficeNamespace";
import { ST_ConnectType_$type } from "./ST_ConnectType";
import { LegacyShapePathData } from "./LegacyShapePathData";
import { ST_ShadowType_$type } from "./ST_ShadowType";
import { ST_HrAlign_$type } from "./ST_HrAlign";
import { ST_InsetMode_$type } from "./ST_InsetMode";
import { ST_ConnectorType_$type } from "./ST_ConnectorType";
import { ST_BWMode_$type } from "./ST_BWMode";
import { ST_StrokeLineStyle_$type } from "./ST_StrokeLineStyle";
import { ST_StrokeJoinStyle_$type } from "./ST_StrokeJoinStyle";
import { LegacyShapeStrokeData } from "./LegacyShapeStrokeData";
import { ObjectModelVmlDrawingPartManager_UpdateLegacyShapeData } from "./ObjectModelVmlDrawingPartManager_UpdateLegacyShapeData";
import { EmptyNamespace } from "./EmptyNamespace";
/**
 * @hidden
 */
export let ExcelWorkbookDocumentManager = /*@__PURE__*/ (() => {
    class ExcelWorkbookDocumentManager extends ExcelDocumentManager {
        constructor(a, b, c, d, e, f, g) {
            super(d, e, f, g);
            this._bx = null;
            this._bu = null;
            this._bx = a;
            this._bu = new ThemePartInfo();
            this._bu.a = b;
            this._bu.b = c;
        }
        get _bv() {
            return this._bu != null ? this._bu.a : null;
        }
        get _bw() {
            return this._bu != null ? this._bu.b : null;
        }
        get _by() {
            return this._bx;
        }
    }
    ExcelWorkbookDocumentManager.$t = /*@__PURE__*/ markType(ExcelWorkbookDocumentManager, 'ExcelWorkbookDocumentManager', ExcelDocumentManager.$);
    return ExcelWorkbookDocumentManager;
})();
/**
 * @hidden
 */
export let ObjectModelExcelDocumentManager = /*@__PURE__*/ (() => {
    class ObjectModelExcelDocumentManager extends ExcelWorkbookDocumentManager {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        super(c._b, c._al, c._am, d, e, true, f);
                        this._b6 = null;
                        this._b8 = null;
                        this._b3 = null;
                        this._ca = null;
                        this._b6 = c;
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        super(c._b, null, null, d, e, false, f);
                        this._b6 = null;
                        this._b8 = null;
                        this._b3 = null;
                        this._ca = null;
                        this._b8 = c;
                    }
                    break;
            }
        }
        _bh() {
            super._bh();
            this._bl(Office2007ExtensibilityPartManager.a5, false);
            this._bl(Office2010ExtensibilityPartManager.a5, false);
            this._bl(ObjectModelActiveXBinaryPartManager.x);
            this._bl(ObjectModelActiveXPartManager.x);
            this._bl(ObjectModelCalcChainPartManager.a7);
            this._bl(ObjectModelChartPartManager.bb);
            this._bl(ObjectModelChartExPartManager.ba);
            this._bl(ObjectModelChartColorStylePartManager.a9);
            this._bl(ObjectModelChartsheetPartManager.bb);
            this._bl(ObjectModelChartStylePartManager.a9);
            this._bl(ObjectModelChartUserShapePartManager.v);
            this._bl(ObjectModelCommentsPartManager.a9);
            this._bl(ObjectModelConnectionsPartManager.a9);
            this._bl(ObjectModelCorePropertiesPartManager.a9);
            this._bl(ObjectModelCtrlPropPartManager.x);
            this._bl(ObjectModelCustomXmlItemPartManager.x);
            this._bl(ObjectModelCustomXmlItemPropsPartManager.x);
            this._bl(ObjectModelDrawingPartManager.bg);
            this._bl(ObjectModelExtendedPropertiesPartManager.a9);
            this._bl(ObjectModelExternalLinkPartManager.a9);
            this._bl(ObjectModelMacroEnabledTemplatePartManager.b8);
            this._bl(ObjectModelMacroEnabledWorkbookPartManager.b8);
            this._bl(ObjectModelPivotCacheDefinitionPartManager.a9);
            this._bl(ObjectModelPivotCacheRecordsPartManager.a9);
            this._bl(ObjectModelPivotTablePartManager.ba);
            this._bl(ObjectModelPrinterSettingsPartManager.a8);
            this._bl(ObjectModelSharedStringsPartManager.a9);
            this._bl(ObjectModelSlicerCachePartManager.a8);
            this._bl(ObjectModelSlicerPartManager.a8);
            this._bl(ObjectModelStylesPartManager.a9);
            this._bl(ObjectModelTablePartManager.ba);
            this._bl(ObjectModelTemplatePartManager.b8);
            this._bl(ObjectModelThemePartManager.bc);
            this._bl(ObjectModelVmlDrawingPartManager.bb);
            this._bl(ObjectModelWorkbookPartManager.b8);
            this._bl(ObjectModelWorksheetPartManager.bj);
            if (this._z != 1) {
                this._bl(ObjectModelVbaProjectPartManager.x);
            }
            this._h = this._by._n;
            this._i = this._by._o;
        }
        _o() {
            let a = this._by;
            if (a.currentFormat == 2 && this._z == 1) {
                a._i3(6);
            }
            return super._o();
        }
        _s() {
            return WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.i(Tuple$2.$.specialize(Uri.$, String_$type), this._j(ObjectModelExtendedPropertiesPartManager.a9), () => this._j(ObjectModelCorePropertiesPartManager.a9)), () => this._b2()), () => this._b1());
        }
        _b0(a, b, c = null) {
            let d;
            let e = new Guid();
            try {
                if (b == null) {
                    b = a.d;
                }
                e = b.n;
            }
            catch (f) {
                throw new InvalidOperationException(2, ExcelUtils.ef("LE_InvalidOperationException_ImageDisposed"), f);
            }
            let g = false;
            let h = g || Guid.l_op_Equality(e, ImageFormat.g.n);
            if (h) {
                d = PngPartManager.y;
                b = ImageFormat.g;
                e = b.n;
            }
            else if (Guid.l_op_Equality(e, ImageFormat.f.n)) {
                d = JpegPartManager.y;
            }
            else if (Guid.l_op_Equality(e, ImageFormat.e.n)) {
                d = GifPartManager.y;
            }
            else if (Guid.l_op_Equality(e, ImageFormat.h.n)) {
                d = TiffPartManager.y;
            }
            else if (Guid.l_op_Equality(e, ImageFormat.c.n)) {
                d = EmfPartManager.y;
            }
            else if (Guid.l_op_Equality(e, ImageFormat.i.n)) {
                d = WmfPartManager.y;
            }
            else if (g) {
                d = BmpPartManager.y;
            }
            else {
                d = PngPartManager.y;
            }
            let i;
            {
                let j = new MemoryStream(0);
                try {
                    ExcelUtils.f6(a, b, j);
                    i = new ImageData(0, d.r(d.s), j.toArray());
                }
                finally {
                    if (j != null) {
                        j.dispose();
                    }
                }
            }
            return this._j(d, i, c);
        }
        _bz(a, b = null) {
            let c;
            let d = a.d.n;
            if (Guid.l_op_Equality(d, ImageFormat.p)) {
                c = PngPartManager.y;
            }
            else if (Guid.l_op_Equality(d, ImageFormat.j)) {
                c = BmpPartManager.y;
            }
            else if (Guid.l_op_Equality(d, ImageFormat.k)) {
                c = BmpPartManager.z;
            }
            else if (Guid.l_op_Equality(d, ImageFormat.o)) {
                c = JpegPartManager.y;
            }
            else if (Guid.l_op_Equality(d, ImageFormat.m)) {
                c = GifPartManager.y;
            }
            else if (Guid.l_op_Equality(d, ImageFormat.q)) {
                c = TiffPartManager.y;
            }
            else if (Guid.l_op_Equality(d, ImageFormat.l)) {
                c = EmfPartManager.y;
            }
            else if (Guid.l_op_Equality(d, ImageFormat.r)) {
                c = WmfPartManager.y;
            }
            else {
                c = PngPartManager.y;
            }
            return this._j(c, a, b);
        }
        _cd() {
            return ImagePartManagerBase.v(this._z);
        }
        _b4() {
            return DeserializedChartInfo.a(this._by._ad);
        }
        _b1() {
            let a = this._b5();
            return Async.g(a != null, () => this._j(a));
        }
        _b5() {
            switch (this._by.currentFormat) {
                case 2:
                case 6: return ObjectModelWorkbookPartManager.b8;
                case 3: return ObjectModelMacroEnabledWorkbookPartManager.b8;
                case 4: return ObjectModelMacroEnabledTemplatePartManager.b8;
                case 5: return ObjectModelTemplatePartManager.b8;
                default: return null;
            }
        }
        _b2() {
            let a = this._by._eh;
            if (a == null) {
                return null;
            }
            let b = this._by._ef;
            if (b == null) {
                return null;
            }
            let c = Math.min(a.count, b.count);
            return Async.c(0, c, 1, (d) => this._j(ObjectModelCustomXmlItemPartManager.x, Tuple.a(BinaryData.$, BinaryData.$, b._inner[d], a._inner[d])));
        }
        get _b7() {
            return this._b6;
        }
        get _b9() {
            return this._b8;
        }
    }
    ObjectModelExcelDocumentManager.$t = /*@__PURE__*/ markType(ObjectModelExcelDocumentManager, 'ObjectModelExcelDocumentManager', ExcelWorkbookDocumentManager.$);
    return ObjectModelExcelDocumentManager;
})();
/**
 * @hidden
 */
export let ThemePartInfo = /*@__PURE__*/ (() => {
    class ThemePartInfo extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
            this.c = null;
        }
    }
    ThemePartInfo.$t = /*@__PURE__*/ markType(ThemePartInfo, 'ThemePartInfo');
    return ThemePartInfo;
})();
/**
 * @hidden
 */
export let WorkbookSerializationDataExcel2007 = /*@__PURE__*/ (() => {
    class WorkbookSerializationDataExcel2007 extends ValueType {
        constructor(a, ..._rest) {
            super();
            this.b = null;
            this.c = null;
            this.d = null;
            this.e = null;
            this.a = null;
            this.f = null;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.b = new List$1(BorderInfo.$, 0);
                        this.c = new List$1(StyleInfo.$, 0);
                        this.d = new List$1(FormatInfo.$, 0);
                        this.e = new List$1(FormatInfo.$, 0);
                        this.a = c;
                        this.f = new List$1(FillInfo.$, 0);
                    }
                    break;
            }
        }
    }
    WorkbookSerializationDataExcel2007.$t = /*@__PURE__*/ markStruct(WorkbookSerializationDataExcel2007, 'WorkbookSerializationDataExcel2007');
    return WorkbookSerializationDataExcel2007;
})();
/**
 * @hidden
 */
export let FormatInfo = /*@__PURE__*/ (() => {
    class FormatInfo extends Base {
        constructor() {
            super(...arguments);
            this.h = 0;
            this.n = toNullable(Number_$type, null);
            this.q = toNullable(Number_$type, null);
            this.s = toNullable(Number_$type, null);
            this.u = toNullable(Number_$type, null);
            this.j = false;
            this.l = false;
            this.w = toNullable(Number_$type, null);
            this.c = null;
            this.a = null;
            this.f = null;
        }
        get i() {
            return this.h;
        }
        set i(a) {
            this.h = a;
        }
        get o() {
            return this.n;
        }
        set o(a) {
            this.n = a;
        }
        get r() {
            return this.q;
        }
        set r(a) {
            this.q = a;
        }
        get t() {
            return this.s;
        }
        set t(a) {
            this.s = a;
        }
        get v() {
            return this.u;
        }
        set v(a) {
            this.u = a;
        }
        get k() {
            return this.j;
        }
        set k(a) {
            this.j = a;
        }
        get m() {
            return this.l;
        }
        set m(a) {
            this.l = a;
        }
        get p() {
            return this.w;
        }
        set p(a) {
            this.w = a;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
        get b() {
            return this.a;
        }
        set b(a) {
            this.a = a;
        }
        get g() {
            return this.f;
        }
        set g(a) {
            this.f = a;
        }
        e(a, b, c) {
            let d = a._b;
            let e = d._cd(b ? 1 : 0);
            let f = this.i;
            let g = ExcelUtils.bw(f, 2);
            let h = ExcelUtils.bw(f, 8);
            let i = ExcelUtils.bw(f, 16);
            let j = ExcelUtils.bw(f, 4);
            let k = ExcelUtils.bw(f, 1);
            let l = ExcelUtils.bw(f, 32);
            if (e._b1 != 1) {
                let m = 0;
                if (this.p.hasValue && this.p.value < a._bd.count) {
                    m = this.p.value;
                }
                let n = a._bd._inner[m];
                let o;
                if (((() => { let p = a._a7.tryGetValue(m, o); o = p.p1; return p.ret; })()) == false) {
                    let p;
                    let q = 1;
                    do {
                        p = stringFormat("Style {0}", q++);
                    } while (d._styles$i._item1(p) != null);
                    o = d._styles$i._addUserDefinedStyle(n.g, p);
                    a._a7.addItem(m, o);
                }
                e.style = o;
                if (g == false && (Base.equalsStatic(this.b, n.b) == false)) {
                    g = true;
                    f |= 2;
                }
                if (h == false && nullableNotEquals(this.o, null) && nullableNotEquals(this.o, n.o)) {
                    h = true;
                    f |= 8;
                }
                if (i == false && nullableNotEquals(this.r, null) && nullableNotEquals(this.r, n.r)) {
                    i = true;
                    f |= 16;
                }
                if (j == false && nullableNotEquals(this.t, null) && nullableNotEquals(this.t, n.t)) {
                    j = true;
                    f |= 4;
                }
                if (k == false && nullableNotEquals(this.u, null) && nullableNotEquals(this.u, n.u)) {
                    k = true;
                    f |= 1;
                }
                if (l == false && (Base.equalsStatic(this.d, n.d) == false)) {
                    l = true;
                    f |= 32;
                }
            }
            e.formatOptions = f;
            if ((j || c) && nullableNotEquals(this.t, null) && this.t.value < a._h.count) {
                let r = a._h._inner[this.t.value];
                let s = null;
                let t = r._ak(s);
                e.font.setFontFormatting(t);
            }
            if ((k || c) && nullableNotEquals(this.v, null)) {
                e.formatString = d._b2.item(this.v.value);
            }
            if ((l || c) && this.d != null) {
                this.d.k(e);
            }
            if (g || c) {
                if (this.b != null) {
                    this.b.ai(e);
                }
                else {
                    AlignmentInfo.f.ai(e, false);
                }
            }
            if ((h || c) && nullableNotEquals(this.o, null) && this.o.value < a._bb.count) {
                let u = a._bb._inner[this.o.value];
                u.x(e, a);
            }
            if ((i || c) && nullableNotEquals(this.r, null) && this.r.value < a._bf.count) {
                let v = a._bf._inner[this.r.value];
                v.h(e, a);
            }
            e._dt(f);
            return e;
        }
    }
    FormatInfo.$t = /*@__PURE__*/ markType(FormatInfo, 'FormatInfo');
    return FormatInfo;
})();
/**
 * @hidden
 */
export let ObjectModelCommonPartHelpers = /*@__PURE__*/ (() => {
    class ObjectModelCommonPartHelpers extends Base {
        static e(a, b) {
            if (a != null) {
                a = stringReplace(a, "\r\n", b);
                a = stringReplace(a, "\n", b);
            }
            return a;
        }
        static b(a) {
            return a.d;
        }
        static f(a) {
            a.s.k(new CT_AbsoluteAnchor());
        }
        static g(a) {
            let b = a.s.a(WorksheetShape.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.tm(a, c, d);
            c = e.p1;
            d = e.p2;
            let f;
            if (c) {
                if (d) {
                    f = 0;
                }
                else {
                    f = 1;
                }
            }
            else {
                f = 2;
            }
            let g = ((() => {
                let $ret = new CT_TwoCellAnchor();
                $ret.e = f;
                return $ret;
            })());
            a.s.k(g);
        }
        static h(a) {
            let b = a.s.a(IWorkbookFont_$type);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.tq(a, c);
            c = d.p1;
            b._bold$i = XlsxUtilities.a8(c);
        }
        static i(a) {
            let b = a.s.a(EG_Anchor.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = DrawingMLSpreadsheetDrawing.eo(a, c, d);
            c = e.p1;
            d = e.p2;
            b.a = ((() => {
                let $ret = new CT_AnchorClientData();
                $ret.a = c;
                $ret.b = d;
                return $ret;
            })());
        }
        static j(a) {
            let b = a.s.a(CT_Marker.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLSpreadsheetDrawing.ep(a, c);
            c = d.p1;
            b.c = c;
        }
        static k(a) {
            let b = a.s.a(CT_Marker.$);
            if (b == null) {
                return;
            }
            let c = new ST_Coordinate();
            let d = DrawingMLSpreadsheetDrawing.eq(a, c);
            c = d.p1;
            b.a = c;
        }
        static l(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b != null ? b.s.a(ConditionalFormatInfo.$) : null;
            if (c != null) {
                ObjectModelWorksheetPartManager.cs(a);
                return;
            }
            let d = a.s.a(ColorInfo.$);
            if (d == null) {
                return;
            }
            let e;
            let f;
            let g;
            let h;
            let i;
            let j = SpreadsheetMLMain.uf(a, e, f, g, h, i);
            e = j.p1;
            f = j.p2;
            g = j.p3;
            h = j.p4;
            i = j.p5;
            d.i = e;
            d.j = f;
            d.k = g;
            d.l = h;
            d.g = i;
        }
        static c(a, b) {
            let c;
            let d;
            let e;
            let f;
            let g;
            let h = b(a, c, d, e, f, g);
            c = h.p1;
            d = h.p2;
            e = h.p3;
            f = h.p4;
            g = h.p5;
            if (nullableEquals(c, true)) {
                return WorkbookColorInfo.automatic;
            }
            let i = g == 0 ? toNullable(Number_$type, null) : toNullable(Number_$type, g);
            if (nullableNotEquals(e, null)) {
                return new WorkbookColorInfo(toNullable(Color.$, ExcelUtils.gz(ST_UnsignedIntHex.h(e.value))), toNullable(WorkbookThemeColorType_$type, null), i, true, false);
            }
            if (nullableNotEquals(f, null)) {
                return new WorkbookColorInfo(toNullable(Color.$, null), toNullable(WorkbookThemeColorType_$type, f.value), i, true, false);
            }
            if (nullableNotEquals(d, null)) {
                return new WorkbookColorInfo(ObjectModelCommonPartHelpers.b(a)._by, d.value);
            }
            return WorkbookColorInfo.automatic;
        }
        static a(a, b) {
            let c;
            let d;
            let e;
            let f;
            let g;
            let h = b(a, c, d, e, f, g);
            c = h.p1;
            d = h.p2;
            e = h.p3;
            f = h.p4;
            g = h.p5;
            return ((() => {
                let $ret = new ColorInfo();
                $ret.i = c;
                $ret.j = d;
                $ret.k = e;
                $ret.l = f;
                $ret.g = g;
                return $ret;
            })());
        }
        static m(a) {
            let b = ObjectModelCommonPartHelpers.b(a);
            let c = b._by;
            let d = a.s.a(ExternalWorkbookReference.$);
            if (d != null) {
                ObjectModelCommonPartHelpers.n(a, b, c, d);
                return;
            }
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u = SpreadsheetMLMain.vd(a, f, e, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
            f = u.p1;
            e = u.p2;
            g = u.p3;
            h = u.p4;
            i = u.p5;
            j = u.p6;
            k = u.p7;
            l = u.p8;
            m = u.p9;
            n = u.p10;
            o = u.p11;
            p = u.p12;
            q = u.p13;
            r = u.p14;
            s = u.p15;
            t = u.p16;
            let v = false;
            if (stringStartsWith(e, "_xlnm.")) {
                e = e.substr("_xlnm.".length);
                v = true;
            }
            let w;
            if (nullableNotEquals(l, null) && l.value < c._worksheets$i.count) {
                w = c._worksheets$i._item(l.value);
            }
            else {
                w = c;
            }
            let x = new NamedReference(1, c._namedReferences$i, w, m);
            x.name = e;
            x._v = n;
            x.comment = g;
            let y = WorkbookLoadManagerExcel2007._bs(f);
            f = y.p0;
            let z = Formula._k(f, c.cellReferenceMode, 3, c.currentFormat, CultureInfo.invariantCulture, b._b7._bi);
            x._bb(z, false);
            let aa = new WorkbookLoadManagerExcel2007_NamedReferenceInfo();
            aa.b = m;
            aa.a = x;
            b._b7._bh.add(aa);
        }
        static n(a, b, c, d) {
            let e;
            let f;
            let g;
            let h = SpreadsheetMLMain.vc(a, e, f, g);
            e = h.p1;
            f = h.p2;
            g = h.p3;
            let i = b._b7._i;
            let j = i._inner[i.count - 1];
            let k = j;
            if (nullableNotEquals(g, null)) {
                k = j.i(g.value);
            }
            let l = j.c(e, k, true);
            if (f == null) {
                return;
            }
            if (stringStartsWith(f, "=") == false) {
                f = "=" + f;
            }
            let m;
            let n;
            if (false == ((() => { let o = Formula._a0(f, 1, 4, c.currentFormat, CultureInfo.invariantCulture, b._b7._bi, m, n); m = o.p6; n = o.p7; return o.ret; })())) {
                m = Formula._k("=#REF!", 1, 4, c.currentFormat, CultureInfo.invariantCulture, b._b7._bi);
            }
            for (let o = 0; o < m._e.length; o++) {
                let p = typeCast(ReferenceToken.$, m._e[o]);
                if (p == null || p.q == false) {
                    continue;
                }
                p.s(d);
            }
            l._j = m;
        }
        static o(a) {
        }
        static p(a) {
            let b = new ST_PositiveCoordinate();
            let c = new ST_PositiveCoordinate();
            let d = DrawingMLSpreadsheetDrawing.es(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = ((() => {
                let $ret = new CT_PositiveSize2D();
                $ret.a = b;
                $ret.b = c;
                return $ret;
            })());
            let f = a.s.a(CT_OneCellAnchor.$);
            if (f != null) {
                f.c = e;
                return;
            }
            let g = a.s.a(CT_AbsoluteAnchor.$);
            if (g != null) {
                g.d = e;
                return;
            }
        }
        static q(a) {
            let b;
            let c = SpreadsheetMLMain.vx(a, b);
            b = c.p1;
        }
        static r(a) {
            let b = new CT_Marker();
            a.s.k(b);
            let c = a.s.a(CT_TwoCellAnchor.$);
            if (c != null) {
                c.c = b;
                return;
            }
            let d = a.s.a(CT_OneCellAnchor.$);
            if (d != null) {
                d.d = b;
                return;
            }
        }
        static s(a) {
            let b = a.s.a(IWorkbookFont_$type);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.wm(a, c);
            c = d.p1;
            b._italic$i = XlsxUtilities.a8(c);
        }
        static t(a, b) {
            let c = a.s.a(IWorkbookFont_$type);
            if (c == null) {
                return;
            }
            let d;
            let e = b(a, d);
            d = e.p1;
            c.name = d;
        }
        static u(a) {
            a.s.k(new CT_OneCellAnchor());
        }
        static v(a) {
            let b = a.s.a(CT_AbsoluteAnchor.$);
            if (b == null) {
                return;
            }
            let c = new ST_Coordinate();
            let d = new ST_Coordinate();
            let e = DrawingMLSpreadsheetDrawing.ev(a, c, d);
            c = e.p1;
            d = e.p2;
            b.c = ((() => {
                let $ret = new CT_Point2D();
                $ret.a = c;
                $ret.b = d;
                return $ret;
            })());
        }
        static w(a) {
        }
        static x(a) {
            let b = a.s.a(CT_Marker.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLSpreadsheetDrawing.ew(a, c);
            c = d.p1;
            b.d = c;
        }
        static y(a) {
            let b = a.s.a(CT_Marker.$);
            if (b == null) {
                return;
            }
            let c = new ST_Coordinate();
            let d = DrawingMLSpreadsheetDrawing.ex(a, c);
            c = d.p1;
            b.b = c;
        }
        static z(a) {
            let b = a.s.a(FormattedStringElement.$);
            if (b == null) {
                return;
            }
            let c = 0;
            let d = b._y;
            if (d != null) {
                c = b._y.length;
            }
            let e = new FormattedStringRun(b, c);
            b._ah.add(e);
            a.s.k(e.f(ObjectModelCommonPartHelpers.b(a)._by));
            let f = new ColorInfo();
            a.s.k(f);
        }
        static aa(a) {
            let b = a.s.a(ColorInfo.$);
            let c = a.s.a(WorkbookFontProxy.$);
            if (b == null || c == null) {
                return;
            }
            let d = ObjectModelCommonPartHelpers.b(a);
            if (b.f == false) {
                c.colorInfo = b.c(d._b7);
            }
            c.setFontFormatting(c.d._ak(a.s.a(IWorkbookFontDefaultsResolver_$type)));
        }
        static ac(a) {
            let b = a.s.a(IWorkbookFont_$type);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.yc(a, c);
            c = d.p1;
            b._strikeout$i = XlsxUtilities.a8(c);
        }
        static ad(a) {
            let b = a.s.a(IWorkbookFont_$type);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.ye(a, c);
            c = d.p1;
            b.height = Convert.toInt32(c * 20);
        }
        static ae(a) {
            let b = a.s.a(StringElement.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.yp(a, c);
            c = d.p1;
            b._y = c == null ? b._y : stringConcat(b._y, c);
        }
        static af(a) {
            let b = a.s.a(CT_TwoCellAnchor.$);
            if (b == null) {
                return;
            }
            let c = new CT_Marker();
            b.d = c;
            a.s.k(c);
        }
        static ag(a) {
            let b;
            let c = DrawingMLSpreadsheetDrawing.e0(a, b);
            b = c.p1;
            a.s.k(((() => {
                let $ret = new CT_TwoCellAnchor();
                $ret.e = b;
                return $ret;
            })()));
        }
        static ah(a) {
            let b = a.s.a(IWorkbookFont_$type);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.yu(a, c);
            c = d.p1;
            b.underlineStyle = XlsxUtilities.j(c);
        }
        static d(a, b) {
            let c;
            let d = SpreadsheetMLMain.yv(a, c);
            c = d.p1;
            let e = ObjectModelCommonPartHelpers.b(a);
            let f = a.s.a(ST_CellType_$type);
            let t1 = f;
            L0: while (true) {
                switch (t1) {
                    case 0: return ST_OnOff.e(c);
                    case 1: return dateParse(c);
                    case 3: return FormulaParser.b(c, CultureInfo.invariantCulture);
                    case 2:
                        if (c == null) {
                            return null;
                        }
                        switch (c) {
                            case "0": return KnownBoxes.x;
                            case "1": return KnownBoxes.w;
                            default: return ObjectModelCommonPartHelpers_DoubleValueCache.f(c);
                        }
                    case 6:
                    case 5: return c != null ? c : stringEmpty();
                    case 4:
                        if (c == null) {
                            return null;
                        }
                        let g;
                        if (((() => { let h = tryParseInt32_1(c, g); g = h.p1; return h.ret; })()) == false) {
                            return null;
                        }
                        let h = e._b7;
                        if (g >= h._u.count) {
                            return null;
                        }
                        let i = h._u._inner[g];
                        let j = typeCast(FormattedStringElement.$, i);
                        if (j != null && j._u) {
                            return new FormattedString(e._by, j);
                        }
                        return i;
                    default:
                        t1 = 6;
                        continue L0;
                }
                break;
            }
        }
        static ai(a) {
            let b = a.s.a(IWorkbookFont_$type);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.yw(a, c);
            c = d.p1;
            b.superscriptSubscriptStyle = XlsxUtilities.h(c);
        }
        static ab(a) {
            let b = a.s.a(IWorkbookFont_$type);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.xp(a, c);
            c = d.p1;
            let e = ObjectModelCommonPartHelpers.b(a)._b7;
            let f = null;
            switch (c) {
                case 1:
                    f = e._al;
                    break;
                case 2:
                    f = e._am;
                    break;
                case 0: break;
                default: break;
            }
            if (f != null) {
                let g = f.e();
                if (g != null) {
                    b.name = g;
                }
            }
        }
        static aj(a) {
            a.az(SpreadsheetMLMain.gh, ObjectModelCommonPartHelpers.m);
            a.az(SpreadsheetMLMain.gi, ObjectModelCommonPartHelpers.o);
        }
        static ak(a, b, c) {
            a.az(SpreadsheetMLMain.dd, ObjectModelCommonPartHelpers.h);
            a.az(SpreadsheetMLMain.eu, ObjectModelCommonPartHelpers.l);
            a.az(SpreadsheetMLMain.hs, ObjectModelCommonPartHelpers.q);
            a.az(SpreadsheetMLMain.jp, ObjectModelCommonPartHelpers.s);
            a.az(b, (d) => ObjectModelCommonPartHelpers.t(d, c));
            a.az(SpreadsheetMLMain.qf, ObjectModelCommonPartHelpers.ac);
            a.az(SpreadsheetMLMain.qn, ObjectModelCommonPartHelpers.ad);
            a.az(SpreadsheetMLMain.ru, ObjectModelCommonPartHelpers.ah);
            a.az(SpreadsheetMLMain.r8, ObjectModelCommonPartHelpers.ai);
            a.az(SpreadsheetMLMain.of, ObjectModelCommonPartHelpers.ab);
        }
        static al(a) {
            a.az(SpreadsheetMLMain.m8, ObjectModelCommonPartHelpers.w);
            a.az(SpreadsheetMLMain.n7, ObjectModelCommonPartHelpers.z);
            a.ay(SpreadsheetMLMain.n7, ObjectModelCommonPartHelpers.aa);
            a.az(SpreadsheetMLMain.qo, ObjectModelCommonPartHelpers.ae);
            ObjectModelCommonPartHelpers.ak(a, SpreadsheetMLMain.nw, SpreadsheetMLMain.xi);
        }
        static am(a) {
            a.az(SpreadsheetMLMain.cp, ObjectModelCommonPartHelpers.g);
            a.az(DrawingMLSpreadsheetDrawing.dt, ObjectModelCommonPartHelpers.f);
            a.az(DrawingMLSpreadsheetDrawing.du, ObjectModelCommonPartHelpers.i);
            a.az(DrawingMLSpreadsheetDrawing.dx, ObjectModelCommonPartHelpers.j);
            a.az(DrawingMLSpreadsheetDrawing.dy, ObjectModelCommonPartHelpers.k);
            a.az(DrawingMLSpreadsheetDrawing.d1, ObjectModelCommonPartHelpers.p);
            a.az(DrawingMLSpreadsheetDrawing.d4, ObjectModelCommonPartHelpers.r);
            a.az(DrawingMLSpreadsheetDrawing.eb, ObjectModelCommonPartHelpers.u);
            a.az(DrawingMLSpreadsheetDrawing.ed, ObjectModelCommonPartHelpers.v);
            a.az(DrawingMLSpreadsheetDrawing.ee, ObjectModelCommonPartHelpers.x);
            a.az(DrawingMLSpreadsheetDrawing.ef, ObjectModelCommonPartHelpers.y);
            a.az(DrawingMLSpreadsheetDrawing.ej, ObjectModelCommonPartHelpers.af);
            a.az(DrawingMLSpreadsheetDrawing.ek, ObjectModelCommonPartHelpers.ag);
        }
        static ao(a, b, c, d) {
            let e = ObjectModelCommonPartHelpers.b(a)._by;
            let f = toNullable(Boolean_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(ST_UnsignedIntHex.$, null);
            let i = toNullable(Number_$type, null);
            let j = 0;
            if (b.isAutomatic) {
                f = toNullable(Boolean_$type, true);
            }
            else if (b._color$i.hasValue) {
                let k = b._color$i.value;
                if (ExcelUtils.al(k)) {
                    g = toNullable(Number_$type, intSToU(b._y(e, c)));
                }
                else {
                    h = toNullable(ST_UnsignedIntHex.$, new ST_UnsignedIntHex(1, intSToU(ExcelUtils.cx(k))));
                }
            }
            else if (b._themeColorType$i.hasValue) {
                i = toNullable(Number_$type, b._themeColorType$i.value);
            }
            else {
            }
            if (b._tint$i.hasValue) {
                j = b._tint$i.value;
            }
            d(a, f, g, h, i, j);
            a.ad.k();
        }
        static an(a, b, c) {
            if (b == null || b.f) {
                return;
            }
            c(a, b.i, b.j, b.k, b.l, b.g);
            a.ad.k();
        }
        static ap(a, b) {
            let c = b.name;
            let d = typeCast(NamedReference.$, b);
            if (d != null) {
                if (d._r) {
                    c = "_xlnm." + c;
                }
                let e = toNullable(Number_$type, null);
                let f = typeCast(Worksheet.$, d.scope);
                if (f != null) {
                    e = toNullable(Number_$type, intSToU(ObjectModelCommonPartHelpers.b(a)._b9._a1.indexOf(f)));
                }
                let g = null;
                if (d._j != null) {
                    g = ObjectModelCommonPartHelpers.b(a)._b9._cv(d._j);
                }
                SpreadsheetMLMain.aay(a, g, c, d.comment, void 0, void 0, void 0, void 0, e, d._p, d._v);
                a.ad.k();
            }
            else {
                SpreadsheetMLMain.aax(a, b.name);
                a.ad.k();
            }
        }
        static aq(a, b) {
            if (b.u.count == 0) {
                return;
            }
            SpreadsheetMLMain.aaz(a);
            for (let c of fromEnum(b.u)) {
                if (c._j == null || c._j._e.length == 0) {
                    continue;
                }
                ObjectModelCommonPartHelpers.ap(a, c);
            }
            a.ad.k();
        }
        static as(a, b) {
            ObjectModelCommonPartHelpers.ar(a, b);
        }
        static ar(a, b) {
            ObjectModelCommonPartHelpers.at(a, b, SpreadsheetMLMain.abv, SpreadsheetMLMain.acg);
        }
        static at(a, b, c, d) {
            if (b == null) {
                return;
            }
            c(a);
            let e = 2;
            if (stringIsNullOrEmpty(b.name) == false) {
                d(a, b.name);
                a.ad.k();
                e = ExcelUtils.r(b.name);
            }
            if (e != 0) {
                SpreadsheetMLMain.abi(a, e);
                a.ad.k();
            }
            if (nullableEquals(b._bold$i, true)) {
                SpreadsheetMLMain.zb(a);
                a.ad.k();
            }
            if (nullableEquals(b._italic$i, true)) {
                SpreadsheetMLMain.ab8(a);
                a.ad.k();
            }
            if (nullableEquals(b._strikeout$i, true)) {
                SpreadsheetMLMain.adz(a);
                a.ad.k();
            }
            if (WorkbookColorInfo.l_op_Inequality(b.colorInfo, null)) {
                ObjectModelCommonPartHelpers.ao(a, b.colorInfo, 2, SpreadsheetMLMain.zz);
            }
            if (b.height >= 1) {
                SpreadsheetMLMain.ad1(a, b.height / 20);
                a.ad.k();
            }
            if (b.underlineStyle != 0 && b.underlineStyle != -1) {
                SpreadsheetMLMain.aeh(a, XlsxUtilities.a7(b.underlineStyle));
                a.ad.k();
            }
            if (b.superscriptSubscriptStyle != 0 && b.superscriptSubscriptStyle != -1) {
                SpreadsheetMLMain.aek(a, XlsxUtilities.am(b.superscriptSubscriptStyle));
                a.ad.k();
            }
            let f;
            if (b.name == "Calibri") {
                f = 2;
            }
            else if (b.name == "Cambria") {
                f = 1;
            }
            else {
                f = 0;
            }
            if (f != 0) {
                SpreadsheetMLMain.adb(a, f);
                a.ad.k();
            }
            a.ad.k();
        }
        static au(a, b, c, d) {
            d(a);
            let e = c._y;
            let f = typeCast(FormattedStringElement.$, c);
            if (f != null && f._u) {
                let g = f._ah;
                let h = g._inner[0].i;
                if (0 < h) {
                    SpreadsheetMLMain.aec(a, e.substr(0, h));
                    a.ad.k();
                }
                for (let i = 0; i < g.count; i++) {
                    ObjectModelCommonPartHelpers.av(a, b, g._inner[i]);
                }
            }
            else {
                SpreadsheetMLMain.aec(a, e);
                a.ad.k();
            }
            a.ad.k();
        }
        static av(a, b, c) {
            SpreadsheetMLMain.ac3(a);
            let d = c.f(b._b);
            if (c.i != 0 || d._r.getValueOrDefault() != 0) {
                if (nullableLessThan(d._r, b._h.count)) {
                    let e = b._h._inner[d._r.value];
                    ObjectModelCommonPartHelpers.aw(a, e);
                }
                else {
                }
            }
            SpreadsheetMLMain.aec(a, c.l);
            a.ad.k();
            a.ad.k();
        }
        static aw(a, b) {
            ObjectModelCommonPartHelpers.at(a, b, SpreadsheetMLMain.ada, SpreadsheetMLMain.ac4);
        }
    }
    ObjectModelCommonPartHelpers.$t = /*@__PURE__*/ markType(ObjectModelCommonPartHelpers, 'ObjectModelCommonPartHelpers');
    return ObjectModelCommonPartHelpers;
})();
/**
 * @hidden
 */
export let ObjectModelTablePartManager = /*@__PURE__*/ (() => {
    class ObjectModelTablePartManager extends TablePartManager {
        constructor() {
            super();
            this.az(SpreadsheetMLMain.c6, ObjectModelTablePartManager.bd);
            this.az(SpreadsheetMLMain.d2, ObjectModelTablePartManager.be);
            this.az(SpreadsheetMLMain.ev, ObjectModelTablePartManager.bf);
            this.az(SpreadsheetMLMain.fk, ObjectModelTablePartManager.bg);
            this.az(SpreadsheetMLMain.fl, ObjectModelTablePartManager.bh);
            this.ay(SpreadsheetMLMain.fl, ObjectModelTablePartManager.bi);
            this.az(SpreadsheetMLMain.f2, ObjectModelTablePartManager.bj);
            this.az(SpreadsheetMLMain.g9, ObjectModelTablePartManager.bk);
            this.az(SpreadsheetMLMain.hz, ObjectModelTablePartManager.bn);
            this.az(SpreadsheetMLMain.h1, ObjectModelTablePartManager.bl);
            this.ay(SpreadsheetMLMain.h1, ObjectModelTablePartManager.bm);
            this.az(SpreadsheetMLMain.h4, ObjectModelTablePartManager.bo);
            this.az(SpreadsheetMLMain.jr, ObjectModelTablePartManager.bp);
            this.az(SpreadsheetMLMain.p2, ObjectModelTablePartManager.bq);
            this.az(SpreadsheetMLMain.p4, ObjectModelTablePartManager.br);
            this.az(SpreadsheetMLMain.qr, ObjectModelTablePartManager.bu);
            this.ay(SpreadsheetMLMain.qr, ObjectModelTablePartManager.bv);
            this.az(SpreadsheetMLMain.qu, ObjectModelTablePartManager.bs);
            this.az(SpreadsheetMLMain.qv, ObjectModelTablePartManager.bt);
            this.az(SpreadsheetMLMain.q0, ObjectModelTablePartManager.bw);
            this.az(SpreadsheetMLMain.rh, ObjectModelTablePartManager.bx);
            this.az(SpreadsheetMLMain.rn, ObjectModelTablePartManager.by);
            this.az(SpreadsheetML2009Main.bs, ObjectModelTablePartManager.bp);
            this.az(SpreadsheetML2009Main.cm, ObjectModelTablePartManager.bq);
        }
        u(a) {
            let b = typeCast(WorksheetTable.$, a);
            if (b == null) {
                return null;
            }
            let c = this.a8._b9;
            let d;
            let e;
            let f = ObjectModelTablePartManager.bz(WorksheetTableArea_$type, c, b._areaFormats$i, 1, d, e);
            d = f.p3;
            e = f.p4;
            let g;
            let h;
            let i;
            let j = ObjectModelTablePartManager.b0(WorksheetTableArea_$type, c, b._areaFormats$i, 2, g, h, i, 2, 4);
            g = j.p3;
            h = j.p4;
            i = j.p5;
            let k;
            let l;
            let m;
            let n = ObjectModelTablePartManager.b0(WorksheetTableArea_$type, c, b._areaFormats$i, 0, k, l, m, 262144, 524288, 67108864, 134217728, 2097152, 4194304, 2, 4);
            k = n.p3;
            l = n.p4;
            m = n.p5;
            let o;
            let p;
            let q;
            let r = ObjectModelTablePartManager.b0(WorksheetTableArea_$type, c, b._areaFormats$i, 3, o, p, q, 67108864, 134217728);
            o = r.p3;
            p = r.p4;
            q = r.p5;
            SpreadsheetMLMain.ad5(this, b._dv, b._ds, b.name, b.comment, b.wholeTableRegion._toString2(1, false, true, true), void 0, b.isHeaderRowVisible ? 1 : 0, b._cu, b._c7, b.isTotalsRowVisible ? 1 : 0, b._cn, b._c2, h, e, p, i, m, q, g, d, o);
            if (b.isFilterUIVisible) {
                this.b1(c, b);
            }
            if (b.sortSettings._o) {
                this.b9(c, b);
            }
            this.ca(c, b);
            this.cb(b);
            this.ad.k();
            return null;
        }
        static bb($t, a, b, c, d, e, f) {
            ObjectModelTablePartManager.bc($t, a, b, c, d, e, f, toNullable(Number_$type, null));
        }
        static bc($t, a, b, c, d, e, f, g, ...h) {
            let i = a._by;
            let j = null;
            if (stringIsNullOrEmpty(e) == false) {
                j = i._styles$i._item1(e);
            }
            let k = null;
            if (f.hasValue) {
                k = a._b7._g._inner[f.value]._bu();
            }
            let l = null;
            if (g.hasValue) {
                l = a._b7._g._inner[g.value]._bu();
            }
            a._b7._ad($t, b, c, d, j, k, l, ...h);
        }
        static bd(a) {
            let b;
            let c = SpreadsheetMLMain.tp(a, b);
            b = c.p1;
            let d = a.s.a(WorksheetTable.$);
            if (d != null && d.isHeaderRowVisible) {
                d.isFilterUIVisible = true;
            }
        }
        static be(a) {
            let b = a.s.a(WorksheetTableColumn.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.ty(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ObjectModelTablePartManager.a9(a);
            let g = f._by;
            b._setColumnFormula1(ObjectModelTablePartManager.a7(g, c, d, f._b7._bi), false);
        }
        static bf(a) {
            let b = a.s.a(ObjectModelTablePartManager_FilterColumnElementContext.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.ug(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ObjectModelTablePartManager.a9(a)._b7._g._inner[c.value];
            if (d) {
                b.b = FillFilter._p(null, f);
            }
            else {
                b.b = FontColorFilter._n(null, f);
            }
        }
        static bg(a) {
            let b = a.s.a(ObjectModelTablePartManager_CustomFilterContext.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.uy(a, c, d);
            c = e.p1;
            d = e.p2;
            let f;
            let g;
            if (((() => { let h = tryParseNumber1(c, 167, CultureInfo.invariantCulture, g); g = h.p3; return h.ret; })())) {
                f = g;
            }
            else {
                f = c;
            }
            let h = CustomFilterCondition._a(d, f);
            if (h != null) {
                b.e(h);
            }
        }
        static bh(a) {
            let b;
            let c = SpreadsheetMLMain.uz(a, b);
            b = c.p1;
            a.s.k(new ObjectModelTablePartManager_CustomFilterContext(b ? 0 : 1));
        }
        static bi(a) {
            let b = a.s.a(ObjectModelTablePartManager_FilterColumnElementContext.$);
            let c = a.s.a(ObjectModelTablePartManager_CustomFilterContext.$);
            if (b == null || c == null) {
                return;
            }
            b.b = c.b();
        }
        static bj(a) {
            let b = a.s.a(FixedValuesFilter.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j = SpreadsheetMLMain.u8(a, c, d, e, f, g, h, i);
            c = j.p1;
            d = j.p2;
            e = j.p3;
            f = j.p4;
            g = j.p5;
            h = j.p6;
            i = j.p7;
            let k = FixedDateGroup._b(c, d, e, f, g, h, i);
            if (k != null) {
                b._dateGroups$i.add(k);
            }
        }
        static bk(a) {
            let b = a.s.a(ObjectModelTablePartManager_FilterColumnElementContext.$);
            if (b == null) {
                return;
            }
            let c = ObjectModelTablePartManager.a9(a);
            let d = c._b7;
            let e;
            let f;
            if (a.d._z == 0) {
                let g;
                let h = SpreadsheetMLMain.vl(a, e, f, g);
                e = h.p1;
                f = h.p2;
                g = h.p3;
                b.b = DynamicValuesFilter._l(d, null, e, f, g);
            }
            else {
                let i;
                let j;
                let k = SpreadsheetMLMain.vm(a, e, f, i, j);
                e = k.p1;
                f = k.p2;
                i = k.p3;
                j = k.p4;
                b.b = DynamicValuesFilter._k(null, e, f, i, j);
            }
        }
        static bn(a) {
            let b = a.s.a(FixedValuesFilter.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.v6(a, c);
            c = d.p1;
            b._displayValues$i.add(c);
        }
        static bl(a) {
            let b;
            let c;
            let d;
            let e = SpreadsheetMLMain.v5(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            a.s.k(new ObjectModelTablePartManager_FilterColumnElementContext(b));
        }
        static bm(a) {
            let b = a.s.a(ObjectModelTablePartManager_FilterColumnElementContext.$);
            let c = a.s.a(ObjectModelTablePartManager_TableContext.$);
            if (b == null || c == null) {
                return;
            }
            c.d(b.d, b.b);
        }
        static bo(a) {
            let b = a.s.a(ObjectModelTablePartManager_FilterColumnElementContext.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.v7(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new FixedValuesFilter(null);
                $ret.calendarType = XlsxUtilities.g(d);
                $ret.includeBlanks = c;
                return $ret;
            })());
            b.b = f;
            a.s.k(f);
        }
        static bp(a) {
            let b = a.s.a(ObjectModelTablePartManager_FilterColumnElementContext.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.wk(a, c, d);
            c = e.p1;
            d = e.p2;
            b.b = new IconFilter(null, c, d);
        }
        static bq(a) {
            let b = a.s.a(ObjectModelTablePartManager_TableContext.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j = SpreadsheetMLMain.x7(a, c, d, e, f, g, h, i);
            c = j.p1;
            d = j.p2;
            e = j.p3;
            f = j.p4;
            g = j.p5;
            h = j.p6;
            i = j.p7;
            if (stringIsNullOrEmpty(c)) {
                return;
            }
            let k = ObjectModelTablePartManager.a9(a);
            let l;
            let m;
            let n;
            let o;
            let p = ExcelUtils.fx(c, k._by.currentFormat, 1, CultureInfo.invariantCulture, null, -1, l, m, n, o);
            l = p.p6;
            m = p.p7;
            n = p.p8;
            o = p.p9;
            let q = d ? 1 : 0;
            let r;
            switch (e) {
                case 1:
                    r = FillSortCondition._k(k._b7, g, q);
                    break;
                case 2:
                    r = FontColorSortCondition._i(k._b7, g, q);
                    break;
                case 3:
                    r = new IconSortCondition(q == 0, h, i);
                    break;
                case 0:
                    if (f == null) {
                        r = new OrderedSortCondition(q);
                    }
                    else {
                        r = new CustomListSortCondition(q, ...f.split(','));
                    }
                    break;
                default: return;
            }
            if (r == null) {
                return;
            }
            b.e(m, r);
        }
        static br(a) {
            let b = a.s.a(WorksheetTable.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = SpreadsheetMLMain.x8(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            if (stringIsNullOrEmpty(c)) {
                return;
            }
            b.sortSettings.caseSensitive = e;
            b.sortSettings._i = f;
        }
        static bu(a) {
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v;
            let w;
            let x = SpreadsheetMLMain.yi(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w);
            b = x.p1;
            c = x.p2;
            d = x.p3;
            e = x.p4;
            f = x.p5;
            g = x.p6;
            h = x.p7;
            i = x.p8;
            j = x.p9;
            k = x.p10;
            l = x.p11;
            m = x.p12;
            n = x.p13;
            o = x.p14;
            p = x.p15;
            q = x.p16;
            r = x.p17;
            s = x.p18;
            t = x.p19;
            u = x.p20;
            v = x.p21;
            w = x.p22;
            let y = ObjectModelTablePartManager.a9(a);
            let z = y._by;
            if (stringIsNullOrEmpty(f)) {
                return;
            }
            if (g != 0) {
                return;
            }
            let aa;
            let ab;
            let ac;
            let ad;
            let ae = ExcelUtils.fx(f, z.currentFormat, 1, CultureInfo.invariantCulture, null, -1, aa, ab, ac, ad);
            aa = ae.p6;
            ab = ae.p7;
            ac = ae.p8;
            ad = ae.p9;
            let af = stringIsNullOrEmpty(d) ? c : d;
            let ag = new WorksheetTable(af, b, aa, ac, ab, ad);
            a.an = ag;
            ag.comment = e;
            ag.isHeaderRowVisible = (h == 1);
            ag._cu = i;
            ag.isTotalsRowVisible = (k == 1);
            ag._cn = l;
            ag.name = af;
            ag._ds = c;
            ag._c2 = m;
            ag.isFilterUIVisible = false;
            ag._c7 = j;
            ObjectModelTablePartManager.bb(WorksheetTableArea_$type, y, ag._areaFormats$i, 1, WorksheetTable._cd, u, o);
            ObjectModelTablePartManager.bc(WorksheetTableArea_$type, y, ag._areaFormats$i, 2, WorksheetTable._cd, t, n, q, 2, 4);
            ObjectModelTablePartManager.bc(WorksheetTableArea_$type, y, ag._areaFormats$i, 3, WorksheetTable._cd, v, p, s, 67108864, 134217728);
            ObjectModelTablePartManager.bc(WorksheetTableArea_$type, y, ag._areaFormats$i, 0, WorksheetTable._cd, null, toNullable(Number_$type, null), r, 262144, 524288, 67108864, 134217728, 2097152, 4194304, 2, 4);
            a.s.k(new ObjectModelTablePartManager_TableContext(ag));
            a.s.k(ag);
        }
        static bv(a) {
            let b = a.s.a(ObjectModelTablePartManager_TableContext.$);
            if (b == null) {
                return;
            }
            b.f();
        }
        static bs(a) {
            let b = a.s.a(WorksheetTable.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o = SpreadsheetMLMain.yg(a, c, d, e, f, g, h, i, j, k, l, m, n);
            c = o.p1;
            d = o.p2;
            e = o.p3;
            f = o.p4;
            g = o.p5;
            h = o.p6;
            i = o.p7;
            j = o.p8;
            k = o.p9;
            l = o.p10;
            m = o.p11;
            n = o.p12;
            if (a.ab.ab < 0) {
                return;
            }
            let p = ObjectModelTablePartManager.a9(a);
            let q = b._b5(c);
            q.name = e;
            q.totalLabel = g;
            q.totalFormula = p._by._ao(q, f);
            ObjectModelTablePartManager.bb(WorksheetTableColumnArea_$type, p, q._areaFormats$i, 0, WorksheetTableColumn._ap, m, j);
            ObjectModelTablePartManager.bb(WorksheetTableColumnArea_$type, p, q._areaFormats$i, 1, WorksheetTableColumn._ap, l, i);
            ObjectModelTablePartManager.bb(WorksheetTableColumnArea_$type, p, q._areaFormats$i, 2, WorksheetTableColumn._ap, n, k);
            a.s.k(q);
        }
        static bt(a) {
            let b;
            let c = SpreadsheetMLMain.yh(a, b);
            b = c.p1;
        }
        static bw(a) {
            let b = a.s.a(WorksheetTable.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h = SpreadsheetMLMain.yn(a, c, d, e, f, g);
            c = h.p1;
            d = h.p2;
            e = h.p3;
            f = h.p4;
            g = h.p5;
            let i = ObjectModelTablePartManager.a9(a)._by._cj(c);
            b.style = i;
            b.displayBandedColumns = g.getValueOrDefault();
            b.displayBandedRows = f.getValueOrDefault();
            b.displayFirstColumnFormatting = d.getValueOrDefault();
            b.displayLastColumnFormatting = e.getValueOrDefault();
        }
        static bx(a) {
            let b = a.s.a(ObjectModelTablePartManager_FilterColumnElementContext.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = SpreadsheetMLMain.yr(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = TopOrBottomFilter._t(e, d);
            b.b = new TopOrBottomFilter(2, null, h, truncate(c), f.getValueOrDefault());
        }
        static by(a) {
            let b = a.s.a(WorksheetTableColumn.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.yt(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ObjectModelTablePartManager.a9(a);
            let g = f._by;
            b.totalFormula = ObjectModelTablePartManager.a7(g, c, d, f._b7._bi);
        }
        static a7(a, b, c, d) {
            if (c) {
                let e;
                let f;
                if (!((() => { let g = ArrayFormula._ct("=" + b, 1, a.currentFormat, CultureInfo.invariantCulture, e, f, d); e = g.p4; f = g.p5; return g.ret; })())) {
                    throw f;
                }
                return e;
            }
            return Formula._k("=" + b, 1, 0, a.currentFormat, CultureInfo.invariantCulture, d);
        }
        static bz($t, a, b, c, d, e) {
            let f;
            let g = ObjectModelTablePartManager.b0($t, a, b, c, d, e, f);
            d = g.p3;
            e = g.p4;
            f = g.p5;
            return {
                p3: d,
                p4: e
            };
        }
        static b0($t, a, b, c, d, e, f, ...g) {
            d = null;
            e = toNullable(Number_$type, null);
            f = toNullable(Number_$type, null);
            let h;
            let i;
            let j;
            let k = a._bi($t, b, c, h, i, j, ...g);
            h = k.p2;
            i = k.p3;
            j = k.p4;
            if (h != null) {
                d = h.name;
            }
            if (i != null) {
                e = toNullable(Number_$type, a._bc(i));
            }
            if (j != null) {
                f = toNullable(Number_$type, a._bc(j));
            }
            return {
                p3: d,
                p4: e,
                p5: f
            };
        }
        b1(a, b) {
            SpreadsheetMLMain.za(this, b._bq._toString2(1, false, true, true));
            for (let c of fromEnum(b._columns$i)) {
                if (c.filter == null) {
                    continue;
                }
                SpreadsheetMLMain.abq(this, intSToU(c.index));
                ObjectModelTablePartManager.b6(this, this.a8, a, c.filter);
                this.ad.k();
            }
            this.ad.k();
        }
        static b6(a, b, c, d) {
            let e = typeCast(FixedValuesFilter.$, d);
            if (e != null) {
                ObjectModelTablePartManager.b7(a, e);
                return;
            }
            let f = typeCast(TopOrBottomFilter.$, d);
            if (f != null) {
                ObjectModelTablePartManager.cc(a, f);
                return;
            }
            let g = typeCast(CustomFilter.$, d);
            if (g != null) {
                ObjectModelTablePartManager.b3(a, c, g);
                return;
            }
            let h = typeCast(DynamicValuesFilter.$, d);
            if (h != null) {
                ObjectModelTablePartManager.b5(a, b, h);
                return;
            }
            let i = typeCast(IColorFilter_$type, d);
            if (i != null) {
                ObjectModelTablePartManager.b2(a, c, i);
                return;
            }
            let j = typeCast(IconFilter.$, d);
            if (j != null) {
                ObjectModelTablePartManager.b8(a, j);
                return;
            }
        }
        static b2(a, b, c) {
            let d = b._bc(b._y(c));
            SpreadsheetMLMain.z0(a, toNullable(Number_$type, d), c.isCellColorFilter);
            a.ad.k();
        }
        static b3(a, b, c) {
            SpreadsheetMLMain.aak(a, c.conditionalOperator == 0);
            ObjectModelTablePartManager.b4(a, b, c.condition1);
            if (c.condition2 != null) {
                ObjectModelTablePartManager.b4(a, b, c.condition2);
            }
            a.ad.k();
        }
        static b4(a, b, c) {
            let d;
            let e;
            let f = c._q(b, d, e);
            d = f.p1;
            e = f.p2;
            SpreadsheetMLMain.aaj(a, e.toString(), d);
            a.ad.k();
        }
        static b5(a, b, c) {
            let d = b._by;
            let e = toNullable(Number_$type, null);
            let f = toNullable(Date_$type, null);
            let g = toNullable(Date_$type, null);
            let h = typeCast(DateRangeFilter.$, c);
            let i = typeCast(AverageFilter.$, c);
            if (h != null) {
                f = toNullable(Date_$type, h.start);
                g = toNullable(Date_$type, h.end);
            }
            else if (i != null) {
                e = toNullable(Number_$type, i.average);
            }
            if (b._z == 0) {
                SpreadsheetMLMain.aa6(a, c._m, !nullableIsNull(e) ? e : (nullableEquals(f, null) ? toNullable(Number_$type, null) : ExcelCalcValue._dateTimeToExcelDate(d, f.value)), nullableEquals(g, null) ? toNullable(Number_$type, null) : ExcelCalcValue._dateTimeToExcelDate(d, g.value));
            }
            else {
                SpreadsheetMLMain.aa7(a, c._m, e, f, g);
            }
            a.ad.k();
        }
        static b7(a, b) {
            SpreadsheetMLMain.abs(a, b.includeBlanks, XlsxUtilities.ap(b.calendarType));
            for (let c of fromEnum(b._displayValues$i)) {
                SpreadsheetMLMain.abr(a, c);
                a.ad.k();
            }
            for (let d of fromEnum(b._dateGroups$i)) {
                let e = d._f;
                let f = d.value.getFullYear();
                let g = toNullable(Number_$type, null);
                let h = toNullable(Number_$type, null);
                let i = toNullable(Number_$type, null);
                let j = toNullable(Number_$type, null);
                let k = toNullable(Number_$type, null);
                let t1 = d.type;
                L0: while (true) {
                    switch (t1) {
                        case 4:
                            k = toNullable(Number_$type, d.value.getSeconds());
                            t1 = 2;
                            continue L0;
                        case 2:
                            j = toNullable(Number_$type, d.value.getMinutes());
                            t1 = 1;
                            continue L0;
                        case 1:
                            i = toNullable(Number_$type, d.value.getHours());
                            t1 = 0;
                            continue L0;
                        case 0:
                            h = toNullable(Number_$type, d.value.getDate());
                            t1 = 3;
                            continue L0;
                        case 3:
                            g = toNullable(Number_$type, dateGetMonth(d.value));
                            t1 = 5;
                            continue L0;
                        case 5: break;
                        default:
                            t1 = 4;
                            continue L0;
                    }
                    break;
                }
                SpreadsheetMLMain.aat(a, e, f, g, h, i, j, k);
                a.ad.k();
            }
            a.ad.k();
        }
        static b8(a, b) {
            SpreadsheetMLMain.ab5(a, b._m, b._p);
        }
        b9(a, b) {
            SpreadsheetMLMain.adv(this, b._bs._toString2(1, false, true, true), void 0, b.sortSettings.caseSensitive, b.sortSettings._n ? XlsxUtilities.a5(b.sortSettings._i) : 0);
            for (let c of fromEnum(b.sortSettings._sortConditions$i)) {
                let d = c.key;
                let e = c.value;
                let f = null;
                let g = 0;
                let h = toNullable(Number_$type, null);
                let i = typeCast(CustomListSortCondition.$, e);
                if (i != null) {
                    f = i._l();
                }
                let j = typeCast(IconSortCondition.$, e);
                if (j != null) {
                    g = j._k;
                    h = j._n;
                }
                SpreadsheetMLMain.adt(this, d._ai._toString2(1, false, true, true), e.sortDirection == 1, e._d, f, a._a4(d), g, h);
            }
            this.ad.k();
        }
        ca(a, b) {
            let c = a._b;
            SpreadsheetMLMain.ad4(this, toNullable(Number_$type, intSToU(b._columns$i.count)));
            for (let d of fromEnum(b._columns$i)) {
                let e;
                let f;
                let g = ObjectModelTablePartManager.bz(WorksheetTableColumnArea_$type, a, d._areaFormats$i, 0, e, f);
                e = g.p3;
                f = g.p4;
                let h = null;
                let i = toNullable(Number_$type, null);
                if (d.table.isHeaderRowVisible == false) {
                    let j = ObjectModelTablePartManager.bz(WorksheetTableColumnArea_$type, a, d._areaFormats$i, 1, h, i);
                    h = j.p3;
                    i = j.p4;
                }
                let k;
                let l;
                let m = ObjectModelTablePartManager.bz(WorksheetTableColumnArea_$type, a, d._areaFormats$i, 2, k, l);
                k = m.p3;
                l = m.p4;
                let n = c._ck(d);
                SpreadsheetMLMain.ad3(this, d._a9, void 0, ObjectModelCommonPartHelpers.e(d.name, "_x000a_"), n, ObjectModelCommonPartHelpers.e(d.totalLabel, "_x000a_"), toNullable(Number_$type, null), i, f, l, h, e, k);
                if (d.columnFormula != null) {
                    SpreadsheetMLMain.zj(this, a._cv(d.columnFormula), typeCast(ArrayFormula.$, d.columnFormula) !== null);
                    this.ad.k();
                }
                if (n == 9) {
                    SpreadsheetMLMain.aeg(this, a._cv(d.totalFormula), typeCast(ArrayFormula.$, d.totalFormula) !== null);
                    this.ad.k();
                }
                this.ad.k();
            }
            this.ad.k();
        }
        cb(a) {
            SpreadsheetMLMain.aea(this, a.style.name, toNullable(Boolean_$type, a.displayFirstColumnFormatting), toNullable(Boolean_$type, a.displayLastColumnFormatting), toNullable(Boolean_$type, a.displayBandedRows), toNullable(Boolean_$type, a.displayBandedColumns));
            this.ad.k();
        }
        static cc(a, b) {
            SpreadsheetMLMain.aee(a, b.value, b._x, b._w, toNullable(Number_$type, b._z));
            a.ad.k();
        }
        get a8() {
            return ObjectModelTablePartManager.a9(this);
        }
        static a9(a) {
            return a.d;
        }
    }
    ObjectModelTablePartManager.$t = /*@__PURE__*/ markType(ObjectModelTablePartManager, 'ObjectModelTablePartManager', TablePartManager.$);
    ObjectModelTablePartManager.ba = /*@__PURE__*/ new ObjectModelTablePartManager();
    return ObjectModelTablePartManager;
})();
/**
 * @hidden
 */
export let ConditionalFormatInfo = /*@__PURE__*/ (() => {
    class ConditionalFormatInfo extends Base {
        constructor(a, b) {
            super();
            this.g = null;
            this.i = null;
            this.c = null;
            this.d = null;
            this.j = null;
            this.b = null;
            this.k = null;
            this.f = false;
            this.o();
            this.d = a;
            this.c = b;
            this.k = new List$1(CfRuleInfo.$, 0);
        }
        get h() {
            if (this.g == null) {
                this.g = new Dictionary$2(String_$type, CfRuleInfo.$, 0);
            }
            return this.g;
        }
        get a() {
            return this.d._c;
        }
        o() {
            this.j = new List$1(WorksheetRegion.$, 0);
            this.b = null;
        }
        m() {
            let a = new List$1(ConditionSortContext.$, 2, this.k.count);
            for (let b of fromEnum(this.k)) {
                let c = ConditionFactory_XLSX.d(this, b);
                a.add(((() => {
                    let $ret = new ConditionSortContext();
                    $ret.b = b.ad;
                    $ret.a = c;
                    return $ret;
                })()));
            }
            DocCoreUtils.as(ConditionSortContext.$, a, new ConditionSortContextComparer());
            let d = ConditionSortContextComparer._a(a);
            this.d._conditionalFormats$i._aw(d);
            this.o();
        }
        get l() {
            if (this.i == null) {
                this.i = new List$1(CfRuleInfo.$, 0);
            }
            return this.i;
        }
        static e(a) {
            if (a == null) {
                return false;
            }
            return true;
        }
        static n(a, b) {
            a.j.clear();
            let c = a.d;
            for (let d of fromEnum(b)) {
                if (stringIsNullOrEmpty(d) == false) {
                    let e = c._getRegion1(d, 1);
                    a.j.add(e);
                }
            }
            if (a.l.count > 0) {
                for (let f of fromEnum(a.l)) {
                    f.ap(a);
                }
            }
        }
    }
    ConditionalFormatInfo.$t = /*@__PURE__*/ markType(ConditionalFormatInfo, 'ConditionalFormatInfo');
    return ConditionalFormatInfo;
})();
/**
 * @hidden
 */
export let CfRuleInfo = /*@__PURE__*/ (() => {
    class CfRuleInfo extends Base {
        constructor() {
            super(...arguments);
            this.d = null;
            this.w = null;
            this.x = null;
            this.v = null;
            this.i = null;
            this.f = null;
            this.q = false;
            this.h = null;
            this.s = false;
            this.aa = null;
            this.r = false;
            this.c = null;
            this.al = toNullable(ST_CfType_$type, null);
            this.ae = toNullable(Number_$type, null);
            this.ag = toNullable(Number_$type, null);
            this.aj = toNullable(Boolean_$type, null);
            this.k = false;
            this.t = false;
            this.n = false;
            this.af = toNullable(ST_ConditionalFormattingOperator_$type, null);
            this.ao = null;
            this.ak = toNullable(ST_TimePeriod_$type, null);
            this.ah = toNullable(Number_$type, null);
            this.ai = toNullable(Number_$type, null);
            this.p = false;
            this.an = null;
            this.am = null;
        }
        ap(a) {
            this.aa = new List$1(WorksheetRegion.$, 1, a.j);
        }
        aq(a) {
            this.c = a;
            a.aa = this.aa;
        }
        get e() {
            if (this.d == null) {
                this.d = new CfRuleInfo_ResolvedValues();
            }
            return this.d;
        }
        get ad() {
            if (this.c != null && this.c.ag.hasValue) {
                return this.c.ag.value;
            }
            if (this.ag.hasValue) {
                return this.ag.value;
            }
            return 0;
        }
        get u() {
            if (this.c != null && this.c.aj.hasValue) {
                return this.c.aj.value;
            }
            if (this.aj.hasValue) {
                return this.aj.value;
            }
            return false;
        }
        get j() {
            if (this.i == null) {
                this.i = new IconSetWrapper();
            }
            return this.i;
        }
        get g() {
            if (this.f == null) {
                this.f = new DatabarWrapper();
            }
            return this.f;
        }
        get z() {
            if (this.w == null) {
                this.w = new List$1(String_$type, 2, 3);
            }
            return this.w;
        }
        get ab() {
            if (this.x == null) {
                this.x = new List$1(CfvoWrapper.$, 0);
            }
            return this.x;
        }
        get y() {
            if (this.v == null) {
                this.v = new List$1(ColorInfo.$, 0);
            }
            return this.v;
        }
        static b(a, b) {
            return CfRuleInfo.a(b, a, true, SpreadsheetML2009Main.ax);
        }
        static a(a, b, c = false, d = SpreadsheetMLMain.eg) {
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t = SpreadsheetMLMain.t5(a, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
            e = t.p2;
            f = t.p3;
            g = t.p4;
            h = t.p5;
            i = t.p6;
            j = t.p7;
            k = t.p8;
            l = t.p9;
            m = t.p10;
            n = t.p11;
            o = t.p12;
            p = t.p13;
            q = t.p14;
            r = t.p15;
            s = t.p16;
            let u = ((() => {
                let $ret = new CfRuleInfo();
                $ret.k = i;
                $ret.n = k;
                $ret.ae = f;
                $ret.p = q;
                $ret.af = l;
                $ret.t = j;
                $ret.ag = g;
                $ret.ah = o;
                $ret.ai = p;
                $ret.aj = h;
                $ret.ao = m;
                $ret.ak = n;
                $ret.al = e;
                $ret.an = r;
                return $ret;
            })());
            let v = u.al.hasValue ? EnumConverter.e(u.al.value) : 0;
            u.e.a = v;
            let w = toNullable(FormatConditionOperator_$type, null);
            let x = toNullable(FormatConditionTextOperator_$type, null);
            if (u.af.hasValue) {
                let y = EnumConverter.q(u.af.value, w, x);
                w = y.p1;
                x = y.p2;
            }
            else {
                w = toNullable(FormatConditionOperator_$type, 2);
            }
            switch (v) {
                case 0:
                    u.e.b = toNullable(FormatConditionOperator_$type, w.value);
                    break;
                case 8:
                    u.e.c = toNullable(FormatConditionTextOperator_$type, x.hasValue ? x.value : 2);
                    break;
            }
            u.r = b.f;
            u.s = c;
            if (c == false) {
                u.ap(b);
            }
            return u;
        }
        static l(a) {
            if (a == null) {
                return false;
            }
            return true;
        }
        static m(a) {
            if (CfRuleInfo.l(a) == false) {
                return false;
            }
            if (a.y.count != a.ab.count) {
                return false;
            }
            return true;
        }
    }
    CfRuleInfo.$t = /*@__PURE__*/ markType(CfRuleInfo, 'CfRuleInfo');
    return CfRuleInfo;
})();
/**
 * @hidden
 */
export let IconSetWrapper = /*@__PURE__*/ (() => {
    class IconSetWrapper extends Base {
        constructor() {
            super(...arguments);
            this.g = null;
            this.m = toNullable(ST_IconSetType_$type, null);
            this.j = toNullable(Boolean_$type, null);
            this.k = toNullable(Boolean_$type, null);
            this.l = toNullable(Boolean_$type, null);
            this.i = toNullable(Boolean_$type, null);
        }
        get h() {
            if (this.g == null) {
                this.g = new List$1(IconCriterionWrapper.$, 0);
            }
            return this.g;
        }
        static a(a) {
            let b = a.c != null ? a.c.j : a.s ? a.j : null;
            let c = a.j;
            let d = new IconSetWrapper();
            if (b != null && b.m.hasValue) {
                d.m = toNullable(ST_IconSetType_$type, b.m.value);
            }
            else if (c != null && c.m.hasValue) {
                d.m = toNullable(ST_IconSetType_$type, c.m.value);
            }
            else {
                d.m = toNullable(ST_IconSetType_$type, 3);
            }
            if (b != null && b.j.hasValue) {
                d.j = toNullable(Boolean_$type, b.j.value);
            }
            else if (c != null && c.j.hasValue) {
                d.j = toNullable(Boolean_$type, c.j.value);
            }
            else {
                d.j = toNullable(Boolean_$type, true);
            }
            if (b != null && b.k.hasValue) {
                d.k = toNullable(Boolean_$type, b.k.value);
            }
            else if (c != null && c.k.hasValue) {
                d.k = toNullable(Boolean_$type, c.k.value);
            }
            else {
                d.k = toNullable(Boolean_$type, false);
            }
            if (b != null && b.l.hasValue) {
                d.l = toNullable(Boolean_$type, b.l.value);
            }
            else if (c != null && c.l.hasValue) {
                d.l = toNullable(Boolean_$type, c.l.value);
            }
            else {
                d.l = toNullable(Boolean_$type, true);
            }
            d.i = toNullable(Boolean_$type, b != null && b.i.hasValue ? b.i.value : false);
            return d;
        }
        n(a, b) {
            let c = a.c != null ? a.c : a.s ? a : null;
            let d = b._iconCriteria$i;
            if (c != null) {
                let e = c.j.h.count;
                let f = a.ab.count;
                if (e == 0) {
                    if (c.j.i.value) {
                    }
                    else {
                        let g = IconCriterion._an(b.iconSet);
                        for (let h = 0; h < g; h++) {
                            let i = ((() => {
                                let $ret = new IconCriterionWrapper();
                                $ret.a = this.m.value;
                                $ret.b = h;
                                return $ret;
                            })());
                            c.j.h.add(i);
                        }
                    }
                }
                for (let j = 0; j < f; j++) {
                    IconCriterionExtensions.a(b._iconCriteria$i.item(j), a.j.h._inner[j], a.ab._inner[j]);
                }
            }
            else {
                IconSetCriterionCollectionExtensions.a(b._iconCriteria$i, a.ab, b.worksheet);
            }
        }
    }
    IconSetWrapper.$t = /*@__PURE__*/ markType(IconSetWrapper, 'IconSetWrapper');
    return IconSetWrapper;
})();
/**
 * @hidden
 */
export let DatabarWrapper = /*@__PURE__*/ (() => {
    class DatabarWrapper extends Base {
        constructor() {
            super(...arguments);
            this.w = toNullable(Number_$type, null);
            this.v = toNullable(Number_$type, null);
            this.z = toNullable(Boolean_$type, null);
            this.t = toNullable(Boolean_$type, null);
            this.u = toNullable(Boolean_$type, null);
            this.s = toNullable(ST_DataBarDirection_$type, null);
            this.y = toNullable(Boolean_$type, null);
            this.x = toNullable(Boolean_$type, null);
            this.r = toNullable(ST_DataBarAxisPosition_$type, null);
            this.a = null;
            this.b = null;
            this.c = null;
            this.e = null;
            this.d = null;
        }
        static f(a) {
            let b = new DatabarWrapper();
            let c = a.c != null ? a.c.g : a.s ? a.g : null;
            let d = a.g;
            let e = d != null ? d.w : toNullable(Number_$type, null);
            let f = d != null ? d.v : toNullable(Number_$type, null);
            let g = c != null ? c.w : toNullable(Number_$type, null);
            let h = c != null ? c.v : toNullable(Number_$type, null);
            let i = 10;
            let j = 90;
            let k = 0;
            let l = 100;
            if (e.hasValue == false || f.hasValue == false || (e.value == i && f.value == j)) {
                if (g.hasValue && g.value == k && h.hasValue && h.value == l) {
                    b.w = toNullable(Number_$type, k);
                    b.v = toNullable(Number_$type, l);
                }
                else {
                    b.w = toNullable(Number_$type, e.hasValue ? e.value : i);
                    b.v = toNullable(Number_$type, f.hasValue ? f.value : j);
                }
            }
            else {
                b.w = toNullable(Number_$type, e.hasValue ? e.value : i);
                b.v = toNullable(Number_$type, f.hasValue ? f.value : j);
            }
            if (c != null && c.z.hasValue) {
                b.z = toNullable(Boolean_$type, c.z.value);
            }
            else if (d != null && d.z.hasValue) {
                b.z = toNullable(Boolean_$type, d.z.value);
            }
            else {
                b.z = toNullable(Boolean_$type, true);
            }
            if (c != null && c.t.hasValue) {
                b.t = toNullable(Boolean_$type, c.t.value);
            }
            else if (d != null && d.t.hasValue) {
                b.t = toNullable(Boolean_$type, d.t.value);
            }
            else {
                b.t = toNullable(Boolean_$type, false);
            }
            if (c != null && c.u.hasValue) {
                b.u = toNullable(Boolean_$type, c.u.value);
            }
            else if (d != null && d.u.hasValue) {
                b.u = toNullable(Boolean_$type, d.u.value);
            }
            else {
                b.u = toNullable(Boolean_$type, true);
            }
            if (c != null && c.s.hasValue) {
                b.s = toNullable(ST_DataBarDirection_$type, c.s.value);
            }
            else if (d != null && d.s.hasValue) {
                b.s = toNullable(ST_DataBarDirection_$type, d.s.value);
            }
            else {
                b.s = toNullable(ST_DataBarDirection_$type, 0);
            }
            if (c != null && c.y.hasValue) {
                b.y = toNullable(Boolean_$type, c.y.value);
            }
            else if (d != null && d.y.hasValue) {
                b.y = toNullable(Boolean_$type, d.y.value);
            }
            else {
                b.y = toNullable(Boolean_$type, false);
            }
            if (c != null && c.x.hasValue) {
                b.x = toNullable(Boolean_$type, c.x.value);
            }
            else if (d != null && d.x.hasValue) {
                b.x = toNullable(Boolean_$type, d.x.value);
            }
            else {
                b.x = toNullable(Boolean_$type, true);
            }
            if (c != null && c.r.hasValue) {
                b.r = toNullable(ST_DataBarAxisPosition_$type, c.r.value);
            }
            else if (d != null && d.r.hasValue) {
                b.r = toNullable(ST_DataBarAxisPosition_$type, d.r.value);
            }
            else {
                b.r = toNullable(ST_DataBarAxisPosition_$type, 0);
            }
            b.a = c != null && c.a != null ? c.a : d != null ? d.a : null;
            b.b = c != null && c.b != null ? c.b : d != null ? d.b : null;
            b.c = c != null && c.c != null ? c.c : d.c;
            b.e = c != null && c.e != null ? c.e : d != null ? d.e : null;
            b.d = c != null && c.d != null ? c.d : d != null ? d.d : null;
            if (b.c == null) {
                if (a.y.count > 0) {
                    b.c = a.y._inner[0];
                }
            }
            return b;
        }
    }
    DatabarWrapper.$t = /*@__PURE__*/ markType(DatabarWrapper, 'DatabarWrapper');
    return DatabarWrapper;
})();
/**
 * @hidden
 */
export let ObjectModelCommentsPartManager = /*@__PURE__*/ (() => {
    class ObjectModelCommentsPartManager extends CommentsPartManager {
        constructor() {
            super();
            this.az(SpreadsheetMLMain.c0, ObjectModelCommentsPartManager.ba);
            this.az(SpreadsheetMLMain.c2, ObjectModelCommentsPartManager.bb);
            this.az(SpreadsheetMLMain.e1, ObjectModelCommentsPartManager.bc);
            this.az(SpreadsheetMLMain.e3, ObjectModelCommentsPartManager.bd);
            this.az(SpreadsheetMLMain.e4, ObjectModelCommentsPartManager.be);
            this.az(SpreadsheetMLMain.q5, ObjectModelCommentsPartManager.bf);
            ObjectModelCommonPartHelpers.al(this);
        }
        t() {
            let a = new List$1(WorksheetCellCommentData.$, 0);
            this.s.k(a);
            return WorkItemExtensions.g(Base.$, super.t(), () => a);
        }
        u(a) {
            let b = typeCast(Worksheet.$, a);
            if (b == null) {
                return null;
            }
            let c = this.a7._b9;
            let d = c._w(b);
            let e = new List$1(WorksheetCellCommentData.$, 0);
            let f = new List$1(String_$type, 0);
            for (let g of fromEnum(d.j)) {
                let h = f.f(g.author);
                if (h < 0) {
                    h = ~h;
                    f.insert(h, g.author);
                }
                if (g.cell.worksheet == null) {
                    return null;
                }
                let i = new WorksheetCellCommentData(g, intSToU(h), g.cell.rowIndex, g.cell.columnIndex);
                e.add(i);
            }
            SpreadsheetMLMain.z6(this);
            SpreadsheetMLMain.y9(this);
            for (let j of fromEnum(f)) {
                SpreadsheetMLMain.y8(this, j);
                this.ad.k();
            }
            this.ad.k();
            SpreadsheetMLMain.z5(this);
            for (let k of fromEnum(e)) {
                let l = k.b.cell;
                SpreadsheetMLMain.z4(this, CellAddress.u(l.rowIndex, l.columnIndex, c._b.currentFormat), k.h);
                ObjectModelCommonPartHelpers.au(this, c, k.b.text._m, SpreadsheetMLMain.aed);
                this.ad.k();
            }
            this.ad.k();
            this.ad.k();
            return null;
        }
        static ba(a) {
            let b = a.s.a(List$1.$.specialize(String_$type));
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.tn(a, c);
            c = d.p1;
            b.add(c);
        }
        static bb(a) {
        }
        static bc(a) {
            let b = a.s.a(List$1.$.specialize(String_$type));
            let c = a.s.a(List$1.$.specialize(WorksheetCellCommentData.$));
            if (b == null || c == null) {
                return;
            }
            let d;
            let e;
            let f;
            let g;
            let h = SpreadsheetMLMain.uj(a, d, e, f, g);
            d = h.p1;
            e = h.p2;
            f = h.p3;
            g = h.p4;
            let i;
            let j;
            if (((() => { let k = ExcelUtils.bl(d, 2, CultureInfo.invariantCulture, i, j); i = k.p3; j = k.p4; return k.ret; })()) == false) {
            }
            let k = b._inner[e];
            let l = new WorksheetCellComment();
            l.text._e();
            l.author = k;
            let m = new WorksheetCellCommentData(l, e, j, i);
            c.add(m);
            a.s.k(l);
            a.s.k(l.text._m);
        }
        static bd(a) {
        }
        static be(a) {
            a.s.k(new List$1(String_$type, 0));
        }
        static bf(a) {
        }
        get a7() {
            return ObjectModelCommentsPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelCommentsPartManager.$t = /*@__PURE__*/ markType(ObjectModelCommentsPartManager, 'ObjectModelCommentsPartManager', CommentsPartManager.$);
    ObjectModelCommentsPartManager.a9 = /*@__PURE__*/ new ObjectModelCommentsPartManager();
    return ObjectModelCommentsPartManager;
})();
/**
 * @hidden
 */
export let ConditionFactory_XLSX = /*@__PURE__*/ (() => {
    class ConditionFactory_XLSX extends Base {
        static d(a, b) {
            let c = null;
            switch (b.e.a) {
                case 11:
                    c = ConditionFactory_XLSX.a(a, b);
                    break;
                case 9:
                    c = ConditionFactory_XLSX.b(a, b);
                    break;
                case 0:
                    c = ConditionFactory_XLSX.m(a, b);
                    break;
                case 7:
                    c = ConditionFactory_XLSX.g(a, b);
                    break;
                case 13:
                    c = ConditionFactory_XLSX.h(a, b);
                    break;
                case 1:
                    c = ConditionFactory_XLSX.i(a, b);
                    break;
                case 12:
                    c = ConditionFactory_XLSX.k(a, b);
                    break;
                case 14:
                    c = ConditionFactory_XLSX.l(a, b);
                    break;
                case 4:
                    c = ConditionFactory_XLSX.n(a, b);
                    break;
                case 8:
                    c = ConditionFactory_XLSX.o(a, b);
                    break;
                case 10:
                    c = ConditionFactory_XLSX.f(a, b);
                    break;
                case 6:
                    c = ConditionFactory_XLSX.p(a, b);
                    break;
                case 2:
                    c = ConditionFactory_XLSX.c(a, b);
                    break;
                case 5:
                    c = ConditionFactory_XLSX.j(a, b);
                    break;
                case 3:
                    c = ConditionFactory_XLSX.e(a, b);
                    break;
                default: break;
            }
            return c;
        }
        static m(a, b) {
            let c = new OperatorConditionalFormat(1, b.aa, b.e.b.value);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            let d = a.a;
            if (b.z.count > 0) {
                let e = b.z._inner[0];
                let f = b.z.count > 1 ? b.z._inner[1] : null;
                if (stringIsNullOrEmpty(e) == false) {
                    c._cd = ConditionFactory_XLSX.q(e, a, c);
                }
                if (stringIsNullOrEmpty(f) == false) {
                    c._ce = ConditionFactory_XLSX.q(f, a, c);
                }
            }
            return c;
        }
        static i(a, b) {
            let c = new FormulaConditionalFormat(1, b.aa, null, toNullable(CellReferenceMode_$type, null));
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            let d = a.a;
            let e = b.z.count > 0 ? b.z._inner[0] : null;
            if (stringIsNullOrEmpty(e) == false) {
                c._b5 = ConditionFactory_XLSX.q(e, a, c);
            }
            return c;
        }
        static n(a, b) {
            let c = new RankConditionalFormat(1, b.aa, 1, 10);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            if (b.ah.hasValue) {
                c.rank = b.ah.value;
            }
            c.topBottom = b.n ? 0 : 1;
            c.isPercent = b.t;
            return c;
        }
        static a(a, b) {
            let c = new AverageConditionalFormat(1, b.aa, 0);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            let d = 0;
            if (b.k) {
                if (b.p) {
                    d = 2;
                }
                else if (b.ai.hasValue) {
                    d = 4;
                }
                else {
                    d = 0;
                }
            }
            else {
                if (b.p) {
                    d = 3;
                }
                else if (b.ai.hasValue) {
                    d = 5;
                }
                else {
                    d = 1;
                }
            }
            c.aboveBelow = d;
            if (b.ai.hasValue) {
                c.numericStandardDeviation = b.ai.value;
            }
            return c;
        }
        static p(a, b) {
            let c = new UniqueConditionalFormat(1, b.aa);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            return c;
        }
        static g(a, b) {
            let c = new DuplicateConditionalFormat(1, b.aa);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            return c;
        }
        static b(a, b) {
            let c = new BlanksConditionalFormat(1, b.aa);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            return c;
        }
        static k(a, b) {
            let c = new NoBlanksConditionalFormat(1, b.aa);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            return c;
        }
        static h(a, b) {
            let c = new ErrorsConditionalFormat(1, b.aa);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            return c;
        }
        static l(a, b) {
            let c = new NoErrorsConditionalFormat(1, b.aa);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            return c;
        }
        static o(a, b) {
            let c = new TextOperatorConditionalFormat(1, b.aa, null, 2);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            c.text = b.ao;
            c.textOperator = b.e.c.hasValue ? b.e.c.value : 2;
            return c;
        }
        static f(a, b) {
            let c = new DateTimeConditionalFormat(1, b.aa, 0);
            ConditionFactory_XLSX.t(a, b, c);
            ConditionFactory_XLSX.u(a, b, c);
            c.dateOperator = EnumConverter.d(b.ak);
            return c;
        }
        static c(a, b) {
            if (CfRuleInfo.m(b) == false) {
                return null;
            }
            let c = b.y.count == 3 ? 1 : 0;
            let d = new ColorScaleConditionalFormat(1, b.aa, c);
            ConditionFactory_XLSX.t(a, b, d);
            let e = b.z.count > 0 ? b.z._inner[0] : null;
            if (stringIsNullOrEmpty(e) == false) {
                d._by = ConditionFactory_XLSX.q(e, a, d);
            }
            let f = null;
            let g = null;
            let h = null;
            let i = a.d;
            let j = i.workbook;
            switch (c) {
                case 0:
                    f = new Tuple$2(CfvoWrapper.$, ColorInfo.$, b.ab._inner[0], b.y._inner[0]);
                    h = new Tuple$2(CfvoWrapper.$, ColorInfo.$, b.ab._inner[1], b.y._inner[1]);
                    ConditionValueExtensions.a(d.minimumThreshold._b, f.c, i);
                    d.minimumThreshold.formatColor = ColorInfoExtensions.a(f.d, a);
                    ConditionValueExtensions.a(d.maximumThreshold._b, h.c, i);
                    d.maximumThreshold.formatColor = ColorInfoExtensions.a(h.d, a);
                    break;
                case 1:
                    f = new Tuple$2(CfvoWrapper.$, ColorInfo.$, b.ab._inner[0], b.y._inner[0]);
                    g = new Tuple$2(CfvoWrapper.$, ColorInfo.$, b.ab._inner[1], b.y._inner[1]);
                    h = new Tuple$2(CfvoWrapper.$, ColorInfo.$, b.ab._inner[2], b.y._inner[2]);
                    ConditionValueExtensions.a(d.minimumThreshold._b, f.c, i);
                    d.minimumThreshold.formatColor = ColorInfoExtensions.a(f.d, a);
                    ConditionValueExtensions.a(d.midpointThreshold._b, g.c, i);
                    d.midpointThreshold.formatColor = ColorInfoExtensions.a(g.d, a);
                    ConditionValueExtensions.a(d.maximumThreshold._b, h.c, i);
                    d.maximumThreshold.formatColor = ColorInfoExtensions.a(h.d, a);
                    break;
            }
            return d;
        }
        static j(a, b) {
            let c = IconSetWrapper.a(b);
            let d = ExcelUtils.s(c.m.value);
            let e = new IconSetConditionalFormat(1, b.aa, d);
            ConditionFactory_XLSX.t(a, b, e);
            let f = ConditionFactory_XLSX.s(b);
            if (stringIsNullOrEmpty(f) == false) {
                e._by = ConditionFactory_XLSX.q(f, a, e);
            }
            e._cm = c.j.value;
            e.isReverseOrder = c.k.value;
            e.showValue = c.l.value;
            c.n(b, e);
            return e;
        }
        static e(a, b) {
            let c = new DataBarConditionalFormat(1, b.aa);
            ConditionFactory_XLSX.t(a, b, c);
            let d = ConditionFactory_XLSX.s(b);
            if (stringIsNullOrEmpty(d) == false) {
                c._by = ConditionFactory_XLSX.q(d, a, c);
            }
            let e = b.c != null ? b.c : b.s ? b : null;
            let f = e != null && e.ab.count == 2 ? e.ab : b.ab;
            ConditionValueExtensions.a(c.minPoint, f._inner[0], a.d);
            ConditionValueExtensions.a(c.maxPoint, f._inner[1], a.d);
            let g = DatabarWrapper.f(b);
            if (g.c != null) {
                c.barColor = ColorInfoExtensions.a(g.c, a);
            }
            if (g.b != null) {
                c.barBorderColor = ColorInfoExtensions.a(g.b, a);
            }
            if (g.d != null) {
                c.negativeBarFormat.barBorderColor = ColorInfoExtensions.a(g.d, a);
            }
            if (g.e != null) {
                c.negativeBarFormat.barColor = ColorInfoExtensions.a(g.e, a);
            }
            if (g.a != null) {
                c.axisColor = ColorInfoExtensions.a(g.a, a);
            }
            c.barFillType = EnumConverter.c(g.u.value);
            c.negativeBarFormat.barColorType = g.y.value ? 1 : 0;
            c.negativeBarFormat.barBorderColorType = g.x.value ? 1 : 0;
            c.direction = EnumConverter.b(g.s.value);
            c.axisPosition = EnumConverter.a(g.r.value);
            c.fillPercentMin = g.w.value;
            c.fillPercentMax = g.v.value;
            c.showValue = g.z.value;
            c.showBorder = g.t.value;
            if (e == null) {
                c.axisPosition = 2;
                c.negativeBarFormat.barColorType = 1;
            }
            return c;
        }
        static t(a, b, c) {
            c._af = a.f;
            c.priority = b.ad;
            c.stopIfTrue = b.u;
        }
        static u(a, b, c) {
            c._bw = b.ae.hasValue ? a.c._g._inner[b.ae.value] : null;
        }
        static q(a, b, c) {
            let d = WorkbookLoadManagerExcel2007._bs(a);
            a = d.p0;
            let e = c.regions.item(0);
            let f = c._s();
            return ConditionBase._n(a, e.worksheet.workbook, toNullable(CellReferenceMode_$type, 1), 7, f.o, f.m, b.c._bi);
        }
        static r(a) {
            return FormulaConditionalFormat._b9(a);
        }
        static s(a) {
            if (a.c != null && a.c.z.count > 0) {
                return a.c.z._inner[0];
            }
            else if (a.z.count > 0) {
                return a.z._inner[0];
            }
            return null;
        }
    }
    ConditionFactory_XLSX.$t = /*@__PURE__*/ markType(ConditionFactory_XLSX, 'ConditionFactory_XLSX');
    return ConditionFactory_XLSX;
})();
/**
 * @hidden
 */
export let ConditionValueExtensions = /*@__PURE__*/ (() => {
    class ConditionValueExtensions extends Base {
        static a(a, b, c) {
            let d = c != null ? c.workbook : null;
            let e = EnumConverter.f(b.a);
            if (stringIsNullOrEmpty(b.c) == false) {
                let f = null;
                switch (e) {
                    case 3:
                        f = ConditionFactory_XLSX.r(b.c);
                        a._setFormula$i(f);
                        break;
                    default:
                        let g = toNullable(Number_$type, null);
                        let h = toNullable(Number_$type, null);
                        if (((() => { let i = ConditionValue._s(b.c, h, g); h = i.p1; g = i.p2; return i.ret; })())) {
                            if (h.hasValue) {
                                a._f = new ConditionValueInfo(1, h.value, e);
                            }
                            else if (g.hasValue) {
                                a._f = new ConditionValueInfo(1, g.value, e);
                            }
                        }
                        else {
                            f = ConditionFactory_XLSX.r(b.c);
                            let i = null;
                            if (((() => { let j = Formula._ay(f, c._c, i); i = j.p2; return j.ret; })())) {
                                a._ai(typeCast(SingleTargetFormula.$, i), e);
                            }
                            else {
                            }
                        }
                        break;
                }
            }
            else {
                a._f = new ConditionValueInfo(1, NaN, e);
            }
        }
        static b(a, b, c, d, e, f, g = toNullable(Boolean_$type, null)) {
            let h = a.valueType;
            if (f == false) {
                if (h == 6) {
                    h = 4;
                }
                else if (h == 7) {
                    h = 5;
                }
            }
            let i = EnumConverter.h(h);
            let j = null;
            if (g.hasValue == false) {
                g = toNullable(Boolean_$type, true);
            }
            if (f) {
                SpreadsheetML2009Main.dc(b, i, g.value);
                switch (a.valueType) {
                    case 6:
                    case 7:
                    case 5:
                    case 4:
                        j = null;
                        break;
                    case 0:
                    case 1:
                    case 2:
                        if (a.formula != null && isNaN_(a.value)) {
                            j = c._cv(a.formula);
                        }
                        else {
                            j = ConditionalFormattingSerializer.u(a.value);
                        }
                        break;
                    case 3:
                        j = c._cv(a.formula);
                        break;
                }
                if (stringIsNullOrEmpty(j) == false) {
                    Excel2006Main.av(b, j);
                    d.k();
                }
            }
            else {
                switch (a.valueType) {
                    case 6:
                    case 7:
                    case 4:
                    case 5: break;
                    case 3:
                        j = c._cv(a.formula);
                        break;
                    case 0:
                    case 1:
                    case 2:
                        if (a.formula != null && isNaN_(a.value)) {
                            j = c._cv(a.formula);
                        }
                        else {
                            j = ConditionalFormattingSerializer.u(a.value);
                        }
                        break;
                }
                SpreadsheetMLMain.zr(b, i, j, g.value);
            }
            d.k();
        }
    }
    ConditionValueExtensions.$t = /*@__PURE__*/ markType(ConditionValueExtensions, 'ConditionValueExtensions');
    return ConditionValueExtensions;
})();
/**
 * @hidden
 */
export let ColorInfoExtensions = /*@__PURE__*/ (() => {
    class ColorInfoExtensions extends Base {
        static a(a, b) {
            return a.c(b.c);
        }
        static d(a, b, c, d, e) {
            if (WorkbookColorInfo.l_op_Equality(a, null)) {
                return;
            }
            let f = toNullable(Boolean_$type, null);
            let g = toNullable(ST_UnsignedIntHex.$, null);
            let h = toNullable(Number_$type, null);
            let i = a._tint$i.hasValue ? a._tint$i.value : 0;
            if (a.isAutomatic) {
                f = toNullable(Boolean_$type, true);
            }
            else if (a._color$i.hasValue) {
                g = toNullable(ST_UnsignedIntHex.$, ST_UnsignedIntHex.d(ColorInfoExtensions.c(a._color$i.value)));
            }
            else if (a._themeColorType$i.hasValue) {
                h = toNullable(Number_$type, a._themeColorType$i.value);
            }
            else {
                g = toNullable(ST_UnsignedIntHex.$, ST_UnsignedIntHex.d(ColorInfoExtensions.c(a._getResolvedColor1(d.workbook))));
            }
            SpreadsheetMLMain.aae(b, e, f, toNullable(Number_$type, null), g, h, i);
            c.k();
        }
        static c(a) {
            return ColorInfoExtensions.b(a.l, a.o, a.n, a.m);
        }
        static b(a, b, c, d) {
            let e = new StringBuilder(0);
            e.l(intToString1(a, "X2"));
            e.l(intToString1(b, "X2"));
            e.l(intToString1(c, "X2"));
            e.l(intToString1(d, "X2"));
            return e.toString();
        }
    }
    ColorInfoExtensions.$t = /*@__PURE__*/ markType(ColorInfoExtensions, 'ColorInfoExtensions');
    return ColorInfoExtensions;
})();
/**
 * @hidden
 */
export let IconCriterionExtensions = /*@__PURE__*/ (() => {
    class IconCriterionExtensions extends Base {
        static a(a, b, c) {
            let d = a._d.worksheet;
            ConditionValueExtensions.a(a._b, c, d);
            a.comparison = c.b ? 0 : 1;
            let e = ExcelUtils.s(b.a);
            let f = IconSetConditionalFormat._b9(e);
            let g = b.b;
            if (g < 0 || g >= f.length) {
                g = Math.min(g, f.length - 1);
                g = Math.max(g, 0);
            }
            a.icon = f[g];
        }
    }
    IconCriterionExtensions.$t = /*@__PURE__*/ markType(IconCriterionExtensions, 'IconCriterionExtensions');
    return IconCriterionExtensions;
})();
/**
 * @hidden
 */
export let IconSetCriterionCollectionExtensions = /*@__PURE__*/ (() => {
    class IconSetCriterionCollectionExtensions extends Base {
        static a(a, b, c) {
            let d = new Array(b.count);
            let e = a._d.iconSet;
            let f = IconSetConditionalFormat._b9(e);
            for (let g = 0, h = b.count; g < h; g++) {
                let i = b.item(g);
                let j = new IconCriterion(1, a, g, e, f[g]);
                j.comparison = i.b ? 0 : 1;
                ConditionValueExtensions.a(j._b, i, c);
                d[g] = j;
            }
            a._q(d);
        }
    }
    IconSetCriterionCollectionExtensions.$t = /*@__PURE__*/ markType(IconSetCriterionCollectionExtensions, 'IconSetCriterionCollectionExtensions');
    return IconSetCriterionCollectionExtensions;
})();
/**
 * @hidden
 */
export let SparklinesDeserializer = /*@__PURE__*/ (() => {
    class SparklinesDeserializer extends Base {
        constructor(a) {
            super();
            this.d = null;
            this.h = null;
            this.c = 0;
            this.d = a;
        }
        get e() {
            return (this.c & 1) == 1;
        }
        get i() {
            if (this.h == null) {
                this.h = new List$1(CT_SparklineGroup.$, 0);
            }
            return this.h;
        }
        static a(a, b = true) {
            let c = a.s.a(SparklinesDeserializer.$);
            if (c == null) {
                if (b) {
                }
                return null;
            }
            return c;
        }
        static b($t, a, b = true) {
            let c = a.s.a($t);
            if (getBoxIfEnum($t, c) == null) {
                if (b) {
                }
                return Type.getDefaultValue($t);
            }
            return c;
        }
        static z(a) {
            a.az(SpreadsheetML2009Main.cp, SparklinesDeserializer.v);
            a.ay(SpreadsheetML2009Main.cp, SparklinesDeserializer.w);
            a.az(SpreadsheetML2009Main.co, SparklinesDeserializer.u);
            a.az(SpreadsheetML2009Main.a0, SparklinesDeserializer.k);
            a.az(SpreadsheetML2009Main.a1, SparklinesDeserializer.l);
            a.az(SpreadsheetML2009Main.a2, SparklinesDeserializer.n);
            a.az(SpreadsheetML2009Main.a3, SparklinesDeserializer.o);
            a.az(SpreadsheetML2009Main.a4, SparklinesDeserializer.p);
            a.az(SpreadsheetML2009Main.a5, SparklinesDeserializer.q);
            a.az(SpreadsheetML2009Main.a6, SparklinesDeserializer.r);
            a.az(SpreadsheetML2009Main.a8, SparklinesDeserializer.s);
            a.az(SpreadsheetML2009Main.cr, SparklinesDeserializer.x);
            a.ay(SpreadsheetML2009Main.cr, SparklinesDeserializer.y);
            a.az(SpreadsheetML2009Main.cn, SparklinesDeserializer.t);
        }
        static v(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = new SparklinesDeserializer(b.bm);
            b.s.k(c);
        }
        static w(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = SparklinesDeserializer.a(b);
            if (c == null) {
                return;
            }
            c.j(c.d, b.bh._b7);
        }
        static u(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = SparklinesDeserializer.a(b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(ST_SparklineType_$type, null);
            let h = toNullable(Boolean_$type, null);
            let i = toNullable(ST_DispBlanksAs_$type, null);
            let j = toNullable(Boolean_$type, null);
            let k = toNullable(Boolean_$type, null);
            let l = toNullable(Boolean_$type, null);
            let m = toNullable(Boolean_$type, null);
            let n = toNullable(Boolean_$type, null);
            let o = toNullable(Boolean_$type, null);
            let p = toNullable(Boolean_$type, null);
            let q = toNullable(Boolean_$type, null);
            let r = toNullable(ST_SparklineAxisMinMax_$type, null);
            let s = toNullable(ST_SparklineAxisMinMax_$type, null);
            let t = toNullable(Boolean_$type, null);
            let u = CT_SparklineGroup.bh(a, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
            d = u.p1;
            e = u.p2;
            f = u.p3;
            g = u.p4;
            h = u.p5;
            i = u.p6;
            j = u.p7;
            k = u.p8;
            l = u.p9;
            m = u.p10;
            n = u.p11;
            o = u.p12;
            p = u.p13;
            q = u.p14;
            r = u.p15;
            s = u.p16;
            t = u.p17;
            let v = ((() => {
                let $ret = new CT_SparklineGroup();
                $ret.ah = h;
                $ret.aj = i;
                $ret.al = q;
                $ret.an = p;
                $ret.ap = m;
                $ret.ar = k;
                $ret.at = n;
                $ret.av = f;
                $ret.ax = l;
                $ret.az = d;
                $ret.a1 = e;
                $ret.a3 = j;
                $ret.a5 = s;
                $ret.a7 = r;
                $ret.a9 = o;
                $ret.bb = t;
                $ret.bd = g;
                return $ret;
            })());
            c.i.add(v);
            b.s.k(v);
        }
        static m(a, b) {
            let c = typeCast(ObjectModelWorksheetPartManager.$, a);
            let d = SparklinesDeserializer.a(c);
            if (d == null) {
                return;
            }
            let e = SparklinesDeserializer.b(CT_SparklineGroup.$, c);
            if (e == null) {
                return;
            }
            let f = toNullable(Boolean_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(ST_UnsignedIntHex.$, null);
            let i = toNullable(Number_$type, null);
            let j = NaN;
            let k = SpreadsheetMLMain.ut(a, b, f, g, h, i, j);
            f = k.p2;
            g = k.p3;
            h = k.p4;
            i = k.p5;
            j = k.p6;
            let l = ((() => {
                let $ret = new ColorInfo();
                $ret.i = f;
                $ret.j = g;
                $ret.k = h;
                $ret.l = i;
                $ret.g = j;
                return $ret;
            })());
            switch (b) {
                case SpreadsheetML2009Main.a0:
                    e.a = l;
                    break;
                case SpreadsheetML2009Main.a1:
                    e.c = l;
                    break;
                case SpreadsheetML2009Main.a3:
                    e.g = l;
                    break;
                case SpreadsheetML2009Main.a2:
                    e.e = l;
                    break;
                case SpreadsheetML2009Main.a4:
                    e.i = l;
                    break;
                case SpreadsheetML2009Main.a5:
                    e.k = l;
                    break;
                case SpreadsheetML2009Main.a6:
                    e.m = l;
                    break;
                case SpreadsheetML2009Main.a8:
                    e.o = l;
                    break;
                default: break;
            }
        }
        static k(a) {
            SparklinesDeserializer.m(a, SpreadsheetML2009Main.a0);
        }
        static l(a) {
            SparklinesDeserializer.m(a, SpreadsheetML2009Main.a1);
        }
        static n(a) {
            SparklinesDeserializer.m(a, SpreadsheetML2009Main.a2);
        }
        static o(a) {
            SparklinesDeserializer.m(a, SpreadsheetML2009Main.a3);
        }
        static p(a) {
            SparklinesDeserializer.m(a, SpreadsheetML2009Main.a4);
        }
        static q(a) {
            SparklinesDeserializer.m(a, SpreadsheetML2009Main.a5);
        }
        static r(a) {
            SparklinesDeserializer.m(a, SpreadsheetML2009Main.a6);
        }
        static s(a) {
            SparklinesDeserializer.m(a, SpreadsheetML2009Main.a8);
        }
        static x(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = SparklinesDeserializer.a(b);
            if (c == null) {
                return;
            }
            let d = SparklinesDeserializer.b(CT_SparklineGroup.$, b);
            if (d == null) {
                return;
            }
            d.ae = new List$1(CT_Sparkline.$, 0);
            c.c |= 1;
        }
        static y(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = SparklinesDeserializer.a(b);
            if (c == null) {
                return;
            }
            c.c &= ~1;
        }
        static t(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = SparklinesDeserializer.a(b);
            if (c == null) {
                return;
            }
            let d = SparklinesDeserializer.b(CT_SparklineGroup.$, b);
            if (d == null) {
                return;
            }
            let e = new CT_Sparkline();
            b.s.k(e);
            d.ae.add(e);
        }
        static f(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = SparklinesDeserializer.a(b, false);
            if (c == null) {
                return false;
            }
            let d = null;
            let e = Excel2006Main.at(a, d);
            d = e.p1;
            if ((c.c & 1) == 1) {
                let f = SparklinesDeserializer.b(CT_Sparkline.$, b);
                if (f == null) {
                    return false;
                }
                f.c = d;
            }
            else {
                let g = SparklinesDeserializer.b(CT_SparklineGroup.$, b);
                if (g == null) {
                    return false;
                }
                g.bf = d;
            }
            return true;
        }
        static g(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = SparklinesDeserializer.a(b, false);
            if (c == null) {
                return false;
            }
            let d = SparklinesDeserializer.b(CT_Sparkline.$, b);
            if (d == null) {
                return false;
            }
            let e = null;
            let f = Excel2006Main.au(a, e);
            e = f.p1;
            let g = XmlNamespaceDefinitionBase.g(String_$type, e, (h) => h);
            d.a = ((() => {
                let $ret = new CT_Sqref();
                $ret.i = g;
                return $ret;
            })());
            return true;
        }
        j(a, b) {
            a._sparklineGroups$i.clear();
            let c = null;
            let d = new List$1(SparklineGroup.$, 2, this.i.count);
            for (let e of fromEnum(this.i)) {
                c = new SparklineGroup(0, a);
                SparklineExtensions.h(c, e, a, b);
                d.add(c);
            }
            a._sparklineGroups$i._ab(d);
        }
    }
    SparklinesDeserializer.$t = /*@__PURE__*/ markType(SparklinesDeserializer, 'SparklinesDeserializer');
    return SparklinesDeserializer;
})();
/**
 * @hidden
 */
export let SparklineExtensions = /*@__PURE__*/ (() => {
    class SparklineExtensions extends Base {
        static h(a, b, c, d) {
            if (b.a != null) {
                a.colorAxis = b.a.c(d);
            }
            if (b.c != null) {
                a.colorFirstPoint = b.c.c(d);
            }
            if (b.e != null) {
                a.colorHighPoint = b.e.c(d);
            }
            if (b.g != null) {
                a.colorLastPoint = b.g.c(d);
            }
            if (b.i != null) {
                a.colorLowPoint = b.i.c(d);
            }
            if (b.k != null) {
                a.colorMarkers = b.k.c(d);
            }
            if (b.m != null) {
                a.colorNegativePoints = b.m.c(d);
            }
            if (b.o != null) {
                a.colorSeries = b.o.c(d);
            }
            a.dateAxis = b.ah.hasValue ? b.ah.value : false;
            a.displayBlanksAs = b.aj.hasValue ? SparklineExtensions.e(b.aj.value) : SparklineExtensions.e(2);
            a.displayHidden = b.al.hasValue ? b.al.value : false;
            a.displayXAxis = b.an.hasValue ? b.an.value : false;
            a.firstPoint = b.ap.hasValue ? b.ap.value : false;
            a.highPoint = b.ar.hasValue ? b.ar.value : false;
            a.lastPoint = b.at.hasValue ? b.at.value : false;
            a.lineWeight = b.av.hasValue ? b.av.value : 0.75;
            a.lowPoint = b.ax.hasValue ? b.ax.value : false;
            a.markers = b.a3.hasValue ? b.a3.value : false;
            a.negativePoints = b.a9.hasValue ? b.a9.value : false;
            a.rightToLeft = b.bb.hasValue ? b.bb.value : false;
            a.type = b.bd.hasValue ? SparklineExtensions.f(b.bd.value) : SparklineExtensions.f(0);
            a.verticalAxisMaxType = b.a5.hasValue ? SparklineExtensions.d(b.a5.value) : SparklineExtensions.d(0);
            a.verticalAxisMinType = b.a7.hasValue ? SparklineExtensions.d(b.a7.value) : SparklineExtensions.d(0);
            if (b.az.hasValue) {
                a.verticalAxisMax = b.az.value;
            }
            if (b.a1.hasValue) {
                a.verticalAxisMin = b.a1.value;
            }
            if (stringIsNullOrEmpty(b.bf) == false) {
                a._setDateRange$i(b.bf);
            }
            a._sparklines$i.clear();
            for (let e of fromEnum(b.ae)) {
                let f = new Sparkline();
                SparklineExtensions.g(f, e, c, d._bi);
                a._sparklines$i._s(a._sparklines$i.count, f, f.location, f.dataRegion, f.dataRegionName, false);
            }
        }
        static g(a, b, c, d) {
            let e = null;
            let f = null;
            let g = null;
            for (let h of fromEnum(b.a.i)) {
                if (stringIsNullOrEmpty(h) == false) {
                    f = h;
                    g = c._getRegion1(f, c._c);
                    break;
                }
            }
            e = b.c;
            let i = Worksheet._fh;
            try {
                let j = ExcelUtils.t(e, c, g.firstRow, g._v, 1, "dataRange", "LE_InvalidRegion", i, d);
                let k = null;
                if (i.count > 0 && i._inner[0].c != null) {
                    k = i._inner[0].c._cw(i._inner[0].d);
                }
                else if (i.count == 1 && i._inner[0].e != null && stringContains(i._inner[0].e, "[")) {
                    e = i._inner[0].e + i._inner[0].d._ah(false, false, c._o, 1);
                }
                a._p(g, k, e);
            }
            finally {
                i.clear();
            }
        }
        static e(a) {
            let b = 0;
            switch (a) {
                case 1:
                    b = 1;
                    break;
                case 0:
                    b = 0;
                    break;
                case 2:
                    b = 2;
                    break;
            }
            return b;
        }
        static c(a) {
            let b = 0;
            switch (a) {
                case 1:
                    b = 1;
                    break;
                case 0:
                    b = 0;
                    break;
                case 2:
                    b = 2;
                    break;
                default: break;
            }
            return b;
        }
        static f(a) {
            let b = 0;
            switch (a) {
                case 1:
                    b = 1;
                    break;
                case 0:
                    b = 0;
                    break;
                case 2:
                    b = 2;
                    break;
            }
            return b;
        }
        static b(a) {
            let b = 0;
            switch (a) {
                case 1:
                    b = 1;
                    break;
                case 0:
                    b = 0;
                    break;
                case 2:
                    b = 2;
                    break;
                default: break;
            }
            return b;
        }
        static d(a) {
            let b = 0;
            switch (a) {
                case 2:
                    b = 2;
                    break;
                case 1:
                    b = 1;
                    break;
                case 0:
                    b = 0;
                    break;
            }
            return b;
        }
        static a(a) {
            let b = 0;
            switch (a) {
                case 2:
                    b = 2;
                    break;
                case 1:
                    b = 1;
                    break;
                case 0:
                    b = 0;
                    break;
                default: break;
            }
            return b;
        }
    }
    SparklineExtensions.$t = /*@__PURE__*/ markType(SparklineExtensions, 'SparklineExtensions');
    return SparklineExtensions;
})();
/**
 * @hidden
 */
export let ObjectModelWorksheetPartManager = /*@__PURE__*/ (() => {
    class ObjectModelWorksheetPartManager extends WorksheetPartManager {
        constructor() {
            super();
            this.bt = null;
            this.bv = 0;
            this.bk = 0;
            this.bu = null;
            this.bs = null;
            this.br = null;
            this.bl = null;
            this.bw = -1;
            this.bo = false;
            this.bn = false;
            this.bf = null;
            this.az(SpreadsheetMLMain.c6, ObjectModelWorksheetPartManager.b7);
            this.ay(SpreadsheetMLMain.c6, ObjectModelWorksheetPartManager.b8);
            this.az(SpreadsheetMLMain.dr, ObjectModelWorksheetPartManager.ce);
            this.az(SpreadsheetMLMain.du, ObjectModelWorksheetPartManager.cf);
            this.az(SpreadsheetMLMain.er, ObjectModelWorksheetPartManager.cp);
            this.az(SpreadsheetMLMain.eq, ObjectModelWorksheetPartManager.cr);
            this.az(SpreadsheetMLMain.ev, ObjectModelTablePartManager.bf);
            this.az(SpreadsheetMLMain.ez, ObjectModelWorksheetPartManager.cw);
            this.az(SpreadsheetMLMain.e8, ObjectModelWorksheetPartManager.cx);
            this.ay(SpreadsheetMLMain.e8, ObjectModelWorksheetPartManager.cz);
            this.az(SpreadsheetMLMain.eg, ObjectModelWorksheetPartManager.ch);
            this.ay(SpreadsheetMLMain.eg, ObjectModelWorksheetPartManager.cj);
            this.az(SpreadsheetMLMain.ir, ObjectModelWorksheetPartManager.d0);
            this.az(SpreadsheetMLMain.eh, ObjectModelWorksheetPartManager.cl);
            this.az(SpreadsheetMLMain.eu, ObjectModelWorksheetPartManager.cs);
            this.az(SpreadsheetMLMain.ey, ObjectModelWorksheetPartManager.cu);
            this.az(SpreadsheetMLMain.jt, ObjectModelWorksheetPartManager.d6);
            this.az(SpreadsheetMLMain.fv, ObjectModelWorksheetPartManager.c9);
            this.az(SpreadsheetMLMain.ck, ObjectModelWorksheetPartManager.b6);
            this.az(SpreadsheetMLMain.dl, ObjectModelWorksheetPartManager.cc);
            this.az(SpreadsheetMLMain.hw, ObjectModelWorksheetPartManager.dt);
            this.az(SpreadsheetMLMain.mc, ObjectModelWorksheetPartManager.ev);
            this.az(SpreadsheetMLMain.iy, ObjectModelWorksheetPartManager.d1);
            this.az(SpreadsheetMLMain.li, ObjectModelWorksheetPartManager.el);
            this.az(SpreadsheetMLMain.m1, ObjectModelWorksheetPartManager.e2);
            this.az(SpreadsheetMLMain.ie, ObjectModelWorksheetPartManager.dv);
            this.az(SpreadsheetMLMain.dh, ObjectModelWorksheetPartManager.ca);
            this.az(SpreadsheetMLMain.ht, ObjectModelWorksheetPartManager.dr);
            this.az(SpreadsheetMLMain.dp, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.tv, (b) => b.c));
            this.az(SpreadsheetMLMain.gr, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.vf, (b) => b.e));
            this.az(SpreadsheetMLMain.hb, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.vn, (b) => b.k, toNullable(ST_ConformanceClass_$type, 1)));
            this.az(SpreadsheetMLMain.jh, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.wh, (b) => b.g));
            this.az(SpreadsheetMLMain.kd, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.wp, (b) => b.i, toNullable(ST_ConformanceClass_$type, 0)));
            this.az(SpreadsheetMLMain.n2, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.xk, (b) => b.k, toNullable(ST_ConformanceClass_$type, 0)));
            this.az(SpreadsheetMLMain.p9, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.ya, (b) => b.i, toNullable(ST_ConformanceClass_$type, 1)));
            this.az(SpreadsheetMLMain.rf, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.ys, (b) => b.m));
            this.az(SpreadsheetMLMain.r9, (a) => ObjectModelWorksheetPartManager.cd(a, SpreadsheetMLMain.yx, (b) => b.o));
            this.az(SpreadsheetML2009Main.bw, ObjectModelWorksheetPartManager.d9);
            this.az(SpreadsheetML2009Main.ba, ObjectModelWorksheetPartManager.c1);
            this.az(SpreadsheetML2009Main.a9, ObjectModelWorksheetPartManager.cy);
            this.az(SpreadsheetML2009Main.ax, ObjectModelWorksheetPartManager.ci);
            this.ay(SpreadsheetML2009Main.ax, ObjectModelWorksheetPartManager.ck);
            this.az(SpreadsheetML2009Main.bu, ObjectModelWorksheetPartManager.d7);
            this.az(SpreadsheetML2009Main.bd, ObjectModelWorksheetPartManager.da);
            this.az(SpreadsheetML2009Main.ay, ObjectModelWorksheetPartManager.cm);
            this.ay(SpreadsheetML2009Main.ay, ObjectModelWorksheetPartManager.co);
            this.az(SpreadsheetML2009Main.as, ObjectModelWorksheetPartManager.b9);
            this.az(SpreadsheetML2009Main.av, ObjectModelWorksheetPartManager.cb);
            this.az(SpreadsheetML2009Main.bn, ObjectModelWorksheetPartManager.ds);
            this.az(SpreadsheetML2009Main.b5, ObjectModelWorksheetPartManager.ek);
            this.az(SpreadsheetML2009Main.b4, ObjectModelWorksheetPartManager.ej);
            this.az(SpreadsheetML2009Main.aw, ObjectModelWorksheetPartManager.cg);
            this.az(SpreadsheetML2009Main.a7, ObjectModelWorksheetPartManager.cv);
            this.az(SpreadsheetML2009Main.az, ObjectModelWorksheetPartManager.ct);
            this.ay(SpreadsheetML2009Main.a9, ObjectModelWorksheetPartManager.c0);
            this.az(SpreadsheetML2009Main.bj, ObjectModelWorksheetPartManager.dj);
            this.ay(SpreadsheetML2009Main.bj, ObjectModelWorksheetPartManager.dk);
            this.az(SpreadsheetMLMain.fd, ObjectModelWorksheetPartManager.c2);
            this.az(SpreadsheetMLMain.fe, ObjectModelWorksheetPartManager.c3);
            this.az(SpreadsheetMLMain.ff, ObjectModelWorksheetPartManager.c4);
            this.az(SpreadsheetMLMain.fk, ObjectModelTablePartManager.bg);
            this.az(SpreadsheetMLMain.fl, ObjectModelTablePartManager.bh);
            this.ay(SpreadsheetMLMain.fl, ObjectModelTablePartManager.bi);
            this.az(SpreadsheetMLMain.fq, ObjectModelWorksheetPartManager.c7);
            this.az(SpreadsheetMLMain.fr, ObjectModelWorksheetPartManager.c8);
            this.az(SpreadsheetMLMain.f2, ObjectModelTablePartManager.bj);
            this.az(SpreadsheetMLMain.fy, ObjectModelWorksheetPartManager.dc);
            this.ay(SpreadsheetMLMain.fy, ObjectModelWorksheetPartManager.de);
            this.az(SpreadsheetMLMain.fz, ObjectModelWorksheetPartManager.df);
            this.az(SpreadsheetMLMain.gw, ObjectModelWorksheetPartManager.dg);
            this.az(SpreadsheetMLMain.g2, ObjectModelWorksheetPartManager.di);
            this.az(SpreadsheetMLMain.g9, ObjectModelTablePartManager.bk);
            this.az(SpreadsheetMLMain.hk, ObjectModelWorksheetPartManager.dl);
            this.az(SpreadsheetMLMain.hq, ObjectModelWorksheetPartManager.dm);
            this.az(SpreadsheetMLMain.hr, ObjectModelWorksheetPartManager.dn);
            this.az(SpreadsheetMLMain.hz, ObjectModelTablePartManager.bn);
            this.az(SpreadsheetMLMain.h1, ObjectModelTablePartManager.bl);
            this.ay(SpreadsheetMLMain.h1, ObjectModelWorksheetPartManager.du);
            this.az(SpreadsheetMLMain.h4, ObjectModelTablePartManager.bo);
            this.az(SpreadsheetMLMain.is, ObjectModelWorksheetPartManager.dx);
            this.az(SpreadsheetMLMain.it, ObjectModelWorksheetPartManager.dz);
            this.az(SpreadsheetMLMain.i5, ObjectModelWorksheetPartManager.d2);
            this.az(SpreadsheetMLMain.jn, ObjectModelWorksheetPartManager.d4);
            this.az(SpreadsheetMLMain.jo, ObjectModelWorksheetPartManager.d5);
            this.az(SpreadsheetMLMain.jr, ObjectModelTablePartManager.bp);
            this.az(SpreadsheetMLMain.b8, ObjectModelWorksheetPartManager.ea);
            this.ay(SpreadsheetMLMain.b8, ObjectModelWorksheetPartManager.eb);
            this.az(SpreadsheetMLMain.kf, ObjectModelWorksheetPartManager.ed);
            this.az(SpreadsheetMLMain.kg, ObjectModelWorksheetPartManager.ef);
            this.az(SpreadsheetMLMain.k5, ObjectModelWorksheetPartManager.eh);
            this.az(SpreadsheetMLMain.k6, ObjectModelWorksheetPartManager.ei);
            this.az(SpreadsheetMLMain.lm, ObjectModelWorksheetPartManager.em);
            this.az(SpreadsheetMLMain.ln, ObjectModelWorksheetPartManager.en);
            this.az(SpreadsheetMLMain.l0, ObjectModelWorksheetPartManager.ep);
            this.az(SpreadsheetMLMain.l2, ObjectModelWorksheetPartManager.eq);
            this.az(SpreadsheetMLMain.l4, ObjectModelWorksheetPartManager.er);
            this.az(SpreadsheetMLMain.l5, ObjectModelWorksheetPartManager.et);
            this.az(SpreadsheetMLMain.l6, ObjectModelWorksheetPartManager.eu);
            this.az(SpreadsheetMLMain.mi, ObjectModelWorksheetPartManager.ex);
            this.az(SpreadsheetMLMain.mt, ObjectModelWorksheetPartManager.ey);
            this.az(SpreadsheetMLMain.mz, ObjectModelWorksheetPartManager.e0);
            this.az(SpreadsheetMLMain.m0, ObjectModelWorksheetPartManager.e1);
            this.az(SpreadsheetMLMain.n5, ObjectModelWorksheetPartManager.e5);
            this.az(SpreadsheetMLMain.n6, ObjectModelWorksheetPartManager.e3);
            this.az(SpreadsheetMLMain.oi, ObjectModelWorksheetPartManager.e6);
            this.az(SpreadsheetMLMain.op, ObjectModelWorksheetPartManager.e7);
            this.az(SpreadsheetMLMain.oq, ObjectModelWorksheetPartManager.e8);
            this.ay(SpreadsheetMLMain.oq, ObjectModelWorksheetPartManager.fa);
            this.az(SpreadsheetMLMain.os, ObjectModelWorksheetPartManager.fc);
            this.az(SpreadsheetMLMain.ow, ObjectModelWorksheetPartManager.fe);
            this.az(SpreadsheetMLMain.ox, ObjectModelWorksheetPartManager.fg);
            this.az(SpreadsheetMLMain.oz, ObjectModelWorksheetPartManager.fi);
            this.az(SpreadsheetMLMain.o0, ObjectModelWorksheetPartManager.fj);
            this.az(SpreadsheetMLMain.p2, ObjectModelWorksheetPartManager.fn);
            this.az(SpreadsheetMLMain.p4, ObjectModelWorksheetPartManager.fo);
            this.az(SpreadsheetMLMain.qq, ObjectModelWorksheetPartManager.fr);
            this.az(SpreadsheetMLMain.qw, ObjectModelWorksheetPartManager.ft);
            this.az(SpreadsheetMLMain.qx, ObjectModelWorksheetPartManager.fu);
            this.az(SpreadsheetMLMain.rh, ObjectModelTablePartManager.bx);
            this.az(SpreadsheetMLMain.r4, ObjectModelWorksheetPartManager.fv);
            this.az(SpreadsheetMLMain.sv, ObjectModelWorksheetPartManager.fx);
            this.ay(SpreadsheetMLMain.sv, ObjectModelWorksheetPartManager.fz);
            this.az(SpreadsheetML2009Main.be, ObjectModelWorksheetPartManager.dc);
            this.ay(SpreadsheetML2009Main.be, ObjectModelWorksheetPartManager.de);
            this.az(SpreadsheetML2009Main.bf, ObjectModelWorksheetPartManager.df);
            this.az(SpreadsheetML2009Main.bo, ObjectModelWorksheetPartManager.dw);
            this.az(SpreadsheetML2009Main.bp, ObjectModelWorksheetPartManager.dy);
            this.az(SpreadsheetML2009Main.bs, ObjectModelTablePartManager.bp);
            this.az(SpreadsheetML2009Main.cg, ObjectModelWorksheetPartManager.fl);
            this.az(SpreadsheetML2009Main.ck, ObjectModelWorksheetPartManager.fm);
            this.az(SpreadsheetML2009Main.cm, ObjectModelWorksheetPartManager.fn);
            this.az(Excel2006Main.as, ObjectModelWorksheetPartManager.fp);
            this.az(Excel2006Main.aq, ObjectModelWorksheetPartManager.dp);
            SparklinesDeserializer.z(this);
            ObjectModelCommonPartHelpers.al(this);
            ObjectModelCommonPartHelpers.am(this);
        }
        z(a) {
            if (a == SpreadsheetMLMain.e8) {
                return 2;
            }
            return super.z(a);
        }
        t() {
            this.bs = new Dictionary$2(Number_$type, Formula.$, 0);
            this.br = new Dictionary$2(String_$type, Formula.$, 0);
            let a = this.bh;
            let b = a._d.uri.toString();
            this.bl = a._b7._ap(b);
            if (this.bl == null) {
                return null;
            }
            return super.t();
        }
        aw(a) {
            switch (a.b.b.e(this.d)) {
                case SpreadsheetMLMain.e8: break;
                default:
                    super.aw(a);
                    break;
            }
        }
        u(a) {
            let b = typeCast(Worksheet.$, a);
            if (b == null) {
                return null;
            }
            this.bl = b;
            this.bk = this.bl.workbook.currentFormat;
            let c = this.bh;
            let d = c._b9;
            let e = d._w(b);
            this.f0(b, e);
            let f = false;
            for (let g = 0; g < b._shapes$i.count; g++) {
                let h = d._z(b._shapes$i.item(g));
                if (h != null) {
                    f = true;
                    break;
                }
            }
            let i = new SheetRelationships();
            let j = b._je == null ? null : ExcelUtils.x(b._je, b._dh);
            return WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(Async.g(j != null, () => WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), String_$type, c._b0(j, b._dh), (k) => e.a = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), k).d)), () => Async.g(f, () => WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), String_$type, c._j(ObjectModelDrawingPartManager.bg, b), (k) => i.a = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), k).d))), () => Async.g(e.j.count != 0, () => c._j(ObjectModelCommentsPartManager.a9, b))), () => Async.g(this.bu.count != 0, () => WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), String_$type, c._j(ObjectModelVmlDrawingPartManager.bb, this.bu), (k) => i.c = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), k).d))), () => Async.g(b._g3 != null, () => WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), String_$type, c._j(ObjectModelVmlDrawingPartManager.bb, b._g3), (k) => i.b = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), k).d))), () => Async.c(0, b._tables$i.count, 1, (k) => c._j(ObjectModelTablePartManager.ba, b._tables$i._item(k)))), () => Async.d(PivotTableInfo.$, b._ey(), (k) => c._j(ObjectModelPivotTablePartManager.ba, k))), () => this.bd(d, i));
        }
        ai(a) {
            switch (a) {
                case SpreadsheetMLMain.hk:
                    {
                        let b;
                        let c = SpreadsheetMLMain.vq(this, b);
                        b = c.p1;
                        switch (b) {
                            case "{CCE6A557-97BC-4b89-ADB6-D9C93CAAB3DF}":
                            case "{A8765BA9-456A-4dab-B4F3-ACF838C121DE}":
                            case "{78C0D931-6437-407d-A8EE-F0AAD7539E65}":
                            case "{B025F937-C7B1-47D3-B67F-A62EFF666E3E}":
                            case "{05C60535-1F16-4fd2-B633-F4F36F0B64E0}": return true;
                            default: return false;
                        }
                    }
            }
            return super.ai(a);
        }
        y(a, b) {
            switch (a.b.e(this.bh)) {
                case SpreadsheetMLMain.e8:
                    {
                        let c = typeCast(List$1.$.specialize(Base.$), a.n);
                        if (c != null) {
                            let d = new StringBuilder(0);
                            for (let e of fromEnum(c)) {
                                let f = null;
                                let g = typeCast(WorksheetCell.$, e);
                                if (WorksheetCell.l_op_Inequality(g, null)) {
                                    if (g.worksheet != null) {
                                        f = g._toString2(1, false, true, true);
                                    }
                                }
                                else {
                                    let h = e;
                                    if (h.worksheet != null) {
                                        f = h._toString2(1, false, true, true);
                                    }
                                }
                                if (f == null) {
                                    continue;
                                }
                                if (d.c != 0) {
                                    d.h(' ');
                                }
                                d.l(f);
                            }
                            if (d.c == 0) {
                                return 2;
                            }
                            for (let i = 0; i < a.j.count; i++) {
                                let j = a.j._inner[i];
                                if (j.a.f == "sqref") {
                                    a.j._inner[i] = new AttributeValue(2, j.a, d.toString());
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case SpreadsheetMLMain.eg:
                    {
                        let k = typeCast(WorksheetCellFormatData.$, a.n);
                        if (k != null) {
                            let l = this.bh._b9._bc(k);
                            for (let m = 0; m < a.j.count; m++) {
                                let n = a.j._inner[m];
                                if (n.a.f == "dxfId") {
                                    a.j._inner[m] = new AttributeValue(2, n.a, l.toString());
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case SpreadsheetMLMain.eh:
                    {
                        let o = typeCast(Tuple$2.$.specialize(SingleTargetFormula.$, String_$type), a.n);
                        if (o != null) {
                            let p = this.bh._b9;
                            let q = p._cv(o.c);
                            for (let r = 0; r < a.j.count; r++) {
                                let s = a.j._inner[r];
                                if (s.a.f == "val") {
                                    a.j._inner[r] = new AttributeValue(2, s.a, q);
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case SpreadsheetMLMain.ir:
                    {
                        let t = typeCast(Tuple$2.$.specialize(SingleTargetFormula.$, String_$type), a.n);
                        if (t != null) {
                            let u = this.bh._b9;
                            a.p = u._cv(t.c);
                        }
                    }
                    break;
                default: break;
            }
            return 0;
        }
        b5(a, b) {
            let c = b.aw;
            if (c != null) {
                let d = false;
                let e = "visibility:";
                let f = "hidden";
                let g = c.indexOf(e);
                if (g >= 0) {
                    let h = g + e.length;
                    if (stringCompare3(c, h, f, 0, f.length) == 0) {
                        d = true;
                    }
                }
                a.visible = (d == false);
            }
            let i = (b.aj.getValueOrDefault() == false);
            let j = (b.ad.getValueOrDefault() == false);
            if (i == true) {
                a.positioningMode = 0;
            }
            else if (j == true) {
                a.positioningMode = 2;
            }
            else {
                a.positioningMode = 3;
            }
            let k = b.b[0];
            let l = b.b[1];
            let m = b.b[2];
            let n = b.b[3];
            let o = b.b[4];
            let p = b.b[5];
            let q = b.b[6];
            let r = b.b[7];
            a.topLeftCornerCell = this.bl._rows$i.item(m)._cells$i.item(k);
            a.bottomRightCornerCell = this.bl._rows$i.item(q)._cells$i.item(o);
            let s = this.bl._fp(k, true);
            let t = this.bl._fs(m, true);
            a._topLeftCornerPosition$i = ExcelUtils.g8((s == 0 ? 0 : (100 * l) / s), (t == 0 ? 0 : (100 * n) / t));
            let u = this.bl._fp(o, true);
            let v = this.bl._fs(q, true);
            a._bottomRightCornerPosition$i = ExcelUtils.g8((u == 0 ? 0 : (100 * p) / u), (v == 0 ? 0 : (100 * r) / v));
            let w = ObjectModelWorksheetPartManager.by(b);
            if (nullableNotEquals(w, null)) {
                a._cn = w.value;
            }
            if (stringIsNullOrEmpty(b.ao) == false) {
                try {
                    a._aa = this.bl._getCell(b.ao);
                }
                catch (x) {
                }
            }
        }
        static b1(a) {
            if (a == null) {
                return null;
            }
            let b = stringReplace(a, "\r\n", "_x000a_");
            b = stringReplace(b, "\n", "_x000a_");
            return b;
        }
        static b2(a) {
            if (a == null) {
                return null;
            }
            return Regex.h(a, "_x000a_", "\n", 1);
        }
        b4(a) {
            return CellAddress.v(a, true, this.bk, a, false, 1);
        }
        static by(a) {
            let b = ObjectModelWorksheetPartManager.bz(a.au);
            if (nullableNotEquals(b, null)) {
                return b;
            }
            b = ObjectModelWorksheetPartManager.bz(a.at);
            if (nullableNotEquals(b, null)) {
                return b;
            }
            return toNullable(Number_$type, null);
        }
        bp(a) {
            if (a == null) {
                return false;
            }
            let b = a._e;
            for (let c = 0; c < b.length; c++) {
                switch (b[c].f) {
                    case 123:
                    case 59:
                    case 91:
                    case 125:
                    case 61:
                    case 93:
                    case 121:
                    case 57:
                    case 89:
                    case 122:
                    case 58:
                    case 90:
                    case 124:
                    case 60:
                    case 92: return true;
                }
            }
            return false;
        }
        static b7(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c;
            let d = SpreadsheetMLMain.tp(a, c);
            c = d.p1;
            if (!stringIsNullOrEmpty(c)) {
                let e;
                let f;
                let g;
                let h;
                let i = b.bl;
                let j = i.workbook;
                let k = ExcelUtils.fx(c, j.currentFormat, 1, CultureInfo.invariantCulture, null, -1, e, f, g, h);
                e = k.p6;
                f = k.p7;
                g = k.p8;
                h = k.p9;
                let l = new WorksheetRegionAddress(1, e, g, f, h);
                b.bl.filterSettings._setRegion1(l._ah(false, false, i._o, 1), 1);
                b.bn = true;
            }
        }
        static b8(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            b.bn = false;
        }
        static ce(a) {
            let b = a.s.a(PrintOptions.$);
            if (b == null) {
                return;
            }
            let c = a.s.a(HorizontalPageBreakCollection.$);
            let d = a.s.a(VerticalPageBreakCollection.$);
            if (c == null && d == null) {
                return;
            }
            let e;
            let f;
            let g;
            let h;
            let i;
            let j = SpreadsheetMLMain.tw(a, e, f, g, h, i);
            e = j.p1;
            f = j.p2;
            g = j.p3;
            h = j.p4;
            i = j.p5;
            let k = ObjectModelWorksheetPartManager.bi(a)._by;
            let l = d != null;
            let m = toNullable(Number_$type, f);
            let n = toNullable(Number_$type, g);
            let o = l ? new VerticalPageBreak(e, m, n) : new HorizontalPageBreak(e, m, n);
            o._g = h;
            o._d = i;
            o.printArea = b._printAreas$i._e(o._k, o._q, o._o, l);
            if (l) {
                d._add$i(o);
            }
            else {
                c._add$i(o);
            }
        }
        static cf(a) {
            let b = a.s.a(WorksheetRow.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i = SpreadsheetMLMain.tz(a, c, d, e, f, g, h);
            c = i.p1;
            d = i.p2;
            e = i.p3;
            f = i.p4;
            g = i.p5;
            h = i.p6;
            let j = a;
            let k = ObjectModelWorksheetPartManager.bi(a);
            if (c != null) {
                let l;
                if (((() => { let m = ExcelUtils.bl(c, 2, CultureInfo.invariantCulture, j.bv, l); j.bv = m.p3; l = m.p4; return m.ret; })()) == false) {
                }
                else {
                    b._cells$i._u = j.bv;
                }
            }
            else {
                j.bv = ++b._cells$i._u;
            }
            let m;
            if (d < k._b7._be.count) {
                m = k._b7._be._inner[d].g;
            }
            else {
                m = k._by._ca._p;
            }
            b._d3(j.bv, m);
            a.s.k(KnownBoxes.as(e));
        }
        static cp(a) {
            let b = a.s.a(PrintOptions.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.ud(a, c, d);
            c = e.p1;
            d = e.p2;
            a.s.k(b._verticalPageBreaks$i);
        }
        static cr(a) {
            a.cq();
        }
        cq() {
            let a;
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k = SpreadsheetMLMain.ue(this, a, b, c, d, e, f, g, h, i, j);
            a = k.p1;
            b = k.p2;
            c = k.p3;
            d = k.p4;
            e = k.p5;
            f = k.p6;
            g = k.p7;
            h = k.p8;
            i = k.p9;
            j = k.p10;
            let l = ObjectModelWorksheetPartManager.bi(this);
            let m = l._by;
            let n = this.bl.defaultColumnWidth;
            if (nullableNotEquals(c, null)) {
                n = truncate(MathUtilities.f(c.value * 256));
                if (b == 16384 && this.bl.defaultColumnWidth == 0) {
                    this.bl.defaultColumnWidth = n;
                }
            }
            let o = false;
            if (g) {
                o = true;
            }
            else {
                if (n != this.bl.defaultColumnWidth) {
                    o = true;
                }
            }
            if (e) {
                o = true;
            }
            if (i != 0) {
                o = true;
            }
            let p = null;
            if (d < l._b7._be.count) {
                let q = l._b7._be._inner[d].g;
                if (q._ca(m._ca._p) == false) {
                    p = q;
                    o = true;
                }
            }
            else {
            }
            if (o == false) {
                return;
            }
            this.bl._hw((a - 1), (b - 1), n, e, i, p, g);
        }
        static cw(a) {
        }
        static c1(a) {
        }
        static cy(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            if (b.bf == null) {
                b.bf = new ConditionalFormatInfo(b.bl, b.bh._b7);
            }
            b.s.k(b.bf);
        }
        static cx(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c;
            let d;
            let e = SpreadsheetMLMain.un(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = b.bl;
            if (b.bf == null) {
                b.bf = new ConditionalFormatInfo(f, b.bh._b7);
            }
            else {
                b.bf.o();
            }
            let g = b.bf;
            g.f = d;
            ConditionalFormatInfo.n(g, c);
            b.s.k(b.bf);
        }
        static cz(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            b.s.h();
        }
        static c0(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (ConditionalFormatInfo.e(c) == false) {
                return;
            }
            for (let d of fromEnum(c.l)) {
                d.ap(c);
                d.r = c.f;
                c.k.add(d);
            }
            c.l.clear();
            c.o();
            b.s.h();
        }
        static ci(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (ConditionalFormatInfo.e(c) == false) {
                return;
            }
            let d = CfRuleInfo.b(c, a);
            c.b = d;
        }
        static ck(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (ConditionalFormatInfo.e(c) == false) {
                return;
            }
            let d = c.b;
            if (CfRuleInfo.l(d) == false) {
                return;
            }
            let e = null;
            if (stringIsNullOrEmpty(d.an) == false && ((() => { let f = c.h.tryGetValue(d.an, e); e = f.p1; return f.ret; })())) {
                e.aq(d);
                c.h.removeItem(d.an);
            }
            else {
                c.l.add(d);
            }
        }
        static ch(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (ConditionalFormatInfo.e(c) == false) {
                return;
            }
            let d = CfRuleInfo.a(a, c);
            c.k.add(d);
            c.b = d;
        }
        static cj(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (ConditionalFormatInfo.e(c) == false) {
                return;
            }
            if (stringIsNullOrEmpty(c.b.am) == false) {
                c.h.addItem(c.b.am, c.b);
            }
            c.b = null;
        }
        static cm(a) {
            let b = null;
            let c = ObjectModelWorksheetPartManager.bg(a, b);
            b = c.p1;
            if (b != null) {
                b.q = true;
            }
            ObjectModelWorksheetPartManager.cn(a, true);
        }
        static co(a) {
            let b = null;
            let c = ObjectModelWorksheetPartManager.bg(a, b);
            b = c.p1;
            if (b != null) {
                b.q = false;
            }
        }
        static cl(a) {
            ObjectModelWorksheetPartManager.cn(a, false);
        }
        static cn(a, b) {
            let c = typeCast(ObjectModelWorksheetPartManager.$, a);
            let d = c.bf;
            if (ConditionalFormatInfo.e(d) == false) {
                return;
            }
            let e = d.b;
            if (CfRuleInfo.l(e) == false) {
                return;
            }
            let f;
            let g;
            let h;
            if (b) {
                let i = SpreadsheetML2009Main.cw(a, f, g, h);
                f = i.p1;
                g = i.p2;
                h = i.p3;
            }
            else {
                let j = SpreadsheetMLMain.t6(a, f, g, h);
                f = j.p1;
                g = j.p2;
                h = j.p3;
            }
            let k = ((() => {
                let $ret = new CfvoWrapper();
                $ret.a = f;
                $ret.c = g;
                $ret.b = h;
                return $ret;
            })());
            e.ab.add(k);
        }
        static cu(a) {
        }
        static cs(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = ObjectModelWorksheetPartManager.be(a, SpreadsheetMLMain.eu);
            let d = a.s.a(ColorInfo.$);
            if (d != null) {
                d.m(c, b.bl.workbook);
                return;
            }
            let e = b.bf;
            if (e == null) {
                return;
            }
            let f = e.b;
            if (f == null) {
                return;
            }
            if (f.h != null) {
                let g = a.s.a(DxfInfo.$);
                g.d = c;
            }
            else {
                f.y.add(c);
            }
        }
        static be(a, b) {
            let c = toNullable(Boolean_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(ST_UnsignedIntHex.$, null);
            let f = toNullable(Number_$type, null);
            let g = 0;
            let h = false;
            switch (b) {
                case SpreadsheetMLMain.eu:
                case SpreadsheetML2009Main.az:
                case SpreadsheetML2009Main.as:
                case SpreadsheetML2009Main.av:
                case SpreadsheetML2009Main.bn:
                case SpreadsheetML2009Main.b4:
                case SpreadsheetML2009Main.b5:
                    h = true;
                    break;
                default: break;
            }
            if (h == false) {
                return null;
            }
            let i = SpreadsheetMLMain.ut(a, b, c, d, e, f, g);
            c = i.p2;
            d = i.p3;
            e = i.p4;
            f = i.p5;
            g = i.p6;
            let j = ((() => {
                let $ret = new ColorInfo();
                $ret.i = c;
                $ret.j = d;
                $ret.k = e;
                $ret.l = f;
                $ret.g = g;
                return $ret;
            })());
            return j;
        }
        static dq(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (c == null) {
                return;
            }
            let d = c.b;
            if (d == null) {
                return;
            }
            let e;
            let f = Excel2006Main.at(a, e);
            e = f.p1;
            if (e != null) {
                let g = d.q;
                if (g == false) {
                    d.z.add(e);
                    return;
                }
                if (d.ab.count < 1) {
                }
                else {
                    let h = d.ab._inner[d.ab.count - 1];
                    h.c = e;
                }
            }
        }
        static d7(a) {
            ObjectModelWorksheetPartManager.d8(a, true);
        }
        static d6(a) {
            ObjectModelWorksheetPartManager.d8(a, false);
        }
        static d8(a, b) {
            let c = typeCast(ObjectModelWorksheetPartManager.$, a);
            let d = c.bf;
            if (ConditionalFormatInfo.e(d) == false) {
                return;
            }
            let e = d.b;
            if (CfRuleInfo.l(e) == false) {
                return;
            }
            let f = 3;
            let g;
            let h;
            let i;
            let j;
            let k = SpreadsheetMLMain.wl(a, f, g, h, i, j);
            f = k.p1;
            g = k.p2;
            h = k.p3;
            i = k.p4;
            j = k.p5;
            e.j.m = toNullable(ST_IconSetType_$type, f);
            e.j.j = toNullable(Boolean_$type, g);
            e.j.k = toNullable(Boolean_$type, h);
            e.j.l = i;
            e.j.i = toNullable(Boolean_$type, b ? j : false);
        }
        static cg(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = null;
            let d = ((() => { let e = ObjectModelWorksheetPartManager.bg(a, c); c = e.p1; return e.ret; })());
            if (d == null) {
                return;
            }
            let e;
            let f;
            let g = SpreadsheetML2009Main.cv(a, e, f);
            e = g.p1;
            f = g.p2;
            let h = ((() => {
                let $ret = new IconCriterionWrapper();
                $ret.a = e;
                $ret.b = f;
                return $ret;
            })());
            c.j.h.add(h);
        }
        static cv(a) {
        }
        static c9(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (ConditionalFormatInfo.e(c) == false) {
                return;
            }
            let d = c.b;
            if (CfRuleInfo.l(d) == false) {
                return;
            }
            let e;
            let f;
            let g;
            let h = SpreadsheetMLMain.u4(a, e, f, g);
            e = h.p1;
            f = h.p2;
            g = h.p3;
            d.g.w = f;
            d.g.v = e;
            d.g.z = g;
        }
        static da(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (ConditionalFormatInfo.e(c) == false) {
                return;
            }
            let d = c.b;
            if (CfRuleInfo.l(d) == false) {
                return;
            }
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n = SpreadsheetML2009Main.cy(a, e, f, g, h, i, j, k, l, m);
            e = n.p1;
            f = n.p2;
            g = n.p3;
            h = n.p4;
            i = n.p5;
            j = n.p6;
            k = n.p7;
            l = n.p8;
            m = n.p9;
            d.g.v = e;
            d.g.w = f;
            d.g.z = g;
            d.g.t = h;
            d.g.u = i;
            d.g.s = j;
            d.g.y = k;
            d.g.x = l;
            d.g.r = m;
        }
        static ds(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = null;
            let d = ((() => { let e = ObjectModelWorksheetPartManager.bg(a, c); c = e.p1; return e.ret; })());
            let e = ObjectModelWorksheetPartManager.be(a, SpreadsheetML2009Main.bn);
            c.g.c = e;
        }
        static cb(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = null;
            let d = ((() => { let e = ObjectModelWorksheetPartManager.bg(a, c); c = e.p1; return e.ret; })());
            let e = ObjectModelWorksheetPartManager.be(a, SpreadsheetML2009Main.av);
            c.g.b = e;
        }
        static b9(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = null;
            let d = ((() => { let e = ObjectModelWorksheetPartManager.bg(a, c); c = e.p1; return e.ret; })());
            let e = ObjectModelWorksheetPartManager.be(a, SpreadsheetML2009Main.as);
            c.g.a = e;
        }
        static ek(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = null;
            let d = ((() => { let e = ObjectModelWorksheetPartManager.bg(a, c); c = e.p1; return e.ret; })());
            let e = ObjectModelWorksheetPartManager.be(a, SpreadsheetML2009Main.b5);
            c.g.e = e;
        }
        static ej(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = null;
            let d = ((() => { let e = ObjectModelWorksheetPartManager.bg(a, c); c = e.p1; return e.ret; })());
            let e = ObjectModelWorksheetPartManager.be(a, SpreadsheetML2009Main.b4);
            c.g.d = e;
        }
        static ct(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = null;
            let d = ((() => { let e = ObjectModelWorksheetPartManager.bg(a, c); c = e.p1; return e.ret; })());
            let e = ObjectModelWorksheetPartManager.be(a, SpreadsheetML2009Main.az);
            c.y.add(e);
        }
        static d9(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (c != null) {
                let d = c.b;
                if (d != null) {
                    let e;
                    let f = SpreadsheetML2009Main.c3(a, e);
                    e = f.p1;
                    d.am = e;
                }
            }
        }
        static dj(a) {
            let b = new DxfInfo(0);
            a.s.k(b);
            let c = null;
            let d = ObjectModelWorksheetPartManager.bg(a, c);
            c = d.p1;
            if (c != null) {
                c.h = b;
            }
        }
        static dk(a) {
            let b = a.s.a(DxfInfo.$);
            if (b == null) {
                return;
            }
            let c = ObjectModelWorksheetPartManager.bi(a);
            let d = intSToU(c._b7._g.count);
            c._b7._g.add(b.h(c._b7));
            let e = null;
            let f = ((() => { let g = ObjectModelWorksheetPartManager.bg(a, e); e = g.p1; return g.ret; })());
            if (ConditionalFormatInfo.e(f) == false) {
                return;
            }
            e.ae = toNullable(Number_$type, d);
            e.h = null;
        }
        static b6(a) {
            ObjectModelStylesPartManager.ba(a);
        }
        static cc(a) {
            ObjectModelStylesPartManager.bc(a);
        }
        static cd(a, b, c, d = toNullable(ST_ConformanceClass_$type, null)) {
            ObjectModelStylesPartManager.be(a, b, c, d);
        }
        static dt(a) {
            ObjectModelStylesPartManager.bo(a);
        }
        static ev(a) {
            ObjectModelStylesPartManager.bx(a);
        }
        static d1(a) {
            ObjectModelStylesPartManager.bs(a);
        }
        static ca(a) {
            ObjectModelStylesPartManager.bb(a);
        }
        static dr(a) {
            ObjectModelStylesPartManager.bn(a);
        }
        static el(a) {
            ObjectModelStylesPartManager.bv(a);
        }
        static e2(a) {
            ObjectModelStylesPartManager.by(a);
        }
        static dv(a) {
            ObjectModelStylesPartManager.bq(a);
        }
        static d0(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (ConditionalFormatInfo.e(c) == false) {
                return;
            }
            let d = c.b;
            if (CfRuleInfo.l(d) == false) {
                return;
            }
            let e = null;
            let f = SpreadsheetMLMain.we(a, e);
            e = f.p1;
            d.z.add(e);
        }
        static c2(a) {
            let b;
            let c;
            let d;
            let e = SpreadsheetMLMain.uo(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            let f = ObjectModelWorksheetPartManager.bi(a);
            let g = typeCast(RoundTripControlData.$, f._au(c));
            if (g != null) {
                if (g.b) {
                    return;
                }
                g.b = true;
            }
            let h;
            if (((() => { let i = f._b7._a5.tryGetValue(b, h); h = i.p1; return i.ret; })()) == false) {
                h = new UnknownShape(1);
                h._cn = b;
                f._b7._a5.addItem(b, h);
            }
            h._ef = g;
            a.s.k(h);
        }
        static c3(a) {
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q = SpreadsheetMLMain.up(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
            b = q.p1;
            c = q.p2;
            d = q.p3;
            e = q.p4;
            f = q.p5;
            g = q.p6;
            h = q.p7;
            i = q.p8;
            j = q.p9;
            k = q.p10;
            l = q.p11;
            m = q.p12;
            n = q.p13;
            o = q.p14;
            p = q.p15;
        }
        static c4(a) {
        }
        static c5(a, b, c, d, e) {
            let f = ObjectModelWorksheetPartManager.bi(a);
            let g = f._by;
            let h = WorkbookLoadManagerExcel2007._bs(c);
            c = h.p0;
            e(Formula._k(c, 1, d, g.currentFormat, CultureInfo.invariantCulture, f._b7._bi), b._toString1(b.worksheet._c, false));
        }
        static c7(a) {
            a.c6();
        }
        c6() {
            let a = new ST_Guid();
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u = SpreadsheetMLMain.u0(this, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
            a = u.p1;
            b = u.p2;
            c = u.p3;
            d = u.p4;
            e = u.p5;
            f = u.p6;
            g = u.p7;
            h = u.p8;
            i = u.p9;
            j = u.p10;
            k = u.p11;
            l = u.p12;
            m = u.p13;
            n = u.p14;
            o = u.p15;
            p = u.p16;
            q = u.p17;
            r = u.p18;
            s = u.p19;
            t = u.p20;
            let v = this.bh;
            let w = v._by;
            let x = w._customViews$i;
            let y = x._item(ST_Guid.e(a));
            if (y == null) {
                return;
            }
            let z = y.getPrintOptions(this.bl, true);
            if (z != null) {
                this.s.k(z);
            }
            let aa = y.getDisplayOptions(this.bl, true);
            if (aa == null) {
                return;
            }
            this.s.k(aa);
            aa.magnificationInCurrentView = b;
            if (c != 64) {
                aa._a2 = false;
            }
            aa._a8 = c;
            aa.showFormulasInCells = e;
            aa.showGridlines = f;
            aa.showRowAndColumnHeaders = g;
            aa.showOutlineSymbols = h;
            aa.showZeroValues = i;
            aa.visibility = XlsxUtilities.af(p);
            aa.view = XlsxUtilities.ae(r);
            aa.showRulerInPageLayoutView = s;
            if (t != null) {
                let ab;
                let ac;
                if (((() => { let ad = ExcelUtils.bl(t, 2, CultureInfo.invariantCulture, ab, ac); ab = ad.p3; ac = ad.p4; return ad.ret; })()) == false) {
                    return;
                }
                let ad = aa.unfrozenPaneSettings;
                ad.firstRowInTopPane = ac;
                ad.firstColumnInLeftPane = ab;
            }
        }
        static c8(a) {
        }
        static dc(a) {
            a.db();
        }
        db() {
            let a = new ObjectModelWorksheetPartManager_DVInfo();
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            if (this.ab.k.e(this.d) == SpreadsheetML2009Main.be) {
                let n = SpreadsheetML2009Main.cz(this, b, c, d, e, f, g, h, i, j, k, l, m);
                b = n.p1;
                c = n.p2;
                d = n.p3;
                e = n.p4;
                f = n.p5;
                g = n.p6;
                h = n.p7;
                i = n.p8;
                j = n.p9;
                k = n.p10;
                l = n.p11;
                m = n.p12;
            }
            else {
                let o = SpreadsheetMLMain.u6(this, a.e, b, c, d, e, f, g, h, i, j, k, l, m);
                a.e = o.p1;
                b = o.p2;
                c = o.p3;
                d = o.p4;
                e = o.p5;
                f = o.p6;
                g = o.p7;
                h = o.p8;
                i = o.p9;
                j = o.p10;
                k = o.p11;
                l = o.p12;
                m = o.p13;
            }
            let p;
            switch (b) {
                case 0:
                    p = new AnyValueDataValidationRule();
                    break;
                case 3:
                    let q = new ListDataValidationRule();
                    q.showDropdown = (g == false);
                    p = q;
                    break;
                case 7:
                    p = new CustomDataValidationRule();
                    break;
                case 4:
                case 2:
                case 6:
                case 5:
                case 1:
                    switch (e) {
                        case 0:
                        case 1:
                            p = new TwoConstraintDataValidationRule((XlsxUtilities.t(e)), (XlsxUtilities.u(b)));
                            break;
                        case 2:
                        case 3:
                        case 6:
                        case 4:
                        case 7:
                        case 5:
                            p = new OneConstraintDataValidationRule((XlsxUtilities.t(e)), (XlsxUtilities.u(b)));
                            break;
                        default: return;
                    }
                    break;
                default: return;
            }
            k = ObjectModelWorksheetPartManager.b2(k);
            m = ObjectModelWorksheetPartManager.b2(m);
            p._r = f;
            p.errorStyle = XlsxUtilities.d(c);
            p.imeMode = XlsxUtilities.e(d);
            p.showInputMessage = h;
            p.showErrorMessageForInvalidValue = i;
            p.inputMessageTitle = l;
            p.inputMessageDescription = m;
            p.errorMessageTitle = j;
            p.errorMessageDescription = k;
            a.a = p;
            this.s.k(a);
        }
        static de(a) {
            a.dd();
        }
        dd() {
            let a = this.s.a(ObjectModelWorksheetPartManager_DVInfo.$);
            if (a == null || a.e == null || a.a == null) {
                return;
            }
            let b = new WorksheetReferenceCollection(this.bl);
            b._add4(a.e, 1);
            this.bl._dataValidationRules$i._al(a.a, b);
            let c;
            if (b._t.count == 1 && a.e.indexOf(' ') < 0) {
                c = b._d;
            }
            else {
                c = this.bl._getCell1("A1", 1);
            }
            if (a.c != null) {
                ObjectModelWorksheetPartManager.c5(this, c, a.c, a.a._k, runOn(a.a, a.a._at));
            }
            if (a.d != null) {
                ObjectModelWorksheetPartManager.c5(this, c, a.d, a.a._k, runOn(a.a, a.a._au));
            }
        }
        static df(a) {
            let b;
            let c;
            let d;
            let e;
            if (a.ab.k.e(a.d) == SpreadsheetML2009Main.bf) {
                let f = SpreadsheetML2009Main.c0(a, b, c, d, e);
                b = f.p1;
                c = f.p2;
                d = f.p3;
                e = f.p4;
            }
            else {
                let g = SpreadsheetMLMain.u7(a, b, c, d, e);
                b = g.p1;
                c = g.p2;
                d = g.p3;
                e = g.p4;
            }
        }
        static dg(a) {
            let b;
            let c = SpreadsheetMLMain.vg(a, b);
            b = c.p1;
        }
        static di(a) {
            a.dh();
        }
        dh() {
            let a;
            let b = SpreadsheetMLMain.vh(this, a);
            a = b.p1;
            let c = this.bh;
            let d = c._b7;
            let e = PackageUtilities.ak(c._g(a)).originalString;
            let f;
            if (((() => { let g = d._a6.tryGetValue(e, f); f = g.p1; return g.ret; })())) {
                for (let g of fromEnum(f)) {
                    d._bp(this.bl, g);
                }
            }
            else {
            }
        }
        static dl(a) {
            let b;
            let c = SpreadsheetMLMain.vq(a, b);
            b = c.p1;
        }
        static dm(a) {
        }
        static dn(a) {
            let b = a;
            let c = a.s.a(WorksheetRow.$);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q = SpreadsheetMLMain.vy(a, d, e, f, g, h, i, j, k, l, m, n, o, p);
            d = q.p1;
            e = q.p2;
            f = q.p3;
            g = q.p4;
            h = q.p5;
            i = q.p6;
            j = q.p7;
            k = q.p8;
            l = q.p9;
            m = q.p10;
            n = q.p11;
            o = q.p12;
            p = q.p13;
            let r = c.worksheet;
            let s = ObjectModelWorksheetPartManager.bi(a);
            let t = s._by;
            let u = null;
            let v = null;
            if (k != null) {
                let w;
                let x;
                if (((() => { let y = ExcelUtils.bl(k, 2, CultureInfo.invariantCulture, w, x); w = y.p3; x = y.p4; return y.ret; })())) {
                    u = r._rows$i.item(x)._cells$i.item(w);
                }
                else {
                }
            }
            if (l != null) {
                let y;
                let z;
                if (((() => { let aa = ExcelUtils.bl(l, 2, CultureInfo.invariantCulture, y, z); y = aa.p3; z = aa.p4; return aa.ret; })())) {
                    v = r._rows$i.item(z)._cells$i.item(y);
                }
                else {
                }
            }
            let aa = f == null ? null : ExcelUtils.ah(f, r, CultureInfo.invariantCulture);
            let ab = WorkbookLoadManagerExcel2007._bs(p);
            p = ab.p0;
            let ac;
            switch (d) {
                case 3:
                    if (p != null) {
                        let ad;
                        ac = ((() => { let ae = FormulaParser.e(p, 1, 2, t.currentFormat, CultureInfo.invariantCulture, s._b7._bi, c.index, b.bv, ad); ad = ae.p8; return ae.ret; })());
                        if (ad != null) {
                            throw ad;
                        }
                        ac = Formula._k(p, 1, 0, t.currentFormat, CultureInfo.invariantCulture, s._b7._bi);
                        ac = ac._x(c.index, b.bv, t.currentFormat);
                        if (m) {
                            ac._an = m;
                        }
                        r._h2(ac, r._getRegion1(f, 1));
                        ac._bp(c, b.bv);
                        if (nullableNotEquals(n, null)) {
                            b.bs.addItem(n.value, c._ar(b.bv));
                        }
                        else {
                        }
                    }
                    else {
                        if (nullableNotEquals(n, null) && ((() => { let ae = b.bs.tryGetValue(n.value, ac); ac = ae.p1; return ae.ret; })())) {
                            ac._bq(ac._ab, ac._bb, c, b.bv);
                        }
                        else {
                        }
                    }
                    break;
                case 0:
                    if (p != null) {
                        let ae = 0;
                        let af = FormulaParser.l(s._by, r, c, b.bv, CultureInfo.invariantCulture, 1, ae);
                        if (s._b7._au && ((() => { let ag = b.br.tryGetValue(p, ac); ac = ag.p1; return ag.ret; })())) {
                            ac = ac._g();
                        }
                        else {
                            ac = Formula._o(p, ae, af, s._b7._bi);
                            b.br.item(p, ac);
                        }
                        if (m) {
                            ac._an = m;
                        }
                        ac._bp(c, b.bv);
                    }
                    break;
                case 1:
                    if (p != null) {
                        ac = Formula._k(p, 1, 1, s._by.currentFormat, CultureInfo.invariantCulture, s._b7._bi);
                        if (m) {
                            ac._an = m;
                        }
                        if (aa != null) {
                            ac._applyTo3(aa);
                        }
                        else {
                        }
                    }
                    break;
                case 2:
                    if (aa != null) {
                        aa = r._cx(aa.firstRow - 1, aa.firstColumn - 1, aa.lastRow, aa.lastColumn);
                        let ag = null, ah = null;
                        if (g) {
                            ag = u;
                            ah = v;
                        }
                        else if (h) {
                            ag = u;
                        }
                        else {
                            ah = u;
                        }
                        r._dataTables$i._add1(aa, ah, ag);
                    }
                    else {
                    }
                    break;
            }
        }
        static dp(a) {
            if (SparklinesDeserializer.f(a)) {
                return;
            }
            let b = a;
            let c = b != null ? b.s.a(ConditionalFormatInfo.$) : null;
            if (c != null) {
                ObjectModelWorksheetPartManager.dq(a);
                return;
            }
            let d = a.s.a(ObjectModelWorksheetPartManager_DVInfo.$);
            if (d == null) {
                return;
            }
            let e;
            let f = Excel2006Main.at(a, e);
            e = f.p1;
            if (d.b) {
                d.c = e;
            }
            else {
                d.d = e;
            }
        }
        static du(a) {
            let b = a.s.a(ObjectModelTablePartManager_FilterColumnElementContext.$);
            let c = a.bl;
            if (b == null || c == null) {
                return;
            }
            else if (b.b == null) {
                return;
            }
            let d = new WorksheetColumnFilter(1, c, b.d);
            d._g(b.b);
            b.b._j(d);
            c.filterSettings._a3(d);
        }
        static dx(a) {
            let b = a.s.a(ObjectModelWorksheetPartManager_DVInfo.$);
            if (b == null) {
                return;
            }
            let c = SpreadsheetMLMain.wc(a, b.c);
            b.c = c.p1;
        }
        static dw(a) {
            let b = a.s.a(ObjectModelWorksheetPartManager_DVInfo.$);
            if (b == null) {
                return;
            }
            b.b = true;
        }
        static dz(a) {
            let b = a.s.a(ObjectModelWorksheetPartManager_DVInfo.$);
            if (b == null) {
                return;
            }
            let c = SpreadsheetMLMain.wd(a, b.d);
            b.d = c.p1;
        }
        static dy(a) {
            let b = a.s.a(ObjectModelWorksheetPartManager_DVInfo.$);
            if (b == null) {
                return;
            }
            b.b = false;
        }
        static d2(a) {
            let b = a.s.a(PrintOptionsBase.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = SpreadsheetMLMain.wg(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            b.alignHeadersAndFootersWithMargins = f;
            b.scaleHeadersAndFootersWithDocument = e;
        }
        static d4(a) {
            a.d3();
        }
        d3() {
            let a;
            let b;
            let c;
            let d;
            let e;
            let f = SpreadsheetMLMain.wi(this, a, b, c, d, e);
            a = f.p1;
            b = f.p2;
            c = f.p3;
            d = f.p4;
            e = f.p5;
            let g = this.bl._getRegion2(a, 1, null);
            if (e == null) {
                let h = g._k._c6(g._v);
                if (WorksheetCellBlock.s(h)) {
                    e = h.toString();
                }
            }
            let i = null;
            if (b != null) {
                let j = this.d._au(b);
                let k = typeCast(Uri.$, j);
                if (k != null) {
                    if (k.isAbsoluteUri && k.scheme.toLowerCase() != "file") {
                        try {
                            i = Uri.escapeUriString(k.toString());
                        }
                        catch (l) {
                            i = Uri.escapeUriString(k.originalString);
                        }
                    }
                    else if (k.isAbsoluteUri) {
                        i = k.localPath;
                    }
                    else {
                        try {
                            i = k.toString();
                        }
                        catch (m) {
                            i = k.originalString;
                        }
                    }
                }
                else if (typeof j === 'string') {
                    i = j;
                }
                else {
                }
            }
            let n = WorkbookLoadManager._v(this.bl.workbook, i, c);
            let o = new WorksheetHyperlink(g, n, e, d);
            o._t = c != null && typeof n === 'string' && c == n;
            this.bl._hyperlinks$i.add(o);
        }
        static d5(a) {
        }
        static ea(a) {
            a.s.k(new FormattedStringElement(0));
        }
        static eb(a) {
            let b = a.s.a(WorksheetRow.$);
            let c = a.s.a(FormattedStringElement.$);
            if (b == null || c == null) {
                return;
            }
            let d = a;
            if (c._u) {
                b.setCellValue(d.bv, c);
            }
            else {
                b.setCellValue(d.bv, c._y);
            }
        }
        static ed(a) {
            a.ec();
        }
        ec() {
            let a;
            let b = SpreadsheetMLMain.wq(this, a);
            a = b.p1;
            let c = this.bh;
            let d = c._d.getRelationship(a);
            if (d == null || d.targetMode != 0) {
                return;
            }
            let e = typeCast(List$1.$.specialize(LegacyShapeData.$), c._as(d));
            if (e == null) {
                return;
            }
            let f = PackageUtilities.ak(d).originalString;
            if (c._b7._a4.removeItem(f) == false) {
            }
            let g = null;
            for (let h of fromEnum(c._d.getRelationships())) {
                if (h.relationshipType != ObjectModelCommentsPartManager.a9.o(c._z)) {
                    continue;
                }
                g = typeCast(List$1.$.specialize(WorksheetCellCommentData.$), c._as(h));
                break;
            }
            if (g == null) {
                g = new List$1(WorksheetCellCommentData.$, 0);
            }
            let i = new Dictionary$2(WorksheetCellAddress.$, WorksheetCellCommentData.$, 0);
            for (let j of fromEnum(g)) {
                i.addItem(new WorksheetCellAddress(1, j.f, j.d), j);
            }
            for (let k of fromEnum(e)) {
                if (nullableNotEquals(k.ah, null) && nullableNotEquals(k.t, null)) {
                    let l = this.bl._rows$i.item(k.ah.value);
                    let m = k.t.value;
                    let n = new WorksheetCellAddress(1, l.index, m);
                    let o;
                    if (((() => { let p = i.tryGetValue(n, o); o = p.p1; return p.ret; })())) {
                        let p = o.b;
                        this.b5(p, k);
                        l._d2(m, p);
                        continue;
                    }
                }
                let q = ObjectModelWorksheetPartManager.by(k);
                if (nullableNotEquals(q, null)) {
                    let r;
                    let s = ((() => { let t = this.bl._da(q.value, r); r = t.p1; return t.ret; })());
                    let t = typeCast(UnknownShape.$, s);
                    if (t == null) {
                        if (s == null) {
                            t = new UnknownShape(1);
                            r = this.bl._shapes$i;
                        }
                        else {
                            t = new UnknownShape(2, s);
                            r.remove_1(s);
                        }
                    }
                    t._eg = k;
                    this.b5(t, k);
                    c._b7._a5.item(t._cn, t);
                    r._add3(t);
                }
            }
        }
        static ef(a) {
            a.ee();
        }
        ee() {
            let a;
            let b = SpreadsheetMLMain.wr(this, a);
            a = b.p1;
            let c = this.bh;
            let d = c._d.getRelationship(a);
            if (d == null || d.targetMode != 0) {
                return;
            }
            let e = typeCast(List$1.$.specialize(LegacyShapeData.$), c._as(d));
            if (e == null) {
                return;
            }
            let f = PackageUtilities.ak(d).originalString;
            let g;
            if (((() => { let h = c._b7._a4.tryGetValue(f, g); g = h.p1; return h.ret; })())) {
                this.bl._g3 = new LegacyDrawingHFInfo(g, e);
                c._b7._a4.removeItem(f);
            }
            else {
            }
        }
        static eh(a) {
            a.eg();
        }
        eg() {
            let a;
            let b = SpreadsheetMLMain.ws(this, a);
            a = b.p1;
            let c = ExcelUtils.ah(a, this.bl, CultureInfo.invariantCulture);
            if (c != null) {
                this.bl._mergedCellsRegions$i._add1(c.firstRow, c.firstColumn, c.lastRow, c.lastColumn);
            }
            else {
            }
        }
        static ei(a) {
            let b;
            let c = SpreadsheetMLMain.wt(a, b);
            b = c.p1;
        }
        static em(a) {
            let b = a.s.a(PrintOptionsBase.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.wx(a, c);
            c = d.p1;
            b.footer = c;
        }
        static en(a) {
            let b = a.s.a(PrintOptionsBase.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.wy(a, c);
            c = d.p1;
            b.header = c;
        }
        static ep(a) {
            a.eo();
        }
        eo() {
            let a;
            let b;
            let c;
            let d;
            let e = SpreadsheetMLMain.w3(this, a, b, c, d);
            a = e.p1;
            b = e.p2;
            c = e.p3;
            d = e.p4;
            this.bl._em = b;
            this.bl.displayOptions._showExpansionIndicatorBelowGroupedRows$i = XlsxUtilities.a8(b);
            this.bl.displayOptions._showExpansionIndicatorToRightOfGroupedColumns$i = XlsxUtilities.a8(c);
            this.bl.displayOptions.showOutlineSymbols = d;
        }
        static eq(a) {
            let b = a.s.a(PrintOptionsBase.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i = SpreadsheetMLMain.w4(a, c, d, e, f, g, h);
            c = i.p1;
            d = i.p2;
            e = i.p3;
            f = i.p4;
            g = i.p5;
            h = i.p6;
            b.leftMargin = c;
            b.rightMargin = d;
            b.topMargin = e;
            b.bottomMargin = f;
            b.headerMargin = g;
            b.footerMargin = h;
        }
        static er(a) {
            let b = a.s.a(PrintOptionsBase.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v = SpreadsheetMLMain.w5(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u);
            c = v.p1;
            d = v.p2;
            e = v.p3;
            f = v.p4;
            g = v.p5;
            h = v.p6;
            i = v.p7;
            j = v.p8;
            k = v.p9;
            l = v.p10;
            m = v.p11;
            n = v.p12;
            o = v.p13;
            p = v.p14;
            q = v.p15;
            r = v.p16;
            s = v.p17;
            t = v.p18;
            u = v.p19;
            let w = c;
            if (EnumUtil.isDefined(PaperSize_$type, enumGetBox(PaperSize_$type, w)) == false) {
            }
            else {
                b.paperSize = w;
            }
            if (typeCast(PrintOptions.$, b) !== null) {
                let x = b;
                x._dq(f, false);
                x.maxPagesHorizontally = h;
                x.maxPagesVertically = i;
                x.pageOrder = XlsxUtilities.p(j);
            }
            b.startPageNumber = g;
            b.orientation = XlsxUtilities.o(k);
            b.printInBlackAndWhite = m;
            b.draftQuality = n;
            b.printNotes = XlsxUtilities.s(o);
            b.pageNumbering = p ? 1 : 0;
            b.printErrors = XlsxUtilities.r(q);
            b.resolution = Math.max(0, Math.min(r, 65535));
            b.verticalResolution = Math.max(0, Math.min(s, 65535));
            b.numberOfCopies = t;
            if (!stringIsNullOrEmpty(u)) {
                let y = typeCast(BinaryData.$, a.d._au(u));
                b._c = y;
            }
        }
        static et(a) {
            a.es();
        }
        es() {
            let a;
            let b;
            let c = SpreadsheetMLMain.w6(this, a, b);
            a = c.p1;
            b = c.p2;
            if (b) {
                this.bl.printOptions.scalingType = 1;
            }
            else {
                this.bl.printOptions.scalingType = 0;
            }
        }
        static eu(a) {
            let b = a.s.a(DisplayOptions.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h = SpreadsheetMLMain.w7(a, c, d, e, f, g);
            c = h.p1;
            d = h.p2;
            e = h.p3;
            f = h.p4;
            g = h.p5;
            let i = -1;
            let j = -1;
            if (e != null) {
                if (((() => { let k = ExcelUtils.bl(e, 2, CultureInfo.invariantCulture, i, j); i = k.p3; j = k.p4; return k.ret; })()) == false) {
                }
            }
            b._z = XlsxUtilities.q(f);
            let t1 = g;
            L0: while (true) {
                switch (t1) {
                    case 0:
                        {
                            b.panesAreFrozen = false;
                            let k = b.unfrozenPaneSettings;
                            if (i > -1 && j > -1) {
                                k.firstColumnInRightPane = i;
                                k.firstRowInBottomPane = j;
                            }
                            k.leftPaneWidth = truncate(c);
                            k.topPaneHeight = truncate(d);
                        }
                        break;
                    case 2:
                        b.frozenPaneSettings._z = true;
                        t1 = 1;
                        continue L0;
                    case 1:
                        {
                            b.panesAreFrozen = true;
                            let l = b.frozenPaneSettings;
                            if (i > -1 && j > -1) {
                                l.firstColumnInRightPane = i;
                                l.firstRowInBottomPane = j;
                            }
                            l.frozenColumns = truncate(c);
                            l.frozenRows = truncate(d);
                        }
                        break;
                    default:
                        t1 = 1;
                        continue L0;
                }
                break;
            }
        }
        static ex(a) {
            a.ew();
        }
        ew() {
            let a;
            let b = SpreadsheetMLMain.w9(this, a);
            a = b.p1;
            let c = this.bh;
            let d = typeCast(ImageData.$, c._au(a));
            if (d != null) {
                let e = XlsxUtilities.v(d);
                this.bl._je = ExcelUtils.g6(e);
                this.bl._dh = e.d;
            }
            else {
            }
        }
        static ey(a) {
            let b = a.s.a(PrintOptions.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h = SpreadsheetMLMain.xc(a, c, d, e, f, g);
            c = h.p1;
            d = h.p2;
            e = h.p3;
            f = h.p4;
            g = h.p5;
            b.centerHorizontally = c;
            b.centerVertically = d;
            b.printRowAndColumnHeaders = e;
            b.printGridlines = f && g;
        }
        static e0(a) {
            a.ez();
        }
        ez() {
            let a;
            let b;
            let c;
            let d = null;
            if (SpreadsheetMLMain.b4(this)) {
                let e, f, g;
                let h;
                let i = SpreadsheetMLMain.xe(this, a, b, c, e, f, g, h);
                a = i.p1;
                b = i.p2;
                c = i.p3;
                e = i.p4;
                f = i.p5;
                g = i.p6;
                h = i.p7;
                if (f != null && g != null && nullableNotEquals(h, null)) {
                    d = ProtectionValidationInfo.b(e, Convert.fromBase64String(f), Convert.fromBase64String(g), h.value);
                }
            }
            else {
                let j;
                let k = SpreadsheetMLMain.xd(this, a, b, c, j);
                a = k.p1;
                b = k.p2;
                c = k.p3;
                j = k.p4;
                if (j.hasValue) {
                    d = ProtectionValidationInfo.c(j.value.e());
                }
            }
            let l = new WorksheetProtectedRange(c);
            let m = WorksheetReferenceCollection._r(this.bl, b, 1, this.bl._y);
            for (let n of fromEnum(m)) {
                l.ranges.add(n);
            }
            if (!stringIsNullOrEmpty(a)) {
                l._p(a);
            }
            l._c.b = d;
            this.bl.protection._allowedEditRanges$i.add(l);
        }
        static e1(a) {
        }
        static e5(a) {
            a.e4();
        }
        e4() {
            let a;
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m = SpreadsheetMLMain.xm(this, a, b, c, d, e, f, g, h, i, j, k, l, true);
            a = m.p1;
            b = m.p2;
            c = m.p3;
            d = m.p4;
            e = m.p5;
            f = m.p6;
            g = m.p7;
            h = m.p8;
            i = m.p9;
            j = m.p10;
            k = m.p11;
            l = m.p12;
            let n = this.bh;
            let o = null;
            let p = this.bl._rows$i;
            if (nullableNotEquals(a, null)) {
                o = p.item((a.value - 1));
            }
            else {
                let q = false;
                while (p._aj(++p._u) != null) {
                    if (q == false) {
                        q = true;
                    }
                }
                o = p.item(p._u);
            }
            if (d) {
                if (c < n._b7._be.count) {
                    o.cellFormat.setFormatting(n._b7._be._inner[c].g);
                }
                else {
                }
            }
            if (g && this.bw < 0) {
                this.bw = o.index;
            }
            if (nullableNotEquals(e, null)) {
                let r = truncate(MathUtilities.f(e.value * 20));
                if (g) {
                    o.height = r;
                }
                else {
                    o._cm = r;
                }
            }
            else if (this.bl._d4) {
                o._bz = g;
                if (this.bw >= 0) {
                    o._cm = this.bl._gp;
                }
            }
            o._b1 = k;
            o._b4 = j;
            o._l = f;
            o.outlineLevel = h;
            this.s.k(o);
        }
        static e3(a) {
            let b = a.s.a(PrintOptions.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.xl(a, c, d);
            c = e.p1;
            d = e.p2;
            a.s.k(b._horizontalPageBreaks$i);
        }
        static e6(a) {
            let b = a.s.a(DisplayOptions.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = SpreadsheetMLMain.xq(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = b._af;
            let i = b._ad;
            let j = i.workbook;
            let k = new WorksheetPaneSelection();
            k.a = XlsxUtilities.q(c);
            k.f = e;
            let l = Workbook._fa;
            let m;
            let n;
            if (d != null) {
                let o = ExcelUtils.bl(d, j.currentFormat, l, n, m);
                n = o.p3;
                m = o.p4;
            }
            else {
                m = n = 0;
                d = "A1";
            }
            k.b = new WorksheetCellAddress(1, m, n);
            let p;
            let q;
            if (f != null && f.count != 0) {
                for (let r of fromEnum(f)) {
                    let s = ExcelUtils.fx(r, j.currentFormat, 1, l, null, -1, m, n, p, q);
                    m = s.p6;
                    n = s.p7;
                    p = s.p8;
                    q = s.p9;
                    k.d.add(new WorksheetRegionAddress(1, m, p, n, q));
                }
            }
            else {
                k.d.add(new WorksheetRegionAddress(1, m, m, n, n));
            }
            h.b.add(k);
        }
        static e7(a) {
            let b;
            let c = SpreadsheetMLMain.xs(a, b);
            b = c.p1;
        }
        static e8(a) {
            a.ab.an();
        }
        static fa(a) {
            a.e9();
        }
        e9() {
            if (this.bl._d4) {
                if (this.bw >= 0) {
                    for (let a of fromEnum(this.bl._rows$i._m(0, this.bw))) {
                        if (!a._bz) {
                            a._cm = this.bl._gp;
                        }
                    }
                }
            }
        }
        static fc(a) {
            a.fb();
        }
        fb() {
            let a;
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j = SpreadsheetMLMain.xx(this, a, b, c, d, e, f, g, h, i);
            a = j.p1;
            b = j.p2;
            c = j.p3;
            d = j.p4;
            e = j.p5;
            f = j.p6;
            g = j.p7;
            h = j.p8;
            i = j.p9;
            if (nullableNotEquals(c, null)) {
                this.bl._d7 = true;
                this.bl._ek = true;
                this.bl.setDefaultColumnWidth(c.value, 0);
            }
            else if (b > 0) {
                this.bl._iq(b, 2, true, false);
            }
            if (d && a > 0) {
                this.bl.defaultRowHeight = truncate((a * 20));
            }
            this.bl._ds = g;
            this.bl._dt = f;
            this.bl._dv = e;
        }
        static fe(a) {
            a.fd();
        }
        fd() {
            let a;
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j = SpreadsheetMLMain.x0(this, a, b, c, d, e, f, g, h, i);
            a = j.p1;
            b = j.p2;
            c = j.p3;
            d = j.p4;
            e = j.p5;
            f = j.p6;
            g = j.p7;
            h = j.p8;
            i = j.p9;
            this.bl._ak = g;
        }
        static fg(a) {
            a.ff();
        }
        ff() {
            let a = null;
            let b, c, d, e, f, g, h, i, j, k, l, m, n, o, p;
            let q;
            if (SpreadsheetMLMain.b4(this)) {
                let r, s, t;
                let u;
                let v = SpreadsheetMLMain.x2(this, r, s, t, u, q, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
                r = v.p1;
                s = v.p2;
                t = v.p3;
                u = v.p4;
                q = v.p5;
                b = v.p6;
                c = v.p7;
                d = v.p8;
                e = v.p9;
                f = v.p10;
                g = v.p11;
                h = v.p12;
                i = v.p13;
                j = v.p14;
                k = v.p15;
                l = v.p16;
                m = v.p17;
                n = v.p18;
                o = v.p19;
                p = v.p20;
                if (s != null && t != null && nullableNotEquals(u, null)) {
                    a = ProtectionValidationInfo.b(r, Convert.fromBase64String(s), Convert.fromBase64String(t), u.value);
                }
            }
            else {
                let w;
                let x = SpreadsheetMLMain.x1(this, w, q, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
                w = x.p1;
                q = x.p2;
                b = x.p3;
                c = x.p4;
                d = x.p5;
                e = x.p6;
                f = x.p7;
                g = x.p8;
                h = x.p9;
                i = x.p10;
                j = x.p11;
                k = x.p12;
                l = x.p13;
                m = x.p14;
                n = x.p15;
                o = x.p16;
                p = x.p17;
                if (w.hasValue) {
                    a = ProtectionValidationInfo.c(w.value.e());
                }
            }
            let y = this.bl.protection;
            y.allowEditObjects = b == false;
            y.allowEditScenarios = c == false;
            y.allowFormattingCells = d == false;
            y.allowFormattingColumns = e == false;
            y.allowFormattingRows = f == false;
            y.allowInsertingColumns = g == false;
            y.allowInsertingRows = h == false;
            y.allowInsertingHyperlinks = i == false;
            y.allowDeletingColumns = j == false;
            y.allowDeletingRows = k == false;
            y.allowSorting = m == false;
            y.allowFiltering = n == false;
            y.allowUsingPivotTables = o == false;
            y._ag(l == false, p == false);
            y._c.b = a;
            y._c.j(q || b || c);
        }
        static fi(a) {
            a.fh();
        }
        fh() {
            let a;
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t = SpreadsheetMLMain.x4(this, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
            a = t.p1;
            b = t.p2;
            c = t.p3;
            d = t.p4;
            e = t.p5;
            f = t.p6;
            g = t.p7;
            h = t.p8;
            i = t.p9;
            j = t.p10;
            k = t.p11;
            l = t.p12;
            m = t.p13;
            n = t.p14;
            o = t.p15;
            p = t.p16;
            q = t.p17;
            r = t.p18;
            s = t.p19;
            let u = this.bl.displayOptions;
            this.s.k(u);
            if (this.bl._r) {
                return;
            }
            this.bl._r = true;
            if (o != 64) {
                u._a2 = false;
            }
            u._a8 = o;
            u.orderColumnsRightToLeft = g;
            u.showFormulasInCells = c;
            u.showGridlines = d;
            u.showOutlineSymbols = j;
            u.showRowAndColumnHeaders = e;
            u.showRulerInPageLayoutView = i;
            u.showWhitespaceInPageLayoutView = l;
            u.showZeroValues = f;
            this.bl._w = h;
            if (n != null) {
                let v;
                let w;
                if (((() => { let x = ExcelUtils.bl(n, 2, CultureInfo.invariantCulture, v, w); v = x.p3; w = x.p4; return x.ret; })()) == false) {
                }
                u.unfrozenPaneSettings.firstColumnInLeftPane = v;
                u.unfrozenPaneSettings.firstRowInTopPane = w;
            }
            u.view = XlsxUtilities.ae(m);
            let x = q;
            let y = ExcelUtils.fl(x);
            x = y.p0;
            u.magnificationInNormalView = x;
            let z = s;
            let aa = ExcelUtils.fl(z);
            z = aa.p0;
            u.magnificationInPageLayoutView = z;
            let ab = r;
            let ac = ExcelUtils.fl(ab);
            ab = ac.p0;
            u.magnificationInPageBreakView = ab;
            u._b3 = p;
        }
        static fj(a) {
        }
        static fl(a) {
            a.fk();
        }
        fk() {
            let a;
            let b = SpreadsheetML2009Main.c8(this, a);
            a = b.p1;
            let c = typeCast(BinaryData.$, this.bh._au(a));
            if (c != null) {
                this.bl._g7(c);
            }
        }
        static fm(a) {
        }
        static fn(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bl;
            let d = c.workbook;
            let e = b.bn ? false : c.sortSettings.sortType == 1;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m = SpreadsheetMLMain.x7(a, f, g, h, i, j, k, l);
            f = m.p1;
            g = m.p2;
            h = m.p3;
            i = m.p4;
            j = m.p5;
            k = m.p6;
            l = m.p7;
            if (stringIsNullOrEmpty(f)) {
                return;
            }
            let n = ObjectModelWorksheetPartManager.bi(a);
            let o;
            let p;
            let q;
            let r;
            let s = ExcelUtils.fx(f, n._by.currentFormat, 1, CultureInfo.invariantCulture, null, -1, o, p, q, r);
            o = s.p6;
            p = s.p7;
            q = s.p8;
            r = s.p9;
            if (e) {
            }
            else {
            }
            let t = g ? 1 : 0;
            let u;
            switch (h) {
                case 1:
                    u = FillSortCondition._k(n._b7, j, t);
                    break;
                case 2:
                    u = FontColorSortCondition._i(n._b7, j, t);
                    break;
                case 3:
                    u = new IconSortCondition(t == 0, k, l);
                    break;
                case 0:
                    if (i == null) {
                        u = new OrderedSortCondition(t);
                    }
                    else {
                        u = new CustomListSortCondition(t, ...i.split(','));
                    }
                    break;
                default: return;
            }
            if (u == null) {
                return;
            }
            if (b.bn) {
                if (c.filterSettings.region == null) {
                }
                else {
                    c.filterSettings.sortSettings._sortConditions$i._addItem$i(new RelativeIndex(p - c.filterSettings.region._v), u);
                }
            }
            else {
                if (c.sortSettings.region == null) {
                }
                else {
                    c.sortSettings._sortConditions$i._addItem$i(new RelativeIndex(e ? o - c.sortSettings.region.firstRow : p - c.sortSettings.region._v), u);
                }
            }
        }
        static fo(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c;
            let d;
            let e;
            let f;
            let g = SpreadsheetMLMain.x8(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            if (stringIsNullOrEmpty(c)) {
                return;
            }
            let h = b.bl;
            let i = h.workbook;
            if (b.bn) {
                h.filterSettings.sortSettings.caseSensitive = e;
                h.filterSettings.sortSettings._i = f;
            }
            else {
                h.sortSettings.sortType = d ? 1 : 0;
                h.sortSettings.caseSensitive = e;
                h.sortSettings._i = f;
                let j;
                let k;
                let l;
                let m;
                let n = ExcelUtils.fx(c, i.currentFormat, 1, CultureInfo.invariantCulture, null, -1, j, k, l, m);
                j = n.p6;
                k = n.p7;
                l = n.p8;
                m = n.p9;
                let o = new WorksheetRegionAddress(1, j, l, k, m);
                h.sortSettings._setRegion1(o._ah(false, false, i.currentFormat, 1), 1);
            }
        }
        static fp(a) {
            if (SparklinesDeserializer.g(a)) {
                return;
            }
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b != null ? b.s.a(ConditionalFormatInfo.$) : null;
            if (c != null) {
                let d = c.d;
                let e = null;
                let f = Excel2006Main.au(a, e);
                e = f.p1;
                let g = XmlNamespaceDefinitionBase.g(String_$type, e, (h) => h);
                ConditionalFormatInfo.n(c, g);
                return;
            }
            let h = a.s.a(ObjectModelWorksheetPartManager_DVInfo.$);
            if (h == null) {
                return;
            }
            let i = Excel2006Main.au(a, h.e);
            h.e = i.p1;
        }
        static fr(a) {
            a.fq();
        }
        fq() {
            this.bl.displayOptions.tabColorInfo = ObjectModelCommonPartHelpers.c(this, SpreadsheetMLMain.yf);
        }
        static ft(a) {
            a.fs();
        }
        fs() {
            let a;
            let b = SpreadsheetMLMain.yj(this, a);
            a = b.p1;
            let c = this.bh;
            let d = typeCast(WorksheetTable.$, c._au(a));
            if (d == null) {
                return;
            }
            this.bl._tables$i._t(d);
        }
        static fu(a) {
            let b;
            let c = SpreadsheetMLMain.yk(a, b);
            b = c.p1;
        }
        static fv(a) {
            let b = a.s.a(WorksheetRow.$);
            let c = a.s.a(Nullable$1.$.specialize(ST_CellType_$type));
            if (b == null || nullableEquals(c, null)) {
                return;
            }
            let d = a;
            let e = ObjectModelCommonPartHelpers.d(a, d.bv);
            let f = b._a1(d.bv);
            let g = f.aa(b, d.bv);
            if (typeCast(Formula.$, g) !== null || typeCast(WorksheetDataTable.$, g) !== null) {
                b._d0(d.bv, CalcUtilities.c(e));
            }
            else {
                let h;
                let i = f.ao(b, d.bv, e, h, false);
                h = i.p3;
                f = h || f;
            }
        }
        static fx(a) {
            a.fw();
        }
        fw() {
            this.bl._em = true;
            this.s.k(this.bl.printOptions);
        }
        static fz(a) {
            let b = typeCast(ObjectModelWorksheetPartManager.$, a);
            let c = b.bf;
            if (c != null) {
                c.m();
                b.bf = null;
            }
            a.fy();
        }
        fy() {
            this.bl._shapes$i._ao();
        }
        static bz(a) {
            if (a == null) {
                return toNullable(Number_$type, null);
            }
            if (stringStartsWith(a, "_x0000_s") == false) {
                return toNullable(Number_$type, null);
            }
            let b = a.substr(8);
            let c;
            if (((() => { let d = tryParseInt32_1(b, c); c = d.p1; return d.ret; })()) == false) {
                return toNullable(Number_$type, null);
            }
            return toNullable(Number_$type, intSToU(c));
        }
        f0(a, b) {
            this.bt = new List$1(UnknownShape.$, 0);
            this.bu = new List$1(WorksheetShape.$, 0);
            for (let c of fromEnum(b.j)) {
                this.bu.add(c);
            }
            ObjectModelWorksheetPartManager.f1(a._shapes$i, this.bt, this.bu);
        }
        static f1(a, b, c) {
            for (let d of fromEnum(a)) {
                let e = typeCast(WorksheetShapeGroupBase.$, d);
                if (e != null) {
                    ObjectModelWorksheetPartManager.f1(e._shapes$i, b, c);
                    continue;
                }
                let f = typeCast(UnknownShape.$, d);
                if (f != null && f._eg != null) {
                    c.add(f);
                    if (f._ef != null && f._ef.d == "application/vnd.ms-office.activeX+xml") {
                        b.add(f);
                    }
                }
            }
        }
        f2(a) {
            let b = this.bl.filterSettings.region;
            if (b == null || !b._h._n) {
                return;
            }
            SpreadsheetMLMain.za(this, b._toString2(1, false, true, true));
            for (let c = 0; c < b._ad; c++) {
                let d = this.bl.filterSettings.getFilter(c);
                if (d == null) {
                    continue;
                }
                SpreadsheetMLMain.abq(this, intSToU(c));
                ObjectModelTablePartManager.b6(this, this.bh, a, d);
                this.ad.k();
            }
            if (this.bl.filterSettings.sortSettings._sortConditions$i.count > 0) {
                this.g6(a, b, this.bl.filterSettings.sortSettings, true);
            }
            this.ad.k();
        }
        f3(a) {
            SpreadsheetMLMain.zh(this, intSToU(a._k), toNullable(Number_$type, a._q), toNullable(Number_$type, a._o), a._g, a._d);
            this.ad.k();
        }
        f4(a, b, c, d, e) {
            let f = e.d;
            let g = a._a5(b, e);
            let h;
            let i;
            if (f != null && f.l(e.h, e.f)) {
                h = true;
                i = a._a5(b, e, true);
                if (!this.bo && (i == null || getInstanceType(i) == ErrorValue.$)) {
                    this.bo = true;
                }
            }
            else {
                h = false;
                i = g;
            }
            let j;
            let k;
            let l = WorkbookSaveManagerExcel2007._c0(i, j, k);
            j = l.p1;
            k = l.p2;
            SpreadsheetMLMain.zk(this, this.b4(e.r) + d, a._a8(e.j), j);
            if (h) {
                this.gh(a, b, e.r, g);
            }
            if (k != null) {
                let m = false;
                if (j == 5 && k.length > 0 && (/\s/i.test(k.charAt(0)) || /\s/i.test(k.charAt(k.length - 1)))) {
                    m = true;
                }
                SpreadsheetMLMain.aej(this, k, m);
                this.ad.k();
                if (j == 4) {
                    let n = typeCast(StringElementIndex.$, i);
                    if (n != null) {
                        n.d();
                    }
                }
            }
            this.ad.k();
        }
        f5(a) {
            if (a._cr == false) {
                return;
            }
            SpreadsheetMLMain.zx(this, intSToU(a._verticalPageBreaks$i.count), intSToU(a._verticalPageBreaks$i._k()));
            ExcelUtils.fo(VerticalPageBreak.$, a._verticalPageBreaks$i, runOn(this, this.f3));
            this.ad.k();
        }
        f6(a, b) {
            let c = 0;
            if (b.v >= 0) {
                c = b.v / 256;
            }
            else {
                c = this.bl.defaultColumnWidth / 256;
            }
            SpreadsheetMLMain.zy(this, intSToU((b.q + 1)), intSToU((b.r + 1)), toNullable(Number_$type, c), b.b._cd ? 0 : a._a8(b.b), b.i, void 0, b.v >= 0 && (b.v != this.bl.defaultColumnWidth || b.j), void 0, b.m, a._ae(b));
            this.ad.k();
        }
        f7(a) {
            let b = this.bl._ff;
            if (b.count == 1 && b._inner[0].k) {
                return;
            }
            SpreadsheetMLMain.z3(this);
            b.q((c) => this.f6(a, c));
            this.ad.k();
        }
        f8(a) {
            if (a._ce != null) {
                let b = null;
                if (((() => { let c = a._ce.tryGetValue(this.bl, b); b = c.p1; return c.ret; })())) {
                    b.x(this, a, this.ad);
                }
            }
        }
        a7(a) {
            return WorkItemExtensions.e(Tuple$2.$.specialize(Uri.$, String_$type), this.bh._l(a._ef.d, a._ef.e, a._ef), (b) => {
                let c = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), b).d;
                SpreadsheetMLMain.z9(this, a._cn, c, a._eg.at);
                this.ad.k();
            });
        }
        a8() {
            let a = this.bh;
            if (this.bt.count == 0) {
                return null;
            }
            SpreadsheetMLMain.aab(this);
            return WorkItemExtensions.a(Async.d(UnknownShape.$, this.bt, runOn(this, this.a7)), () => this.ad.k());
        }
        f9(a, b, c, d) {
            let e;
            if (c._t.count == 1) {
                let f = c._d;
                if (WorksheetCell.l_op_Equality(f, null) || f.worksheet == null) {
                    e = a._b.cellReferenceMode == 0 ? "R1C1" : "A1";
                }
                else {
                    e = f._toString1(f.worksheet._c, false);
                }
            }
            else {
                e = a._b.cellReferenceMode == 0 ? "R1C1" : "A1";
            }
            let g = b(e);
            if (g == null) {
                return;
            }
            d(this, a._cv(g));
            this.ad.k();
        }
        ga(a) {
            let b = a.getDisplayOptions(this.bl, false);
            if (b == null) {
                return;
            }
            let c = a.getHiddenRows(this.bl, false);
            let d = a.getHiddenColumns(this.bl, false);
            let e = CellAddress.u(b.unfrozenPaneSettings.firstRowInTopPane, b.unfrozenPaneSettings.firstColumnInLeftPane);
            SpreadsheetMLMain.aal(this, ST_Guid.a(a._t), intSToU(b.magnificationInCurrentView), intSToU(b._a8), void 0, b.showFormulasInCells, b.showGridlines, b.showRowAndColumnHeaders, b.showOutlineSymbols, b.showZeroValues, void 0, void 0, void 0, void 0, c != null && c.count > 0, d != null && d.count > 0, XlsxUtilities.a3(b.visibility), void 0, XlsxUtilities.a4(b.view), b.showRulerInPageLayoutView, e);
            if (b._al() || b._am()) {
                this.gt(b);
            }
            this.gz(b);
            if (a.savePrintOptions) {
                let f = a.getPrintOptions(this.bl, false);
                if (f != null) {
                    this.gy(f);
                    this.f5(f);
                    ObjectModelWorksheetPartManager.gq(this, f);
                    this.gv(f);
                    ObjectModelWorksheetPartManager.gr(this, f);
                    ObjectModelWorksheetPartManager.gi(this, f);
                }
            }
            this.ad.k();
        }
        gb() {
            let a = this.bh._by;
            if (a._cq == false) {
                return;
            }
            if (Enumerable.d(CustomView.$, a._customViews$i, (b) => b.getDisplayOptions(this.bl, false) != null) == false) {
                return;
            }
            SpreadsheetMLMain.aam(this);
            ExcelUtils.fo(CustomView.$, a._customViews$i, runOn(this, this.ga));
            this.ad.k();
        }
        gc(a, b, c) {
            let d = b.key;
            let e = b.value;
            let f = false;
            let g = typeCast(ListDataValidationRule.$, d);
            if (g != null) {
                f = (g.showDropdown == false);
            }
            let h = e._toString1(1);
            if (c) {
                (((i, j, k, l, m, n, o, p, q, r, s, t, u) => SpreadsheetML2009Main.dh(i, j, k, l, m, o, n, p, q, r, s, t, u))(this, XlsxUtilities.au(d._m), XlsxUtilities.ar(d.errorStyle), XlsxUtilities.as(d.imeMode), XlsxUtilities.at(d._l), f, d._r, d.showInputMessage, d.showErrorMessageForInvalidValue, d.errorMessageTitle, ObjectModelWorksheetPartManager.b1(d.errorMessageDescription), d.inputMessageTitle, ObjectModelWorksheetPartManager.b1(d.inputMessageDescription)));
                if (d._n(null) != null) {
                    SpreadsheetML2009Main.dj(this);
                    this.f9(a, runOn(d, d._n), e, Excel2006Main.av);
                    this.ad.k();
                }
                if (d._o(null) != null) {
                    SpreadsheetML2009Main.dk(this);
                    this.f9(a, runOn(d, d._o), e, Excel2006Main.av);
                    this.ad.k();
                }
                Excel2006Main.aw(this, h);
                this.ad.k();
                this.ad.k();
            }
            else {
                SpreadsheetMLMain.aar(this, h, XlsxUtilities.au(d._m), XlsxUtilities.ar(d.errorStyle), XlsxUtilities.as(d.imeMode), XlsxUtilities.at(d._l), d._r, f, d.showInputMessage, d.showErrorMessageForInvalidValue, d.errorMessageTitle, ObjectModelWorksheetPartManager.b1(d.errorMessageDescription), d.inputMessageTitle, ObjectModelWorksheetPartManager.b1(d.inputMessageDescription));
                this.f9(a, runOn(d, d._n), e, SpreadsheetMLMain.abx);
                this.f9(a, runOn(d, d._o), e, SpreadsheetMLMain.aby);
                this.ad.k();
            }
        }
        gd(v, w) {
            if (w == null || w.count == 0) {
                return;
            }
            SpreadsheetMLMain.aas(this, void 0, toNullable(Number_$type, null), toNullable(Number_$type, null), toNullable(Number_$type, intSToU(w.count)));
            w.q((x) => this.gc(v, x, false));
            this.ad.k();
        }
        ge(v, w) {
            let x = this.bl._cx(w.p, w.n, Math.max(0, w.q - 1), Math.max(0, w.o - 1));
            if (x == null) {
                return;
            }
            let y = x._u ? x._k._c7(x._v, 1, false, true, true) : x._toString2(1, false, true, true);
            SpreadsheetMLMain.aa1(this, y);
            this.ad.k();
        }
        static gf(v, w) {
            if (w == null) {
                return;
            }
            SpreadsheetMLMain.aa2(v, w);
            v.ad.k();
        }
        gg(v, w) {
            if (w == null || w.count == 0) {
                return;
            }
            SpreadsheetMLMain.abb(this, "{CCE6A557-97BC-4b89-ADB6-D9C93CAAB3DF}");
            this.ad.l(SpreadsheetML2009Main.ao);
            SpreadsheetML2009Main.di(this, void 0, toNullable(Number_$type, null), toNullable(Number_$type, null), toNullable(Number_$type, intSToU(w.count)));
            this.ad.l(Excel2006Main.ao);
            w.q((x) => this.gc(v, x, true));
            this.ad.k();
            this.ad.k();
        }
        a9() {
            if (this.bl._eb == false) {
                return null;
            }
            SpreadsheetMLMain.abb(this, "{A8765BA9-456A-4dab-B4F3-ACF838C121DE}");
            this.ad.l(SpreadsheetML2009Main.ao);
            SpreadsheetML2009Main.ds(this);
            return WorkItemExtensions.a(Async.d(BinaryData.$, this.bl._ez(), runOn(this, this.bc)), () => {
                this.ad.k();
                this.ad.k();
            });
        }
        ba(v, w) {
            let x = null;
            let y = null;
            if (v._ce != null) {
                let z = v._ce.tryGetValue(this.bl, x);
                x = z.p1;
            }
            if (v._cj != null) {
                let aa = v._cj.tryGetValue(this.bl, y);
                y = aa.p1;
            }
            let ab = this.bl._eb || (x != null && x.n) || y != null;
            let ac = w != null && w.count != 0;
            if (ab == false && ac == false) {
                return null;
            }
            SpreadsheetMLMain.abh(this);
            if (x != null) {
                x.y(this, v, this.ad);
            }
            if (y != null) {
                y.b(this, v, this.ad);
            }
            this.gg(v, w);
            return WorkItemExtensions.a(this.a9(), () => this.ad.k());
        }
        gh(v, w, x, y) {
            let z = typeCast(SingleTargetFormula.$, y);
            if (z == null || z._ck == false) {
                return;
            }
            let aa = null;
            let ab = null;
            let ac = 0;
            let ad = false;
            let ae = false;
            let af = null;
            let ag = null;
            let ah = toNullable(Number_$type, null);
            if (z._am) {
                let ai = z._c0;
                ac = 2;
                ab = ai._h._toString2(1, false, true, true);
                let aj = ai.columnInputCell;
                let ak = ai.rowInputCell;
                let al = WorksheetCell.l_op_Inequality(aj, null) && WorksheetCell.l_op_Inequality(ak, null);
                ad = al;
                ae = WorksheetCell.l_op_Inequality(ak, null);
                af = (ak || aj)._toString2(1, false, true, true);
                if (al) {
                    ag = aj._toString2(1, false, true, true);
                }
            }
            else if (z._ak) {
                ac = 1;
                let am = z._c0;
                ab = am.cellRange._toString2(1, false, true, true);
                aa = v._cv(am);
            }
            else {
                aa = v._cv(z);
                let t1 = z._s;
                L0: while (true) {
                    switch (t1) {
                        case 3:
                        case 0:
                            ac = 0;
                            break;
                        case 2:
                            ac = 3;
                            let an;
                            let ao;
                            ah = toNullable(Number_$type, ((() => { let ap = v._cx(w.worksheet, z, an, ao); an = ap.p2; ao = ap.p3; return ap.ret; })()));
                            if (ao != null) {
                                ab = ao._toString2(1, false, true, true);
                            }
                            if (an == false) {
                                aa = null;
                            }
                            break;
                        case 4:
                            ac = 0;
                            break;
                        default:
                            t1 = 0;
                            continue L0;
                    }
                    break;
                }
            }
            let ap = w._as(x)._be();
            SpreadsheetMLMain.abj(this, aa, ac, void 0, ab, ad, ae, void 0, void 0, af, ag, ap, ah);
            this.ad.k();
        }
        static gi(v, w) {
            let x = stringIsNullOrEmpty(w.header) == false;
            let y = stringIsNullOrEmpty(w.footer) == false;
            if (x == false && y == false && w.alignHeadersAndFootersWithMargins == true && w.scaleHeadersAndFootersWithDocument == true) {
                return;
            }
            SpreadsheetMLMain.ab1(v, void 0, void 0, w.scaleHeadersAndFootersWithDocument, w.alignHeadersAndFootersWithMargins);
            if (x) {
                SpreadsheetMLMain.ack(v, w.header);
                v.ad.k();
            }
            if (y) {
                SpreadsheetMLMain.acj(v, w.footer);
                v.ad.k();
            }
            v.ad.k();
        }
        gj(v) {
            let w;
            let x;
            let y;
            let z = WorkbookSaveManager._b7(v, w, x, y);
            w = z.p1;
            x = z.p2;
            y = z.p3;
            let aa = null;
            if (w != null) {
                aa = this.d._ay(w, this.bh._a4());
            }
            let ab = WorksheetCell.l_op_Inequality(v.sourceCell, null) ? v.sourceCell._toString2(1, false, true, true) : v.sourceRegion._toString2(1, false, true, true);
            let ac = v.displayText != null ? v.displayText : v.targetAddress;
            if (Base.equalsStatic(ac, v.sourceRegion._k._c6(v.sourceRegion._v))) {
                ac = null;
            }
            SpreadsheetMLMain.ab3(this, ab, aa, x, v.toolTip, v.displayText);
            this.ad.k();
        }
        gk() {
            if (this.bl._d8 == false) {
                return;
            }
            SpreadsheetMLMain.ab4(this);
            ExcelUtils.fo(WorksheetHyperlink.$, this.bl._hyperlinks$i, runOn(this, this.gj));
            this.ad.k();
        }
        static gl(v, w) {
            if (w == null) {
                return;
            }
            if (v.d._z == 0) {
                SpreadsheetMLMain.acc(v, w);
                v.ad.k();
            }
            else {
                v.ad.g([new AlternateContentChoice(0, VmlNamespace.ao, () => {
                        SpreadsheetMLMain.acc(v, w);
                        v.ad.k();
                    })]);
            }
        }
        static gm(v, w) {
            if (w == null) {
                return;
            }
            if (v.d._z == 0) {
                SpreadsheetMLMain.acd(v, w);
                v.ad.k();
            }
            else {
                v.ad.g([new AlternateContentChoice(0, VmlNamespace.ao, () => {
                        SpreadsheetMLMain.acd(v, w);
                        v.ad.k();
                    })]);
            }
        }
        gn(v) {
            SpreadsheetMLMain.ace(this, v._toString2(1, false, true, true));
            this.ad.k();
        }
        go() {
            let v = ObjectModelWorksheetPartManager.bi(this)._b9._ax(this.bl);
            let w = Enumerable.aj(WorksheetMergedCellsRegion.$, v);
            if (w == 0) {
                return;
            }
            SpreadsheetMLMain.acf(this, toNullable(Number_$type, intSToU(w)));
            ExcelUtils.fo(WorksheetMergedCellsRegion.$, v, runOn(this, this.gn));
            this.ad.k();
        }
        gp() {
            SpreadsheetMLMain.acp(this, void 0, this.bl.displayOptions._an, this.bl.displayOptions._ao, this.bl.displayOptions.showOutlineSymbols);
            this.ad.k();
        }
        static gq(v, w) {
            SpreadsheetMLMain.acq(v, w.leftMargin, w.rightMargin, w.topMargin, w.bottomMargin, w.headerMargin, w.footerMargin);
            v.ad.k();
        }
        static gr(v, w) {
            if (w._ag() == false) {
                return;
            }
            let x = null;
            if (w._c != null) {
                let y = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), v.d._j(ObjectModelPrinterSettingsPartManager.a8, w._c));
                if (y != null) {
                    x = y.d;
                }
            }
            let z = 100;
            let aa = 1;
            let ab = 1;
            let ac = 0;
            if (typeCast(PrintOptions.$, w) !== null) {
                let ad = w;
                z = ad.scalingFactor;
                aa = ad.maxPagesHorizontally;
                ab = ad.maxPagesVertically;
                ac = XlsxUtilities.ay(ad.pageOrder);
            }
            SpreadsheetMLMain.acr(v, w.paperSize, void 0, void 0, intSToU(z), intSToU(w.startPageNumber), intSToU(aa), intSToU(ab), ac, XlsxUtilities.ax(w.orientation), void 0, w.printInBlackAndWhite, w.draftQuality, XlsxUtilities.aq(w.printNotes), w.pageNumbering == 1, XlsxUtilities.a1(w.printErrors), intSToU(w.resolution), intSToU(w.verticalResolution), intSToU(w.numberOfCopies), x);
            v.ad.k();
        }
        gs() {
            SpreadsheetMLMain.acs(this, void 0, this.bl.printOptions.scalingType == 1);
            this.ad.k();
        }
        gt(v) {
            let w = this.bh._by;
            v._br();
            let x = XlsxUtilities.az(v._z);
            if (v.panesAreFrozen) {
                let y = v.frozenPaneSettings;
                let z = null;
                let aa = Math.max(y.frozenColumns, y.firstColumnInRightPane);
                let ab = Math.max(y.frozenRows, y.firstRowInBottomPane);
                if (aa > 0 || ab > 0) {
                    z = CellAddress.u(ab, aa, w.currentFormat);
                }
                let ac = y._z ? 2 : 1;
                SpreadsheetMLMain.act(this, y.frozenColumns, y.frozenRows, z, x, ac);
            }
            else {
                let ad = v.unfrozenPaneSettings;
                let ae = null;
                if (ad.firstColumnInRightPane > 0 && ad.firstRowInBottomPane > 0) {
                    ae = CellAddress.u(ad.firstRowInBottomPane, ad.firstColumnInRightPane, w.currentFormat);
                }
                SpreadsheetMLMain.act(this, ad.leftPaneWidth, ad.topPaneHeight, ae, x, 0);
            }
            this.ad.k();
        }
        static gu(v, w, x) {
            if (x.a == null) {
                return;
            }
            SpreadsheetMLMain.acv(v, x.a);
            v.ad.k();
        }
        gv(v) {
            SpreadsheetMLMain.acy(this, v.centerHorizontally, v.centerVertically, v.printRowAndColumnHeaders, v.printGridlines);
            this.ad.k();
        }
        gw(v) {
            let w = this.d._z == 0;
            if (w && nullableEquals(v._c.h(), 0)) {
                w = false;
            }
            let x = null;
            if (v.ranges.count > 0) {
                let y = Enumerable.o(WorksheetRegion.$, WorksheetRegionAddress.$, v.ranges, (z) => z._h);
                x = WorksheetReferenceCollection._ab(1, this.bl, y);
            }
            if (w == false) {
                let z;
                let aa, ab;
                let ac;
                let ad = v._c.e(z, aa, ab, ac);
                z = ad.p0;
                aa = ad.p1;
                ab = ad.p2;
                ac = ad.p3;
                SpreadsheetMLMain.ac0(this, v._m(), x, v.title, z, aa != null ? Convert.toBase64String(aa) : null, ab != null ? Convert.toBase64String(ab) : null, ac);
            }
            else {
                let ae = v._c.h();
                let af = ae.hasValue ? toNullable(ST_UnsignedShortHex.$, new ST_UnsignedShortHex(1, ae.value)) : toNullable(ST_UnsignedShortHex.$, null);
                SpreadsheetMLMain.acz(this, v._m(), x, v.title, af);
            }
            this.ad.k();
        }
        gx() {
            if (this.bl.protection._allowedEditRanges$i.count == 0) {
                return;
            }
            SpreadsheetMLMain.ac1(this);
            ExcelUtils.fo(WorksheetProtectedRange.$, this.bl.protection._allowedEditRanges$i, runOn(this, this.gw));
            this.ad.k();
        }
        bx(v, w, x) {
            let y = 0;
            let z = false;
            if (w._hasCellFormat && w._cellFormatInternal._z == false) {
                y = v._a8(w._cellFormatInternal.d);
                z = true;
            }
            let aa = toNullable(Number_$type, null);
            let ab = w._cs(true);
            if (ab > -1) {
                aa = toNullable(Number_$type, ab / 20);
            }
            else if (this.bl._d4) {
                aa = toNullable(Number_$type, this.bl.defaultRowHeight / 20);
            }
            SpreadsheetMLMain.ac8(this, toNullable(Number_$type, intSToU((w.index + 1))), void 0, y, z, aa, w.hidden, w._bz, w.outlineLevel, x.a, w._b4, w._b1);
            let ac = w._hasCellFormat ? w._cellFormatInternal.d : null;
            let ad = CellAddress.x(w.index, true, v._b.currentFormat, w.index, false, 1);
            let ae = 0;
            for (let af of fromEnum(w._ch(void 0, void 0, true))) {
                if (af.j == null) {
                    af.j = ac || this.bl._cb(af.r).b;
                }
                this.f4(v, w, x, ad, af);
                ae++;
            }
            this.ad.k();
            return ae;
        }
        gy(v) {
            if (v._cp == false) {
                return;
            }
            SpreadsheetMLMain.ac7(this, intSToU(v._horizontalPageBreaks$i.count), intSToU(v._horizontalPageBreaks$i._k()));
            ExcelUtils.fo(HorizontalPageBreak.$, v._horizontalPageBreaks$i, runOn(this, this.f3));
            this.ad.k();
        }
        gz(v) {
            if (v._ai == false) {
                return;
            }
            let w = v._af;
            let x = v._ad.workbook;
            let y = x.currentFormat;
            for (let z of fromEnum(w.b)) {
                let aa = XlsxUtilities.az(z.a);
                let ab = z.b.p(false, false, y, 1);
                let ac = intSToU(z.f);
                let ad = new List$1(String_$type, 0);
                for (let ae of fromEnum(z.d)) {
                    ad.add(ae._ah(false, false, y, 1));
                }
                SpreadsheetMLMain.adc(this, aa, ab, ac, ad);
                this.ad.k();
            }
        }
        g0() {
            if (Enumerable.d(KeyValuePair$2.$.specialize(WorkbookReferenceBase.$, Number_$type), this.bh._b9._ck, (v) => typeCast(OleLinkWorkbookReference.$, v.key) !== null)) {
                return;
            }
            if (!this.bo) {
                return;
            }
            SpreadsheetMLMain.ade(this, true);
            this.ad.k();
        }
        bb(v) {
            SpreadsheetMLMain.adf(this);
            let w = 0;
            return WorkItemExtensions.a(Async.e(WorksheetRow.$, v._ay(this.bl), (x) => {
                let y = v._u(x);
                if (y != null) {
                    w += this.bx(v, x, y);
                    if (1000 < w) {
                        w = 0;
                        return false;
                    }
                }
                return true;
            }), () => this.ad.k());
        }
        g1() {
            let v = this.bl._ek ? toNullable(Number_$type, this.bl.getDefaultColumnWidth(0)) : toNullable(Number_$type, null);
            if (nullableNotEquals(v, null) && Enumerable.b(WorksheetColumnBlock.$, this.bl._ff, (w) => w.i)) {
                v = toNullable(Number_$type, 0);
            }
            SpreadsheetMLMain.adj(this, this.bl.defaultRowHeight / 20, truncate(MathUtilities.j(this.bl.getDefaultColumnWidth(2))), v, this.bl._d4, this.bl._dv, this.bl._dt, this.bl._ds);
            this.ad.k();
        }
        g2() {
            let v = null;
            if (this.bl.workbook._k != null) {
                v = this.bl._ak;
            }
            SpreadsheetMLMain.adm(this, void 0, void 0, void 0, void 0, void 0, void 0, v);
            this.g7();
            this.gp();
            this.gs();
            this.ad.k();
        }
        g3() {
            let v = this.bl.protection;
            let w = this.d._z == 0;
            if (w && nullableEquals(v._c.h(), 0)) {
                w = false;
            }
            if (w && !v._c.h().hasValue) {
                w = false;
            }
            if (w == false) {
                let x;
                let y, z;
                let aa;
                let ab = v._c.e(x, y, z, aa);
                x = ab.p0;
                y = ab.p1;
                z = ab.p2;
                aa = ab.p3;
                SpreadsheetMLMain.ado(this, x, y != null ? Convert.toBase64String(y) : null, z != null ? Convert.toBase64String(z) : null, aa, this.bl.isProtected, v.allowEditObjects == false, v.allowEditScenarios == false, v.allowFormattingCells == false, v.allowFormattingColumns == false, v.allowFormattingRows == false, v.allowInsertingColumns == false, v.allowInsertingRows == false, v.allowInsertingHyperlinks == false, v.allowDeletingColumns == false, v.allowDeletingRows == false, v._ab == false, v.allowSorting == false, v.allowFiltering == false, v.allowUsingPivotTables == false, v._ac == false);
            }
            else {
                let ac = v._c.h();
                let ad = ac.hasValue ? toNullable(ST_UnsignedShortHex.$, new ST_UnsignedShortHex(1, ac.value)) : toNullable(ST_UnsignedShortHex.$, null);
                SpreadsheetMLMain.adn(this, ad, this.bl.isProtected, v.allowEditObjects == false, v.allowEditScenarios == false, v.allowFormattingCells == false, v.allowFormattingColumns == false, v.allowFormattingRows == false, v.allowInsertingColumns == false, v.allowInsertingRows == false, v.allowInsertingHyperlinks == false, v.allowDeletingColumns == false, v.allowDeletingRows == false, v._ab == false, v.allowSorting == false, v.allowFiltering == false, v.allowUsingPivotTables == false, v._ac == false);
            }
            this.ad.k();
        }
        g4() {
            let v = this.bh._by;
            let w = this.bl.displayOptions;
            let x = null;
            let y = w.unfrozenPaneSettings.firstColumnInLeftPane;
            let z = w.unfrozenPaneSettings.firstRowInTopPane;
            if (y > 0 || z > 0) {
                x = CellAddress.u(z, y, v.currentFormat);
            }
            SpreadsheetMLMain.adq(this, 0, void 0, w.showFormulasInCells, w.showGridlines, w.showRowAndColumnHeaders, w.showZeroValues, w.orderColumnsRightToLeft, v.windowOptions.selectedSheet == this.bl || this.bl._w, w.showRulerInPageLayoutView, w.showOutlineSymbols, w._a8 == 64, w.showWhitespaceInPageLayoutView, XlsxUtilities.a4(w.view), x, intSToU(w._a8), intSToU(w._b3), intSToU(w.magnificationInNormalView), intSToU(w.magnificationInPageBreakView), intSToU(w.magnificationInPageLayoutView));
            let aa = this.bl.displayOptions.frozenPaneSettings;
            let ab = this.bl.displayOptions.unfrozenPaneSettings;
            if ((w.panesAreFrozen && (aa._h || aa._i)) || (!w.panesAreFrozen && (ab._h || ab._i))) {
                this.gt(w);
            }
            this.gz(w);
            this.ad.k();
        }
        g5() {
            SpreadsheetMLMain.adr(this);
            this.g4();
            this.ad.k();
        }
        g6(v, w, x, y, z = 0) {
            if (w == null) {
                return;
            }
            (((aa, ab, ac, ad, ae) => SpreadsheetMLMain.adv(aa, ac, ab, ad, ae))(this, z == 1, w._toString2(1, false, true, true), x.caseSensitive, x._n ? XlsxUtilities.a5(x._i) : 0));
            let af = v._w(w.worksheet);
            for (let ag of fromEnum(x._sortConditions$i)) {
                let ah = ag.key;
                let ai = ag.value;
                let aj = null;
                let ak = 0;
                let al = toNullable(Number_$type, null);
                let am = typeCast(CustomListSortCondition.$, ai);
                if (am != null) {
                    aj = am._l();
                }
                let an = typeCast(IconSortCondition.$, ai);
                if (an != null) {
                    ak = an._k;
                    al = an._n;
                }
                let ao = w._h;
                if (z == 1) {
                    ao = ao._d((ao._ac + ah.index))._f((ao._ac + ah.index));
                }
                else {
                    ao = ao._c((ao._w + ah.index))._e((ao._w + ah.index));
                }
                SpreadsheetMLMain.adt(this, ao._ah(true, true, this.bl._o, 1), ai.sortDirection == 1, ai._d, aj, y ? af.l(ah.index) : af.m(ah.index), ak, al);
            }
            this.ad.k();
        }
        bc(af) {
            return WorkItemExtensions.e(Tuple$2.$.specialize(Uri.$, String_$type), this.bh._j(ObjectModelSlicerPartManager.a8, af), (ag) => {
                SpreadsheetML2009Main.dr(this, WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), ag).d);
                this.ad.k();
            });
        }
        g7() {
            if (WorkbookColorInfo.l_op_Equality(this.bl.displayOptions.tabColorInfo, null)) {
                return;
            }
            ObjectModelCommonPartHelpers.ao(this, this.bl.displayOptions.tabColorInfo, 4, SpreadsheetMLMain.ad2);
        }
        g8(af) {
            let ag = this.bh._f(af).id;
            SpreadsheetMLMain.ad6(this, ag);
            this.ad.k();
        }
        g9() {
            if (this.bl._tables$i.count == 0) {
                return;
            }
            SpreadsheetMLMain.ad7(this, toNullable(Number_$type, intSToU(this.bl._tables$i.count)));
            ExcelUtils.fo(WorksheetTable.$, this.bl._tables$i, runOn(this, this.g8));
            this.ad.k();
        }
        static bq(af) {
            if (af.workbook.calculationMode == 0 && !af.workbook.recalculateBeforeSave) {
                return true;
            }
            if (af._shapes$i.count > 0) {
                let ag = af._shapes$i;
                for (let ah = 0; ah < ag.count; ah++) {
                    if (typeCast(WorksheetChart.$, ag.item(ah)) !== null) {
                        return true;
                    }
                }
            }
            return false;
        }
        bd(af, ag) {
            let ah = af._b;
            let ai = this.bl.printOptions;
            let aj = af._w(this.bl);
            this.bo = ObjectModelWorksheetPartManager.bq(this.bl);
            let ak = null;
            let al = null;
            for (let am of fromEnum(this.bl._dataValidationRules$i)) {
                let an = am.key;
                let ao = al;
                if (this.bp(an._n(null)) || this.bp(an._o(null))) {
                    if (al == null) {
                        al = new List$1(KeyValuePair$2.$.specialize(DataValidationRule.$, WorksheetReferenceCollection.$), 0);
                    }
                    al.add(am);
                }
                else {
                    if (ak == null) {
                        ak = new List$1(KeyValuePair$2.$.specialize(DataValidationRule.$, WorksheetReferenceCollection.$), 0);
                    }
                    ak.add(am);
                }
            }
            SpreadsheetMLMain.aer(this);
            if (ag.c != null || ag.b != null) {
                this.ad.l(VmlNamespace.ao);
            }
            this.g2();
            this.ge(af, aj);
            this.g5();
            this.g1();
            this.f7(af);
            return WorkItemExtensions.a(WorkItemExtensions.c(WorkItemExtensions.a(WorkItemExtensions.c(WorkItemExtensions.a(this.bb(af), () => {
                this.g0();
                this.g3();
                this.gx();
                this.f2(af);
                this.g6(af, this.bl.sortSettings.region, this.bl.sortSettings, false, this.bl.sortSettings.sortType);
                this.gb();
                this.go();
                this.f8(af);
                this.gd(af, ak);
                this.gk();
                this.gv(ai);
                ObjectModelWorksheetPartManager.gq(this, ai);
                ObjectModelWorksheetPartManager.gr(this, ai);
                ObjectModelWorksheetPartManager.gi(this, ai);
                this.gy(ai);
                this.f5(ai);
                ObjectModelWorksheetPartManager.gf(this, ag.a);
                ObjectModelWorksheetPartManager.gl(this, ag.c);
                ObjectModelWorksheetPartManager.gm(this, ag.b);
                ObjectModelWorksheetPartManager.gu(this, af, aj);
            }), () => this.a8()), () => this.g9()), () => this.ba(af, al)), () => this.ad.k());
        }
        static bg(af, ag) {
            ag = null;
            let ah = typeCast(ObjectModelWorksheetPartManager.$, af);
            let ai = ah.bf;
            if (ConditionalFormatInfo.e(ai) == false) {
                return {
                    ret: null,
                    p1: ag
                };
            }
            ag = ai.b;
            if (CfRuleInfo.l(ag) == false) {
                return {
                    ret: null,
                    p1: ag
                };
            }
            return {
                ret: ai,
                p1: ag
            };
        }
        get bh() {
            return ObjectModelWorksheetPartManager.bi(this);
        }
        static bi(af) {
            return af.d;
        }
        get bm() {
            return this.bl;
        }
    }
    ObjectModelWorksheetPartManager.$t = /*@__PURE__*/ markType(ObjectModelWorksheetPartManager, 'ObjectModelWorksheetPartManager', WorksheetPartManager.$);
    ObjectModelWorksheetPartManager.bj = /*@__PURE__*/ new ObjectModelWorksheetPartManager();
    return ObjectModelWorksheetPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelStylesPartManager = /*@__PURE__*/ (() => {
    class ObjectModelStylesPartManager extends ExcelStylesPartManager {
        constructor() {
            super();
            this.az(SpreadsheetMLMain.ck, ObjectModelStylesPartManager.ba);
            this.az(SpreadsheetMLMain.dh, ObjectModelStylesPartManager.bb);
            this.az(SpreadsheetMLMain.dl, ObjectModelStylesPartManager.bc);
            this.az(SpreadsheetMLMain.dn, ObjectModelStylesPartManager.bd);
            this.az(SpreadsheetMLMain.dp, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.tv, (b) => b.c));
            this.az(SpreadsheetMLMain.d8, ObjectModelStylesPartManager.bf);
            this.az(SpreadsheetMLMain.d9, ObjectModelStylesPartManager.bg);
            this.az(SpreadsheetMLMain.ea, ObjectModelStylesPartManager.bh);
            this.az(SpreadsheetMLMain.eb, ObjectModelStylesPartManager.bi);
            this.az(SpreadsheetMLMain.ex, ObjectModelStylesPartManager.bj);
            this.az(SpreadsheetMLMain.gr, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.vf, (b) => b.e));
            this.az(SpreadsheetMLMain.g6, ObjectModelStylesPartManager.bk);
            this.ay(SpreadsheetMLMain.g6, ObjectModelStylesPartManager.bl);
            this.az(SpreadsheetMLMain.g8, ObjectModelStylesPartManager.bm);
            this.az(SpreadsheetMLMain.hb, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.vn, (b) => b.k, toNullable(ST_ConformanceClass_$type, 1)));
            this.az(SpreadsheetMLMain.ht, ObjectModelStylesPartManager.bn);
            this.az(SpreadsheetMLMain.hw, ObjectModelStylesPartManager.bo);
            this.az(SpreadsheetMLMain.hy, ObjectModelStylesPartManager.bp);
            this.az(SpreadsheetMLMain.ie, ObjectModelStylesPartManager.bq);
            this.az(SpreadsheetMLMain.ih, ObjectModelStylesPartManager.br);
            this.az(SpreadsheetMLMain.iy, ObjectModelStylesPartManager.bs);
            this.az(SpreadsheetMLMain.jh, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.wh, (b) => b.g));
            this.az(SpreadsheetMLMain.j2, ObjectModelStylesPartManager.bt);
            this.ay(SpreadsheetMLMain.j2, ObjectModelStylesPartManager.bu);
            this.az(SpreadsheetMLMain.kd, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.wp, (b) => b.i, toNullable(ST_ConformanceClass_$type, 0)));
            this.az(SpreadsheetMLMain.li, ObjectModelStylesPartManager.bv);
            this.az(SpreadsheetMLMain.lk, ObjectModelStylesPartManager.bw);
            this.az(SpreadsheetMLMain.mc, ObjectModelStylesPartManager.bx);
            this.az(SpreadsheetMLMain.m1, ObjectModelStylesPartManager.by);
            this.az(SpreadsheetMLMain.ny, ObjectModelStylesPartManager.bz);
            this.az(SpreadsheetMLMain.n2, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.xk, (b) => b.k, toNullable(ST_ConformanceClass_$type, 0)));
            this.az(SpreadsheetMLMain.p9, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.ya, (b) => b.i, toNullable(ST_ConformanceClass_$type, 1)));
            this.az(SpreadsheetMLMain.qd, ObjectModelStylesPartManager.b0);
            this.az(SpreadsheetMLMain.qh, ObjectModelStylesPartManager.b1);
            this.ay(SpreadsheetMLMain.qh, ObjectModelStylesPartManager.b2);
            this.az(SpreadsheetMLMain.qy, ObjectModelStylesPartManager.b3);
            this.az(SpreadsheetMLMain.qz, ObjectModelStylesPartManager.b4);
            this.az(SpreadsheetMLMain.q1, ObjectModelStylesPartManager.b5);
            this.ay(SpreadsheetMLMain.q1, ObjectModelStylesPartManager.b6);
            this.az(SpreadsheetMLMain.rf, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.ys, (b) => b.m));
            this.az(SpreadsheetMLMain.r9, (a) => ObjectModelStylesPartManager.be(a, SpreadsheetMLMain.yx, (b) => b.o));
            this.az(SpreadsheetMLMain.sy, ObjectModelStylesPartManager.b7);
            ObjectModelCommonPartHelpers.ak(this, SpreadsheetMLMain.le, SpreadsheetMLMain.wu);
        }
        u(a) {
            this.dj(this.a7._b9);
            return null;
        }
        static ba(a) {
            let b = a.s.a(FormatInfo.$);
            let c = a.s.a(DxfInfo.$);
            if (b == null && c == null) {
                return;
            }
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m = SpreadsheetMLMain.tl(a, d, e, f, g, h, i, j, k, l);
            d = m.p1;
            e = m.p2;
            f = m.p3;
            g = m.p4;
            h = m.p5;
            i = m.p6;
            j = m.p7;
            k = m.p8;
            l = m.p9;
            let n = nullableEquals(d, null) ? 0 : XlsxUtilities.k(d.value);
            let o = nullableEquals(e, null) ? 2 : XlsxUtilities.y(e.value);
            let p = ((() => {
                let $ret = new AlignmentInfo(0);
                $ret.c = n;
                $ret.i = o;
                $ret.ah = f;
                $ret.u = g;
                $ret.ab = h;
                $ret.af = i;
                $ret.q = j;
                $ret.s = k;
                $ret.ad = l;
                return $ret;
            })());
            if (b != null) {
                b.b = p;
            }
            if (c != null) {
                c.b = p;
            }
        }
        static bb(a) {
            let b = a.s.a(PatternFillInfo.$);
            if (b == null) {
                return;
            }
            b.b = ObjectModelCommonPartHelpers.a(a, SpreadsheetMLMain.tr);
        }
        static bc(a) {
            let b;
            let c;
            let d;
            let e = SpreadsheetMLMain.tt(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            let f = ((() => {
                let $ret = new BorderInfo();
                $ret.s = b;
                $ret.q = c;
                $ret.v = d;
                return $ret;
            })());
            let g = ObjectModelStylesPartManager.a8(a);
            let h = a.s.a(DxfInfo.$);
            if (h != null) {
                h.c = f;
            }
            else {
                if (g._b7._bb.count == 0) {
                    let i = new BorderInfo();
                    i.c.a = 0;
                    i.e.a = 0;
                    i.i.a = 0;
                    i.k.a = 0;
                    i.m.a = 0;
                    g._b7._bb.add(i);
                }
                else {
                    g._b7._bb.add(f);
                }
            }
            a.s.k(f);
        }
        static bd(a) {
            let b;
            let c = SpreadsheetMLMain.tu(a, b);
            b = c.p1;
        }
        static be(a, b, c, d = toNullable(ST_ConformanceClass_$type, null)) {
            if (nullableNotEquals(d, null)) {
            }
            let e = a.s.a(BorderInfo.$);
            if (e == null) {
                return;
            }
            let f;
            let g = b(a, f);
            f = g.p1;
            let h = c(e);
            h.a = XlsxUtilities.b(f);
            a.s.k(h.d);
        }
        static bf(a) {
            let b;
            let c;
            let d;
            let e;
            let f;
            let g;
            let h = SpreadsheetMLMain.t1(a, b, c, d, e, f, g);
            b = h.p1;
            c = h.p2;
            d = h.p3;
            e = h.p4;
            f = h.p5;
            g = h.p6;
            let i = ObjectModelStylesPartManager.a8(a);
            i._b7._bc.add(((() => {
                let $ret = new StyleInfo(0);
                $ret.e = b;
                $ret.l = c;
                $ret.h = d;
                $ret.j = e;
                $ret.d = f;
                $ret.b = g;
                return $ret;
            })()));
        }
        static bg(a) {
            let b;
            let c = SpreadsheetMLMain.t2(a, b);
            b = c.p1;
        }
        static bh(a) {
            let b;
            let c = SpreadsheetMLMain.t3(a, b);
            b = c.p1;
            let d = ObjectModelStylesPartManager.a8(a);
            a.s.k(d._b7._bd);
        }
        static bi(a) {
            let b;
            let c = SpreadsheetMLMain.t4(a, b);
            b = c.p1;
            let d = ObjectModelStylesPartManager.a8(a);
            a.s.k(d._b7._be);
        }
        static bj(a) {
        }
        static bk(a) {
            a.s.k(new DxfInfo(0));
        }
        static bl(a) {
            let b = a.s.a(DxfInfo.$);
            if (b == null) {
                return;
            }
            let c = ObjectModelStylesPartManager.a8(a);
            c._b7._g.add(b.h(c._b7));
        }
        static bm(a) {
            let b;
            let c = SpreadsheetMLMain.vk(a, b);
            b = c.p1;
        }
        static bn(a) {
            let b = a.s.a(PatternFillInfo.$);
            if (b == null) {
                return;
            }
            b.e = ObjectModelCommonPartHelpers.a(a, SpreadsheetMLMain.vz);
        }
        static bo(a) {
            let b = new FillInfo();
            a.s.k(b);
            let c = a.s.a(DxfInfo.$);
            if (c != null) {
                c.e = b;
            }
            else {
                ObjectModelStylesPartManager.a8(a)._b7._bf.add(b);
            }
        }
        static bp(a) {
            let b;
            let c = SpreadsheetMLMain.v4(a, b);
            b = c.p1;
        }
        static bq(a) {
            let b = ObjectModelStylesPartManager.a8(a);
            let c = b._by;
            let d = new WorkbookFontData(0, c);
            a.s.k(d);
            let e = new ColorInfo();
            e.d = d;
            a.s.k(e);
            let f = a.s.a(DxfInfo.$);
            if (f != null) {
                f.d = e;
                f.a = d;
            }
            else {
                b._b7._bg.add(e);
            }
        }
        static br(a) {
            let b;
            let c = SpreadsheetMLMain.wb(a, b);
            b = c.p1;
        }
        static bs(a) {
            let b = a.s.a(FillInfo.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i = SpreadsheetMLMain.wf(a, c, d, e, f, g, h);
            c = i.p1;
            d = i.p2;
            e = i.p3;
            f = i.p4;
            g = i.p5;
            h = i.p6;
            let j = ((() => {
                let $ret = new GradientFillInfo();
                $ret.e = c;
                $ret.q = d;
                $ret.s = e;
                $ret.u = f;
                $ret.w = g;
                $ret.j = h;
                return $ret;
            })());
            b.b = j;
            a.s.k(j);
        }
        static bt(a) {
            a.s.k(new List$1(Color.$, 0));
        }
        static bu(a) {
            let b = a.s.a(List$1.$.specialize(Color.$));
            if (b == null) {
                return;
            }
            let c = ObjectModelStylesPartManager.a8(a)._by._palette$i;
            for (let d = 8; d < b.count; d++) {
                c._item$i(d - 8, b._inner[d]);
            }
        }
        static bv(a) {
            let b;
            let c;
            let d = SpreadsheetMLMain.wv(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = new SerializationNumberFormatInfo();
            let f = a.s.a(DxfInfo.$);
            if (f != null) {
                f.g = e;
                b = WorkbookFormatCollection.aj(b);
            }
            e.b = c;
            e.c = b;
            let g = ObjectModelStylesPartManager.a8(a)._by;
            g._b2.ap(e.c, e.b);
        }
        static bw(a) {
            let b;
            let c = SpreadsheetMLMain.ww(a, b);
            b = c.p1;
        }
        static bx(a) {
            let b = a.s.a(FillInfo.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.w8(a, c);
            c = d.p1;
            let e = new PatternFillInfo();
            e.j = XlsxUtilities.ba(c);
            b.d = e;
            a.s.k(e);
        }
        static by(a) {
            let b = a.s.a(FormatInfo.$);
            let c = a.s.a(DxfInfo.$);
            if (b == null && c == null) {
                return;
            }
            let d;
            let e;
            let f = SpreadsheetMLMain.xg(a, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new ProtectionInfo();
                $ret.j = d;
                $ret.h = e;
                return $ret;
            })());
            if (b != null) {
                b.d = g;
            }
            if (c != null) {
                c.f = g;
            }
        }
        static bz(a) {
            let b = a.s.a(List$1.$.specialize(Color.$));
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.xj(a, c);
            c = d.p1;
            try {
                let e = ST_UnsignedIntHex.h(c.getValueOrDefault1(ST_UnsignedIntHex.b(0)));
                e = u32BitwiseOr(e, 4278190080);
                b.add(ExcelUtils.gz(e));
            }
            catch (f) {
                return;
            }
        }
        static b0(a) {
            let b = a.s.a(GradientFillInfo.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.yb(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new StopInfo();
                $ret.g = c;
                return $ret;
            })());
            e.c = new ColorInfo();
            a.s.k(e.c);
            b.h.add(e);
        }
        static b1(a) {
            if (a.d._z == 0 && a.ab.af == SpreadsheetMLMain.ap.s(1)) {
                a.d._bn(1);
            }
        }
        static b2(a) {
            let b = ObjectModelStylesPartManager.a8(a)._b7;
            if (b._bc.count == 0) {
                b._bc.add(new StyleInfo(0));
                if (b._be.count != 0) {
                    b._be._inner[0] = new FormatInfo();
                }
            }
            if (b._bd.count == 0) {
                b._bd.add(new FormatInfo());
            }
            ObjectModelStylesPartManager.b8(b);
            ObjectModelStylesPartManager.b9(b, b._bd);
            for (let c of fromEnum(b._bc)) {
                if (c.e > -1 && c.e < b._bd.count) {
                    let d = b._bd._inner[c.e].g;
                    let e = new BuiltInStyleInfo();
                    if (nullableEquals(c.h, null) && ((() => { let f = WorkbookStyleCollection._t.tryGetValue(c.l, e); e = f.p1; return f.ret; })())) {
                        c.h = toNullable(Number_$type, e.a);
                        c.j = toNullable(Number_$type, e.b);
                    }
                    let f;
                    if (nullableNotEquals(c.h, null)) {
                        let g = new WorkbookBuiltInStyle(b._b, d, c.h.value, Convert.toByte1(unwrapNullable(c.j)));
                        g._ah = c.b == true;
                        if (c.d == true) {
                            f = b._b._styles$i._e(g);
                        }
                        else {
                            f = b._b._styles$i._add(g);
                        }
                    }
                    else {
                        if (c.d) {
                            f = b._b._styles$i._f(d, c.l);
                        }
                        else {
                            f = b._b._styles$i._addUserDefinedStyle(d, c.l);
                        }
                    }
                    if (b._a7.containsKey(c.e) == false) {
                        b._a7.addItem(c.e, f);
                    }
                }
            }
            ObjectModelStylesPartManager.b9(b, b._be);
        }
        static b3(a) {
            let b;
            let c;
            let d;
            let e;
            let f = SpreadsheetMLMain.yl(a, b, c, d, e);
            b = f.p1;
            c = f.p2;
            d = f.p3;
            e = f.p4;
            let g = ObjectModelStylesPartManager.a8(a);
            if (g._b7._av == false) {
                let h = new WorksheetTableStyle(b, true);
                a.s.k(h);
                if (d) {
                    g._by._customTableStyles$i.add(h);
                }
            }
        }
        static b4(a) {
            let b = a.s.a(WorksheetTableStyle.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f = SpreadsheetMLMain.ym(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = c;
            if (EnumUtil.isDefined(WorksheetTableStyleArea_$type, enumGetBox(WorksheetTableStyleArea_$type, g)) == false) {
                return;
            }
            if (d != 1) {
                switch (g) {
                    case 5:
                        b.rowStripeHeight = d;
                        break;
                    case 6:
                        b.alternateRowStripeHeight = d;
                        break;
                    case 7:
                        b.columnStripeWidth = d;
                        break;
                    case 8:
                        b.alternateColumnStripeWidth = d;
                        break;
                    default: break;
                }
            }
            let h = ObjectModelStylesPartManager.a8(a);
            if (e.hasValue && h._b7._av) {
                e.postDecrement();
            }
            let i = null;
            if (e.hasValue) {
                i = h._b7._g._inner[e.value];
            }
            if (i != null && (i._cd == false || h._b7._av)) {
                let j = h._by;
                if (h._b7._av) {
                    j = null;
                }
                let k = b._areaFormats$i._d(j, g);
                for (let l = 1; l != 1073741824; l = (l << 1)) {
                    if (WorksheetTableStyle._q(l) == false) {
                        continue;
                    }
                    ExcelUtils.fc(i, k, l);
                }
            }
        }
        static b5(a) {
            let b;
            let c;
            let d;
            let e = SpreadsheetMLMain.yo(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            a.s.k(new ObjectModelStylesPartManager_TableStylesCollectionInfo(c));
        }
        static b6(a) {
            if (ObjectModelStylesPartManager.a8(a)._b7._av) {
                return;
            }
            let b = a.s.a(ObjectModelStylesPartManager_TableStylesCollectionInfo.$);
            if (b == null) {
                return;
            }
            let c = ObjectModelStylesPartManager.a8(a)._by;
            let d = c._cj(b.a);
            if (d == null && b.a != null) {
                return;
            }
            c.defaultTableStyle = d;
        }
        static b7(a) {
            let b = a.s.a(List$1.$.specialize(FormatInfo.$));
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p = SpreadsheetMLMain.y4(a, c, d, e, f, g, h, i, j, k, l, m, n, o);
            c = p.p1;
            d = p.p2;
            e = p.p3;
            f = p.p4;
            g = p.p5;
            h = p.p6;
            i = p.p7;
            j = p.p8;
            k = p.p9;
            l = p.p10;
            m = p.p11;
            n = p.p12;
            o = p.p13;
            let q = ObjectModelStylesPartManager.a8(a);
            let r = (b == q._b7._bd);
            let s = r;
            let t = 0;
            if (n.getValueOrDefault1(s)) {
                t |= 2;
            }
            if (m.getValueOrDefault1(s)) {
                t |= 8;
            }
            if (k.getValueOrDefault1(s)) {
                t |= 4;
            }
            if (j.getValueOrDefault1(s)) {
                t |= 1;
            }
            if (l.getValueOrDefault1(s)) {
                t |= 16;
            }
            if (o.getValueOrDefault1(s)) {
                t |= 32;
            }
            let u = ((() => {
                let $ret = new FormatInfo();
                $ret.i = t;
                $ret.o = f;
                $ret.r = e;
                $ret.t = d;
                $ret.v = c;
                $ret.k = i;
                $ret.m = h;
                $ret.p = g;
                return $ret;
            })());
            b.add(u);
            a.s.k(u);
        }
        static b8(a) {
            for (let b of fromEnum(a._bg)) {
                let c = b.d;
                c.colorInfo = b.c(a);
                if (a._h.count == 0) {
                    a._b._av._p = c;
                }
                a._h.add(c);
            }
        }
        static b9(a, b) {
            let c = (b == a._bd);
            for (let d = 0; d < b.count; d++) {
                let e = c == false && d == 0;
                let f = c && d == 0;
                let g = b._inner[d];
                g.g = g.e(a, c, f);
                if (e) {
                    a._b._ca._p = g.g;
                }
            }
        }
        ca(a) {
            ObjectModelStylesPartManager.cb(this, a);
        }
        static cb(a, b) {
            if (b == null || b.o) {
                return;
            }
            SpreadsheetMLMain.y6(a, XlsxUtilities.bb(b.c), XlsxUtilities.be(b.i), b.ah, b.u, b.ab, b.af, b.q, b.s, b.ad);
            a.ad.k();
        }
        cc(a) {
            ObjectModelStylesPartManager.cd(this, a);
        }
        static cd(a, b) {
            ObjectModelCommonPartHelpers.an(a, b, SpreadsheetMLMain.zc);
        }
        ce(a) {
            ObjectModelStylesPartManager.cf(this, a);
        }
        static cf(a, b) {
            if (b == null) {
                return;
            }
            SpreadsheetMLMain.ze(a, b.s, b.q, b.v);
            if (!b.i.f) {
                ObjectModelStylesPartManager.dg(a, b.i);
            }
            if (!b.k.f) {
                ObjectModelStylesPartManager.cw(a, b.k);
            }
            if (!b.m.f) {
                ObjectModelStylesPartManager.dp(a, b.m);
            }
            if (!b.c.f) {
                ObjectModelStylesPartManager.ck(a, b.c);
            }
            if (!b.e.f) {
                ObjectModelStylesPartManager.cr(a, b.e);
            }
            a.ad.k();
        }
        cg(a) {
            let b = this.a7;
            SpreadsheetMLMain.zf(this, toNullable(Number_$type, intSToU(a._cm.count)));
            a._cm.q(runOn(this, this.ce));
            this.ad.k();
        }
        ch(a, b) {
            ObjectModelStylesPartManager.ci(this, a, b);
        }
        static ci(a, b, c) {
            c(a, XlsxUtilities.an(b.a));
            ObjectModelCommonPartHelpers.an(a, b.d, SpreadsheetMLMain.zz);
            a.ad.k();
        }
        cj(a) {
            ObjectModelStylesPartManager.ck(this, a);
        }
        static ck(a, b) {
            ObjectModelStylesPartManager.ci(a, b, SpreadsheetMLMain.zg);
        }
        cl(a) {
            SpreadsheetMLMain.zm(this, intSToU(a.e), a.l, a.h, a.j, a.d, a.b);
            this.ad.k();
        }
        cm(a) {
            SpreadsheetMLMain.zn(this, toNullable(Number_$type, intSToU(a._cn.count)));
            a._cn.q(runOn(this, this.cl));
            this.ad.k();
        }
        cn(a) {
            SpreadsheetMLMain.zo(this, toNullable(Number_$type, intSToU(a._co.count)));
            a._co.q((b) => this.dr(b, true));
            this.ad.k();
        }
        co(a) {
            SpreadsheetMLMain.zp(this, toNullable(Number_$type, intSToU(a._cp.count)));
            a._cp.q((b) => this.dr(b, false));
            this.ad.k();
        }
        cp() {
            let a = this.a7._by;
            if (a._palette$i.isCustom == false) {
                return;
            }
            SpreadsheetMLMain.z2(this);
            this.c6();
            this.ad.k();
        }
        cq(a) {
            ObjectModelStylesPartManager.cr(this, a);
        }
        static cr(a, b) {
            ObjectModelStylesPartManager.ci(a, b, SpreadsheetMLMain.aa0);
        }
        cs(a, b) {
            ObjectModelStylesPartManager.ct(this, a, b, SpreadsheetMLMain.g6);
        }
        static ct(a, b, c, d) {
            let e = new DxfInfo(1, b, c);
            SpreadsheetMLMain.aa4(a, d);
            ObjectModelCommonPartHelpers.as(a, e.a);
            ObjectModelStylesPartManager.c8(a, e.g, true);
            ObjectModelStylesPartManager.c0(a, e.e);
            ObjectModelStylesPartManager.cb(a, e.b);
            ObjectModelStylesPartManager.cf(a, e.c);
            ObjectModelStylesPartManager.dd(a, e.f);
            a.ad.k();
        }
        cu(a) {
            SpreadsheetMLMain.aa5(this, toNullable(Number_$type, intSToU(a._g.count)));
            a._g.q((b) => this.cs(a, b));
            this.ad.k();
        }
        cv(a) {
            ObjectModelStylesPartManager.cw(this, a);
        }
        static cw(a, b) {
            let t1 = a.d._z;
            L0: while (true) {
                switch (t1) {
                    case 1:
                        ObjectModelStylesPartManager.ci(a, b, SpreadsheetMLMain.aa8);
                        break;
                    case 0:
                        ObjectModelStylesPartManager.ci(a, b, SpreadsheetMLMain.ac6);
                        break;
                    default:
                        t1 = 1;
                        continue L0;
                }
                break;
            }
        }
        cx(a) {
            ObjectModelStylesPartManager.cy(this, a);
        }
        static cy(a, b) {
            ObjectModelCommonPartHelpers.an(a, b, SpreadsheetMLMain.abk);
        }
        cz(a) {
            ObjectModelStylesPartManager.c0(this, a);
        }
        static c0(a, b) {
            if (b == null) {
                return;
            }
            SpreadsheetMLMain.abo(a);
            ObjectModelStylesPartManager.db(a, b.d);
            ObjectModelStylesPartManager.c4(a, b.b);
            a.ad.k();
        }
        c1(a) {
            SpreadsheetMLMain.abp(this, toNullable(Number_$type, intSToU(a._cq.count)));
            a._cq.q(runOn(this, this.cz));
            this.ad.k();
        }
        c2(a) {
            SpreadsheetMLMain.abw(this, toNullable(Number_$type, intSToU(a._h.count)));
            a._h.q((b) => ObjectModelCommonPartHelpers.ar(this, b));
            this.ad.k();
        }
        c3(a) {
            ObjectModelStylesPartManager.c4(this, a);
        }
        static c4(a, b) {
            if (b == null) {
                return;
            }
            SpreadsheetMLMain.ab0(a, b.e, b.q, b.s, b.u, b.w, b.j);
            for (let c of fromEnum(b.h)) {
                ObjectModelStylesPartManager.di(a, c);
            }
            a.ad.k();
        }
        c5() {
            SpreadsheetMLMain.ab2(this);
            this.ad.k();
        }
        c6() {
            SpreadsheetMLMain.ab9(this);
            let a = this.a7._by._palette$i;
            for (let b = 0; b < 8 + 56; b++) {
                this.de(ExcelUtils.g3(a._af(b)));
            }
            this.ad.k();
        }
        c7(a, b) {
            ObjectModelStylesPartManager.c8(this, a, b);
        }
        static c8(a, b, c) {
            if (b == null) {
                return;
            }
            let d = b.c;
            if (c) {
                d = WorkbookFormatCollection.ak(d);
            }
            SpreadsheetMLMain.ach(a, d, b.b);
            a.ad.k();
        }
        c9(a) {
            let b = a._cr.count;
            if (b == 0) {
                return;
            }
            SpreadsheetMLMain.aci(this, toNullable(Number_$type, intSToU(b)));
            a._cr.q((c) => this.c7(c, false));
            this.ad.k();
        }
        da(a) {
            ObjectModelStylesPartManager.db(this, a);
        }
        static db(a, b) {
            if (b == null) {
                return;
            }
            SpreadsheetMLMain.acu(a, XlsxUtilities.bc(b.j));
            ObjectModelStylesPartManager.cy(a, b.e);
            ObjectModelStylesPartManager.cd(a, b.b);
            a.ad.k();
        }
        dc(a) {
            ObjectModelStylesPartManager.dd(this, a);
        }
        static dd(a, b) {
            if (b == null || b.e) {
                return;
            }
            SpreadsheetMLMain.ac2(a, b.j, b.h);
            a.ad.k();
        }
        de(a) {
            let b = intSToU(ExcelUtils.cx(a));
            b = b & 16777215;
            SpreadsheetMLMain.ac5(this, toNullable(ST_UnsignedIntHex.$, new ST_UnsignedIntHex(1, b)));
            this.ad.k();
        }
        df(a) {
            ObjectModelStylesPartManager.dg(this, a);
        }
        static dg(a, b) {
            let t1 = a.d._z;
            L0: while (true) {
                switch (t1) {
                    case 1:
                        ObjectModelStylesPartManager.ci(a, b, SpreadsheetMLMain.adx);
                        break;
                    case 0:
                        ObjectModelStylesPartManager.ci(a, b, SpreadsheetMLMain.acb);
                        break;
                    default:
                        t1 = 1;
                        continue L0;
                }
                break;
            }
        }
        dh(a) {
            ObjectModelStylesPartManager.di(this, a);
        }
        static di(a, b) {
            SpreadsheetMLMain.ady(a, b.g);
            ObjectModelCommonPartHelpers.an(a, b.c, SpreadsheetMLMain.zz);
            a.ad.k();
        }
        dj(a) {
            SpreadsheetMLMain.ad0(this);
            this.c9(a);
            this.c2(a);
            this.c1(a);
            this.cg(a);
            this.cn(a);
            this.co(a);
            this.cm(a);
            this.cu(a);
            this.dm(a);
            this.cp();
            this.ad.k();
        }
        dk(a, b) {
            let c = a._aa(b);
            SpreadsheetMLMain.ad8(this, b.name, void 0, void 0, toNullable(Number_$type, intSToU(c._k)));
            ExcelUtils.fo(KeyValuePair$2.$.specialize(WorksheetTableStyleArea_$type, Number_$type), c, (d) => this.dl(b, d));
            this.ad.k();
        }
        dl(a, b) {
            SpreadsheetMLMain.ad9(this, XlsxUtilities.a6(b.key), a._ak(b.key).getValueOrDefault1(1), toNullable(Number_$type, b.value));
            this.ad.k();
        }
        dm(a) {
            let b = this.a7._by;
            let c = b._customTableStyles$i;
            SpreadsheetMLMain.aeb(this, toNullable(Number_$type, intSToU(c.count)), b.defaultTableStyle.name, "PivotStyleLight16");
            ExcelUtils.fo(WorksheetTableStyle.$, c, (d) => this.dk(a, d));
            this.ad.k();
        }
        dn(a) {
            ObjectModelStylesPartManager.dp(this, a);
        }
        static dp(a, b) {
            ObjectModelStylesPartManager.ci(a, b, SpreadsheetMLMain.aef);
        }
        dq() {
            SpreadsheetMLMain.ael(this);
            this.ad.k();
        }
        dr(a, b) {
            let c = ExcelUtils.bw(a.i, 2);
            let d = ExcelUtils.bw(a.i, 8);
            let e = ExcelUtils.bw(a.i, 16);
            let f = ExcelUtils.bw(a.i, 4);
            let g = ExcelUtils.bw(a.i, 1);
            let h = ExcelUtils.bw(a.i, 32);
            let i = b;
            SpreadsheetMLMain.aes(this, a.v, a.t, a.r, a.o, a.p, a.m, a.k, g == i ? toNullable(Boolean_$type, null) : toNullable(Boolean_$type, g), f == i ? toNullable(Boolean_$type, null) : toNullable(Boolean_$type, f), e == i ? toNullable(Boolean_$type, null) : toNullable(Boolean_$type, e), d == i ? toNullable(Boolean_$type, null) : toNullable(Boolean_$type, d), c == i ? toNullable(Boolean_$type, null) : toNullable(Boolean_$type, c), h == i ? toNullable(Boolean_$type, null) : toNullable(Boolean_$type, h));
            this.ca(a.b);
            this.dc(a.d);
            this.ad.k();
        }
        get a7() {
            return ObjectModelStylesPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelStylesPartManager.$t = /*@__PURE__*/ markType(ObjectModelStylesPartManager, 'ObjectModelStylesPartManager', ExcelStylesPartManager.$);
    ObjectModelStylesPartManager.a9 = /*@__PURE__*/ new ObjectModelStylesPartManager();
    return ObjectModelStylesPartManager;
})();
/**
 * @hidden
 */
export let ExcelThemeDocumentManager = /*@__PURE__*/ (() => {
    class ExcelThemeDocumentManager extends ExcelWorkbookDocumentManager {
        constructor(a, b, c, d, e, f, g) {
            super(a, b, c, d, e, f, g);
        }
        _bh() {
            super._bh();
            this._bl(ObjectModelThemeManagerPartManager.a7);
            this._bl(ObjectModelThemePartManager.bd);
        }
        _s() {
            throw new NotImplementedException(0);
        }
    }
    ExcelThemeDocumentManager.$t = /*@__PURE__*/ markType(ExcelThemeDocumentManager, 'ExcelThemeDocumentManager', ExcelWorkbookDocumentManager.$);
    return ExcelThemeDocumentManager;
})();
/**
 * @hidden
 */
export let WorkbookLoadManagerExcel2007 = /*@__PURE__*/ (() => {
    class WorkbookLoadManagerExcel2007 extends WorkbookLoadManager {
        constructor(a, b, c, d, e) {
            super(a, ExcelUtils.ee(b));
            this._an = new WorkbookSerializationDataExcel2007();
            this._a8 = null;
            this._ax = null;
            this._ay = null;
            this._aj = null;
            this._ak = null;
            this._a9 = null;
            this._ba = null;
            this._az = null;
            this._a0 = null;
            this._a1 = null;
            this._a3 = null;
            this._a2 = null;
            this._au = false;
            this._av = false;
            this._a8 = new List$1(ColorInfo.$, 0);
            this._ax = new Dictionary$2(String_$type, Array_$type, 0);
            this._ay = new Dictionary$2(Number_$type, UnknownShape.$, 0);
            this._aj = new WorkbookLoadManagerExcel2007_FontCollection();
            this._ak = new WorkbookLoadManagerExcel2007_FontCollection();
            this._a9 = new List$1(WorkbookLoadManagerExcel2007_NamedReferenceInfo.$, 0);
            this._ba = ((() => {
                let $ret = new List$1(WorkbookReferenceBase.$, 0);
                $ret.add(this._b._bb);
                return $ret;
            })());
            this._az = new Dictionary$2(String_$type, List$1.$.specialize(WorksheetShape.$), 0);
            this._a0 = new Dictionary$2(WorksheetShape.$, EG_Anchor.$, 0);
            this._a1 = new Dictionary$2(WorksheetShape.$, CT_Transform2D.$, 0);
            this._a3 = new Dictionary$2(Number_$type, WorkbookStyle.$, 0);
            this._a2 = new Dictionary$2(String_$type, Sheet.$, 0);
            this._au = c == null || c.isDuplicateFormulaParsingOptimized;
            this._an = new WorkbookSerializationDataExcel2007(1, new ObjectModelExcelDocumentManager(0, this, e || c._d, b, d));
        }
        static staticInit() {
            WorkbookStyleCollection._n = WorkbookLoadManagerExcel2007._bq;
            StandardTableStyleCollection._h = WorkbookLoadManagerExcel2007._af;
            ExcelUtils.co = WorkbookLoadManagerExcel2007._bl;
            Workbook._e1 = WorkbookLoadManagerExcel2007._ah;
            Workbook._e0 = WorkbookLoadManagerExcel2007._ag;
            WorkbookOptionsBase._e = WorkbookOptionsBase._e || (() => new PackageFactory());
        }
        disposeCore(a) {
            if (a) {
                this._ai.dispose();
            }
            super.disposeCore(a);
        }
        _r() {
            if (this._be.count == 0) {
                return null;
            }
            return this._be._inner[0].g;
        }
        _p() {
            this._i.add(this._b._bb);
            return WorkItemExtensions.a(this._ai._n(), () => {
                this._b._n = this._ai._h;
                this._b._o = this._ai._i;
                this._b._gx = this._al.d;
                this._b._gy = this._am.d;
            });
        }
        _z() {
            for (let a of fromEnum(this._bh)) {
                this._y(a.a, a.b);
            }
            for (let b of fromEnum(this._b._namedReferences$i)) {
                if (b._j != null) {
                    b._j._cv(this._b);
                }
            }
            super._z();
            this._b._ho((c, d) => {
                let e = new FormulaContext(1, this._b, d);
                let f = WorkbookLoadManagerExcel2007_UpdateIndexedWorkbookReferencesVisitor.a1(e, this);
                f.h();
            }, this._b._namedReferences$i, this._b._sheets$i, true);
        }
        _bo(a, b) {
            this._a2.item(b, a);
        }
        _bp(a, b) {
            let c = this._at(b);
            c.b(Tuple$2.$.specialize(Sheet.$, WorksheetShape.$), Boolean_$type, WorkbookLoadManagerExcel2007_ShapeAnchorApplicator.a, Tuple.a(Sheet.$, WorksheetShape.$, a, b));
            this._br(a, b);
            a._p._add3(b);
        }
        _at(a) {
            let b;
            let c = this._a0.tryGetValue(a, b);
            b = c.p1;
            return b;
        }
        _aq(a) {
            let b;
            let c = this._a1.tryGetValue(a, b);
            b = c.p1;
            return b;
        }
        _ao(a) {
            let b;
            let c = this._a2.tryGetValue(a, b);
            b = c.p1;
            return b;
        }
        _ap(a) {
            let b = this._ao(a);
            return b;
        }
        static _bs(a) {
            if (stringIsNullOrEmpty(a) == false && stringStartsWith(a, "=") == false) {
                a = stringInsert(a, 0, "=");
            }
            return {
                p0: a
            };
        }
        _bu(a, b) {
            this._a0.item(a, b);
        }
        _bv(a, b) {
            this._a1.item(a, b);
        }
        static _aw(a, b, c) {
            c = null;
            let d = a.l("dxfId", b);
            if (nullableEquals(d, null)) {
                return {
                    ret: false,
                    p2: c
                };
            }
            let e;
            if (((() => { let f = tryParseInt32_1(d.value.d, e); e = f.p1; return f.ret; })()) == false) {
                return {
                    ret: false,
                    p2: c
                };
            }
            if (e < 0 || b._b7._g.count <= e) {
                return {
                    ret: false,
                    p2: c
                };
            }
            c = b._b7._g._inner[e];
            return {
                ret: true,
                p2: c
            };
        }
        static _bl(a) {
            for (let b of fromEnum(a.getRelationships())) {
                if (b.relationshipType != WorkbookPartManagerBase.a7 && b.relationshipType != WorkbookPartManagerBase.a6) {
                    continue;
                }
                let c = PackageUtilities.ak(b);
                let d = a.getPart(c);
                switch (d.contentType) {
                    case WorkbookPartManagerBase.a9:
                        {
                            if (b.relationshipType == WorkbookPartManagerBase.a6) {
                                return toNullable(WorkbookFormat_$type, 6);
                            }
                            return toNullable(WorkbookFormat_$type, 2);
                        }
                    case WorkbookPartManagerBase.a5: return toNullable(WorkbookFormat_$type, 3);
                    case WorkbookPartManagerBase.a4: return toNullable(WorkbookFormat_$type, 4);
                    case WorkbookPartManagerBase.a8: return toNullable(WorkbookFormat_$type, 5);
                    default: break;
                }
            }
            return toNullable(WorkbookFormat_$type, null);
        }
        static _bq(a) {
            let b = new Workbook(2);
            {
                let c = new WorkbookLoadManagerExcel2007(b, null, new WorkbookLoadOptions(), toNullable(ST_ConformanceClass_$type, 0), null);
                try {
                    c._ai._bh();
                    WorkItemScheduler.b().d(c._ai._m);
                    let d = WorkbookLoadManagerExcel2007._ar(c._ai);
                    if (d == null) {
                        return;
                    }
                    WorkItemScheduler.b().d(d.a());
                    for (let e of fromEnum(b._styles$i)) {
                        let f = typeCast(WorkbookBuiltInStyle.$, e);
                        if (f == null) {
                            continue;
                        }
                        a.add(f);
                    }
                }
                finally {
                    if (c != null) {
                        c.dispose();
                    }
                }
            }
        }
        static _af(a) {
            let b = new Workbook(2);
            return Async.p(WorkbookLoadManagerExcel2007.$, Base.$, new WorkbookLoadManagerExcel2007(b, null, new WorkbookLoadOptions(), toNullable(ST_ConformanceClass_$type, 0), null), (c) => {
                c._av = true;
                c._ai._bh();
                WorkItemScheduler.b().d(c._ai._m);
                let d = WorkbookLoadManagerExcel2007._as(c._ai, a);
                if (d != null) {
                    return d.a();
                }
                return null;
            });
        }
        static _ah(a, b, c, d) {
            return Async.n(WorkbookLoadManagerExcel2007.$, new WorkbookLoadManagerExcel2007(a, b, c, toNullable(ST_ConformanceClass_$type, null), d), (e) => e._o());
        }
        static _ag(a, b, c) {
            if (c == null) {
                c = new PackageFactory();
            }
            return Async.n(ExcelThemeDocumentManager.$, new ExcelThemeDocumentManager(a, new WorkbookLoadManagerExcel2007_FontCollection(), new WorkbookLoadManagerExcel2007_FontCollection(), c, b, true, toNullable(ST_ConformanceClass_$type, 0)), (d) => d._n());
        }
        static _bj() {
            return new MemoryStream(2, Convert.fromBase64String(WorkbookLoadManagerExcel2007._bm));
        }
        static _ar(a) {
            let b = new MemoryStream(0);
            {
                let c = WorkbookLoadManagerExcel2007._bj();
                try {
                    if (c == null) {
                        return null;
                    }
                    try {
                        {
                            let d = new GZipStream(c, 0);
                            try {
                                let e = new Array(4096);
                                while (true) {
                                    let f = d.read(e, 0, e.length);
                                    if (f == 0) {
                                        break;
                                    }
                                    b.write(e, 0, f);
                                }
                            }
                            finally {
                                if (d != null) {
                                    d.dispose();
                                }
                            }
                        }
                    }
                    catch (g) {
                    }
                }
                finally {
                    if (c != null) {
                        c.dispose();
                    }
                }
            }
            b.position = 0;
            return ObjectModelStylesPartManager.a9.e(a, b);
        }
        static _bk() {
            return new MemoryStream(2, Convert.fromBase64String(WorkbookLoadManagerExcel2007._bn));
        }
        static _as(a, b) {
            let c = new MemoryStream(0);
            {
                let d = WorkbookLoadManagerExcel2007._bk();
                try {
                    if (d == null) {
                        return null;
                    }
                    try {
                        {
                            let e = new GZipStream(d, 0);
                            try {
                                let f = new Array(4096);
                                while (true) {
                                    let g = e.read(f, 0, f.length);
                                    if (g == 0) {
                                        break;
                                    }
                                    c.write(f, 0, g);
                                }
                            }
                            finally {
                                if (e != null) {
                                    e.dispose();
                                }
                            }
                        }
                    }
                    catch (h) {
                    }
                }
                finally {
                    if (d != null) {
                        d.dispose();
                    }
                }
            }
            c.position = 0;
            return new WorkbookLoadManagerExcel2007_PresetTableStylesPartManager(b).e(a, c);
        }
        _br(a, b) {
            let c = typeCast(WorksheetShapeGroupBase.$, b);
            if (c == null) {
                return;
            }
            for (let d of fromEnum(c._shapes$i)) {
                this._bt(a, d, c);
                this._br(a, d);
            }
            c._d3();
        }
        _bt(a, b, c) {
            let d = this._aq(b);
            let e = this._aq(c);
            let f = this._ae(d, b._b6, e, c._getBoundsInTwips());
            b._setBoundsInTwips(a, f);
        }
        get _bb() {
            return this._an.b;
        }
        get _bc() {
            return this._an.c;
        }
        get _bd() {
            return this._an.d;
        }
        get _be() {
            return this._an.e;
        }
        get _ai() {
            return this._an.a;
        }
        get _bf() {
            return this._an.f;
        }
        get _bg() {
            return this._a8;
        }
        get _a4() {
            return this._ax;
        }
        get _a5() {
            return this._ay;
        }
        get _al() {
            return this._aj;
        }
        get _am() {
            return this._ak;
        }
        get _bh() {
            return this._a9;
        }
        get _bi() {
            return this._ba;
        }
        get _a6() {
            return this._az;
        }
        get _a7() {
            return this._a3;
        }
    }
    WorkbookLoadManagerExcel2007.$t = /*@__PURE__*/ markType(WorkbookLoadManagerExcel2007, 'WorkbookLoadManagerExcel2007', WorkbookLoadManager.$);
    WorkbookLoadManagerExcel2007._bm = "H4sICCUTME8AAHByZXNldENlbGxTdHlsZXMueG1sAO1cac/SQBD+buJ/aOoRNWrvSxEPFDUxajyiiRrTFxastl0sRcFf724L292yvbSwmCgxpdt9Zp55ZnbaQnkHd9dRKP0AyTKA8R1Zu6nKEogncBrE8zvy2zfjG64sLVM/nvohjMEdeQOW8t3h+XODZboJwesvAKQSMhEv78hf0nRxS1GWky8g8pc34QLE6MgMJpGfot1kriwXCfCnSwyKQkVXVVuJ/CCWh4N4FY2jdClN4CpO78gmGZLyzdMpGtRlKbc2glNE5fOVy99XML19Md9cky5cv3BB/Xz19t6Bj1eyQx85h/LtjXyTYe99viorPPda2T3tkXXSya7ZJqybakVk26PNwd29W0/DKNMoed5zVmtf2WZ0OJjBuEisrsn5yHCw/CX98ENUcxqeP4EhTKQUlQ7ynY3EfgTyGSM/DM6SAA/O/CgIN/mwjgdwte3mRUEMk8w59nBsP2fK8XytGnyp7Z0xdoMjxsDo5e75Msq+IuTKb/blf23yZTX76i0u44i+tMP64vlJ5md35PEYNXJN7VBzf+XMG6nI39Gc2dbRIjPQy+k1sjOl0aExPqLD8X3n4dHk7N9Zw3Lr1VdNYHjB9RtYUJ82B796rZNjqdh0ouxwRsvs5pvssiYIQ3JZYxhyPjIcLPw0BUk8RjvS9v2bzQL5itH1c24HHWqcPU/8jaZb7QFLGAZTzGI+olM3sh+NR48yMxT0L40is84BjD564I16NzoaeV7fRnX86tnofQu/ejaaCdCbpttFY/ZuT0oDvIrUm47nea5mu67rmYZmmpnIZ9vpQTwFa4BuVezeZNpnYHnon+F6to6IqKZrHZ2BgQg4luVamqeb6L92HAb92xOdVUt4Vi3hWbV7tyc6q7bwrNrCs+r0bk90Vh3hWXWEZ9Xt3Z7orLrCs+oKz2pvF587e8Kz6gnPqtdjVrPNEmFgMgXJ9o4u+wh1NzYchGCWInwSzL/gbQoXCj6YpjBCb6aBP4exH2IPOaIVUsLfoKBg0i/B5BtyNtm/xs4nHsoD0dDEdWQ6puqYlm7rfbqOwDRYRdh3l6vd1t6pCGO58kMLBU/NebZFZHOzkFoC0Mxd7C0RfcRo4FenGDNElxgzQKcYM0S3GBuqaApXZyEo+UH/XFX9s3rJDXZTsxFT6Nkagua2i/UPNK1L0QMdv7rUTY7oUDc5oEvdZIi/6T608b2W01Lv1v13+2aJgCAMX2Nj72fk9GHjDwTXM+r7VRV/vRrv3uKTzvZtbiffUapBeiVI8heLcPN8FZ2BZJx9g1uM4lNdsfcgQxX798NgHkcgpgAvE5iCSYqeBvjH+Jj/+dTy0f7z+c/nP5//fP7zOUk+dgUfrQOfv/FvnYIeXvv8jGF8OB6mfipEzFMhop0KEeNEiFBrxxCxdoYDfzcFP8CbBhP8qAK6w8FMF2SqFMLJN7C7u1DWs+ownIow9A5hNNKukdGt8G8I9n/QNNbw8Qo+ens+fTLQqFtVQxAFapGbgihQ97oWTcHkUOjJJdVSbNqldTiXJuXySFFWXXTYHVbcXxGgrrocmoBzuJidE+sy1PpyaT5uPR8Y9yXIqbXdqk+2vA58/sa/RvV9r70gfUpA1YTWISeHoqAJouBRHESdgWkOok7BFAVRp2CKgiWIAp0J+wQ4OII4UBRc8RREdUj64lxUi6Q5iOqRFAVRLZKiIKpD0pkQ1SJpDqJ6JEVBVIukKIjqkHQmRLVImoOoHkl9eCCqRVIURHVIj+IgqEXqqoh7rD//hFKhnqmgn7Bgnq8ohiX8Cy4c5SXphnR/MkEOUbLXs0xyXPyrIEQPnG0LUalH6jukabBIswlpEKTDIt0mpLlDWhqDNPUmpEWQFou0m5A2QbIKWVyFzH1t8SAbp9aELLQ1WaTVhCy0dVmk14QstNVZhYwmZKGtzSKdBmShra2y2nIVsrnaamycehOy0NZikXYTstDWY+NUm5CFtgaLNJuQhbYOi3SbkIW2GqstV6FyN2CrR+dWT1lPndWTWzdlJW0Ww62YsoYqqwS3VsrqmSyGu47K691lMVwNHvjT3XzdYTXjxJL9cnayCn3cz4nWGovTubgvYPJNGqFRAjNYmMGFwfAZ+AHCzySzRZK2ewGegE9ftfgiy1V4rRZPMm5X4fVaPMm+W4Wvj59UgqZWGTBrDdjEQKWCVq0BhxiolNDmG4gin2Sv1O0qAdIH9RMB0SFXeVklCfqDRhtCstTi6jC0L43ND3cNPFovQj/2U5hspDdgnZKKZmvD4kY3hmEIf4Kp9AT98iEJg/gbqSw2Mdzl+hjCYr2WSpGryxPg47/xJGkkQPasodWidOLLYFFOHcogKJNFuXUok6BKDLlC7Kmns+pxXT2NF6uUADxWPm7/eIY8gCnbt0rrh1taz8EqTXyC0Uur3uVi0FV5AWFrXuUDUkBYlUTjAl6sUkoAo9RJuA3wJUjwSYVUD32OqOgYr+DPUs/WWG71PbvA64RpFV6rxZM6tKrwei2eVKRThTfq8EXP9qrwZi2+aNkVAjYloGjZJQUbWvabIA0Bwdos1uIiYOoXK6R0IcFFvPOTGC17toGW+kX+o4/irhDtFH+Obvgb2AlhytROAAA=";
    WorkbookLoadManagerExcel2007._bn = "H4sICPuS504AAHByZXNldFRhYmxlU3R5bGVzLnhtbADs3d2uEjEQAOB7E9+B7L0ui/1bg3hhNDHRxKgvgLIqEVgD6++reeEj+QoW8J/qdNrptk1q4g/nzE6nB858x6Q7fP38ZX77w3YzedftD+t+d6tqrk+rSbd73q/Wu5e3qrfDi2uqur24emX+Zt8duuHp8tmmezJ83HSHib5wd7hVvRqGNzfr+vD8VbddHq73b7qd/syLfr9dDvrh/mV90NcuV4dXXTdsN/VsOhX1drneVYv5r3QPu9X67XamFvPVhxeHyfP+7W64Vcnq9Hgxf7HebBbzN8th6Pa7e/rB5Pu/n358092qDv1mvap02Ms7/abfTwZdi/5wW02G9THP9Dpv9a8bqhWzVjVTpnhVL+bPcOH1b+vrRy/Of+n6siqy3w06qY58/nva5nTt8ZNho5/1+1W3X8yH/s3koJ94/ent6amv/rqoPV2kw/Sf54uwS/0V/c9IgidOtq1+CoRSqmU3GsZmpycOF2584n7sfNO9GH58vYZXp++d5/9IfkMnl5wr3rQzpn+fN6oT6I3u1y9f+eU5ZTg9fV5p9PXHzQ1Dv/XKc06xmOsGNqyfLzdeyX4kWcxf9fv1J/3S8Ez4K81fL+Lznwf9dfzZAH/2vKaarLoXy7eb7832vP7fnbL9GfVo/a4fvkf9+veD4/PUiOr3JSa75bHsy6ZbTd7oC48bqX523j+uvLvRG94Nk+H0/fD+Vb/pTlmqid7G/dUxvP53/KtuqXf+uH//M1z8L3zo9Rfs92j+v+gX6/1h0N9ob7e7nxew/12wWV7E3wAX0OU8GfbrN792PAOvOS/y12XnF8av6/54cNCPTCRefEySMqlwAilfgbIo0sEXwmhrJlXyTCockyokk6qiYRLMY8ckmMaSSTAPhkkwGZZJMGEmTMrCZJ0uk9LApCBlUuIEkr4CZVGkgy+E0dZMyuSZlDgmZUgmZUXDJJjHjkkwjSWTYB4Mk2AyLJNgwkyYFIXJOl0mhYFJTsqkwAkkfAXKokgHXwijrZkUyTMpcEyKkEyKioZJMI8dk2AaSybBPBgmwWRYJsGEmTDJC5N1ukxyA5OMlEmOE4j7CpRFkQ6+EEZbM8mTZ5LjmOQhmeQVDZNgHjsmwTSWTIJ5MEyCybBMggkzYZIVJut0mWQGJm+QMslwAjFfgbIo0sEXwmhrJlnyTDIckywkk6yiYRLMY8ckmMaSSTAPhkkwGZZJMGEmTN4oTNbpMnnDwOSMlMnpj9fxNf1CZro1iZkQQk7lDS7bUydDxoMGZVKmgzGE0dZUNslT+ftT0bCjfkyyqWR8Js6t8hky3gtLlIgY9lC24QFzUyorimaFojpdimYGippgFIVrFKQUjVOmuYdPvTuzCU4fHCNWZPBy1b/VL1caL8fe2bmyH5LY/ARwjvy5KQzrLj9reBeWEjxNgadOF57GAM+0wDNGmaGaoTId38+zouThwe2swDMmPNMCT50uPNNLeJq2wDNGmaGaoTQdiM+zouThwe2swDMiPE1b4KmTheeIzMXHaOebgB2avKNnUmaoZihMR8zzrCh5eHA7K/CMCU+ZGAIuEBEeZYCHdmII2KHJO3omZYZqhqZjhD5nBSNWlDw8uJ0VeMaEp8zgABeICI80wEM7gwPs0OQdPZMyQzVDZjoGnWdFycOD21mBZ0x4ylQLcIGI8AgDPLRTLcAOTd7RMykzVDM0VZtpRcnDg9tZFHhGORAegLRyKPzUjMu0C3CBiHxyA5+00y5a3B2yre8dslkUGaqd4w4pl4rgin4X/FdLfv66+ruuSIC77eZslMWGPPx23Q/qvuzW575sG6GnTkJPcxK6DNoAF4goNDMITTtoQ+HwU774ZVFkqH6NO81dKoIrSl1ot92kK7TCCa2K0N5Clxkf4AIRhb5hEJp2xofE4Sd98cuiyFD9GnfsvVQEV5S60G67SVdoiRNaFqG9hS6jT8AFIgo9MwhNO/pE4PATvvhlUWSofo27P6BUBFeUutBuu0lXaIETWhShvYUuM2LABSIK3RiEpp0Rw3H4cV/8sigyVL/G3UhRKoIrSl1ot92kKzTHCc2L0N5Cl2E64AIRhTYM06GdpcNw9jFf+7IoMlS7xt1wUiqCK0odaLfdpAs0wwHNCtC+QJeZQ+AC8Xw2jBwKN3FonDdwyKTMUA0bd2tOqQiuKHWi3XaTLtHgLYYktyQWpH9PVeYzgQvEQ9ownol2OlOL+6G4dfmh2JvoduQiHd5BiTDa+hbgNpI6uDuI7M2wvX+3rWje/RDMY/c2UGAay3eIAvOcU9gaBKbLg6cyxQlcIB5PhiFOtDOcFK7zK9/On0WRMCEho615UpF4wt0+Q8+Tqmh4AvPY8QSmseQJzIPjCUyXB09l1hO4QDyeDKOeaCc9SVznl76dP4siYUJCRlvzJCPxhLt3hJ4nWdHwBOax4wlMY8kTmAfHE5guD57KLCVwgXg8GUYp0U5SErjOL3w7fxZFwoSEjLbmSUTiCXfjBD1PoqLhCcxjxxOYxpInMA+OJzBdHjyVQULgAvF4MswRoh0jxHGdn/t2/iyKhAkJGW3NE4/EE+6uAXqeeEXDE5jHjicwjSVPYB4cT2C6PHgqU3TABeLxZBiiQztDh+E6P/Pt/FkUCRMSMtqaJxaJJ9yZeXqeWEXDE5jHjicwjSVPYB4cT2C6PHgqI2TABeLxZJggQztABjz7SnJW1hsocFnyMmFGQkZbE5XHG3jQE4VyCIMNShQXNnKyoQwvAReIZ8OP2SW/ntQZrQ0t7n8Fre//CrIoEu7dIaOtXXA71f1rKdybLrW+N/rYtv0W0/ZbRNtvMW2/Rb/hUut0A1CbBRXn1lOoABeIQcVPF/7+EO2UK4Xrwsq3C2dRJNxjQ0ZbU+F2wtqVCjUWFQpDhUJQoTBUKDQVyokKlREVZeASuEA8KqYXVDS085YkrgtL3y6cRZFwjw0ZbU2F22lnVyrkWFRIDBUSQYXEUCHRVEgnKmQ+VDRl9g+4QDQqji78/SHa2T8C14WFbxfOoki4x4aMtqbC7eSxKxViLCoEhgqBoEJgqBBoKoQTFSIjKsoEGnCBeFSoSypoJ9BwXBfmvl04iyLhHhsy2poKt1PArlTwsajgGCo4ggqOoYKjqeBOVPCMqCjTYMAF4lEhL6mgnQbDcF2Y+XbhLIqEe2zIaGsq3E7kulLBxqKCYahgCCoYhgqGpoI5UcEyoqJMZgEXiEeFuKSCdjILeIyU/NhpJmXCfTZktDUXbqdjXbloxuIixcOvNlw0TlzkcWD2HFQmpYALfGvvXHLbhoEAui/QO+QG1oeiyH2P0Av0k1WBFmh7f7S2WseRBMyPQw6D8Zohh0z8XmzNDNvpYjnqIrzWxThsvsC/FV8SEnd/lkrz4NMY9WZBYFNz9L+Inu4v2AO8DcmrJNr3OCaIolK6rF14h6cTemcavTON3olE7xUJSpwcXuhN0MOd3jhD/Hr+8uP71/sPETSxRUYxxbZWGVWEoyp2XUsy1RQJSfhS8+CzGPVmQdBcczT6cwJvG3I/tG8yTPBDpRxZu36YXQ8X18PmgoMeJqEeViTWS82Dz1zUmwWBcM3RaD3wtiHXQ/smvwQ9VMqLtauHyfVwcT1sLjjoYRTqISKxXmoefLai3iwIhGuORuuBtw25Hto32SXooVIurF09jK6Hi+thc8FBD4NQDwsS66XmwWco6s2CQLjmaLQeeNuQ66F9k1uCHirlv9rVw+B6uLgeNhfs9ZCFdghIqpeaB5+UqDcLguCao9F24G1Dbof2PWYJdqiU8mrWDtnlcHE53Eywd0MSumFEMr3UPPgMRL1ZEPzWHI12A28bcjd4c1cwndeOG5K74eJuuJlg74ayJdaZVpKWpSVpXQR5juD8UGAxhZzXdby+1pRnkjXqzoOUKy+ZlhYCTGdWy1laEPhzEIZrRyZeGQ0u0Kx+4VgYXbYuOtHQmaTo7CLIc5glFEeszYPkGi8ZlhYCDExWn1haEPhzEIZrh+9ezgwu0Izvx2rmssXMKw2dqxSdXQR5DrMVxRFr8yC5xstmpYUAA5PV3JUWBP4chOHa4bvXH4MLNOP7sfw4FOV7pKEzStHZRZDnMIsojlibB8k1XjoqLQQYmKyOrLQg8OcgDNcO34Pz/WKV78ea4bko3xcaOhcpOrsI8hxmC4oj1uZBco2XT0oLAQYmq40qLQj8OQjDtcP32fl+scr3Y9HvVJTvgYbOIEVnF0GewyygOGJtHiTXeBmhtBBgYLJ6n9KCwJ+DMFw7fPfL9sEFmvH9WLVb9jplsOtm8S6dnYQJZ0xqjkbSiJeLCbcSJWceUhIt8XsSBmWHsH4PMbhAM8K+Knz98Onnt7EsYR+yPZb89zWnHKecxiGkrRiSNhwEVxdBwmDSHF02171wnju/PSdruUT77JT4n51M4Pj2Bnccgwu0wPHtd3PEcdlL4SONdFFKui6ChJGpOdo0jvntzljLRRqO41vAsV+9Di7QDMfDHsdl710PNNAFKei6CBImpuZo0zTmt49hLRdoNA5vgMb5yb8OBhdoheO8p3HZq80fvzWdQ84pTjHGdVjnZd0+lhLH67wrwWWLhwlTU3O0aSLzy/JZy4Ff7Bd8EGCGyX6LOLhAKyKnPZGVytvPn11/Jo3WeUfWDVGru4j+Ls76jJxf2TfcO42QHuv1dAjXziioU7gObHkMO2XcjoE0+vwYXoyOOQTqA175EdCsTrmPcuA8RpZviPNUxYz/vQECuEAr/697/yu1P0AROTGILPZ/3RC1gKe/iw78X+8QTPs/kfyf3P8d+J9zqZ0Z/3uDDHCBVv6Pe/8rtcdAEXllEFns/7ohagFPfxcd+L/eIZj2/0ry/+r+78D/nDQeM/73BirgAq38v+z9r9Q+BUXkyCCy2P91Q9QCnv4uOvB/vUMw7f9I8n90/3fgf861lGb87w12wAVa+T/s/a/UXgdF5IVBZLH/64aoBTz9XXTg/3qHYNr/C8n/i/u/A/9zEsfN+N8bMIELtPL/vPe/UvslFJEDg8hi/9cNUQt4+rvowP/1DsG0/wPJ/8H934H/OTfLmvG/V2SBC7Ty/7T3f9nmMeN/uGCAfB+M57HY/jUD1IOd7h46MH+tIzDt/fu+cKVl9+GUyjI3f23zP/yawvXXtITp72te1rSk215pw3v4f8H7G4ELtPp/Ybz+Bf18/vX8++PDqPfv/gCziItLhJABAA==";
    return WorkbookLoadManagerExcel2007;
})();
/**
 * @hidden
 */
export let WorkbookLoadManagerExcel2007_PresetTableStylesPartManager = /*@__PURE__*/ (() => {
    class WorkbookLoadManagerExcel2007_PresetTableStylesPartManager extends ObjectModelStylesPartManager {
        constructor(a) {
            super();
            this.ds = null;
            this.ds = a;
        }
        z(a) {
            if (a == "http://purl.oclc.org/ooxml/spreadsheetml/main/presetTableStyles") {
                return 3;
            }
            if (this.s.a(WorksheetTableStyle.$) != null) {
                return super.z(a);
            }
            let b = this.a7;
            b._b7._g.clear();
            b._b7._bf.clear();
            b._b7._h.clear();
            b._b7._bg.clear();
            let c = new WorksheetTableStyle(IOPath.getFileName(a), false);
            c._s = true;
            if (stringStartsWith(c.name, "Table")) {
                this.ds.add(c);
            }
            this.s.k(c);
            return 3;
        }
        t() {
            let a = super.t();
            return WorkItemExtensions.g(Base.$, a, () => {
                for (let b of fromEnum(this.ds)) {
                    b._s = false;
                }
                return WorkItemExtensions.m(Base.$, a);
            });
        }
    }
    WorkbookLoadManagerExcel2007_PresetTableStylesPartManager.$t = /*@__PURE__*/ markType(WorkbookLoadManagerExcel2007_PresetTableStylesPartManager, 'WorkbookLoadManagerExcel2007_PresetTableStylesPartManager', ObjectModelStylesPartManager.$);
    return WorkbookLoadManagerExcel2007_PresetTableStylesPartManager;
})();
/**
 * @hidden
 */
export let WorkbookSaveManagerExcel2007 = /*@__PURE__*/ (() => {
    class WorkbookSaveManagerExcel2007 extends WorkbookSaveManager {
        constructor(a, b, c, d) {
            super(a, ExcelUtils.ee(b), c);
            this._cd = null;
            this._cc = new WorkbookSerializationDataExcel2007();
            this._cf = null;
            this._cg = null;
            this._cw = 0;
            this._cl = null;
            this._ci = null;
            this._ce = null;
            this._cj = null;
            this._ch = null;
            this._cd = new Dictionary$2(WorksheetCellFormatData.$, Number_$type, 0);
            this._cf = ((() => {
                let $ret = new Dictionary$2(WorkbookReferenceBase.$, Number_$type, 0);
                $ret.addItem(a._bb, 0);
                return $ret;
            })());
            this._cg = new Dictionary$2(ExcelImage.$, Uri.$, 0);
            this._cl = new List$1(SerializationNumberFormatInfo.$, 0);
            this._ci = new Dictionary$2(Base.$, Number_$type, 0);
            this._cc = new WorkbookSerializationDataExcel2007(1, new ObjectModelExcelDocumentManager(1, this, c._d, b, toNullable(ST_ConformanceClass_$type, d)));
        }
        static staticInit() {
            Workbook._e3 = WorkbookSaveManagerExcel2007._b9;
            WorkbookOptionsBase._e = WorkbookOptionsBase._e || (() => new PackageFactory());
        }
        disposeCore(a) {
            if (a) {
                this._cb.dispose();
            }
            super.disposeCore(a);
        }
        _a8(a) {
            let b;
            let c = this._cd.tryGetValue(a, b);
            b = c.p1;
            return b;
        }
        _a9(a) {
            let b;
            let c = this._av.tryGetValue(a, b);
            b = c.p1;
            return b;
        }
        _bm() {
            let a = new Dictionary$2(FillInfo.$, Number_$type, 0);
            let b = new Dictionary$2(BorderInfo.$, Number_$type, 0);
            this._ct(((() => {
                let $ret = new FillInfo();
                $ret.d = ((() => {
                    let $ret = new PatternFillInfo();
                    $ret.j = toNullable(FillPatternStyle_$type, 0);
                    return $ret;
                })());
                return $ret;
            })()), a);
            this._ct(((() => {
                let $ret = new FillInfo();
                $ret.d = ((() => {
                    let $ret = new PatternFillInfo();
                    $ret.j = toNullable(FillPatternStyle_$type, 17);
                    return $ret;
                })());
                return $ret;
            })()), a);
            this._cs(BorderInfo.a(this, new WorksheetCellFormatData(null, 1)), b);
            let c = this._b._styles$i.normalStyle;
            this._cz(c, a, b);
            this._cn.add(new StyleInfo(1, this, c));
            for (let d of fromEnum(this._b._styles$i)) {
                if (d == c || d._p == false) {
                    continue;
                }
                this._cz(d, a, b);
                this._cn.add(new StyleInfo(1, this, d));
            }
            for (let e of fromEnum(this._b._styles$i._u())) {
                if (e == c) {
                    continue;
                }
                this._cz(e, a, b);
                this._cn.add(new StyleInfo(1, this, e));
            }
            let f = this._b._ca;
            this._cy(f._p, a, b);
            for (let g of fromEnum(f)) {
                if (g == f._p) {
                    continue;
                }
                this._cy(g, a, b);
            }
            if (this._b._ct) {
                for (let h of fromEnum(this._b._b2.m())) {
                    this._cl.add(((() => {
                        let $ret = new SerializationNumberFormatInfo();
                        $ret.c = intSToU(h);
                        $ret.b = this._b._b2.ad(h);
                        return $ret;
                    })()));
                }
            }
        }
        _bt() {
            super._bt();
            if (this._b._dz != null) {
                let a = 1;
                for (let b of fromEnum(this._b._dz.values)) {
                    this._ck.addItem(b, a++);
                }
            }
        }
        get__ai() {
            return true;
        }
        get _ai() {
            return this.get__ai();
        }
        _b6(a) {
            let b = super._b6(a);
            a = b.p0;
            let c = typeCast(WorksheetChart.$, a);
            if (c != null) {
                return {
                    p0: a
                };
            }
            let d = typeCast(UnknownShape.$, a);
            if (d != null) {
                if (d._eg != null && d._ef != null) {
                    a = null;
                    return {
                        p0: a
                    };
                }
                if (d._b3 == null) {
                    a = null;
                    return {
                        p0: a
                    };
                }
            }
            return {
                p0: a
            };
        }
        _p() {
            return this._cb._r();
        }
        _bn(a) {
            let b = ConditionalFormattingSerializer.a(a);
            if (b != null) {
                if (this._ce == null) {
                    this._ce = new Dictionary$2(Worksheet.$, ConditionalFormattingSerializer.$, 0);
                }
                this._ce.addItem(a, b);
                b.w(this, a._conditionalFormats$i);
            }
        }
        _bo(a) {
            if (a._sparklineGroups$i.count > 0) {
                if (this._cj == null) {
                    this._cj = new Dictionary$2(Worksheet.$, SparklinesSerializer.$, 0);
                }
                this._cj.addItem(a, new SparklinesSerializer(a));
            }
        }
        static _c0(a, b, c) {
            if (ExcelUtils.a8(a)) {
                b = 2;
                c = null;
                return {
                    p1: b,
                    p2: c
                };
            }
            let d = typeCast(StringElementIndex.$, a);
            if (d != null) {
                b = 4;
                c = d.c.toString();
            }
            else if (ExcelUtils.ba(a)) {
                b = 2;
                try {
                    let e = Convert.toDouble3(a);
                    c = numberToString(e, Workbook._fd);
                }
                catch (f) {
                    c = a.toString();
                }
            }
            else if (typeCast(Boolean_$type, a) !== null) {
                b = 0;
                let g = Convert.toInt321(a);
                c = g.toString();
            }
            else {
                if (typeCast(ErrorValue.$, a) !== null) {
                    b = 3;
                }
                else {
                    b = 5;
                }
                c = a.toString();
            }
            return {
                p1: b,
                p2: c
            };
        }
        _cu(a) {
            let b = null;
            if (this._ch == null) {
                this._ch = new Dictionary$2(DisplayUnit_$type, String_$type, 0);
                let c = ExcelUtils.ef("LD_Chart_AxisDisplayUnits");
                let d = stringSplit(c, [","], 1);
                for (let f = 0; f < d.length; f++) {
                    let e = d[f];
                    let g = stringSplit(e, [":"], 1);
                    if (g.length != 2) {
                        continue;
                    }
                    g[0].trim();
                    g[1].trim();
                    let h;
                    if (((() => { let i = EnumUtil.tryParse$1(DisplayUnit_$type, g[0], true, h); h = i.p2; return i.ret; })()) == false) {
                        continue;
                    }
                    if (((() => { let i = this._ch.tryGetValue(h, b); b = i.p1; return i.ret; })()) == false) {
                        this._ch.addItem(h, g[1]);
                    }
                }
            }
            if (((() => { let i = this._ch.tryGetValue(a, b); b = i.p1; return i.ret; })()) == false) {
                return null;
            }
            return b;
        }
        _cv(a) {
            if (a == null) {
                return null;
            }
            let b = new GetFormulaStringInfo(this._ck, true);
            let c = XLSXFormulaStringGenerator.bx(a, b);
            let d = c.a2();
            if (d.d == false) {
                return stringEmpty();
            }
            return d.b;
        }
        _cx(a, b, c, d) {
            d = null;
            c = false;
            let e = b._bg;
            let f;
            if (((() => { let g = this._ci.tryGetValue(e, f); f = g.p1; return g.ret; })()) == false) {
                c = true;
                d = a._c2(b);
                this._ci.item(e, f = this._cw++);
            }
            return {
                ret: f,
                p2: c,
                p3: d
            };
        }
        _b8(a, b) {
            return Async.d(WorksheetShape.$, a, (c) => {
                let d = typeCast(WorksheetShapeGroupBase.$, c);
                return Async.g(d != null, () => this._b8(d._shapes$i, b), () => {
                    let e = typeCast(IWorksheetImage_$type, c);
                    if (e == null) {
                        return null;
                    }
                    let f = e.image;
                    if (f == null) {
                        return null;
                    }
                    let g = null;
                    let h;
                    return WorkItemExtensions.a(Async.g(((() => { let i = this._cg.tryGetValue(f, h); h = i.p1; return i.ret; })()), () => {
                        if (((() => { let i = b.tryGetValue(f, g); g = i.p1; return i.ret; })()) == false) {
                            g = this._cb._a1(h, this._cb._cd());
                        }
                        return null;
                    }, () => WorkItemExtensions.e(Tuple$2.$.specialize(Uri.$, String_$type), this._cb._b0(f, e.preferredFormat), (i) => {
                        let j = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), i);
                        h = j.c;
                        g = j.d;
                        this._cg.addItem(f, h);
                    })), () => b.item(f, g));
                });
            });
        }
        _cs(a, b) {
            let c;
            if (((() => { let d = b.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                return c;
            }
            c = this._cm.count;
            b.item(a, c);
            this._cm.add(a);
            return c;
        }
        _ct(a, b) {
            let c;
            if (((() => { let d = b.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                return c;
            }
            c = this._cq.count;
            b.item(a, c);
            this._cq.add(a);
            return c;
        }
        _cy(a, b, c) {
            this._bf(a._bp, a);
            let d = ((() => {
                let $ret = new FormatInfo();
                $ret.r = toNullable(Number_$type, intSToU(this._ct(FillInfo.a(this, a), b)));
                $ret.o = toNullable(Number_$type, intSToU(this._cs(BorderInfo.a(this, a), c)));
                $ret.i = a.formatOptions;
                $ret.b = AlignmentInfo.d(a);
                $ret.t = toNullable(Number_$type, a._bp._r.value);
                $ret.d = ProtectionInfo.a(a);
                $ret.v = toNullable(Number_$type, intSToU(a._cs));
                return $ret;
            })());
            if (a._b1 == 1) {
                this._co.add(d);
            }
            else {
                if (a.style != null) {
                    d.p = toNullable(Number_$type, this._a9(a.style));
                }
                this._cd.addItem(a, this._cp.count);
                this._cp.add(d);
            }
        }
        _cz(a, b, c) {
            this._av.addItem(a, this._co.count);
            this._cy(a._i, b, c);
        }
        static _b9(a, b, c) {
            if (a._cw && (c == null || !c._i)) {
                return OleDataSpaces.a(b, a._l, a._f(), (d) => WorkbookSaveManagerExcel2007._ca(a, d, c));
            }
            else {
                return WorkbookSaveManagerExcel2007._ca(a, b, c);
            }
        }
        static _ca(a, b, c) {
            let d = null;
            return WorkItemExtensions.c(Async.n(WorkbookSaveManagerExcel2007.$, new WorkbookSaveManagerExcel2007(a, b, c, a.currentFormat == 6 ? 1 : 0), (e) => WorkItemExtensions.a(e._o(), () => d = e._cb._b)), () => {
                let e = typeCast(Package.$, d);
                if (e != null) {
                    return e._h;
                }
                return null;
            });
        }
        get _cm() {
            return this._cc.b;
        }
        get _cn() {
            return this._cc.c;
        }
        get _co() {
            return this._cc.d;
        }
        get _cp() {
            return this._cc.e;
        }
        get _cb() {
            return this._cc.a;
        }
        get _ck() {
            return this._cf;
        }
        get _cq() {
            return this._cc.f;
        }
        get _cr() {
            return this._cl;
        }
    }
    WorkbookSaveManagerExcel2007.$t = /*@__PURE__*/ markType(WorkbookSaveManagerExcel2007, 'WorkbookSaveManagerExcel2007', WorkbookSaveManager.$);
    return WorkbookSaveManagerExcel2007;
})();
/**
 * @hidden
 */
export let CT_Extension = /*@__PURE__*/ (() => {
    class CT_Extension extends Base {
        constructor() {
            super(...arguments);
            this.b = null;
        }
        static c(a, b) {
            b = null;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "uri":
                        b = c.d;
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static e(a, b, c) {
            a.ad.p(b, null);
            let d = null;
            let e = null;
            if (c != null) {
                e = "uri";
                d = c;
                a.ad.h(e, d);
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        d(a, b, c, d) {
        }
    }
    CT_Extension.$t = /*@__PURE__*/ markType(CT_Extension, 'CT_Extension');
    return CT_Extension;
})();
/**
 * @hidden
 */
export let CT_ExtensionList = /*@__PURE__*/ (() => {
    class CT_ExtensionList extends Base {
        constructor() {
            super();
            this.c = null;
        }
        get e() {
            if (this.c == null) {
                this.c = new List$1(CT_Extension.$, 0);
            }
            return this.c;
        }
        setProperty(a, b) {
            switch (a) {
                case 599:
                    this.e.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static d(a) {
            return a != null ? a.e : null;
        }
        static a(a) {
            if (a == null) {
                return null;
            }
            let b = ((() => {
                let $ret = new CT_ExtensionList();
                $ret.c = a;
                return $ret;
            })());
            return b;
        }
    }
    CT_ExtensionList.$t = /*@__PURE__*/ markType(CT_ExtensionList, 'CT_ExtensionList', Base.$, [ISupportSetProperty_$type]);
    return CT_ExtensionList;
})();
/**
 * @hidden
 */
export let CT_Boolean = /*@__PURE__*/ (() => {
    class CT_Boolean extends CT_CommonTypeBase {
        constructor(a) {
            super(a);
            this.m = toNullable(Boolean_$type, null);
            this.l = null;
            this.j = false;
            this.i = false;
            this.f = false;
            this.n = null;
            this.o = 0;
            this.l = new List$1(CT_X.$, 0);
        }
        get k() {
            return this.m.hasValue ? this.m.value : true;
        }
        static d(a, b) {
            let c = toNullable(Boolean_$type, null);
            let d = false;
            let e = false;
            let f = false;
            let g = null;
            let h = 0;
            let i = CT_Boolean.p(a, c, d, e, f, g, h);
            c = i.p1;
            d = i.p2;
            e = i.p3;
            f = i.p4;
            g = i.p5;
            h = i.p6;
            let j = new CT_Boolean(b);
            j.n = g;
            j.o = h;
            j.f = f;
            j.i = e;
            j.j = d;
            j.m = c;
            return j;
        }
        static p(a, b, c, d, e, f, g) {
            b = toNullable(Boolean_$type, null);
            c = false;
            d = false;
            e = false;
            f = null;
            g = 0;
            for (let h of fromEnum(a.ab.u)) {
                switch (h.a.e(a.d)) {
                    case "val":
                        b = toNullable(Boolean_$type, ST_OnOff.e(h.d));
                        break;
                    case "v":
                        c = ST_OnOff.e(h.d);
                        break;
                    case "u":
                        d = ST_OnOff.e(h.d);
                        break;
                    case "f":
                        e = ST_OnOff.e(h.d);
                        break;
                    case "c":
                        f = h.d;
                        break;
                    case "cp":
                        g = parseUInt32_1(h.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g
            };
        }
        static r(a, b, c, d) {
            CT_Boolean.s(a, b, c, d.a, d.n, d.o, d.f, d.i, d.j, d.k);
        }
        static s(a, b, c, d, e, f, g, h, i, j) {
            a.ad.p(b, c);
            let k = null;
            let l = null;
            switch (d) {
                case 2:
                    if (e != null) {
                        l = "c";
                        k = e;
                        a.ad.h(l, k);
                    }
                    l = "cp";
                    k = f.toString();
                    a.ad.h(l, k);
                    l = "f";
                    k = ST_OnOff.g(g);
                    a.ad.h(l, k);
                    l = "u";
                    k = ST_OnOff.g(h);
                    a.ad.h(l, k);
                    l = "v";
                    k = ST_OnOff.g(i);
                    a.ad.h(l, k);
                    break;
                default:
                    l = "val";
                    k = ST_OnOff.g(j);
                    a.ad.h(l, k);
                    break;
            }
        }
        q(a, b, c, d, e) {
            CT_Boolean.r(a, d, e, this);
            switch (this.a) {
                case 2:
                    if (this.l.count > 0) {
                        for (let f of fromEnum(this.l)) {
                            CT_X.e(a, SpreadsheetMLMain.r4, f.b);
                            c.k();
                        }
                    }
                    break;
            }
            c.k();
        }
        setProperty(a, b) {
            switch (a) {
                case 1888:
                    this.l.add(typeCast(CT_X.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? stringFormat("{0} ({1})", a.typeName, this.k) : super.toString();
        }
        static g(a) {
            return a != null ? a.k : false;
        }
        static b(a) {
            let b = new CT_Boolean(3);
            b.m = toNullable(Boolean_$type, a);
            return b;
        }
    }
    CT_Boolean.$t = /*@__PURE__*/ markType(CT_Boolean, 'CT_Boolean', CT_CommonTypeBase.$, [ISupportSetProperty_$type]);
    return CT_Boolean;
})();
/**
 * @hidden
 */
export let CT_UnsignedInt = /*@__PURE__*/ (() => {
    class CT_UnsignedInt extends Base {
        constructor() {
            super(...arguments);
            this.g = 0;
        }
        static c(a, b = false) {
            let c;
            let d = CT_UnsignedInt.h(a, c, b);
            c = d.p1;
            return ((() => {
                let $ret = new CT_UnsignedInt();
                $ret.g = c;
                return $ret;
            })());
        }
        static h(a, b, c = false) {
            b = 0;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "val":
                        let e = d.d;
                        if (stringIsNullOrEmpty(e)) {
                            return {
                                p1: b
                            };
                        }
                        if (((() => { let f = tryParseUInt32_2(e, 511, CultureInfo.invariantCulture, b); b = f.p3; return f.ret; })())) {
                            return {
                                p1: b
                            };
                        }
                        if (c && e.charAt(0) == '-') {
                            e = e.substr(1);
                            if (((() => { let f = tryParseUInt32_2(e, 511, CultureInfo.invariantCulture, b); b = f.p3; return f.ret; })())) {
                                return {
                                    p1: b
                                };
                            }
                        }
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static j(a, b, c, d) {
            a.ad.p(b, c);
            let e = null;
            let f = null;
            f = "val";
            e = d.toString();
            a.ad.h(f, e);
        }
        i(a, b, c, d, e) {
            CT_UnsignedInt.j(a, d, e, this.g);
            c.k();
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? stringFormat("{0} ({1})", a.typeName, this.g) : super.toString();
        }
        static e(a) {
            return a != null ? a.g : 0;
        }
        static a(a) {
            let b = ((() => {
                let $ret = new CT_UnsignedInt();
                $ret.g = a;
                return $ret;
            })());
            return b;
        }
    }
    CT_UnsignedInt.$t = /*@__PURE__*/ markType(CT_UnsignedInt, 'CT_UnsignedInt');
    return CT_UnsignedInt;
})();
/**
 * @hidden
 */
export let CT_Double = /*@__PURE__*/ (() => {
    class CT_Double extends Base {
        constructor() {
            super(...arguments);
            this.f = 0;
        }
        static c(a) {
            let b;
            let c = CT_Double.h(a, b);
            b = c.p1;
            return ((() => {
                let $ret = new CT_Double();
                $ret.f = b;
                return $ret;
            })());
        }
        static h(a, b) {
            b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = parseNumber(c.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static j(a, b, c, d) {
            a.ad.p(b, c);
            let e = null;
            let f = null;
            f = "val";
            e = d.toString();
            a.ad.h(f, e);
        }
        i(a, b, c, d, e = null) {
            if (e == null) {
                e = "c";
            }
            CT_Double.j(a, d, e, this.f);
            c.k();
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static d(a) {
            return a != null ? a.f : 0;
        }
        static a(a) {
            let b = ((() => {
                let $ret = new CT_Double();
                $ret.f = a;
                return $ret;
            })());
            return b;
        }
    }
    CT_Double.$t = /*@__PURE__*/ markType(CT_Double, 'CT_Double');
    return CT_Double;
})();
/**
 * @hidden
 */
export let SerializationUtils = /*@__PURE__*/ (() => {
    class SerializationUtils extends Base {
        static x(a, b = false) {
            let c = DMLUtils.p(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(31, c);
            }
            a.s.k(c);
        }
        static ac(a, b = false) {
            let c = DMLUtils.q(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(36, c);
            }
            a.s.k(c);
        }
        static ae(a, b = false) {
            let c = DMLUtils.f(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(38, c);
            }
            a.s.k(c);
        }
        static am(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(131, c);
            }
            a.s.k(c);
        }
        static an(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(132, c);
            }
            a.s.k(c);
        }
        static ao(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(133, c);
            }
            a.s.k(c);
        }
        static av(a, b = false) {
            let c = new CT_ComplementTransform();
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(326, c);
            }
            a.s.k(c);
        }
        static a7(a, b = false) {
            let c = new CT_GammaTransform();
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(695, c);
            }
            a.s.k(c);
        }
        static ba(a, b = false) {
            let c = new CT_GrayscaleTransform();
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(731, c);
            }
            a.s.k(c);
        }
        static bc(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(733, c);
            }
            a.s.k(c);
        }
        static bd(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(734, c);
            }
            a.s.k(c);
        }
        static be(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(735, c);
            }
            a.s.k(c);
        }
        static bk(a, b = false) {
            let c = DMLUtils.o(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(802, c);
            }
            a.s.k(c);
        }
        static bl(a, b = false) {
            let c = DMLUtils.q(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(803, c);
            }
            a.s.k(c);
        }
        static bm(a, b = false) {
            let c = DMLUtils.b(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(804, c);
            }
            a.s.k(c);
        }
        static bo(a, b = false) {
            let c = new CT_InverseTransform();
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(845, c);
            }
            a.s.k(c);
        }
        static bp(a, b = false) {
            let c = new CT_InverseGammaTransform();
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(846, c);
            }
            a.s.k(c);
        }
        static bs(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(941, c);
            }
            a.s.k(c);
        }
        static bt(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(942, c);
            }
            a.s.k(c);
        }
        static bu(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(943, c);
            }
            a.s.k(c);
        }
        static b2(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(1331, c);
            }
            a.s.k(c);
        }
        static b3(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(1332, c);
            }
            a.s.k(c);
        }
        static b4(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(1333, c);
            }
            a.s.k(c);
        }
        static b8(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(1407, c);
            }
            a.s.k(c);
        }
        static b9(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(1408, c);
            }
            a.s.k(c);
        }
        static ca(a, b = false) {
            let c = DMLUtils.l(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(1409, c);
            }
            a.s.k(c);
        }
        static ce(a, b = false) {
            let c = DMLUtils.p(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(1459, c);
            }
            a.s.k(c);
        }
        static cl(a, b = false) {
            let c = DMLUtils.p(a);
            let d = [CT_HslColor.$, CT_PresetColor.$, CT_SRgbColor_DML.$, CT_SchemeColor_DML.$, CT_ScRgbColor.$, CT_SystemColor.$, b ? CT_ColorStyleVariation.$ : CT_StyleColor.$];
            let e = SerializationUtils.j(a, d);
            if (e != null) {
                e.setProperty(1744, c);
            }
            a.s.k(c);
        }
        static as(a) {
            let b = SerializationUtils.i(CT_ColorChangeEffect.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_Color_DML();
            b.a = c;
            a.s.k(c);
        }
        static au(a) {
            let b = SerializationUtils.i(CT_ColorChangeEffect.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_Color_DML();
            b.c = c;
            a.s.k(c);
        }
        static a5(a) {
            let b = SerializationUtils.i(CT_StretchInfoProperties.$, a);
            if (b == null) {
                return;
            }
            let c = DMLUtils.u(a);
            b.a = c;
            a.s.k(c);
        }
        static br(a) {
            let b = SerializationUtils.i(CT_GradientFillProperties.$, a);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = CT_LinearShadeProperties.f(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_LinearShadeProperties();
                $ret.a = c;
                $ret.c = d;
                return $ret;
            })());
            b.b.a = f;
            a.s.k(f);
        }
        static by(a) {
            let b = SerializationUtils.i(CT_GradientFillProperties.$, a);
            if (b == null) {
                return;
            }
            let c;
            let d = CT_PathShadeProperties.f(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_PathShadeProperties();
                $ret.c = c;
                return $ret;
            })());
            b.b.b = e;
            a.s.k(e);
        }
        static ck(a) {
            let b = SerializationUtils.i(CT_GradientFillProperties.$, a);
            if (b == null) {
                return;
            }
            let c = DMLUtils.u(a);
            b.c = c;
            a.s.k(c);
        }
        static bf(a) {
            let b = SerializationUtils.i(CT_GradientStopList.$, a);
            if (b == null) {
                return;
            }
            let c = new ST_PositiveFixedPercentage();
            let d = CT_GradientStop.e(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_GradientStop();
                $ret.d = c;
                return $ret;
            })());
            b.c.add(e);
            a.s.k(e);
        }
        static a6(a) {
            let b = SerializationUtils.i(CT_PathShadeProperties.$, a);
            if (b == null) {
                return;
            }
            let c = DMLUtils.u(a);
            b.a = c;
            a.s.k(c);
        }
        static ak(a) {
            let b = SerializationUtils.i(CT_PatternFillProperties.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_Color_DML();
            b.a = c;
            a.s.k(c);
        }
        static a2(a) {
            let b = SerializationUtils.i(CT_PatternFillProperties.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_Color_DML();
            b.c = c;
            a.s.k(c);
        }
        static a0(a) {
            let b = toNullable(ST_EffectContainerType_$type, null);
            let c = null;
            let d = CT_EffectContainer.l(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = ((() => {
                let $ret = new CT_EffectContainer();
                $ret.g = b;
                $ret.i = c;
                return $ret;
            })());
            let f = [CT_TextCharacterProperties_DML.$, CT_ShapeProperties_DML.$];
            let g = SerializationUtils.j(a, f);
            if (g != null) {
                g.setProperty(558, e);
            }
            a.s.k(e);
        }
        static a9(a) {
            let b = toNullable(ST_TileFlipMode_$type, null);
            let c = toNullable(Boolean_$type, null);
            let d = CT_GradientFillProperties.l(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = ((() => {
                let $ret = new CT_GradientFillProperties();
                $ret.g = b;
                $ret.i = c;
                return $ret;
            })());
            let f = [CT_TextCharacterProperties_DML.$, CT_FillOverlayEffect.$, CT_LineProperties_DML.$, CT_ShapeProperties_DML.$];
            let g = SerializationUtils.j(a, f);
            if (g != null) {
                g.setProperty(725, e);
            }
            a.s.k(e);
        }
        static cb(a) {
            let b = [CT_TextBodyProperties_DML.$, CT_ShapeProperties_DML.$, CT_EffectStyleItem.$];
            let c = new CT_Scene3D();
            let d = SerializationUtils.j(a, b);
            if (d != null) {
                d.setProperty(1423, c);
            }
            a.s.k(c);
        }
        static cg(a) {
            let b = [CT_TextBodyProperties_DML.$, CT_ShapeProperties_DML.$, CT_EffectStyleItem.$];
            let c = SerializationUtils.e(a);
            let d = SerializationUtils.j(a, b);
            if (d != null) {
                d.setProperty(1564, c);
            }
            a.s.k(c);
        }
        static a8(a) {
            let b = SerializationUtils.i(CT_EffectList.$, a);
            if (b == null) {
                return;
            }
            let c;
            let d = CT_GlowEffect.g(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_GlowEffect();
                $ret.e = c;
                return $ret;
            })());
            b.e = e;
            a.s.k(e);
        }
        static y(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_AlphaBiLevelEffect.d(a, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AlphaBiLevelEffect();
                $ret.a = d;
                return $ret;
            })());
            c.setProperty(32, f);
            a.s.k(f);
        }
        static z(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = new CT_AlphaCeilingEffect();
            c.setProperty(33, d);
            a.s.k(d);
        }
        static aa(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = new CT_AlphaFloorEffect();
            c.setProperty(34, d);
            a.s.k(d);
        }
        static ab(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = new CT_AlphaInverseEffect();
            c.setProperty(35, d);
            a.s.k(d);
        }
        static ad(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = CT_AlphaModulateFixedEffect.e(a, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AlphaModulateFixedEffect();
                $ret.b = d;
                return $ret;
            })());
            c.setProperty(37, f);
            a.s.k(f);
        }
        static af(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_AlphaReplaceEffect.d(a, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AlphaReplaceEffect();
                $ret.a = d;
                return $ret;
            })());
            c.setProperty(40, f);
            a.s.k(f);
        }
        static al(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_BiLevelEffect.d(a, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_BiLevelEffect();
                $ret.a = d;
                return $ret;
            })());
            c.setProperty(117, f);
            a.s.k(f);
        }
        static ap(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$, CT_EffectList.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(Boolean_$type, null);
            let f = CT_BlurEffect.h(a, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_BlurEffect();
                $ret.c = e;
                $ret.e = d;
                return $ret;
            })());
            c.setProperty(134, g);
            a.s.k(g);
        }
        static ar(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Boolean_$type, null);
            let e = CT_ColorChangeEffect.i(a, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ColorChangeEffect();
                $ret.f = d;
                return $ret;
            })());
            c.setProperty(279, f);
            a.s.k(f);
        }
        static at(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = new CT_ColorReplaceEffect();
            c.setProperty(285, d);
            a.s.k(d);
        }
        static az(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = new CT_DuotoneEffect();
            c.setProperty(546, d);
            a.s.k(d);
        }
        static a4(a, b = null) {
            let c;
            let d = CT_FillOverlayEffect.f(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_FillOverlayEffect();
                $ret.c = c;
                return $ret;
            })());
            if (b == null) {
                b = [CT_Blip_DML.$, CT_EffectList.$];
            }
            let f = SerializationUtils.j(a, b);
            if (f != null) {
                f.setProperty(633, e);
            }
            a.s.k(e);
        }
        static bb(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d = new CT_GrayscaleEffect();
            c.setProperty(633, d);
            a.s.k(d);
        }
        static bi(a, b = null) {
            if (b == null) {
                b = [CT_Blip_DML.$];
            }
            let c = SerializationUtils.j(a, b);
            if (c == null) {
                return;
            }
            let d, e, f;
            let g = CT_HSLEffect.k(a, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_HSLEffect();
                $ret.d = d;
                $ret.h = e;
                $ret.f = f;
                return $ret;
            })());
            c.setProperty(799, h);
            a.s.k(h);
        }
        static bn(a) {
            let b = SerializationUtils.i(CT_EffectList.$, a);
            if (b == null) {
                return;
            }
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = CT_InnerShadowEffect.m(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_InnerShadowEffect();
                $ret.g = c;
                $ret.k = d;
                $ret.i = e;
                return $ret;
            })());
            b.g = g;
            a.s.k(g);
        }
        static bx(a) {
            let b = SerializationUtils.i(CT_EffectList.$, a);
            if (b == null) {
                return;
            }
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(Number_$type, null);
            let i = toNullable(Number_$type, null);
            let j = toNullable(ST_RectAlignment_$type, null);
            let k = toNullable(Boolean_$type, null);
            let l = CT_OuterShadowEffect.af(a, c, d, e, f, g, h, i, j, k);
            c = l.p1;
            d = l.p2;
            e = l.p3;
            f = l.p4;
            g = l.p5;
            h = l.p6;
            i = l.p7;
            j = l.p8;
            k = l.p9;
            let m = ((() => {
                let $ret = new CT_OuterShadowEffect();
                $ret.n = j;
                $ret.p = c;
                $ret.r = e;
                $ret.t = d;
                $ret.v = h;
                $ret.x = i;
                $ret.z = k;
                $ret.ab = f;
                $ret.ad = g;
                return $ret;
            })());
            b.i = m;
            a.s.k(m);
        }
        static b1(a) {
            let b = SerializationUtils.i(CT_EffectList.$, a);
            if (b == null) {
                return;
            }
            let c = 0;
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = CT_PresetShadowEffect.l(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_PresetShadowEffect();
                $ret.h = e;
                $ret.j = d;
                $ret.d = c;
                return $ret;
            })());
            b.k = g;
            a.s.k(g);
        }
        static b5(a) {
            let b = SerializationUtils.i(CT_EffectList.$, a);
            if (b == null) {
                return;
            }
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(Number_$type, null);
            let i = toNullable(Number_$type, null);
            let j = toNullable(Number_$type, null);
            let k = toNullable(Number_$type, null);
            let l = toNullable(Number_$type, null);
            let m = toNullable(Number_$type, null);
            let n = toNullable(Number_$type, null);
            let o = toNullable(ST_RectAlignment_$type, null);
            let p = toNullable(Boolean_$type, null);
            let q = CT_ReflectionEffect.ar(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
            c = q.p1;
            d = q.p2;
            e = q.p3;
            f = q.p4;
            g = q.p5;
            h = q.p6;
            i = q.p7;
            j = q.p8;
            k = q.p9;
            l = q.p10;
            m = q.p11;
            n = q.p12;
            o = q.p13;
            p = q.p14;
            let r = ((() => {
                let $ret = new CT_ReflectionEffect();
                $ret.o = o;
                $ret.q = c;
                $ret.s = i;
                $ret.u = h;
                $ret.w = f;
                $ret.y = g;
                $ret.aa = j;
                $ret.ac = m;
                $ret.ae = n;
                $ret.ag = p;
                $ret.ai = d;
                $ret.ak = e;
                $ret.am = k;
                $ret.ao = l;
                return $ret;
            })());
            b.m = r;
            a.s.k(r);
        }
        static cf(a) {
            let b = SerializationUtils.i(CT_EffectList.$, a);
            if (b == null) {
                return;
            }
            let c;
            let d = CT_SoftEdgesEffect.d(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_SoftEdgesEffect();
                $ret.a = c;
                return $ret;
            })());
            b.o = e;
            a.s.k(e);
        }
        static aq(a) {
            let b = SerializationUtils.i(CT_Scene3D.$, a);
            if (b == null) {
                return;
            }
            let c = 0;
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = CT_Camera.l(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_Camera();
                $ret.g = d;
                $ret.d = c;
                $ret.i = e;
                return $ret;
            })());
            b.c = g;
            a.s.k(g);
        }
        static bq(a) {
            let b = SerializationUtils.i(CT_Scene3D.$, a);
            if (b == null) {
                return;
            }
            let c = 0;
            let d = 0;
            let e = CT_LightRig.h(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_LightRig();
                $ret.c = d;
                $ret.e = c;
                return $ret;
            })());
            b.e = f;
            a.s.k(f);
        }
        static ag(a) {
            let b = SerializationUtils.i(CT_Backdrop.$, a);
            if (b == null) {
                return;
            }
            let c = 0;
            let d = 0;
            let e = 0;
            let f = CT_Point3D.h(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_Point3D();
                $ret.a = c;
                $ret.c = d;
                $ret.e = e;
                return $ret;
            })());
            b.c = g;
            a.s.k(g);
        }
        static bw(a) {
            let b = SerializationUtils.i(CT_Backdrop.$, a);
            if (b == null) {
                return;
            }
            let c = SerializationUtils.g(a);
            b.e = c;
        }
        static cm(a) {
            let b = SerializationUtils.i(CT_Backdrop.$, a);
            if (b == null) {
                return;
            }
            let c = SerializationUtils.g(a);
            b.g = c;
            a.s.k(c);
        }
        static b6(a) {
            let b = 0;
            let c = 0;
            let d = 0;
            let e = CT_SphereCoords.h(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            let f = ((() => {
                let $ret = new CT_SphereCoords();
                $ret.a = b;
                $ret.c = c;
                $ret.e = d;
                return $ret;
            })());
            let g = [CT_Camera.$, CT_LightRig.$];
            let h = SerializationUtils.j(a, g);
            if (h != null) {
                h.setProperty(1370, f);
            }
            a.s.k(f);
        }
        static ai(a) {
            let b = SerializationUtils.i(CT_Shape3D.$, a);
            if (b == null) {
                return;
            }
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(ST_BevelPresetType_$type, null);
            let f = CT_Bevel.l(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_Bevel();
                $ret.e = d;
                $ret.g = e;
                $ret.i = c;
                return $ret;
            })());
            b.a = g;
            a.s.k(g);
        }
        static aj(a) {
            let b = SerializationUtils.i(CT_Shape3D.$, a);
            if (b == null) {
                return;
            }
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(ST_BevelPresetType_$type, null);
            let f = CT_Bevel.l(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_Bevel();
                $ret.e = d;
                $ret.g = e;
                $ret.i = c;
                return $ret;
            })());
            b.c = g;
            a.s.k(g);
        }
        static aw(a) {
            let b = SerializationUtils.i(CT_Shape3D.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_Color_DML();
            b.e = c;
            a.s.k(c);
        }
        static a1(a) {
            let b = SerializationUtils.i(CT_Shape3D.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_Color_DML();
            b.g = c;
            a.s.k(c);
        }
        static bj(a) {
            let b = CT_HslColor.e(a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_GradientStop.$, CT_SolidColorFillProperties.$, CT_StyleReference.$, CT_FontReference_ChartStyle.$];
            let d = SerializationUtils.j(a, c);
            if (d != null) {
                d.setProperty(800, b);
            }
            a.s.k(b);
        }
        static bz(a) {
            let b = CT_PresetColor.e(a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_GradientStop.$, CT_SolidColorFillProperties.$, CT_StyleReference.$, CT_FontReference_ChartStyle.$];
            let d = SerializationUtils.j(a, c);
            if (d != null) {
                d.setProperty(1272, b);
            }
            a.s.k(b);
        }
        static cc(a) {
            let b = CT_SchemeColor_DML.f(a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_GradientStop.$, CT_SolidColorFillProperties.$, CT_StyleReference.$, CT_FontReference_ChartStyle.$];
            let d = SerializationUtils.j(a, c);
            if (d != null) {
                d.setProperty(1429, b);
            }
            a.s.k(b);
        }
        static cd(a) {
            let b = CT_ScRgbColor.e(a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_GradientStop.$, CT_SolidColorFillProperties.$, CT_StyleReference.$, CT_FontReference_ChartStyle.$];
            let d = SerializationUtils.j(a, c);
            if (d != null) {
                d.setProperty(1431, b);
            }
            a.s.k(b);
        }
        static ch(a) {
            let b = CT_SRgbColor_DML.e(a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_GradientStop.$, CT_SolidColorFillProperties.$, CT_StyleReference.$, CT_FontReference_ChartStyle.$];
            let d = SerializationUtils.j(a, c);
            if (d != null) {
                d.setProperty(1586, b);
            }
            a.s.k(b);
        }
        static ci(a) {
            let b = CT_SystemColor.e(a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_GradientStop.$, CT_SolidColorFillProperties.$, CT_StyleReference.$, CT_FontReference_ChartStyle.$];
            let d = SerializationUtils.j(a, c);
            if (d != null) {
                d.setProperty(1652, b);
            }
            a.s.k(b);
        }
        static ah(a) {
            let b = SerializationUtils.i(CT_LineProperties_DML.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_LineJoinBevel();
            b.p.a = c;
            a.s.k(c);
        }
        static ax(a) {
            let b = SerializationUtils.i(CT_LineProperties_DML.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_DashStopList();
            b.l.a = c;
            a.s.k(c);
        }
        static bh(a) {
            let b = SerializationUtils.i(CT_LineProperties_DML.$, a);
            if (b == null) {
                return;
            }
            let c = DMLUtils.i(a);
            b.a = c;
            a.s.k(c);
        }
        static bv(a) {
            let b = SerializationUtils.i(CT_LineProperties_DML.$, a);
            if (b == null) {
                return;
            }
            let c = DMLUtils.j(a);
            b.p.b = c;
            a.s.k(c);
        }
        static b0(a) {
            let b = SerializationUtils.i(CT_LineProperties_DML.$, a);
            if (b == null) {
                return;
            }
            let c = DMLUtils.t(a);
            b.l.b = c;
            a.s.k(c);
        }
        static b7(a) {
            let b = SerializationUtils.i(CT_LineProperties_DML.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_LineJoinRound();
            b.p.c = c;
            a.s.k(c);
        }
        static cj(a) {
            let b = SerializationUtils.i(CT_LineProperties_DML.$, a);
            if (b == null) {
                return;
            }
            let c = DMLUtils.i(a);
            b.b = c;
            a.s.k(c);
        }
        static ay(a) {
            let b = SerializationUtils.i(CT_DashStopList.$, a);
            if (b == null) {
                return;
            }
            let c = DMLUtils.d(a);
            b.b.add(c);
            a.s.k(c);
        }
        static bg(a) {
            let b = SerializationUtils.i(CT_GradientFillProperties.$, a);
            if (b == null) {
                return;
            }
            let c = ((() => {
                let $ret = new CT_GradientStopList();
                $ret.c = new List$1(CT_GradientStop.$, 0);
                return $ret;
            })());
            b.e = c.c;
            a.s.k(c);
        }
        static a3($t, a, b, c) {
            let d = typeCast(ObjectModelThemePartManager.$, a);
            let e = [CT_BackgroundFillStyleList.$, CT_FillOverlayEffect.$, CT_FillStyleList.$, CT_LineProperties_DML.$];
            let f = SerializationUtils.j(d, e);
            if (f != null) {
                f.setProperty(c, getBoxIfEnum($t, b));
            }
            d.s.k(getBoxIfEnum($t, b));
        }
        static m($t, a, b) {
            let c = b != null ? b : new List$1($t, 0);
            c.add(a);
            return c;
        }
        static h($t, a) {
            if (a == null) {
                return null;
            }
            if (a.count == 0) {
            }
            else if (a.count > 1) {
            }
            return a.count > 0 ? a._inner[0] : null;
        }
        static i($t, a, b = true) {
            let c = a.s.a($t);
            if (b && getBoxIfEnum($t, c) == null) {
                let d = $t.typeName;
            }
            return c;
        }
        static j(a, b, c = false) {
            let d = (e) => {
                let f = typeCast(ISupportSetProperty_$type, e);
                if (f == null) {
                    return false;
                }
                for (let h = 0; h < b.length; h++) {
                    let g = b[h];
                    if (getInstanceType(f) == g) {
                        return true;
                    }
                }
                return false;
            };
            let e = typeCast(ISupportSetProperty_$type, a.s.g(d));
            if (c && e == null) {
            }
            return e;
        }
        static a(a, b) {
            let c = toNullable(Boolean_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(ST_UnsignedIntHex.$, null);
            let f = toNullable(Number_$type, null);
            let g = NaN;
            let h = SpreadsheetMLMain.ut(a, b, c, d, e, f, g);
            c = h.p2;
            d = h.p3;
            e = h.p4;
            f = h.p5;
            g = h.p6;
            return ((() => {
                let $ret = new ColorInfo();
                $ret.i = c;
                $ret.j = d;
                $ret.k = e;
                $ret.l = f;
                $ret.g = g;
                return $ret;
            })());
        }
        static f(a) {
            let b = toNullable(Number_$type, null);
            let c = toNullable(Boolean_$type, null);
            let d = toNullable(ST_TextVertOverflowType_$type, null);
            let e = toNullable(ST_TextHorzOverflowType_$type, null);
            let f = toNullable(ST_TextVerticalType_$type, null);
            let g = toNullable(ST_TextWrappingType_$type, null);
            let h = toNullable(Number_$type, null);
            let i = toNullable(Number_$type, null);
            let j = toNullable(Number_$type, null);
            let k = toNullable(Number_$type, null);
            let l = toNullable(Number_$type, null);
            let m = toNullable(Number_$type, null);
            let n = toNullable(Boolean_$type, null);
            let o = toNullable(Boolean_$type, null);
            let p = toNullable(ST_TextAnchoringType_$type, null);
            let q = toNullable(Boolean_$type, null);
            let r = toNullable(Boolean_$type, null);
            let s = toNullable(Boolean_$type, null);
            let t = toNullable(Boolean_$type, null);
            let u = CT_TextBodyProperties_DML.ay(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
            b = u.p1;
            c = u.p2;
            d = u.p3;
            e = u.p4;
            f = u.p5;
            g = u.p6;
            h = u.p7;
            i = u.p8;
            j = u.p9;
            k = u.p10;
            l = u.p11;
            m = u.p12;
            n = u.p13;
            o = u.p14;
            p = u.p15;
            q = u.p16;
            r = u.p17;
            s = u.p18;
            t = u.p19;
            let v = new CT_TextBodyProperties_DML();
            v.l = p;
            v.m = q;
            v.p = k;
            v.r = t;
            v.t = r;
            v.v = o;
            v.x = e;
            v.z = h;
            v.ab = l;
            v.ad = j;
            v.af = b;
            v.ah = n;
            v.aj = m;
            v.al = c;
            v.an = i;
            v.ap = s;
            v.ar = f;
            v.at = d;
            v.av = g;
            return v;
        }
        static d(a) {
            let b = 0;
            let c = null;
            let d = CT_StyleReference.j(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = new CT_StyleReference();
            e.h = b;
            e.c = c;
            return e;
        }
        static c(a) {
            let b = null;
            let c = CT_StyleEntry.ab(a, b);
            b = c.p1;
            let d = new CT_StyleEntry();
            d.k = b;
            return d;
        }
        static b(a) {
            let b;
            let c;
            let d = CT_FontReference_ChartStyle.k(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = ((() => {
                let $ret = new CT_FontReference_ChartStyle();
                $ret.h = b;
                $ret.d = c;
                return $ret;
            })());
            return e;
        }
        static e(a) {
            let b = toNullable(Number_$type, null);
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(ST_PresetMaterialType_$type, null);
            let f = CT_Shape3D.y(a, b, c, d, e);
            b = f.p1;
            c = f.p2;
            d = f.p3;
            e = f.p4;
            let g = new CT_Shape3D();
            g.p = d;
            g.r = c;
            g.t = e;
            g.v = b;
            return g;
        }
        static g(a) {
            let b = 0;
            let c = 0;
            let d = 0;
            let e = CT_Vector3D.i(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            return ((() => {
                let $ret = new CT_Vector3D();
                $ret.b = b;
                $ret.d = c;
                $ret.f = d;
                return $ret;
            })());
        }
        static w(a) {
            let b = new StringBuilder(0);
            b.u("Expecting an instance of one of the following types to be on the context stack:");
            b.t();
            for (let d = 0; d < a.length; d++) {
                let c = a[d];
                b.u(c.typeName);
            }
        }
        static k(a) {
            return a.d._z;
        }
        static t(a) {
            let b = stringSplit(a.toString(), ['/'], 1);
            return b[b.length - 1];
        }
        static s(a) {
            if (stringIsNullOrEmpty(a)) {
                return a;
            }
            let b = '\"';
            let c = '\'';
            let d = '<';
            let e = '>';
            let f = '&';
            let g = new Dictionary$2(String_$type, String_$type, 0);
            g.addItem(b, "&quot;");
            g.addItem(c, "&apos;");
            g.addItem(d, "&lt;");
            g.addItem(e, "&gt;");
            g.addItem(f, "&amp;");
            let h = new StringBuilder(0);
            for (let i = 0; i < a.length; i++) {
                let j = a.charAt(i);
                switch (j) {
                    case b:
                    case c:
                    case d:
                    case e:
                    case f:
                        h.l(g.item(j));
                        break;
                    default:
                        h.h(j);
                        break;
                }
            }
            return h.toString();
        }
        static v(a) {
            if (stringIsNullOrEmpty(a)) {
                return a;
            }
            let b = "&quot;";
            let c = "&apos;";
            let d = "&lt;";
            let e = "&gt;";
            let f = "&amp;";
            a = stringReplace(a, b, "\"");
            a = stringReplace(a, c, "'");
            a = stringReplace(a, d, "<");
            a = stringReplace(a, e, ">");
            a = stringReplace(a, f, "&");
            return a;
        }
        static o(a) {
            return a == 0 ? 0 : intDivide(a, 5);
        }
        static n(a) {
            return a == 0 ? 0 : a / 20;
        }
        static p(a) {
            return a * 5;
        }
        static u(a) {
            if (stringIsNullOrEmpty(a)) {
                return a;
            }
            if (a.charAt(0) == '=') {
                return a.substr(1);
            }
            else {
                return a;
            }
        }
        static l(a) {
            if (!stringIsNullOrEmpty(a)) {
                let b;
                if (((() => { let c = tryParseNumber(a, b); b = c.p1; return c.ret; })())) {
                    return true;
                }
                let c;
                if (((() => { let d = tryParseInt32_1(a, c); c = d.p1; return d.ret; })())) {
                    return true;
                }
            }
            return false;
        }
        static q(a) {
            if (a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, a.k ? true : false);
        }
        static r(a) {
            if (a.hasValue == false) {
                return toNullable(Boolean_$type, null);
            }
            else if (a.value) {
                return toNullable(Boolean_$type, true);
            }
            else {
                return toNullable(Boolean_$type, false);
            }
        }
    }
    SerializationUtils.$t = /*@__PURE__*/ markType(SerializationUtils, 'SerializationUtils');
    return SerializationUtils;
})();
/**
 * @hidden
 */
export let CT_EffectStyleItem = /*@__PURE__*/ (() => {
    class CT_EffectStyleItem extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.e = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new EG_EffectProperties();
            }
            return this.e;
        }
        setProperty(a, b) {
            switch (a) {
                case 1423:
                    this.a = typeCast(CT_Scene3D.$, b);
                    break;
                case 1564:
                    this.c = typeCast(CT_Shape3D.$, b);
                    break;
                default:
                    if (this.f.c(a)) {
                        this.f.e(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_EffectStyleItem.$t = /*@__PURE__*/ markType(CT_EffectStyleItem, 'CT_EffectStyleItem', Base.$, [ISupportSetProperty_$type]);
    return CT_EffectStyleItem;
})();
/**
 * @hidden
 */
export let CT_EffectStyleList = /*@__PURE__*/ (() => {
    class CT_EffectStyleList extends Base {
        constructor() {
            super();
            this.d = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 562:
                    this.c.add(typeCast(CT_EffectStyleItem.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static e(a) {
            return a != null ? a.c : null;
        }
        static a(a) {
            let b = new CT_EffectStyleList();
            b.d = a;
            return b;
        }
    }
    CT_EffectStyleList.$t = /*@__PURE__*/ markType(CT_EffectStyleList, 'CT_EffectStyleList', Base.$, [ISupportSetProperty_$type]);
    return CT_EffectStyleList;
})();
/**
 * @hidden
 */
export let CT_OfficeArtExtension = /*@__PURE__*/ (() => {
    class CT_OfficeArtExtension extends Base {
        constructor() {
            super(...arguments);
            this.h = null;
            this.c = null;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        static d(a, b) {
            b = null;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "uri":
                        b = c.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static f(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c != null) {
                e = "uri";
                d = c;
                a.ad.h(e, d);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        e(a, b, c, d) {
            CT_OfficeArtExtension.f(a, d, this.b);
            c.k();
        }
    }
    CT_OfficeArtExtension.$t = /*@__PURE__*/ markType(CT_OfficeArtExtension, 'CT_OfficeArtExtension');
    return CT_OfficeArtExtension;
})();
/**
 * @hidden
 */
export let CT_OfficeArtExtensionList = /*@__PURE__*/ (() => {
    class CT_OfficeArtExtensionList extends Base {
        constructor() {
            super();
            this.a = null;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_OfficeArtExtensionList();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.a(a)) {
                        this.b.d(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        d(a, b, c, d) {
            if (this.b.b == null || this.b.b.count == 0) {
                return;
            }
            c.p(d, "a");
            for (let e of fromEnum(this.b.b)) {
                CT_OfficeArtExtension.f(a, DrawingMLMain.dr, e.b);
                c.k();
            }
            c.k();
        }
    }
    CT_OfficeArtExtensionList.$t = /*@__PURE__*/ markType(CT_OfficeArtExtensionList, 'CT_OfficeArtExtensionList', Base.$, [ISupportSetProperty_$type]);
    return CT_OfficeArtExtensionList;
})();
/**
 * @hidden
 */
export let CT_Color_DML = /*@__PURE__*/ (() => {
    class CT_Color_DML extends Base {
        constructor() {
            super();
            this.a = null;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_ColorChoice_DML();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.g(a)) {
                        this.b.i(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        d(a, b, c, d) {
            c.p(d, "a");
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
    }
    CT_Color_DML.$t = /*@__PURE__*/ markType(CT_Color_DML, 'CT_Color_DML', Base.$, [ISupportSetProperty_$type]);
    return CT_Color_DML;
})();
/**
 * @hidden
 */
export let CT_Scene3D = /*@__PURE__*/ (() => {
    class CT_Scene3D extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.b = null;
            this.h = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 224:
                    this.c = typeCast(CT_Camera.$, b);
                    break;
                case 896:
                    this.e = typeCast(CT_LightRig.$, b);
                    break;
                case 89:
                    this.a = typeCast(CT_Backdrop.$, b);
                    break;
                case 601:
                    this.g = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Scene3D.$t = /*@__PURE__*/ markType(CT_Scene3D, 'CT_Scene3D', Base.$, [ISupportSetProperty_$type]);
    return CT_Scene3D;
})();
/**
 * @hidden
 */
export let CT_Backdrop = /*@__PURE__*/ (() => {
    class CT_Backdrop extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.h = null;
            this.b = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 45:
                    this.c = typeCast(CT_Point3D.$, b);
                    break;
                case 1072:
                    this.e = typeCast(CT_Vector3D.$, b);
                    break;
                case 1806:
                    this.g = typeCast(CT_Vector3D.$, b);
                    break;
                case 601:
                    this.a = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Backdrop.$t = /*@__PURE__*/ markType(CT_Backdrop, 'CT_Backdrop', Base.$, [ISupportSetProperty_$type]);
    return CT_Backdrop;
})();
/**
 * @hidden
 */
export let CT_Shape3D = /*@__PURE__*/ (() => {
    class CT_Shape3D extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.h = null;
            this.f = null;
            this.j = null;
            this.w = toNullable(Number_$type, null);
            this.s = toNullable(Number_$type, null);
            this.q = toNullable(Number_$type, null);
            this.u = toNullable(ST_PresetMaterialType_$type, null);
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        static k(a) {
            let b = toNullable(Number_$type, null);
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(ST_PresetMaterialType_$type, null);
            let f = CT_Shape3D.y(a, b, c, d, e);
            b = f.p1;
            c = f.p2;
            d = f.p3;
            e = f.p4;
            return ((() => {
                let $ret = new CT_Shape3D();
                $ret.r = c;
                $ret.p = d;
                $ret.v = b;
                return $ret;
            })());
        }
        static y(a, b, c, d, e) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(Number_$type, null);
            e = toNullable(ST_PresetMaterialType_$type, null);
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "z":
                        b = toNullable(Number_$type, parseInt64_1(f.d, CultureInfo.invariantCulture));
                        break;
                    case "extrusionH":
                        c = toNullable(Number_$type, parseInt64_1(f.d, CultureInfo.invariantCulture));
                        break;
                    case "contourW":
                        d = toNullable(Number_$type, parseInt64_1(f.d, CultureInfo.invariantCulture));
                        break;
                    case "prstMaterial":
                        e = toNullable(ST_PresetMaterialType_$type, XmlNamespaceDefinitionBase.b(ST_PresetMaterialType_$type, f.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        static z(a, b, c = toNullable(Number_$type, null), d = toNullable(Number_$type, null), e = toNullable(ST_PresetMaterialType_$type, null), f = toNullable(Number_$type, null)) {
            a.ad.p(b, "a");
            let g = null;
            let h = null;
            if (c.hasValue) {
                h = "contourW";
                g = c.value.toString();
                a.ad.h(h, g);
            }
            if (d.hasValue) {
                h = "extrusionH";
                g = d.value.toString();
                a.ad.h(h, g);
            }
            if (e.hasValue) {
                h = "prstMaterial";
                g = XmlNamespaceDefinitionBase.p(ST_PresetMaterialType_$type, e.value);
                a.ad.h(h, g);
            }
            if (f.hasValue) {
                h = "z";
                g = f.value.toString();
                a.ad.h(h, g);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 110:
                    this.c = typeCast(CT_Bevel.$, b);
                    break;
                case 109:
                    this.a = typeCast(CT_Bevel.$, b);
                    break;
                case 611:
                    this.g = typeCast(CT_Color_DML.$, b);
                    break;
                case 347:
                    this.e = typeCast(CT_Color_DML.$, b);
                    break;
                case 601:
                    this.i = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Shape3D.$t = /*@__PURE__*/ markType(CT_Shape3D, 'CT_Shape3D', Base.$, [ISupportSetProperty_$type]);
    return CT_Shape3D;
})();
/**
 * @hidden
 */
export let CT_FillOverlayEffect = /*@__PURE__*/ (() => {
    class CT_FillOverlayEffect extends Base {
        constructor() {
            super();
            this.d = 0;
            this.a = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_FillProperties();
            }
            return this.a;
        }
        static f(a, b) {
            b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "blend":
                        b = XmlNamespaceDefinitionBase.b(ST_BlendMode_$type, c.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static h(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            e = "blend";
            d = XmlNamespaceDefinitionBase.p(ST_BlendMode_$type, c);
            a.ad.h(e, d);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.f(a)) {
                        this.b.j(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        g(a, b, c, d) {
            CT_FillOverlayEffect.h(a, d, this.c);
            let e = this.b.k;
            if (e != null) {
                e.save1(a, b, c, DrawingMLMain.bu);
            }
            let f = this.b.a;
            if (f != null) {
                f.save1(a, b, c, DrawingMLMain.ek);
            }
            let g = this.b.l;
            if (g != null) {
                c.p(DrawingMLMain.et, "a");
                c.k();
            }
            let h = this.b.d;
            if (g != null) {
                c.p(DrawingMLMain.gz, "a");
                c.k();
            }
            let i = this.b.b;
            if (i != null) {
                i.save1(a, b, c, DrawingMLMain.hi);
            }
            c.k();
        }
    }
    CT_FillOverlayEffect.$t = /*@__PURE__*/ markType(CT_FillOverlayEffect, 'CT_FillOverlayEffect', Base.$, [ISupportSetProperty_$type]);
    return CT_FillOverlayEffect;
})();
/**
 * @hidden
 */
export let CT_SolidColorFillProperties = /*@__PURE__*/ (() => {
    class CT_SolidColorFillProperties extends Base {
        constructor() {
            super();
            this.a = null;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_ColorChoice_DML();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.g(a)) {
                        this.b.i(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        save1(a, b, c, d) {
            c.p(d, "a");
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        get elementName() {
            return DrawingMLMain.ip;
        }
        saveX(a, b, c, d) {
            this.save1(a, typeCast(WorkbookSaveManagerExcel2007.$, d), b, c);
        }
    }
    CT_SolidColorFillProperties.$t = /*@__PURE__*/ markType(CT_SolidColorFillProperties, 'CT_SolidColorFillProperties', Base.$, [ISupportSetProperty_$type, ISaveToXLSX_$type]);
    return CT_SolidColorFillProperties;
})();
/**
 * @hidden
 */
export let CT_GradientFillProperties = /*@__PURE__*/ (() => {
    class CT_GradientFillProperties extends Base {
        constructor() {
            super();
            this.f = null;
            this.d = null;
            this.h = toNullable(ST_TileFlipMode_$type, null);
            this.j = toNullable(Boolean_$type, null);
            this.a = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_ShadeProperties();
            }
            return this.a;
        }
        static l(a, b, c) {
            b = toNullable(ST_TileFlipMode_$type, null);
            c = toNullable(Boolean_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "flip":
                        b = toNullable(ST_TileFlipMode_$type, XmlNamespaceDefinitionBase.b(ST_TileFlipMode_$type, d.d));
                        break;
                    case "rotWithShape":
                        c = toNullable(Boolean_$type, ST_OnOff.e(d.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static n(a, b, c = toNullable(ST_TileFlipMode_$type, null), d = toNullable(Boolean_$type, null)) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "flip";
                e = XmlNamespaceDefinitionBase.p(ST_TileFlipMode_$type, c.value);
                a.ad.h(f, e);
            }
            if (d.hasValue) {
                f = "rotWithShape";
                e = ST_OnOff.g(d.value);
                a.ad.h(f, e);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        save1(a, b, c, d) {
            CT_GradientFillProperties.n(a, d, this.g, this.i);
            let e = this.e;
            if (e != null) {
                c.p(DrawingMLMain.ev, "a");
                for (let f of fromEnum(e)) {
                    f.f(a, b, c, DrawingMLMain.eu);
                }
                c.k();
            }
            let g = this.b.a;
            if (g != null) {
                CT_LinearShadeProperties.h(a, DrawingMLMain.fv, g.a, g.c);
                c.k();
            }
            let h = this.b.b;
            if (h != null) {
                CT_PathShadeProperties.h(a, DrawingMLMain.hg, h.c);
                if (h.a != null) {
                    DMLUtils.au(a, h.a, DrawingMLMain.d2);
                }
                c.k();
            }
            let i = this.c;
            if (i != null) {
                DMLUtils.au(a, i, DrawingMLMain.jl);
            }
            c.k();
        }
        get elementName() {
            return DrawingMLMain.ek;
        }
        saveX(a, b, c, d) {
            this.save1(a, typeCast(WorkbookSaveManagerExcel2007.$, d), b, c);
        }
        setProperty(a, b) {
            switch (a) {
                case 757:
                    this.e = CT_GradientStopList.e(typeCast(CT_GradientStopList.$, b));
                    break;
                case 1728:
                    this.c = typeCast(CT_RelativeRect.$, b);
                    break;
                default:
                    this.b.e(a, b);
                    break;
            }
        }
    }
    CT_GradientFillProperties.$t = /*@__PURE__*/ markType(CT_GradientFillProperties, 'CT_GradientFillProperties', Base.$, [ISupportSetProperty_$type, ISaveToXLSX_$type]);
    return CT_GradientFillProperties;
})();
/**
 * @hidden
 */
export let CT_LinearShadeProperties = /*@__PURE__*/ (() => {
    class CT_LinearShadeProperties extends Base {
        constructor() {
            super(...arguments);
            this.b = toNullable(Number_$type, null);
            this.d = toNullable(Boolean_$type, null);
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        static f(a, b, c) {
            b = toNullable(Number_$type, null);
            c = toNullable(Boolean_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "ang":
                        b = toNullable(Number_$type, parseInt32_1(d.d, CultureInfo.invariantCulture));
                        break;
                    case "scaled":
                        c = toNullable(Boolean_$type, ST_OnOff.e(d.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static h(a, b, c = toNullable(Number_$type, null), d = toNullable(Boolean_$type, null)) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "ang";
                e = c.value.toString();
                a.ad.h(f, e);
            }
            if (d.hasValue) {
                f = "scaled";
                e = ST_OnOff.g(d.value);
                a.ad.h(f, e);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        g(a, b, c, d) {
            throw new NotImplementedException(0);
        }
    }
    CT_LinearShadeProperties.$t = /*@__PURE__*/ markType(CT_LinearShadeProperties, 'CT_LinearShadeProperties');
    return CT_LinearShadeProperties;
})();
/**
 * @hidden
 */
export let CT_PathShadeProperties = /*@__PURE__*/ (() => {
    class CT_PathShadeProperties extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = toNullable(ST_PathShadeType_$type, null);
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        static f(a, b) {
            b = toNullable(ST_PathShadeType_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "path":
                        b = toNullable(ST_PathShadeType_$type, XmlNamespaceDefinitionBase.b(ST_PathShadeType_$type, c.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static h(a, b, c = toNullable(ST_PathShadeType_$type, null)) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "path";
                d = XmlNamespaceDefinitionBase.p(ST_PathShadeType_$type, c.value);
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 637:
                    this.a = typeCast(CT_RelativeRect.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        g(a, b, c, d) {
            CT_PathShadeProperties.h(a, d, this.c);
            if (this.a != null) {
                DMLExtensions.ct(this.a, a, b, c, DrawingMLMain.d2);
            }
            c.k();
        }
    }
    CT_PathShadeProperties.$t = /*@__PURE__*/ markType(CT_PathShadeProperties, 'CT_PathShadeProperties', Base.$, [ISupportSetProperty_$type]);
    return CT_PathShadeProperties;
})();
/**
 * @hidden
 */
export let CT_PatternFillProperties = /*@__PURE__*/ (() => {
    class CT_PatternFillProperties extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.f = toNullable(ST_PresetPatternVal_$type, null);
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        static h(a, b) {
            b = toNullable(ST_PresetPatternVal_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "prst":
                        b = toNullable(ST_PresetPatternVal_$type, XmlNamespaceDefinitionBase.b(ST_PresetPatternVal_$type, c.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static j(a, b, c = toNullable(ST_PresetPatternVal_$type, null)) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "prst";
                d = XmlNamespaceDefinitionBase.p(ST_PresetPatternVal_$type, c.value);
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 618:
                    this.c = typeCast(CT_Color_DML.$, b);
                    break;
                case 112:
                    this.a = typeCast(CT_Color_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get elementName() {
            return DrawingMLMain.hi;
        }
        saveX(a, b, c, d) {
            this.save1(a, typeCast(WorkbookSaveManagerExcel2007.$, d), b, c);
        }
        save1(a, b, c, d) {
            CT_PatternFillProperties.j(a, DrawingMLMain.hi, this.e);
            let e = this.a;
            if (e != null) {
                e.d(a, b, c, DrawingMLMain.bo);
            }
            let f = this.c;
            if (f != null) {
                f.d(a, b, c, DrawingMLMain.dw);
            }
            c.k();
        }
    }
    CT_PatternFillProperties.$t = /*@__PURE__*/ markType(CT_PatternFillProperties, 'CT_PatternFillProperties', Base.$, [ISupportSetProperty_$type, ISaveToXLSX_$type]);
    return CT_PatternFillProperties;
})();
/**
 * @hidden
 */
export let CT_FillEffect = /*@__PURE__*/ (() => {
    class CT_FillEffect extends Base {
        constructor() {
            super();
            this.a = null;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_FillProperties();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.f(a)) {
                        this.b.j(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_FillEffect.$t = /*@__PURE__*/ markType(CT_FillEffect, 'CT_FillEffect', Base.$, [ISupportSetProperty_$type]);
    return CT_FillEffect;
})();
/**
 * @hidden
 */
export let CT_ColorChangeEffect = /*@__PURE__*/ (() => {
    class CT_ColorChangeEffect extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.g = toNullable(Boolean_$type, null);
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        static i(a, b) {
            b = toNullable(Boolean_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "useA":
                        b = toNullable(Boolean_$type, ST_OnOff.e(c.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static j(a, b, c = toNullable(Boolean_$type, null)) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "useA";
                d = ST_OnOff.g(c.value);
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 281:
                    this.a = typeCast(CT_Color_DML.$, b);
                    break;
                case 288:
                    this.c = typeCast(CT_Color_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ColorChangeEffect.$t = /*@__PURE__*/ markType(CT_ColorChangeEffect, 'CT_ColorChangeEffect', Base.$, [ISupportSetProperty_$type]);
    return CT_ColorChangeEffect;
})();
/**
 * @hidden
 */
export let CT_BlendEffect = /*@__PURE__*/ (() => {
    class CT_BlendEffect extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = 0;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        static f(a, b) {
            b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "blend":
                        b = XmlNamespaceDefinitionBase.b(ST_BlendMode_$type, c.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static g(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            e = "blend";
            d = XmlNamespaceDefinitionBase.p(ST_BlendMode_$type, c);
            a.ad.h(e, d);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 344:
                    this.a = typeCast(CT_EffectContainer.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_BlendEffect.$t = /*@__PURE__*/ markType(CT_BlendEffect, 'CT_BlendEffect', Base.$, [ISupportSetProperty_$type]);
    return CT_BlendEffect;
})();
/**
 * @hidden
 */
export let CT_EffectContainer = /*@__PURE__*/ (() => {
    class CT_EffectContainer extends Base {
        constructor() {
            super();
            this.f = null;
            this.h = toNullable(ST_EffectContainerType_$type, null);
            this.j = null;
            this.b = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get c() {
            if (this.b == null) {
                this.b = new EG_Effect();
            }
            return this.b;
        }
        static a(a) {
            let b = toNullable(ST_EffectContainerType_$type, null);
            let c = null;
            let d = CT_EffectContainer.l(a, b, c);
            b = d.p1;
            c = d.p2;
            return ((() => {
                let $ret = new CT_EffectContainer();
                $ret.i = c;
                $ret.g = b;
                return $ret;
            })());
        }
        static l(a, b, c) {
            b = toNullable(ST_EffectContainerType_$type, null);
            c = null;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "type":
                        b = toNullable(ST_EffectContainerType_$type, XmlNamespaceDefinitionBase.b(ST_EffectContainerType_$type, d.d));
                        break;
                    case "name":
                        c = d.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static m(a, b, c = null, d = toNullable(ST_EffectContainerType_$type, null)) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            if (c != null) {
                f = "name";
                e = c;
                a.ad.h(f, e);
            }
            if (d.hasValue) {
                f = "type";
                e = XmlNamespaceDefinitionBase.p(ST_EffectContainerType_$type, d.value);
                a.ad.h(f, e);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.c.ae(a)) {
                        this.c.ag(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_EffectContainer.$t = /*@__PURE__*/ markType(CT_EffectContainer, 'CT_EffectContainer', Base.$, [ISupportSetProperty_$type]);
    return CT_EffectContainer;
})();
/**
 * @hidden
 */
export let CT_AlphaModulateEffect = /*@__PURE__*/ (() => {
    class CT_AlphaModulateEffect extends Base {
        constructor() {
            super();
            this.b = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 344:
                    this.a = typeCast(CT_EffectContainer.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_AlphaModulateEffect.$t = /*@__PURE__*/ markType(CT_AlphaModulateEffect, 'CT_AlphaModulateEffect', Base.$, [ISupportSetProperty_$type]);
    return CT_AlphaModulateEffect;
})();
/**
 * @hidden
 */
export let CT_GradientStopList = /*@__PURE__*/ (() => {
    class CT_GradientStopList extends Base {
        constructor() {
            super();
            this.d = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 756:
                    this.c.add(typeCast(CT_GradientStop.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static e(a) {
            return a != null ? a.c : null;
        }
        static a(a) {
            let b = new CT_GradientStopList();
            b.d = a;
            return b;
        }
    }
    CT_GradientStopList.$t = /*@__PURE__*/ markType(CT_GradientStopList, 'CT_GradientStopList', Base.$, [ISupportSetProperty_$type]);
    return CT_GradientStopList;
})();
/**
 * @hidden
 */
export let CT_FillProperties = /*@__PURE__*/ (() => {
    class CT_FillProperties extends Base {
        constructor() {
            super();
            this.a = null;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_FillProperties();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.f(a)) {
                        this.b.j(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_FillProperties.$t = /*@__PURE__*/ markType(CT_FillProperties, 'CT_FillProperties', Base.$, [ISupportSetProperty_$type]);
    return CT_FillProperties;
})();
/**
 * @hidden
 */
export let CT_EffectList = /*@__PURE__*/ (() => {
    class CT_EffectList extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.f = null;
            this.h = null;
            this.j = null;
            this.l = null;
            this.n = null;
            this.p = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 134:
                    this.a = typeCast(CT_BlurEffect.$, b);
                    break;
                case 633:
                    this.c = typeCast(CT_FillOverlayEffect.$, b);
                    break;
                case 724:
                    this.e = typeCast(CT_GlowEffect.$, b);
                    break;
                case 830:
                    this.g = typeCast(CT_InnerShadowEffect.$, b);
                    break;
                case 1142:
                    this.i = typeCast(CT_OuterShadowEffect.$, b);
                    break;
                case 1275:
                    this.k = typeCast(CT_PresetShadowEffect.$, b);
                    break;
                case 1338:
                    this.m = typeCast(CT_ReflectionEffect.$, b);
                    break;
                case 1551:
                    this.o = typeCast(CT_SoftEdgesEffect.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_EffectList.$t = /*@__PURE__*/ markType(CT_EffectList, 'CT_EffectList', Base.$, [ISupportSetProperty_$type]);
    return CT_EffectList;
})();
/**
 * @hidden
 */
export let CT_EffectProperties = /*@__PURE__*/ (() => {
    class CT_EffectProperties extends Base {
        constructor() {
            super();
            this.a = null;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_EffectProperties();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.c(a)) {
                        this.b.e(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_EffectProperties.$t = /*@__PURE__*/ markType(CT_EffectProperties, 'CT_EffectProperties', Base.$, [ISupportSetProperty_$type]);
    return CT_EffectProperties;
})();
/**
 * @hidden
 */
export let CT_ShapeProperties_DML = /*@__PURE__*/ (() => {
    class CT_ShapeProperties_DML extends Base {
        constructor() {
            super();
            this.p = null;
            this.b = null;
            this.f = null;
            this.h = null;
            this.d = null;
            this.r = toNullable(ST_BlackWhiteMode_$type, null);
            this.m = null;
            this.k = null;
            this.i = null;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get n() {
            if (this.m == null) {
                this.m = new EG_Geometry();
            }
            return this.m;
        }
        get l() {
            if (this.k == null) {
                this.k = new EG_FillProperties();
            }
            return this.k;
        }
        get j() {
            if (this.i == null) {
                this.i = new EG_EffectProperties();
            }
            return this.i;
        }
        static t(a, b) {
            b = toNullable(ST_BlackWhiteMode_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "bwMode":
                        b = toNullable(ST_BlackWhiteMode_$type, XmlNamespaceDefinitionBase.b(ST_BlackWhiteMode_$type, c.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static u(a, b, c = toNullable(ST_BlackWhiteMode_$type, null)) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "bwMode";
                d = XmlNamespaceDefinitionBase.p(ST_BlackWhiteMode_$type, c.value);
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1892:
                    this.o = typeCast(CT_Transform2D.$, b);
                    break;
                case 918:
                    this.a = typeCast(CT_LineProperties_DML.$, b);
                    break;
                case 1423:
                    this.e = typeCast(CT_Scene3D.$, b);
                    break;
                case 1564:
                    this.g = typeCast(CT_Shape3D.$, b);
                    break;
                case 601:
                    this.c = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default:
                    if (this.n.c(a)) {
                        this.n.e(a, b);
                        return;
                    }
                    else if (this.l.f(a)) {
                        this.l.j(a, b);
                        return;
                    }
                    else if (this.j.c(a)) {
                        this.j.e(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ShapeProperties_DML.$t = /*@__PURE__*/ markType(CT_ShapeProperties_DML, 'CT_ShapeProperties_DML', Base.$, [ISupportSetProperty_$type]);
    return CT_ShapeProperties_DML;
})();
/**
 * @hidden
 */
export let CT_StyleMatrixReference_DML = /*@__PURE__*/ (() => {
    class CT_StyleMatrixReference_DML extends Base {
        constructor() {
            super();
            this.e = 0;
            this.a = null;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_ColorChoice_DML();
            }
            return this.a;
        }
        static f(a, b) {
            b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "idx":
                        b = parseUInt32_1(c.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static g(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            e = "idx";
            d = c.toString();
            a.ad.h(e, d);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.g(a)) {
                        this.b.i(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_StyleMatrixReference_DML.$t = /*@__PURE__*/ markType(CT_StyleMatrixReference_DML, 'CT_StyleMatrixReference_DML', Base.$, [ISupportSetProperty_$type]);
    return CT_StyleMatrixReference_DML;
})();
/**
 * @hidden
 */
export let CT_ColorMapping = /*@__PURE__*/ (() => {
    class CT_ColorMapping extends Base {
        constructor() {
            super();
            this.c = null;
            this.q = 0;
            this.y = 0;
            this.s = 0;
            this.aa = 0;
            this.e = 0;
            this.g = 0;
            this.i = 0;
            this.k = 0;
            this.m = 0;
            this.o = 0;
            this.w = 0;
            this.u = 0;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get z() {
            return this.aa;
        }
        set z(a) {
            this.aa = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        static a(a) {
            let b = 0;
            let c = 0;
            let d = 0;
            let e = 0;
            let f = 0;
            let g = 0;
            let h = 0;
            let i = 0;
            let j = 0;
            let k = 0;
            let l = 0;
            let m = 0;
            let n = CT_ColorMapping.ac(a, b, c, d, e, f, g, h, i, j, k, l, m);
            b = n.p1;
            c = n.p2;
            d = n.p3;
            e = n.p4;
            f = n.p5;
            g = n.p6;
            h = n.p7;
            i = n.p8;
            j = n.p9;
            k = n.p10;
            l = n.p11;
            m = n.p12;
            return ((() => {
                let $ret = new CT_ColorMapping();
                $ret.d = f;
                $ret.f = g;
                $ret.h = h;
                $ret.j = i;
                $ret.l = j;
                $ret.n = k;
                $ret.p = b;
                $ret.r = d;
                $ret.v = l;
                $ret.t = m;
                $ret.x = c;
                $ret.z = e;
                return $ret;
            })());
        }
        static ac(a, b, c, d, e, f, g, h, i, j, k, l, m) {
            b = 0;
            c = 0;
            d = 0;
            e = 0;
            f = 0;
            g = 0;
            h = 0;
            i = 0;
            j = 0;
            k = 0;
            l = 0;
            m = 0;
            for (let n of fromEnum(a.ab.u)) {
                switch (n.a.e(a.d)) {
                    case "bg1":
                        b = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "tx1":
                        c = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "bg2":
                        d = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "tx2":
                        e = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "accent1":
                        f = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "accent2":
                        g = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "accent3":
                        h = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "accent4":
                        i = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "accent5":
                        j = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "accent6":
                        k = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "hlink":
                        l = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    case "folHlink":
                        m = XmlNamespaceDefinitionBase.b(ST_ColorSchemeIndex_$type, n.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k,
                p11: l,
                p12: m
            };
        }
        static ad(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
            a.ad.p(b, "a");
            let o = null;
            let p = null;
            p = "accent1";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, c);
            a.ad.h(p, o);
            p = "accent2";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, d);
            a.ad.h(p, o);
            p = "accent3";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, e);
            a.ad.h(p, o);
            p = "accent4";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, f);
            a.ad.h(p, o);
            p = "accent5";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, g);
            a.ad.h(p, o);
            p = "accent6";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, h);
            a.ad.h(p, o);
            p = "bg1";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, i);
            a.ad.h(p, o);
            p = "bg2";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, j);
            a.ad.h(p, o);
            p = "folHlink";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, k);
            a.ad.h(p, o);
            p = "hlink";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, l);
            a.ad.h(p, o);
            p = "tx1";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, m);
            a.ad.h(p, o);
            p = "tx2";
            o = XmlNamespaceDefinitionBase.p(ST_ColorSchemeIndex_$type, n);
            a.ad.h(p, o);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 601:
                    this.b = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ColorMapping.$t = /*@__PURE__*/ markType(CT_ColorMapping, 'CT_ColorMapping', Base.$, [ISupportSetProperty_$type]);
    return CT_ColorMapping;
})();
/**
 * @hidden
 */
export let CT_TextListStyle_DML = /*@__PURE__*/ (() => {
    class CT_TextListStyle_DML extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.h = null;
            this.j = null;
            this.l = null;
            this.n = null;
            this.p = null;
            this.r = null;
            this.t = null;
            this.v = null;
            this.b = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get s() {
            return this.t;
        }
        set s(a) {
            this.t = a;
        }
        get u() {
            return this.v;
        }
        set u(a) {
            this.v = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 454:
                    this.c = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 945:
                    this.e = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 946:
                    this.g = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 947:
                    this.i = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 948:
                    this.k = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 949:
                    this.m = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 950:
                    this.o = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 951:
                    this.q = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 952:
                    this.s = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 953:
                    this.u = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 601:
                    this.a = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TextListStyle_DML.$t = /*@__PURE__*/ markType(CT_TextListStyle_DML, 'CT_TextListStyle_DML', Base.$, [ISupportSetProperty_$type]);
    return CT_TextListStyle_DML;
})();
/**
 * @hidden
 */
export let CT_TextBodyProperties_DML = /*@__PURE__*/ (() => {
    class CT_TextBodyProperties_DML extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.b = null;
            this.ag = toNullable(Number_$type, null);
            this.am = toNullable(Boolean_$type, null);
            this.au = toNullable(ST_TextVertOverflowType_$type, null);
            this.y = toNullable(ST_TextHorzOverflowType_$type, null);
            this.as = toNullable(ST_TextVerticalType_$type, null);
            this.aw = toNullable(ST_TextWrappingType_$type, null);
            this.aa = toNullable(Number_$type, null);
            this.ao = toNullable(Number_$type, null);
            this.ae = toNullable(Number_$type, null);
            this.q = toNullable(Number_$type, null);
            this.ac = toNullable(Number_$type, null);
            this.ak = toNullable(Number_$type, null);
            this.ai = toNullable(Boolean_$type, null);
            this.w = toNullable(Boolean_$type, null);
            this.o = toNullable(ST_TextAnchoringType_$type, null);
            this.n = toNullable(Boolean_$type, null);
            this.u = toNullable(Boolean_$type, null);
            this.aq = toNullable(Boolean_$type, null);
            this.s = toNullable(Boolean_$type, null);
            this.i = null;
            this.g = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get af() {
            return this.ag;
        }
        set af(a) {
            this.ag = a;
        }
        get al() {
            return this.am;
        }
        set al(a) {
            this.am = a;
        }
        get at() {
            return this.au;
        }
        set at(a) {
            this.au = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        get ar() {
            return this.as;
        }
        set ar(a) {
            this.as = a;
        }
        get av() {
            return this.aw;
        }
        set av(a) {
            this.aw = a;
        }
        get z() {
            return this.aa;
        }
        set z(a) {
            this.aa = a;
        }
        get an() {
            return this.ao;
        }
        set an(a) {
            this.ao = a;
        }
        get ad() {
            return this.ae;
        }
        set ad(a) {
            this.ae = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get ab() {
            return this.ac;
        }
        set ab(a) {
            this.ac = a;
        }
        get aj() {
            return this.ak;
        }
        set aj(a) {
            this.ak = a;
        }
        get ah() {
            return this.ai;
        }
        set ah(a) {
            this.ai = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get l() {
            return this.o;
        }
        set l(a) {
            this.o = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get ap() {
            return this.aq;
        }
        set ap(a) {
            this.aq = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get j() {
            if (this.i == null) {
                this.i = new EG_TextAutofit();
            }
            return this.i;
        }
        get h() {
            if (this.g == null) {
                this.g = new EG_Text3D();
            }
            return this.g;
        }
        static ay(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
            b = toNullable(Number_$type, null);
            c = toNullable(Boolean_$type, null);
            d = toNullable(ST_TextVertOverflowType_$type, null);
            e = toNullable(ST_TextHorzOverflowType_$type, null);
            f = toNullable(ST_TextVerticalType_$type, null);
            g = toNullable(ST_TextWrappingType_$type, null);
            h = toNullable(Number_$type, null);
            i = toNullable(Number_$type, null);
            j = toNullable(Number_$type, null);
            k = toNullable(Number_$type, null);
            l = toNullable(Number_$type, null);
            m = toNullable(Number_$type, null);
            n = toNullable(Boolean_$type, null);
            o = toNullable(Boolean_$type, null);
            p = toNullable(ST_TextAnchoringType_$type, null);
            q = toNullable(Boolean_$type, null);
            r = toNullable(Boolean_$type, null);
            s = toNullable(Boolean_$type, null);
            t = toNullable(Boolean_$type, null);
            for (let u of fromEnum(a.ab.u)) {
                switch (u.a.e(a.d)) {
                    case "rot":
                        b = toNullable(Number_$type, parseInt32_1(u.d, CultureInfo.invariantCulture));
                        break;
                    case "spcFirstLastPara":
                        c = toNullable(Boolean_$type, ST_OnOff.e(u.d));
                        break;
                    case "vertOverflow":
                        d = toNullable(ST_TextVertOverflowType_$type, XmlNamespaceDefinitionBase.b(ST_TextVertOverflowType_$type, u.d));
                        break;
                    case "horzOverflow":
                        e = toNullable(ST_TextHorzOverflowType_$type, XmlNamespaceDefinitionBase.b(ST_TextHorzOverflowType_$type, u.d));
                        break;
                    case "vert":
                        f = toNullable(ST_TextVerticalType_$type, XmlNamespaceDefinitionBase.b(ST_TextVerticalType_$type, u.d));
                        break;
                    case "wrap":
                        g = toNullable(ST_TextWrappingType_$type, XmlNamespaceDefinitionBase.b(ST_TextWrappingType_$type, u.d));
                        break;
                    case "lIns":
                        h = toNullable(Number_$type, parseInt32_1(u.d, CultureInfo.invariantCulture));
                        break;
                    case "tIns":
                        i = toNullable(Number_$type, parseInt32_1(u.d, CultureInfo.invariantCulture));
                        break;
                    case "rIns":
                        j = toNullable(Number_$type, parseInt32_1(u.d, CultureInfo.invariantCulture));
                        break;
                    case "bIns":
                        k = toNullable(Number_$type, parseInt32_1(u.d, CultureInfo.invariantCulture));
                        break;
                    case "numCol":
                        l = toNullable(Number_$type, parseInt32_1(u.d, CultureInfo.invariantCulture));
                        break;
                    case "spcCol":
                        m = toNullable(Number_$type, parseInt32_1(u.d, CultureInfo.invariantCulture));
                        break;
                    case "rtlCol":
                        n = toNullable(Boolean_$type, ST_OnOff.e(u.d));
                        break;
                    case "fromWordArt":
                        o = toNullable(Boolean_$type, ST_OnOff.e(u.d));
                        break;
                    case "anchor":
                        p = toNullable(ST_TextAnchoringType_$type, XmlNamespaceDefinitionBase.b(ST_TextAnchoringType_$type, u.d));
                        break;
                    case "anchorCtr":
                        q = toNullable(Boolean_$type, ST_OnOff.e(u.d));
                        break;
                    case "forceAA":
                        r = toNullable(Boolean_$type, ST_OnOff.e(u.d));
                        break;
                    case "upright":
                        s = toNullable(Boolean_$type, ST_OnOff.e(u.d));
                        break;
                    case "compatLnSpc":
                        t = toNullable(Boolean_$type, ST_OnOff.e(u.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k,
                p11: l,
                p12: m,
                p13: n,
                p14: o,
                p15: p,
                p16: q,
                p17: r,
                p18: s,
                p19: t
            };
        }
        static az(a, b, c = toNullable(ST_TextAnchoringType_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(Number_$type, null), f = toNullable(Boolean_$type, null), g = toNullable(Boolean_$type, null), h = toNullable(Boolean_$type, null), i = toNullable(ST_TextHorzOverflowType_$type, null), j = toNullable(Number_$type, null), k = toNullable(Number_$type, null), l = toNullable(Number_$type, null), m = toNullable(Number_$type, null), n = toNullable(Boolean_$type, null), o = toNullable(Number_$type, null), p = toNullable(Boolean_$type, null), q = toNullable(Number_$type, null), r = toNullable(Boolean_$type, null), s = toNullable(ST_TextVerticalType_$type, null), t = toNullable(ST_TextVertOverflowType_$type, null), u = toNullable(ST_TextWrappingType_$type, null)) {
            a.ad.p(b, "a");
            let v = null;
            let w = null;
            if (c.hasValue) {
                w = "anchor";
                v = XmlNamespaceDefinitionBase.p(ST_TextAnchoringType_$type, c.value);
                a.ad.h(w, v);
            }
            if (d.hasValue) {
                w = "anchorCtr";
                v = ST_OnOff.g(d.value);
                a.ad.h(w, v);
            }
            if (e.hasValue) {
                w = "bIns";
                v = e.value.toString();
                a.ad.h(w, v);
            }
            if (f.hasValue) {
                w = "compatLnSpc";
                v = ST_OnOff.g(f.value);
                a.ad.h(w, v);
            }
            if (g.hasValue) {
                w = "forceAA";
                v = ST_OnOff.g(g.value);
                a.ad.h(w, v);
            }
            if (h.hasValue) {
                w = "fromWordArt";
                v = ST_OnOff.g(h.value);
                a.ad.h(w, v);
            }
            if (i.hasValue) {
                w = "horzOverflow";
                v = XmlNamespaceDefinitionBase.p(ST_TextHorzOverflowType_$type, i.value);
                a.ad.h(w, v);
            }
            if (j.hasValue) {
                w = "lIns";
                v = j.value.toString();
                a.ad.h(w, v);
            }
            if (k.hasValue) {
                w = "numCol";
                v = k.value.toString();
                a.ad.h(w, v);
            }
            if (l.hasValue) {
                w = "rIns";
                v = l.value.toString();
                a.ad.h(w, v);
            }
            if (m.hasValue) {
                w = "rot";
                v = m.value.toString();
                a.ad.h(w, v);
            }
            if (n.hasValue) {
                w = "rtlCol";
                v = ST_OnOff.g(n.value);
                a.ad.h(w, v);
            }
            if (o.hasValue) {
                w = "spcCol";
                v = o.value.toString();
                a.ad.h(w, v);
            }
            if (p.hasValue) {
                w = "spcFirstLastPara";
                v = ST_OnOff.g(p.value);
                a.ad.h(w, v);
            }
            if (q.hasValue) {
                w = "tIns";
                v = q.value.toString();
                a.ad.h(w, v);
            }
            if (r.hasValue) {
                w = "upright";
                v = ST_OnOff.g(r.value);
                a.ad.h(w, v);
            }
            if (s.hasValue) {
                w = "vert";
                v = XmlNamespaceDefinitionBase.p(ST_TextVerticalType_$type, s.value);
                a.ad.h(w, v);
            }
            if (t.hasValue) {
                w = "vertOverflow";
                v = XmlNamespaceDefinitionBase.p(ST_TextVertOverflowType_$type, t.value);
                a.ad.h(w, v);
            }
            if (u.hasValue) {
                w = "wrap";
                v = XmlNamespaceDefinitionBase.p(ST_TextWrappingType_$type, u.value);
                a.ad.h(w, v);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1276:
                    this.c = typeCast(CT_PresetTextShape.$, b);
                    break;
                case 1423:
                    this.e = typeCast(CT_Scene3D.$, b);
                    break;
                case 601:
                    this.a = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default:
                    if (this.j.d(a)) {
                        this.j.f(a, b);
                        return;
                    }
                    else if (this.h.c(a)) {
                        this.h.e(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TextBodyProperties_DML.$t = /*@__PURE__*/ markType(CT_TextBodyProperties_DML, 'CT_TextBodyProperties_DML', Base.$, [ISupportSetProperty_$type]);
    return CT_TextBodyProperties_DML;
})();
/**
 * @hidden
 */
export let CT_TextBlipBullet = /*@__PURE__*/ (() => {
    class CT_TextBlipBullet extends Base {
        constructor() {
            super();
            this.b = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 127:
                    this.a = typeCast(CT_Blip_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TextBlipBullet.$t = /*@__PURE__*/ markType(CT_TextBlipBullet, 'CT_TextBlipBullet', Base.$, [ISupportSetProperty_$type]);
    return CT_TextBlipBullet;
})();
/**
 * @hidden
 */
export let CT_TextUnderlineFillGroupWrapper = /*@__PURE__*/ (() => {
    class CT_TextUnderlineFillGroupWrapper extends Base {
        constructor() {
            super(...arguments);
            this.d = null;
            this.a = null;
        }
        get item() {
            return this.d;
        }
        set item(a) {
            this.d = a;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_FillProperties();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                default:
                    if (this.b.f(a)) {
                        this.b.j(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TextUnderlineFillGroupWrapper.$t = /*@__PURE__*/ markType(CT_TextUnderlineFillGroupWrapper, 'CT_TextUnderlineFillGroupWrapper', Base.$, [ISupportSetProperty_$type]);
    return CT_TextUnderlineFillGroupWrapper;
})();
/**
 * @hidden
 */
export let CT_TextLineBreak = /*@__PURE__*/ (() => {
    class CT_TextLineBreak extends Base {
        constructor() {
            super();
            this.b = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1305:
                    this.a = typeCast(CT_TextCharacterProperties_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TextLineBreak.$t = /*@__PURE__*/ markType(CT_TextLineBreak, 'CT_TextLineBreak', Base.$, [ISupportSetProperty_$type]);
    return CT_TextLineBreak;
})();
/**
 * @hidden
 */
export let CT_TextSpacing = /*@__PURE__*/ (() => {
    class CT_TextSpacing extends Base {
        constructor() {
            super(...arguments);
            this.d = null;
            this.a = null;
            this.b = null;
        }
        get item() {
            return this.d;
        }
        set item(a) {
            this.d = a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 1566:
                    this.a = typeCast(CT_TextSpacingPercent.$, b);
                    break;
                case 1567:
                    this.b = typeCast(CT_TextSpacingPoint.$, b);
                    break;
            }
        }
        f(a, b, c, d) {
            c.p(d, "a");
            c.k();
        }
    }
    CT_TextSpacing.$t = /*@__PURE__*/ markType(CT_TextSpacing, 'CT_TextSpacing', Base.$, [ISupportSetProperty_$type]);
    return CT_TextSpacing;
})();
/**
 * @hidden
 */
export let CT_TextField = /*@__PURE__*/ (() => {
    class CT_TextField extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.h = null;
            this.f = null;
            this.k = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        static l(a, b, c) {
            b = null;
            c = null;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "id":
                        b = d.d;
                        break;
                    case "type":
                        c = d.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static m(a, b, c, d) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            if (c != null) {
                f = "type";
                e = c;
                a.ad.h(f, e);
            }
            if (d != null) {
                f = "id";
                e = d;
                a.ad.h(f, e);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1305:
                    this.a = typeCast(CT_TextCharacterProperties_DML.$, b);
                    break;
                case 1154:
                    this.c = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 1655:
                    this.g = typeCast(String_$type, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TextField.$t = /*@__PURE__*/ markType(CT_TextField, 'CT_TextField', Base.$, [ISupportSetProperty_$type]);
    return CT_TextField;
})();
/**
 * @hidden
 */
export let CT_RegularTextRun_DML = /*@__PURE__*/ (() => {
    class CT_RegularTextRun_DML extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1305:
                    this.a = typeCast(CT_TextCharacterProperties_DML.$, b);
                    break;
                case 1655:
                    this.c = typeCast(String_$type, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_RegularTextRun_DML.$t = /*@__PURE__*/ markType(CT_RegularTextRun_DML, 'CT_RegularTextRun_DML', Base.$, [ISupportSetProperty_$type]);
    return CT_RegularTextRun_DML;
})();
/**
 * @hidden
 */
export let EG_EffectProperties = /*@__PURE__*/ (() => {
    class EG_EffectProperties extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
        }
        d(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.v(this.a, a, b, c, DrawingMLMain.di);
            }
            if (this.b != null) {
                DMLExtensions.w(this.b, a, b, c, DrawingMLMain.dj);
            }
        }
        e(a, b) {
            switch (a) {
                case 558:
                    this.a = typeCast(CT_EffectContainer.$, b);
                    break;
                case 560:
                    this.b = typeCast(CT_EffectList.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 558:
                case 560: return true;
            }
            return false;
        }
    }
    EG_EffectProperties.$t = /*@__PURE__*/ markType(EG_EffectProperties, 'EG_EffectProperties');
    return EG_EffectProperties;
})();
/**
 * @hidden
 */
export let EG_OfficeArtExtensionList = /*@__PURE__*/ (() => {
    class EG_OfficeArtExtensionList extends Base {
        constructor() {
            super();
            this.b = null;
            this.b = new List$1(CT_OfficeArtExtension.$, 0);
        }
        c(a, b, c, d) {
            if (this.b != null) {
                for (let e of fromEnum(this.b)) {
                    e.e(a, b, c, DrawingMLMain.dr);
                }
            }
        }
        d(a, b) {
            switch (a) {
                case 599:
                    this.b.add(typeCast(CT_OfficeArtExtension.$, b));
                    break;
                default: break;
            }
        }
        a(a) {
            switch (a) {
                case 599: return true;
            }
            return false;
        }
    }
    EG_OfficeArtExtensionList.$t = /*@__PURE__*/ markType(EG_OfficeArtExtensionList, 'EG_OfficeArtExtensionList');
    return EG_OfficeArtExtensionList;
})();
/**
 * @hidden
 */
export let EG_FillPropertiesBase = /*@__PURE__*/ (() => {
    class EG_FillPropertiesBase extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.d = null;
            this.b = null;
            this.c = null;
        }
        h(a, b, c, d) {
            if (this.a != null) {
                this.a.save1(a, b, c, DrawingMLMain.ek);
            }
            if (this.d != null) {
                DMLExtensions.ci(this.d, a, b, c, DrawingMLMain.gz);
            }
            if (this.b != null) {
                this.b.save1(a, b, c, DrawingMLMain.hi);
            }
            if (this.c != null) {
                this.c.save1(a, b, c, DrawingMLMain.ip);
            }
        }
        j(a, b) {
            switch (a) {
                case 725:
                    this.a = typeCast(CT_GradientFillProperties.$, b);
                    break;
                case 1063:
                    this.d = typeCast(CT_NoFillProperties.$, b);
                    break;
                case 1553:
                    this.c = typeCast(CT_SolidColorFillProperties.$, b);
                    break;
                case 1174:
                    this.b = typeCast(CT_PatternFillProperties.$, b);
                    break;
                default: break;
            }
        }
        f(a) {
            switch (a) {
                case 725:
                case 1063:
                case 1553:
                case 1174: return true;
            }
            return false;
        }
        get_e() {
            return this.a != null || this.d != null || this.b != null || this.c != null;
        }
        get e() {
            return this.get_e();
        }
        i() {
            this.g();
            this.d = new CT_NoFillProperties();
        }
        g() {
            this.a = null;
            this.d = null;
            this.b = null;
            this.c = null;
        }
    }
    EG_FillPropertiesBase.$t = /*@__PURE__*/ markType(EG_FillPropertiesBase, 'EG_FillPropertiesBase');
    return EG_FillPropertiesBase;
})();
/**
 * @hidden
 */
export let EG_FillProperties = /*@__PURE__*/ (() => {
    class EG_FillProperties extends EG_FillPropertiesBase {
        constructor() {
            super(...arguments);
            this.k = null;
            this.l = null;
        }
        h(a, b, c, d) {
            super.h(a, b, c, d);
            if (this.k != null) {
                this.k.save1(a, b, c, DrawingMLMain.bu);
            }
            if (this.l != null) {
                DMLExtensions.cb(this.l, a, b, c, DrawingMLMain.et);
            }
        }
        j(a, b) {
            switch (a) {
                case 128:
                    this.k = typeCast(CT_BlipFillProperties_DML.$, b);
                    break;
                case 752:
                    this.l = typeCast(CT_GroupFillProperties.$, b);
                    break;
                default:
                    super.j(a, b);
                    break;
            }
        }
        f(a) {
            switch (a) {
                case 128:
                case 752: return true;
            }
            return super.f(a);
            ;
        }
        get_e() {
            return super.get_e() || this.l != null || this.k != null;
        }
        g() {
            super.g();
            this.k = null;
            this.l = null;
        }
    }
    EG_FillProperties.$t = /*@__PURE__*/ markType(EG_FillProperties, 'EG_FillProperties', EG_FillPropertiesBase.$);
    return EG_FillProperties;
})();
/**
 * @hidden
 */
export let EG_ShadeProperties = /*@__PURE__*/ (() => {
    class EG_ShadeProperties extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
        }
        d(a, b, c, d) {
            if (this.a != null) {
                this.a.g(a, b, c, DrawingMLMain.fv);
            }
            if (this.b != null) {
                this.b.g(a, b, c, DrawingMLMain.hg);
            }
        }
        e(a, b) {
            switch (a) {
                case 903:
                    this.a = typeCast(CT_LinearShadeProperties.$, b);
                    break;
                case 1172:
                    this.b = typeCast(CT_PathShadeProperties.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 903:
                case 1172: return true;
            }
            return false;
        }
    }
    EG_ShadeProperties.$t = /*@__PURE__*/ markType(EG_ShadeProperties, 'EG_ShadeProperties');
    return EG_ShadeProperties;
})();
/**
 * @hidden
 */
export let EG_Effect = /*@__PURE__*/ (() => {
    class EG_Effect extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
            this.c = null;
            this.d = null;
            this.e = null;
            this.f = null;
            this.g = null;
            this.h = null;
            this.i = null;
            this.j = null;
            this.k = null;
            this.l = null;
            this.m = null;
            this.o = null;
            this.n = null;
            this.p = null;
            this.q = null;
            this.r = null;
            this.s = null;
            this.t = null;
            this.u = null;
            this.v = null;
            this.w = null;
            this.x = null;
            this.y = null;
            this.z = null;
            this.aa = null;
            this.ab = null;
            this.ac = null;
            this.ad = null;
        }
        af(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.a(this.a, a, b, c, DrawingMLMain.a3);
            }
            if (this.b != null) {
                DMLExtensions.b(this.b, a, b, c, DrawingMLMain.a4);
            }
            if (this.c != null) {
                DMLExtensions.c(this.c, a, b, c, DrawingMLMain.a5);
            }
            if (this.d != null) {
                this.d.d(a, b, c, DrawingMLMain.a6);
            }
            if (this.e != null) {
                DMLExtensions.e(this.e, a, b, c, DrawingMLMain.a7);
            }
            if (this.f != null) {
                DMLExtensions.f(this.f, a, b, c, DrawingMLMain.a8);
            }
            if (this.g != null) {
                DMLExtensions.g(this.g, a, b, c, DrawingMLMain.ba);
            }
            if (this.h != null) {
                DMLExtensions.h(this.h, a, b, c, DrawingMLMain.bb);
            }
            if (this.i != null) {
                DMLExtensions.l(this.i, a, b, c, DrawingMLMain.bq);
            }
            if (this.j != null) {
                DMLExtensions.m(this.j, a, b, c, DrawingMLMain.bs);
            }
            if (this.k != null) {
                DMLExtensions.p(this.k, a, b, c, DrawingMLMain.by);
            }
            if (this.l != null) {
                DMLExtensions.s(this.l, a, b, c, DrawingMLMain.ck);
            }
            if (this.m != null) {
                this.m.d(a, b, c, DrawingMLMain.cm);
            }
            if (this.o != null) {
                DMLExtensions.v(this.o, a, b, c, DrawingMLMain.cs);
            }
            if (this.n != null) {
                this.n.d(a, b, c, DrawingMLMain.de);
            }
            if (this.p != null) {
                DMLExtensions.y(this.p, a, b, c, DrawingMLMain.dh);
            }
            if (this.q != null) {
                DMLExtensions.ab(this.q, a, b, c, DrawingMLMain.dx);
            }
            if (this.r != null) {
                this.r.g(a, b, c, DrawingMLMain.dy);
            }
            if (this.s != null) {
                this.s.h(a, b, c, DrawingMLMain.ej);
            }
            if (this.t != null) {
                DMLExtensions.ak(this.t, a, b, c, DrawingMLMain.ep);
            }
            if (this.u != null) {
                DMLExtensions.al(this.u, a, b, c, DrawingMLMain.e7);
            }
            if (this.v != null) {
                this.v.n(a, b, c, DrawingMLMain.fg);
            }
            if (this.w != null) {
                DMLExtensions.ar(this.w, a, b, c, DrawingMLMain.f5);
            }
            if (this.x != null) {
                this.x.ag(a, b, c, DrawingMLMain.hd);
            }
            if (this.y != null) {
                this.y.m(a, b, c, DrawingMLMain.hr);
            }
            if (this.z != null) {
                DMLExtensions.a0(this.z, a, b, c, DrawingMLMain.h1);
            }
            if (this.aa != null) {
                DMLExtensions.a2(this.aa, a, b, c, DrawingMLMain.h2);
            }
            if (this.ab != null) {
                DMLExtensions.a6(this.ab, a, b, c, DrawingMLMain.io);
            }
            if (this.ac != null) {
                DMLExtensions.bu(this.ac, a, b, c, DrawingMLMain.jn);
            }
            if (this.ad != null) {
                DMLExtensions.bv(this.ad, a, b, c, DrawingMLMain.j9);
            }
        }
        ag(a, b) {
            switch (a) {
                case 344:
                    this.o = typeCast(CT_EffectContainer.$, b);
                    break;
                case 556:
                    this.p = typeCast(CT_EffectReference.$, b);
                    break;
                case 32:
                    this.a = typeCast(CT_AlphaBiLevelEffect.$, b);
                    break;
                case 33:
                    this.b = typeCast(CT_AlphaCeilingEffect.$, b);
                    break;
                case 34:
                    this.c = typeCast(CT_AlphaFloorEffect.$, b);
                    break;
                case 35:
                    this.d = typeCast(CT_AlphaInverseEffect.$, b);
                    break;
                case 36:
                    this.e = typeCast(CT_AlphaModulateEffect.$, b);
                    break;
                case 37:
                    this.f = typeCast(CT_AlphaModulateFixedEffect.$, b);
                    break;
                case 39:
                    this.g = typeCast(CT_AlphaOutsetEffect.$, b);
                    break;
                case 40:
                    this.h = typeCast(CT_AlphaReplaceEffect.$, b);
                    break;
                case 117:
                    this.i = typeCast(CT_BiLevelEffect.$, b);
                    break;
                case 125:
                    this.j = typeCast(CT_BlendEffect.$, b);
                    break;
                case 134:
                    this.k = typeCast(CT_BlurEffect.$, b);
                    break;
                case 279:
                    this.l = typeCast(CT_ColorChangeEffect.$, b);
                    break;
                case 285:
                    this.m = typeCast(CT_ColorReplaceEffect.$, b);
                    break;
                case 546:
                    this.n = typeCast(CT_DuotoneEffect.$, b);
                    break;
                case 630:
                    this.q = typeCast(CT_FillEffect.$, b);
                    break;
                case 633:
                    this.r = typeCast(CT_FillOverlayEffect.$, b);
                    break;
                case 724:
                    this.s = typeCast(CT_GlowEffect.$, b);
                    break;
                case 732:
                    this.t = typeCast(CT_GrayscaleEffect.$, b);
                    break;
                case 799:
                    this.u = typeCast(CT_HSLEffect.$, b);
                    break;
                case 830:
                    this.v = typeCast(CT_InnerShadowEffect.$, b);
                    break;
                case 941:
                    this.w = typeCast(CT_LuminanceEffect.$, b);
                    break;
                case 1142:
                    this.x = typeCast(CT_OuterShadowEffect.$, b);
                    break;
                case 1275:
                    this.y = typeCast(CT_PresetShadowEffect.$, b);
                    break;
                case 1338:
                    this.z = typeCast(CT_ReflectionEffect.$, b);
                    break;
                case 1343:
                    this.aa = typeCast(CT_RelativeOffsetEffect.$, b);
                    break;
                case 1551:
                    this.ab = typeCast(CT_SoftEdgesEffect.$, b);
                    break;
                case 1744:
                    this.ac = typeCast(CT_TintEffect.$, b);
                    break;
                case 1892:
                    this.ad = typeCast(CT_TransformEffect.$, b);
                    break;
                default: break;
            }
        }
        ae(a) {
            switch (a) {
                case 344:
                case 556:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 39:
                case 40:
                case 117:
                case 125:
                case 134:
                case 279:
                case 285:
                case 546:
                case 630:
                case 633:
                case 724:
                case 732:
                case 799:
                case 830:
                case 941:
                case 1142:
                case 1275:
                case 1338:
                case 1343:
                case 1551:
                case 1744:
                case 1892: return true;
            }
            return false;
        }
    }
    EG_Effect.$t = /*@__PURE__*/ markType(EG_Effect, 'EG_Effect');
    return EG_Effect;
})();
/**
 * @hidden
 */
export let EG_Geometry = /*@__PURE__*/ (() => {
    class EG_Geometry extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
        }
        d(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.b2(this.a, a, b, c, DrawingMLMain.c0);
            }
            if (this.b != null) {
                DMLExtensions.cr(this.b, a, b, c, DrawingMLMain.hq);
            }
        }
        e(a, b) {
            switch (a) {
                case 371:
                    this.a = typeCast(CT_CustomGeometry2D.$, b);
                    break;
                case 1274:
                    this.b = typeCast(CT_PresetGeometry2D.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 371:
                case 1274: return true;
            }
            return false;
        }
    }
    EG_Geometry.$t = /*@__PURE__*/ markType(EG_Geometry, 'EG_Geometry');
    return EG_Geometry;
})();
/**
 * @hidden
 */
export let EG_ColorChoice_DML = /*@__PURE__*/ (() => {
    class EG_ColorChoice_DML extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
            this.c = null;
            this.d = null;
            this.e = null;
            this.f = null;
        }
        h(a, b, c, d) {
            if (this.a != null) {
                this.a.d(a, b, c);
            }
            if (this.b != null) {
                this.b.d(a, b, c);
            }
            if (this.c != null) {
                this.c.d(a, b, c);
            }
            if (this.d != null) {
                this.d.d(a, b, c);
            }
            if (this.e != null) {
                this.e.d(a, b, c);
            }
            if (this.f != null) {
                this.f.d(a, b, c);
            }
        }
        i(a, b) {
            switch (a) {
                case 800:
                    this.a = typeCast(CT_HslColor.$, b);
                    break;
                case 1272:
                    this.b = typeCast(CT_PresetColor.$, b);
                    break;
                case 1429:
                    this.c = typeCast(CT_SchemeColor_DML.$, b);
                    break;
                case 1431:
                    this.d = typeCast(CT_ScRgbColor.$, b);
                    break;
                case 1586:
                    this.e = typeCast(CT_SRgbColor_DML.$, b);
                    break;
                case 1652:
                    this.f = typeCast(CT_SystemColor.$, b);
                    break;
                default: break;
            }
        }
        g(a) {
            switch (a) {
                case 800:
                case 1272:
                case 1429:
                case 1431:
                case 1586:
                case 1652: return true;
            }
            return false;
        }
    }
    EG_ColorChoice_DML.$t = /*@__PURE__*/ markType(EG_ColorChoice_DML, 'EG_ColorChoice_DML');
    return EG_ColorChoice_DML;
})();
/**
 * @hidden
 */
export let EG_TextAutofit = /*@__PURE__*/ (() => {
    class EG_TextAutofit extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
            this.c = null;
        }
        e(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.bl(this.a, a, b, c, DrawingMLMain.gs);
            }
            if (this.b != null) {
                DMLExtensions.bn(this.b, a, b, c, DrawingMLMain.g6);
            }
            if (this.c != null) {
                DMLExtensions.bp(this.c, a, b, c, DrawingMLMain.ir);
            }
        }
        f(a, b) {
            switch (a) {
                case 1057:
                    this.a = typeCast(CT_TextNoAutofit.$, b);
                    break;
                case 1073:
                    this.b = typeCast(CT_TextNormalAutofit.$, b);
                    break;
                case 1565:
                    this.c = typeCast(CT_TextShapeAutofit.$, b);
                    break;
                default: break;
            }
        }
        d(a) {
            switch (a) {
                case 1057:
                case 1073:
                case 1565: return true;
            }
            return false;
        }
    }
    EG_TextAutofit.$t = /*@__PURE__*/ markType(EG_TextAutofit, 'EG_TextAutofit');
    return EG_TextAutofit;
})();
/**
 * @hidden
 */
export let EG_Text3D = /*@__PURE__*/ (() => {
    class EG_Text3D extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
        }
        d(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.af(this.a, a, b, c, DrawingMLMain.d3);
            }
            if (this.b != null) {
                DMLExtensions.a4(this.b, a, b, c, DrawingMLMain.iq);
            }
        }
        e(a, b) {
            switch (a) {
                case 1564:
                    this.b = typeCast(CT_Shape3D.$, b);
                    break;
                case 650:
                    this.a = typeCast(CT_FlatText.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 1564:
                case 650: return true;
            }
            return false;
        }
    }
    EG_Text3D.$t = /*@__PURE__*/ markType(EG_Text3D, 'EG_Text3D');
    return EG_Text3D;
})();
/**
 * @hidden
 */
export let EG_FillModeProperties = /*@__PURE__*/ (() => {
    class EG_FillModeProperties extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
        }
        d(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.cu(this.a, a, b, c, DrawingMLMain.i3);
            }
            if (this.b != null) {
                DMLExtensions.cw(this.b, a, b, c, DrawingMLMain.jk);
            }
        }
        e(a, b) {
            switch (a) {
                case 1727:
                    this.b = typeCast(CT_TileInfoProperties.$, b);
                    break;
                case 1608:
                    this.a = typeCast(CT_StretchInfoProperties.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 1727:
                case 1608: return true;
            }
            return false;
        }
    }
    EG_FillModeProperties.$t = /*@__PURE__*/ markType(EG_FillModeProperties, 'EG_FillModeProperties');
    return EG_FillModeProperties;
})();
/**
 * @hidden
 */
export let EG_ColorTransform = /*@__PURE__*/ (() => {
    class EG_ColorTransform extends Base {
        constructor() {
            super();
            this.y = null;
            this.ab = null;
            this.f = null;
            this.i = null;
            this.j = null;
            this.k = null;
            this.e = null;
            this.a = null;
            this.g = null;
            this.l = null;
            this.m = null;
            this.n = null;
            this.x = null;
            this.ac = null;
            this.d = null;
            this.h = null;
            this.b = null;
            this.o = null;
            this.p = null;
            this.q = null;
            this.r = null;
            this.s = null;
            this.t = null;
            this.u = null;
            this.v = null;
            this.w = null;
            this.z = null;
            this.aa = null;
        }
        af(a, b, c, d) {
            if (this.y != null) {
                DMLUtils.aq(a, this.y, DrawingMLMain.a2);
            }
            if (this.ab != null) {
                DMLUtils.ar(a, this.ab, DrawingMLMain.a7);
            }
            if (this.f != null) {
                DMLUtils.af(a, this.f, DrawingMLMain.a9);
            }
            if (this.i != null) {
                DMLUtils.am(a, this.i, DrawingMLMain.bv);
            }
            if (this.j != null) {
                DMLUtils.am(a, this.j, DrawingMLMain.bw);
            }
            if (this.k != null) {
                DMLUtils.am(a, this.k, DrawingMLMain.bx);
            }
            if (this.e != null) {
                DMLExtensions.bz(this.e, a, b, c, DrawingMLMain.cq);
            }
            if (this.a != null) {
                DMLExtensions.ag(this.a, a, b, c, DrawingMLMain.eg);
            }
            if (this.g != null) {
                DMLExtensions.ca(this.g, a, b, c, DrawingMLMain.eo);
            }
            if (this.l != null) {
                DMLExtensions.cl(this.l, a, b, c, DrawingMLMain.eq);
            }
            if (this.m != null) {
                DMLExtensions.cl(this.m, a, b, c, DrawingMLMain.er);
            }
            if (this.n != null) {
                DMLExtensions.cl(this.n, a, b, c, DrawingMLMain.es);
            }
            if (this.x != null) {
                DMLExtensions.co(this.x, a, b, c, DrawingMLMain.e9);
            }
            if (this.ac != null) {
                DMLExtensions.cq(this.ac, a, b, c, DrawingMLMain.fa);
            }
            if (this.d != null) {
                DMLExtensions.by(this.d, a, b, c, DrawingMLMain.fb);
            }
            if (this.h != null) {
                DMLExtensions.cd(this.h, a, b, c, DrawingMLMain.fh);
            }
            if (this.b != null) {
                DMLExtensions.an(this.b, a, b, c, DrawingMLMain.fj);
            }
            if (this.o != null) {
                DMLExtensions.cl(this.o, a, b, c, DrawingMLMain.f5);
            }
            if (this.p != null) {
                DMLExtensions.cl(this.p, a, b, c, DrawingMLMain.f6);
            }
            if (this.q != null) {
                DMLExtensions.cl(this.q, a, b, c, DrawingMLMain.f7);
            }
            if (this.r != null) {
                DMLExtensions.cl(this.r, a, b, c, DrawingMLMain.hy);
            }
            if (this.s != null) {
                DMLExtensions.cl(this.s, a, b, c, DrawingMLMain.hz);
            }
            if (this.t != null) {
                DMLExtensions.cl(this.t, a, b, c, DrawingMLMain.h0);
            }
            if (this.u != null) {
                DMLExtensions.cl(this.u, a, b, c, DrawingMLMain.ib);
            }
            if (this.v != null) {
                DMLExtensions.cl(this.v, a, b, c, DrawingMLMain.ic);
            }
            if (this.w != null) {
                DMLExtensions.cl(this.w, a, b, c, DrawingMLMain.id);
            }
            if (this.z != null) {
                DMLExtensions.cp(this.z, a, b, c, DrawingMLMain.ij);
            }
            if (this.aa != null) {
                DMLExtensions.cp(this.aa, a, b, c, DrawingMLMain.jn);
            }
        }
        ag(a, b) {
            switch (a) {
                case 1744:
                    this.aa = typeCast(CT_PositiveFixedPercentage.$, b);
                    break;
                case 1459:
                    this.z = typeCast(CT_PositiveFixedPercentage.$, b);
                    break;
                case 326:
                    this.e = typeCast(CT_ComplementTransform.$, b);
                    break;
                case 845:
                    this.h = typeCast(CT_InverseTransform.$, b);
                    break;
                case 731:
                    this.g = typeCast(CT_GrayscaleTransform.$, b);
                    break;
                case 31:
                    this.y = typeCast(CT_PositiveFixedPercentage.$, b);
                    break;
                case 38:
                    this.f = typeCast(CT_FixedPercentage.$, b);
                    break;
                case 36:
                    this.ab = typeCast(CT_PositivePercentage.$, b);
                    break;
                case 802:
                    this.x = typeCast(CT_PositiveFixedAngle.$, b);
                    break;
                case 804:
                    this.d = typeCast(CT_Angle.$, b);
                    break;
                case 803:
                    this.ac = typeCast(CT_PositivePercentage.$, b);
                    break;
                case 1407:
                    this.u = typeCast(CT_Percentage.$, b);
                    break;
                case 1409:
                    this.w = typeCast(CT_Percentage.$, b);
                    break;
                case 1408:
                    this.v = typeCast(CT_Percentage.$, b);
                    break;
                case 941:
                    this.o = typeCast(CT_Percentage.$, b);
                    break;
                case 943:
                    this.q = typeCast(CT_Percentage.$, b);
                    break;
                case 942:
                    this.p = typeCast(CT_Percentage.$, b);
                    break;
                case 1331:
                    this.r = typeCast(CT_Percentage.$, b);
                    break;
                case 1333:
                    this.t = typeCast(CT_Percentage.$, b);
                    break;
                case 1332:
                    this.s = typeCast(CT_Percentage.$, b);
                    break;
                case 733:
                    this.l = typeCast(CT_Percentage.$, b);
                    break;
                case 735:
                    this.n = typeCast(CT_Percentage.$, b);
                    break;
                case 734:
                    this.m = typeCast(CT_Percentage.$, b);
                    break;
                case 131:
                    this.i = typeCast(CT_Percentage.$, b);
                    break;
                case 133:
                    this.k = typeCast(CT_Percentage.$, b);
                    break;
                case 132:
                    this.j = typeCast(CT_Percentage.$, b);
                    break;
                case 695:
                    this.a = typeCast(CT_GammaTransform.$, b);
                    break;
                case 846:
                    this.b = typeCast(CT_InverseGammaTransform.$, b);
                    break;
                default: break;
            }
        }
        ad(a) {
            switch (a) {
                case 1744:
                case 1459:
                case 326:
                case 845:
                case 731:
                case 31:
                case 38:
                case 36:
                case 802:
                case 804:
                case 803:
                case 1407:
                case 1409:
                case 1408:
                case 941:
                case 943:
                case 942:
                case 1331:
                case 1333:
                case 1332:
                case 733:
                case 735:
                case 734:
                case 131:
                case 133:
                case 132:
                case 695:
                case 846: return true;
            }
            return false;
        }
        c() {
            if (this.y == null && this.p == null && this.q == null && this.z == null) {
                return null;
            }
            let a = toNullable(Number_$type, null);
            let b = toNullable(Number_$type, null);
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            if (this.y != null) {
                a = toNullable(Number_$type, ST_Percentage.n(ST_PositiveFixedPercentage.b(this.y.a)));
            }
            if (this.p != null) {
                b = toNullable(Number_$type, ST_Percentage.n(this.p.a));
            }
            if (this.q != null) {
                c = toNullable(Number_$type, ST_Percentage.n(this.q.a));
            }
            if (this.z != null) {
                d = toNullable(Number_$type, ST_Percentage.n(ST_PositiveFixedPercentage.b(this.z.a)));
            }
            return ((() => {
                let $ret = new WorkbookColorTransform(toNullable(Number_$type, null), toNullable(Number_$type, null), toNullable(Number_$type, null), toNullable(Number_$type, null));
                $ret._alpha$i = a;
                $ret._luminanceModulation$i = b;
                $ret._luminanceOffset$i = c;
                $ret._shade$i = d;
                return $ret;
            })());
        }
        ae(a) {
            if (a == null || a._b() == false) {
                return;
            }
            if (a._alpha$i.hasValue) {
                this.y = ((() => {
                    let $ret = new CT_PositiveFixedPercentage();
                    $ret.a = ST_PositiveFixedPercentage.d(ST_Percentage.a(a._alpha$i.value));
                    return $ret;
                })());
            }
            if (a._luminanceModulation$i.hasValue) {
                this.p = ((() => {
                    let $ret = new CT_Percentage();
                    $ret.a = ST_Percentage.a(a._luminanceModulation$i.value);
                    return $ret;
                })());
            }
            if (a._luminanceOffset$i.hasValue) {
                this.q = ((() => {
                    let $ret = new CT_Percentage();
                    $ret.a = ST_Percentage.a(a._luminanceOffset$i.value);
                    return $ret;
                })());
            }
            if (a._shade$i.hasValue) {
                this.z = ((() => {
                    let $ret = new CT_PositiveFixedPercentage();
                    $ret.a = ST_PositiveFixedPercentage.d(ST_Percentage.a(a._shade$i.value));
                    return $ret;
                })());
            }
        }
    }
    EG_ColorTransform.$t = /*@__PURE__*/ markType(EG_ColorTransform, 'EG_ColorTransform');
    return EG_ColorTransform;
})();
/**
 * @hidden
 */
export let EG_LineFillProperties = /*@__PURE__*/ (() => {
    class EG_LineFillProperties extends EG_FillPropertiesBase {
        constructor() {
            super();
        }
        h(a, b, c, d) {
            super.h(a, b, c, d);
        }
        j(a, b) {
            super.j(a, b);
        }
        f(a) {
            return super.f(a);
        }
    }
    EG_LineFillProperties.$t = /*@__PURE__*/ markType(EG_LineFillProperties, 'EG_LineFillProperties', EG_FillPropertiesBase.$);
    return EG_LineFillProperties;
})();
/**
 * @hidden
 */
export let EG_LineDashProperties = /*@__PURE__*/ (() => {
    class EG_LineDashProperties extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
        }
        d(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.b4(this.a, a, b, c, DrawingMLMain.cz);
            }
            if (this.b != null) {
                DMLExtensions.cs(this.b, a, b, c, DrawingMLMain.hp);
            }
        }
        e(a, b) {
            switch (a) {
                case 1273:
                    this.b = typeCast(CT_PresetLineDashProperties.$, b);
                    break;
                case 368:
                    this.a = typeCast(CT_DashStopList.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 1273:
                case 368: return true;
            }
            return false;
        }
    }
    EG_LineDashProperties.$t = /*@__PURE__*/ markType(EG_LineDashProperties, 'EG_LineDashProperties');
    return EG_LineDashProperties;
})();
/**
 * @hidden
 */
export let EG_LineJoinProperties = /*@__PURE__*/ (() => {
    class EG_LineJoinProperties extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
            this.c = null;
        }
        e(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.cf(this.a, a, b, c, DrawingMLMain.bl);
            }
            if (this.b != null) {
                DMLExtensions.cg(this.b, a, b, c, DrawingMLMain.gm);
            }
            if (this.c != null) {
                DMLExtensions.ch(this.c, a, b, c, DrawingMLMain.h7);
            }
        }
        f(a, b) {
            switch (a) {
                case 1373:
                    this.c = typeCast(CT_LineJoinRound.$, b);
                    break;
                case 108:
                    this.a = typeCast(CT_LineJoinBevel.$, b);
                    break;
                case 1019:
                    this.b = typeCast(CT_LineJoinMiterProperties.$, b);
                    break;
                default: break;
            }
        }
        d(a) {
            switch (a) {
                case 1373:
                case 108:
                case 1019: return true;
            }
            return false;
        }
    }
    EG_LineJoinProperties.$t = /*@__PURE__*/ markType(EG_LineJoinProperties, 'EG_LineJoinProperties');
    return EG_LineJoinProperties;
})();
/**
 * @hidden
 */
export let EG_TextUnderlineLine = /*@__PURE__*/ (() => {
    class EG_TextUnderlineLine extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
        }
        d(a, b, c, d) {
            if (this.a != null) {
                this.a.r(a, b, c, DrawingMLMain.jx);
            }
            if (this.b != null) {
                DMLExtensions.bt(this.b, a, b, c, DrawingMLMain.jy);
            }
        }
        e(a, b) {
            switch (a) {
                case 1793:
                    this.b = typeCast(CT_TextUnderlineLineFollowText.$, b);
                    break;
                case 1792:
                    this.a = typeCast(CT_LineProperties_DML.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 1793:
                case 1792: return true;
            }
            return false;
        }
    }
    EG_TextUnderlineLine.$t = /*@__PURE__*/ markType(EG_TextUnderlineLine, 'EG_TextUnderlineLine');
    return EG_TextUnderlineLine;
})();
/**
 * @hidden
 */
export let EG_TextUnderlineFill = /*@__PURE__*/ (() => {
    class EG_TextUnderlineFill extends Base {
        constructor() {
            super();
            this.b = null;
            this.a = null;
        }
        d(a, b, c, d) {
            if (this.b != null) {
                DMLExtensions.bs(this.b, a, b, c, DrawingMLMain.jv);
            }
            if (this.a != null) {
                DMLExtensions.br(this.a, a, b, c, DrawingMLMain.jw);
            }
        }
        e(a, b) {
            switch (a) {
                case 1791:
                    this.a = typeCast(CT_TextUnderlineFillFollowText.$, b);
                    break;
                case 1790:
                    this.b = typeCast(CT_TextUnderlineFillGroupWrapper.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 1791:
                case 1790: return true;
            }
            return false;
        }
    }
    EG_TextUnderlineFill.$t = /*@__PURE__*/ markType(EG_TextUnderlineFill, 'EG_TextUnderlineFill');
    return EG_TextUnderlineFill;
})();
/**
 * @hidden
 */
export let EG_TextBulletColor = /*@__PURE__*/ (() => {
    class EG_TextBulletColor extends Base {
        constructor() {
            super();
            this.b = null;
            this.a = null;
        }
        d(a, b, c, d) {
            if (this.b != null) {
                DMLExtensions.be(this.b, a, b, c, DrawingMLMain.b6);
            }
            if (this.a != null) {
                this.a.d(a, b, c, DrawingMLMain.b5);
            }
        }
        setProperty(a, b) {
            switch (a) {
                case 176:
                    this.b = typeCast(CT_TextBulletColorFollowText.$, b);
                    break;
                case 175:
                    this.a = typeCast(CT_Color_DML.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 176:
                case 175: return true;
            }
            return false;
        }
    }
    EG_TextBulletColor.$t = /*@__PURE__*/ markType(EG_TextBulletColor, 'EG_TextBulletColor', Base.$, [ISupportSetProperty_$type]);
    return EG_TextBulletColor;
})();
/**
 * @hidden
 */
export let EG_TextBulletSize = /*@__PURE__*/ (() => {
    class EG_TextBulletSize extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
            this.c = null;
        }
        e(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.bf(this.a, a, b, c, DrawingMLMain.cc);
            }
            if (this.b != null) {
                DMLExtensions.bg(this.b, a, b, c, DrawingMLMain.ca);
            }
            if (this.c != null) {
                DMLExtensions.bh(this.c, a, b, c, DrawingMLMain.cb);
            }
        }
        setProperty(a, b) {
            switch (a) {
                case 182:
                    this.a = typeCast(CT_TextBulletSizeFollowText.$, b);
                    break;
                case 180:
                    this.b = typeCast(CT_TextBulletSizePercent.$, b);
                    break;
                case 181:
                    this.c = typeCast(CT_TextBulletSizePoint.$, b);
                    break;
                default: break;
            }
        }
        d(a) {
            switch (a) {
                case 182:
                case 180:
                case 181: return true;
            }
            return false;
        }
    }
    EG_TextBulletSize.$t = /*@__PURE__*/ markType(EG_TextBulletSize, 'EG_TextBulletSize', Base.$, [ISupportSetProperty_$type]);
    return EG_TextBulletSize;
})();
/**
 * @hidden
 */
export let EG_TextBulletTypeface = /*@__PURE__*/ (() => {
    class EG_TextBulletTypeface extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
        }
        d(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.bi(this.a, a, b, c, DrawingMLMain.b8);
            }
            if (this.b != null) {
                DMLExtensions.cv(this.b, a, b, c, DrawingMLMain.b7);
            }
        }
        setProperty(a, b) {
            switch (a) {
                case 178:
                    this.a = typeCast(CT_TextBulletTypefaceFollowText.$, b);
                    break;
                case 177:
                    this.b = typeCast(CT_TextFont.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 178:
                case 177: return true;
            }
            return false;
        }
    }
    EG_TextBulletTypeface.$t = /*@__PURE__*/ markType(EG_TextBulletTypeface, 'EG_TextBulletTypeface', Base.$, [ISupportSetProperty_$type]);
    return EG_TextBulletTypeface;
})();
/**
 * @hidden
 */
export let EG_TextBullet = /*@__PURE__*/ (() => {
    class EG_TextBullet extends Base {
        constructor() {
            super();
            this.d = null;
            this.a = null;
            this.c = null;
            this.b = null;
        }
        f(a, b, c, d) {
            if (this.d != null) {
                DMLExtensions.bm(this.d, a, b, c, DrawingMLMain.b9);
            }
            if (this.a != null) {
                DMLExtensions.bb(this.a, a, b, c, DrawingMLMain.b2);
            }
            if (this.c != null) {
                DMLExtensions.bj(this.c, a, b, c, DrawingMLMain.b4);
            }
            if (this.b != null) {
                DMLExtensions.bc(this.b, a, b, c, DrawingMLMain.b3);
            }
        }
        setProperty(a, b) {
            switch (a) {
                case 179:
                    this.d = typeCast(CT_TextNoBullet.$, b);
                    break;
                case 172:
                    this.a = typeCast(CT_TextAutonumberBullet.$, b);
                    break;
                case 174:
                    this.c = typeCast(CT_TextCharBullet.$, b);
                    break;
                case 173:
                    this.b = typeCast(CT_TextBlipBullet.$, b);
                    break;
                default: break;
            }
        }
        e(a) {
            switch (a) {
                case 179:
                case 172:
                case 174:
                case 173: return true;
            }
            return false;
        }
    }
    EG_TextBullet.$t = /*@__PURE__*/ markType(EG_TextBullet, 'EG_TextBullet', Base.$, [ISupportSetProperty_$type]);
    return EG_TextBullet;
})();
/**
 * @hidden
 */
export let EG_TextRun = /*@__PURE__*/ (() => {
    class EG_TextRun extends Base {
        constructor() {
            super();
            this.a = null;
            this.c = null;
            this.b = null;
        }
        e(a, b, c, d) {
            if (this.a != null) {
                DMLExtensions.a1(this.a, a, b, c, DrawingMLMain.hv);
            }
        }
        setProperty(a, b) {
            switch (a) {
                case 1297:
                    this.a = typeCast(CT_RegularTextRun_DML.$, b);
                    break;
                case 164:
                    this.c = typeCast(CT_TextLineBreak.$, b);
                    break;
                case 651:
                    this.b = typeCast(CT_TextField.$, b);
                    break;
                default: break;
            }
        }
        d(a) {
            switch (a) {
                case 1297:
                case 164:
                case 651: return true;
            }
            return false;
        }
    }
    EG_TextRun.$t = /*@__PURE__*/ markType(EG_TextRun, 'EG_TextRun', Base.$, [ISupportSetProperty_$type]);
    return EG_TextRun;
})();
/**
 * @hidden
 */
export let CT_BlipFillProperties_DML = /*@__PURE__*/ (() => {
    class CT_BlipFillProperties_DML extends CT_BlipFillPropertiesBase {
        constructor() {
            super(...arguments);
            this.f = null;
            this.d = null;
        }
        get g() {
            if (this.f == null) {
                this.f = new EG_FillModeProperties();
            }
            return this.f;
        }
        setProperty(a, b) {
            switch (a) {
                case 127:
                    this.d = typeCast(CT_Blip_DML.$, b);
                    break;
                default:
                    this.g.e(a, b);
                    break;
            }
        }
        static e(a) {
            let b = toNullable(Number_$type, null);
            let c = toNullable(Boolean_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "dpi":
                        b = toNullable(Number_$type, parseUInt32_1(d.d, CultureInfo.invariantCulture));
                        break;
                    case "rotWithShape":
                        c = toNullable(Boolean_$type, ST_OnOff.e(d.d));
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_BlipFillProperties_DML();
                $ret.b = b;
                $ret.c = c;
                return $ret;
            })());
            return e;
        }
        static i(a, b, c = toNullable(Number_$type, null), d = toNullable(Boolean_$type, null)) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "dpi";
                e = intToString(c.value, CultureInfo.currentCulture);
                a.ad.h(f, e);
            }
            if (d.hasValue) {
                f = "rotWithShape";
                e = ST_OnOff.g(d.value);
                a.ad.h(f, e);
            }
        }
        save1(a, b, c, d) {
            CT_BlipFillProperties_DML.i(a, d, this.b, this.c);
            let e = this.d;
            if (e != null) {
                DMLExtensions.n(e, a, b, c, DrawingMLMain.bt);
            }
            let f = this.a;
            if (f != null) {
                DMLUtils.au(a, f, DrawingMLMain.i0);
            }
            if (this.g != null) {
                this.g.d(a, b, c, d);
            }
            c.k();
        }
        get elementName() {
            return DrawingMLMain.bu;
        }
        saveX(a, b, c, d) {
            this.save1(a, typeCast(WorkbookSaveManagerExcel2007.$, d), b, c);
        }
    }
    CT_BlipFillProperties_DML.$t = /*@__PURE__*/ markType(CT_BlipFillProperties_DML, 'CT_BlipFillProperties_DML', CT_BlipFillPropertiesBase.$, [ISaveToXLSX_$type, ISupportSetProperty_$type]);
    return CT_BlipFillProperties_DML;
})();
/**
 * @hidden
 */
export let CT_TextCharacterProperties_DML = /*@__PURE__*/ (() => {
    class CT_TextCharacterProperties_DML extends CT_TextCharacterPropertiesBase {
        constructor() {
            super();
            this.ac = null;
            this.aa = null;
            this.ag = null;
            this.ae = null;
            this.x = null;
            this.w = null;
            this.ak = null;
            this.ai = null;
            this.aj = null;
            this.y = null;
        }
        get ad() {
            if (this.ac == null) {
                this.ac = new EG_FillProperties();
            }
            return this.ac;
        }
        get ab() {
            if (this.aa == null) {
                this.aa = new EG_EffectProperties();
            }
            return this.aa;
        }
        get ah() {
            if (this.ag == null) {
                this.ag = new EG_TextUnderlineLine();
            }
            return this.ag;
        }
        get af() {
            if (this.ae == null) {
                this.ae = new EG_TextUnderlineFill();
            }
            return this.ae;
        }
        static z(a, b) {
            let c = toNullable(Boolean_$type, null);
            let d = null;
            let e = null;
            let f = toNullable(ST_TextFontSize.$, null);
            let g = toNullable(Boolean_$type, null);
            let h = toNullable(Boolean_$type, null);
            let i = toNullable(ST_TextUnderlineType_$type, null);
            let j = toNullable(ST_TextStrikeType_$type, null);
            let k = toNullable(Number_$type, null);
            let l = toNullable(ST_TextCapsType_$type, null);
            let m = toNullable(ST_TextPoint.$, null);
            let n = toNullable(Boolean_$type, null);
            let o = toNullable(ST_Percentage.$, null);
            let p = toNullable(Boolean_$type, null);
            let q = toNullable(Boolean_$type, null);
            let r = toNullable(Boolean_$type, null);
            let s = toNullable(Boolean_$type, null);
            let t = toNullable(Number_$type, null);
            let u = null;
            let v = CT_TextCharacterProperties_DML.ap(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u);
            c = v.p2;
            d = v.p3;
            e = v.p4;
            f = v.p5;
            g = v.p6;
            h = v.p7;
            i = v.p8;
            j = v.p9;
            k = v.p10;
            l = v.p11;
            m = v.p12;
            n = v.p13;
            o = v.p14;
            p = v.p15;
            q = v.p16;
            r = v.p17;
            s = v.p18;
            t = v.p19;
            u = v.p20;
            let w = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.k = c;
                $ret.v = d;
                $ret.t = e;
                $ret.r = ST_TextFontSize.g(f);
                $ret.d = g;
                $ret.i = h;
                $ret.s = i;
                $ret.q = j;
                $ret.j = k;
                $ret.f = l;
                $ret.p = m;
                $ret.m = n;
                $ret.e = o;
                $ret.l = p;
                $ret.g = q;
                $ret.n = s;
                $ret.o = t;
                $ret.u = u;
                return $ret;
            })());
            return w;
        }
        static ap(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u) {
            let v = DrawingMLMain.mt(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, b, false);
            c = v.p1;
            d = v.p2;
            e = v.p3;
            f = v.p4;
            g = v.p5;
            h = v.p6;
            i = v.p7;
            j = v.p8;
            k = v.p9;
            l = v.p10;
            m = v.p11;
            n = v.p12;
            o = v.p13;
            p = v.p14;
            q = v.p15;
            r = v.p16;
            s = v.p17;
            t = v.p18;
            u = v.p19;
            return {
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k,
                p11: l,
                p12: m,
                p13: n,
                p14: o,
                p15: p,
                p16: q,
                p17: r,
                p18: s,
                p19: t,
                p20: u
            };
        }
        static ar(a, b, c = null, d = toNullable(Boolean_$type, null), e = toNullable(ST_Percentage.$, null), f = null, g = toNullable(ST_TextCapsType_$type, null), h = toNullable(Boolean_$type, null), i = toNullable(Boolean_$type, null), j = toNullable(Boolean_$type, null), k = toNullable(Number_$type, null), l = toNullable(Boolean_$type, null), m = null, n = toNullable(Boolean_$type, null), o = toNullable(Boolean_$type, null), p = toNullable(Boolean_$type, null), q = toNullable(Number_$type, null), r = toNullable(ST_TextPoint.$, null), s = toNullable(ST_TextStrikeType_$type, null), t = toNullable(Number_$type, null), u = toNullable(ST_TextUnderlineType_$type, null)) {
            let v = SerializationUtils.k(a);
            a.ad.p(b, "a");
            let w = null;
            let x = null;
            if (c != null) {
                x = "altLang";
                w = c;
                a.ad.h(x, w);
            }
            if (d.hasValue) {
                x = "b";
                w = ST_OnOff.g(d.value);
                a.ad.h(x, w);
            }
            if (e.hasValue) {
                x = "baseline";
                w = e.value.r(v);
                a.ad.h(x, w);
            }
            if (f != null) {
                x = "bmk";
                w = f;
                a.ad.h(x, w);
            }
            if (g.hasValue) {
                x = "cap";
                w = XmlNamespaceDefinitionBase.p(ST_TextCapsType_$type, g.value);
                a.ad.h(x, w);
            }
            if (h.hasValue) {
                x = "dirty";
                w = ST_OnOff.g(h.value);
                a.ad.h(x, w);
            }
            if (i.hasValue) {
                x = "err";
                w = ST_OnOff.g(i.value);
                a.ad.h(x, w);
            }
            if (j.hasValue) {
                x = "i";
                w = ST_OnOff.g(j.value);
                a.ad.h(x, w);
            }
            if (k.hasValue) {
                x = "kern";
                w = k.value.toString();
                a.ad.h(x, w);
            }
            if (l.hasValue) {
                x = "kumimoji";
                w = ST_OnOff.g(l.value);
                a.ad.h(x, w);
            }
            if (m != null) {
                x = "lang";
                w = m;
                a.ad.h(x, w);
            }
            if (n.hasValue) {
                x = "noProof";
                w = ST_OnOff.g(n.value);
                a.ad.h(x, w);
            }
            if (o.hasValue) {
                x = "normalizeH";
                w = ST_OnOff.g(o.value);
                a.ad.h(x, w);
            }
            if (p.hasValue) {
                x = "smtClean";
                w = ST_OnOff.g(p.value);
                a.ad.h(x, w);
            }
            if (q.hasValue) {
                x = "smtId";
                w = q.value.toString();
                a.ad.h(x, w);
            }
            if (r.hasValue) {
                x = "spc";
                w = r.value.toString();
                a.ad.h(x, w);
            }
            if (s.hasValue) {
                x = "strike";
                w = XmlNamespaceDefinitionBase.p(ST_TextStrikeType_$type, s.value);
                a.ad.h(x, w);
            }
            if (t.hasValue) {
                x = "sz";
                w = t.value.toString();
                a.ad.h(x, w);
            }
            if (u.hasValue) {
                x = "u";
                w = XmlNamespaceDefinitionBase.p(ST_TextUnderlineType_$type, u.value);
                a.ad.h(x, w);
            }
        }
        aq(a, b, c, d) {
            CT_TextCharacterProperties_DML.ar(a, d, this.t, this.d, this.e, this.u, this.f, this.g, this.h, this.i, this.j, this.k, this.v, this.l, this.m, this.n, this.o, this.p, this.q, this.r, this.s);
            if (this.x != null) {
                this.x.r(a, b, c, DrawingMLMain.fx);
            }
            if (this.ad != null) {
                this.ad.h(a, b, c, null);
            }
            if (this.ab != null) {
                this.ab.d(a, b, c, null);
            }
            if (this.w != null) {
                this.w.d(a, b, c, DrawingMLMain.ez);
            }
            if (this.af != null) {
                this.af.d(a, b, c, null);
            }
            if (this.ah != null) {
                this.ah.d(a, b, c, null);
            }
            if (this.c != null) {
                DMLExtensions.cv(this.c, a, b, c, DrawingMLMain.fr);
            }
            if (this.b != null) {
                DMLExtensions.cv(this.b, a, b, c, DrawingMLMain.df);
            }
            if (this.a != null) {
                DMLExtensions.cv(this.a, a, b, c, DrawingMLMain.cu);
            }
            if (this.ak != null) {
                DMLExtensions.cv(this.ak, a, b, c, DrawingMLMain.i8);
            }
            if (this.ai != null) {
                DMLExtensions.cc(this.ai, a, b, c, DrawingMLMain.e3);
            }
            if (this.aj != null) {
                DMLExtensions.cc(this.aj, a, b, c, DrawingMLMain.e4);
            }
            c.k();
        }
        setProperty(a, b) {
            switch (a) {
                case 918:
                    this.x = typeCast(CT_LineProperties_DML.$, b);
                    break;
                case 789:
                    this.w = typeCast(CT_Color_DML.$, b);
                    break;
                case 875:
                    this.c = typeCast(CT_TextFont.$, b);
                    break;
                case 551:
                    this.b = typeCast(CT_TextFont.$, b);
                    break;
                case 363:
                    this.a = typeCast(CT_TextFont.$, b);
                    break;
                case 1650:
                    this.ak = typeCast(CT_TextFont.$, b);
                    break;
                case 791:
                    this.ai = typeCast(CT_Hyperlink.$, b);
                    break;
                case 793:
                    this.aj = typeCast(CT_Hyperlink.$, b);
                    break;
                case 601:
                    this.y = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default:
                    if (this.ab != null && this.ab.c(a)) {
                        this.ab.e(a, b);
                    }
                    else if (this.ad != null && this.ad.f(a)) {
                        this.ad.j(a, b);
                    }
                    else if (this.af != null && this.af.c(a)) {
                        this.af.e(a, b);
                    }
                    else if (this.ah != null && this.ah.c(a)) {
                        this.ah.e(a, b);
                    }
                    else {
                    }
                    break;
            }
        }
    }
    CT_TextCharacterProperties_DML.$t = /*@__PURE__*/ markType(CT_TextCharacterProperties_DML, 'CT_TextCharacterProperties_DML', CT_TextCharacterPropertiesBase.$, [ISupportSetProperty_$type]);
    return CT_TextCharacterProperties_DML;
})();
/**
 * @hidden
 */
export let CT_Blip_DML = /*@__PURE__*/ (() => {
    class CT_Blip_DML extends CT_Blip {
        constructor() {
            super();
            this.f = null;
            this.g = null;
            this.h = null;
            this.i = null;
            this.j = null;
            this.k = null;
            this.l = null;
            this.m = null;
            this.o = null;
            this.p = null;
            this.q = null;
            this.r = null;
            this.w = null;
            this.s = null;
            this.t = null;
            this.u = null;
            this.v = null;
            this.x = null;
        }
        setProperty(a, b) {
            switch (a) {
                case 32:
                    this.f = typeCast(CT_AlphaBiLevelEffect.$, b);
                    break;
                case 33:
                    this.g = typeCast(CT_AlphaCeilingEffect.$, b);
                    break;
                case 34:
                    this.h = typeCast(CT_AlphaFloorEffect.$, b);
                    break;
                case 35:
                    this.i = typeCast(CT_AlphaInverseEffect.$, b);
                    break;
                case 36:
                    this.j = typeCast(CT_AlphaModulateEffect.$, b);
                    break;
                case 37:
                    this.k = typeCast(CT_AlphaModulateFixedEffect.$, b);
                    break;
                case 40:
                    this.l = typeCast(CT_AlphaReplaceEffect.$, b);
                    break;
                case 117:
                    this.m = typeCast(CT_BiLevelEffect.$, b);
                    break;
                case 134:
                    this.o = typeCast(CT_BlurEffect.$, b);
                    break;
                case 279:
                    this.p = typeCast(CT_ColorChangeEffect.$, b);
                    break;
                case 285:
                    this.q = typeCast(CT_ColorReplaceEffect.$, b);
                    break;
                case 546:
                    this.r = typeCast(CT_DuotoneEffect.$, b);
                    break;
                case 601:
                    this.w = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                case 633:
                    this.s = typeCast(CT_FillOverlayEffect.$, b);
                    break;
                case 732:
                    this.t = typeCast(CT_GrayscaleEffect.$, b);
                    break;
                case 799:
                    this.u = typeCast(CT_HSLEffect.$, b);
                    break;
                case 941:
                    this.v = typeCast(CT_LuminanceEffect.$, b);
                    break;
                case 1744:
                    this.x = typeCast(CT_TintEffect.$, b);
                    break;
                default: break;
            }
        }
        static n(a) {
            let b;
            let c;
            let d;
            let e = DrawingMLMain.kl(a, b, c, d, false);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            let f = ((() => {
                let $ret = new CT_Blip_DML();
                $ret.d = b;
                $ret.e = c;
                $ret.c = d;
                return $ret;
            })());
            return f;
        }
        static z(a, b, c = toNullable(ST_BlipCompression_$type, null)) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "cstate";
                d = XmlNamespaceDefinitionBase.p(ST_BlipCompression_$type, c.value);
                a.ad.h(e, d);
            }
        }
    }
    CT_Blip_DML.$t = /*@__PURE__*/ markType(CT_Blip_DML, 'CT_Blip_DML', CT_Blip.$, [ISupportSetProperty_$type]);
    return CT_Blip_DML;
})();
/**
 * @hidden
 */
export let CT_LineStyleList = /*@__PURE__*/ (() => {
    class CT_LineStyleList extends Base {
        constructor() {
            super();
            this.a = null;
            this.a = new List$1(CT_LineProperties_DML.$, 0);
        }
    }
    CT_LineStyleList.$t = /*@__PURE__*/ markType(CT_LineStyleList, 'CT_LineStyleList');
    return CT_LineStyleList;
})();
/**
 * @hidden
 */
export let CT_LineProperties_DML = /*@__PURE__*/ (() => {
    class CT_LineProperties_DML extends CT_LinePropertiesBase {
        constructor() {
            super(...arguments);
            this.m = null;
            this.k = null;
            this.o = null;
            this.q = toNullable(Number_$type, null);
            this.j = null;
        }
        get n() {
            if (this.m == null) {
                this.m = new EG_LineFillProperties();
            }
            return this.m;
        }
        get l() {
            if (this.k == null) {
                this.k = new EG_LineDashProperties();
            }
            return this.k;
        }
        get p() {
            if (this.o == null) {
                this.o = new EG_LineJoinProperties();
            }
            return this.o;
        }
        static i(a) {
            let b;
            let c;
            let d;
            let e;
            let f = DrawingMLMain.l7(a, b, c, d, e);
            b = f.p1;
            c = f.p2;
            d = f.p3;
            e = f.p4;
            let g = ((() => {
                let $ret = new CT_LineProperties_DML();
                $ret.h = b;
                $ret.f = c;
                $ret.g = d;
                $ret.e = e;
                return $ret;
            })());
            return g;
        }
        static s(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = null;
            let f = null;
            if (b.e.hasValue) {
                e = "algn";
                f = EnumUtil.getName(ST_PenAlignment_$type, b.e.value);
                d.h(e, f);
            }
            if (b.f.hasValue) {
                e = "cap";
                f = EnumUtil.getName(ST_LineCap_$type, b.f.value);
                d.h(e, f);
            }
            if (b.g.hasValue) {
                e = "cmpd";
                f = EnumUtil.getName(ST_CompoundLine_$type, b.g.value);
                d.h(e, f);
            }
            if (b.h.hasValue) {
                e = "w";
                f = b.h.value.toString();
                d.h(e, f);
            }
            else if (b.q.hasValue) {
                e = "w";
                f = b.q.value.toString();
                d.h(e, f);
            }
        }
        r(a, b, c, d) {
            CT_LineProperties_DML.s(a, this, d);
            if (this.n != null) {
                this.n.h(a, b, c, null);
            }
            if (this.l != null) {
                this.l.d(a, b, c, null);
            }
            if (this.p != null) {
                this.p.e(a, b, c, null);
            }
            if (this.a != null) {
                DMLExtensions.ce(this.a, a, b, c, DrawingMLMain.ex);
            }
            if (this.b != null) {
                DMLExtensions.ce(this.b, a, b, c, DrawingMLMain.jf);
            }
            if (this.j != null) {
                this.j.d(a, b, c, DrawingMLMain.ds);
            }
            c.k();
        }
        setProperty(a, b) {
            switch (a) {
                case 772:
                    this.a = typeCast(CT_LineEndProperties.$, b);
                    break;
                case 1675:
                    this.b = typeCast(CT_LineEndProperties.$, b);
                    break;
                case 601:
                    this.j = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default:
                    if (this.l != null && this.l.c(a)) {
                        this.l.e(a, b);
                    }
                    else if (this.n != null && this.n.f(a)) {
                        this.n.j(a, b);
                    }
                    else if (this.p != null && this.p.d(a)) {
                        this.p.f(a, b);
                    }
                    else {
                    }
                    break;
            }
        }
    }
    CT_LineProperties_DML.$t = /*@__PURE__*/ markType(CT_LineProperties_DML, 'CT_LineProperties_DML', CT_LinePropertiesBase.$, [ISupportSetProperty_$type]);
    return CT_LineProperties_DML;
})();
/**
 * @hidden
 */
export let CT_DMLColorBase = /*@__PURE__*/ (() => {
    class CT_DMLColorBase extends Base {
        constructor() {
            super();
            this.a = null;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_ColorTransform();
            }
            return this.a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DMLColorBase.$t = /*@__PURE__*/ markType(CT_DMLColorBase, 'CT_DMLColorBase');
    return CT_DMLColorBase;
})();
/**
 * @hidden
 */
export let CT_SRgbColor_DML = /*@__PURE__*/ (() => {
    class CT_SRgbColor_DML extends CT_DMLColorBase {
        constructor() {
            super(...arguments);
            this.f = new ST_HexColorRGB();
        }
        static e(a) {
            let b = ST_HexColorRGB.a;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = ST_HexColorRGB.d(c.d);
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_SRgbColor_DML();
                $ret.f = b;
                return $ret;
            })());
            return d;
        }
        static g(a, b) {
            let c = b.toString();
            a.ad.h("val", c);
        }
        d(a, b, c) {
            c.p(DrawingMLMain.i1, "a");
            CT_SRgbColor_DML.g(a, this.f);
            if (this.b != null) {
                this.b.af(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.ag(a, b);
            }
        }
    }
    CT_SRgbColor_DML.$t = /*@__PURE__*/ markType(CT_SRgbColor_DML, 'CT_SRgbColor_DML', CT_DMLColorBase.$, [ISupportSetProperty_$type]);
    return CT_SRgbColor_DML;
})();
/**
 * @hidden
 */
export let CT_ScRgbColor = /*@__PURE__*/ (() => {
    class CT_ScRgbColor extends CT_DMLColorBase {
        constructor() {
            super(...arguments);
            this.h = 0;
            this.g = 0;
            this.f = 0;
        }
        static e(a) {
            let b = 0;
            let c = 0;
            let d = 0;
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "r":
                        b = parseInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    case "g":
                        c = parseInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    case "b":
                        d = parseInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            let f = ((() => {
                let $ret = new CT_ScRgbColor();
                $ret.h = b;
                $ret.g = c;
                $ret.f = d;
                return $ret;
            })());
            return f;
        }
        static i(a, b, c, d) {
            let e = null;
            e = numberToString(b, CultureInfo.currentCulture);
            a.ad.h("r", e);
            e = numberToString(c, CultureInfo.currentCulture);
            a.ad.h("g", e);
            e = numberToString(d, CultureInfo.currentCulture);
            a.ad.h("b", e);
        }
        d(a, b, c) {
            c.p(DrawingMLMain.i1, "a");
            CT_ScRgbColor.i(a, this.h, this.g, this.f);
            if (this.b != null) {
                this.b.af(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.ag(a, b);
            }
        }
    }
    CT_ScRgbColor.$t = /*@__PURE__*/ markType(CT_ScRgbColor, 'CT_ScRgbColor', CT_DMLColorBase.$, [ISupportSetProperty_$type]);
    return CT_ScRgbColor;
})();
/**
 * @hidden
 */
export let CT_HslColor = /*@__PURE__*/ (() => {
    class CT_HslColor extends CT_DMLColorBase {
        constructor() {
            super(...arguments);
            this.f = 0;
            this.h = 0;
            this.g = 0;
        }
        static e(a) {
            let b = 0;
            let c = 0;
            let d = 0;
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "hue":
                        b = parseInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    case "sat":
                        d = parseInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    case "lum":
                        c = parseInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            let f = ((() => {
                let $ret = new CT_HslColor();
                $ret.f = b;
                $ret.h = d;
                $ret.g = c;
                return $ret;
            })());
            return f;
        }
        d(a, b, c) {
            c.p(DrawingMLMain.e8, "a");
            CT_HslColor.i(a, this.f, this.h, this.g);
            if (this.b != null) {
                this.b.af(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.ag(a, b);
            }
        }
        static i(a, b, c, d) {
            let e = null;
            e = numberToString(b, CultureInfo.currentCulture);
            a.ad.h("hue", e);
            e = numberToString(c, CultureInfo.currentCulture);
            a.ad.h("sat", e);
            e = numberToString(d, CultureInfo.currentCulture);
            a.ad.h("lum", e);
        }
    }
    CT_HslColor.$t = /*@__PURE__*/ markType(CT_HslColor, 'CT_HslColor', CT_DMLColorBase.$, [ISupportSetProperty_$type]);
    return CT_HslColor;
})();
/**
 * @hidden
 */
export let CT_SystemColor = /*@__PURE__*/ (() => {
    class CT_SystemColor extends CT_DMLColorBase {
        constructor() {
            super(...arguments);
            this.f = 0;
            this.g = toNullable(ST_HexColorRGB.$, null);
        }
        static e(a) {
            let b = 0;
            let c = toNullable(ST_HexColorRGB.$, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "val":
                        b = XmlNamespaceDefinitionBase.b(ST_SystemColorVal_$type, d.d);
                        break;
                    case "lastClr":
                        c = toNullable(ST_HexColorRGB.$, ST_HexColorRGB.d(d.d));
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_SystemColor();
                $ret.f = b;
                $ret.g = c;
                return $ret;
            })());
            return e;
        }
        static h(a, b, c) {
            let d = null;
            d = EnumUtil.getName(ST_SystemColorVal_$type, b);
            a.ad.h("val", d);
            if (c.hasValue) {
                d = c.value.toString();
                a.ad.h("lastClr", d);
            }
        }
        d(a, b, c) {
            c.p(DrawingMLMain.i9, "a");
            CT_SystemColor.h(a, this.f, this.g);
            if (this.b != null) {
                this.b.af(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.ag(a, b);
            }
        }
    }
    CT_SystemColor.$t = /*@__PURE__*/ markType(CT_SystemColor, 'CT_SystemColor', CT_DMLColorBase.$, [ISupportSetProperty_$type]);
    return CT_SystemColor;
})();
/**
 * @hidden
 */
export let CT_SchemeColor_DML = /*@__PURE__*/ (() => {
    class CT_SchemeColor_DML extends CT_DMLColorBase {
        constructor() {
            super(...arguments);
            this.g = 0;
        }
        static f(a) {
            let b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = XmlNamespaceDefinitionBase.b(ST_SchemeColorVal_$type, c.d);
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_SchemeColor_DML();
                $ret.g = b;
                return $ret;
            })());
            return d;
        }
        static h(a, b) {
            let c = null;
            c = EnumUtil.getName(ST_SchemeColorVal_$type, b);
            a.ad.h("val", c);
        }
        d(a, b, c) {
            c.p(DrawingMLMain.ig, "a");
            CT_SchemeColor_DML.h(a, this.g);
            if (this.b != null) {
                this.b.af(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.ag(a, b);
            }
        }
        static e(a, b = toNullable(Number_$type, null), c = toNullable(Number_$type, null)) {
            let d = ((() => {
                let $ret = new CT_SchemeColor_DML();
                $ret.g = a;
                return $ret;
            })());
            if (b.hasValue) {
                d.b.p = ((() => {
                    let $ret = new CT_Percentage();
                    $ret.a = ST_Percentage.b(b.value);
                    return $ret;
                })());
            }
            if (c.hasValue) {
                d.b.q = ((() => {
                    let $ret = new CT_Percentage();
                    $ret.a = ST_Percentage.b(c.value);
                    return $ret;
                })());
            }
            return d;
        }
    }
    CT_SchemeColor_DML.$t = /*@__PURE__*/ markType(CT_SchemeColor_DML, 'CT_SchemeColor_DML', CT_DMLColorBase.$, [ISupportSetProperty_$type]);
    return CT_SchemeColor_DML;
})();
/**
 * @hidden
 */
export let CT_PresetColor = /*@__PURE__*/ (() => {
    class CT_PresetColor extends CT_DMLColorBase {
        constructor() {
            super(...arguments);
            this.f = 0;
        }
        static e(a) {
            let b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = XmlNamespaceDefinitionBase.b(ST_PresetColorVal_$type, c.d);
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_PresetColor();
                $ret.f = b;
                return $ret;
            })());
            return d;
        }
        static g(a, b) {
            let c = null;
            c = EnumUtil.getName(ST_PresetColorVal_$type, b);
            a.ad.h("val", c);
        }
        d(a, b, c) {
            c.p(DrawingMLMain.ho, "a");
            CT_PresetColor.g(a, this.f);
            if (this.b != null) {
                this.b.af(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.ag(a, b);
            }
        }
    }
    CT_PresetColor.$t = /*@__PURE__*/ markType(CT_PresetColor, 'CT_PresetColor', CT_DMLColorBase.$, [ISupportSetProperty_$type]);
    return CT_PresetColor;
})();
/**
 * @hidden
 */
export let CT_StyleMatrix = /*@__PURE__*/ (() => {
    class CT_StyleMatrix extends Base {
        constructor() {
            super();
            this.c = null;
            this.d = null;
            this.b = null;
            this.a = null;
            this.e = null;
        }
        static g(a, b) {
            b = null;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "name":
                        b = c.d;
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static h(a, b, c = null) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c != null) {
                e = "name";
                d = c;
                a.ad.h(e, d);
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_StyleMatrix.$t = /*@__PURE__*/ markType(CT_StyleMatrix, 'CT_StyleMatrix');
    return CT_StyleMatrix;
})();
/**
 * @hidden
 */
export let CT_ColorEffectBase = /*@__PURE__*/ (() => {
    class CT_ColorEffectBase extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_ColorChoice_DML();
            }
            return this.a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ColorEffectBase.$t = /*@__PURE__*/ markType(CT_ColorEffectBase, 'CT_ColorEffectBase');
    return CT_ColorEffectBase;
})();
/**
 * @hidden
 */
export let CT_PresetShadowEffect = /*@__PURE__*/ (() => {
    class CT_PresetShadowEffect extends CT_ColorEffectBase {
        constructor() {
            super();
            this.e = 0;
            this.k = toNullable(Number_$type, null);
            this.i = toNullable(Number_$type, null);
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        m(a, b, c, d) {
            CT_PresetShadowEffect.n(a, d, this.h, this.j, this.d);
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.i(a, b);
            }
        }
        static l(a, b, c, d) {
            b = 0;
            c = toNullable(Number_$type, null);
            d = toNullable(Number_$type, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "prst":
                        b = XmlNamespaceDefinitionBase.b(ST_PresetShadowVal_$type, e.d);
                        break;
                    case "dist":
                        c = toNullable(Number_$type, parseInt64_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "dir":
                        d = toNullable(Number_$type, parseInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static n(a, b, c, d, e) {
            a.ad.p(b, "a");
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "dir";
                f = c.value.toString();
                a.ad.h(g, f);
            }
            if (d.hasValue) {
                g = "dist";
                f = d.value.toString();
                a.ad.h(g, f);
            }
            g = "prst";
            f = XmlNamespaceDefinitionBase.p(ST_PresetShadowVal_$type, e);
            a.ad.h(g, f);
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PresetShadowEffect.$t = /*@__PURE__*/ markType(CT_PresetShadowEffect, 'CT_PresetShadowEffect', CT_ColorEffectBase.$, [ISupportSetProperty_$type]);
    return CT_PresetShadowEffect;
})();
/**
 * @hidden
 */
export let CT_OuterShadowEffect = /*@__PURE__*/ (() => {
    class CT_OuterShadowEffect extends CT_ColorEffectBase {
        constructor() {
            super();
            this.q = toNullable(Number_$type, null);
            this.u = toNullable(Number_$type, null);
            this.s = toNullable(Number_$type, null);
            this.ac = toNullable(Number_$type, null);
            this.ae = toNullable(Number_$type, null);
            this.w = toNullable(Number_$type, null);
            this.y = toNullable(Number_$type, null);
            this.o = toNullable(ST_RectAlignment_$type, null);
            this.aa = toNullable(Boolean_$type, null);
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get ab() {
            return this.ac;
        }
        set ab(a) {
            this.ac = a;
        }
        get ad() {
            return this.ae;
        }
        set ad(a) {
            this.ae = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get z() {
            return this.aa;
        }
        set z(a) {
            this.aa = a;
        }
        ag(a, b, c, d) {
            CT_OuterShadowEffect.ah(a, d, this.n, this.p, this.r, this.t, this.v, this.x, this.z, this.ab, this.ad);
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.i(a, b);
            }
        }
        static d(a) {
            let b = toNullable(Number_$type, null);
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(Number_$type, null);
            let i = toNullable(ST_RectAlignment_$type, null);
            let j = toNullable(Boolean_$type, null);
            let k = CT_OuterShadowEffect.af(a, b, c, d, e, f, g, h, i, j);
            b = k.p1;
            c = k.p2;
            d = k.p3;
            e = k.p4;
            f = k.p5;
            g = k.p6;
            h = k.p7;
            i = k.p8;
            j = k.p9;
            return ((() => {
                let $ret = new CT_OuterShadowEffect();
                $ret.p = b;
                $ret.t = c;
                $ret.r = d;
                $ret.ab = e;
                $ret.ad = f;
                $ret.v = g;
                $ret.x = h;
                $ret.n = i;
                $ret.z = j;
                return $ret;
            })());
        }
        static af(a, b, c, d, e, f, g, h, i, j) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(Number_$type, null);
            e = toNullable(Number_$type, null);
            f = toNullable(Number_$type, null);
            g = toNullable(Number_$type, null);
            h = toNullable(Number_$type, null);
            i = toNullable(ST_RectAlignment_$type, null);
            j = toNullable(Boolean_$type, null);
            for (let k of fromEnum(a.ab.u)) {
                switch (k.a.e(a.d)) {
                    case "blurRad":
                        b = toNullable(Number_$type, parseInt64_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "dist":
                        c = toNullable(Number_$type, parseInt64_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "dir":
                        d = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "sx":
                        e = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "sy":
                        f = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "kx":
                        g = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "ky":
                        h = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "algn":
                        i = toNullable(ST_RectAlignment_$type, XmlNamespaceDefinitionBase.b(ST_RectAlignment_$type, k.d));
                        break;
                    case "rotWithShape":
                        j = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j
            };
        }
        static ah(a, b, c = toNullable(ST_RectAlignment_$type, null), d = toNullable(Number_$type, null), e = toNullable(Number_$type, null), f = toNullable(Number_$type, null), g = toNullable(Number_$type, null), h = toNullable(Number_$type, null), i = toNullable(Boolean_$type, null), j = toNullable(Number_$type, null), k = toNullable(Number_$type, null)) {
            a.ad.p(b, "a");
            let l = null;
            let m = null;
            if (c.hasValue) {
                m = "algn";
                l = XmlNamespaceDefinitionBase.p(ST_RectAlignment_$type, c.value);
                a.ad.h(m, l);
            }
            if (d.hasValue) {
                m = "blurRad";
                l = d.value.toString();
                a.ad.h(m, l);
            }
            if (e.hasValue) {
                m = "dir";
                l = e.value.toString();
                a.ad.h(m, l);
            }
            if (f.hasValue) {
                m = "dist";
                l = f.value.toString();
                a.ad.h(m, l);
            }
            if (g.hasValue) {
                m = "kx";
                l = g.value.toString();
                a.ad.h(m, l);
            }
            if (h.hasValue) {
                m = "ky";
                l = h.value.toString();
                a.ad.h(m, l);
            }
            if (i.hasValue) {
                m = "rotWithShape";
                l = ST_OnOff.g(i.value);
                a.ad.h(m, l);
            }
            if (j.hasValue) {
                m = "sx";
                l = j.value.toString();
                a.ad.h(m, l);
            }
            if (k.hasValue) {
                m = "sy";
                l = k.value.toString();
                a.ad.h(m, l);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_OuterShadowEffect.$t = /*@__PURE__*/ markType(CT_OuterShadowEffect, 'CT_OuterShadowEffect', CT_ColorEffectBase.$, [ISupportSetProperty_$type]);
    return CT_OuterShadowEffect;
})();
/**
 * @hidden
 */
export let CT_InnerShadowEffect = /*@__PURE__*/ (() => {
    class CT_InnerShadowEffect extends CT_ColorEffectBase {
        constructor() {
            super();
            this.h = toNullable(Number_$type, null);
            this.l = toNullable(Number_$type, null);
            this.j = toNullable(Number_$type, null);
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        n(a, b, c, d) {
            CT_InnerShadowEffect.o(a, d, this.g, this.i, this.k);
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.i(a, b);
            }
        }
        static m(a, b, c, d) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(Number_$type, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "blurRad":
                        b = toNullable(Number_$type, parseInt64_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "dist":
                        c = toNullable(Number_$type, parseInt64_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "dir":
                        d = toNullable(Number_$type, parseInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static o(a, b, c = toNullable(Number_$type, null), d = toNullable(Number_$type, null), e = toNullable(Number_$type, null)) {
            a.ad.p(b, "a");
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "blurRad";
                f = c.value.toString();
                a.ad.h(g, f);
            }
            if (d.hasValue) {
                g = "dir";
                f = d.value.toString();
                a.ad.h(g, f);
            }
            if (e.hasValue) {
                g = "dist";
                f = e.value.toString();
                a.ad.h(g, f);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_InnerShadowEffect.$t = /*@__PURE__*/ markType(CT_InnerShadowEffect, 'CT_InnerShadowEffect', CT_ColorEffectBase.$, [ISupportSetProperty_$type]);
    return CT_InnerShadowEffect;
})();
/**
 * @hidden
 */
export let CT_GlowEffect = /*@__PURE__*/ (() => {
    class CT_GlowEffect extends CT_ColorEffectBase {
        constructor() {
            super();
            this.f = toNullable(Number_$type, null);
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        h(a, b, c, d) {
            CT_GlowEffect.i(a, d, this.e);
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        static g(a, b) {
            b = toNullable(Number_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "rad":
                        b = toNullable(Number_$type, parseInt64_1(c.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static i(a, b, c = toNullable(Number_$type, null)) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "rad";
                d = c.value.toString();
                a.ad.h(e, d);
            }
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.i(a, b);
            }
        }
    }
    CT_GlowEffect.$t = /*@__PURE__*/ markType(CT_GlowEffect, 'CT_GlowEffect', CT_ColorEffectBase.$, [ISupportSetProperty_$type]);
    return CT_GlowEffect;
})();
/**
 * @hidden
 */
export let CT_GradientStop = /*@__PURE__*/ (() => {
    class CT_GradientStop extends CT_ColorEffectBase {
        constructor() {
            super();
            this.d = new ST_PositiveFixedPercentage();
        }
        f(a, b, c, d) {
            CT_GradientStop.g(a, d, this.d);
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.i(a, b);
            }
        }
        static e(a, b) {
            b = new ST_PositiveFixedPercentage(0);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "pos":
                        b = ST_PositiveFixedPercentage.f(c.d, a.d._z);
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static g(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            e = "pos";
            d = c.u(a.d._z);
            a.ad.h(e, d);
        }
    }
    CT_GradientStop.$t = /*@__PURE__*/ markType(CT_GradientStop, 'CT_GradientStop', CT_ColorEffectBase.$, [ISupportSetProperty_$type]);
    return CT_GradientStop;
})();
/**
 * @hidden
 */
export let CT_DuotoneEffect = /*@__PURE__*/ (() => {
    class CT_DuotoneEffect extends CT_ColorEffectBase {
        constructor() {
            super();
        }
        d(a, b, c, d) {
            c.p(d, "a");
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.i(a, b);
            }
        }
    }
    CT_DuotoneEffect.$t = /*@__PURE__*/ markType(CT_DuotoneEffect, 'CT_DuotoneEffect', CT_ColorEffectBase.$, [ISupportSetProperty_$type]);
    return CT_DuotoneEffect;
})();
/**
 * @hidden
 */
export let CT_ColorReplaceEffect = /*@__PURE__*/ (() => {
    class CT_ColorReplaceEffect extends CT_ColorEffectBase {
        constructor() {
            super();
        }
        d(a, b, c, d) {
            c.p(d, "a");
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.i(a, b);
            }
        }
    }
    CT_ColorReplaceEffect.$t = /*@__PURE__*/ markType(CT_ColorReplaceEffect, 'CT_ColorReplaceEffect', CT_ColorEffectBase.$, [ISupportSetProperty_$type]);
    return CT_ColorReplaceEffect;
})();
/**
 * @hidden
 */
export let CT_AlphaInverseEffect = /*@__PURE__*/ (() => {
    class CT_AlphaInverseEffect extends CT_ColorEffectBase {
        constructor() {
            super();
        }
        d(a, b, c, d) {
            c.p(d, "a");
            if (this.b != null) {
                this.b.h(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.i(a, b);
            }
        }
    }
    CT_AlphaInverseEffect.$t = /*@__PURE__*/ markType(CT_AlphaInverseEffect, 'CT_AlphaInverseEffect', CT_ColorEffectBase.$, [ISupportSetProperty_$type]);
    return CT_AlphaInverseEffect;
})();
/**
 * @hidden
 */
export let CT_TextParagraphProperties_DML = /*@__PURE__*/ (() => {
    class CT_TextParagraphProperties_DML extends CT_TextParagraphProperties {
        constructor() {
            super();
            this.u = null;
            this.w = null;
            this.y = null;
            this.s = null;
            this.p = null;
            this.r = null;
            this.q = null;
            this.aa = null;
            this.n = null;
        }
        get v() {
            if (this.u == null) {
                this.u = new EG_TextBulletColor();
            }
            return this.u;
        }
        get x() {
            if (this.w == null) {
                this.w = new EG_TextBulletSize();
            }
            return this.w;
        }
        get z() {
            if (this.y == null) {
                this.y = new EG_TextBulletTypeface();
            }
            return this.y;
        }
        get t() {
            if (this.s == null) {
                this.s = new EG_TextBullet();
            }
            return this.s;
        }
        static o(a) {
            let b = toNullable(Number_$type, null);
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(ST_TextAlignType_$type, null);
            let g = toNullable(ST_Coordinate32.$, null);
            let h = toNullable(Boolean_$type, null);
            let i = toNullable(Boolean_$type, null);
            let j = toNullable(ST_TextFontAlignType_$type, null);
            let k = toNullable(Boolean_$type, null);
            let l = toNullable(Boolean_$type, null);
            let m = CT_TextParagraphProperties_DML.ab(a, b, c, d, e, f, g, h, i, j, k, l);
            b = m.p1;
            c = m.p2;
            d = m.p3;
            e = m.p4;
            f = m.p5;
            g = m.p6;
            h = m.p7;
            i = m.p8;
            j = m.p9;
            k = m.p10;
            l = m.p11;
            let n = ((() => {
                let $ret = new CT_TextParagraphProperties_DML();
                $ret.c = f;
                $ret.d = g;
                $ret.e = i;
                $ret.f = j;
                $ret.g = l;
                $ret.h = ST_TextIndent.h(e);
                $ret.i = k;
                $ret.j = ST_TextIndentLevelType.h(d);
                $ret.k = ST_TextMargin.h(b);
                $ret.l = ST_TextMargin.h(c);
                $ret.m = h;
                return $ret;
            })());
            return n;
        }
        static ab(a, b, c, d, e, f, g, h, i, j, k, l) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(Number_$type, null);
            e = toNullable(Number_$type, null);
            f = toNullable(ST_TextAlignType_$type, null);
            g = toNullable(ST_Coordinate32.$, null);
            h = toNullable(Boolean_$type, null);
            i = toNullable(Boolean_$type, null);
            j = toNullable(ST_TextFontAlignType_$type, null);
            k = toNullable(Boolean_$type, null);
            l = toNullable(Boolean_$type, null);
            for (let m of fromEnum(a.ab.u)) {
                switch (m.a.e(a.d)) {
                    case "marL":
                        b = toNullable(Number_$type, parseInt32_1(m.d, CultureInfo.invariantCulture));
                        break;
                    case "marR":
                        c = toNullable(Number_$type, parseInt32_1(m.d, CultureInfo.invariantCulture));
                        break;
                    case "lvl":
                        d = toNullable(Number_$type, parseInt32_1(m.d, CultureInfo.invariantCulture));
                        break;
                    case "indent":
                        e = toNullable(Number_$type, parseInt32_1(m.d, CultureInfo.invariantCulture));
                        break;
                    case "algn":
                        f = toNullable(ST_TextAlignType_$type, XmlNamespaceDefinitionBase.b(ST_TextAlignType_$type, m.d));
                        break;
                    case "defTabSz":
                        g = toNullable(ST_Coordinate32.$, ST_Coordinate32.g(m.d));
                        break;
                    case "rtl":
                        h = toNullable(Boolean_$type, ST_OnOff.e(m.d));
                        break;
                    case "eaLnBrk":
                        i = toNullable(Boolean_$type, ST_OnOff.e(m.d));
                        break;
                    case "fontAlgn":
                        j = toNullable(ST_TextFontAlignType_$type, XmlNamespaceDefinitionBase.b(ST_TextFontAlignType_$type, m.d));
                        break;
                    case "latinLnBrk":
                        k = toNullable(Boolean_$type, ST_OnOff.e(m.d));
                        break;
                    case "hangingPunct":
                        l = toNullable(Boolean_$type, ST_OnOff.e(m.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k,
                p11: l
            };
        }
        static ad(a, b, c = toNullable(ST_TextAlignType_$type, null), d = toNullable(ST_Coordinate32.$, null), e = toNullable(Boolean_$type, null), f = toNullable(ST_TextFontAlignType_$type, null), g = toNullable(Boolean_$type, null), h = toNullable(Number_$type, null), i = toNullable(Boolean_$type, null), j = toNullable(Number_$type, null), k = toNullable(Number_$type, null), l = toNullable(Number_$type, null), m = toNullable(Boolean_$type, null)) {
            a.ad.p(b, "a");
            let n = null;
            let o = null;
            if (c.hasValue) {
                o = "algn";
                n = XmlNamespaceDefinitionBase.p(ST_TextAlignType_$type, c.value);
                a.ad.h(o, n);
            }
            if (d.hasValue) {
                o = "defTabSz";
                n = d.value.toString();
                a.ad.h(o, n);
            }
            if (e.hasValue) {
                o = "eaLnBrk";
                n = ST_OnOff.g(e.value);
                a.ad.h(o, n);
            }
            if (f.hasValue) {
                o = "fontAlgn";
                n = XmlNamespaceDefinitionBase.p(ST_TextFontAlignType_$type, f.value);
                a.ad.h(o, n);
            }
            if (g.hasValue) {
                o = "hangingPunct";
                n = ST_OnOff.g(g.value);
                a.ad.h(o, n);
            }
            if (h.hasValue) {
                o = "indent";
                n = h.value.toString();
                a.ad.h(o, n);
            }
            if (i.hasValue) {
                o = "latinLnBrk";
                n = ST_OnOff.g(i.value);
                a.ad.h(o, n);
            }
            if (j.hasValue) {
                o = "lvl";
                n = j.value.toString();
                a.ad.h(o, n);
            }
            if (k.hasValue) {
                o = "marL";
                n = k.value.toString();
                a.ad.h(o, n);
            }
            if (l.hasValue) {
                o = "marR";
                n = l.value.toString();
                a.ad.h(o, n);
            }
            if (m.hasValue) {
                o = "rtl";
                n = ST_OnOff.g(m.value);
                a.ad.h(o, n);
            }
        }
        setProperty(a, b) {
            switch (a) {
                case 926:
                    this.p = typeCast(CT_TextSpacing.$, b);
                    break;
                case 1578:
                    this.r = typeCast(CT_TextSpacing.$, b);
                    break;
                case 1577:
                    this.q = typeCast(CT_TextSpacing.$, b);
                    break;
                case 1658:
                    this.aa = CT_TextTabStopList.c(typeCast(CT_TextTabStopList.$, b));
                    break;
                case 455:
                    this.a = typeCast(CT_TextCharacterProperties_DML.$, b);
                    break;
                case 601:
                    this.n = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default:
                    if (this.v.c(a)) {
                        this.v.setProperty(a, b);
                        return;
                    }
                    else if (this.x.d(a)) {
                        this.x.setProperty(a, b);
                        return;
                    }
                    else if (this.z.c(a)) {
                        this.z.setProperty(a, b);
                        return;
                    }
                    else if (this.t.e(a)) {
                        this.t.setProperty(a, b);
                        return;
                    }
                    break;
            }
        }
        ac(a, b, c, d) {
            CT_TextParagraphProperties_DML.ad(a, d, this.c, this.d, this.e, this.f, this.g, ST_TextIndent.g(this.h), this.i, ST_TextIndentLevelType.g(this.j), ST_TextMargin.g(this.k), ST_TextMargin.g(this.l), this.m);
            if (this.p != null) {
                this.p.f(a, b, c, DrawingMLMain.fz);
            }
            if (this.r != null) {
                this.r.f(a, b, c, DrawingMLMain.iu);
            }
            if (this.q != null) {
                this.q.f(a, b, c, DrawingMLMain.it);
            }
            if (this.aa != null) {
                for (let e of fromEnum(this.aa)) {
                    DMLExtensions.bq(e, a, b, c, DrawingMLMain.je);
                }
            }
            let f = typeCast(CT_TextCharacterProperties_DML.$, this.a);
            if (f != null) {
                f.aq(a, b, c, DrawingMLMain.c6);
            }
            if (this.n != null) {
                this.n.d(a, b, c, DrawingMLMain.ds);
            }
            if (this.v != null) {
                this.v.d(a, b, c, null);
            }
            if (this.x != null) {
                this.x.e(a, b, c, null);
            }
            if (this.z != null) {
                this.z.d(a, b, c, null);
            }
            if (this.t != null) {
                this.t.f(a, b, c, null);
            }
            c.k();
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TextParagraphProperties_DML.$t = /*@__PURE__*/ markType(CT_TextParagraphProperties_DML, 'CT_TextParagraphProperties_DML', CT_TextParagraphProperties.$, [ISupportSetProperty_$type]);
    return CT_TextParagraphProperties_DML;
})();
/**
 * @hidden
 */
export let CT_TextParagraph_DML = /*@__PURE__*/ (() => {
    class CT_TextParagraph_DML extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.e = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new List$1(EG_TextRun.$, 0);
            }
            return this.e;
        }
        setProperty(a, b) {
            switch (a) {
                case 1154:
                    this.c = typeCast(CT_TextParagraphProperties_DML.$, b);
                    break;
                case 577:
                    this.a = typeCast(CT_TextCharacterProperties_DML.$, b);
                    break;
                case 1297:
                case 164:
                case 651:
                    let c = new EG_TextRun();
                    c.setProperty(a, b);
                    this.f.add(c);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TextParagraph_DML.$t = /*@__PURE__*/ markType(CT_TextParagraph_DML, 'CT_TextParagraph_DML', Base.$, [ISupportSetProperty_$type]);
    return CT_TextParagraph_DML;
})();
/**
 * @hidden
 */
export let CT_TextBody_DML = /*@__PURE__*/ (() => {
    class CT_TextBody_DML extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.a = null;
            this.b = null;
        }
        get d() {
            if (this.c == null) {
                this.c = new List$1(CT_TextParagraph_DML.$, 0);
            }
            return this.c;
        }
        e(a, b, c, d) {
            c.p(d, null);
            if (this.a != null) {
                DMLExtensions.bd(this.a, a, b, c, DrawingMLMain.b0);
            }
            if (this.b != null) {
                DMLExtensions.bk(this.b, a, b, c, DrawingMLMain.f2);
            }
            if (this.d != null) {
                for (let e of fromEnum(this.d)) {
                    DMLExtensions.bo(e, a, b, c, DrawingMLMain.he);
                }
            }
            c.k();
        }
        setProperty(a, b) {
            switch (a) {
                case 136:
                    this.a = typeCast(CT_TextBodyProperties_DML.$, b);
                    break;
                case 938:
                    this.b = typeCast(CT_TextListStyle_DML.$, b);
                    break;
                case 1152:
                    this.d.add(typeCast(CT_TextParagraph_DML.$, b));
                    break;
            }
        }
    }
    CT_TextBody_DML.$t = /*@__PURE__*/ markType(CT_TextBody_DML, 'CT_TextBody_DML', Base.$, [ISupportSetProperty_$type]);
    return CT_TextBody_DML;
})();
/**
 * @hidden
 */
export let DMLUtils = /*@__PURE__*/ (() => {
    class DMLUtils extends Base {
        static q(a) {
            let b = new ST_PositivePercentage(0);
            let c = SerializationUtils.k(a);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "val":
                        b = ST_PositivePercentage.f(d.d, c);
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_PositivePercentage();
                $ret.a = b;
                return $ret;
            })());
            return e;
        }
        static ar(a, b, c) {
            if (b == null) {
                return;
            }
            a.ad.p(c, "a");
            let d = "val";
            let e = b.a.toString();
            a.ad.h(d, e);
            a.ad.k();
        }
        static av(a, b, c) {
            if (b == null) {
                return;
            }
            a.ad.p(c, "a");
            let d = "idx";
            let e = b.b.toString();
            a.ad.h(d, e);
        }
        static p(a) {
            let b = new ST_PositiveFixedPercentage(0);
            let c = SerializationUtils.k(a);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "val":
                        b = ST_PositiveFixedPercentage.f(d.d, c);
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_PositiveFixedPercentage();
                $ret.a = b;
                return $ret;
            })());
            return e;
        }
        static aq(a, b, c) {
            if (b == null) {
                return;
            }
            a.ad.p(c, "a");
            let d = "val";
            let e = b.a.u(a.d._z);
            a.ad.h(d, e);
            a.ad.k();
        }
        static f(a) {
            let b = new ST_FixedPercentage(0);
            let c = SerializationUtils.k(a);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "val":
                        b = ST_FixedPercentage.c(d.d, c);
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_FixedPercentage();
                $ret.a = b;
                return $ret;
            })());
            return e;
        }
        static af(a, b, c) {
            if (b == null) {
                return;
            }
            a.ad.p(c, "a");
            let d = "val";
            let e = b.a.toString();
            a.ad.h(d, e);
            a.ad.k();
        }
        static l(a) {
            let b = new ST_Percentage(0);
            let c = SerializationUtils.k(a);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "val":
                        b = ST_Percentage.d(d.d, c);
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = b;
                return $ret;
            })());
            return e;
        }
        static am(a, b, c) {
            if (b == null) {
                return;
            }
            let d = SerializationUtils.k(a);
            a.ad.p(c, "a");
            let e = "val";
            let f = b.a.r(d);
            a.ad.h(e, f);
            a.ad.k();
        }
        static o(a) {
            let b = new ST_PositiveFixedAngle(0);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = ST_PositiveFixedAngle.g(c.d);
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_PositiveFixedAngle();
                $ret.a = b;
                return $ret;
            })());
            return d;
        }
        static ap(a, b, c) {
            if (b == null) {
                return;
            }
            a.ad.p(c, "a");
            let d = "val";
            let e = b.a.toString();
            a.ad.h(d, e);
            a.ad.k();
        }
        static b(a) {
            let b = new ST_Angle(0);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = ST_Angle.b(c.d);
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_Angle();
                $ret.a = b;
                return $ret;
            })());
            return d;
        }
        static ab(a, b, c) {
            if (b == null) {
                return;
            }
            a.ad.p(c, "a");
            let d = "val";
            let e = b.a.toString();
            a.ad.h(d, e);
            a.ad.k();
        }
        static v(a, b) {
            let c = null;
            let d = null;
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = DrawingMLMain.k9(a, b, c, d, e, f);
            c = g.p2;
            d = g.p3;
            e = g.p4;
            f = g.p5;
            let h = ((() => {
                let $ret = new CT_TextFont();
                $ret.b = f;
                $ret.a = d;
                $ret.c = e;
                $ret.d = c;
                return $ret;
            })());
            return h;
        }
        static h(a, b) {
            let c = null;
            let d = toNullable(Boolean_$type, null);
            let e = toNullable(Boolean_$type, null);
            let f = toNullable(Boolean_$type, null);
            let g = null;
            let h = null;
            let i = null;
            let j = null;
            for (let k of fromEnum(a.ab.u)) {
                switch (k.a.e(a.d)) {
                    case "action":
                        c = k.d;
                        break;
                    case "endSnd":
                        d = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "highlightClick":
                        e = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "history":
                        f = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "id":
                        g = k.d;
                        break;
                    case "invalidUrl":
                        h = k.d;
                        break;
                    case "tgtFrame":
                        i = k.d;
                        break;
                    case "tooltip":
                        j = k.d;
                        break;
                    default: break;
                }
            }
            let l = ((() => {
                let $ret = new CT_Hyperlink();
                $ret.f = c;
                $ret.b = d;
                $ret.c = e;
                $ret.d = f;
                $ret.g = g;
                $ret.h = h;
                $ret.i = i;
                $ret.j = j;
                return $ret;
            })());
            return l;
        }
        static u(a) {
            let b = new ST_Percentage(0);
            let c = new ST_Percentage(0);
            let d = new ST_Percentage(0);
            let e = new ST_Percentage(0);
            let f = SerializationUtils.k(a);
            for (let g of fromEnum(a.ab.u)) {
                switch (g.a.e(a.d)) {
                    case "b":
                        b = ST_Percentage.d(g.d, f);
                        break;
                    case "l":
                        c = ST_Percentage.d(g.d, f);
                        break;
                    case "r":
                        d = ST_Percentage.d(g.d, f);
                        break;
                    case "t":
                        e = ST_Percentage.d(g.d, f);
                        break;
                    default: break;
                }
            }
            let h = ((() => {
                let $ret = new CT_RelativeRect();
                $ret.a = b;
                $ret.b = c;
                $ret.c = d;
                $ret.d = e;
                return $ret;
            })());
            return h;
        }
        static w(a) {
            let b = toNullable(ST_RectAlignment_$type, null);
            let c = toNullable(ST_TileFlipMode_$type, null);
            let d = toNullable(ST_Percentage.$, null);
            let e = toNullable(ST_Percentage.$, null);
            let f = toNullable(ST_Coordinate.$, null);
            let g = toNullable(ST_Coordinate.$, null);
            let h = SerializationUtils.k(a);
            for (let i of fromEnum(a.ab.u)) {
                switch (i.a.e(a.d)) {
                    case "algn":
                        b = toNullable(ST_RectAlignment_$type, XmlNamespaceDefinitionBase.b(ST_RectAlignment_$type, i.d));
                        break;
                    case "flip":
                        c = toNullable(ST_TileFlipMode_$type, XmlNamespaceDefinitionBase.b(ST_TileFlipMode_$type, i.d));
                        break;
                    case "sx":
                        d = toNullable(ST_Percentage.$, ST_Percentage.d(i.d, h));
                        break;
                    case "sy":
                        e = toNullable(ST_Percentage.$, ST_Percentage.d(i.d, h));
                        break;
                    case "tx":
                        f = toNullable(ST_Coordinate.$, ST_Coordinate.h(i.d));
                        break;
                    case "ty":
                        g = toNullable(ST_Coordinate.$, ST_Coordinate.h(i.d));
                        break;
                    default: break;
                }
            }
            let j = ((() => {
                let $ret = new CT_TileInfoProperties();
                $ret.a = b;
                $ret.b = c;
                $ret.c = d;
                $ret.d = e;
                $ret.e = f;
                $ret.f = g;
                return $ret;
            })());
            return j;
        }
        static e(a) {
            let b = toNullable(Boolean_$type, null);
            let c = null;
            let d = null;
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "builtIn":
                        b = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    case "http://schemas.openxmlformats.org/officeDocument/2006/relationships:embed":
                        c = e.d;
                        break;
                    case "name":
                        d = e.d;
                        break;
                    default: break;
                }
            }
            let f = ((() => {
                let $ret = new CT_EmbeddedWAVAudioFile();
                $ret.b = b;
                $ret.c = c;
                $ret.d = d;
                return $ret;
            })());
            return f;
        }
        static i(a) {
            let b = toNullable(ST_LineEndLength_$type, null);
            let c = toNullable(ST_LineEndType_$type, null);
            let d = toNullable(ST_LineEndWidth_$type, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "len":
                        b = toNullable(ST_LineEndLength_$type, XmlNamespaceDefinitionBase.b(ST_LineEndLength_$type, e.d));
                        break;
                    case "type":
                        c = toNullable(ST_LineEndType_$type, XmlNamespaceDefinitionBase.b(ST_LineEndType_$type, e.d));
                        break;
                    case "w":
                        d = toNullable(ST_LineEndWidth_$type, XmlNamespaceDefinitionBase.b(ST_LineEndWidth_$type, e.d));
                        break;
                    default: break;
                }
            }
            let f = ((() => {
                let $ret = new CT_LineEndProperties();
                $ret.a = b;
                $ret.b = c;
                $ret.c = d;
                return $ret;
            })());
            return f;
        }
        static j(a) {
            let b = toNullable(ST_PositivePercentage.$, null);
            let c = SerializationUtils.k(a);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "lim":
                        b = toNullable(ST_PositivePercentage.$, ST_PositivePercentage.f(d.d, c));
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_LineJoinMiterProperties();
                $ret.a = b;
                return $ret;
            })());
            return e;
        }
        static t(a) {
            let b = toNullable(ST_PresetLineDashVal_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = toNullable(ST_PresetLineDashVal_$type, XmlNamespaceDefinitionBase.b(ST_PresetLineDashVal_$type, c.d));
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_PresetLineDashProperties();
                $ret.a = b;
                return $ret;
            })());
            return d;
        }
        static d(a) {
            let b = new ST_PositivePercentage(0);
            let c = new ST_PositivePercentage(0);
            let d = SerializationUtils.k(a);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "d":
                        b = ST_PositivePercentage.f(e.d, d);
                        break;
                    case "sp":
                        c = ST_PositivePercentage.f(e.d, d);
                        break;
                    default: break;
                }
            }
            let f = ((() => {
                let $ret = new CT_DashStop();
                $ret.a = b;
                $ret.b = c;
                return $ret;
            })());
            return f;
        }
        static s(a) {
            let b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "prst":
                        b = XmlNamespaceDefinitionBase.b(ST_ShapeType_$type, c.d);
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_PresetGeometry2D();
                $ret.b = b;
                return $ret;
            })());
            return d;
        }
        static x(a) {
            let b = toNullable(Boolean_$type, null);
            let c = toNullable(Boolean_$type, null);
            let d = toNullable(ST_Angle.$, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "flipH":
                        b = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    case "flipV":
                        c = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    case "rot":
                        d = toNullable(ST_Angle.$, ST_Angle.b(e.d));
                        break;
                    default: break;
                }
            }
            let f = ((() => {
                let $ret = new CT_Transform2D();
                $ret.i = b;
                $ret.k = c;
                $ret.j = d;
                return $ret;
            })());
            return f;
        }
        static g(a) {
            let b = new ST_AdjCoordinate(0);
            let c = new ST_AdjCoordinate(0);
            let d = new ST_AdjCoordinate(0);
            let e = new ST_AdjCoordinate(0);
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "b":
                        b = ST_AdjCoordinate.a(f.d);
                        break;
                    case "l":
                        c = ST_AdjCoordinate.a(f.d);
                        break;
                    case "r":
                        d = ST_AdjCoordinate.a(f.d);
                        break;
                    case "t":
                        e = ST_AdjCoordinate.a(f.d);
                        break;
                    default: break;
                }
            }
            let g = ((() => {
                let $ret = new CT_GeomRect();
                $ret.a = b;
                $ret.b = c;
                $ret.c = d;
                $ret.d = e;
                return $ret;
            })());
            return g;
        }
        static c(a) {
            let b = new ST_AdjAngle(0);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "ang":
                        b = ST_AdjAngle.a(c.d);
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_ConnectionSite();
                $ret.b = b;
                return $ret;
            })());
            return d;
        }
        static a(a) {
            let b = new ST_AdjCoordinate(0);
            let c = new ST_AdjCoordinate(0);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "x":
                        b = ST_AdjCoordinate.a(d.d);
                        break;
                    case "y":
                        c = ST_AdjCoordinate.a(d.d);
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_AdjPoint2D();
                $ret.a = b;
                $ret.b = c;
                return $ret;
            })());
            return e;
        }
        static m(a) {
            let b = 0;
            let c = 0;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "x":
                        b = parseInt64_1(d.d, CultureInfo.invariantCulture);
                        break;
                    case "y":
                        c = parseInt64_1(d.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_Point2D();
                $ret.a = ST_Coordinate.b(b);
                $ret.b = ST_Coordinate.b(c);
                return $ret;
            })());
            return e;
        }
        static r(a) {
            let b = 0;
            let c = 0;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "cx":
                        b = parseInt64_1(d.d, CultureInfo.invariantCulture);
                        break;
                    case "cy":
                        c = parseInt64_1(d.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            let e = ((() => {
                let $ret = new CT_PositiveSize2D();
                $ret.a = ST_PositiveCoordinate.a(b);
                $ret.b = ST_PositiveCoordinate.a(c);
                return $ret;
            })());
            return e;
        }
        static aa(a, b, c, d) {
            if (c == null) {
                return;
            }
            let e = [c.b.a, c.b.b, c.b.c, c.b.d, c.b.e, c.b.f];
            let f = a.ad;
            f.p(d, "a");
            for (let g = 0; g < e.length; g++) {
                let h = e[g];
                if (h == null) {
                    continue;
                }
                h.d(a, b, f);
            }
            f.k();
        }
        static au(a, b, c) {
            if (b == null) {
                return;
            }
            a.ad.p(c, "a");
            let d = null;
            d = b.a.toString();
            a.ad.h("b", d);
            d = b.b.toString();
            a.ad.h("l", d);
            d = b.c.toString();
            a.ad.h("r", d);
            d = b.d.toString();
            a.ad.h("t", d);
            a.ad.k();
        }
        static ax(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = null;
            let f = null;
            if (b.a.hasValue) {
                e = "algn";
                f = EnumUtil.getName(ST_RectAlignment_$type, b.a.value);
                d.h(e, f);
            }
            if (b.b.hasValue) {
                e = "flip";
                f = EnumUtil.getName(ST_TileFlipMode_$type, b.b.value);
                d.h(e, f);
            }
            if (b.c.hasValue) {
                e = "sx";
                f = b.c.value.toString();
                d.h(e, f);
            }
            if (b.d.hasValue) {
                e = "sy";
                f = b.d.value.toString();
                d.h(e, f);
            }
            if (b.e.hasValue) {
                e = "tx";
                f = b.e.value.toString();
                d.h(e, f);
            }
            if (b.f.hasValue) {
                e = "ty";
                f = b.f.value.toString();
                d.h(e, f);
            }
            d.k();
        }
        static aj(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = null;
            let f = null;
            if (b.a.hasValue) {
                e = "len";
                f = EnumUtil.getName(ST_LineEndLength_$type, b.a.value);
                d.h(e, f);
            }
            if (b.b.hasValue) {
                e = "type";
                f = EnumUtil.getName(ST_LineEndType_$type, b.b.value);
                d.h(e, f);
            }
            if (b.c.hasValue) {
                e = "w";
                f = EnumUtil.getName(ST_LineEndWidth_$type, b.c.value);
                d.h(e, f);
            }
            d.k();
        }
        static ak(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = null;
            let f = null;
            if (b.a.hasValue) {
                e = "len";
                f = b.a.value.toString();
                d.h(e, f);
            }
            d.k();
        }
        static at(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = null;
            let f = null;
            if (b.a.hasValue) {
                e = "val";
                f = EnumUtil.getName(ST_PresetLineDashVal_$type, b.a.value);
                d.h(e, f);
            }
            d.k();
        }
        static ad(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = null;
            let f = null;
            e = "d";
            f = b.a.toString();
            d.h(e, f);
            e = "sp";
            f = b.b.toString();
            d.h(e, f);
            d.k();
        }
        static aw(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.b.hasValue) {
                e = "charset";
                d = intToString(c.b.value, CultureInfo.currentCulture);
                a.ad.h(e, d);
            }
            if (c.a != null) {
                e = "panose";
                d = c.a.toString();
                a.ad.h(e, d);
            }
            if (nullableNotEquals(c.c, null)) {
                e = "pitchFamily";
                d = c.c.value.toString();
                a.ad.h(e, d);
            }
            if (c.d != null) {
                e = "typeface";
                d = c.d;
                a.ad.h(e, d);
            }
            a.ad.k();
        }
        static ai(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.f != null) {
                e = "action";
                d = c.f;
                a.ad.h(e, d);
            }
            if (c.b.hasValue) {
                e = "endSnd";
                d = ST_OnOff.g(c.b.value);
                a.ad.h(e, d);
            }
            if (c.c.hasValue) {
                e = "highlightClick";
                d = ST_OnOff.g(c.c.value);
                a.ad.h(e, d);
            }
            if (c.d.hasValue) {
                e = "history";
                d = ST_OnOff.g(c.d.value);
                a.ad.h(e, d);
            }
            if (c.g != null) {
                e = "id";
                d = c.g;
                a.ad.h(e, d);
            }
            if (c.h != null) {
                e = "invalidUrl";
                d = c.h;
                a.ad.h(e, d);
            }
            if (c.i != null) {
                e = "tgtFrame";
                d = c.i;
                a.ad.h(e, d);
            }
            if (c.j != null) {
                e = "tooltip";
                d = c.j;
                a.ad.h(e, d);
            }
        }
        static ae(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.b.hasValue) {
                e = "builtIn";
                d = ST_OnOff.g(c.b.value);
                a.ad.h(e, d);
            }
            if (c.c != null) {
                e = OfficeDocumentRelationships.aq;
                d = c.c;
                a.ad.h(e, d);
            }
            if (c.d != null) {
                e = "name";
                d = c.c;
                a.ad.h(e, d);
            }
            a.ad.k();
        }
        static ay(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c.i.hasValue) {
                e = "flipH";
                d = ST_OnOff.g(c.i.value);
                a.ad.h(e, d);
            }
            if (c.k.hasValue) {
                e = "flipV";
                d = ST_OnOff.g(c.k.value);
                a.ad.h(e, d);
            }
            if (c.j.hasValue) {
                e = "rot";
                d = c.j.value.toString();
                a.ad.h(e, d);
            }
        }
        static ag(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            e = "fmla";
            d = c.a;
            a.ad.h(e, d);
            e = "name";
            d = c.b;
            a.ad.h(e, d);
            a.ad.k();
        }
        static as(a, b, c) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            e = "prst";
            d = EnumUtil.getName(ST_ShapeType_$type, c.b);
            a.ad.h(e, d);
        }
        static al(a, b, c) {
            let d = a.ad;
            d.p(b, "a");
            let e = null;
            let f = null;
            if (c.c.hasValue) {
                f = "extrusionOk";
                e = ST_OnOff.g(c.c.value);
                a.ad.h(f, e);
            }
            if (c.d.hasValue) {
                f = "fill";
                e = EnumUtil.getName(ST_PathFillMode_$type, c.d.value);
                a.ad.h(f, e);
            }
            if (c.e.hasValue) {
                f = "h";
                e = c.e.value.toString();
                a.ad.h(f, e);
            }
            if (c.f.hasValue) {
                f = "stroke";
                e = ST_OnOff.g(c.f.value);
                a.ad.h(f, e);
            }
            if (c.g.hasValue) {
                f = "w";
                e = c.g.value.toString();
                a.ad.h(f, e);
            }
        }
        static ah(a, b, c) {
            if (b == null) {
                return;
            }
            a.ad.p(c, "a");
            let d = null;
            d = b.a.toString();
            a.ad.h("b", d);
            d = b.b.toString();
            a.ad.h("l", d);
            d = b.c.toString();
            a.ad.h("r", d);
            d = b.d.toString();
            a.ad.h("t", d);
            a.ad.k();
        }
        static ao(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = null;
            let f = null;
            if (b.b.hasValue) {
                e = "gdRefAng";
                f = b.b.value.a;
                d.h(e, f);
            }
            if (b.c.hasValue) {
                e = "gdRefR";
                f = b.c.value.a;
                d.h(e, f);
            }
            if (b.d.hasValue) {
                e = "maxAng";
                f = ST_AdjAngle.f(b.d.value);
                d.h(e, f);
            }
            if (b.e.hasValue) {
                e = "maxR";
                f = ST_AdjCoordinate.f(b.e.value);
                d.h(e, f);
            }
            if (b.f.hasValue) {
                e = "minAng";
                f = ST_AdjAngle.f(b.f.value);
                d.h(e, f);
            }
            if (b.g.hasValue) {
                e = "minR";
                f = ST_AdjCoordinate.f(b.g.value);
                d.h(e, f);
            }
        }
        static az(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = null;
            let f = null;
            if (b.b.hasValue) {
                e = "gdRefX";
                f = b.b.value.a;
                d.h(e, f);
            }
            if (b.c.hasValue) {
                e = "gdRefY";
                f = b.c.value.a;
                d.h(e, f);
            }
            if (b.d.hasValue) {
                e = "maxX";
                f = ST_AdjCoordinate.f(b.d.value);
                d.h(e, f);
            }
            if (b.e.hasValue) {
                e = "maxY";
                f = ST_AdjCoordinate.f(b.e.value);
                d.h(e, f);
            }
            if (b.f.hasValue) {
                e = "minX";
                f = ST_AdjCoordinate.f(b.f.value);
                d.h(e, f);
            }
            if (b.g.hasValue) {
                e = "minY";
                f = ST_AdjCoordinate.f(b.g.value);
                d.h(e, f);
            }
        }
        static ac(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = "ang";
            let f = ST_AdjAngle.f(b.b);
            d.h(e, f);
        }
        static an(a, b, c) {
            if (b == null) {
                return;
            }
            let d = a.ad;
            d.p(c, "a");
            let e = "x";
            let f = b.a.toString();
            d.h(e, f);
            e = "y";
            f = b.b.toString();
            d.h(e, f);
            d.k();
        }
        static y(a) {
            let b = toNullable(ST_GeomGuideName.$, null);
            let c = toNullable(ST_GeomGuideName.$, null);
            let d = toNullable(ST_AdjCoordinate.$, null);
            let e = toNullable(ST_AdjCoordinate.$, null);
            let f = toNullable(ST_AdjCoordinate.$, null);
            let g = toNullable(ST_AdjCoordinate.$, null);
            for (let h of fromEnum(a.ab.u)) {
                switch (h.a.e(a.d)) {
                    case "gdRefX":
                        b = toNullable(ST_GeomGuideName.$, new ST_GeomGuideName(1, h.d));
                        break;
                    case "gdRefY":
                        c = toNullable(ST_GeomGuideName.$, new ST_GeomGuideName(1, h.d));
                        break;
                    case "maxX":
                        d = toNullable(ST_AdjCoordinate.$, ST_AdjCoordinate.a(h.d));
                        break;
                    case "maxY":
                        e = toNullable(ST_AdjCoordinate.$, ST_AdjCoordinate.a(h.d));
                        break;
                    case "minX":
                        f = toNullable(ST_AdjCoordinate.$, ST_AdjCoordinate.a(h.d));
                        break;
                    case "minY":
                        g = toNullable(ST_AdjCoordinate.$, ST_AdjCoordinate.a(h.d));
                        break;
                    default: break;
                }
            }
            let i = ((() => {
                let $ret = new CT_XYAdjustHandle();
                $ret.b = b;
                $ret.c = c;
                $ret.d = d;
                $ret.e = e;
                $ret.f = f;
                $ret.g = g;
                return $ret;
            })());
            return i;
        }
        static n(a) {
            let b = toNullable(ST_GeomGuideName.$, null);
            let c = toNullable(ST_GeomGuideName.$, null);
            let d = toNullable(ST_AdjAngle.$, null);
            let e = toNullable(ST_AdjCoordinate.$, null);
            let f = toNullable(ST_AdjAngle.$, null);
            let g = toNullable(ST_AdjCoordinate.$, null);
            for (let h of fromEnum(a.ab.u)) {
                switch (h.a.e(a.d)) {
                    case "gdRefAng":
                        b = toNullable(ST_GeomGuideName.$, new ST_GeomGuideName(1, h.d));
                        break;
                    case "gdRefR":
                        c = toNullable(ST_GeomGuideName.$, new ST_GeomGuideName(1, h.d));
                        break;
                    case "maxAng":
                        d = toNullable(ST_AdjAngle.$, ST_AdjAngle.a(h.d));
                        break;
                    case "maxR":
                        e = toNullable(ST_AdjCoordinate.$, ST_AdjCoordinate.a(h.d));
                        break;
                    case "minAng":
                        f = toNullable(ST_AdjAngle.$, ST_AdjAngle.a(h.d));
                        break;
                    case "minR":
                        g = toNullable(ST_AdjCoordinate.$, ST_AdjCoordinate.a(h.d));
                        break;
                    default: break;
                }
            }
            let i = ((() => {
                let $ret = new CT_PolarAdjustHandle();
                $ret.b = b;
                $ret.c = c;
                $ret.d = d;
                $ret.e = e;
                $ret.f = f;
                $ret.g = g;
                return $ret;
            })());
            return i;
        }
        static k(a) {
            let b = new ST_AdjCoordinate(0);
            let c = new ST_AdjAngle(0);
            let d = new ST_AdjAngle(0);
            let e = new ST_AdjCoordinate(0);
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "hR":
                        b = ST_AdjCoordinate.a(f.d);
                        break;
                    case "stAng":
                        c = ST_AdjAngle.a(f.d);
                        break;
                    case "swAng":
                        d = ST_AdjAngle.a(f.d);
                        break;
                    case "wR":
                        e = ST_AdjCoordinate.a(f.d);
                        break;
                    default: break;
                }
            }
            let g = ((() => {
                let $ret = new CT_Path2DArcTo();
                $ret.c = b;
                $ret.a = c;
                $ret.b = d;
                $ret.d = e;
                return $ret;
            })());
            return g;
        }
    }
    DMLUtils.$t = /*@__PURE__*/ markType(DMLUtils, 'DMLUtils');
    return DMLUtils;
})();
/**
 * @hidden
 */
export let DMLExtensions = /*@__PURE__*/ (() => {
    class DMLExtensions extends Base {
        static cu(a, b, c, d, e) {
            d.p(e, "a");
            if (a.a != null) {
                DMLExtensions.ct(a.a, b, c, d, DrawingMLMain.dz);
            }
            d.k();
        }
        static cw(a, b, c, d, e) {
            DMLUtils.ax(b, a, e);
        }
        static ct(a, b, c, d, e) {
            DMLUtils.au(b, a, e);
        }
        static n(a, b, c, d, e = DrawingMLMain.bt) {
            if (a == null) {
                return;
            }
            d.p(e, "a");
            CT_Blip_DML.z(b, e, a.c);
            if (a.f != null) {
                CT_AlphaBiLevelEffect.e(b, DrawingMLMain.a3, a.f.a);
            }
            if (a.g != null) {
                d.p(DrawingMLMain.a4, "a");
                d.k();
            }
            if (a.h != null) {
                d.p(DrawingMLMain.a5, "a");
                d.k();
            }
            let f = a.i;
            if (f != null) {
                f.d(b, c, d, DrawingMLMain.a6);
            }
            let g = a.j;
            if (g != null) {
                DMLExtensions.e(g, b, c, d, DrawingMLMain.a7);
            }
            let h = a.k;
            if (h != null) {
                DMLExtensions.f(h, b, c, d, DrawingMLMain.a8);
            }
            let i = a.l;
            if (i != null) {
                DMLExtensions.h(i, b, c, d, DrawingMLMain.bb);
            }
            let j = a.m;
            if (j != null) {
                DMLExtensions.l(j, b, c, d, DrawingMLMain.bq);
            }
            let k = a.o;
            if (k != null) {
                DMLExtensions.p(k, b, c, d, DrawingMLMain.by);
            }
            let l = a.p;
            if (l != null) {
                DMLExtensions.s(l, b, c, d, DrawingMLMain.ck);
            }
            let m = a.q;
            if (m != null) {
                m.d(b, c, d, DrawingMLMain.cm);
            }
            let n = a.r;
            if (n != null) {
                n.d(b, c, d, DrawingMLMain.de);
            }
            let o = a.w;
            if (o != null) {
                o.d(b, c, d, DrawingMLMain.ds);
            }
            let p = a.s;
            if (p != null) {
                p.g(b, c, d, DrawingMLMain.dy);
            }
            let q = a.t;
            if (q != null) {
                DMLExtensions.ak(q, b, c, d, DrawingMLMain.ep);
            }
            let r = a.u;
            if (r != null) {
                CT_HSLEffect.l(b, DrawingMLMain.e7, r.d, r.f, r.h);
                d.k();
            }
            let s = a.v;
            if (s != null) {
                CT_LuminanceEffect.i(b, DrawingMLMain.f5, s.c, s.e);
                d.k();
            }
            let t = a.x;
            if (s != null) {
                CT_TintEffect.i(b, DrawingMLMain.jn, t.c, t.e);
                d.k();
            }
            d.k();
        }
        static d(a, b, c, d, e = DrawingMLMain.a6) {
            if (a == null) {
                return;
            }
            d.p(e, "a");
            if (a.b != null) {
                a.b.h(b, c, d, DrawingMLMain.e8);
            }
            d.k();
        }
        static e(a, b, c, d, e = DrawingMLMain.a7) {
            if (a == null) {
                return;
            }
            d.p(e, "a");
            if (a.a != null) {
                CT_EffectContainer.m(b, DrawingMLMain.cs, a.a.i, a.a.g);
                d.k();
            }
            d.k();
        }
        static f(a, b, c, d, e = DrawingMLMain.a8) {
            if (a == null) {
                return;
            }
            CT_AlphaModulateFixedEffect.f(b, e, a.b);
            d.k();
        }
        static h(a, b, c, d, e = DrawingMLMain.bb) {
            if (a == null) {
                return;
            }
            CT_AlphaReplaceEffect.e(b, e, a.a);
            d.k();
        }
        static l(a, b, c, d, e = DrawingMLMain.bq) {
            if (a == null) {
                return;
            }
            CT_BiLevelEffect.e(b, e, a.a);
            d.k();
        }
        static a(a, b, c, d, e = DrawingMLMain.bq) {
            if (a == null) {
                return;
            }
            CT_AlphaBiLevelEffect.e(b, e, a.a);
            d.k();
        }
        static b(a, b, c, d, e = DrawingMLMain.bq) {
            if (a == null) {
                return;
            }
            d.p(e, "a");
            d.k();
        }
        static p(a, b, c, d, e = DrawingMLMain.by) {
            if (a == null) {
                return;
            }
            CT_BlurEffect.i(b, e, a.c, a.e);
            d.k();
        }
        static s(a, b, c, d, e = DrawingMLMain.ck) {
            if (a == null) {
                return;
            }
            CT_ColorChangeEffect.j(b, e, a.f);
            let f = a.a;
            if (f != null) {
                DMLUtils.aa(b, c, f, DrawingMLMain.cl);
            }
            let g = a.c;
            if (g != null) {
                DMLUtils.aa(b, c, g, DrawingMLMain.co);
            }
            d.k();
        }
        static a9(a, b, c, d, e) {
            CT_StyleMatrix.h(b, e, a.e);
            if (a.a != null) {
                DMLExtensions.j(a.a, b, c, d, DrawingMLMain.bp);
            }
            if (a.b != null) {
                DMLExtensions.aa(a.b, b, c, d, DrawingMLMain.dm);
            }
            if (a.c != null) {
                DMLExtensions.ae(a.c, b, c, d, DrawingMLMain.d1);
            }
            if (a.d != null) {
                DMLExtensions.aq(a.d, b, c, d, DrawingMLMain.f0);
            }
            d.k();
        }
        static j(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                for (let f of fromEnum(a.b)) {
                    f.saveX(b, d, e, c);
                }
            }
            d.k();
        }
        static aa(a, b, c, d, e) {
            d.p(e, "a");
            if (a.c != null) {
                for (let f of fromEnum(a.c)) {
                    DMLExtensions.z(f, b, c, d, DrawingMLMain.dl);
                }
            }
            d.k();
        }
        static ae(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                for (let f of fromEnum(a.b)) {
                    f.saveX(b, d, f.elementName, c);
                }
            }
            d.k();
        }
        static aq(a, b, c, d, e) {
            d.p(e, "a");
            if (a.a != null) {
                for (let f of fromEnum(a.a)) {
                    f.r(b, c, d, DrawingMLMain.fx);
                }
            }
            d.k();
        }
        static o(a, b, c, d, e) {
            CT_BlipFillProperties_DML.i(b, e, a.b, a.c);
            if (a.d != null) {
                DMLExtensions.n(a.d, b, c, d, DrawingMLMain.bt);
            }
            if (a.a != null) {
                DMLExtensions.ct(a.a, b, c, d, DrawingMLMain.i0);
            }
            if (a.g != null) {
                a.g.d(b, c, d, null);
            }
            d.k();
        }
        static cb(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static ci(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static aw(a, b, c, d, e) {
            CT_PatternFillProperties.j(b, e, a.e);
            if (a.a != null) {
                a.a.d(b, c, d, DrawingMLMain.bo);
            }
            if (a.c != null) {
                a.c.d(b, c, d, DrawingMLMain.dw);
            }
            d.k();
        }
        static a7(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static c(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static t(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static u(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static at(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                a.b.c(b, c, d, null);
            }
            d.k();
        }
        static ac(a, b, c, d, e) {
            CT_FillOverlayEffect.h(b, e, a.c);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static ak(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static al(a, b, c, d, e) {
            CT_HSLEffect.l(b, e, a.d, a.f, a.h);
            d.k();
        }
        static ar(a, b, c, d, e) {
            CT_LuminanceEffect.i(b, e, a.c, a.e);
            d.k();
        }
        static bu(a, b, c, d, e) {
            CT_TintEffect.i(b, e, a.c, a.e);
            d.k();
        }
        static cp(a, b, c, d, e) {
            DMLUtils.aq(b, a, e);
        }
        static b6(a, b, c, d, e) {
            DMLUtils.af(b, a, e);
        }
        static cl(a, b, c, d, e) {
            DMLUtils.am(b, a, e);
        }
        static bz(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static ag(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static ca(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static co(a, b, c, d, e) {
            DMLUtils.ap(b, a, e);
        }
        static cq(a, b, c, d, e) {
            DMLUtils.ar(b, a, e);
        }
        static by(a, b, c, d, e) {
            DMLUtils.ab(b, a, e);
        }
        static cd(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static an(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static v(a, b, c, d, e) {
            CT_EffectContainer.m(b, e, a.i, a.g);
            if (a.c != null) {
                a.c.af(b, c, d, null);
            }
            d.k();
        }
        static g(a, b, c, d, e) {
            CT_AlphaOutsetEffect.f(b, e, a.b);
            d.k();
        }
        static m(a, b, c, d, e) {
            CT_BlendEffect.g(b, e, a.c);
            if (a.a != null) {
                DMLExtensions.v(a.a, b, c, d, DrawingMLMain.cs);
            }
            d.k();
        }
        static y(a, b, c, d, e) {
            CT_EffectReference.e(b, e, a.a);
            d.k();
        }
        static ab(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static ah(a, b, c, d, e) {
            CT_GlowEffect.i(b, e, a.e);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static am(a, b, c, d, e) {
            CT_InnerShadowEffect.o(b, e, a.g, a.i, a.k);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static au(a, b, c, d, e) {
            CT_OuterShadowEffect.ah(b, e, a.n, a.p, a.r, a.t, a.v, a.x, a.z, a.ab, a.ad);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static ay(a, b, c, d, e) {
            CT_PresetShadowEffect.n(b, e, a.h, a.j, a.d);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static a0(a, b, c, d, e) {
            CT_ReflectionEffect.as(b, e, a.o, a.q, a.s, a.u, a.w, a.y, a.aa, a.ac, a.ae, a.ag, a.ai, a.ak, a.am, a.ao);
            d.k();
        }
        static a2(a, b, c, d, e) {
            CT_RelativeOffsetEffect.i(b, e, a.c, a.e);
            d.k();
        }
        static a6(a, b, c, d, e) {
            CT_SoftEdgesEffect.e(b, e, a.a);
            d.k();
        }
        static bv(a, b, c, d, e) {
            CT_TransformEffect.v(b, e, a.h, a.j, a.l, a.n, a.p, a.r);
            d.k();
        }
        static r(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static as(a, b, c, d, e) {
            CT_OfficeArtExtension.f(b, e, a.b);
            d.k();
        }
        static aj(a, b, c, d, e) {
            d.p(e, "a");
            if (a.c != null) {
                for (let f of fromEnum(a.c)) {
                    f.f(b, c, d, DrawingMLMain.eu);
                }
            }
            d.k();
        }
        static ap(a, b, c, d, e) {
            CT_LinearShadeProperties.h(b, e, a.a, a.c);
            d.k();
        }
        static av(a, b, c, d, e) {
            CT_PathShadeProperties.h(b, e, a.c);
            if (a.a != null) {
                DMLExtensions.ct(a.a, b, c, d, DrawingMLMain.d2);
            }
            d.k();
        }
        static ai(a, b, c, d, e) {
            CT_GradientStop.g(b, e, a.d);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static z(a, b, c, d, e) {
            d.p(e, "a");
            if (a.a != null) {
                DMLExtensions.a3(a.a, b, c, d, DrawingMLMain.ie);
            }
            if (a.c != null) {
                DMLExtensions.a4(a.c, b, c, d, DrawingMLMain.iq);
            }
            if (a.f != null) {
                a.f.d(b, c, d, null);
            }
            d.k();
        }
        static w(a, b, c, d, e) {
            d.p(e, "a");
            if (a.a != null) {
                DMLExtensions.p(a.a, b, c, d, DrawingMLMain.by);
            }
            if (a.c != null) {
                a.c.g(b, c, d, DrawingMLMain.dy);
            }
            if (a.e != null) {
                a.e.h(b, c, d, DrawingMLMain.ej);
            }
            if (a.g != null) {
                a.g.n(b, c, d, DrawingMLMain.fg);
            }
            if (a.i != null) {
                a.i.ag(b, c, d, DrawingMLMain.hd);
            }
            if (a.k != null) {
                a.k.m(b, c, d, DrawingMLMain.hr);
            }
            if (a.m != null) {
                DMLExtensions.a0(a.m, b, c, d, DrawingMLMain.h1);
            }
            if (a.o != null) {
                DMLExtensions.a6(a.o, b, c, d, DrawingMLMain.io);
            }
            d.k();
        }
        static a3(a, b, c, d, e) {
            d.p(e, "a");
            if (a.a != null) {
                DMLExtensions.i(a.a, b, c, d, DrawingMLMain.bj);
            }
            if (a.c != null) {
                DMLExtensions.q(a.c, b, c, d, DrawingMLMain.ce);
            }
            if (a.g != null) {
                a.g.d(b, c, d, DrawingMLMain.ds);
            }
            if (a.e != null) {
                DMLExtensions.ao(a.e, b, c, d, DrawingMLMain.fu);
            }
            d.k();
        }
        static a4(a, b, c, d, e) {
            CT_Shape3D.z(b, e, a.p, a.r, a.t, a.v);
            if (a.a != null) {
                DMLExtensions.k(a.a, b, c, d, DrawingMLMain.bm);
            }
            if (a.c != null) {
                DMLExtensions.k(a.c, b, c, d, DrawingMLMain.bn);
            }
            if (a.e != null) {
                a.e.d(b, c, d, DrawingMLMain.ct);
            }
            if (a.i != null) {
                a.i.d(b, c, d, DrawingMLMain.ds);
            }
            if (a.g != null) {
                a.g.d(b, c, d, DrawingMLMain.dv);
            }
            d.k();
        }
        static i(a, b, c, d, e) {
            d.p(e, "a");
            if (a.c != null) {
                DMLExtensions.ax(a.c, b, c, d, DrawingMLMain.bd);
            }
            if (a.a != null) {
                a.a.d(b, c, d, DrawingMLMain.ds);
            }
            if (a.e != null) {
                DMLExtensions.bw(a.e, b, c, d, DrawingMLMain.g4);
            }
            if (a.g != null) {
                DMLExtensions.bw(a.g, b, c, d, DrawingMLMain.jz);
            }
            d.k();
        }
        static q(a, b, c, d, e) {
            CT_Camera.m(b, e, a.g, a.i, a.d);
            if (a.b != null) {
                DMLExtensions.a8(a.b, b, c, d, DrawingMLMain.h4);
            }
            d.k();
        }
        static ao(a, b, c, d, e) {
            CT_LightRig.i(b, e, a.c, a.e);
            if (a.a != null) {
                DMLExtensions.a8(a.a, b, c, d, DrawingMLMain.h4);
            }
            d.k();
        }
        static ax(a, b, c, d, e) {
            CT_Point3D.i(b, e, a.a, a.c, a.e);
            d.k();
        }
        static bw(a, b, c, d, e) {
            CT_Vector3D.j(b, e, a.b, a.d, a.f);
            d.k();
        }
        static a8(a, b, c, d, e) {
            CT_SphereCoords.i(b, e, a.a, a.c, a.e);
            d.k();
        }
        static k(a, b, c, d, e) {
            CT_Bevel.m(b, e, a.e, a.g, a.i);
            d.k();
        }
        static cf(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static b4(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                for (let f of fromEnum(a.b)) {
                    DMLExtensions.b3(f, b, c, d, DrawingMLMain.dd);
                }
            }
            d.k();
        }
        static ce(a, b, c, d, e) {
            DMLUtils.aj(b, a, e);
        }
        static cg(a, b, c, d, e) {
            DMLUtils.ak(b, a, e);
        }
        static cs(a, b, c, d, e) {
            DMLUtils.at(b, a, e);
        }
        static ch(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static b3(a, b, c, d, e) {
            DMLUtils.ad(b, a, e);
        }
        static br(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static bt(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static bs(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static cv(a, b, c, d, e) {
            DMLUtils.aw(b, e, a);
        }
        static cc(a, b, c, d, e) {
            DMLUtils.ai(b, e, a);
            let f = typeCast(CT_OfficeArtExtensionList.$, a.e);
            if (f != null) {
                f.d(b, c, d, DrawingMLMain.ds);
            }
            if (a.a != null) {
                DMLExtensions.b5(a.a, b, c, d, DrawingMLMain.im);
            }
            d.k();
        }
        static b5(a, b, c, d, e) {
            DMLUtils.ae(b, e, a);
        }
        static ad(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static ba(a, b, c, d, e) {
            CT_StyleMatrixReference_DML.g(b, e, a.d);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static x(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.d(b, c, d, null);
            }
            d.k();
        }
        static be(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static bf(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static bg(a, b, c, d, e) {
            CT_TextBulletSizePercent.e(b, e, a.a);
            d.k();
        }
        static bh(a, b, c, d, e) {
            CT_TextBulletSizePoint.e(b, e, a.a);
            d.k();
        }
        static bi(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static bm(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static bb(a, b, c, d, e) {
            CT_TextAutonumberBullet.h(b, e, a.d, a.a);
            d.k();
        }
        static bj(a, b, c, d, e) {
            CT_TextCharBullet.e(b, e, a.a);
            d.k();
        }
        static bc(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLExtensions.n(a.a, b, c, d, DrawingMLMain.bt);
            }
            d.k();
        }
        static bk(a, b, c, d, e) {
            d.p(e, null);
            if (a.c != null) {
                a.c.ac(b, c, d, DrawingMLMain.c5);
            }
            if (a.e != null) {
                a.e.ac(b, c, d, DrawingMLMain.f9);
            }
            if (a.g != null) {
                a.g.ac(b, c, d, DrawingMLMain.ga);
            }
            if (a.i != null) {
                a.i.ac(b, c, d, DrawingMLMain.gb);
            }
            if (a.k != null) {
                a.k.ac(b, c, d, DrawingMLMain.gc);
            }
            if (a.m != null) {
                a.m.ac(b, c, d, DrawingMLMain.gd);
            }
            if (a.o != null) {
                a.o.ac(b, c, d, DrawingMLMain.ge);
            }
            if (a.q != null) {
                a.q.ac(b, c, d, DrawingMLMain.gf);
            }
            if (a.s != null) {
                a.s.ac(b, c, d, DrawingMLMain.gg);
            }
            if (a.u != null) {
                a.u.ac(b, c, d, DrawingMLMain.gh);
            }
            if (a.a != null) {
                a.a.d(b, c, d, DrawingMLMain.ds);
            }
            d.k();
        }
        static bd(a, b, c, d, e) {
            CT_TextBodyProperties_DML.az(b, e, a.l, a.m, a.p, a.r, a.t, a.v, a.x, a.z, a.ab, a.ad, a.af, a.ah, a.aj, a.al, a.an, a.ap, a.ar, a.at, a.av);
            if (a.c != null) {
                DMLExtensions.az(a.c, b, c, d, DrawingMLMain.hs);
            }
            if (a.e != null) {
                DMLExtensions.a3(a.e, b, c, d, DrawingMLMain.ie);
            }
            if (a.a != null) {
                a.a.d(b, c, d, DrawingMLMain.ds);
            }
            if (a.j != null) {
                a.j.e(b, c, d, null);
            }
            if (a.h != null) {
                a.h.d(b, c, d, null);
            }
            d.k();
        }
        static bq(a, b, c, d, e) {
            CT_TextTabStop.g(b, e, a.a, a.c);
            d.k();
        }
        static bo(a, b, c, d, e) {
            d.p(e, null);
            if (a.c != null) {
                a.c.ac(b, c, d, DrawingMLMain.hm);
            }
            if (a.a != null) {
                a.a.aq(b, c, d, DrawingMLMain.dn);
            }
            if (a.f != null) {
                for (let f of fromEnum(a.f)) {
                    f.e(b, c, d, null);
                }
            }
            d.k();
        }
        static cx(a, b, c, d, e) {
            DMLUtils.ay(b, e, a);
        }
        static a5(a, b, c, d, e) {
            CT_ShapeProperties_DML.u(b, e, a.q);
            if (a.o != null) {
                DMLExtensions.cx(a.o, b, c, d, DrawingMLMain.j9);
            }
            if (a.n != null) {
                a.n.d(b, c, d, null);
            }
            if (a.l != null) {
                a.l.h(b, c, d, null);
            }
            if (a.a != null) {
                a.a.r(b, c, d, DrawingMLMain.fx);
            }
            if (a.j != null) {
                a.j.d(b, c, d, null);
            }
            if (a.e != null) {
                DMLExtensions.a3(a.e, b, c, d, DrawingMLMain.ie);
            }
            if (a.g != null) {
                DMLExtensions.a4(a.g, b, c, d, DrawingMLMain.iq);
            }
            if (a.c != null) {
                a.c.d(b, c, d, DrawingMLMain.ds);
            }
            d.k();
        }
        static af(a, b, c, d, e) {
            CT_FlatText.f(b, e, a.b);
            d.k();
        }
        static bl(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static bn(a, b, c, d, e) {
            CT_TextNormalAutofit.i(b, e, a.c, a.e);
            d.k();
        }
        static az(a, b, c, d, e) {
            CT_PresetTextShape.g(b, e, a.a);
            if (a.c != null) {
                d.p(DrawingMLMain.bh, "a");
                for (let f of fromEnum(a.c)) {
                    DMLExtensions.b7(f, b, c, d, DrawingMLMain.eh);
                }
                d.k();
            }
            d.k();
        }
        static bp(a, b, c, d, e) {
            d.p(e, "a");
            d.k();
        }
        static b8(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                for (let f of fromEnum(a.b)) {
                    DMLExtensions.b7(f, b, c, d, DrawingMLMain.eh);
                }
            }
            d.k();
        }
        static b7(a, b, c, d, e) {
            DMLUtils.ag(b, e, a);
        }
        static b2(a, b, c, d, e) {
            d.p(e, "a");
            if (a.a != null) {
                DMLExtensions.bx(a.a, b, c, d, DrawingMLMain.ay);
            }
            if (a.c != null) {
                DMLExtensions.b8(a.c, b, c, d, DrawingMLMain.bh);
            }
            if (a.b != null) {
                DMLExtensions.b1(a.b, b, c, d, DrawingMLMain.c3);
            }
            if (a.d != null) {
                DMLExtensions.b8(a.d, b, c, d, DrawingMLMain.ei);
            }
            if (a.f != null) {
                DMLExtensions.ck(a.f, b, c, d, DrawingMLMain.hh);
            }
            if (a.e != null) {
                DMLExtensions.b9(a.e, b, c, d, DrawingMLMain.hx);
            }
            d.k();
        }
        static cr(a, b, c, d, e) {
            DMLUtils.as(b, e, a);
            if (a.a != null) {
                DMLExtensions.b8(a.a, b, c, d, DrawingMLMain.bh);
            }
            d.k();
        }
        static bx(a, b, c, d, e) {
            d.p(e, "a");
            for (let f of fromEnum(a.b)) {
                let g = typeCast(CT_PolarAdjustHandle.$, f);
                let h = g == null ? typeCast(CT_XYAdjustHandle.$, f) : null;
                if (g != null) {
                    DMLExtensions.cn(g, b, c, d, DrawingMLMain.az);
                }
                if (h != null) {
                    DMLExtensions.cy(h, b, c, d, DrawingMLMain.a0);
                }
            }
            d.k();
        }
        static b1(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                for (let f of fromEnum(a.b)) {
                    DMLExtensions.b0(f, b, c, d, DrawingMLMain.c2);
                }
            }
            d.k();
        }
        static ck(a, b, c, d, e) {
            d.p(e, "a");
            if (a.b != null) {
                for (let f of fromEnum(a.b)) {
                    DMLExtensions.cj(f, b, c, d, DrawingMLMain.hg);
                }
            }
            d.k();
        }
        static cj(a, b, c, d, e) {
            DMLUtils.al(b, e, a);
            if (a.b != null) {
                for (let f of fromEnum(a.b)) {
                    let g = typeCast(ISaveToXLSX_$type, f);
                    if (g == null) {
                        continue;
                    }
                    g.saveX(b, d, g.elementName, c);
                }
            }
            d.k();
        }
        static b9(a, b, c, d, e) {
            DMLUtils.ah(b, a, e);
        }
        static cn(a, b, c, d, e) {
            DMLUtils.ao(b, a, e);
            if (a.a != null) {
                a.a.c(b, DrawingMLMain.hl);
            }
            d.k();
        }
        static cy(a, b, c, d, e) {
            DMLUtils.az(b, a, e);
            if (a.a != null) {
                a.a.c(b, DrawingMLMain.hl);
            }
            d.k();
        }
        static b0(a, b, c, d, e) {
            DMLUtils.ac(b, a, e);
            if (a.a != null) {
                a.a.c(b, DrawingMLMain.hl);
            }
            d.k();
        }
        static cm(a, b, c, d, e) {
            DMLUtils.an(b, a, e);
        }
        static a1(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                a.a.aq(b, c, d, DrawingMLMain.h8);
            }
            if (a.c != null) {
                DMLExtensions.cz(a.c, b, c, d, DrawingMLMain.jb, "a");
            }
            d.k();
        }
        static cz(a, b, c, d, e, f) {
            d.p(e, f);
            if (stringIsNullOrEmpty(a) == false) {
                d.u(a);
            }
            d.k();
        }
    }
    DMLExtensions.$t = /*@__PURE__*/ markType(DMLExtensions, 'DMLExtensions');
    return DMLExtensions;
})();
/**
 * @hidden
 */
export let CT_SeriesDataLabelsRange = /*@__PURE__*/ (() => {
    class CT_SeriesDataLabelsRange extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 612:
                    this.c = typeCast(String_$type, b);
                    break;
                case 405:
                    this.a = typeCast(CT_StrData.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_SeriesDataLabelsRange.$t = /*@__PURE__*/ markType(CT_SeriesDataLabelsRange, 'CT_SeriesDataLabelsRange', Base.$, [ISupportSetProperty_$type]);
    return CT_SeriesDataLabelsRange;
})();
/**
 * @hidden
 */
export let EG_BarChartShared = /*@__PURE__*/ (() => {
    class EG_BarChartShared extends Base {
        constructor() {
            super();
            this.b = null;
            this.c = null;
            this.a = null;
            this.f = null;
            this.d = null;
            this.f = new List$1(CT_BarSer.$, 0);
        }
        g(a, b, c, d) {
            if (this.b != null) {
                CT_BarDir.f(a, DrawingMLChart.a6, this.b.b);
                c.k();
            }
            if (this.c != null) {
                CT_BarGrouping.f(a, DrawingMLChart.cs, this.c.b);
                c.k();
            }
            if (this.a != null) {
                CT_Boolean.r(a, DrawingMLChart.gn, "c", CT_Boolean.b(this.a.k));
                c.k();
            }
            for (let e of fromEnum(this.f)) {
                DMLChartExtensions.bi(e, a, b, c, DrawingMLChart.fa);
            }
            if (this.d != null) {
                DMLChartExtensions.br(this.d, a, b, c, DrawingMLChart.b1);
            }
        }
        h(a, b) {
            switch (a) {
                case 101:
                    this.b = typeCast(CT_BarDir.$, b);
                    break;
                case 749:
                    this.c = typeCast(CT_BarGrouping.$, b);
                    break;
                case 1833:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1446:
                    this.f.add(typeCast(CT_BarSer.$, b));
                    break;
                case 406:
                    this.d = typeCast(CT_DLbls.$, b);
                    break;
                default: break;
            }
        }
        e(a) {
            switch (a) {
                case 101:
                case 749:
                case 1833:
                case 1446:
                case 406: return true;
            }
            return false;
        }
    }
    EG_BarChartShared.$t = /*@__PURE__*/ markType(EG_BarChartShared, 'EG_BarChartShared');
    return EG_BarChartShared;
})();
/**
 * @hidden
 */
export let EG_PieChartShared = /*@__PURE__*/ (() => {
    class EG_PieChartShared extends Base {
        constructor() {
            super();
            this.a = null;
            this.d = null;
            this.b = null;
            this.d = new List$1(CT_PieSer.$, 0);
        }
        e(a, b, c, d) {
            if (this.a != null) {
                CT_Boolean.r(a, DrawingMLChart.gn, "c", CT_Boolean.b(this.a.k));
                c.k();
            }
            for (let e of fromEnum(this.d)) {
                DMLChartExtensions.cn(e, a, b, c, DrawingMLChart.fa);
            }
            if (this.b != null) {
                DMLChartExtensions.br(this.b, a, b, c, DrawingMLChart.b1);
            }
        }
        f(a, b) {
            switch (a) {
                case 1833:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1446:
                    this.d.add(typeCast(CT_PieSer.$, b));
                    break;
                case 406:
                    this.b = typeCast(CT_DLbls.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 1833:
                case 1446:
                case 406: return true;
            }
            return false;
        }
    }
    EG_PieChartShared.$t = /*@__PURE__*/ markType(EG_PieChartShared, 'EG_PieChartShared');
    return EG_PieChartShared;
})();
/**
 * @hidden
 */
export let EG_DLblShared = /*@__PURE__*/ (() => {
    class EG_DLblShared extends Base {
        constructor() {
            super();
            this.h = null;
            this.i = null;
            this.j = null;
            this.g = null;
            this.c = null;
            this.f = null;
            this.b = null;
            this.e = null;
            this.d = null;
            this.a = null;
            this.l = null;
        }
        n(a, b) {
            switch (a) {
                case 1088:
                    this.h = typeCast(CT_NumFmt_Chart.$, b);
                    break;
                case 1570:
                    this.i = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.j = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 404:
                    this.g = typeCast(CT_DLblPos.$, b);
                    break;
                case 1492:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 1498:
                    this.f = typeCast(CT_Boolean.$, b);
                    break;
                case 1485:
                    this.b = typeCast(CT_Boolean.$, b);
                    break;
                case 1497:
                    this.e = typeCast(CT_Boolean.$, b);
                    break;
                case 1495:
                    this.d = typeCast(CT_Boolean.$, b);
                    break;
                case 1484:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1445:
                    this.l = typeCast(String_$type, b);
                    break;
                default: break;
            }
        }
        k(a) {
            switch (a) {
                case 1088:
                case 1570:
                case 1783:
                case 404:
                case 1492:
                case 1498:
                case 1485:
                case 1497:
                case 1495:
                case 1484:
                case 1445: return true;
            }
            return false;
        }
        m(a, b, c, d) {
            if (this.h != null) {
                DMLChartExtensions.ce(this.h, a, b, c, DrawingMLChart.d2);
            }
            if (this.i != null) {
                DMLExtensions.a5(this.i, a, b, c, DrawingMLChart.fx);
            }
            if (this.j != null) {
                this.j.e(a, b, c, DrawingMLChart.gf);
            }
            if (this.g != null) {
                DMLChartExtensions.bq(this.g, a, b, c, DrawingMLChart.b0);
            }
            if (this.c != null) {
                this.c.q(a, b, c, DrawingMLChart.fk, "c");
            }
            if (this.f != null) {
                this.f.q(a, b, c, DrawingMLChart.fp, "c");
            }
            if (this.b != null) {
                this.b.q(a, b, c, DrawingMLChart.ff, "c");
            }
            if (this.e != null) {
                this.e.q(a, b, c, DrawingMLChart.fo, "c");
            }
            if (this.d != null) {
                this.d.q(a, b, c, DrawingMLChart.fn, "c");
            }
            if (this.a != null) {
                this.a.q(a, b, c, DrawingMLChart.fe, "c");
            }
            if (this.l != null) {
                DMLExtensions.cz(this.l, a, b, c, DrawingMLChart.e9, "c");
            }
        }
    }
    EG_DLblShared.$t = /*@__PURE__*/ markType(EG_DLblShared, 'EG_DLblShared');
    return EG_DLblShared;
})();
/**
 * @hidden
 */
export let Group_DLbl = /*@__PURE__*/ (() => {
    class Group_DLbl extends Base {
        constructor() {
            super();
            this.c = null;
            this.a = null;
            this.b = null;
        }
        get d() {
            if (this.c == null) {
                this.c = new EG_DLblShared();
            }
            return this.c;
        }
        g(a, b) {
            switch (a) {
                case 876:
                    this.a = typeCast(CT_Layout.$, b);
                    break;
                case 1776:
                    this.b = typeCast(CT_Tx.$, b);
                    break;
                default:
                    this.d.n(a, b);
                    break;
            }
        }
        e(a) {
            switch (a) {
                case 876:
                case 1776: return true;
                default: return this.d.k(a);
            }
        }
        f(a, b, c, d) {
            if (this.a != null) {
                DMLChartExtensions.by(this.a, a, b, c, DrawingMLChart.c3);
            }
            if (this.b != null) {
                DMLChartExtensions.c6(this.b, a, b, c, DrawingMLChart.ge);
            }
            this.d.m(a, b, c, null);
        }
    }
    Group_DLbl.$t = /*@__PURE__*/ markType(Group_DLbl, 'Group_DLbl');
    return Group_DLbl;
})();
/**
 * @hidden
 */
export let Group_DLbls = /*@__PURE__*/ (() => {
    class Group_DLbls extends Base {
        constructor() {
            super();
            this.c = null;
            this.a = null;
            this.b = null;
        }
        get d() {
            if (this.c == null) {
                this.c = new EG_DLblShared();
            }
            return this.c;
        }
        f(a, b, c, d) {
            this.d.m(a, b, c, null);
            if (this.a != null) {
                this.a.q(a, b, c, DrawingMLChart.fj, "c");
            }
            if (this.b != null) {
                DMLChartExtensions.bk(this.b, a, b, c, DrawingMLChart.fj);
            }
        }
        g(a, b) {
            switch (a) {
                case 1491:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 886:
                    this.b = typeCast(CT_ChartLines.$, b);
                    break;
                default:
                    this.d.n(a, b);
                    break;
            }
        }
        e(a) {
            switch (a) {
                case 1491:
                case 886: return true;
                default: return this.d.k(a);
            }
        }
    }
    Group_DLbls.$t = /*@__PURE__*/ markType(Group_DLbls, 'Group_DLbls');
    return Group_DLbls;
})();
/**
 * @hidden
 */
export let EG_LegendEntryData = /*@__PURE__*/ (() => {
    class EG_LegendEntryData extends Base {
        constructor() {
            super();
            this.a = null;
        }
        c(a, b, c, d) {
            if (this.a != null) {
                this.a.e(a, b, c, DrawingMLChart.gf);
            }
        }
        d(a, b) {
            switch (a) {
                case 1783:
                    this.a = typeCast(CT_TextBody_DML.$, b);
                    break;
                default: break;
            }
        }
        b(a) {
            switch (a) {
                case 1783: return true;
            }
            return false;
        }
    }
    EG_LegendEntryData.$t = /*@__PURE__*/ markType(EG_LegendEntryData, 'EG_LegendEntryData');
    return EG_LegendEntryData;
})();
/**
 * @hidden
 */
export let EG_AxShared = /*@__PURE__*/ (() => {
    class EG_AxShared extends Base {
        constructor() {
            super();
            this.c = null;
            this.j = null;
            this.a = null;
            this.e = null;
            this.f = null;
            this.g = null;
            this.n = null;
            this.i = null;
            this.l = null;
            this.m = null;
            this.k = null;
            this.o = null;
            this.p = null;
            this.d = null;
            this.h = null;
            this.b = null;
        }
        r(a, b, c, d) {
            if (this.c != null) {
                this.c.i(a, b, c, DrawingMLChart.ay, "c");
            }
            if (this.j != null) {
                DMLChartExtensions.co(this.j, a, b, c, DrawingMLChart.e3);
            }
            if (this.a != null) {
                this.a.q(a, b, c, DrawingMLChart.bs, "c");
            }
            if (this.e != null) {
                DMLChartExtensions.bf(this.e, a, b, c, DrawingMLChart.az);
            }
            if (this.f != null) {
                DMLChartExtensions.bk(this.f, a, b, c, DrawingMLChart.dg);
            }
            if (this.g != null) {
                DMLChartExtensions.bk(this.g, a, b, c, DrawingMLChart.dp);
            }
            if (this.n != null) {
                DMLChartExtensions.c2(this.n, a, b, c, DrawingMLChart.ga);
            }
            if (this.i != null) {
                DMLChartExtensions.ce(this.i, a, b, c, DrawingMLChart.d2);
            }
            if (this.l != null) {
                DMLChartExtensions.c0(this.l, a, b, c, DrawingMLChart.dh);
            }
            if (this.m != null) {
                DMLChartExtensions.c0(this.m, a, b, c, DrawingMLChart.dq);
            }
            if (this.k != null) {
                DMLChartExtensions.cz(this.k, a, b, c, DrawingMLChart.f7);
            }
            if (this.o != null) {
                DMLExtensions.a5(this.o, a, b, c, DrawingMLChart.fx);
            }
            if (this.p != null) {
                this.p.e(a, b, c, DrawingMLChart.gf);
            }
            if (this.d != null) {
                this.d.i(a, b, c, DrawingMLChart.bj, "c");
            }
            if (this.h != null) {
                DMLChartExtensions.bm(this.h, a, b, c, DrawingMLChart.bl);
            }
            if (this.b != null) {
                this.b.i(a, b, c, DrawingMLChart.bm, "c");
            }
        }
        s(a, b) {
            switch (a) {
                case 81:
                    this.c = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1418:
                    this.j = typeCast(CT_Scaling.$, b);
                    break;
                case 467:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 82:
                    this.e = typeCast(CT_AxPos.$, b);
                    break;
                case 963:
                    this.f = typeCast(CT_ChartLines.$, b);
                    break;
                case 1011:
                    this.g = typeCast(CT_ChartLines.$, b);
                    break;
                case 1745:
                    this.n = typeCast(CT_Title.$, b);
                    break;
                case 1088:
                    this.i = typeCast(CT_NumFmt_Chart.$, b);
                    break;
                case 964:
                    this.l = typeCast(CT_TickMark.$, b);
                    break;
                case 1012:
                    this.m = typeCast(CT_TickMark.$, b);
                    break;
                case 1724:
                    this.k = typeCast(CT_TickLblPos.$, b);
                    break;
                case 1570:
                    this.o = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.p = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 359:
                    this.d = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 361:
                    this.h = typeCast(CT_Crosses.$, b);
                    break;
                case 362:
                    this.b = typeCast(CT_Double.$, b);
                    break;
                default: break;
            }
        }
        q(a) {
            switch (a) {
                case 81:
                case 1418:
                case 467:
                case 82:
                case 963:
                case 1011:
                case 1745:
                case 1088:
                case 964:
                case 1012:
                case 1724:
                case 1570:
                case 1783:
                case 359:
                case 361:
                case 362: return true;
            }
            return false;
        }
    }
    EG_AxShared.$t = /*@__PURE__*/ markType(EG_AxShared, 'EG_AxShared');
    return EG_AxShared;
})();
/**
 * @hidden
 */
export let EG_SerShared = /*@__PURE__*/ (() => {
    class EG_SerShared extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
            this.c = null;
            this.d = null;
        }
        f(a, b, c, d) {
            if (this.a != null) {
                this.a.i(a, b, c, DrawingMLChart.cz, "c");
            }
            if (this.b != null) {
                this.b.i(a, b, c, DrawingMLChart.d9, "c");
            }
            if (this.c != null) {
                DMLChartExtensions.cs(this.c, a, b, c, DrawingMLChart.ge);
            }
            if (this.d != null) {
                DMLExtensions.a5(this.d, a, b, c, DrawingMLChart.fx);
            }
        }
        g(a, b) {
            switch (a) {
                case 817:
                    this.a = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1135:
                    this.b = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1776:
                    this.c = typeCast(CT_SerTx.$, b);
                    break;
                case 1570:
                    this.d = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                default: break;
            }
        }
        e(a) {
            switch (a) {
                case 817:
                case 1135:
                case 1776:
                case 1570: return true;
            }
            return false;
        }
    }
    EG_SerShared.$t = /*@__PURE__*/ markType(EG_SerShared, 'EG_SerShared');
    return EG_SerShared;
})();
/**
 * @hidden
 */
export let EG_AreaChartShared = /*@__PURE__*/ (() => {
    class EG_AreaChartShared extends Base {
        constructor() {
            super();
            this.d = null;
            this.a = null;
            this.f = null;
            this.c = null;
            this.b = null;
            this.f = new List$1(CT_AreaSer.$, 0);
        }
        g(a, b, c, d) {
            if (this.d != null) {
                DMLChartExtensions.bx(this.d, a, b, c, DrawingMLChart.cs);
            }
            if (this.a != null) {
                this.a.q(a, b, c, DrawingMLChart.gn, "c");
            }
            for (let e of fromEnum(this.f)) {
                DMLChartExtensions.bc(e, a, b, c, DrawingMLChart.fa);
            }
            if (this.c != null) {
                DMLChartExtensions.br(this.c, a, b, c, DrawingMLChart.b1);
            }
            if (this.b != null) {
                DMLChartExtensions.bk(this.b, a, b, c, DrawingMLChart.b5);
            }
        }
        h(a, b) {
            switch (a) {
                case 749:
                    this.d = typeCast(CT_Grouping.$, b);
                    break;
                case 1833:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1446:
                    this.f.add(typeCast(CT_AreaSer.$, b));
                    break;
                case 406:
                    this.c = typeCast(CT_DLbls.$, b);
                    break;
                case 543:
                    this.b = typeCast(CT_ChartLines.$, b);
                    break;
                default: break;
            }
        }
        e(a) {
            switch (a) {
                case 749:
                case 1833:
                case 1446:
                case 406:
                case 543: return true;
            }
            return false;
        }
    }
    EG_AreaChartShared.$t = /*@__PURE__*/ markType(EG_AreaChartShared, 'EG_AreaChartShared');
    return EG_AreaChartShared;
})();
/**
 * @hidden
 */
export let EG_SurfaceChartShared = /*@__PURE__*/ (() => {
    class EG_SurfaceChartShared extends Base {
        constructor() {
            super();
            this.a = null;
            this.d = null;
            this.b = null;
            this.d = new List$1(CT_SurfaceSer.$, 0);
        }
        e(a, b, c, d) {
            if (this.a != null) {
                this.a.q(a, b, c, DrawingMLChart.gq, "c");
            }
            if (this.d != null && this.d.count > 0) {
                for (let e of fromEnum(this.d)) {
                    DMLChartExtensions.cy(e, a, b, c, DrawingMLChart.fa);
                }
            }
            if (this.b != null) {
                DMLChartExtensions.bh(this.b, a, b, c, DrawingMLChart.a3);
            }
        }
        f(a, b) {
            switch (a) {
                case 1869:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1446:
                    this.d.add(typeCast(CT_SurfaceSer.$, b));
                    break;
                case 97:
                    this.b = typeCast(CT_BandFmts.$, b);
                    break;
                default: break;
            }
        }
        c(a) {
            switch (a) {
                case 1869:
                case 1446:
                case 97: return true;
            }
            return false;
        }
    }
    EG_SurfaceChartShared.$t = /*@__PURE__*/ markType(EG_SurfaceChartShared, 'EG_SurfaceChartShared');
    return EG_SurfaceChartShared;
})();
/**
 * @hidden
 */
export let EG_LineChartShared = /*@__PURE__*/ (() => {
    class EG_LineChartShared extends Base {
        constructor() {
            super();
            this.d = null;
            this.a = null;
            this.f = null;
            this.c = null;
            this.b = null;
            this.f = new List$1(CT_LineSer.$, 0);
        }
        g(a, b, c, d) {
            if (this.d != null) {
                DMLChartExtensions.bx(this.d, a, b, c, DrawingMLChart.cs);
            }
            if (this.a != null) {
                this.a.q(a, b, c, DrawingMLChart.gn, "c");
            }
            for (let e of fromEnum(this.f)) {
                DMLChartExtensions.b3(e, a, b, c, DrawingMLChart.fa);
            }
            if (this.c != null) {
                DMLChartExtensions.br(this.c, a, b, c, DrawingMLChart.b1);
            }
            if (this.b != null) {
                DMLChartExtensions.bk(this.b, a, b, c, DrawingMLChart.b5);
            }
        }
        h(a, b) {
            switch (a) {
                case 749:
                    this.d = typeCast(CT_Grouping.$, b);
                    break;
                case 1833:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1446:
                    this.f.add(typeCast(CT_LineSer.$, b));
                    break;
                case 406:
                    this.c = typeCast(CT_DLbls.$, b);
                    break;
                case 543:
                    this.b = typeCast(CT_ChartLines.$, b);
                    break;
                default: break;
            }
        }
        e(a) {
            switch (a) {
                case 749:
                case 1833:
                case 1446:
                case 406:
                case 543: return true;
            }
            return false;
        }
    }
    EG_LineChartShared.$t = /*@__PURE__*/ markType(EG_LineChartShared, 'EG_LineChartShared');
    return EG_LineChartShared;
})();
/**
 * @hidden
 */
export let CT_ChartSpace = /*@__PURE__*/ (() => {
    class CT_ChartSpace extends Base {
        constructor() {
            super();
            this.c = null;
            this.s = null;
            this.e = null;
            this.q = null;
            this.u = null;
            this.k = null;
            this.o = null;
            this.g = null;
            this.w = null;
            this.y = null;
            this.i = null;
            this.m = null;
            this.aa = null;
            this.ac = null;
            this.a = null;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get z() {
            return this.aa;
        }
        set z(a) {
            this.aa = a;
        }
        get ab() {
            return this.ac;
        }
        set ab(a) {
            this.ac = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 439:
                    this.b = typeCast(CT_Boolean.$, b);
                    break;
                case 869:
                    this.r = typeCast(CT_TextLanguageID.$, b);
                    break;
                case 1374:
                    this.d = typeCast(CT_Boolean.$, b);
                    break;
                case 1618:
                    this.p = typeCast(CT_Style.$, b);
                    break;
                case 283:
                    this.t = typeCast(CT_ColorMapping.$, b);
                    break;
                case 1223:
                    this.j = typeCast(CT_PivotSource.$, b);
                    break;
                case 1271:
                    this.n = typeCast(CT_Protection.$, b);
                    break;
                case 261:
                    this.f = typeCast(CT_Chart.$, b);
                    break;
                case 1570:
                    this.v = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.x = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 604:
                    this.h = typeCast(CT_ExternalData.$, b);
                    break;
                case 1258:
                    this.l = typeCast(CT_PrintSettings.$, b);
                    break;
                case 1816:
                    this.z = typeCast(CT_RelId.$, b);
                    break;
                case 601:
                    this.ab = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ChartSpace.$t = /*@__PURE__*/ markType(CT_ChartSpace, 'CT_ChartSpace', Base.$, [ISupportSetProperty_$type]);
    return CT_ChartSpace;
})();
/**
 * @hidden
 */
export let CT_ExternalData = /*@__PURE__*/ (() => {
    class CT_ExternalData extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        static f(a, b, c) {
            b = toNullable(Boolean_$type, null);
            c = null;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "http://schemas.openxmlformats.org/officeDocument/2006/relationships:id":
                        c = d.d;
                        break;
                    case DrawingMLChart.ax:
                        b = toNullable(Boolean_$type, ST_OnOff.e(d.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c
            };
        }
        static g(a, b, c) {
            a.ad.p(b, "c");
            let d = null;
            let e = null;
            if (c != null) {
                e = "http://schemas.openxmlformats.org/officeDocument/2006/relationships:id";
                d = c;
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 79:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ExternalData.$t = /*@__PURE__*/ markType(CT_ExternalData, 'CT_ExternalData', Base.$, [ISupportSetProperty_$type]);
    return CT_ExternalData;
})();
/**
 * @hidden
 */
export let CT_LegendEntry = /*@__PURE__*/ (() => {
    class CT_LegendEntry extends Base {
        constructor() {
            super();
            this.c = null;
            this.i = null;
            this.g = null;
            this.d = null;
            this.a = null;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get item() {
            return this.i;
        }
        set item(a) {
            this.i = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get e() {
            if (this.d == null) {
                this.d = new EG_LegendEntryData();
            }
            return this.d;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 817:
                    this.b = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 467:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 601:
                    this.f = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.e.b(a)) {
                        this.e.d(a, b);
                        return;
                    }
                    break;
            }
        }
    }
    CT_LegendEntry.$t = /*@__PURE__*/ markType(CT_LegendEntry, 'CT_LegendEntry', Base.$, [ISupportSetProperty_$type]);
    return CT_LegendEntry;
})();
/**
 * @hidden
 */
export let CT_Legend = /*@__PURE__*/ (() => {
    class CT_Legend extends Base {
        constructor() {
            super();
            this.f = null;
            this.n = null;
            this.d = null;
            this.b = null;
            this.h = null;
            this.j = null;
            this.l = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 892:
                    this.e = typeCast(CT_LegendPos.$, b);
                    break;
                case 891:
                    this.m.add(typeCast(CT_LegendEntry.$, b));
                    break;
                case 876:
                    this.c = typeCast(CT_Layout.$, b);
                    break;
                case 1150:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1570:
                    this.g = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.i = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 601:
                    this.k = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Legend.$t = /*@__PURE__*/ markType(CT_Legend, 'CT_Legend', Base.$, [ISupportSetProperty_$type]);
    return CT_Legend;
})();
/**
 * @hidden
 */
export let CT_Layout = /*@__PURE__*/ (() => {
    class CT_Layout extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 968:
                    this.a = typeCast(CT_ManualLayout.$, b);
                    break;
                case 601:
                    this.c = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Layout.$t = /*@__PURE__*/ markType(CT_Layout, 'CT_Layout', Base.$, [ISupportSetProperty_$type]);
    return CT_Layout;
})();
/**
 * @hidden
 */
export let CT_ManualLayout = /*@__PURE__*/ (() => {
    class CT_ManualLayout extends Base {
        constructor() {
            super();
            this.r = null;
            this.n = null;
            this.p = null;
            this.l = null;
            this.j = null;
            this.f = null;
            this.h = null;
            this.d = null;
            this.b = null;
            this.t = null;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get s() {
            return this.t;
        }
        set s(a) {
            this.t = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 882:
                    this.q = typeCast(CT_LayoutTarget.$, b);
                    break;
                case 1889:
                    this.m = typeCast(CT_LayoutMode.$, b);
                    break;
                case 1897:
                    this.o = typeCast(CT_LayoutMode.$, b);
                    break;
                case 1850:
                    this.k = typeCast(CT_LayoutMode.$, b);
                    break;
                case 764:
                    this.i = typeCast(CT_LayoutMode.$, b);
                    break;
                case 1888:
                    this.e = typeCast(CT_Double.$, b);
                    break;
                case 1896:
                    this.g = typeCast(CT_Double.$, b);
                    break;
                case 1849:
                    this.c = typeCast(CT_Double.$, b);
                    break;
                case 762:
                    this.a = typeCast(CT_Double.$, b);
                    break;
                case 601:
                    this.s = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ManualLayout.$t = /*@__PURE__*/ markType(CT_ManualLayout, 'CT_ManualLayout', Base.$, [ISupportSetProperty_$type]);
    return CT_ManualLayout;
})();
/**
 * @hidden
 */
export let CT_DTable = /*@__PURE__*/ (() => {
    class CT_DTable extends Base {
        constructor() {
            super();
            this.b = null;
            this.h = null;
            this.f = null;
            this.d = null;
            this.j = null;
            this.l = null;
            this.n = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1489:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1499:
                    this.g = typeCast(CT_Boolean.$, b);
                    break;
                case 1494:
                    this.e = typeCast(CT_Boolean.$, b);
                    break;
                case 1490:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 1570:
                    this.i = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.k = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 601:
                    this.m = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DTable.$t = /*@__PURE__*/ markType(CT_DTable, 'CT_DTable', Base.$, [ISupportSetProperty_$type]);
    return CT_DTable;
})();
/**
 * @hidden
 */
export let IAxis_$type = /*@__PURE__*/ new Type(null, 'IAxis');
/**
 * @hidden
 */
export let CT_SerAx = /*@__PURE__*/ (() => {
    class CT_SerAx extends Base {
        constructor() {
            super();
            this.j = null;
            this.b = null;
            this.d = null;
            this.h = null;
            this.e = null;
        }
        get item() {
            return this.j;
        }
        set item(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new EG_AxShared();
            }
            return this.e;
        }
        setProperty(a, b) {
            switch (a) {
                case 1725:
                    this.a = typeCast(CT_Skip.$, b);
                    break;
                case 1726:
                    this.c = typeCast(CT_Skip.$, b);
                    break;
                case 601:
                    this.g = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.f.q(a)) {
                        this.f.s(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get axisType() {
            return 3;
        }
        get id() {
            return this.f.c.g;
        }
        get crossAxId() {
            return CT_UnsignedInt.e(this.f.d);
        }
        get sharedProps() {
            return this.f;
        }
        get axisCrossesBetween() {
            return false;
        }
        get baseUnit() {
            return null;
        }
        get dispUnits() {
            return null;
        }
        get tickLabelAlignment() {
            return unwrapNullable(this._tickLabelAlignment$i);
        }
        get _tickLabelAlignment$i() {
            return toNullable(ST_LblAlgn_$type, null);
        }
        get tickLabelMultiLevel() {
            return unwrapNullable(this._tickLabelMultiLevel$i);
        }
        get _tickLabelMultiLevel$i() {
            return toNullable(Boolean_$type, null);
        }
        get tickLabelSkip() {
            return unwrapNullable(this._tickLabelSkip$i);
        }
        get _tickLabelSkip$i() {
            return this.a != null ? toNullable(Number_$type, this.a.b) : toNullable(Number_$type, null);
        }
        get tickMarkSkipValue() {
            return unwrapNullable(this._tickMarkSkipValue$i);
        }
        get _tickMarkSkipValue$i() {
            return this.c != null ? toNullable(Number_$type, this.c.b) : toNullable(Number_$type, null);
        }
        get tickLabelOffset() {
            return unwrapNullable(this._tickLabelOffset$i);
        }
        get _tickLabelOffset$i() {
            return toNullable(Number_$type, null);
        }
        get categoryType() {
            return unwrapNullable(this._categoryType$i);
        }
        get _categoryType$i() {
            return toNullable(CategoryType_$type, null);
        }
        save(a, b, c) {
            c.p(DrawingMLChart.fb, null);
            if (this.f != null) {
                this.f.r(a, b, c, null);
            }
            if (this.a != null) {
                DMLChartExtensions.cu(this.a, a, b, c, DrawingMLChart.f8);
            }
            if (this.c != null) {
                DMLChartExtensions.cu(this.c, a, b, c, DrawingMLChart.f9);
            }
            c.k();
        }
        tryGetMajorMinorUnit(major, minor) {
            arguments[0] = wrapNullable(Number_$type, arguments[0]);
            arguments[1] = wrapNullable(Number_$type, arguments[1]);
            return this._tryGetMajorMinorUnit$i.apply(this, arguments);
        }
        _tryGetMajorMinorUnit$i(a, b) {
            b = a = toNullable(Number_$type, null);
            return {
                ret: false,
                p0: a,
                p1: b
            };
        }
        tryGetMajorMinorTimeUnit(major, minor) {
            arguments[0] = wrapNullable(ST_TimeUnit_$type, arguments[0]);
            arguments[1] = wrapNullable(ST_TimeUnit_$type, arguments[1]);
            return this._tryGetMajorMinorTimeUnit$i.apply(this, arguments);
        }
        _tryGetMajorMinorTimeUnit$i(a, b) {
            b = a = toNullable(ST_TimeUnit_$type, null);
            return {
                ret: false,
                p0: a,
                p1: b
            };
        }
    }
    CT_SerAx.$t = /*@__PURE__*/ markType(CT_SerAx, 'CT_SerAx', Base.$, [ISupportSetProperty_$type, IAxis_$type]);
    return CT_SerAx;
})();
/**
 * @hidden
 */
export let CT_Scaling = /*@__PURE__*/ (() => {
    class CT_Scaling extends Base {
        constructor() {
            super();
            this.f = null;
            this.h = null;
            this.b = null;
            this.d = null;
            this.j = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 934:
                    this.e = typeCast(CT_LogBase.$, b);
                    break;
                case 1137:
                    this.g = typeCast(CT_Orientation.$, b);
                    break;
                case 984:
                    this.a = typeCast(CT_Double.$, b);
                    break;
                case 1008:
                    this.c = typeCast(CT_Double.$, b);
                    break;
                case 601:
                    this.i = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Scaling.$t = /*@__PURE__*/ markType(CT_Scaling, 'CT_Scaling', Base.$, [ISupportSetProperty_$type]);
    return CT_Scaling;
})();
/**
 * @hidden
 */
export let CT_ChartLines = /*@__PURE__*/ (() => {
    class CT_ChartLines extends Base {
        constructor() {
            super();
            this.b = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1570:
                    this.a = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ChartLines.$t = /*@__PURE__*/ markType(CT_ChartLines, 'CT_ChartLines', Base.$, [ISupportSetProperty_$type]);
    return CT_ChartLines;
})();
/**
 * @hidden
 */
export let CT_Title = /*@__PURE__*/ (() => {
    class CT_Title extends Base {
        constructor() {
            super();
            this.f = null;
            this.d = null;
            this.b = null;
            this.h = null;
            this.j = null;
            this.l = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1776:
                    this.e = typeCast(CT_Tx.$, b);
                    break;
                case 876:
                    this.c = typeCast(CT_Layout.$, b);
                    break;
                case 1150:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1570:
                    this.g = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.i = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 601:
                    this.k = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Title.$t = /*@__PURE__*/ markType(CT_Title, 'CT_Title', Base.$, [ISupportSetProperty_$type]);
    return CT_Title;
})();
/**
 * @hidden
 */
export let CT_Tx = /*@__PURE__*/ (() => {
    class CT_Tx extends Base {
        constructor() {
            super(...arguments);
            this.d = null;
            this.a = null;
            this.b = null;
        }
        get item() {
            return this.d;
        }
        set item(a) {
            this.d = a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 1606:
                    this.a = typeCast(CT_StrRef.$, b);
                    break;
                case 1362:
                    this.b = typeCast(CT_TextBody_DML.$, b);
                    break;
                default: break;
            }
        }
    }
    CT_Tx.$t = /*@__PURE__*/ markType(CT_Tx, 'CT_Tx', Base.$, [ISupportSetProperty_$type]);
    return CT_Tx;
})();
/**
 * @hidden
 */
export let CT_StrRef = /*@__PURE__*/ (() => {
    class CT_StrRef extends Base {
        constructor() {
            super();
            this.f = null;
            this.b = null;
            this.d = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 612:
                    this.e = typeCast(String_$type, b);
                    break;
                case 1603:
                    this.a = typeCast(CT_StrData.$, b);
                    break;
                case 601:
                    this.c = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_StrRef.$t = /*@__PURE__*/ markType(CT_StrRef, 'CT_StrRef', Base.$, [ISupportSetProperty_$type]);
    return CT_StrRef;
})();
/**
 * @hidden
 */
export let CT_StrData = /*@__PURE__*/ (() => {
    class CT_StrData extends Base {
        constructor() {
            super();
            this.c = null;
            this.g = null;
            this.e = null;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1278:
                    this.b = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1277:
                    this.f.add(typeCast(CT_StrVal.$, b));
                    break;
                case 601:
                    this.d = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static a(a, b, c) {
            let d = b != null ? b.g : 0;
            if (d == 0) {
                return new Array(0);
            }
            let e = new Dictionary$2(Number_$type, Base.$, 0);
            for (let f of fromEn(c)) {
                let g = 0;
                let h = null;
                let i = a.getIndexAndValue(f, g, h);
                g = i.p1;
                h = i.p2;
                e.addItem(g, h);
            }
            let j = new Array(d);
            for (let k = 0; k < d; k++) {
                let l = null;
                if (((() => { let m = e.tryGetValue(k, l); l = m.p1; return m.ret; })())) {
                    j[k] = l;
                }
                else {
                    j[k] = null;
                }
            }
            return j;
        }
        getIndexAndValue(a, b, c) {
            let d = typeCast(CT_StrVal.$, a);
            b = d.d;
            c = d.b;
            return {
                p1: b,
                p2: c
            };
        }
        getValues() {
            return CT_StrData.a(this, this.b, this.f);
        }
    }
    CT_StrData.$t = /*@__PURE__*/ markType(CT_StrData, 'CT_StrData', Base.$, [ISupportSetProperty_$type, IProvideXValuesData_$type]);
    return CT_StrData;
})();
/**
 * @hidden
 */
export let CT_DateAx = /*@__PURE__*/ (() => {
    class CT_DateAx extends Base {
        constructor() {
            super();
            this.t = null;
            this.b = null;
            this.h = null;
            this.j = null;
            this.d = null;
            this.l = null;
            this.f = null;
            this.n = null;
            this.r = null;
            this.o = null;
        }
        get item() {
            return this.t;
        }
        set item(a) {
            this.t = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get p() {
            if (this.o == null) {
                this.o = new EG_AxShared();
            }
            return this.o;
        }
        setProperty(a, b) {
            switch (a) {
                case 69:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 884:
                    this.g = typeCast(CT_LblOffset.$, b);
                    break;
                case 104:
                    this.i = typeCast(CT_TimeUnit.$, b);
                    break;
                case 967:
                    this.c = typeCast(CT_AxisUnit.$, b);
                    break;
                case 966:
                    this.k = typeCast(CT_TimeUnit.$, b);
                    break;
                case 1015:
                    this.e = typeCast(CT_AxisUnit.$, b);
                    break;
                case 1014:
                    this.m = typeCast(CT_TimeUnit.$, b);
                    break;
                case 601:
                    this.q = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.p.q(a)) {
                        this.p.s(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get axisType() {
            return 1;
        }
        get id() {
            return this.p.c.g;
        }
        get crossAxId() {
            return CT_UnsignedInt.e(this.p.d);
        }
        get sharedProps() {
            return this.p;
        }
        get axisCrossesBetween() {
            return false;
        }
        get baseUnit() {
            let a = toNullable(ST_TimeUnit_$type, null);
            if (this.i != null) {
                a = toNullable(ST_TimeUnit_$type, this.i.b);
            }
            let b = this.a != null ? this.a.k : true;
            return Tuple.a(Nullable$1.$.specialize(ST_TimeUnit_$type), Boolean_$type, a, b);
        }
        get dispUnits() {
            return null;
        }
        get tickLabelAlignment() {
            return unwrapNullable(this._tickLabelAlignment$i);
        }
        get _tickLabelAlignment$i() {
            return toNullable(ST_LblAlgn_$type, null);
        }
        get tickLabelMultiLevel() {
            return unwrapNullable(this._tickLabelMultiLevel$i);
        }
        get _tickLabelMultiLevel$i() {
            return toNullable(Boolean_$type, null);
        }
        get tickLabelSkip() {
            return unwrapNullable(this._tickLabelSkip$i);
        }
        get _tickLabelSkip$i() {
            return toNullable(Number_$type, null);
        }
        get tickMarkSkipValue() {
            return unwrapNullable(this._tickMarkSkipValue$i);
        }
        get _tickMarkSkipValue$i() {
            return toNullable(Number_$type, null);
        }
        get tickLabelOffset() {
            return unwrapNullable(this._tickLabelOffset$i);
        }
        get _tickLabelOffset$i() {
            return this.g != null ? toNullable(Number_$type, this.g.c) : toNullable(Number_$type, null);
        }
        get categoryType() {
            return unwrapNullable(this._categoryType$i);
        }
        get _categoryType$i() {
            return toNullable(CategoryType_$type, 3);
        }
        save(a, b, c) {
            c.p(DrawingMLChart.br, null);
            if (this.p != null) {
                this.p.r(a, b, c, null);
            }
            if (this.a != null) {
                this.a.q(a, b, c, DrawingMLChart.av, "c");
            }
            if (this.g != null) {
                DMLChartExtensions.b2(this.g, a, b, c, DrawingMLChart.c6);
            }
            if (this.i != null) {
                DMLChartExtensions.c1(this.i, a, b, c, DrawingMLChart.a7);
            }
            if (this.c != null) {
                DMLChartExtensions.be(this.c, a, b, c, DrawingMLChart.dj);
            }
            if (this.k != null) {
                DMLChartExtensions.c1(this.k, a, b, c, DrawingMLChart.di);
            }
            if (this.e != null) {
                DMLChartExtensions.be(this.e, a, b, c, DrawingMLChart.ds);
            }
            if (this.m != null) {
                DMLChartExtensions.c1(this.m, a, b, c, DrawingMLChart.dr);
            }
            c.k();
        }
        tryGetMajorMinorUnit(major, minor) {
            arguments[0] = wrapNullable(Number_$type, arguments[0]);
            arguments[1] = wrapNullable(Number_$type, arguments[1]);
            return this._tryGetMajorMinorUnit$i.apply(this, arguments);
        }
        _tryGetMajorMinorUnit$i(a, b) {
            a = toNullable(Number_$type, null);
            b = toNullable(Number_$type, null);
            if (this.c != null) {
                a = toNullable(Number_$type, this.c.a);
            }
            if (this.e != null) {
                b = toNullable(Number_$type, this.e.a);
            }
            return {
                ret: true,
                p0: a,
                p1: b
            };
        }
        tryGetMajorMinorTimeUnit(major, minor) {
            arguments[0] = wrapNullable(ST_TimeUnit_$type, arguments[0]);
            arguments[1] = wrapNullable(ST_TimeUnit_$type, arguments[1]);
            return this._tryGetMajorMinorTimeUnit$i.apply(this, arguments);
        }
        _tryGetMajorMinorTimeUnit$i(a, b) {
            b = a = toNullable(ST_TimeUnit_$type, null);
            if (this.k != null) {
                a = toNullable(ST_TimeUnit_$type, this.k.b);
            }
            if (this.m != null) {
                b = toNullable(ST_TimeUnit_$type, this.m.b);
            }
            return {
                ret: true,
                p0: a,
                p1: b
            };
        }
    }
    CT_DateAx.$t = /*@__PURE__*/ markType(CT_DateAx, 'CT_DateAx', Base.$, [ISupportSetProperty_$type, IAxis_$type]);
    return CT_DateAx;
})();
/**
 * @hidden
 */
export let CT_CatAx = /*@__PURE__*/ (() => {
    class CT_CatAx extends Base {
        constructor() {
            super();
            this.r = null;
            this.b = null;
            this.f = null;
            this.h = null;
            this.j = null;
            this.l = null;
            this.d = null;
            this.p = null;
            this.m = null;
        }
        get item() {
            return this.r;
        }
        set item(a) {
            this.r = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get n() {
            if (this.m == null) {
                this.m = new EG_AxShared();
            }
            return this.m;
        }
        setProperty(a, b) {
            switch (a) {
                case 69:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 883:
                    this.e = typeCast(CT_LblAlgn.$, b);
                    break;
                case 884:
                    this.g = typeCast(CT_LblOffset.$, b);
                    break;
                case 1725:
                    this.i = typeCast(CT_Skip.$, b);
                    break;
                case 1726:
                    this.k = typeCast(CT_Skip.$, b);
                    break;
                case 1066:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 601:
                    this.o = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.n.q(a)) {
                        this.n.s(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get axisType() {
            return 1;
        }
        get id() {
            return this.n.c.g;
        }
        get crossAxId() {
            return CT_UnsignedInt.e(this.n.d);
        }
        get sharedProps() {
            return this.n;
        }
        get axisCrossesBetween() {
            return false;
        }
        get baseUnit() {
            let a = this.a != null ? this.a.k : true;
            return Tuple.a(Nullable$1.$.specialize(ST_TimeUnit_$type), Boolean_$type, toNullable(ST_TimeUnit_$type, null), a);
        }
        get dispUnits() {
            return null;
        }
        get tickLabelAlignment() {
            return unwrapNullable(this._tickLabelAlignment$i);
        }
        get _tickLabelAlignment$i() {
            return this.e != null ? toNullable(ST_LblAlgn_$type, this.e.a) : toNullable(ST_LblAlgn_$type, null);
        }
        get tickLabelMultiLevel() {
            return unwrapNullable(this._tickLabelMultiLevel$i);
        }
        get _tickLabelMultiLevel$i() {
            return this.c != null ? toNullable(Boolean_$type, this.c.k == false) : toNullable(Boolean_$type, null);
        }
        get tickLabelSkip() {
            return unwrapNullable(this._tickLabelSkip$i);
        }
        get _tickLabelSkip$i() {
            return this.i != null ? toNullable(Number_$type, this.i.b) : toNullable(Number_$type, null);
        }
        get tickMarkSkipValue() {
            return unwrapNullable(this._tickMarkSkipValue$i);
        }
        get _tickMarkSkipValue$i() {
            return this.k != null ? toNullable(Number_$type, this.k.b) : toNullable(Number_$type, null);
        }
        get tickLabelOffset() {
            return unwrapNullable(this._tickLabelOffset$i);
        }
        get _tickLabelOffset$i() {
            return this.g != null ? toNullable(Number_$type, this.g.c) : toNullable(Number_$type, null);
        }
        get categoryType() {
            return unwrapNullable(this._categoryType$i);
        }
        get _categoryType$i() {
            return toNullable(CategoryType_$type, this.a == null || this.a.k ? -4105 : 2);
        }
        save(a, b, c) {
            let d = DrawingMLChart.be;
            c.p(d, null);
            if (this.n != null) {
                this.n.r(a, b, c, null);
            }
            if (this.a != null) {
                this.a.q(a, b, c, DrawingMLChart.av, "c");
            }
            if (this.e != null) {
                DMLChartExtensions.b1(this.e, a, b, c, DrawingMLChart.c5);
            }
            if (this.g != null) {
                DMLChartExtensions.b2(this.g, a, b, c, DrawingMLChart.c6);
            }
            if (this.i != null) {
                DMLChartExtensions.cu(this.i, a, b, c, DrawingMLChart.f8);
            }
            if (this.k != null) {
                DMLChartExtensions.cu(this.k, a, b, c, DrawingMLChart.f9);
            }
            if (this.c != null) {
                this.c.q(a, b, c, DrawingMLChart.d0, "c");
            }
            c.k();
        }
        tryGetMajorMinorUnit(major, minor) {
            arguments[0] = wrapNullable(Number_$type, arguments[0]);
            arguments[1] = wrapNullable(Number_$type, arguments[1]);
            return this._tryGetMajorMinorUnit$i.apply(this, arguments);
        }
        _tryGetMajorMinorUnit$i(a, b) {
            b = a = toNullable(Number_$type, null);
            return {
                ret: false,
                p0: a,
                p1: b
            };
        }
        tryGetMajorMinorTimeUnit(major, minor) {
            arguments[0] = wrapNullable(ST_TimeUnit_$type, arguments[0]);
            arguments[1] = wrapNullable(ST_TimeUnit_$type, arguments[1]);
            return this._tryGetMajorMinorTimeUnit$i.apply(this, arguments);
        }
        _tryGetMajorMinorTimeUnit$i(a, b) {
            b = a = toNullable(ST_TimeUnit_$type, null);
            return {
                ret: false,
                p0: a,
                p1: b
            };
        }
    }
    CT_CatAx.$t = /*@__PURE__*/ markType(CT_CatAx, 'CT_CatAx', Base.$, [ISupportSetProperty_$type, IAxis_$type]);
    return CT_CatAx;
})();
/**
 * @hidden
 */
export let CT_DispUnitsLbl = /*@__PURE__*/ (() => {
    class CT_DispUnitsLbl extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.f = null;
            this.h = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 876:
                    this.a = typeCast(CT_Layout.$, b);
                    break;
                case 1776:
                    this.c = typeCast(CT_Tx.$, b);
                    break;
                case 1570:
                    this.e = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.g = typeCast(CT_TextBody_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DispUnitsLbl.$t = /*@__PURE__*/ markType(CT_DispUnitsLbl, 'CT_DispUnitsLbl', Base.$, [ISupportSetProperty_$type]);
    return CT_DispUnitsLbl;
})();
/**
 * @hidden
 */
export let CT_DispUnits = /*@__PURE__*/ (() => {
    class CT_DispUnits extends Base {
        constructor() {
            super();
            this.h = null;
            this.d = null;
            this.f = null;
            this.a = null;
            this.b = null;
        }
        get item() {
            return this.h;
        }
        set item(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 375:
                    this.a = typeCast(CT_Double.$, b);
                    break;
                case 187:
                    this.b = typeCast(CT_BuiltInUnit.$, b);
                    break;
                case 492:
                    this.c = typeCast(CT_DispUnitsLbl.$, b);
                    break;
                case 601:
                    this.e = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
    }
    CT_DispUnits.$t = /*@__PURE__*/ markType(CT_DispUnits, 'CT_DispUnits', Base.$, [ISupportSetProperty_$type]);
    return CT_DispUnits;
})();
/**
 * @hidden
 */
export let CT_ValAx = /*@__PURE__*/ (() => {
    class CT_ValAx extends Base {
        constructor() {
            super();
            this.n = null;
            this.f = null;
            this.b = null;
            this.d = null;
            this.h = null;
            this.l = null;
            this.i = null;
        }
        get item() {
            return this.n;
        }
        set item(a) {
            this.n = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get dispUnits() {
            return this.h;
        }
        set dispUnits(a) {
            this.h = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get j() {
            if (this.i == null) {
                this.i = new EG_AxShared();
            }
            return this.i;
        }
        setProperty(a, b) {
            switch (a) {
                case 360:
                    this.e = typeCast(CT_CrossBetween.$, b);
                    break;
                case 967:
                    this.a = typeCast(CT_AxisUnit.$, b);
                    break;
                case 1015:
                    this.c = typeCast(CT_AxisUnit.$, b);
                    break;
                case 491:
                    this.dispUnits = typeCast(CT_DispUnits.$, b);
                    break;
                case 601:
                    this.k = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.j.q(a)) {
                        this.j.s(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get axisType() {
            return 2;
        }
        get id() {
            return this.j.c.g;
        }
        get crossAxId() {
            return CT_UnsignedInt.e(this.j.d);
        }
        get sharedProps() {
            return this.j;
        }
        get axisCrossesBetween() {
            return this.e != null ? this.e.a == 0 : false;
        }
        get baseUnit() {
            return null;
        }
        get tickLabelAlignment() {
            return unwrapNullable(this._tickLabelAlignment$i);
        }
        get _tickLabelAlignment$i() {
            return toNullable(ST_LblAlgn_$type, null);
        }
        get tickLabelMultiLevel() {
            return unwrapNullable(this._tickLabelMultiLevel$i);
        }
        get _tickLabelMultiLevel$i() {
            return toNullable(Boolean_$type, null);
        }
        get tickLabelSkip() {
            return unwrapNullable(this._tickLabelSkip$i);
        }
        get _tickLabelSkip$i() {
            return toNullable(Number_$type, null);
        }
        get tickMarkSkipValue() {
            return unwrapNullable(this._tickMarkSkipValue$i);
        }
        get _tickMarkSkipValue$i() {
            return toNullable(Number_$type, null);
        }
        get tickLabelOffset() {
            return unwrapNullable(this._tickLabelOffset$i);
        }
        get _tickLabelOffset$i() {
            return toNullable(Number_$type, null);
        }
        get categoryType() {
            return unwrapNullable(this._categoryType$i);
        }
        get _categoryType$i() {
            return toNullable(CategoryType_$type, null);
        }
        save(a, b, c) {
            let d = DrawingMLChart.gm;
            c.p(d, null);
            if (this.j != null) {
                this.j.r(a, b, c, null);
            }
            if (this.e != null) {
                DMLChartExtensions.bl(this.e, a, b, c, DrawingMLChart.bk);
            }
            if (this.a != null) {
                DMLChartExtensions.be(this.a, a, b, c, DrawingMLChart.dj);
            }
            if (this.c != null) {
                DMLChartExtensions.be(this.c, a, b, c, DrawingMLChart.ds);
            }
            if (this.dispUnits != null) {
                DMLChartExtensions.bn(this.dispUnits, a, b, c, DrawingMLChart.bx);
            }
            c.k();
        }
        tryGetMajorMinorUnit(major, minor) {
            arguments[0] = wrapNullable(Number_$type, arguments[0]);
            arguments[1] = wrapNullable(Number_$type, arguments[1]);
            return this._tryGetMajorMinorUnit$i.apply(this, arguments);
        }
        _tryGetMajorMinorUnit$i(a, b) {
            b = toNullable(Number_$type, null);
            a = toNullable(Number_$type, null);
            if (this.a != null) {
                a = toNullable(Number_$type, this.a.a);
            }
            if (this.c != null) {
                b = toNullable(Number_$type, this.c.a);
            }
            return {
                ret: true,
                p0: a,
                p1: b
            };
        }
        tryGetMajorMinorTimeUnit(major, minor) {
            arguments[0] = wrapNullable(ST_TimeUnit_$type, arguments[0]);
            arguments[1] = wrapNullable(ST_TimeUnit_$type, arguments[1]);
            return this._tryGetMajorMinorTimeUnit$i.apply(this, arguments);
        }
        _tryGetMajorMinorTimeUnit$i(a, b) {
            b = a = toNullable(ST_TimeUnit_$type, null);
            return {
                ret: false,
                p0: a,
                p1: b
            };
        }
    }
    CT_ValAx.$t = /*@__PURE__*/ markType(CT_ValAx, 'CT_ValAx', Base.$, [ISupportSetProperty_$type, IAxis_$type]);
    return CT_ValAx;
})();
/**
 * @hidden
 */
export let ISeries_$type = /*@__PURE__*/ new Type(null, 'ISeries');
/**
 * @hidden
 */
export let CT_BubbleSer = /*@__PURE__*/ (() => {
    class CT_BubbleSer extends Base {
        constructor() {
            super();
            this.d = null;
            this.q = null;
            this.h = null;
            this.w = null;
            this.s = null;
            this.f = null;
            this.l = null;
            this.j = null;
            this.b = null;
            this.u = null;
            this.m = null;
            this.o = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get n() {
            if (this.m == null) {
                this.m = new EG_SerShared();
            }
            return this.m;
        }
        setProperty(a, b) {
            switch (a) {
                case 848:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 408:
                    this.p.add(typeCast(CT_DPt.$, b));
                    break;
                case 406:
                    this.g = typeCast(CT_DLbls.$, b);
                    break;
                case 1767:
                    this.v.add(typeCast(CT_Trendline.$, b));
                    break;
                case 590:
                    this.r.add(typeCast(CT_ErrBars.$, b));
                    break;
                case 1890:
                    this.e = typeCast(CT_AxDataSource.$, b);
                    break;
                case 1898:
                    this.k = typeCast(CT_NumDataSource.$, b);
                    break;
                case 186:
                    this.i = typeCast(CT_NumDataSource.$, b);
                    break;
                case 183:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 601:
                    this.t = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.n.e(a)) {
                        this.n.g(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get chart() {
            return this.o;
        }
        get seriesType() {
            return 7;
        }
        get sharedProps() {
            return this.n;
        }
        getBubbleSizes(a, b) {
            let c = this.i;
            let d = c != null ? c.b : null;
            return typeCast(SeriesValues.$, DMLChartUtils.p(d, a, b, false));
        }
        get cT_ErrBars() {
            return this.r != null && this.r.count > 0 ? this.r._inner[0] : null;
        }
        get invertIfNegativeValue() {
            return this.c != null && this.c.k;
        }
        get cT_NumDataSource() {
            return this.k;
        }
        get cT_AxDataSource() {
            return this.e;
        }
        get cT_Marker() {
            return null;
        }
        get cT_PictureOptions() {
            return null;
        }
        getExplosion() {
            return null;
        }
        getSmooth() {
            return null;
        }
        get index() {
            return this.n.a.g;
        }
        getTrendlines() {
            return this.v;
        }
        getDLbls(a) {
            a = CT_Extension_DataLabelsRange.f(CT_ExtensionList.a(this.t));
            return {
                ret: this.g,
                p0: a
            };
        }
        getDataPoints() {
            return this.p;
        }
        get isExplicitlyNoFill() {
            return DMLChartUtils.ao(this.n);
        }
        get isBubble3D() {
            return this.a != null && this.a.k;
        }
        getSeriesChartType(a, b) {
            if (a == 113) {
                return this.o.getChartType(null, this);
            }
            if (WorksheetChart._f5(a)) {
                return WorksheetChart._e5(b);
            }
            return a;
        }
    }
    CT_BubbleSer.$t = /*@__PURE__*/ markType(CT_BubbleSer, 'CT_BubbleSer', Base.$, [ISupportSetProperty_$type, ISeries_$type]);
    return CT_BubbleSer;
})();
/**
 * @hidden
 */
export let CT_SerTx = /*@__PURE__*/ (() => {
    class CT_SerTx extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.a = null;
            this.e = null;
        }
        get item() {
            return this.c;
        }
        set item(a) {
            this.c = a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 1606:
                    this.a = typeCast(CT_StrRef.$, b);
                    break;
                case 1818:
                    this.e = typeCast(String_$type, b);
                    break;
                default: break;
            }
        }
    }
    CT_SerTx.$t = /*@__PURE__*/ markType(CT_SerTx, 'CT_SerTx', Base.$, [ISupportSetProperty_$type]);
    return CT_SerTx;
})();
/**
 * @hidden
 */
export let CT_DPt = /*@__PURE__*/ (() => {
    class CT_DPt extends Base {
        constructor() {
            super();
            this.h = null;
            this.d = null;
            this.j = null;
            this.b = null;
            this.f = null;
            this.n = null;
            this.l = null;
            this.p = null;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 817:
                    this.g = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 848:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 979:
                    this.i = typeCast(CT_Marker_Chart.$, b);
                    break;
                case 183:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 598:
                    this.e = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1570:
                    this.m = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1199:
                    this.k = typeCast(CT_PictureOptions.$, b);
                    break;
                case 601:
                    this.o = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DPt.$t = /*@__PURE__*/ markType(CT_DPt, 'CT_DPt', Base.$, [ISupportSetProperty_$type]);
    return CT_DPt;
})();
/**
 * @hidden
 */
export let CT_Marker_Chart = /*@__PURE__*/ (() => {
    class CT_Marker_Chart extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.f = null;
            this.i = null;
            this.j = toNullable(Boolean_$type, null);
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1651:
                    this.c = typeCast(CT_MarkerStyle.$, b);
                    break;
                case 1508:
                    this.a = typeCast(CT_MarkerSize.$, b);
                    break;
                case 1570:
                    this.e = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 601:
                    this.h = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static g(a, b) {
            let c = toNullable(Boolean_$type, null);
            b = false;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "val":
                        try {
                            c = toNullable(Boolean_$type, ST_OnOff.e(d.d));
                        }
                        catch (e) {
                        }
                        break;
                    default: break;
                }
            }
            if (c.hasValue) {
                b = c.value;
                return {
                    ret: true,
                    p1: b
                };
            }
            return {
                ret: false,
                p1: b
            };
        }
        static l(a, b, c) {
            a.ad.p(b, "c");
            let d = null;
            let e = null;
            e = "val";
            d = ST_OnOff.g(c);
            a.ad.h(e, d);
        }
    }
    CT_Marker_Chart.$t = /*@__PURE__*/ markType(CT_Marker_Chart, 'CT_Marker_Chart', Base.$, [ISupportSetProperty_$type]);
    return CT_Marker_Chart;
})();
/**
 * @hidden
 */
export let CT_PictureOptions = /*@__PURE__*/ (() => {
    class CT_PictureOptions extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.b = null;
            this.h = null;
            this.j = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 51:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 52:
                    this.e = typeCast(CT_Boolean.$, b);
                    break;
                case 50:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1198:
                    this.g = typeCast(CT_PictureFormat.$, b);
                    break;
                case 1200:
                    this.i = typeCast(CT_PictureStackUnit.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PictureOptions.$t = /*@__PURE__*/ markType(CT_PictureOptions, 'CT_PictureOptions', Base.$, [ISupportSetProperty_$type]);
    return CT_PictureOptions;
})();
/**
 * @hidden
 */
export let CT_Trendline = /*@__PURE__*/ (() => {
    class CT_Trendline extends Base {
        constructor() {
            super();
            this.x = null;
            this.t = null;
            this.r = null;
            this.l = null;
            this.n = null;
            this.h = null;
            this.f = null;
            this.j = null;
            this.d = null;
            this.b = null;
            this.p = null;
            this.v = null;
        }
        get w() {
            return this.x;
        }
        set w(a) {
            this.x = a;
        }
        get s() {
            return this.t;
        }
        set s(a) {
            this.t = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get u() {
            return this.v;
        }
        set u(a) {
            this.v = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1045:
                    this.w = typeCast(String_$type, b);
                    break;
                case 1570:
                    this.s = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1770:
                    this.q = typeCast(CT_TrendlineType.$, b);
                    break;
                case 1135:
                    this.k = typeCast(CT_Order.$, b);
                    break;
                case 1178:
                    this.m = typeCast(CT_Period.$, b);
                    break;
                case 681:
                    this.g = typeCast(CT_Double.$, b);
                    break;
                case 91:
                    this.e = typeCast(CT_Double.$, b);
                    break;
                case 840:
                    this.i = typeCast(CT_Double.$, b);
                    break;
                case 490:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 489:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1769:
                    this.o = typeCast(CT_TrendlineLbl.$, b);
                    break;
                case 601:
                    this.u = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Trendline.$t = /*@__PURE__*/ markType(CT_Trendline, 'CT_Trendline', Base.$, [ISupportSetProperty_$type]);
    return CT_Trendline;
})();
/**
 * @hidden
 */
export let CT_TrendlineLbl = /*@__PURE__*/ (() => {
    class CT_TrendlineLbl extends Base {
        constructor() {
            super();
            this.b = null;
            this.f = null;
            this.d = null;
            this.h = null;
            this.j = null;
            this.l = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 876:
                    this.a = typeCast(CT_Layout.$, b);
                    break;
                case 1776:
                    this.e = typeCast(CT_Tx.$, b);
                    break;
                case 1088:
                    this.c = typeCast(CT_NumFmt_Chart.$, b);
                    break;
                case 1570:
                    this.g = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.i = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 601:
                    this.k = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TrendlineLbl.$t = /*@__PURE__*/ markType(CT_TrendlineLbl, 'CT_TrendlineLbl', Base.$, [ISupportSetProperty_$type]);
    return CT_TrendlineLbl;
})();
/**
 * @hidden
 */
export let CT_ErrBars = /*@__PURE__*/ (() => {
    class CT_ErrBars extends Base {
        constructor() {
            super();
            this.h = null;
            this.f = null;
            this.j = null;
            this.b = null;
            this.n = null;
            this.l = null;
            this.d = null;
            this.p = null;
            this.r = null;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 591:
                    this.g = typeCast(CT_ErrDir.$, b);
                    break;
                case 589:
                    this.e = typeCast(CT_ErrBarType.$, b);
                    break;
                case 592:
                    this.i = typeCast(CT_ErrValType.$, b);
                    break;
                case 1061:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1239:
                    this.m = typeCast(CT_NumDataSource.$, b);
                    break;
                case 1016:
                    this.k = typeCast(CT_NumDataSource.$, b);
                    break;
                case 1821:
                    this.c = typeCast(CT_Double.$, b);
                    break;
                case 1570:
                    this.o = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 601:
                    this.q = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ErrBars.$t = /*@__PURE__*/ markType(CT_ErrBars, 'CT_ErrBars', Base.$, [ISupportSetProperty_$type]);
    return CT_ErrBars;
})();
/**
 * @hidden
 */
export let CT_NumDataSource = /*@__PURE__*/ (() => {
    class CT_NumDataSource extends Base {
        constructor() {
            super(...arguments);
            this.d = null;
            this.b = null;
            this.a = null;
        }
        get item() {
            return this.d;
        }
        set item(a) {
            this.d = a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 1095:
                    this.b = typeCast(CT_NumRef.$, b);
                    break;
                case 1092:
                    this.a = typeCast(CT_NumData.$, b);
                    break;
                default: break;
            }
        }
    }
    CT_NumDataSource.$t = /*@__PURE__*/ markType(CT_NumDataSource, 'CT_NumDataSource', Base.$, [ISupportSetProperty_$type]);
    return CT_NumDataSource;
})();
/**
 * @hidden
 */
export let CT_NumData = /*@__PURE__*/ (() => {
    class CT_NumData extends Base {
        constructor() {
            super();
            this.h = null;
            this.b = null;
            this.f = null;
            this.d = null;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 673:
                    this.g = typeCast(String_$type, b);
                    break;
                case 1278:
                    this.a = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1277:
                    this.e.add(typeCast(CT_NumVal.$, b));
                    break;
                case 601:
                    this.c = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getIndexAndValue(a, b, c) {
            let d = typeCast(CT_NumVal.$, a);
            b = d.f;
            c = d.d;
            return {
                p1: b,
                p2: c
            };
        }
        getValues() {
            let a = CT_StrData.a(this, this.a, this.e);
            let b = new List$1(Base.$, 2, a.length);
            for (let d = 0; d < a.length; d++) {
                let c = a[d];
                let e = typeCast(String_$type, c);
                let f = 0;
                let g = tryParseNumber(e, f);
                f = g.p1;
                b.add1(f);
            }
            a = b.toArray();
            return a;
        }
    }
    CT_NumData.$t = /*@__PURE__*/ markType(CT_NumData, 'CT_NumData', Base.$, [ISupportSetProperty_$type, IProvideXValuesData_$type]);
    return CT_NumData;
})();
/**
 * @hidden
 */
export let CT_NumRef = /*@__PURE__*/ (() => {
    class CT_NumRef extends Base {
        constructor() {
            super();
            this.f = null;
            this.b = null;
            this.d = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 612:
                    this.e = typeCast(String_$type, b);
                    break;
                case 1086:
                    this.a = typeCast(CT_NumData.$, b);
                    break;
                case 601:
                    this.c = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_NumRef.$t = /*@__PURE__*/ markType(CT_NumRef, 'CT_NumRef', Base.$, [ISupportSetProperty_$type]);
    return CT_NumRef;
})();
/**
 * @hidden
 */
export let CT_AxDataSource = /*@__PURE__*/ (() => {
    class CT_AxDataSource extends Base {
        constructor() {
            super(...arguments);
            this.g = null;
            this.a = null;
            this.c = null;
            this.b = null;
            this.e = null;
            this.d = null;
        }
        get item() {
            return this.g;
        }
        set item(a) {
            this.g = a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 1043:
                    this.a = typeCast(CT_MultiLvlStrRef.$, b);
                    break;
                case 1095:
                    this.c = typeCast(CT_NumRef.$, b);
                    break;
                case 1092:
                    this.b = typeCast(CT_NumData.$, b);
                    break;
                case 1606:
                    this.e = typeCast(CT_StrRef.$, b);
                    break;
                case 1605:
                    this.d = typeCast(CT_StrData.$, b);
                    break;
                default: break;
            }
        }
    }
    CT_AxDataSource.$t = /*@__PURE__*/ markType(CT_AxDataSource, 'CT_AxDataSource', Base.$, [ISupportSetProperty_$type]);
    return CT_AxDataSource;
})();
/**
 * @hidden
 */
export let CT_MultiLvlStrRef = /*@__PURE__*/ (() => {
    class CT_MultiLvlStrRef extends Base {
        constructor() {
            super();
            this.f = null;
            this.b = null;
            this.d = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 612:
                    this.e = typeCast(String_$type, b);
                    break;
                case 1042:
                    this.a = typeCast(CT_MultiLvlStrData.$, b);
                    break;
                case 601:
                    this.c = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_MultiLvlStrRef.$t = /*@__PURE__*/ markType(CT_MultiLvlStrRef, 'CT_MultiLvlStrRef', Base.$, [ISupportSetProperty_$type]);
    return CT_MultiLvlStrRef;
})();
/**
 * @hidden
 */
export let IChart_$type = /*@__PURE__*/ new Type(null, 'IChart');
/**
 * @hidden
 */
export let CT_BubbleChart = /*@__PURE__*/ (() => {
    class CT_BubbleChart extends Base {
        constructor() {
            super();
            this.f = null;
            this.r = null;
            this.j = null;
            this.b = null;
            this.h = null;
            this.d = null;
            this.l = null;
            this.n = null;
            this.p = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1833:
                    this.e = typeCast(CT_Boolean.$, b);
                    break;
                case 1446:
                    this.q.add(typeCast(CT_BubbleSer.$, b));
                    break;
                case 406:
                    this.i = typeCast(CT_DLbls.$, b);
                    break;
                case 183:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 185:
                    this.g = typeCast(CT_BubbleScale.$, b);
                    break;
                case 1493:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 1510:
                    this.k = typeCast(CT_SizeRepresents.$, b);
                    break;
                case 81:
                    this.m.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.o = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.a;
            let d = c != null ? c.k : false;
            return d ? 87 : 15;
        }
        get seriesType() {
            return 7;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_BubbleSer.$, this.q);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.e == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.e));
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return this.m;
        }
    }
    CT_BubbleChart.$t = /*@__PURE__*/ markType(CT_BubbleChart, 'CT_BubbleChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_BubbleChart;
})();
/**
 * @hidden
 */
export let CT_Surface3DChart = /*@__PURE__*/ (() => {
    class CT_Surface3DChart extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.a = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_SurfaceChartShared();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                case 81:
                    this.c.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.e = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.b.c(a)) {
                        this.b.f(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.b.a;
            let d = c != null ? c.k : false;
            return d ? 86 : 85;
        }
        get seriesType() {
            return 5;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_SurfaceSer.$, this.b.d);
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            return toNullable(Boolean_$type, null);
        }
        get axisIds() {
            return this.c;
        }
    }
    CT_Surface3DChart.$t = /*@__PURE__*/ markType(CT_Surface3DChart, 'CT_Surface3DChart', Base.$, [ISupportSetProperty_$type, IChart_$type, IChart3D_$type]);
    return CT_Surface3DChart;
})();
/**
 * @hidden
 */
export let CT_SurfaceSer = /*@__PURE__*/ (() => {
    class CT_SurfaceSer extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.i = null;
            this.e = null;
            this.g = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new EG_SerShared();
            }
            return this.e;
        }
        setProperty(a, b) {
            switch (a) {
                case 229:
                    this.a = typeCast(CT_AxDataSource.$, b);
                    break;
                case 1821:
                    this.c = typeCast(CT_NumDataSource.$, b);
                    break;
                case 601:
                    this.h = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.f.e(a)) {
                        this.f.g(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get chart() {
            return this.g;
        }
        get seriesType() {
            return 5;
        }
        get sharedProps() {
            return this.f;
        }
        getBubbleSizes(a, b) {
            return null;
        }
        get cT_ErrBars() {
            return null;
        }
        get invertIfNegativeValue() {
            return false;
        }
        get cT_NumDataSource() {
            return this.c;
        }
        get cT_AxDataSource() {
            return this.a;
        }
        get cT_Marker() {
            return null;
        }
        get cT_PictureOptions() {
            return null;
        }
        getExplosion() {
            return null;
        }
        getSmooth() {
            return null;
        }
        get index() {
            return this.f.a.g;
        }
        getTrendlines() {
            return null;
        }
        getDLbls(a) {
            a = null;
            return {
                ret: null,
                p0: a
            };
        }
        getDataPoints() {
            return null;
        }
        get isExplicitlyNoFill() {
            return DMLChartUtils.ao(this.f);
        }
        get isBubble3D() {
            return false;
        }
        getSeriesChartType(a, b) {
            if (a == 113) {
                return this.g.getChartType(null, this);
            }
            if (WorksheetChart._f5(a)) {
                return WorksheetChart._e5(b);
            }
            return a;
        }
    }
    CT_SurfaceSer.$t = /*@__PURE__*/ markType(CT_SurfaceSer, 'CT_SurfaceSer', Base.$, [ISupportSetProperty_$type, ISeries_$type]);
    return CT_SurfaceSer;
})();
/**
 * @hidden
 */
export let CT_BandFmt = /*@__PURE__*/ (() => {
    class CT_BandFmt extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 817:
                    this.a = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1570:
                    this.c = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_BandFmt.$t = /*@__PURE__*/ markType(CT_BandFmt, 'CT_BandFmt', Base.$, [ISupportSetProperty_$type]);
    return CT_BandFmt;
})();
/**
 * @hidden
 */
export let CT_SurfaceChart = /*@__PURE__*/ (() => {
    class CT_SurfaceChart extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.a = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_SurfaceChartShared();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                case 81:
                    this.c.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.e = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.b.c(a)) {
                        this.b.f(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.b.a;
            let d = c != null ? c.k : false;
            return d ? 84 : 83;
        }
        get seriesType() {
            return 5;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_SurfaceSer.$, this.b.d);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            return toNullable(Boolean_$type, null);
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return this.c;
        }
    }
    CT_SurfaceChart.$t = /*@__PURE__*/ markType(CT_SurfaceChart, 'CT_SurfaceChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_SurfaceChart;
})();
/**
 * @hidden
 */
export let CT_OfPieChart = /*@__PURE__*/ (() => {
    class CT_OfPieChart extends Base {
        constructor() {
            super();
            this.f = null;
            this.d = null;
            this.j = null;
            this.b = null;
            this.n = null;
            this.h = null;
            this.r = null;
            this.p = null;
            this.k = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get l() {
            if (this.k == null) {
                this.k = new EG_PieChartShared();
            }
            return this.k;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 1122:
                    this.e = typeCast(CT_OfPieType.$, b);
                    break;
                case 697:
                    this.c = typeCast(CT_GapAmount.$, b);
                    break;
                case 1582:
                    this.i = typeCast(CT_SplitType.$, b);
                    break;
                case 1581:
                    this.a = typeCast(CT_Double.$, b);
                    break;
                case 374:
                    let c = typeCast(CT_CustSplit.$, b);
                    if (this.m == null) {
                        this.m = new List$1(CT_UnsignedInt.$, 0);
                    }
                    for (let d of fromEnum(c.a)) {
                        this.m.add(d);
                    }
                    break;
                case 1439:
                    this.g = typeCast(CT_SecondPieSize.$, b);
                    break;
                case 1448:
                    this.q.add(typeCast(CT_ChartLines.$, b));
                    break;
                case 601:
                    this.o = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.l.c(a)) {
                        this.l.f(a, b);
                        return;
                    }
                    break;
            }
        }
        getChartType(a, b) {
            let c = this.e;
            let d = c != null ? c.b : 0;
            switch (d) {
                case 1: return 71;
                case 0: break;
            }
            return 68;
        }
        get seriesType() {
            return 3;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_PieSer.$, this.l.d);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return this.q != null && this.q.count > 0 ? this.q._inner[0] : null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.l.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.l.a));
        }
        getGap(a, b) {
            a = null;
            b = this.c;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return null;
        }
    }
    CT_OfPieChart.$t = /*@__PURE__*/ markType(CT_OfPieChart, 'CT_OfPieChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_OfPieChart;
})();
/**
 * @hidden
 */
export let CT_PieSer = /*@__PURE__*/ (() => {
    class CT_PieSer extends Base {
        constructor() {
            super();
            this.b = null;
            this.m = null;
            this.f = null;
            this.d = null;
            this.h = null;
            this.o = null;
            this.i = null;
            this.k = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get j() {
            if (this.i == null) {
                this.i = new EG_SerShared();
            }
            return this.i;
        }
        setProperty(a, b) {
            switch (a) {
                case 598:
                    this.a = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 408:
                    this.l.add(typeCast(CT_DPt.$, b));
                    break;
                case 406:
                    this.e = typeCast(CT_DLbls.$, b);
                    break;
                case 229:
                    this.c = typeCast(CT_AxDataSource.$, b);
                    break;
                case 1821:
                    this.g = typeCast(CT_NumDataSource.$, b);
                    break;
                case 601:
                    this.n = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.j.e(a)) {
                        this.j.g(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get chart() {
            return this.k;
        }
        get seriesType() {
            return 3;
        }
        get sharedProps() {
            return this.j;
        }
        getBubbleSizes(a, b) {
            return null;
        }
        get cT_ErrBars() {
            return null;
        }
        get invertIfNegativeValue() {
            return false;
        }
        get cT_NumDataSource() {
            return this.g;
        }
        get cT_AxDataSource() {
            return this.c;
        }
        get cT_Marker() {
            return null;
        }
        get cT_PictureOptions() {
            return null;
        }
        getExplosion() {
            return this.a;
        }
        getSmooth() {
            return null;
        }
        get index() {
            return this.j.a.g;
        }
        getTrendlines() {
            return null;
        }
        getDLbls(a) {
            a = CT_Extension_DataLabelsRange.f(CT_ExtensionList.a(this.n));
            return {
                ret: this.e,
                p0: a
            };
        }
        getDataPoints() {
            return this.l;
        }
        get isExplicitlyNoFill() {
            return DMLChartUtils.ao(this.j);
        }
        get isBubble3D() {
            return false;
        }
        getSeriesChartType(a, b) {
            if (a == 113) {
                return this.k.getChartType(null, this);
            }
            if (WorksheetChart._f5(a)) {
                return WorksheetChart._e5(b);
            }
            return a;
        }
    }
    CT_PieSer.$t = /*@__PURE__*/ markType(CT_PieSer, 'CT_PieSer', Base.$, [ISupportSetProperty_$type, ISeries_$type]);
    return CT_PieSer;
})();
/**
 * @hidden
 */
export let CT_Bar3DChart = /*@__PURE__*/ (() => {
    class CT_Bar3DChart extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.f = null;
            this.j = null;
            this.l = null;
            this.g = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get h() {
            if (this.g == null) {
                this.g = new EG_BarChartShared();
            }
            return this.g;
        }
        setProperty(a, b) {
            switch (a) {
                case 697:
                    this.c = typeCast(CT_GapAmount.$, b);
                    break;
                case 696:
                    this.a = typeCast(CT_GapAmount.$, b);
                    break;
                case 1461:
                    this.e = typeCast(CT_Shape_Chart.$, b);
                    break;
                case 81:
                    this.i.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.k = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.h.e(a)) {
                        this.h.h(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.h;
            let d = c != null ? c.c : null;
            let e = c == null ? 2 : d.b;
            let f = this.e;
            let g = f != null ? toNullable(ST_Shape_$type, f.b) : toNullable(ST_Shape_$type, null);
            let h = this.h.b;
            let i = h != null ? toNullable(ST_BarDir_$type, h.b) : toNullable(ST_BarDir_$type, null);
            let j = i.hasValue && i.value == 1;
            switch (e) {
                case 1:
                    if (g.hasValue) {
                        switch (g.value) {
                            case 2: return j ? 54 : 60;
                            case 0:
                            case 1: return j ? 99 : 102;
                            case 4:
                            case 5: return j ? 106 : 109;
                            case 3: return j ? 92 : 95;
                        }
                    }
                    else {
                        return j ? 54 : 60;
                    }
                    break;
                case 3:
                    if (g.hasValue) {
                        switch (g.value) {
                            case 2: return j ? 55 : 61;
                            case 0:
                            case 1: return j ? 100 : 103;
                            case 4:
                            case 5: return j ? 107 : 110;
                            case 3: return j ? 93 : 96;
                        }
                    }
                    else {
                        return j ? 55 : 61;
                    }
                    break;
                case 0:
                    if (g.hasValue) {
                        switch (g.value) {
                            case 2: return j ? 56 : 62;
                            case 0:
                            case 1: return j ? 101 : 104;
                            case 4:
                            case 5: return j ? 108 : 111;
                            case 3: return j ? 94 : 97;
                        }
                    }
                    else {
                        return j ? 56 : 62;
                    }
                    break;
                case 2:
                    if (g.hasValue) {
                        switch (g.value) {
                            case 2: return j ? -4100 : 61;
                            case 0:
                            case 1:
                                if (j) {
                                    return 105;
                                }
                                break;
                            case 4:
                            case 5:
                                if (j) {
                                    return 112;
                                }
                                break;
                            case 3:
                                if (j) {
                                    return 98;
                                }
                                break;
                        }
                    }
                    else {
                        return j ? 56 : 62;
                    }
                    break;
            }
            return j ? 55 : 61;
        }
        get seriesType() {
            return 1;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return this.e != null ? toNullable(ST_Shape_$type, this.e.b) : toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_BarSer.$, this.h.f);
        }
        getGap(a, b) {
            a = this.a;
            b = this.c;
            return {
                p0: a,
                p1: b
            };
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.h.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.h.a));
        }
        get axisIds() {
            return this.i;
        }
    }
    CT_Bar3DChart.$t = /*@__PURE__*/ markType(CT_Bar3DChart, 'CT_Bar3DChart', Base.$, [ISupportSetProperty_$type, IChart_$type, IChart3D_$type]);
    return CT_Bar3DChart;
})();
/**
 * @hidden
 */
export let CT_BarSer = /*@__PURE__*/ (() => {
    class CT_BarSer extends Base {
        constructor() {
            super();
            this.b = null;
            this.l = null;
            this.s = null;
            this.f = null;
            this.w = null;
            this.h = null;
            this.d = null;
            this.j = null;
            this.n = null;
            this.u = null;
            this.o = null;
            this.q = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get p() {
            if (this.o == null) {
                this.o = new EG_SerShared();
            }
            return this.o;
        }
        setProperty(a, b) {
            switch (a) {
                case 848:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1199:
                    this.k = typeCast(CT_PictureOptions.$, b);
                    break;
                case 408:
                    this.r.add(typeCast(CT_DPt.$, b));
                    break;
                case 406:
                    this.e = typeCast(CT_DLbls.$, b);
                    break;
                case 1767:
                    this.v.add(typeCast(CT_Trendline.$, b));
                    break;
                case 590:
                    this.g = typeCast(CT_ErrBars.$, b);
                    break;
                case 229:
                    this.c = typeCast(CT_AxDataSource.$, b);
                    break;
                case 1821:
                    this.i = typeCast(CT_NumDataSource.$, b);
                    break;
                case 1461:
                    this.m = typeCast(CT_Shape_Chart.$, b);
                    break;
                case 601:
                    this.t = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.p.e(a)) {
                        this.p.g(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get chart() {
            return this.q;
        }
        get seriesType() {
            return 1;
        }
        get sharedProps() {
            return this.p;
        }
        getBubbleSizes(a, b) {
            return null;
        }
        get cT_ErrBars() {
            return this.g != null ? this.g : null;
        }
        get invertIfNegativeValue() {
            return this.a != null && this.a.k;
        }
        get cT_NumDataSource() {
            return this.i;
        }
        get cT_AxDataSource() {
            return this.c;
        }
        get cT_Marker() {
            return null;
        }
        get cT_PictureOptions() {
            return this.k;
        }
        getExplosion() {
            return null;
        }
        getSmooth() {
            return null;
        }
        get index() {
            return this.p.a.g;
        }
        getTrendlines() {
            return this.v;
        }
        getDLbls(a) {
            a = CT_Extension_DataLabelsRange.f(CT_ExtensionList.a(this.t));
            return {
                ret: this.e,
                p0: a
            };
        }
        getDataPoints() {
            return this.r;
        }
        get isExplicitlyNoFill() {
            return DMLChartUtils.ao(this.p);
        }
        get isBubble3D() {
            return false;
        }
        getSeriesChartType(a, b) {
            if (a == 113) {
                return this.q.getChartType(null, this);
            }
            if (WorksheetChart._f5(a)) {
                return WorksheetChart._e5(b);
            }
            return a;
        }
    }
    CT_BarSer.$t = /*@__PURE__*/ markType(CT_BarSer, 'CT_BarSer', Base.$, [ISupportSetProperty_$type, ISeries_$type]);
    return CT_BarSer;
})();
/**
 * @hidden
 */
export let CT_BarChart = /*@__PURE__*/ (() => {
    class CT_BarChart extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.l = null;
            this.h = null;
            this.j = null;
            this.e = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new EG_BarChartShared();
            }
            return this.e;
        }
        setProperty(a, b) {
            switch (a) {
                case 697:
                    this.a = typeCast(CT_GapAmount.$, b);
                    break;
                case 1149:
                    this.c = typeCast(CT_Overlap.$, b);
                    break;
                case 1448:
                    this.k.add(typeCast(CT_ChartLines.$, b));
                    break;
                case 81:
                    this.g.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.i = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.f.e(a)) {
                        this.f.h(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = a != null && a.f != null && a.f.k != null ? a.f.k.ac : null;
            if (c != null) {
                let d = typeCast(IChart_$type, c);
                return d.getChartType(a, b);
            }
            let e = this.f;
            let f = e != null ? e.c : null;
            let g = e == null ? 2 : f.b;
            let h = this.f.b;
            let i = h != null ? toNullable(ST_BarDir_$type, h.b) : toNullable(ST_BarDir_$type, null);
            let j = i.hasValue && i.value == 1;
            switch (g) {
                case 1: return j ? 51 : 57;
                case 3: return j ? 52 : 58;
                case 0: return j ? 53 : 59;
                case 2: break;
            }
            return 58;
        }
        get seriesType() {
            return 1;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_BarSer.$, this.f.f);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return this.k != null && this.k.count > 0 ? this.k._inner[0] : null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return this.c != null ? toNullable(Number_$type, this.c.b) : toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.f.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.f.a));
        }
        getGap(a, b) {
            a = null;
            b = this.a;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return this.g;
        }
    }
    CT_BarChart.$t = /*@__PURE__*/ markType(CT_BarChart, 'CT_BarChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_BarChart;
})();
/**
 * @hidden
 */
export let CT_DoughnutChart = /*@__PURE__*/ (() => {
    class CT_DoughnutChart extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.h = null;
            this.e = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new EG_PieChartShared();
            }
            return this.e;
        }
        setProperty(a, b) {
            switch (a) {
                case 647:
                    this.a = typeCast(CT_FirstSliceAng.$, b);
                    break;
                case 794:
                    this.c = typeCast(CT_HoleSize.$, b);
                    break;
                case 601:
                    this.g = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.f.c(a)) {
                        this.f.f(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.f.d.count > 0 ? this.f.d._inner[0] : null;
            let d = c != null ? c.a : null;
            return d != null && d.g != 0 ? 80 : -4120;
        }
        get seriesType() {
            return 3;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_PieSer.$, this.f.d);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            if (this.c != null) {
                return toNullable(Number_$type, this.c.b);
            }
            else {
                return toNullable(Number_$type, null);
            }
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            if (this.a != null) {
                return toNullable(Number_$type, this.a.c);
            }
            else {
                return toNullable(Number_$type, null);
            }
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.f.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.f.a));
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return null;
        }
    }
    CT_DoughnutChart.$t = /*@__PURE__*/ markType(CT_DoughnutChart, 'CT_DoughnutChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_DoughnutChart;
})();
/**
 * @hidden
 */
export let CT_Pie3DChart = /*@__PURE__*/ (() => {
    class CT_Pie3DChart extends Base {
        constructor() {
            super();
            this.d = null;
            this.a = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_PieChartShared();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                case 601:
                    this.c = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.b.c(a)) {
                        this.b.f(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.b.d.count > 0 ? this.b.d._inner[0] : null;
            let d = c != null ? c.a : null;
            return d != null && d.g != 0 ? 70 : -4102;
        }
        get seriesType() {
            return 3;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_PieSer.$, this.b.d);
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.b.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.b.a));
        }
        get axisIds() {
            return null;
        }
    }
    CT_Pie3DChart.$t = /*@__PURE__*/ markType(CT_Pie3DChart, 'CT_Pie3DChart', Base.$, [ISupportSetProperty_$type, IChart_$type, IChart3D_$type]);
    return CT_Pie3DChart;
})();
/**
 * @hidden
 */
export let CT_PieChart = /*@__PURE__*/ (() => {
    class CT_PieChart extends Base {
        constructor() {
            super();
            this.b = null;
            this.f = null;
            this.c = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get d() {
            if (this.c == null) {
                this.c = new EG_PieChartShared();
            }
            return this.c;
        }
        setProperty(a, b) {
            switch (a) {
                case 647:
                    this.a = typeCast(CT_FirstSliceAng.$, b);
                    break;
                case 601:
                    this.e = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.d.c(a)) {
                        this.d.f(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.d.d.count > 0 ? this.d.d._inner[0] : null;
            let d = c != null ? c.a : null;
            return d != null && d.g != 0 ? 69 : 5;
        }
        get seriesType() {
            return 3;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_PieSer.$, this.d.d);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            if (this.a != null) {
                return toNullable(Number_$type, this.a.c);
            }
            else {
                return toNullable(Number_$type, null);
            }
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.d.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.d.a));
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return null;
        }
    }
    CT_PieChart.$t = /*@__PURE__*/ markType(CT_PieChart, 'CT_PieChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_PieChart;
})();
/**
 * @hidden
 */
export let CT_ScatterSer = /*@__PURE__*/ (() => {
    class CT_ScatterSer extends Base {
        constructor() {
            super();
            this.h = null;
            this.o = null;
            this.f = null;
            this.u = null;
            this.q = null;
            this.d = null;
            this.j = null;
            this.b = null;
            this.s = null;
            this.k = null;
            this.m = null;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get l() {
            if (this.k == null) {
                this.k = new EG_SerShared();
            }
            return this.k;
        }
        setProperty(a, b) {
            switch (a) {
                case 979:
                    this.g = typeCast(CT_Marker_Chart.$, b);
                    break;
                case 408:
                    this.n.add(typeCast(CT_DPt.$, b));
                    break;
                case 406:
                    this.e = typeCast(CT_DLbls.$, b);
                    break;
                case 1767:
                    this.t.add(typeCast(CT_Trendline.$, b));
                    break;
                case 590:
                    this.p.add(typeCast(CT_ErrBars.$, b));
                    break;
                case 1890:
                    this.c = typeCast(CT_AxDataSource.$, b);
                    break;
                case 1898:
                    this.i = typeCast(CT_NumDataSource.$, b);
                    break;
                case 1547:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 601:
                    this.r = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.l.e(a)) {
                        this.l.g(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get chart() {
            return this.m;
        }
        get seriesType() {
            return 6;
        }
        get sharedProps() {
            return this.l;
        }
        getBubbleSizes(a, b) {
            return null;
        }
        get cT_ErrBars() {
            return this.p != null && this.p.count > 0 ? this.p._inner[0] : null;
        }
        get invertIfNegativeValue() {
            return false;
        }
        get cT_NumDataSource() {
            return this.i;
        }
        get cT_AxDataSource() {
            return this.c;
        }
        get cT_Marker() {
            return this.g;
        }
        get cT_PictureOptions() {
            return null;
        }
        getExplosion() {
            return null;
        }
        getSmooth() {
            return this.a;
        }
        get index() {
            return this.l.a.g;
        }
        getTrendlines() {
            return this.t;
        }
        getDLbls(a) {
            a = CT_Extension_DataLabelsRange.f(CT_ExtensionList.a(this.r));
            return {
                ret: this.e,
                p0: a
            };
        }
        getDataPoints() {
            return this.n;
        }
        get isExplicitlyNoFill() {
            return DMLChartUtils.ao(this.l);
        }
        get isBubble3D() {
            return false;
        }
        getSeriesChartType(a, b) {
            if (a == 113) {
                return this.m.getChartType(null, this);
            }
            if (WorksheetChart._f5(a)) {
                return WorksheetChart._e5(b);
            }
            return a;
        }
    }
    CT_ScatterSer.$t = /*@__PURE__*/ markType(CT_ScatterSer, 'CT_ScatterSer', Base.$, [ISupportSetProperty_$type, ISeries_$type]);
    return CT_ScatterSer;
})();
/**
 * @hidden
 */
export let CT_ScatterChart = /*@__PURE__*/ (() => {
    class CT_ScatterChart extends Base {
        constructor() {
            super();
            this.f = null;
            this.b = null;
            this.l = null;
            this.d = null;
            this.h = null;
            this.j = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1420:
                    this.e = typeCast(CT_ScatterStyle.$, b);
                    break;
                case 1833:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1446:
                    this.k.add(typeCast(CT_ScatterSer.$, b));
                    break;
                case 406:
                    this.c = typeCast(CT_DLbls.$, b);
                    break;
                case 81:
                    this.g.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.i = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.e;
            let d = c != null ? c.b : 0;
            let e = toNullable(Boolean_$type, null);
            let f = toNullable(Boolean_$type, null);
            if (b != null) {
                let g = b.cT_Marker;
                let h = g != null ? g.c : null;
                if (h != null) {
                    e = toNullable(Boolean_$type, h.a != 0);
                }
                f = DMLChartUtils.av(b.sharedProps);
            }
            let i = -4169;
            switch (d) {
                case 1:
                    if (e.hasValue && e.value) {
                        i = 74;
                    }
                    else {
                        i = 75;
                    }
                    break;
                case 2:
                    i = 74;
                    break;
                case 4:
                    i = 73;
                    break;
                case 5:
                    let j = DMLChartUtils.al(typeCast(IChart_$type, this));
                    i = (j == false) ? 73 : 72;
                    break;
                case 3: break;
                case 0: break;
            }
            if (f.hasValue) {
                switch (i) {
                    case -4169:
                        if (f.value) {
                            i = 74;
                        }
                        break;
                    case 74:
                        if (f.value == false) {
                            i = -4169;
                        }
                        break;
                }
            }
            if (e.hasValue) {
                switch (i) {
                    case -4169: break;
                    case 74:
                        if (e.hasValue && e.value == false) {
                            i = 75;
                        }
                        break;
                    case 75:
                        if (e.hasValue && e.value) {
                            i = 74;
                        }
                        break;
                    case 72:
                        if (e.hasValue && e.value == false) {
                            i = 73;
                        }
                        break;
                    case 73:
                        if (e.hasValue && e.value) {
                            i = 72;
                        }
                        break;
                }
            }
            return i;
        }
        get seriesType() {
            return 6;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_ScatterSer.$, this.k);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.a));
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return this.g;
        }
    }
    CT_ScatterChart.$t = /*@__PURE__*/ markType(CT_ScatterChart, 'CT_ScatterChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_ScatterChart;
})();
/**
 * @hidden
 */
export let CT_RadarSer = /*@__PURE__*/ (() => {
    class CT_RadarSer extends Base {
        constructor() {
            super();
            this.f = null;
            this.m = null;
            this.d = null;
            this.b = null;
            this.h = null;
            this.o = null;
            this.i = null;
            this.k = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get j() {
            if (this.i == null) {
                this.i = new EG_SerShared();
            }
            return this.i;
        }
        setProperty(a, b) {
            switch (a) {
                case 979:
                    this.e = typeCast(CT_Marker_Chart.$, b);
                    break;
                case 408:
                    this.l.add(typeCast(CT_DPt.$, b));
                    break;
                case 406:
                    this.c = typeCast(CT_DLbls.$, b);
                    break;
                case 229:
                    this.a = typeCast(CT_AxDataSource.$, b);
                    break;
                case 1821:
                    this.g = typeCast(CT_NumDataSource.$, b);
                    break;
                case 601:
                    this.n = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.j.e(a)) {
                        this.j.g(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get chart() {
            return this.k;
        }
        get seriesType() {
            return 4;
        }
        get sharedProps() {
            return this.j;
        }
        getBubbleSizes(a, b) {
            return null;
        }
        get cT_ErrBars() {
            return null;
        }
        get invertIfNegativeValue() {
            return false;
        }
        get cT_NumDataSource() {
            return this.g;
        }
        get cT_AxDataSource() {
            return this.a;
        }
        get cT_Marker() {
            return this.e;
        }
        get cT_PictureOptions() {
            return null;
        }
        getExplosion() {
            return null;
        }
        getSmooth() {
            return null;
        }
        get index() {
            return this.j.a.g;
        }
        getTrendlines() {
            return null;
        }
        getDLbls(a) {
            a = CT_Extension_DataLabelsRange.f(CT_ExtensionList.a(this.n));
            return {
                ret: this.c,
                p0: a
            };
        }
        getDataPoints() {
            return this.l;
        }
        get isExplicitlyNoFill() {
            return DMLChartUtils.ao(this.j);
        }
        get isBubble3D() {
            return false;
        }
        getSeriesChartType(a, b) {
            if (a == 113) {
                return this.k.getChartType(null, this);
            }
            if (WorksheetChart._f5(a)) {
                return WorksheetChart._e5(b);
            }
            return a;
        }
    }
    CT_RadarSer.$t = /*@__PURE__*/ markType(CT_RadarSer, 'CT_RadarSer', Base.$, [ISupportSetProperty_$type, ISeries_$type]);
    return CT_RadarSer;
})();
/**
 * @hidden
 */
export let CT_RadarChart = /*@__PURE__*/ (() => {
    class CT_RadarChart extends Base {
        constructor() {
            super();
            this.f = null;
            this.b = null;
            this.l = null;
            this.d = null;
            this.h = null;
            this.j = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1314:
                    this.e = typeCast(CT_RadarStyle.$, b);
                    break;
                case 1833:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1446:
                    this.k.add(typeCast(CT_RadarSer.$, b));
                    break;
                case 406:
                    this.c = typeCast(CT_DLbls.$, b);
                    break;
                case 81:
                    this.g.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.i = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.e;
            let d = c != null ? c.b : 0;
            let e = -4151;
            switch (d) {
                case 2:
                    e = 82;
                    break;
                case 1:
                    e = 81;
                    break;
                case 0: break;
            }
            if (b != null) {
                let f = toNullable(Boolean_$type, null);
                let g = b.cT_Marker;
                let h = g != null ? g.c : null;
                if (h != null) {
                    f = toNullable(Boolean_$type, h.a != 0);
                }
                if (f.hasValue) {
                    switch (e) {
                        case -4151:
                            if (f.value) {
                                e = 81;
                            }
                            break;
                        case 81:
                            if (f.value == false) {
                                e = -4151;
                            }
                            break;
                    }
                }
            }
            return e;
        }
        get seriesType() {
            return 4;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_RadarSer.$, this.k);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.a));
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return this.g;
        }
    }
    CT_RadarChart.$t = /*@__PURE__*/ markType(CT_RadarChart, 'CT_RadarChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_RadarChart;
})();
/**
 * @hidden
 */
export let CT_StockChart = /*@__PURE__*/ (() => {
    class CT_StockChart extends Base {
        constructor() {
            super();
            this.n = null;
            this.f = null;
            this.b = null;
            this.d = null;
            this.h = null;
            this.j = null;
            this.l = null;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1446:
                    this.m.add(typeCast(CT_LineSer.$, b));
                    break;
                case 406:
                    this.e = typeCast(CT_DLbls.$, b);
                    break;
                case 543:
                    this.a = typeCast(CT_ChartLines.$, b);
                    break;
                case 780:
                    this.c = typeCast(CT_ChartLines.$, b);
                    break;
                case 1809:
                    this.g = typeCast(CT_UpDownBars.$, b);
                    break;
                case 81:
                    this.i.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.k = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.m.count;
            let d = a != null ? a.f.k.f : null;
            if (d != null) {
                let e = d.f.f.count > 0 ? d.f.f._inner[0] : null;
                if (e != null) {
                    c += 1;
                }
                return c == 4 ? 90 : 91;
            }
            return c == 3 ? 88 : 89;
        }
        get seriesType() {
            return 2;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_LineSer.$, this.m);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            return toNullable(Boolean_$type, null);
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return this.i;
        }
    }
    CT_StockChart.$t = /*@__PURE__*/ markType(CT_StockChart, 'CT_StockChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_StockChart;
})();
/**
 * @hidden
 */
export let CT_LineSer = /*@__PURE__*/ (() => {
    class CT_LineSer extends Base {
        constructor() {
            super();
            this.j = null;
            this.q = null;
            this.f = null;
            this.u = null;
            this.h = null;
            this.d = null;
            this.l = null;
            this.b = null;
            this.s = null;
            this.m = null;
            this.o = null;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get n() {
            if (this.m == null) {
                this.m = new EG_SerShared();
            }
            return this.m;
        }
        setProperty(a, b) {
            switch (a) {
                case 979:
                    this.i = typeCast(CT_Marker_Chart.$, b);
                    break;
                case 408:
                    this.p.add(typeCast(CT_DPt.$, b));
                    break;
                case 406:
                    this.e = typeCast(CT_DLbls.$, b);
                    break;
                case 1767:
                    this.t.add(typeCast(CT_Trendline.$, b));
                    break;
                case 590:
                    this.g = typeCast(CT_ErrBars.$, b);
                    break;
                case 229:
                    this.c = typeCast(CT_AxDataSource.$, b);
                    break;
                case 1821:
                    this.k = typeCast(CT_NumDataSource.$, b);
                    break;
                case 1547:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 601:
                    this.r = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.n.e(a)) {
                        this.n.g(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get chart() {
            return this.o;
        }
        get seriesType() {
            return 2;
        }
        get sharedProps() {
            return this.n;
        }
        getBubbleSizes(a, b) {
            return null;
        }
        get cT_ErrBars() {
            return this.g != null ? this.g : null;
        }
        get invertIfNegativeValue() {
            return false;
        }
        get cT_NumDataSource() {
            return this.k;
        }
        get cT_AxDataSource() {
            return this.c;
        }
        get cT_Marker() {
            return this.i;
        }
        get cT_PictureOptions() {
            return null;
        }
        getExplosion() {
            return null;
        }
        getSmooth() {
            return this.a;
        }
        get index() {
            return this.n.a.g;
        }
        getTrendlines() {
            return this.t;
        }
        getDLbls(a) {
            a = CT_Extension_DataLabelsRange.f(CT_ExtensionList.a(this.r));
            return {
                ret: this.e,
                p0: a
            };
        }
        getDataPoints() {
            return this.p;
        }
        get isExplicitlyNoFill() {
            return DMLChartUtils.ao(this.n);
        }
        get isBubble3D() {
            return false;
        }
        getSeriesChartType(a, b) {
            if (a == 113) {
                return this.o.getChartType(null, this);
            }
            if (WorksheetChart._gk(a)) {
                return a;
            }
            if (WorksheetChart._f5(a)) {
                return WorksheetChart._e5(b);
            }
            return a;
        }
    }
    CT_LineSer.$t = /*@__PURE__*/ markType(CT_LineSer, 'CT_LineSer', Base.$, [ISupportSetProperty_$type, ISeries_$type]);
    return CT_LineSer;
})();
/**
 * @hidden
 */
export let CT_UpDownBars = /*@__PURE__*/ (() => {
    class CT_UpDownBars extends Base {
        constructor() {
            super();
            this.b = null;
            this.f = null;
            this.d = null;
            this.h = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 697:
                    this.a = typeCast(CT_GapAmount.$, b);
                    break;
                case 1808:
                    this.e = typeCast(CT_UpDownBar.$, b);
                    break;
                case 536:
                    this.c = typeCast(CT_UpDownBar.$, b);
                    break;
                case 601:
                    this.g = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_UpDownBars.$t = /*@__PURE__*/ markType(CT_UpDownBars, 'CT_UpDownBars', Base.$, [ISupportSetProperty_$type]);
    return CT_UpDownBars;
})();
/**
 * @hidden
 */
export let CT_UpDownBar = /*@__PURE__*/ (() => {
    class CT_UpDownBar extends Base {
        constructor() {
            super();
            this.b = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1570:
                    this.a = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_UpDownBar.$t = /*@__PURE__*/ markType(CT_UpDownBar, 'CT_UpDownBar', Base.$, [ISupportSetProperty_$type]);
    return CT_UpDownBar;
})();
/**
 * @hidden
 */
export let CT_Line3DChart = /*@__PURE__*/ (() => {
    class CT_Line3DChart extends Base {
        constructor() {
            super();
            this.b = null;
            this.f = null;
            this.h = null;
            this.c = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get d() {
            if (this.c == null) {
                this.c = new EG_LineChartShared();
            }
            return this.c;
        }
        setProperty(a, b) {
            switch (a) {
                case 696:
                    this.a = typeCast(CT_GapAmount.$, b);
                    break;
                case 81:
                    this.e.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.g = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.d.e(a)) {
                        this.d.h(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            return -4101;
        }
        get seriesType() {
            return 2;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_LineSer.$, this.d.f);
        }
        getGap(a, b) {
            a = this.a;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.d.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.d.a));
        }
        get axisIds() {
            return this.e;
        }
    }
    CT_Line3DChart.$t = /*@__PURE__*/ markType(CT_Line3DChart, 'CT_Line3DChart', Base.$, [ISupportSetProperty_$type, IChart_$type, IChart3D_$type]);
    return CT_Line3DChart;
})();
/**
 * @hidden
 */
export let CT_LineChart = /*@__PURE__*/ (() => {
    class CT_LineChart extends Base {
        constructor() {
            super();
            this.d = null;
            this.h = null;
            this.f = null;
            this.b = null;
            this.l = null;
            this.n = null;
            this.i = null;
            this.o = toNullable(Boolean_$type, null);
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get j() {
            if (this.i == null) {
                this.i = new EG_LineChartShared();
            }
            return this.i;
        }
        setProperty(a, b) {
            switch (a) {
                case 780:
                    this.c = typeCast(CT_ChartLines.$, b);
                    break;
                case 1809:
                    this.g = typeCast(CT_UpDownBars.$, b);
                    break;
                case 979:
                    this.e = typeCast(CT_Marker_Chart.$, b);
                    break;
                case 1547:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 81:
                    this.k.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.m = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.j.e(a)) {
                        this.j.h(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.j;
            let d = c != null ? c.d : null;
            let e = this.e;
            let f = e != null ? e.c : null;
            let g = f != null ? f.a : 0;
            let h = this.o.hasValue ? this.o.value : e == null ? false : g != 0;
            if (b != null) {
                let i = b.cT_Marker;
                let j = i != null ? i.c : null;
                let k = j != null && j.a == 0;
                let l = j == null || j.a != 0;
                if (k) {
                    h = false;
                }
                if (h == false && l) {
                    h = true;
                }
            }
            if (d == null) {
                return h ? 4 : 65;
            }
            switch (d.b) {
                case 2: return h == false ? 63 : 66;
                case 0: return h == false ? 64 : 67;
                default: return h == false ? 4 : 65;
            }
        }
        get seriesType() {
            return 2;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_LineSer.$, this.j.f);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.j.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.j.a));
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return this.k;
        }
    }
    CT_LineChart.$t = /*@__PURE__*/ markType(CT_LineChart, 'CT_LineChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_LineChart;
})();
/**
 * @hidden
 */
export let CT_Area3DChart = /*@__PURE__*/ (() => {
    class CT_Area3DChart extends Base {
        constructor() {
            super();
            this.b = null;
            this.f = null;
            this.h = null;
            this.c = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get d() {
            if (this.c == null) {
                this.c = new EG_AreaChartShared();
            }
            return this.c;
        }
        setProperty(a, b) {
            switch (a) {
                case 696:
                    this.a = typeCast(CT_GapAmount.$, b);
                    break;
                case 81:
                    this.e.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.g = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.d.e(a)) {
                        this.d.h(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.d;
            let d = c != null ? c.d : null;
            if (d == null) {
                return -4098;
            }
            switch (d.b) {
                case 2: return 78;
                case 0: return 79;
                default: return -4098;
            }
        }
        get seriesType() {
            return 0;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_AreaSer.$, this.d.f);
        }
        getGap(a, b) {
            a = this.a;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.d.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.d.a));
        }
        get axisIds() {
            return this.e;
        }
    }
    CT_Area3DChart.$t = /*@__PURE__*/ markType(CT_Area3DChart, 'CT_Area3DChart', Base.$, [ISupportSetProperty_$type, IChart_$type, IChart3D_$type]);
    return CT_Area3DChart;
})();
/**
 * @hidden
 */
export let CT_AreaSer = /*@__PURE__*/ (() => {
    class CT_AreaSer extends Base {
        constructor() {
            super();
            this.h = null;
            this.m = null;
            this.d = null;
            this.s = null;
            this.o = null;
            this.b = null;
            this.f = null;
            this.q = null;
            this.i = null;
            this.k = null;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get j() {
            if (this.i == null) {
                this.i = new EG_SerShared();
            }
            return this.i;
        }
        setProperty(a, b) {
            switch (a) {
                case 1199:
                    this.g = typeCast(CT_PictureOptions.$, b);
                    break;
                case 408:
                    this.l.add(typeCast(CT_DPt.$, b));
                    break;
                case 406:
                    this.c = typeCast(CT_DLbls.$, b);
                    break;
                case 1767:
                    this.r.add(typeCast(CT_Trendline.$, b));
                    break;
                case 590:
                    this.n.add(typeCast(CT_ErrBars.$, b));
                    break;
                case 229:
                    this.a = typeCast(CT_AxDataSource.$, b);
                    break;
                case 1821:
                    this.e = typeCast(CT_NumDataSource.$, b);
                    break;
                case 601:
                    this.p = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.j.e(a)) {
                        this.j.g(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get chart() {
            return this.k;
        }
        get seriesType() {
            return 0;
        }
        get sharedProps() {
            return this.j;
        }
        getBubbleSizes(a, b) {
            return null;
        }
        get cT_ErrBars() {
            return this.n != null && this.n.count > 0 ? this.n._inner[0] : null;
        }
        get invertIfNegativeValue() {
            return false;
        }
        get cT_NumDataSource() {
            return this.e;
        }
        get cT_AxDataSource() {
            return this.a;
        }
        get cT_Marker() {
            return null;
        }
        get cT_PictureOptions() {
            return this.g;
        }
        getExplosion() {
            return null;
        }
        getSmooth() {
            return null;
        }
        get index() {
            return this.j.a.g;
        }
        getTrendlines() {
            return this.r;
        }
        getDLbls(a) {
            a = CT_Extension_DataLabelsRange.f(CT_ExtensionList.a(this.p));
            return {
                ret: this.c,
                p0: a
            };
        }
        getDataPoints() {
            return this.l;
        }
        get isExplicitlyNoFill() {
            return DMLChartUtils.ao(this.j);
        }
        get isBubble3D() {
            return false;
        }
        getSeriesChartType(a, b) {
            if (a == 113) {
                return this.k.getChartType(null, this);
            }
            if (WorksheetChart._f5(a)) {
                return WorksheetChart._e5(b);
            }
            return a;
        }
    }
    CT_AreaSer.$t = /*@__PURE__*/ markType(CT_AreaSer, 'CT_AreaSer', Base.$, [ISupportSetProperty_$type, ISeries_$type]);
    return CT_AreaSer;
})();
/**
 * @hidden
 */
export let CT_AreaChart = /*@__PURE__*/ (() => {
    class CT_AreaChart extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.a = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get b() {
            if (this.a == null) {
                this.a = new EG_AreaChartShared();
            }
            return this.a;
        }
        setProperty(a, b) {
            switch (a) {
                case 81:
                    this.c.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                case 601:
                    this.e = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    if (this.b.e(a)) {
                        this.b.h(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        getChartType(a, b) {
            let c = this.b;
            let d = c != null ? c.d : null;
            if (d == null) {
                return 1;
            }
            switch (d.b) {
                case 2: return 76;
                case 0: return 77;
                default: return 1;
            }
        }
        get seriesType() {
            return 0;
        }
        get sT_Shape() {
            return unwrapNullable(this._sT_Shape$i);
        }
        get _sT_Shape$i() {
            return toNullable(ST_Shape_$type, null);
        }
        getSeries() {
            return DMLChartUtils.aq(CT_AreaSer.$, this.b.f);
        }
        getHoleSize() {
            return unwrapNullable(this._getHoleSize$i.apply(this, arguments));
        }
        _getHoleSize$i() {
            return toNullable(Number_$type, null);
        }
        getFirstSliceAngle() {
            return unwrapNullable(this._getFirstSliceAngle$i.apply(this, arguments));
        }
        _getFirstSliceAngle$i() {
            return toNullable(Number_$type, null);
        }
        getSerLines() {
            return null;
        }
        getOverlap() {
            return unwrapNullable(this._getOverlap$i.apply(this, arguments));
        }
        _getOverlap$i() {
            return toNullable(Number_$type, null);
        }
        getVaryColors() {
            return unwrapNullable(this._getVaryColors$i.apply(this, arguments));
        }
        _getVaryColors$i() {
            if (this.b.a == null) {
                return toNullable(Boolean_$type, null);
            }
            return toNullable(Boolean_$type, CT_Boolean.g(this.b.a));
        }
        getGap(a, b) {
            a = null;
            b = null;
            return {
                p0: a,
                p1: b
            };
        }
        get axisIds() {
            return this.c;
        }
    }
    CT_AreaChart.$t = /*@__PURE__*/ markType(CT_AreaChart, 'CT_AreaChart', Base.$, [ISupportSetProperty_$type, IChart_$type]);
    return CT_AreaChart;
})();
/**
 * @hidden
 */
export let CT_Surface = /*@__PURE__*/ (() => {
    class CT_Surface extends Base {
        constructor() {
            super();
            this.b = null;
            this.f = null;
            this.d = null;
            this.h = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1722:
                    this.a = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1570:
                    this.e = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1199:
                    this.c = typeCast(CT_PictureOptions.$, b);
                    break;
                case 601:
                    this.g = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Surface.$t = /*@__PURE__*/ markType(CT_Surface, 'CT_Surface', Base.$, [ISupportSetProperty_$type]);
    return CT_Surface;
})();
/**
 * @hidden
 */
export let CT_View3D = /*@__PURE__*/ (() => {
    class CT_View3D extends Base {
        constructor() {
            super();
            this.j = null;
            this.f = null;
            this.l = null;
            this.d = null;
            this.b = null;
            this.h = null;
            this.n = null;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1371:
                    this.i = typeCast(CT_RotX.$, b);
                    break;
                case 765:
                    this.e = typeCast(CT_HPercent.$, b);
                    break;
                case 1372:
                    this.k = typeCast(CT_RotY.$, b);
                    break;
                case 471:
                    this.c = typeCast(CT_DepthPercent.$, b);
                    break;
                case 1300:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1183:
                    this.g = typeCast(CT_Perspective.$, b);
                    break;
                case 601:
                    this.m = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_View3D.$t = /*@__PURE__*/ markType(CT_View3D, 'CT_View3D', Base.$, [ISupportSetProperty_$type]);
    return CT_View3D;
})();
/**
 * @hidden
 */
export let CT_PivotFmt = /*@__PURE__*/ (() => {
    class CT_PivotFmt extends Base {
        constructor() {
            super();
            this.b = null;
            this.h = null;
            this.j = null;
            this.f = null;
            this.d = null;
            this.l = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 817:
                    this.a = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 1570:
                    this.g = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.i = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 979:
                    this.e = typeCast(CT_Marker_Chart.$, b);
                    break;
                case 401:
                    this.c = typeCast(CT_DLbl.$, b);
                    break;
                case 601:
                    this.k = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PivotFmt.$t = /*@__PURE__*/ markType(CT_PivotFmt, 'CT_PivotFmt', Base.$, [ISupportSetProperty_$type]);
    return CT_PivotFmt;
})();
/**
 * @hidden
 */
export let CT_Chart = /*@__PURE__*/ (() => {
    class CT_Chart extends Base {
        constructor() {
            super();
            this.t = null;
            this.b = null;
            this.z = null;
            this.v = null;
            this.p = null;
            this.r = null;
            this.n = null;
            this.l = null;
            this.j = null;
            this.d = null;
            this.h = null;
            this.f = null;
            this.x = null;
        }
        get s() {
            return this.t;
        }
        set s(a) {
            this.t = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get y() {
            return this.z;
        }
        set y(a) {
            this.z = a;
        }
        get u() {
            return this.v;
        }
        set u(a) {
            this.v = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get w() {
            return this.x;
        }
        set w(a) {
            this.x = a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 1745:
                    this.s = typeCast(CT_Title.$, b);
                    break;
                case 78:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 1218:
                    if (this.y == null) {
                        this.y = new List$1(CT_PivotFmt.$, 0);
                    }
                    this.y.add(typeCast(CT_PivotFmt.$, b));
                    break;
                case 1841:
                    this.u = typeCast(CT_View3D.$, b);
                    break;
                case 654:
                    this.o = typeCast(CT_Surface.$, b);
                    break;
                case 1503:
                    this.q = typeCast(CT_Surface.$, b);
                    break;
                case 88:
                    this.m = typeCast(CT_Surface.$, b);
                    break;
                case 1235:
                    this.k = typeCast(CT_PlotArea.$, b);
                    break;
                case 890:
                    this.i = typeCast(CT_Legend.$, b);
                    break;
                case 1238:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 487:
                    this.g = typeCast(CT_DispBlanksAs.$, b);
                    break;
                case 1487:
                    this.e = typeCast(CT_Boolean.$, b);
                    break;
                case 601:
                    this.w = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
    }
    CT_Chart.$t = /*@__PURE__*/ markType(CT_Chart, 'CT_Chart', Base.$, [ISupportSetProperty_$type]);
    return CT_Chart;
})();
/**
 * @hidden
 */
export let CT_Protection = /*@__PURE__*/ (() => {
    class CT_Protection extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.f = null;
            this.h = null;
            this.j = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 265:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 410:
                    this.c = typeCast(CT_Boolean.$, b);
                    break;
                case 675:
                    this.e = typeCast(CT_Boolean.$, b);
                    break;
                case 1442:
                    this.g = typeCast(CT_Boolean.$, b);
                    break;
                case 1815:
                    this.i = typeCast(CT_Boolean.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Protection.$t = /*@__PURE__*/ markType(CT_Protection, 'CT_Protection', Base.$, [ISupportSetProperty_$type]);
    return CT_Protection;
})();
/**
 * @hidden
 */
export let CT_PivotSource = /*@__PURE__*/ (() => {
    class CT_PivotSource extends Base {
        constructor() {
            super();
            this.f = null;
            this.b = null;
            this.d = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            switch (a) {
                case 1045:
                    this.e = typeCast(String_$type, b);
                    break;
                case 655:
                    this.a = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 601:
                    this.c = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default: break;
            }
        }
    }
    CT_PivotSource.$t = /*@__PURE__*/ markType(CT_PivotSource, 'CT_PivotSource', Base.$, [ISupportSetProperty_$type]);
    return CT_PivotSource;
})();
/**
 * @hidden
 */
export let CT_CustSplit = /*@__PURE__*/ (() => {
    class CT_CustSplit extends Base {
        constructor() {
            super();
            this.b = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1438:
                    this.a.add(typeCast(CT_UnsignedInt.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_CustSplit.$t = /*@__PURE__*/ markType(CT_CustSplit, 'CT_CustSplit', Base.$, [ISupportSetProperty_$type]);
    return CT_CustSplit;
})();
/**
 * @hidden
 */
export let CT_BandFmts = /*@__PURE__*/ (() => {
    class CT_BandFmts extends Base {
        constructor() {
            super();
            this.b = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 96:
                    this.a.add(typeCast(CT_BandFmt.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_BandFmts.$t = /*@__PURE__*/ markType(CT_BandFmts, 'CT_BandFmts', Base.$, [ISupportSetProperty_$type]);
    return CT_BandFmts;
})();
/**
 * @hidden
 */
export let CT_PivotFmts = /*@__PURE__*/ (() => {
    class CT_PivotFmts extends Base {
        constructor() {
            super();
            this.f = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1217:
                    this.e.add(typeCast(CT_PivotFmt.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static c(a) {
            return a != null ? a.e : null;
        }
        static a(a) {
            let b = new CT_PivotFmts();
            b.f = a;
            return b;
        }
    }
    CT_PivotFmts.$t = /*@__PURE__*/ markType(CT_PivotFmts, 'CT_PivotFmts', Base.$, [ISupportSetProperty_$type]);
    return CT_PivotFmts;
})();
/**
 * @hidden
 */
export let CT_DLbls = /*@__PURE__*/ (() => {
    class CT_DLbls extends Base {
        constructor() {
            super();
            this.g = null;
            this.d = null;
            this.a = null;
            this.b = null;
        }
        get f() {
            if (this.g == null) {
                this.g = new List$1(CT_DLbl.$, 0);
            }
            return this.g;
        }
        get e() {
            if (this.d == null) {
                this.d = new Group_DLbls();
            }
            return this.d;
        }
        setProperty(a, b) {
            switch (a) {
                case 467:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 401:
                    this.f.add(typeCast(CT_DLbl.$, b));
                    break;
                case 601:
                    this.b = typeCast(CT_ExtensionList.$, b);
                    break;
                default:
                    if (this.e.e(a)) {
                        this.e.g(a, b);
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static c(a) {
            let b = null;
            if (a != null) {
                for (let c of fromEnum(a.e)) {
                    b = typeCast(CT_Extension_DataLabels.$, c);
                    if (b != null) {
                        break;
                    }
                }
            }
            return b;
        }
    }
    CT_DLbls.$t = /*@__PURE__*/ markType(CT_DLbls, 'CT_DLbls', Base.$, [ISupportSetProperty_$type]);
    return CT_DLbls;
})();
/**
 * @hidden
 */
export let CT_DLbl = /*@__PURE__*/ (() => {
    class CT_DLbl extends Base {
        constructor() {
            super();
            this.c = null;
            this.b = null;
            this.a = null;
            this.e = null;
            this.e = new List$1(CT_Extension.$, 0);
        }
        get d() {
            if (this.c == null) {
                this.c = new Group_DLbl();
            }
            return this.c;
        }
        setProperty(a, b) {
            switch (a) {
                case 817:
                    this.b = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 467:
                    this.a = typeCast(CT_Boolean.$, b);
                    break;
                case 601:
                    this.e = CT_ExtensionList.d(typeCast(CT_ExtensionList.$, b));
                    break;
                default:
                    this.d.g(a, b);
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DLbl.$t = /*@__PURE__*/ markType(CT_DLbl, 'CT_DLbl', Base.$, [ISupportSetProperty_$type]);
    return CT_DLbl;
})();
/**
 * @hidden
 */
export let CT_PlotArea = /*@__PURE__*/ (() => {
    class CT_PlotArea extends Base {
        constructor() {
            super(...arguments);
            this.ag = null;
            this.ai = null;
            this.l = null;
            this.c = null;
            this.b = null;
            this.n = null;
            this.m = null;
            this.ac = null;
            this.u = null;
            this.y = null;
            this.s = null;
            this.r = null;
            this.i = null;
            this.f = null;
            this.e = null;
            this.p = null;
            this.ae = null;
            this.ad = null;
            this.h = null;
            this.d = null;
            this.o = null;
            this.v = null;
            this.w = null;
            this.x = null;
            this.z = null;
            this.aa = null;
            this.ab = null;
            this.g = null;
            this.t = null;
            this.j = null;
            this.q = null;
            this.k = null;
            this.af = null;
            this.a = null;
        }
        get ah() {
            if (this.ag == null) {
                this.ag = new List$1(IAxis_$type, 2, 4);
            }
            return this.ag;
        }
        get aj() {
            if (this.ai == null) {
                this.ai = new List$1(IChart_$type, 0);
            }
            return this.ai;
        }
        setProperty(a, b) {
            switch (a) {
                case 876:
                    this.l = typeCast(CT_Layout.$, b);
                    break;
                case 55:
                    if (this.c == null) {
                        this.c = typeCast(CT_AreaChart.$, b);
                    }
                    else if (this.d == null) {
                        this.d = typeCast(CT_AreaChart.$, b);
                    }
                    break;
                case 54:
                    this.b = typeCast(CT_Area3DChart.$, b);
                    break;
                case 907:
                    if (this.n == null) {
                        this.n = typeCast(CT_LineChart.$, b);
                    }
                    else if (this.o == null) {
                        this.o = typeCast(CT_LineChart.$, b);
                    }
                    break;
                case 906:
                    this.m = typeCast(CT_Line3DChart.$, b);
                    break;
                case 1598:
                    this.ac = typeCast(CT_StockChart.$, b);
                    break;
                case 1313:
                    if (this.u == null) {
                        this.u = typeCast(CT_RadarChart.$, b);
                    }
                    else if (this.v == null) {
                        this.v = typeCast(CT_RadarChart.$, b);
                    }
                    else if (this.w == null) {
                        this.w = typeCast(CT_RadarChart.$, b);
                    }
                    else if (this.x == null) {
                        this.x = typeCast(CT_RadarChart.$, b);
                    }
                    break;
                case 1419:
                    if (this.y == null) {
                        this.y = typeCast(CT_ScatterChart.$, b);
                    }
                    else if (this.z == null) {
                        this.z = typeCast(CT_ScatterChart.$, b);
                    }
                    else if (this.aa == null) {
                        this.aa = typeCast(CT_ScatterChart.$, b);
                    }
                    else if (this.ab == null) {
                        this.ab = typeCast(CT_ScatterChart.$, b);
                    }
                    break;
                case 1202:
                    if (this.s == null) {
                        this.s = typeCast(CT_PieChart.$, b);
                    }
                    else if (this.t == null) {
                        this.t = typeCast(CT_PieChart.$, b);
                    }
                    break;
                case 1201:
                    this.r = typeCast(CT_Pie3DChart.$, b);
                    break;
                case 534:
                    if (this.i == null) {
                        this.i = typeCast(CT_DoughnutChart.$, b);
                    }
                    else if (this.j == null) {
                        this.j = typeCast(CT_DoughnutChart.$, b);
                    }
                    break;
                case 100:
                    if (this.f == null) {
                        this.f = typeCast(CT_BarChart.$, b);
                    }
                    else if (this.g == null) {
                        this.g = typeCast(CT_BarChart.$, b);
                    }
                    break;
                case 99:
                    this.e = typeCast(CT_Bar3DChart.$, b);
                    break;
                case 1121:
                    if (this.p == null) {
                        this.p = typeCast(CT_OfPieChart.$, b);
                    }
                    else if (this.q == null) {
                        this.q = typeCast(CT_OfPieChart.$, b);
                    }
                    break;
                case 1644:
                    this.ae = typeCast(CT_SurfaceChart.$, b);
                    break;
                case 1643:
                    this.ad = typeCast(CT_Surface3DChart.$, b);
                    break;
                case 184:
                    this.h = typeCast(CT_BubbleChart.$, b);
                    break;
                case 1822:
                    this.ah.add(typeCast(CT_ValAx.$, b));
                    break;
                case 230:
                    this.ah.add(typeCast(CT_CatAx.$, b));
                    break;
                case 440:
                    this.ah.add(typeCast(CT_DateAx.$, b));
                    break;
                case 1447:
                    this.ah.add(typeCast(CT_SerAx.$, b));
                    break;
                case 409:
                    this.k = typeCast(CT_DTable.$, b);
                    break;
                case 1570:
                    this.af = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 601:
                    this.a = typeCast(CT_ExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PlotArea.$t = /*@__PURE__*/ markType(CT_PlotArea, 'CT_PlotArea', Base.$, [ISupportSetProperty_$type]);
    return CT_PlotArea;
})();
/**
 * @hidden
 */
export let CT_MultiLvlStrData = /*@__PURE__*/ (() => {
    class CT_MultiLvlStrData extends Base {
        constructor() {
            super(...arguments);
            this.b = null;
            this.c = null;
            this.a = null;
        }
        get d() {
            if (this.c == null) {
                this.c = new List$1(CT_Lvl.$, 0);
            }
            return this.c;
        }
        setProperty(a, b) {
            switch (a) {
                case 1278:
                    this.b = typeCast(CT_UnsignedInt.$, b);
                    break;
                case 944:
                    let c = typeCast(CT_Lvl.$, b);
                    if (c == null) {
                    }
                    this.d.add(c);
                    break;
                case 601:
                    this.a = typeCast(CT_ExtensionList.$, b);
                    break;
                default: break;
            }
        }
    }
    CT_MultiLvlStrData.$t = /*@__PURE__*/ markType(CT_MultiLvlStrData, 'CT_MultiLvlStrData', Base.$, [ISupportSetProperty_$type]);
    return CT_MultiLvlStrData;
})();
/**
 * @hidden
 */
export let CT_Extension_DataLabels = /*@__PURE__*/ (() => {
    class CT_Extension_DataLabels extends CT_Extension {
        constructor() {
            super(...arguments);
            this.g = null;
            this.f = null;
            this.h = null;
            this.l = null;
            this.k = null;
            this.j = null;
        }
        static i(a) {
            if (stringEquals1(a, "{CE6537A1-D6FC-4f65-9D91-7224C49458BB}", 3)) {
                return ((() => {
                    let $ret = new CT_Extension_DataLabels();
                    $ret.b = a;
                    return $ret;
                })());
            }
            return null;
        }
        setProperty(a, b) {
            switch (a) {
                case 1486:
                    this.g = typeCast(CT_Boolean.$, b);
                    break;
                case 1491:
                    this.g = typeCast(CT_Boolean.$, b);
                    break;
                case 886:
                    this.h = typeCast(CT_ChartLines.$, b);
                    break;
                case 1570:
                    this.l = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1776:
                    this.k = typeCast(CT_Tx.$, b);
                    break;
                case 876:
                    this.j = typeCast(CT_Layout.$, b);
                    break;
                default: break;
            }
        }
        d(a, b, c, d) {
            let e = DrawingMLChart.ce;
            CT_Extension_DataLabels.e(a, e, "{CE6537A1-D6FC-4f65-9D91-7224C49458BB}");
            c.l(DrawingMLChart2012.ao);
            let f = d == CT_DLbls.$;
            c.p(DrawingMLChart2012.bg, "c15");
            if (this.j != null && this.j.a != null) {
                DMLChartExtensions.b6(this.j.a, a, b, c, DrawingMLChart.dk);
            }
            c.k();
            if (f && (this.h != null || CT_Boolean.g(this.g))) {
                let g = new CT_Boolean(3);
                g.m = toNullable(Boolean_$type, CT_Boolean.g(this.g));
                g.q(a, b, c, DrawingMLChart2012.br, "c15");
                if (this.h != null) {
                    DMLChartExtensions.bk(this.h, a, b, c, DrawingMLChart2012.bh);
                }
            }
            if (this.f) {
                let h = new CT_Boolean(3);
                h.m = toNullable(Boolean_$type, true);
                h.q(a, b, c, DrawingMLChart2012.bq, "c15");
            }
            c.k();
        }
    }
    CT_Extension_DataLabels.$t = /*@__PURE__*/ markType(CT_Extension_DataLabels, 'CT_Extension_DataLabels', CT_Extension.$, [ISupportSetProperty_$type]);
    return CT_Extension_DataLabels;
})();
/**
 * @hidden
 */
export let CT_Extension_DataLabelsRange = /*@__PURE__*/ (() => {
    class CT_Extension_DataLabelsRange extends CT_Extension {
        constructor() {
            super(...arguments);
            this.h = null;
        }
        static g(a) {
            if (stringEquals1(a, "{02D57815-91ED-43cb-92C2-25804820EDAC}", 3)) {
                return ((() => {
                    let $ret = new CT_Extension_DataLabelsRange();
                    $ret.b = a;
                    return $ret;
                })());
            }
            return null;
        }
        setProperty(a, b) {
            switch (a) {
                case 421:
                    this.h = typeCast(CT_SeriesDataLabelsRange.$, b);
                    break;
                default: break;
            }
        }
        static f(a) {
            if (a == null || a.e == null || a.e.count == 0) {
                return null;
            }
            let b = null;
            for (let c of fromEnum(a.e)) {
                b = typeCast(CT_Extension_DataLabelsRange.$, c);
                if (b != null) {
                    break;
                }
            }
            return b;
        }
        d(a, b, c, d) {
            let e = DrawingMLChart.ce;
            CT_Extension_DataLabels.e(a, e, "{02D57815-91ED-43cb-92C2-25804820EDAC}");
            c.l(DrawingMLChart2012.ao);
            if (this.h != null) {
                DMLChartExtensions.c7(this.h, a, b, c);
            }
            c.k();
        }
    }
    CT_Extension_DataLabelsRange.$t = /*@__PURE__*/ markType(CT_Extension_DataLabelsRange, 'CT_Extension_DataLabelsRange', CT_Extension.$, [ISupportSetProperty_$type]);
    return CT_Extension_DataLabelsRange;
})();
/**
 * @hidden
 */
export let DMLChartUtils = /*@__PURE__*/ (() => {
    class DMLChartUtils extends Base {
        static ak(a) {
            let b = null;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "id":
                    case OfficeDocumentRelationships.as:
                        b = c.d;
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_RelId();
                $ret.a = b;
                return $ret;
            })());
            return d;
        }
        static t(a, b) {
            let c = a != null ? a.b : null;
            return DMLChartUtils.u(c, b);
        }
        static u(a, b) {
            if (a == null || a.d == null) {
                return null;
            }
            let c = new StringBuilder(0);
            let d = new List$1(Array_$type, 0);
            let e = new List$1(String_$type, 0);
            let f = new List$1(CT_TextCharacterProperties_DML.$, 0);
            let g = Environment.newLine;
            let h = 0;
            for (let i of fromEnum(a.d)) {
                for (let j of fromEnum(i.f)) {
                    let k = j.a;
                    let l = (k == null) ? j.c : null;
                    let m = k != null && k.c != null ? k.c.length : l != null ? g.length : 0;
                    let n = k != null ? k.c : l != null ? g : null;
                    if (m == 0 || stringIsNullOrEmpty(n)) {
                        continue;
                    }
                    c.l(n);
                    d.add([h, m]);
                    e.add(n);
                    f.add(k != null ? k.a : null);
                    h += m;
                }
            }
            if (e.count == 0) {
                return null;
            }
            let o = new FormattedString(c.toString());
            o._owner = b;
            for (let p = 0; p < e.count; p++) {
                let q = d._inner[p];
                let r = o._getFont1(q[0], q[1]);
                DMLChartUtils.a6(r, f._inner[p]);
            }
            return o;
        }
        static k(a, b) {
            if (a == null) {
                return null;
            }
            let c = a.e != null ? a.e.b : 0;
            let d = a.i != null ? a.i.b : 4;
            let e = ((() => {
                let $ret = new ErrorBars();
                $ret.direction = DMLChartExtensions.i(c);
                $ret.errorValueType = DMLChartExtensions.j(d);
                return $ret;
            })());
            let f = a.a;
            e.endStyle = f != null && f.k ? 2 : 1;
            if (a.c != null) {
                e.value = a.c.f;
            }
            let g = a.o;
            let h = g != null ? g.a : null;
            if (h != null) {
                e.fill = DMLChartUtils.d(h.n);
                if (h.h.hasValue) {
                    e.widthInPoints = ExcelUtils.cj(ST_LineWidth.m(h.h.value));
                }
            }
            return e;
        }
        static af(a) {
            return DMLChartUtils.ai(a.b);
        }
        static ai(a) {
            if (a.a != null) {
                return DMLChartUtils.ab(a.a);
            }
            else if (a.b != null) {
                return DMLChartUtils.ac(a.b);
            }
            else if (a.c != null) {
                return DMLChartUtils.ad(a.c);
            }
            else if (a.d != null) {
                return DMLChartUtils.ae(a.d);
            }
            else if (a.e != null) {
                return DMLChartUtils.ag(a.e);
            }
            else if (a.f != null) {
                return DMLChartUtils.ah(a.f);
            }
            return null;
        }
        static aj(a, b, c, d = true, e = true) {
            let f = c != null ? c.c() : null;
            let g = toNullable(Number_$type, null);
            if (c != null && c.aa != null) {
                g = toNullable(Number_$type, ST_Percentage.n(ST_PositiveFixedPercentage.b(c.aa.a)));
                if (d) {
                    g = toNullable(Number_$type, (1 - g.value));
                }
            }
            if (a.hasValue) {
                return f != null ? new WorkbookColorInfo(a.value, f) : g.hasValue ? new WorkbookColorInfo(a.value, g.value) : new WorkbookColorInfo(toNullable(Color.$, a.value), toNullable(WorkbookThemeColorType_$type, null), toNullable(Number_$type, null), false, !e);
            }
            else if (b.hasValue) {
                return f != null ? new WorkbookColorInfo(b.value, f) : g.hasValue ? new WorkbookColorInfo(b.value, g.value) : new WorkbookColorInfo(b.value);
            }
            return null;
        }
        static ab(a) {
            let b = ExcelUtils.g0(a.f, a.h, a.g);
            return DMLChartUtils.aj(toNullable(Color.$, b), toNullable(WorkbookThemeColorType_$type, null), a.b, void 0, false);
        }
        static ac(a) {
            let b = XlsxUtilities.bg(a.f);
            return DMLChartUtils.aj(toNullable(Color.$, b), toNullable(WorkbookThemeColorType_$type, null), a.b);
        }
        static ad(a) {
            if (a == null) {
                return null;
            }
            let b = XlsxUtilities.ad(a.g);
            return DMLChartUtils.aj(toNullable(Color.$, null), toNullable(WorkbookThemeColorType_$type, b), a.b);
        }
        static ae(a) {
            let b = Color.u(255, a.h, a.g, a.f);
            return DMLChartUtils.aj(toNullable(Color.$, b), toNullable(WorkbookThemeColorType_$type, null), a.b, void 0, false);
        }
        static ag(a) {
            let b = a.b.c();
            return DMLChartUtils.aj(toNullable(Color.$, a.f.r), toNullable(WorkbookThemeColorType_$type, null), a.b, void 0, false);
        }
        static ah(a) {
            let b = XlsxUtilities.bh(a.f);
            return DMLChartUtils.aj(toNullable(Color.$, b), toNullable(WorkbookThemeColorType_$type, null), a.b);
        }
        static a6(a, b) {
            if (b == null) {
                return;
            }
            a._bold$i = XlsxUtilities.a9(b.d);
            a._italic$i = XlsxUtilities.a9(b.i);
            a.underlineStyle = b.s.hasValue == false ? -1 : DMLChartExtensions.z(b.s.value);
            if (b.q.hasValue == false) {
                a._strikeout$i = toNullable(Boolean_$type, null);
            }
            else {
                a._strikeout$i = toNullable(Boolean_$type, b.q.value == 0 ? false : true);
            }
            a.name = DMLChartUtils.az(b);
            if (b.ad.c != null) {
                a.colorInfo = DMLChartUtils.af(b.ad.c);
            }
            if (b.r.hasValue) {
                a.height = SerializationUtils.o(b.r.value);
            }
        }
        static a5(a, b) {
            if (b == null || a == null) {
                return;
            }
            a._bold$i = XlsxUtilities.a9(b.d);
            a._italic$i = XlsxUtilities.a9(b.i);
            a.underlineStyle = b.s.hasValue == false ? -1 : DMLChartExtensions.z(b.s.value);
            if (b.q.hasValue == false) {
                a._strikeout$i = toNullable(Boolean_$type, null);
            }
            else {
                a._strikeout$i = toNullable(Boolean_$type, b.q.value == 0 ? false : true);
            }
            a.name = DMLChartUtils.az(b);
            if (b.e.hasValue) {
                let c = ST_Percentage.l(b.e.value);
                a.superscriptSubscriptStyle = c < 0 ? 2 : c > 0 ? 1 : 0;
            }
            else {
                a.superscriptSubscriptStyle = -1;
            }
            if (b.ad.c != null) {
                a.colorInfo = DMLChartUtils.af(b.ad.c);
            }
            else {
                a.colorInfo = null;
            }
            if (b.r.hasValue) {
                a.height = SerializationUtils.o(b.r.value);
            }
            else {
                a.height = -1;
            }
        }
        static az(a) {
            let b = DMLChartUtils.a3(a);
            if (stringIsNullOrEmpty(b) == false) {
                return b;
            }
            else if (a.ak != null && stringIsNullOrEmpty(a.ak.d) == false) {
                return a.ak.d;
            }
            else {
                return null;
            }
        }
        static a3(a) {
            if (a.c != null && stringIsNullOrEmpty(a.c.d) == false) {
                return a.c.d;
            }
            else if (a.b != null && stringIsNullOrEmpty(a.b.d) == false) {
                return a.b.d;
            }
            else if (a.a != null && stringIsNullOrEmpty(a.a.d) == false) {
                return a.a.d;
            }
            else {
                return null;
            }
        }
        static e(a) {
            let b = 0;
            if (a.b.b != null && a.b.b.c.hasValue) {
                b = DMLChartExtensions.k(a.b.b.c.value);
            }
            let c = 0;
            if (a.b.a != null && a.b.a.a.hasValue) {
                c = ST_Angle.j(a.b.a.a.value);
            }
            let d = new List$1(GradientStop.$, 2, a.e.count);
            for (let e of fromEnum(a.e)) {
                let f = DMLChartUtils.ai(e.b);
                let g = ST_PositiveFixedPercentage.m(e.d);
                let h = g / 100;
                let i = new GradientStop(f, h);
                d.add(i);
            }
            return new ChartGradientFill(b, d, c);
        }
        static h(a) {
            let b = DMLChartUtils.af(a);
            return new ChartSolidFill(b);
        }
        static b(a) {
            return new ChartEmptyFill();
        }
        static d(a) {
            if (a.e == false) {
                return null;
            }
            if (a.d != null) {
                return DMLChartUtils.b(a.d);
            }
            else if (a.c != null) {
                return DMLChartUtils.h(a.c);
            }
            else if (a.a != null) {
                return DMLChartUtils.e(a.a);
            }
            else {
            }
            return null;
        }
        static c(a) {
            if (a.e == false) {
                return null;
            }
            if (a.d != null) {
                return DMLChartUtils.b(a.d);
            }
            else if (a.c != null) {
                return DMLChartUtils.h(a.c);
            }
            else if (a.a != null) {
                return DMLChartUtils.e(a.a);
            }
            else {
                return null;
            }
        }
        static j(a, b) {
            b = a.a != null ? toNullable(Number_$type, a.a.f) : toNullable(Number_$type, null);
            if (a.a != null) {
                b = toNullable(Number_$type, a.a.f);
            }
            if (a.b != null) {
                let c = a.b.b;
                switch (c) {
                    case 7: return {
                        ret: -9,
                        p1: b
                    };
                    case 6: return {
                        ret: -8,
                        p1: b
                    };
                    case 0: return {
                        ret: -2,
                        p1: b
                    };
                    case 3: return {
                        ret: -5,
                        p1: b
                    };
                    case 4: return {
                        ret: -6,
                        p1: b
                    };
                    case 5: return {
                        ret: -7,
                        p1: b
                    };
                    case 2: return {
                        ret: -4,
                        p1: b
                    };
                    case 1: return {
                        ret: -3,
                        p1: b
                    };
                    case 8: return {
                        ret: -10,
                        p1: b
                    };
                    default: break;
                }
            }
            return {
                ret: -4142,
                p1: b
            };
        }
        static aw(a) {
            switch (a) {
                case -4142: return toNullable(ST_BuiltInUnit_$type, null);
                case -4114: break;
                case -8: return toNullable(ST_BuiltInUnit_$type, 6);
                case -2: return toNullable(ST_BuiltInUnit_$type, 0);
                case -5: return toNullable(ST_BuiltInUnit_$type, 3);
                case -10: return toNullable(ST_BuiltInUnit_$type, 8);
                case -6: return toNullable(ST_BuiltInUnit_$type, 4);
                case -7: return toNullable(ST_BuiltInUnit_$type, 5);
                case -4: return toNullable(ST_BuiltInUnit_$type, 2);
                case -9: return toNullable(ST_BuiltInUnit_$type, 7);
                case -3: return toNullable(ST_BuiltInUnit_$type, 1);
                case 1: return toNullable(ST_BuiltInUnit_$type, 0);
                default: break;
            }
            return toNullable(ST_BuiltInUnit_$type, null);
        }
        static aa(a) {
            switch (a) {
                case 76:
                case 78:
                case 61:
                case 58:
                case 55:
                case 52:
                case 103:
                case 100:
                case 96:
                case 93:
                case 66:
                case 63:
                case 110:
                case 107: return 2;
                case 77:
                case 79:
                case 62:
                case 59:
                case 56:
                case 53:
                case 104:
                case 101:
                case 97:
                case 94:
                case 67:
                case 64:
                case 111:
                case 108: return 0;
                default: return 1;
            }
        }
        static v(a) {
            let b = 0;
            switch (a) {
                case -4151: break;
                case 82:
                    b = 2;
                    break;
                case 81:
                    b = 1;
                    break;
            }
            return ((() => {
                let $ret = new CT_RadarStyle();
                $ret.b = b;
                return $ret;
            })());
        }
        static w(a) {
            let b = a == 17 ? 1 : 2;
            return ((() => {
                let $ret = new CT_RadarStyle();
                $ret.b = b;
                return $ret;
            })());
        }
        static x(a) {
            let b = 0;
            switch (a) {
                case -4169:
                case 74:
                    b = 2;
                    break;
                case 75:
                    b = 1;
                    break;
                case 72:
                    b = 5;
                    break;
                case 73:
                    b = 4;
                    break;
            }
            return ((() => {
                let $ret = new CT_ScatterStyle();
                $ret.b = b;
                return $ret;
            })());
        }
        static y(a) {
            let b = 0;
            switch (a) {
                case 20:
                    b = 5;
                    break;
                case 19:
                    b = 2;
                    break;
            }
            return ((() => {
                let $ret = new CT_ScatterStyle();
                $ret.b = b;
                return $ret;
            })());
        }
        static f(a, b, c) {
            if (a == null) {
                return null;
            }
            let d = a.a;
            return DMLChartUtils.g(d, b, c);
        }
        static g(a, b, c, d = false) {
            if (a == null && d == false) {
                return null;
            }
            let e = a != null ? a.a : null;
            if (e == null && d == false) {
                return null;
            }
            let f = new ChartGridLines(c);
            f._an(c, b);
            if (e != null) {
                DMLChartExtensions.a5(f, e);
            }
            return f;
        }
        static i(a) {
            if (a == null) {
                return null;
            }
            let b = new ChartTickLines(null);
            DMLChartExtensions.a8(b, a);
            return b;
        }
        static p(a, b, c, d) {
            if (a == null) {
                return null;
            }
            let e = null;
            let f = a != null ? a.e : null;
            let g = a != null ? a.a : null;
            if (g != null && g.a != null && CT_UnsignedInt.e(g.a) > 0) {
                e = new List$1(Base.$, 2, g.a.g);
                for (let h of fromEnum(g.e)) {
                    let i = 0;
                    if (h.d != null && ((() => { let j = tryParseNumber(h.d, i); i = j.p1; return j.ret; })())) {
                        e.add1(i);
                    }
                }
            }
            let j = e != null ? e.toArray() : null;
            let k = WorkbookLoadManagerExcel2007._bs(f);
            f = k.p0;
            let l = stringIsNullOrEmpty(f) ? null : Formula._k(f, 1, 0, b.workbook.currentFormat, CultureInfo.invariantCulture, c._bi);
            if (d) {
                return XValues._aa(b, l, j, null, 2);
            }
            else {
                return SeriesValues._u(b, l, j);
            }
        }
        static s(a, b, c) {
            if (a == null) {
                return null;
            }
            let d = null;
            let e = a != null ? a.e : null;
            let f = a != null ? a.a : null;
            if (f.b != null && CT_UnsignedInt.e(f.b) > 0) {
                d = new List$1(Base.$, 2, f.b.g);
                for (let g of fromEnum(f.f)) {
                    d.add1(g.b);
                }
            }
            let h = d != null ? d.toArray() : null;
            let i = WorkbookLoadManagerExcel2007._bs(e);
            e = i.p0;
            let j = stringIsNullOrEmpty(e) ? null : Formula._k(e, 1, 0, b.workbook.currentFormat, CultureInfo.invariantCulture, c._bi);
            return XValues._aa(b, j, h, null, 0);
        }
        static q(a, b, c) {
            if (a == null) {
                return null;
            }
            let d = a != null ? a.e : null;
            let e = null;
            let f = null;
            let g = a != null ? a.a : null;
            let h = g != null ? g.d : null;
            if (h != null) {
                let i = new List$1(Tuple$2.$.specialize(Base.$, Number_$type), 0);
                for (let j = 0; j < h.count; j++) {
                    let k = h._inner[j];
                    for (let l = 0; l < k.a.count; l++) {
                        let m = k.a._inner[l];
                        let n = Tuple.a(Base.$, Number_$type, m.b, j);
                        i.add(n);
                    }
                }
                e = new Array(i.count);
                f = new Array(i.count);
                for (let o = 0; o < i.count; o++) {
                    let p = i._inner[o];
                    e[o] = p.c;
                    f[o] = p.d;
                }
            }
            let q = WorkbookLoadManagerExcel2007._bs(d);
            d = q.p0;
            let r = stringIsNullOrEmpty(d) ? null : Formula._k(d, 1, 0, b.workbook.currentFormat, CultureInfo.invariantCulture, c._bi);
            return XValues._aa(b, r, e, f, 1);
        }
        static r(a, b, c) {
            if (a == null) {
                return null;
            }
            let d = typeCast(IProvideXValuesData_$type, a);
            let e = d.getValues();
            return XValues._aa(b, null, e, null, 0);
        }
        static o(a, b, c, d) {
            if (a == null) {
                return null;
            }
            let e = typeCast(IProvideXValuesData_$type, a);
            let f = e.getValues();
            if (d) {
                return XValues._aa(b, null, f, null, 2);
            }
            else {
                return SeriesValues._u(b, null, f);
            }
        }
        static aq($t, a) {
            let b = new List$1(ISeries_$type, 2, a.count);
            for (let c of fromEnum(a)) {
                b.add(typeCast(ISeries_$type, c));
            }
            return b;
        }
        static n(a, b, c) {
            if (a == null) {
                return null;
            }
            if (a.a != null) {
                let d = a.a.e;
                if (stringIsNullOrEmpty(d) == false) {
                    let e = WorkbookLoadManagerExcel2007._bs(d);
                    d = e.p0;
                    let f = Formula._k(d, 1, 0, b.workbook.currentFormat, CultureInfo.invariantCulture, c._bi);
                    return SeriesName._b(b, f, a.e);
                }
            }
            if (stringIsNullOrEmpty(a.e) == false) {
                return SeriesName._b(b, null, a.e);
            }
            return null;
        }
        static z(a, b, c) {
            if (a == null) {
                return null;
            }
            let d = new CT_SerTx();
            d.a = new CT_StrRef();
            if (a._d != null) {
                let e = c._cv(a._d);
                d.a.e = e;
            }
            let f = a._a();
            if (f != null && f.length > 0) {
                d.a.a = ((() => {
                    let $ret = new CT_StrData();
                    $ret.f = new List$1(CT_StrVal.$, 0);
                    $ret.b = ((() => {
                        let $ret = new CT_UnsignedInt();
                        $ret.g = intSToU(f.length);
                        return $ret;
                    })());
                    return $ret;
                })());
                for (let g = 0; g < f.length; g++) {
                    d.a.a.f.add(((() => {
                        let $ret = new CT_StrVal();
                        $ret.d = intSToU(g);
                        $ret.b = f[g];
                        return $ret;
                    })()));
                }
            }
            return d;
        }
        static l(a, b, c) {
            if (a == null) {
                return null;
            }
            let d = new Legend();
            if (a.a != null) {
                d.overlay = a.a.k;
            }
            let e = -4105;
            let f = a.c;
            if (f != null) {
                let g, h, i, j;
                let k = toNullable(Boolean_$type, null);
                let l = DMLChartUtils.a8(f, e, g, h, i, j, k);
                e = l.p1;
                g = l.p2;
                h = l.p3;
                i = l.p4;
                j = l.p5;
                k = l.p6;
                if (e == -4114) {
                    d.position = 5;
                    d.left = g;
                    d.top = h;
                    d.width = i;
                    d.height = j;
                }
            }
            if (e == -4105) {
                let m = a.e != null ? toNullable(ST_LegendPos_$type, a.e.b) : toNullable(ST_LegendPos_$type, null);
                if (m.hasValue) {
                    d.position = DMLChartExtensions.l(m.value);
                }
                else {
                    d.position = 6;
                }
            }
            let n = a.g;
            let o = n != null ? n.a : null;
            if (n != null) {
                d.fill = DMLChartUtils.c(n.l);
            }
            if (o != null) {
                let p = new ChartBorder(null);
                DMLChartExtensions.a4(p, o, c);
                d.border = p;
            }
            DMLChartUtils.a7(d, a.i, c);
            let q = a.m;
            if (q != null) {
                let r = b.count;
                let s = new Array(r);
                for (let t of fromEnum(q)) {
                    let u = t.b.g;
                    if (u >= r) {
                        continue;
                    }
                    let v = DMLChartUtils.m(t, c);
                    s[u] = v;
                }
                for (let w = 0; w < s.length; w++) {
                    if (s[w] == null) {
                        s[w] = new LegendEntry(null);
                    }
                }
                d._legendEntries$i._ag(s);
            }
            return d;
        }
        static a7(a, b, c) {
            let d = b != null ? b.a : null;
            if (d != null) {
                if (d.af.hasValue) {
                    a.rotation = ST_Angle.j(d.af.value);
                }
                if (d.ar.hasValue) {
                    a.textDirection = DMLChartExtensions.q(d.ar.value);
                }
            }
            let e = b != null && b.d != null && b.d.count > 0 ? b.d._inner[0] : null;
            let f = e != null ? e.c : null;
            let g = e != null ? typeCast(CT_TextCharacterProperties_DML.$, e.a) : null;
            let h = f != null ? typeCast(CT_TextCharacterProperties_DML.$, f.a) : null;
            if (h == null) {
                h = g;
            }
            if (h != null) {
                let i = a._e(c.workbook);
                DMLChartUtils.a5(i, h);
                let j = DMLChartUtils.c(h.ad);
                a.defaultFontFill = j;
            }
        }
        static m(a, b) {
            let c = new LegendEntry(null);
            if (a.a != null && a.a.k) {
                c.del();
            }
            let d = a.e.a;
            let e = c._e(b.workbook);
            let f;
            let g = DMLChartUtils.a9(d, b, e, f);
            f = g.p3;
            c.fontFill = f;
            return c;
        }
        static a8(a, b, c, d, e, f, g) {
            b = -4105;
            g = toNullable(Boolean_$type, null);
            c = d = e = f = 0;
            let h = a != null ? a.a : null;
            if (h != null) {
                g = toNullable(Boolean_$type, h.q != null && h.q.b == 0);
                b = -4114;
                if (h.e != null) {
                    c = h.e.f;
                }
                if (h.g != null) {
                    d = h.g.f;
                }
                if (h.c != null) {
                    e = h.c.f;
                }
                if (h.a != null) {
                    f = h.a.f;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g
            };
        }
        static a9(a, b, c, d) {
            d = null;
            if (a == null) {
                return {
                    p3: d
                };
            }
            let e = a.d != null && a.d.count > 0 ? a.d._inner[0] : null;
            let f = e != null ? e.c : null;
            let g = e != null ? typeCast(CT_TextCharacterProperties_DML.$, e.a) : null;
            let h = f != null ? typeCast(CT_TextCharacterProperties_DML.$, f.a) : null;
            if (h == null) {
                h = g;
            }
            if (h != null) {
                DMLChartUtils.a5(c, h);
                d = DMLChartUtils.c(h.ad);
            }
            return {
                p3: d
            };
        }
        static a4(a, b, c, d, e) {
            c = null;
            e = null;
            d = null;
            let f = b.workbook;
            let g = new CT_SolidColorFillProperties();
            if (a._themeColorType$i.hasValue) {
                c = ((() => {
                    let $ret = new CT_SchemeColor_DML();
                    $ret.g = XlsxUtilities.ai(a._themeColorType$i.value);
                    return $ret;
                })());
                if (a.transform != null) {
                    c.b.ae(a.transform);
                }
                if (a._tint$i.hasValue) {
                    let h = a._tint$i.value;
                    h = Math.min(h, 1);
                    h = Math.max(h, 0);
                    h = (1 - h);
                    c.b.aa = ((() => {
                        let $ret = new CT_PositiveFixedPercentage();
                        $ret.a = ST_PositiveFixedPercentage.d(ST_Percentage.a(h));
                        return $ret;
                    })());
                }
                return {
                    p2: c,
                    p3: d,
                    p4: e
                };
            }
            let i = a._getResolvedColor1(f);
            let j = toNullable(ST_SystemColorVal_$type, null);
            if (a._p) {
                j = XlsxUtilities.bd(i);
                if (j.hasValue) {
                    return {
                        p2: c,
                        p3: d,
                        p4: e
                    };
                }
            }
            e = ((() => {
                let $ret = new CT_SRgbColor_DML();
                $ret.f = new ST_HexColorRGB(1, i);
                return $ret;
            })());
            if (a.transform != null) {
                e.b.ae(a.transform);
            }
            return {
                p2: c,
                p3: d,
                p4: e
            };
        }
        static ao(a) {
            if (a == null || a.d == null || a.d.a == null) {
                return false;
            }
            return a == null ? false : DMLChartUtils.ap(a.d.a);
        }
        static ap(a) {
            if (a == null) {
                return false;
            }
            return a.n.d != null;
        }
        static al(a) {
            return DMLChartUtils.am(a, true);
        }
        static an(a) {
            return DMLChartUtils.am(a, false);
        }
        static am(a, b) {
            if (a == null) {
                return false;
            }
            let c = a.getSeries();
            let d = 0;
            let e = 0;
            for (let f of fromEnum(c)) {
                let g = f.cT_Marker;
                if (g == null) {
                    break;
                }
                if (g.c != null) {
                    if (g.c.a != 0) {
                        d += 1;
                    }
                    else {
                        e += 1;
                    }
                }
                else {
                    d += 1;
                }
            }
            return b ? d == c.count : e == c.count;
        }
        static au(a) {
            let b = a != null ? a.cT_Marker : null;
            let c = b != null ? b.c : null;
            if (c == null) {
                return toNullable(ST_MarkerStyle_$type, null);
            }
            return toNullable(ST_MarkerStyle_$type, c.a);
        }
        static a($t, a) {
            if (a == null) {
                return null;
            }
            let b = new Array(a.count);
            let c = 0;
            for (let d of fromEnum(a)) {
                b[c] = d;
                c += 1;
            }
            return b;
        }
        static av(a) {
            let b = toNullable(Boolean_$type, null);
            let c = a != null ? a.d : null;
            let d = c != null ? c.a : null;
            let e = d != null ? d.n : null;
            let f = e != null ? e.d : null;
            if (f != null) {
                b = toNullable(Boolean_$type, false);
            }
            else if (e != null && e.e) {
                b = toNullable(Boolean_$type, true);
            }
            return b;
        }
    }
    DMLChartUtils.$t = /*@__PURE__*/ markType(DMLChartUtils, 'DMLChartUtils');
    return DMLChartUtils;
})();
/**
 * @hidden
 */
export let DMLChartExtensions = /*@__PURE__*/ (() => {
    class DMLChartExtensions extends Base {
        static b(a) {
            switch (a) {
                case 1: return 2;
                case 3: return 4;
                case 2: return 3;
                case 0: return 1;
            }
            return 0;
        }
        static av(a, b) {
            if (b.type == 3) {
                return toNullable(ST_AxPos_$type, null);
            }
            switch (a) {
                case 1: return toNullable(ST_AxPos_$type, 0);
                case 2: return toNullable(ST_AxPos_$type, 1);
                case 3: return toNullable(ST_AxPos_$type, 2);
                case 4: return toNullable(ST_AxPos_$type, 3);
                default: return toNullable(ST_AxPos_$type, DMLChartExtensions.aa(b));
            }
        }
        static aa(a) {
            let b = (a.axisGroup == 1);
            let c = (b == false);
            let d = (a.type == 1);
            let e = (d == false);
            return b && d ? 0 : c && d ? 3 : b && e ? 1 : 2;
        }
        static y(a) {
            switch (a) {
                case 2: return -4107;
                case 4: return -4117;
                case 3: return -4130;
                case 0: return -4160;
                default: return -4108;
            }
        }
        static aq(a) {
            switch (a) {
                case -4107: return 2;
                case -4117: return 4;
                case -4130: return 3;
                case -4160: return 0;
                default: return 1;
            }
        }
        static z(a) {
            let b = 1;
            switch (a) {
                case 3:
                    b = 2;
                    break;
                case 0:
                    b = 0;
                    break;
                default: break;
            }
            return b;
        }
        static a1(a) {
            switch (a) {
                case -1: return toNullable(ST_TextUnderlineType_$type, null);
                case 2: return toNullable(ST_TextUnderlineType_$type, 3);
                case 0: return toNullable(ST_TextUnderlineType_$type, 0);
                default: return toNullable(ST_TextUnderlineType_$type, 2);
            }
        }
        static k(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                case 0: return 3;
            }
            return 0;
        }
        static a0(a) {
            switch (a) {
                case 3: return toNullable(ST_PathShadeType_$type, 0);
                case 1: return toNullable(ST_PathShadeType_$type, 1);
                case 2: return toNullable(ST_PathShadeType_$type, 2);
                default: return toNullable(ST_PathShadeType_$type, null);
            }
        }
        static ay(a) {
            switch (a) {
                case 0: return toNullable(ST_PresetLineDashVal_$type, 0);
                case 1: return toNullable(ST_PresetLineDashVal_$type, 2);
                case 2: return toNullable(ST_PresetLineDashVal_$type, 4);
                case 3: return toNullable(ST_PresetLineDashVal_$type, 1);
                case 4: return toNullable(ST_PresetLineDashVal_$type, 3);
                case 5: return toNullable(ST_PresetLineDashVal_$type, 5);
                case 6: return toNullable(ST_PresetLineDashVal_$type, 6);
                case 7: return toNullable(ST_PresetLineDashVal_$type, null);
                case 8: return toNullable(ST_PresetLineDashVal_$type, 7);
                case 9: return toNullable(ST_PresetLineDashVal_$type, 9);
                case 10: return toNullable(ST_PresetLineDashVal_$type, 10);
                case 11: return toNullable(ST_PresetLineDashVal_$type, 8);
                default: return toNullable(ST_PresetLineDashVal_$type, null);
            }
        }
        static e(a) {
            switch (a) {
                case 2: return 1;
                case 4: return 2;
                case 1: return 3;
                case 3: return 4;
                case 5: return 5;
                case 6: return 6;
                case 0: return 0;
                case 7: return 8;
                case 9: return 9;
                case 10: return 10;
                case 8: return 11;
                default: return 7;
            }
        }
        static n(a) {
            let b = DMLChartExtensions.e(a);
            return DMLChartExtensions.m(b);
        }
        static az(a) {
            let b = DMLChartExtensions.d(a);
            return DMLChartExtensions.ay(b);
        }
        static m(a) {
            let b = a;
            return b;
        }
        static d(a) {
            let b = a;
            return b;
        }
        static q(a) {
            switch (a) {
                case 4: return 3;
                case 5: return 4;
                case 1: return 1;
                case 2: return 2;
                case 3: return 5;
                case 6: return 6;
                default: return 0;
            }
        }
        static as(a) {
            switch (a) {
                case 3: return 4;
                case 4: return 5;
                case 1: return 1;
                case 2: return 2;
                case 5: return 3;
                case 6: return 6;
                default: return 0;
            }
        }
        static r(a) {
            switch (a) {
                case 0: return 1;
                default: return 0;
            }
        }
        static ar(a) {
            switch (a) {
                case 1: return 0;
                default: return 1;
            }
        }
        static s(a) {
            switch (a) {
                case 0: return 1;
                case 1: return 2;
                default: return 0;
            }
        }
        static at(a) {
            switch (a) {
                case 1: return 0;
                case 0: return 2;
                default: return 1;
            }
        }
        static w(a) {
            switch (a) {
                case 0: break;
                case 1: return 1;
                case 2: return 2;
            }
            return 0;
        }
        static al(a) {
            switch (a) {
                case 0: break;
                case 1: return 1;
                case 2: return 2;
            }
            return 0;
        }
        static aw(a) {
            switch (a) {
                case -4105: return toNullable(ST_Crosses_$type, 0);
                case 2: return toNullable(ST_Crosses_$type, 1);
                case 4: return toNullable(ST_Crosses_$type, 2);
                default: return toNullable(ST_Crosses_$type, null);
            }
        }
        static a(a) {
            switch (a) {
                case 0: break;
                case 2: return 4;
                case 1: return 2;
            }
            return -4105;
        }
        static v(a) {
            switch (a) {
                case 0: return 4;
                case 1: return 2;
                case 3: return 3;
                default: return 4142;
            }
        }
        static ak(a) {
            switch (a) {
                case 4: return 0;
                case 2: return 1;
                case 3: return 3;
                default: return 2;
            }
        }
        static u(a) {
            switch (a) {
                case 0: return -4127;
                case 1: return -4134;
                case 3: return -4142;
                default: return 4;
            }
        }
        static aj(a) {
            switch (a) {
                case -4127: return 0;
                case -4134: return 1;
                case -4142: return 3;
                default: return 2;
            }
        }
        static t(a) {
            switch (a) {
                case 0: return -4108;
                case 2: return -4152;
                default: return -4131;
            }
        }
        static ag(a) {
            switch (a) {
                case -4108: return 0;
                case -4152: return 2;
                default: return 1;
            }
        }
        static a8(a, b) {
            if (b.h.hasValue) {
                a.widthInPoints = ExcelUtils.cj(ST_LineWidth.m(b.h.value));
            }
            a.fill = DMLChartUtils.d(b.n);
        }
        static a5(a, b) {
            if (b == null) {
                return;
            }
            if (b.h.hasValue) {
                a.widthInPoints = ExcelUtils.cj(ST_LineWidth.m(b.h.value));
            }
            a.fill = DMLChartUtils.d(b.n);
        }
        static c(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 5;
                case 3: return 3;
                case 4: return 1;
                case 5: return 2;
                default: return 0;
            }
        }
        static ai(a) {
            switch (a) {
                case 5: return 1;
                case 4: return 0;
                case 3: return 3;
                case 2: return 5;
                case 1: return 4;
                default: return 2;
            }
        }
        static i(a) {
            switch (a) {
                case 2: return 1;
                case 1: return 2;
                default: return 0;
            }
        }
        static ae(a) {
            switch (a) {
                case 1: return 2;
                case 2: return 1;
                default: return 0;
            }
        }
        static j(a) {
            switch (a) {
                case 1: return 0;
                case 2: return 1;
                case 3: return 2;
                default: return 3;
            }
        }
        static af(a) {
            switch (a) {
                case 0: return 1;
                case 1: return 2;
                case 2: return 3;
                default: return 4;
            }
        }
        static o(a) {
            switch (a) {
                case 1: return 8;
                case 2: return -4115;
                case 3: return 2;
                case 4: return -4118;
                case 6: return -4147;
                case 5: return 9;
                case 7: return 1;
                case 8: return 5;
                case 9: return 3;
                case 10: return -4168;
                default: return -4142;
            }
        }
        static ap(a) {
            switch (a) {
                case 8: return 1;
                case -4115: return 2;
                case 2: return 3;
                case -4118: return 4;
                case -4147: return 6;
                case 9: return 5;
                case 1: return 7;
                case 5: return 8;
                case 3: return 9;
                case -4168: return 10;
                default: return 0;
            }
        }
        static p(a) {
            switch (a) {
                case 1: return 2;
                case 0: return 1;
                default: return 3;
            }
        }
        static ah(a) {
            switch (a) {
                case 2: return 1;
                case 1: return 0;
                default: return 2;
            }
        }
        static l(a) {
            switch (a) {
                case 2: return 1;
                case 3: return 2;
                case 4: return 3;
                case 1: return 4;
                default: return 0;
            }
        }
        static ax(a) {
            switch (a) {
                case 6: return toNullable(ST_LegendPos_$type, null);
                case 1: return toNullable(ST_LegendPos_$type, 2);
                case 3: return toNullable(ST_LegendPos_$type, 4);
                case 4: return toNullable(ST_LegendPos_$type, 1);
                case 2: return toNullable(ST_LegendPos_$type, 3);
                default: return toNullable(ST_LegendPos_$type, 0);
            }
        }
        static ab(a) {
            switch (a) {
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 109:
                case 110:
                case 111:
                case 102:
                case 103:
                case 104:
                case 95:
                case 96:
                case 97: break;
                case 51:
                case 52:
                case 53:
                case -4100:
                case 54:
                case 55:
                case 56:
                case 112:
                case 106:
                case 107:
                case 108:
                case 99:
                case 100:
                case 101:
                case 105:
                case 98:
                case 92:
                case 93:
                case 94: return 1;
                default: break;
            }
            return 0;
        }
        static ac(a) {
            switch (a) {
                case 57:
                case 60:
                case 51:
                case 54:
                case 102:
                case 99:
                case 109:
                case 106:
                case 95:
                case 92: break;
                case 58:
                case 61:
                case 52:
                case 55:
                case 103:
                case 100:
                case 110:
                case 107:
                case 96:
                case 93: return 3;
                case 59:
                case 62:
                case 53:
                case 56:
                case 104:
                case 101:
                case 111:
                case 108:
                case 97:
                case 94: return 0;
                case -4100:
                case 112:
                case 105:
                case 98: return 2;
                default: break;
            }
            return 1;
        }
        static a7(a, b, c) {
            DMLChartExtensions.a3(a, b, c);
        }
        static a3(a, b, c) {
            if (b == null) {
                return;
            }
            if (b.h.hasValue) {
                a.widthInPoints = ExcelUtils.cj(ST_LineWidth.m(b.h.value));
            }
            a.fill = DMLChartUtils.d(b.n);
        }
        static a6(a, b, c) {
            DMLChartExtensions.a3(a, b, c);
            if (b != null && b.l.b != null && b.l.b.a.hasValue) {
                a.lineStyle = DMLChartExtensions.n(b.l.b.a.value);
            }
        }
        static a4(a, b, c) {
            if (b.h.hasValue) {
                a.widthInPoints = ExcelUtils.cj(ST_LineWidth.m(b.h.value));
            }
            a.fill = DMLChartUtils.d(b.n);
            if (b.l.b != null && b.l.b.a.hasValue) {
                a.lineStyle = DMLChartExtensions.e(b.l.b.a.value);
            }
            else {
                a.lineStyle = a.fill != null ? 0 : 7;
            }
        }
        static h(a) {
            switch (a) {
                case 1: return 1;
                case 0: return 3;
                default: return 2;
            }
        }
        static ao(a) {
            switch (a) {
                case 1: return 1;
                case 3: return 0;
                default: return 2;
            }
        }
        static an(a, b) {
            let c = b.workbook;
            let d = new CT_SolidColorFillProperties();
            let e = null;
            let f = null;
            let g = null;
            let h = DMLChartUtils.a4(a, b, e, f, g);
            e = h.p2;
            f = h.p3;
            g = h.p4;
            d.b.c = e;
            d.b.f = f;
            d.b.e = g;
            return d;
        }
        static ba(a, b, c) {
            let d = c.workbook;
            a.k = null;
            a.a = null;
            a.l = null;
            a.d = null;
            a.b = null;
            a.c = DMLChartExtensions.an(b, c);
        }
        static a9(a, b, c) {
            let d = c.workbook;
            a.a = null;
            a.b = null;
            a.d = null;
            a.c = null;
            a.e = null;
            a.f = null;
            let e = null;
            let f = null;
            let g = null;
            let h = DMLChartUtils.a4(b, c, e, g, f);
            e = h.p2;
            g = h.p3;
            f = h.p4;
            if (e != null) {
                a.c = e;
            }
            else if (g != null) {
                a.f = g;
            }
            else if (f != null) {
                a.e = f;
            }
        }
        static a2(a) {
            switch (a) {
                case -5004: return toNullable(Boolean_$type, true);
                case -5003: return toNullable(Boolean_$type, false);
                default: return toNullable(Boolean_$type, null);
            }
        }
        static am(a) {
            switch (a) {
                case 0: return 0;
                case 2: return 2;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                default: return 1;
            }
        }
        static x(a) {
            switch (a) {
                case 0: return 0;
                case 2: return 2;
                case 3: return 3;
                case 4: return 4;
                case 5: return 5;
                default: return 1;
            }
        }
        static ad(a) {
            switch (a) {
                case 8: return 8;
                case 9: return 1;
                case 6: return 5;
                case 7: return 7;
                case 10: return 0;
                case 1: return 2;
                case 2: return 3;
                case 3: return 4;
                default: return 6;
            }
        }
        static g(a) {
            switch (a) {
                case 3: return 2;
                case 4: return 3;
                case 2: return 1;
                case 1: return 9;
                case 8: return 8;
                case 0: return 10;
                case 7: return 7;
                case 5: return 6;
                case 6: return 4;
                default: return 0;
            }
        }
        static f(a, b) {
            if (a == 0 || a == 5) {
                return a;
            }
            if (WorksheetChart._f9(b)) {
                switch (b) {
                    case 114: switch (a) {
                        case 7:
                        case 6:
                        case 8:
                        case 9: return a;
                        default: return 8;
                    }
                    case 117:
                    case 116: return 0;
                    case 118: return 1;
                    case 119: return 6;
                    case 120: switch (a) {
                        case 3:
                        case 2:
                        case 4:
                        case 1: return a;
                        default: return 4;
                    }
                    case 115: switch (a) {
                        case 3:
                        case 2:
                        case 4:
                        case 1: return a;
                        default: return 4;
                    }
                }
            }
            let c = WorksheetChart._f6(b);
            let d = WorksheetChart._ge(b);
            if (c && d == false) {
                return 0;
            }
            if (WorksheetChart._f7(b) || WorksheetChart._gl(b) || WorksheetChart._gf(b)) {
                return 0;
            }
            let e;
            let f = false;
            let g = ((() => { let h = WorksheetChart._f8(b, e, f); e = h.p1; f = h.p2; return h.ret; })());
            if (g) {
                switch (a) {
                    case 1:
                    case 2:
                    case 3: return a;
                    case 4: return f ? a : 0;
                    default: return 0;
                }
            }
            if (WorksheetChart._gd(b) || WorksheetChart._gh(b)) {
                switch (a) {
                    case 1:
                    case 7:
                    case 8:
                    case 9: return a;
                    default: return 0;
                }
            }
            if (d) {
                switch (a) {
                    case 1:
                    case 3:
                    case 4:
                    case 10: return a;
                    default: return 0;
                }
            }
            return a;
        }
        static au(a) {
            if (nullableNotEquals(a._bold$i, null)) {
                return true;
            }
            if (WorkbookColorInfo.l_op_Inequality(a.colorInfo, null)) {
                return true;
            }
            if (a.height >= 0) {
                return true;
            }
            if (nullableNotEquals(a._italic$i, null)) {
                return true;
            }
            if (stringIsNullOrEmpty(a.name) == false) {
                return true;
            }
            if (nullableNotEquals(a._strikeout$i, null)) {
                return true;
            }
            if (a.superscriptSubscriptStyle != -1) {
                return true;
            }
            if (a.underlineStyle != -1) {
                return true;
            }
            return false;
        }
        static b1(a, b, c, d, e) {
            CT_LblAlgn.e(b, e, a.a);
            d.k();
        }
        static b2(a, b, c, d, e) {
            CT_LblOffset.f(b, e, a.c);
            d.k();
        }
        static cu(a, b, c, d, e) {
            CT_Skip.e(b, e, a.b);
            d.k();
        }
        static bn(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.bo);
            }
            if (a.b != null) {
                DMLChartExtensions.bj(a.b, b, c, d, DrawingMLChart.bc);
            }
            if (a.c != null) {
                DMLChartExtensions.bo(a.c, b, c, d, DrawingMLChart.by);
            }
            d.k();
        }
        static bl(a, b, c, d, e) {
            CT_CrossBetween.e(b, e, a.a);
            d.k();
        }
        static be(a, b, c, d, e) {
            CT_AxisUnit.e(b, e, a.a);
            d.k();
        }
        static bj(a, b, c, d, e) {
            CT_BuiltInUnit.f(b, e, a.b);
            d.k();
        }
        static bi(a, b, c, d, e) {
            d.p(e, null);
            if (a.p != null) {
                a.p.f(b, c, d, null);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.c1, "c");
            }
            if (a.k != null) {
                DMLChartExtensions.cl(a.k, b, c, d, DrawingMLChart.ei);
            }
            if (a.r != null) {
                for (let f of fromEnum(a.r)) {
                    DMLChartExtensions.bs(f, b, c, d, DrawingMLChart.b4);
                }
            }
            if (a.e != null) {
                DMLChartExtensions.br(a.e, b, c, d, DrawingMLChart.b1);
            }
            if (a.v != null) {
                for (let g of fromEnum(a.v)) {
                    DMLChartExtensions.c3(g, b, c, d, DrawingMLChart.gb);
                }
            }
            if (a.g != null) {
                DMLChartExtensions.bt(a.g, b, c, d, DrawingMLChart.b7);
            }
            if (a.c != null) {
                DMLChartExtensions.bd(a.c, b, c, d, DrawingMLChart.bd);
            }
            if (a.i != null) {
                DMLChartExtensions.cd(a.i, b, c, d, DrawingMLChart.gl);
            }
            if (a.m != null) {
                DMLChartExtensions.ct(a.m, b, c, d, DrawingMLChart.fd);
            }
            if (a.t != null) {
                DMLChartExtensions.fg(a.t, b, c, d, DrawingMLChart.cg);
            }
            d.k();
        }
        static b3(a, b, c, d, e) {
            d.p(e, null);
            if (a.n != null) {
                a.n.f(b, c, d, null);
            }
            if (a.i != null) {
                DMLChartExtensions.b7(a.i, b, c, d, DrawingMLChart.dl);
            }
            if (a.p != null) {
                for (let f of fromEnum(a.p)) {
                    DMLChartExtensions.bs(f, b, c, d, DrawingMLChart.b4);
                }
            }
            if (a.e != null) {
                DMLChartExtensions.br(a.e, b, c, d, DrawingMLChart.b1);
            }
            if (a.t != null) {
                for (let g of fromEnum(a.t)) {
                    DMLChartExtensions.c3(g, b, c, d, DrawingMLChart.gb);
                }
            }
            if (a.g != null) {
                DMLChartExtensions.bt(a.g, b, c, d, DrawingMLChart.b7);
            }
            if (a.c != null) {
                DMLChartExtensions.bd(a.c, b, c, d, DrawingMLChart.bd);
            }
            if (a.k != null) {
                DMLChartExtensions.cd(a.k, b, c, d, DrawingMLChart.gl);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.fu, "c");
            }
            if (a.r != null) {
                DMLChartExtensions.fg(a.r, b, c, d, DrawingMLChart.cg);
            }
            d.k();
        }
        static cn(a, b, c, d, e) {
            d.p(e, null);
            if (a.j != null) {
                a.j.f(b, c, d, null);
            }
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.cd, "c");
            }
            if (a.l != null) {
                for (let f of fromEnum(a.l)) {
                    DMLChartExtensions.bs(f, b, c, d, DrawingMLChart.b4);
                }
            }
            if (a.e != null) {
                DMLChartExtensions.br(a.e, b, c, d, DrawingMLChart.b1);
            }
            if (a.c != null) {
                DMLChartExtensions.bd(a.c, b, c, d, DrawingMLChart.bd);
            }
            if (a.g != null) {
                DMLChartExtensions.cd(a.g, b, c, d, DrawingMLChart.gl);
            }
            if (a.n != null) {
                DMLChartExtensions.fg(a.n, b, c, d, DrawingMLChart.cg);
            }
            d.k();
        }
        static bc(a, b, c, d, e) {
            d.p(e, null);
            if (a.j != null) {
                a.j.f(b, c, d, null);
            }
            if (a.g != null) {
                DMLChartExtensions.cl(a.g, b, c, d, DrawingMLChart.ei);
            }
            if (a.l != null && a.l.count > 0) {
                for (let f of fromEnum(a.l)) {
                    DMLChartExtensions.bs(f, b, c, d, DrawingMLChart.b4);
                }
            }
            if (a.c != null) {
                DMLChartExtensions.br(a.c, b, c, d, DrawingMLChart.b1);
            }
            if (a.r != null) {
                for (let g of fromEnum(a.r)) {
                    DMLChartExtensions.c3(g, b, c, d, DrawingMLChart.gb);
                }
            }
            if (a.n != null) {
                for (let h of fromEnum(a.n)) {
                    DMLChartExtensions.bt(h, b, c, d, DrawingMLChart.b7);
                }
            }
            if (a.a != null) {
                DMLChartExtensions.bd(a.a, b, c, d, DrawingMLChart.bd);
            }
            if (a.e != null) {
                DMLChartExtensions.cd(a.e, b, c, d, DrawingMLChart.gl);
            }
            if (a.p != null) {
                DMLChartExtensions.fg(a.p, b, c, d, DrawingMLChart.cg);
            }
            d.k();
        }
        static cy(a, b, c, d, e) {
            d.p(e, null);
            if (a.f != null) {
                a.f.f(b, c, d, null);
            }
            if (a.a != null) {
                DMLChartExtensions.bd(a.a, b, c, d, DrawingMLChart.bd);
            }
            if (a.c != null) {
                DMLChartExtensions.cd(a.c, b, c, d, DrawingMLChart.gl);
            }
            if (a.h != null) {
                DMLChartExtensions.fg(a.h, b, c, d, DrawingMLChart.cg);
            }
            d.k();
        }
        static cq(a, b, c, d, e) {
            d.p(e, null);
            if (a.l != null) {
                a.l.f(b, c, d, null);
            }
            if (a.g != null) {
                DMLChartExtensions.b7(a.g, b, c, d, DrawingMLChart.dl);
            }
            if (a.n != null) {
                for (let f of fromEnum(a.n)) {
                    DMLChartExtensions.bs(f, b, c, d, DrawingMLChart.b4);
                }
            }
            if (a.e != null) {
                DMLChartExtensions.br(a.e, b, c, d, DrawingMLChart.b1);
            }
            if (a.t != null) {
                for (let g of fromEnum(a.t)) {
                    DMLChartExtensions.c3(g, b, c, d, DrawingMLChart.gb);
                }
            }
            if (a.p != null && a.p._inner[0] != null) {
                DMLChartExtensions.bt(a.p._inner[0], b, c, d, DrawingMLChart.b7);
            }
            if (a.c != null) {
                DMLChartExtensions.bd(a.c, b, c, d, DrawingMLChart.gu);
            }
            if (a.i != null) {
                DMLChartExtensions.cd(a.i, b, c, d, DrawingMLChart.gx);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.fu, "c");
            }
            if (a.r != null) {
                DMLChartExtensions.fg(a.r, b, c, d, DrawingMLChart.cg);
            }
            d.k();
        }
        static bs(a, b, c, d, e) {
            d.p(e, null);
            if (a.g != null) {
                a.g.i(b, c, d, DrawingMLChart.cz, "c");
            }
            if (a.c != null) {
                a.c.q(b, c, d, DrawingMLChart.c1, "c");
            }
            if (a.i != null) {
                DMLChartExtensions.b7(a.i, b, c, d, DrawingMLChart.dl);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.a8, "c");
            }
            if (a.e != null) {
                a.e.i(b, c, d, DrawingMLChart.cd, "c");
            }
            if (a.m != null) {
                DMLExtensions.a5(a.m, b, c, d, DrawingMLChart.fx);
            }
            if (a.k != null) {
                DMLChartExtensions.cl(a.k, b, c, d, DrawingMLChart.ei);
            }
            d.k();
        }
        static cl(a, b, c, d, e) {
            d.p(e, null);
            if (a.c != null) {
                a.c.q(b, c, d, DrawingMLChart.ar, "c");
            }
            if (a.e != null) {
                a.e.q(b, c, d, DrawingMLChart.as, "c");
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.aq, "c");
            }
            if (a.g != null) {
                CT_PictureFormat.e(b, DrawingMLChart.eh, a.g.a);
                d.k();
            }
            if (a.i != null) {
                CT_PictureStackUnit.e(b, DrawingMLChart.ej, a.i.a);
                d.k();
            }
            d.k();
        }
        static by(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.b6(a.a, b, c, d, DrawingMLChart.dk);
            }
            d.k();
        }
        static b6(a, b, c, d, e) {
            d.p(e, null);
            if (a.q != null) {
                DMLChartExtensions.b0(a.q, b, c, d, DrawingMLChart.c4);
            }
            if (a.m != null) {
                DMLChartExtensions.bz(a.m, b, c, d, DrawingMLChart.gt);
            }
            if (a.o != null) {
                DMLChartExtensions.bz(a.o, b, c, d, DrawingMLChart.gw);
            }
            if (a.k != null) {
                DMLChartExtensions.bz(a.k, b, c, d, DrawingMLChart.gr);
            }
            if (a.i != null) {
                DMLChartExtensions.bz(a.i, b, c, d, DrawingMLChart.cw);
            }
            if (a.e != null) {
                a.e.i(b, c, d, DrawingMLChart.gs);
            }
            if (a.g != null) {
                a.g.i(b, c, d, DrawingMLChart.gv);
            }
            if (a.c != null) {
                a.c.i(b, c, d, DrawingMLChart.gp);
            }
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.ct);
            }
            d.k();
        }
        static b0(a, b, c, d, e) {
            CT_LayoutTarget.f(b, e, a.b);
            d.k();
        }
        static bz(a, b, c, d, e) {
            CT_LayoutMode.f(b, e, a.b);
            d.k();
        }
        static c6(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.cw(a.a, b, c, d, DrawingMLChart.f1);
            }
            if (a.b != null) {
                a.b.e(b, c, d, DrawingMLChart.ez);
            }
            d.k();
        }
        static cw(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                DMLExtensions.cz(a.e, b, c, d, DrawingMLChart.ch, "c");
            }
            if (a.a != null) {
                DMLChartExtensions.cv(a.a, b, c, d, DrawingMLChart.fz);
            }
            d.k();
        }
        static cv(a, b, c, d, e) {
            d.p(e, null);
            if (a.f != null) {
                let f = ((() => {
                    let $ret = new CT_UnsignedInt();
                    $ret.g = intSToU(a.f.count);
                    return $ret;
                })());
                f.i(b, c, d, DrawingMLChart.ev, "c");
                for (let g of fromEnum(a.f)) {
                    DMLChartExtensions.cx(g, b, c, d, DrawingMLChart.eu);
                }
            }
            d.k();
        }
        static cx(a, b, c, d, e) {
            CT_StrVal.g(b, e, a.d);
            if (a.b != null) {
                DMLExtensions.cz(a.b, b, c, d, DrawingMLChart.gk, "c");
            }
            d.k();
        }
        static bo(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.by(a.a, b, c, d, DrawingMLChart.c3);
            }
            if (a.c != null) {
                DMLChartExtensions.c6(a.c, b, c, d, DrawingMLChart.ge);
            }
            if (a.e != null) {
                DMLExtensions.a5(a.e, b, c, d, DrawingMLChart.fx);
            }
            if (a.g != null) {
                a.g.e(b, c, d, DrawingMLChart.gf);
            }
            d.k();
        }
        static cp(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                DMLChartExtensions.cr(a.e, b, c, d, DrawingMLChart.e5);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.gn, "c");
            }
            if (a.k != null) {
                for (let f = 0; f < a.k.count; f++) {
                    DMLChartExtensions.cq(a.k._inner[f], b, c, d, DrawingMLChart.fa);
                }
            }
            if (a.c != null) {
                DMLChartExtensions.br(a.c, b, c, d, DrawingMLChart.b1);
            }
            if (a.g != null) {
                for (let g of fromEnum(a.g)) {
                    g.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static cr(a, b, c, d, e) {
            CT_ScatterStyle.f(b, e, a.b);
            d.k();
        }
        static cs(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.cw(a.a, b, c, d, DrawingMLChart.f1);
            }
            if (a.e != null) {
                DMLExtensions.cz(a.e, b, c, d, DrawingMLChart.gk, "c");
            }
            d.k();
        }
        static br(a, b, c, d, e) {
            d.p(e, null);
            if (a.f != null && a.f.count > 0) {
                for (let f of fromEnum(a.f)) {
                    DMLChartExtensions.bp(f, b, c, d, DrawingMLChart.bz);
                }
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.bs, "c");
            }
            if (a.e != null) {
                a.e.f(b, c, d, null);
            }
            if (a.b != null && a.b.e.count > 0) {
                d.p(DrawingMLChart.cg, "c");
                for (let g of fromEnum(a.b.e)) {
                    g.d(b, c, d, CT_DLbls.$);
                }
                d.k();
            }
            d.k();
        }
        static c3(a, b, c, d, e) {
            d.p(e, null);
            if (a.w != null) {
                DMLExtensions.cz(a.w, b, c, d, DrawingMLChart.dw, "c");
            }
            if (a.s != null) {
                DMLExtensions.a5(a.s, b, c, d, DrawingMLChart.fx);
            }
            if (a.q != null) {
                DMLChartExtensions.c5(a.q, b, c, d, DrawingMLChart.gd);
            }
            if (a.k != null) {
                DMLChartExtensions.ch(a.k, b, c, d, DrawingMLChart.d9);
            }
            if (a.m != null) {
                DMLChartExtensions.cj(a.m, b, c, d, DrawingMLChart.ef);
            }
            if (a.g != null) {
                a.g.i(b, c, d, DrawingMLChart.cp);
            }
            if (a.e != null) {
                a.e.i(b, c, d, DrawingMLChart.a1);
            }
            if (a.i != null) {
                a.i.i(b, c, d, DrawingMLChart.c0);
            }
            if (a.c != null) {
                a.c.q(b, c, d, DrawingMLChart.bw, "c");
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.bv, "c");
            }
            if (a.o != null) {
                DMLChartExtensions.c4(a.o, b, c, d, DrawingMLChart.gc);
            }
            d.k();
        }
        static ch(a, b, c, d, e) {
            CT_Order.f(b, e, a.b);
            d.k();
        }
        static bt(a, b, c, d, e) {
            d.p(e, null);
            if (a.g != null) {
                DMLChartExtensions.bv(a.g, b, c, d, DrawingMLChart.b9);
            }
            if (a.e != null) {
                DMLChartExtensions.bu(a.e, b, c, d, DrawingMLChart.b8);
            }
            if (a.i != null) {
                DMLChartExtensions.bw(a.i, b, c, d, DrawingMLChart.ca);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.dz, "c");
            }
            if (a.m != null) {
                DMLChartExtensions.cd(a.m, b, c, d, DrawingMLChart.er);
            }
            if (a.k != null) {
                DMLChartExtensions.cd(a.k, b, c, d, DrawingMLChart.dt);
            }
            if (a.c != null) {
                a.c.i(b, c, d, DrawingMLChart.gl);
            }
            if (a.o != null) {
                DMLExtensions.a5(a.o, b, c, d, DrawingMLChart.fx);
            }
            d.k();
        }
        static bd(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.cb(a.a, b, c, d, DrawingMLChart.dv);
            }
            if (a.c != null) {
                DMLChartExtensions.cf(a.c, b, c, d, DrawingMLChart.d4);
            }
            if (a.b != null) {
                DMLChartExtensions.cc(a.b, b, c, d, DrawingMLChart.d3);
            }
            if (a.e != null) {
                DMLChartExtensions.cw(a.e, b, c, d, DrawingMLChart.f1);
            }
            if (a.d != null) {
                DMLChartExtensions.cv(a.d, b, c, d, DrawingMLChart.f0);
            }
            d.k();
        }
        static cd(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                DMLChartExtensions.cf(a.b, b, c, d, DrawingMLChart.d4);
            }
            if (a.a != null) {
                DMLChartExtensions.cc(a.a, b, c, d, DrawingMLChart.d3);
            }
            d.k();
        }
        static ct(a, b, c, d, e) {
            CT_Shape_Chart.f(b, e, a.b);
            d.k();
        }
        static e9(a, b, c, d, e) {
            d.p(e, null);
            if (a.c != null) {
                DMLChartExtensions.fb(a.c, b, c, d, DrawingMLMain.bh);
            }
            if (a.d != null) {
                DMLChartExtensions.fb(a.d, b, c, d, DrawingMLMain.ei);
            }
            if (a.a != null) {
                DMLExtensions.bx(a.a, b, c, d, DrawingMLMain.ay);
            }
            if (a.b != null) {
                DMLExtensions.b1(a.b, b, c, d, DrawingMLMain.c3);
            }
            if (a.e != null) {
                DMLExtensions.b9(a.e, b, c, d, DrawingMLMain.hx);
            }
            if (a.f != null) {
                DMLExtensions.ck(a.f, b, c, d, DrawingMLMain.hh);
            }
            d.k();
        }
        static dk(a, b, c, d, e) {
            CT_BlipFillProperties_DML.i(b, e, a.b, a.c);
            if (a.d != null) {
                DMLChartExtensions.dj(a.d, b, c, d, DrawingMLMain.bt);
            }
            if (a.a != null) {
                DMLExtensions.ct(a.a, b, c, d, DrawingMLMain.i0);
            }
            if (a.g != null) {
                a.g.d(b, c, d, null);
            }
            d.k();
        }
        static d7(a, b, c, d, e) {
            CT_PatternFillProperties.j(b, e, a.e);
            if (a.c != null) {
                a.c.d(b, c, d, DrawingMLMain.dw);
            }
            if (a.a != null) {
                a.a.d(b, c, d, DrawingMLMain.bo);
            }
            d.k();
        }
        static dt(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.dl(a.a, b, c, d, DrawingMLMain.by);
            }
            if (a.c != null) {
                a.c.g(b, c, d, DrawingMLMain.dy);
            }
            if (a.e != null) {
                a.e.h(b, c, d, DrawingMLMain.ej);
            }
            if (a.g != null) {
                a.g.n(b, c, d, DrawingMLMain.fg);
            }
            if (a.i != null) {
                a.i.ag(b, c, d, DrawingMLMain.hd);
            }
            if (a.k != null) {
                a.k.m(b, c, d, DrawingMLMain.hr);
            }
            if (a.m != null) {
                DMLChartExtensions.eb(a.m, b, c, d, DrawingMLMain.h1);
            }
            if (a.o != null) {
                DMLChartExtensions.ef(a.o, b, c, d, DrawingMLMain.io);
            }
            d.k();
        }
        static ds(a, b, c, d, e) {
            CT_EffectContainer.m(b, e, a.i, a.g);
            if (a.c != null) {
                a.c.af(b, c, d, null);
            }
            d.k();
        }
        static ed(a, b, c, d, e) {
            d.p(e, null);
            if (a.c != null) {
                DMLChartExtensions.dm(a.c, b, c, d, DrawingMLMain.ce);
            }
            if (a.e != null) {
                DMLChartExtensions.d4(a.e, b, c, d, DrawingMLMain.fu);
            }
            if (a.a != null) {
                DMLChartExtensions.df(a.a, b, c, d, DrawingMLMain.bj);
            }
            if (a.g != null) {
                a.g.d(b, c, d, DrawingMLMain.ds);
            }
            d.k();
        }
        static ee(a, b, c, d, e) {
            CT_Shape3D.z(b, e, a.p, a.r, a.t, a.v);
            if (a.c != null) {
                DMLChartExtensions.dg(a.c, b, c, d, DrawingMLMain.bn);
            }
            if (a.a != null) {
                DMLChartExtensions.dg(a.a, b, c, d, DrawingMLMain.bm);
            }
            if (a.g != null) {
                a.g.d(b, c, d, DrawingMLMain.dv);
            }
            if (a.e != null) {
                a.e.d(b, c, d, DrawingMLMain.ct);
            }
            if (a.i != null) {
                a.i.d(b, c, d, DrawingMLMain.ds);
            }
            d.k();
        }
        static d5(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.c(b, c, d, null);
            }
            d.k();
        }
        static fb(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null && a.b.count > 0) {
                d.p(DrawingMLMain.ei, "a");
                for (let f of fromEnum(a.b)) {
                    DMLExtensions.b7(f, b, c, d, DrawingMLMain.eh);
                }
                d.k();
            }
            d.k();
        }
        static e8(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static fd(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static fc(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static dy(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static d3(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static dj(a, b, c, d, e) {
            CT_Blip_DML.z(b, e, a.c);
            if (a.f != null) {
                DMLChartExtensions.c8(a.f, b, c, d, DrawingMLMain.a3);
            }
            if (a.g != null) {
                DMLChartExtensions.c9(a.g, b, c, d, DrawingMLMain.a4);
            }
            if (a.h != null) {
                DMLChartExtensions.da(a.h, b, c, d, DrawingMLMain.a5);
            }
            if (a.i != null) {
                a.i.d(b, c, d, DrawingMLMain.a6);
            }
            if (a.j != null) {
                DMLExtensions.e(a.j, b, c, d, DrawingMLMain.a7);
            }
            if (a.k != null) {
                DMLChartExtensions.dc(a.k, b, c, d, DrawingMLMain.a8);
            }
            if (a.l != null) {
                DMLChartExtensions.de(a.l, b, c, d, DrawingMLMain.bb);
            }
            if (a.m != null) {
                DMLChartExtensions.dh(a.m, b, c, d, DrawingMLMain.bq);
            }
            if (a.o != null) {
                DMLChartExtensions.dl(a.o, b, c, d, DrawingMLMain.by);
            }
            if (a.p != null) {
                DMLChartExtensions.dp(a.p, b, c, d, DrawingMLMain.ck);
            }
            if (a.q != null) {
                a.q.d(b, c, d, DrawingMLMain.cm);
            }
            if (a.r != null) {
                a.r.d(b, c, d, DrawingMLMain.de);
            }
            if (a.s != null) {
                a.s.g(b, c, d, DrawingMLMain.dy);
            }
            if (a.t != null) {
                DMLChartExtensions.d0(a.t, b, c, d, DrawingMLMain.ep);
            }
            if (a.u != null) {
                DMLChartExtensions.d1(a.u, b, c, d, DrawingMLMain.e7);
            }
            if (a.v != null) {
                DMLExtensions.ar(a.v, b, c, d, DrawingMLMain.f5);
            }
            if (a.x != null) {
                DMLExtensions.bu(a.x, b, c, d, DrawingMLMain.jn);
            }
            if (a.w != null) {
                a.w.d(b, c, d, DrawingMLMain.ds);
            }
            d.k();
        }
        static c8(a, b, c, d, e) {
            CT_AlphaBiLevelEffect.e(b, e, a.a);
            d.k();
        }
        static c9(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static da(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static db(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static dc(a, b, c, d, e) {
            CT_AlphaModulateFixedEffect.f(b, e, a.b);
            d.k();
        }
        static de(a, b, c, d, e) {
            CT_AlphaReplaceEffect.e(b, e, a.a);
            d.k();
        }
        static dh(a, b, c, d, e) {
            CT_BiLevelEffect.e(b, e, a.a);
            d.k();
        }
        static dl(a, b, c, d, e) {
            CT_BlurEffect.i(b, e, a.c, a.e);
            d.k();
        }
        static dp(a, b, c, d, e) {
            CT_ColorChangeEffect.j(b, e, a.f);
            if (a.a != null) {
                a.a.d(b, c, d, DrawingMLMain.cl);
            }
            if (a.c != null) {
                a.c.d(b, c, d, DrawingMLMain.co);
            }
            d.k();
        }
        static dq(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static dr(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static dw(a, b, c, d, e) {
            CT_FillOverlayEffect.h(b, e, a.c);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static d0(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static d1(a, b, c, d, e) {
            CT_HSLEffect.l(b, e, a.d, a.f, a.h);
            d.k();
        }
        static du(a, b, c, d, e) {
            CT_EffectReference.e(b, e, a.a);
            d.k();
        }
        static dd(a, b, c, d, e) {
            CT_AlphaOutsetEffect.f(b, e, a.b);
            d.k();
        }
        static di(a, b, c, d, e) {
            CT_BlendEffect.g(b, e, a.c);
            if (a.a != null) {
                DMLChartExtensions.ds(a.a, b, c, d, DrawingMLMain.cs);
            }
            d.k();
        }
        static dv(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static dz(a, b, c, d, e) {
            CT_GlowEffect.i(b, e, a.e);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static d2(a, b, c, d, e) {
            CT_InnerShadowEffect.o(b, e, a.g, a.i, a.k);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static d6(a, b, c, d, e) {
            CT_OuterShadowEffect.ah(b, e, a.n, a.p, a.r, a.t, a.v, a.x, a.z, a.ab, a.ad);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static d9(a, b, c, d, e) {
            CT_PresetShadowEffect.n(b, e, a.h, a.j, a.d);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static eb(a, b, c, d, e) {
            CT_ReflectionEffect.as(b, e, a.o, a.q, a.s, a.u, a.w, a.y, a.aa, a.ac, a.ae, a.ag, a.ai, a.ak, a.am, a.ao);
            d.k();
        }
        static ec(a, b, c, d, e) {
            CT_RelativeOffsetEffect.i(b, e, a.c, a.e);
            d.k();
        }
        static ef(a, b, c, d, e) {
            CT_SoftEdgesEffect.e(b, e, a.a);
            d.k();
        }
        static fa(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null && a.b.count > 0) {
                for (let f of fromEnum(a.b)) {
                    DMLExtensions.b3(f, b, c, d, DrawingMLMain.dd);
                }
            }
            d.k();
        }
        static ff(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static fe(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static dm(a, b, c, d, e) {
            CT_Camera.m(b, e, a.g, a.i, a.d);
            if (a.b != null) {
                DMLChartExtensions.eg(a.b, b, c, d, DrawingMLMain.h4);
            }
            d.k();
        }
        static d4(a, b, c, d, e) {
            CT_LightRig.i(b, e, a.c, a.e);
            if (a.a != null) {
                DMLChartExtensions.eg(a.a, b, c, d, DrawingMLMain.h4);
            }
            d.k();
        }
        static df(a, b, c, d, e) {
            d.p(e, null);
            if (a.c != null) {
                DMLChartExtensions.d8(a.c, b, c, d, DrawingMLMain.bd);
            }
            if (a.e != null) {
                DMLChartExtensions.e7(a.e, b, c, d, DrawingMLMain.g4);
            }
            if (a.g != null) {
                DMLChartExtensions.e7(a.g, b, c, d, DrawingMLMain.jz);
            }
            if (a.a != null) {
                a.a.d(b, c, d, DrawingMLMain.ds);
            }
            d.k();
        }
        static eg(a, b, c, d, e) {
            CT_SphereCoords.i(b, e, a.a, a.c, a.e);
            d.k();
        }
        static d8(a, b, c, d, e) {
            CT_Point3D.i(b, e, a.a, a.c, a.e);
            d.k();
        }
        static e7(a, b, c, d, e) {
            CT_Vector3D.j(b, e, a.b, a.d, a.f);
            d.k();
        }
        static dg(a, b, c, d, e) {
            CT_Bevel.m(b, e, a.e, a.g, a.i);
            d.k();
        }
        static dn(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static ck(a, b, c, d, e) {
            CT_PictureFormat.e(b, e, a.a);
            d.k();
        }
        static cm(a, b, c, d, e) {
            CT_PictureStackUnit.e(b, e, a.a);
            d.k();
        }
        static b7(a, b, c, d, e) {
            if (a.j.hasValue) {
                CT_Marker_Chart.l(b, e, a.j.value);
                d.k();
                return;
            }
            d.p(e, null);
            if (a.c != null) {
                DMLChartExtensions.b9(a.c, b, c, d, DrawingMLChart.f5);
            }
            if (a.a != null) {
                DMLChartExtensions.b8(a.a, b, c, d, DrawingMLChart.fs);
            }
            if (a.e != null) {
                DMLExtensions.a5(a.e, b, c, d, DrawingMLChart.fx);
            }
            d.k();
        }
        static b9(a, b, c, d, e) {
            CT_MarkerStyle.e(b, e, a.a);
            d.k();
        }
        static b8(a, b, c, d, e) {
            CT_MarkerSize.f(b, e, a.b);
            d.k();
        }
        static bp(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.i(b, c, d, DrawingMLChart.cz, "c");
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.bs, "c");
            }
            if (a.d != null) {
                a.d.f(b, c, d, null);
            }
            if (a.e != null && a.e.count > 0) {
                d.p(DrawingMLChart.cg, "c");
                for (let f of fromEnum(a.e)) {
                    f.d(b, c, d, CT_DLbl.$);
                }
                d.k();
            }
            d.k();
        }
        static ce(a, b, c, d, e) {
            CT_NumFmt_Chart.g(b, e, a.c, a.a);
            d.k();
        }
        static ej(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLExtensions.bd(a.a, b, c, d, DrawingMLMain.b0);
            }
            if (a.b != null) {
                DMLChartExtensions.es(a.b, b, c, d, DrawingMLMain.f2);
            }
            if (a.d != null) {
                for (let f of fromEnum(a.d)) {
                    DMLChartExtensions.ew(f, b, c, d, DrawingMLMain.he);
                }
            }
            d.k();
        }
        static bq(a, b, c, d, e) {
            CT_DLblPos.e(b, e, a.a);
            d.k();
        }
        static bk(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLExtensions.a5(a.a, b, c, d, DrawingMLChart.fx);
            }
            d.k();
        }
        static es(a, b, c, d, e) {
            d.p(e, null);
            if (a.c != null) {
                a.c.ac(b, c, d, DrawingMLMain.c5);
            }
            if (a.e != null) {
                a.e.ac(b, c, d, DrawingMLMain.f9);
            }
            if (a.g != null) {
                a.g.ac(b, c, d, DrawingMLMain.ga);
            }
            if (a.i != null) {
                a.i.ac(b, c, d, DrawingMLMain.gb);
            }
            if (a.k != null) {
                a.k.ac(b, c, d, DrawingMLMain.gc);
            }
            if (a.m != null) {
                a.m.ac(b, c, d, DrawingMLMain.gd);
            }
            if (a.o != null) {
                a.o.ac(b, c, d, DrawingMLMain.ge);
            }
            if (a.q != null) {
                a.q.ac(b, c, d, DrawingMLMain.gf);
            }
            if (a.s != null) {
                a.s.ac(b, c, d, DrawingMLMain.gg);
            }
            if (a.u != null) {
                a.u.ac(b, c, d, DrawingMLMain.gh);
            }
            if (a.a != null) {
                a.a.d(b, c, d, DrawingMLMain.ds);
            }
            d.k();
        }
        static ew(a, b, c, d, e) {
            d.p(e, null);
            if (a.c != null) {
                a.c.ac(b, c, d, DrawingMLMain.hm);
            }
            if (a.a != null) {
                a.a.aq(b, c, d, DrawingMLMain.dn);
            }
            if (a.f != null) {
                for (let f of fromEnum(a.f)) {
                    f.e(b, c, d, null);
                }
            }
            d.k();
        }
        static ea(a, b, c, d, e) {
            CT_PresetTextShape.g(b, e, a.a);
            if (a.c != null) {
                for (let f of fromEnum(a.c)) {
                    DMLChartExtensions.ea(a, b, c, d, DrawingMLMain.bh);
                }
            }
            d.k();
        }
        static et(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static ev(a, b, c, d, e) {
            CT_TextNormalAutofit.i(b, e, a.c, a.e);
            d.k();
        }
        static ey(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static dx(a, b, c, d, e) {
            CT_FlatText.f(b, e, a.b);
            d.k();
        }
        static ez(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.e0(a.a, b, c, d, DrawingMLMain.ix);
            }
            if (a.b != null) {
                DMLChartExtensions.e1(a.b, b, c, d, DrawingMLMain.iy);
            }
            d.k();
        }
        static ek(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static el(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static em(a, b, c, d, e) {
            CT_TextBulletSizePercent.e(b, e, a.a);
            d.k();
        }
        static en(a, b, c, d, e) {
            CT_TextBulletSizePoint.e(b, e, a.a);
            d.k();
        }
        static eo(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static eu(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static eh(a, b, c, d, e) {
            CT_TextAutonumberBullet.h(b, e, a.d, a.a);
            d.k();
        }
        static ep(a, b, c, d, e) {
            CT_TextCharBullet.e(b, e, a.a);
            d.k();
        }
        static ei(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.dj(a.a, b, c, d, DrawingMLMain.bt);
            }
            d.k();
        }
        static e3(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null && a.e.count > 0) {
                d.p(DrawingMLMain.je, "a");
                for (let f of fromEnum(a.e)) {
                    DMLChartExtensions.e2(f, b, c, d, DrawingMLMain.jd);
                }
                d.k();
            }
            d.k();
        }
        static e0(a, b, c, d, e) {
            CT_TextSpacingPercent.e(b, e, a.a);
            d.k();
        }
        static e1(a, b, c, d, e) {
            CT_TextSpacingPoint.e(b, e, a.a);
            d.k();
        }
        static e2(a, b, c, d, e) {
            CT_TextTabStop.g(b, e, a.a, a.c);
            d.k();
        }
        static e6(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static e4(a, b, c, d, e) {
            d.p(e, null);
            d.k();
        }
        static e5(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.h(b, c, d, null);
            }
            d.k();
        }
        static ex(a, b, c, d, e) {
            CT_TextParagraphProperties_DML.ad(b, e, a.c, a.d, a.e, a.f, a.g, ST_TextIndent.g(a.h), a.i, ST_TextIndentLevelType.g(a.j), ST_TextMargin.g(a.k), ST_TextMargin.g(a.l), a.m);
            if (a.p != null) {
                a.p.f(b, c, d, DrawingMLMain.fz);
            }
            if (a.r != null) {
                a.r.f(b, c, d, DrawingMLMain.iu);
            }
            if (a.q != null) {
                a.q.f(b, c, d, DrawingMLMain.it);
            }
            if (a.aa != null && a.aa.count > 0) {
                d.p(DrawingMLMain.je, "a");
                for (let f of fromEnum(a.aa)) {
                    DMLChartExtensions.e2(f, b, c, d, DrawingMLMain.jd);
                }
                d.k();
            }
            let g = typeCast(CT_TextCharacterProperties_DML.$, a.a);
            if (g != null) {
                g.aq(b, c, d, DrawingMLMain.c6);
            }
            if (a.v != null) {
                a.v.d(b, c, d, null);
            }
            if (a.x != null) {
                a.x.e(b, c, d, null);
            }
            if (a.z != null) {
                a.z.d(b, c, d, null);
            }
            if (a.t != null) {
                a.t.f(b, c, d, null);
            }
            d.k();
        }
        static er(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                a.a.aq(b, c, d, DrawingMLMain.h8);
            }
            d.k();
        }
        static eq(a, b, c, d, e) {
            CT_TextField.m(b, e, a.j, a.e);
            if (a.a != null) {
                a.a.aq(b, c, d, DrawingMLMain.h8);
            }
            if (a.c != null) {
                a.c.ac(b, c, d, DrawingMLMain.hm);
            }
            if (a.g != null) {
                DMLExtensions.cz(a.g, b, c, d, DrawingMLMain.jb, "a");
            }
            d.k();
        }
        static c5(a, b, c, d, e) {
            CT_TrendlineType.f(b, e, a.b);
            d.k();
        }
        static cj(a, b, c, d, e) {
            CT_Period.f(b, e, a.b);
            d.k();
        }
        static c4(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.by(a.a, b, c, d, DrawingMLChart.c3);
            }
            if (a.e != null) {
                DMLChartExtensions.c6(a.e, b, c, d, DrawingMLChart.ge);
            }
            if (a.c != null) {
                DMLChartExtensions.ce(a.c, b, c, d, DrawingMLChart.d2);
            }
            if (a.g != null) {
                DMLExtensions.a5(a.g, b, c, d, DrawingMLChart.fx);
            }
            if (a.i != null) {
                a.i.e(b, c, d, DrawingMLChart.gf);
            }
            d.k();
        }
        static bv(a, b, c, d, e) {
            CT_ErrDir.e(b, e, a.a);
            d.k();
        }
        static bu(a, b, c, d, e) {
            CT_ErrBarType.f(b, e, a.b);
            d.k();
        }
        static bw(a, b, c, d, e) {
            CT_ErrValType.f(b, e, a.b);
            d.k();
        }
        static cf(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                DMLExtensions.cz(a.e, b, c, d, DrawingMLChart.ch, "c");
            }
            if (a.a != null) {
                DMLChartExtensions.cc(a.a, b, c, d, DrawingMLChart.d1);
            }
            d.k();
        }
        static cg(a, b, c, d, e) {
            CT_NumVal.i(b, e, null, a.f);
            if (a.d != null) {
                DMLExtensions.cz(a.d, b, c, d, DrawingMLChart.gk, "c");
            }
            d.k();
        }
        static cc(a, b, c, d, e) {
            d.p(e, null);
            if (a.g != null) {
                DMLExtensions.cz(a.g, b, c, d, DrawingMLChart.cn, "c");
            }
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.ev, "c");
            }
            if (a.e != null && a.e.count > 0) {
                for (let f of fromEnum(a.e)) {
                    DMLChartExtensions.cg(f, b, c, d, DrawingMLChart.eu);
                }
            }
            d.k();
        }
        static cb(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                DMLExtensions.cz(a.e, b, c, d, DrawingMLChart.ch, "c");
            }
            if (a.a != null) {
                DMLChartExtensions.ca(a.a, b, c, d, DrawingMLChart.du);
            }
            d.k();
        }
        static ca(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.i(b, c, d, DrawingMLChart.ev, "c");
            }
            if (a.d != null && a.d.count > 0) {
                for (let f of fromEnum(a.d)) {
                    DMLChartExtensions.b5(f, b, c, d, DrawingMLChart.df);
                }
            }
            d.k();
        }
        static b5(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                for (let f = 0; f < a.a.count; f++) {
                    let g = a.a._inner[f];
                    DMLChartExtensions.cx(g, b, c, d, DrawingMLChart.eu);
                }
            }
            d.k();
        }
        static co(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                DMLChartExtensions.b4(a.e, b, c, d, DrawingMLChart.de);
            }
            if (a.g != null) {
                DMLChartExtensions.ci(a.g, b, c, d, DrawingMLChart.ea);
            }
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.dm);
            }
            if (a.c != null) {
                a.c.i(b, c, d, DrawingMLChart.dn);
            }
            d.k();
        }
        static b4(a, b, c, d, e) {
            CT_LogBase.e(b, e, a.a);
            d.k();
        }
        static ci(a, b, c, d, e) {
            CT_Orientation.e(b, e, a.a);
            d.k();
        }
        static bf(a, b, c, d, e) {
            CT_AxPos.e(b, e, a.a);
            d.k();
        }
        static c2(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                DMLChartExtensions.c6(a.e, b, c, d, DrawingMLChart.ge);
            }
            if (a.c != null) {
                DMLChartExtensions.by(a.c, b, c, d, DrawingMLChart.c3);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.ec, "c");
            }
            if (a.g != null) {
                DMLExtensions.a5(a.g, b, c, d, DrawingMLChart.fx);
            }
            if (a.i != null) {
                a.i.e(b, c, d, DrawingMLChart.gf);
            }
            d.k();
        }
        static c0(a, b, c, d, e) {
            CT_TickMark.f(b, e, a.b);
            d.k();
        }
        static cz(a, b, c, d, e) {
            CT_TickLblPos.f(b, e, a.b);
            d.k();
        }
        static bm(a, b, c, d, e) {
            CT_Crosses.e(b, e, a.a);
            d.k();
        }
        static bx(a, b, c, d, e) {
            CT_Grouping.f(b, e, a.b);
            d.k();
        }
        static bh(a, b, c, d, e) {
            if (a.a != null && a.a.count > 0) {
                d.p(DrawingMLChart.a3, "c");
                for (let f of fromEnum(a.a)) {
                    DMLChartExtensions.bg(f, b, c, d, DrawingMLChart.a2);
                }
                d.k();
            }
        }
        static bg(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.cz, "c");
            }
            if (a.c != null) {
                DMLExtensions.a5(a.c, b, c, d, DrawingMLChart.fx);
            }
            d.k();
        }
        static c1(a, b, c, d, e) {
            CT_TimeUnit.f(b, e, a.b);
            d.k();
        }
        static bb(a, b, c, d, e = DrawingMLChart.cg) {
            if (a == null || a.e == null || a.e.count == 0) {
                return;
            }
            DMLChartExtensions.fg(a.e, b, c, d);
        }
        static fg(a, b, c, d, e = DrawingMLChart.cg) {
            if (a == null || a.count == 0) {
                return;
            }
            d.p(DrawingMLChart.cg, "c");
            for (let f of fromEnum(a)) {
                f.d(b, c, d, null);
            }
            d.k();
        }
        static c7(a, b, c, d, e = DrawingMLChart2012.av) {
            d.p(e, "c15");
            if (stringIsNullOrEmpty(a.c) == false) {
                DMLExtensions.cz(a.c, b, c, d, DrawingMLChart2012.a2, "c15");
            }
            d.k();
        }
    }
    DMLChartExtensions.$t = /*@__PURE__*/ markType(DMLChartExtensions, 'DMLChartExtensions');
    return DMLChartExtensions;
})();
/**
 * @hidden
 */
export let ISeriesSortComparer = /*@__PURE__*/ (() => {
    class ISeriesSortComparer extends Base {
        compare(a, b) {
            if (a == null || b == null) {
                return 0;
            }
            return Base.compareSimple(a.index, b.index);
        }
    }
    ISeriesSortComparer.$t = /*@__PURE__*/ markType(ISeriesSortComparer, 'ISeriesSortComparer', Base.$, [/*@__PURE__*/ IComparer$1_$type.specialize(ISeries_$type)]);
    return ISeriesSortComparer;
})();
/**
 * @hidden
 */
export let CT_ChartSpaceEx = /*@__PURE__*/ (() => {
    class CT_ChartSpaceEx extends Base {
        constructor() {
            super();
            this.c = null;
            this.e = null;
            this.i = null;
            this.g = null;
            this.l = null;
            this.a = null;
            this.j = null;
            this.k = null;
            this.n = null;
            this.m = null;
            this.n = new List$1(CT_FormatOverride.$, 0);
            this.m = new List$1(CT_Extension.$, 0);
            this.l = new Dictionary$2(String_$type, NamedReference.$, 0);
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1908:
                    this.b = typeCast(CT_ChartData.$, b);
                    break;
                case 261:
                    this.d = typeCast(CT_ChartEx.$, b);
                    break;
                case 1570:
                    this.j = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.k = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 283:
                    this.h = typeCast(CT_ColorMapping.$, b);
                    break;
                case 1909:
                    this.n.add(typeCast(CT_FormatOverride.$, b));
                    break;
                case 1258:
                    this.f = typeCast(CT_PrintSettingsEx.$, b);
                    break;
                case 601:
                    this.m.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ChartSpaceEx.$t = /*@__PURE__*/ markType(CT_ChartSpaceEx, 'CT_ChartSpaceEx', Base.$, [ISupportSetProperty_$type]);
    return CT_ChartSpaceEx;
})();
/**
 * @hidden
 */
export let CT_ChartData = /*@__PURE__*/ (() => {
    class CT_ChartData extends Base {
        constructor() {
            super();
            this.a = null;
            this.c = null;
            this.b = null;
            this.d = null;
            this.d = new List$1(CT_Extension.$, 0);
            this.c = new List$1(CT_Data.$, 0);
        }
        setProperty(a, b) {
            switch (a) {
                case 604:
                    this.a = typeCast(CT_ExternalDataEx.$, b);
                    break;
                case 410:
                    this.c.add(typeCast(CT_Data.$, b));
                    break;
                case 601:
                    this.d.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ChartData.$t = /*@__PURE__*/ markType(CT_ChartData, 'CT_ChartData', Base.$, [ISupportSetProperty_$type]);
    return CT_ChartData;
})();
/**
 * @hidden
 */
export let CT_ExternalDataEx = /*@__PURE__*/ (() => {
    class CT_ExternalDataEx extends CT_ExternalData {
    }
    CT_ExternalDataEx.$t = /*@__PURE__*/ markType(CT_ExternalDataEx, 'CT_ExternalDataEx', CT_ExternalData.$);
    return CT_ExternalDataEx;
})();
/**
 * @hidden
 */
export let CT_FormatOverride = /*@__PURE__*/ (() => {
    class CT_FormatOverride extends Base {
        constructor() {
            super();
            this.e = 0;
            this.a = null;
            this.b = null;
            this.b = new List$1(CT_Extension.$, 0);
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        static f(a, b) {
            b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "idx":
                        b = parseUInt32_1(c.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static g(a, b, c) {
            a.ad.p(b, "cx");
            let d = null;
            let e = null;
            e = "idx";
            d = c.toString();
            a.ad.h(e, d);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1570:
                    this.a = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 601:
                    this.b.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_FormatOverride.$t = /*@__PURE__*/ markType(CT_FormatOverride, 'CT_FormatOverride', Base.$, [ISupportSetProperty_$type]);
    return CT_FormatOverride;
})();
/**
 * @hidden
 */
export let CT_LegendEx = /*@__PURE__*/ (() => {
    class CT_LegendEx extends Base {
        constructor() {
            super();
            this.m = toNullable(ST_SidePos_$type, null);
            this.i = toNullable(ST_PosAlign_$type, null);
            this.k = toNullable(Boolean_$type, null);
            this.d = null;
            this.e = null;
            this.g = null;
            this.g = new List$1(CT_Extension.$, 0);
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        static a(a) {
            let b = toNullable(ST_SidePos_$type, null);
            let c = toNullable(ST_PosAlign_$type, null);
            let d = toNullable(Boolean_$type, null);
            let e = CT_LegendEx.o(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            return ((() => {
                let $ret = new CT_LegendEx();
                $ret.h = c;
                $ret.j = d;
                $ret.l = b;
                return $ret;
            })());
        }
        static o(a, b, c, d) {
            b = toNullable(ST_SidePos_$type, null);
            c = toNullable(ST_PosAlign_$type, null);
            d = toNullable(Boolean_$type, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "pos":
                        b = toNullable(ST_SidePos_$type, XmlNamespaceDefinitionBase.b(ST_SidePos_$type, e.d));
                        break;
                    case "align":
                        c = toNullable(ST_PosAlign_$type, XmlNamespaceDefinitionBase.b(ST_PosAlign_$type, e.d));
                        break;
                    case "overlay":
                        d = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static p(a, b, c = toNullable(ST_PosAlign_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(ST_SidePos_$type, null)) {
            a.ad.p(b, "cx");
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "align";
                f = XmlNamespaceDefinitionBase.p(ST_PosAlign_$type, c.value);
                a.ad.h(g, f);
            }
            if (d.hasValue) {
                g = "overlay";
                f = ST_OnOff.g(d.value);
                a.ad.h(g, f);
            }
            if (e.hasValue) {
                g = "pos";
                f = XmlNamespaceDefinitionBase.p(ST_SidePos_$type, e.value);
                a.ad.h(g, f);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1570:
                    this.d = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.e = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 601:
                    this.g.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_LegendEx.$t = /*@__PURE__*/ markType(CT_LegendEx, 'CT_LegendEx', Base.$, [ISupportSetProperty_$type]);
    return CT_LegendEx;
})();
/**
 * @hidden
 */
export let CT_TickLabels = /*@__PURE__*/ (() => {
    class CT_TickLabels extends Base {
        constructor() {
            super();
            this.a = null;
            this.a = new List$1(CT_Extension.$, 0);
        }
        setProperty(a, b) {
            switch (a) {
                case 601:
                    this.a.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TickLabels.$t = /*@__PURE__*/ markType(CT_TickLabels, 'CT_TickLabels', Base.$, [ISupportSetProperty_$type]);
    return CT_TickLabels;
})();
/**
 * @hidden
 */
export let CT_TickMarks = /*@__PURE__*/ (() => {
    class CT_TickMarks extends Base {
        constructor() {
            super();
            this.c = toNullable(ST_TickMarksType_$type, null);
            this.a = null;
            this.a = new List$1(CT_Extension.$, 0);
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        static e(a, b) {
            b = toNullable(ST_TickMarksType_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "type":
                        b = toNullable(ST_TickMarksType_$type, XmlNamespaceDefinitionBase.b(ST_TickMarksType_$type, c.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static f(a, b, c = toNullable(ST_TickMarksType_$type, null)) {
            a.ad.p(b, "cx");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "type";
                d = XmlNamespaceDefinitionBase.p(ST_TickMarksType_$type, c.value);
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 601:
                    this.a.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TickMarks.$t = /*@__PURE__*/ markType(CT_TickMarks, 'CT_TickMarks', Base.$, [ISupportSetProperty_$type]);
    return CT_TickMarks;
})();
/**
 * @hidden
 */
export let CT_Gridlines = /*@__PURE__*/ (() => {
    class CT_Gridlines extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
            this.b = new List$1(CT_Extension.$, 0);
        }
        setProperty(a, b) {
            switch (a) {
                case 1570:
                    this.a = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 601:
                    this.b.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Gridlines.$t = /*@__PURE__*/ markType(CT_Gridlines, 'CT_Gridlines', Base.$, [ISupportSetProperty_$type]);
    return CT_Gridlines;
})();
/**
 * @hidden
 */
export let CT_AxisUnitsLabel = /*@__PURE__*/ (() => {
    class CT_AxisUnitsLabel extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
            this.c = null;
            this.d = null;
            this.d = new List$1(CT_Extension.$, 0);
        }
        setProperty(a, b) {
            switch (a) {
                case 1776:
                    this.a = typeCast(CT_Text.$, b);
                    break;
                case 1570:
                    this.b = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.c = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 601:
                    this.d.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_AxisUnitsLabel.$t = /*@__PURE__*/ markType(CT_AxisUnitsLabel, 'CT_AxisUnitsLabel', Base.$, [ISupportSetProperty_$type]);
    return CT_AxisUnitsLabel;
})();
/**
 * @hidden
 */
export let CT_Text = /*@__PURE__*/ (() => {
    class CT_Text extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.a = null;
            this.b = null;
        }
        setProperty(a, b) {
            switch (a) {
                case 1778:
                    this.a = typeCast(CT_TextData.$, b);
                    break;
                case 1362:
                    this.b = typeCast(CT_TextBody_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Text.$t = /*@__PURE__*/ markType(CT_Text, 'CT_Text', Base.$, [ISupportSetProperty_$type]);
    return CT_Text;
})();
/**
 * @hidden
 */
export let CT_AxisUnits = /*@__PURE__*/ (() => {
    class CT_AxisUnits extends Base {
        constructor() {
            super();
            this.b = null;
            this.e = toNullable(ST_AxisUnit_$type, null);
            this.c = null;
            this.c = new List$1(CT_Extension.$, 0);
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        static g(a, b) {
            b = toNullable(ST_AxisUnit_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "unit":
                        b = toNullable(ST_AxisUnit_$type, XmlNamespaceDefinitionBase.b(ST_AxisUnit_$type, c.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static h(a, b, c = toNullable(ST_AxisUnit_$type, null)) {
            a.ad.p(b, "cx");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "unit";
                d = XmlNamespaceDefinitionBase.p(ST_AxisUnit_$type, c.value);
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1805:
                    this.a = typeCast(CT_AxisUnitsLabel.$, b);
                    break;
                case 601:
                    this.c.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_AxisUnits.$t = /*@__PURE__*/ markType(CT_AxisUnits, 'CT_AxisUnits', Base.$, [ISupportSetProperty_$type]);
    return CT_AxisUnits;
})();
/**
 * @hidden
 */
export let ChartExTitleBase = /*@__PURE__*/ (() => {
    class ChartExTitleBase extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
            this.c = null;
            this.e = null;
            this.e = new List$1(CT_Extension.$, 0);
        }
        d(a, b) {
            let c = false;
            switch (a) {
                case 1776:
                    this.a = typeCast(CT_Text.$, b);
                    c = true;
                    break;
                case 1570:
                    this.b = typeCast(CT_ShapeProperties_DML.$, b);
                    c = true;
                    break;
                case 1783:
                    this.c = typeCast(CT_TextBody_DML.$, b);
                    c = true;
                    break;
                case 601:
                    this.e.add(typeCast(CT_Extension.$, b));
                    c = true;
                    break;
                default: break;
            }
            return c;
        }
    }
    ChartExTitleBase.$t = /*@__PURE__*/ markType(ChartExTitleBase, 'ChartExTitleBase');
    return ChartExTitleBase;
})();
/**
 * @hidden
 */
export let CT_AxisTitle = /*@__PURE__*/ (() => {
    class CT_AxisTitle extends ChartExTitleBase {
        constructor() {
            super();
        }
        setProperty(a, b) {
            if (super.d(a, b)) {
                return;
            }
            switch (a) {
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_AxisTitle.$t = /*@__PURE__*/ markType(CT_AxisTitle, 'CT_AxisTitle', ChartExTitleBase.$, [ISupportSetProperty_$type]);
    return CT_AxisTitle;
})();
/**
 * @hidden
 */
export let CT_Axis = /*@__PURE__*/ (() => {
    class CT_Axis extends Base {
        constructor() {
            super();
            this.y = null;
            this.b = null;
            this.d = null;
            this.g = null;
            this.i = null;
            this.o = null;
            this.q = null;
            this.m = null;
            this.k = null;
            this.ab = 0;
            this.x = toNullable(Boolean_$type, null);
            this.e = null;
            this.r = null;
            this.s = null;
            this.t = null;
            this.v = null;
            this.v = new List$1(CT_Extension.$, 0);
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get aa() {
            return this.ab;
        }
        set aa(a) {
            this.ab = a;
        }
        get w() {
            return this.x;
        }
        set w(a) {
            this.x = a;
        }
        static ac(a, b, c) {
            b = 0;
            c = toNullable(Boolean_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "id":
                        b = parseUInt32_1(d.d, CultureInfo.invariantCulture);
                        break;
                    case "hidden":
                        c = toNullable(Boolean_$type, ST_OnOff.e(d.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static ad(a, b, c, d) {
            a.ad.p(b, "cx");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "hidden";
                e = ST_OnOff.g(c.value);
                a.ad.h(f, e);
            }
            f = "id";
            e = d.toString();
            a.ad.h(f, e);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 232:
                    this.e = typeCast(CT_CategoryAxisScaling.$, b);
                    break;
                case 1823:
                    this.r = typeCast(CT_ValueAxisScaling.$, b);
                    break;
                case 1745:
                    this.a = typeCast(CT_AxisTitle.$, b);
                    break;
                case 1804:
                    this.c = typeCast(CT_AxisUnits.$, b);
                    break;
                case 963:
                    this.f = typeCast(CT_Gridlines.$, b);
                    break;
                case 1011:
                    this.h = typeCast(CT_Gridlines.$, b);
                    break;
                case 965:
                    this.n = typeCast(CT_TickMarks.$, b);
                    break;
                case 1013:
                    this.p = typeCast(CT_TickMarks.$, b);
                    break;
                case 1723:
                    this.l = typeCast(CT_TickLabels.$, b);
                    break;
                case 1088:
                    this.j = typeCast(CT_NumberFormat.$, b);
                    break;
                case 1570:
                    this.s = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.t = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 601:
                    this.v.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Axis.$t = /*@__PURE__*/ markType(CT_Axis, 'CT_Axis', Base.$, [ISupportSetProperty_$type]);
    return CT_Axis;
})();
/**
 * @hidden
 */
export let CT_Binning = /*@__PURE__*/ (() => {
    class CT_Binning extends Base {
        constructor() {
            super(...arguments);
            this.j = null;
            this.i = toNullable(ST_IntervalClosedSide_$type, null);
            this.g = null;
            this.e = null;
            this.a = null;
            this.b = null;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        static c(a) {
            let b = toNullable(ST_IntervalClosedSide_$type, null);
            let c = null;
            let d = null;
            let e = CT_Binning.l(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            return ((() => {
                let $ret = new CT_Binning();
                $ret.h = b;
                $ret.d = d;
                $ret.f = c;
                return $ret;
            })());
        }
        static l(a, b, c, d) {
            b = toNullable(ST_IntervalClosedSide_$type, null);
            c = null;
            d = null;
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "intervalClosed":
                        b = toNullable(ST_IntervalClosedSide_$type, XmlNamespaceDefinitionBase.b(ST_IntervalClosedSide_$type, e.d));
                        break;
                    case "underflow":
                        c = ST_DoubleOrAutomatic.f(e.d);
                        break;
                    case "overflow":
                        d = ST_DoubleOrAutomatic.f(e.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static m(a, b) {
            b = toNullable(Number_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = toNullable(Number_$type, parseUInt32_1(c.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static n(a, b) {
            b = toNullable(Number_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = toNullable(Number_$type, parseNumber(c.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static o(a, b, c = toNullable(ST_IntervalClosedSide_$type, null), d = null, e = null) {
            a.ad.p(b, "cx");
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "intervalClosed";
                f = XmlNamespaceDefinitionBase.p(ST_IntervalClosedSide_$type, c.value);
                a.ad.h(g, f);
            }
            if (d != null) {
                g = "overflow";
                f = d.d();
                a.ad.h(g, f);
            }
            if (e != null) {
                g = "underflow";
                f = e.d();
                a.ad.h(g, f);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1910:
                    this.a = CT_Double.a(b);
                    break;
                case 1911:
                    this.b = CT_UnsignedInt.a(typeGetValue(b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Binning.$t = /*@__PURE__*/ markType(CT_Binning, 'CT_Binning', Base.$, [ISupportSetProperty_$type]);
    return CT_Binning;
})();
/**
 * @hidden
 */
export let CT_SeriesLayoutProperties = /*@__PURE__*/ (() => {
    class CT_SeriesLayoutProperties extends Base {
        constructor() {
            super();
            this.f = null;
            this.h = null;
            this.j = null;
            this.d = null;
            this.l = null;
            this.a = null;
            this.b = null;
            this.m = null;
            this.n = null;
            this.n = new List$1(CT_Extension.$, 0);
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1170:
                    this.e = typeCast(CT_ParentLabelLayout.$, b);
                    break;
                case 1339:
                    this.g = typeCast(CT_RegionLabelLayout.$, b);
                    break;
                case 1844:
                    this.i = typeCast(CT_SeriesElementVisibilities.$, b);
                    break;
                case 22:
                    this.a = typeCast(CT_Aggregation.$, b);
                    break;
                case 120:
                    this.b = typeCast(CT_Binning.$, b);
                    break;
                case 722:
                    this.c = typeCast(CT_Geography.$, b);
                    break;
                case 1597:
                    this.k = typeCast(CT_Statistics.$, b);
                    break;
                case 1636:
                    this.m = b;
                    break;
                case 601:
                    this.n.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_SeriesLayoutProperties.$t = /*@__PURE__*/ markType(CT_SeriesLayoutProperties, 'CT_SeriesLayoutProperties', Base.$, [ISupportSetProperty_$type]);
    return CT_SeriesLayoutProperties;
})();
/**
 * @hidden
 */
export let ChartExDataLabelBase = /*@__PURE__*/ (() => {
    class ChartExDataLabelBase extends Base {
        constructor() {
            super();
            this.b = null;
            this.c = null;
            this.d = null;
            this.a = null;
            this.h = null;
            this.f = null;
            this.g = toNullable(ST_DataLabelPos_$type, null);
            this.f = new List$1(CT_Extension.$, 0);
        }
        e(a, b) {
            let c = false;
            switch (a) {
                case 1088:
                    this.b = typeCast(CT_NumberFormat.$, b);
                    c = true;
                    break;
                case 1570:
                    this.c = typeCast(CT_ShapeProperties_DML.$, b);
                    c = true;
                    break;
                case 1783:
                    this.d = typeCast(CT_TextBody_DML.$, b);
                    c = true;
                    break;
                case 1844:
                    this.a = typeCast(CT_DataLabelVisibilities.$, b);
                    c = true;
                    break;
                case 1445:
                    this.h = typeCast(String_$type, b);
                    c = true;
                    break;
                case 601:
                    this.f.add(typeCast(CT_Extension.$, b));
                    c = true;
                    break;
                default: break;
            }
            return c;
        }
    }
    ChartExDataLabelBase.$t = /*@__PURE__*/ markType(ChartExDataLabelBase, 'ChartExDataLabelBase');
    return ChartExDataLabelBase;
})();
/**
 * @hidden
 */
export let CT_DataLabels = /*@__PURE__*/ (() => {
    class CT_DataLabels extends ChartExDataLabelBase {
        constructor() {
            super();
            this.i = null;
            this.j = null;
            this.i = new List$1(CT_DataLabel.$, 0);
            this.j = new List$1(CT_DataLabelHidden.$, 0);
        }
        static k(a, b) {
            b = toNullable(ST_DataLabelPos_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "pos":
                        b = toNullable(ST_DataLabelPos_$type, XmlNamespaceDefinitionBase.b(ST_DataLabelPos_$type, c.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static l(a, b, c = toNullable(ST_DataLabelPos_$type, null)) {
            a.ad.p(b, "cx");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "pos";
                d = XmlNamespaceDefinitionBase.p(ST_DataLabelPos_$type, c.value);
                a.ad.h(e, d);
            }
        }
        setProperty(a, b) {
            if (super.e(a, b)) {
                return;
            }
            switch (a) {
                case 417:
                    this.i.add(typeCast(CT_DataLabel.$, b));
                    break;
                case 419:
                    this.j.add(typeCast(CT_DataLabelHidden.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DataLabels.$t = /*@__PURE__*/ markType(CT_DataLabels, 'CT_DataLabels', ChartExDataLabelBase.$, [ISupportSetProperty_$type]);
    return CT_DataLabels;
})();
/**
 * @hidden
 */
export let CT_DataLabel = /*@__PURE__*/ (() => {
    class CT_DataLabel extends ChartExDataLabelBase {
        constructor() {
            super();
            this.i = 0;
        }
        static j(a, b, c) {
            b = 0;
            c = toNullable(ST_DataLabelPos_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "idx":
                        b = parseUInt32_1(d.d, CultureInfo.invariantCulture);
                        break;
                    case "pos":
                        c = toNullable(ST_DataLabelPos_$type, XmlNamespaceDefinitionBase.b(ST_DataLabelPos_$type, d.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static k(a, b, c, d) {
            a.ad.p(b, "cx");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "pos";
                e = XmlNamespaceDefinitionBase.p(ST_DataLabelPos_$type, c.value);
                a.ad.h(f, e);
            }
            f = "idx";
            e = d.toString();
            a.ad.h(f, e);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1088:
                    this.b = typeCast(CT_NumberFormat.$, b);
                    break;
                case 1570:
                    this.c = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1783:
                    this.d = typeCast(CT_TextBody_DML.$, b);
                    break;
                case 1844:
                    this.a = typeCast(CT_DataLabelVisibilities.$, b);
                    break;
                case 1445:
                    this.h = typeCast(String_$type, b);
                    break;
                case 601:
                    this.f.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DataLabel.$t = /*@__PURE__*/ markType(CT_DataLabel, 'CT_DataLabel', ChartExDataLabelBase.$, [ISupportSetProperty_$type]);
    return CT_DataLabel;
})();
/**
 * @hidden
 */
export let CT_DataPoint = /*@__PURE__*/ (() => {
    class CT_DataPoint extends Base {
        constructor() {
            super();
            this.e = 0;
            this.a = null;
            this.b = null;
            this.b = new List$1(CT_Extension.$, 0);
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        static f(a, b) {
            b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "idx":
                        b = parseUInt32_1(c.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static g(a, b, c) {
            a.ad.p(b, "cx");
            let d = null;
            let e = null;
            e = "idx";
            d = c.toString();
            a.ad.h(e, d);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1570:
                    this.a = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 601:
                    this.b.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DataPoint.$t = /*@__PURE__*/ markType(CT_DataPoint, 'CT_DataPoint', Base.$, [ISupportSetProperty_$type]);
    return CT_DataPoint;
})();
/**
 * @hidden
 */
export let CT_ValueColors = /*@__PURE__*/ (() => {
    class CT_ValueColors extends Base {
        constructor() {
            super();
            this.f = null;
            this.d = null;
            this.b = null;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1009:
                    this.e = typeCast(CT_SolidColorFillProperties.$, b);
                    break;
                case 1006:
                    this.c = typeCast(CT_SolidColorFillProperties.$, b);
                    break;
                case 985:
                    this.a = typeCast(CT_SolidColorFillProperties.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ValueColors.$t = /*@__PURE__*/ markType(CT_ValueColors, 'CT_ValueColors', Base.$, [ISupportSetProperty_$type]);
    return CT_ValueColors;
})();
/**
 * @hidden
 */
export let CT_Series = /*@__PURE__*/ (() => {
    class CT_Series extends Base {
        constructor() {
            super();
            this.h = null;
            this.l = null;
            this.j = null;
            this.b = null;
            this.f = null;
            this.n = 0;
            this.x = toNullable(Boolean_$type, null);
            this.z = toNullable(Number_$type, null);
            this.ac = null;
            this.v = toNullable(Number_$type, null);
            this.t = 0;
            this.o = null;
            this.r = null;
            this.c = null;
            this.q = null;
            this.s = null;
            this.q = new List$1(ST_AxisId.$, 0);
            this.r = new List$1(CT_DataPoint.$, 0);
            this.s = new List$1(CT_Extension.$, 0);
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get w() {
            return this.x;
        }
        set w(a) {
            this.x = a;
        }
        get y() {
            return this.z;
        }
        set y(a) {
            this.z = a;
        }
        get ab() {
            if (this.ac == null) {
                let a = Guid.newGuid();
                this.ac = a.toString2("B");
            }
            return this.ac;
        }
        set ab(a) {
            this.ac = a;
        }
        get u() {
            return this.v;
        }
        set u(a) {
            this.v = a;
        }
        static d(a) {
            let b = 0;
            let c = toNullable(Boolean_$type, null);
            let d = toNullable(Number_$type, null);
            let e = null;
            let f = toNullable(Number_$type, null);
            let g = CT_Series.ad(a, b, c, d, e, f);
            b = g.p1;
            c = g.p2;
            d = g.p3;
            e = g.p4;
            f = g.p5;
            return ((() => {
                let $ret = new CT_Series();
                $ret.m = b;
                $ret.y = d;
                $ret.ab = e;
                $ret.u = f;
                $ret.w = c;
                return $ret;
            })());
        }
        static ad(a, b, c, d, e, f) {
            b = 0;
            c = toNullable(Boolean_$type, null);
            d = toNullable(Number_$type, null);
            e = null;
            f = toNullable(Number_$type, null);
            for (let g of fromEnum(a.ab.u)) {
                switch (g.a.e(a.d)) {
                    case "layoutId":
                        b = XmlNamespaceDefinitionBase.b(ST_SeriesLayout_$type, g.d);
                        break;
                    case "hidden":
                        c = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "ownerIdx":
                        d = toNullable(Number_$type, parseUInt32_1(g.d, CultureInfo.invariantCulture));
                        break;
                    case "uniqueId":
                        e = g.d;
                        break;
                    case "formatIdx":
                        f = toNullable(Number_$type, parseUInt32_1(g.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        static ae(a, b, c, d, e, f, g) {
            a.ad.p(b, "cx");
            let h = null;
            let i = null;
            if (c.hasValue) {
                i = "formatIdx";
                h = c.value.toString();
                a.ad.h(i, h);
            }
            if (d.hasValue) {
                i = "hidden";
                h = ST_OnOff.g(d.value);
                a.ad.h(i, h);
            }
            if (e.hasValue) {
                i = "ownerIdx";
                h = e.value.toString();
                a.ad.h(i, h);
            }
            if (f != null) {
                i = "uniqueId";
                h = f;
                a.ad.h(i, h);
            }
            i = "layoutId";
            h = XmlNamespaceDefinitionBase.p(ST_SeriesLayout_$type, g);
            a.ad.h(i, h);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1776:
                    this.g = typeCast(CT_Text.$, b);
                    break;
                case 1570:
                    this.o = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1827:
                    this.k = typeCast(CT_ValueColors.$, b);
                    break;
                case 1826:
                    this.i = typeCast(CT_ValueColorPositions.$, b);
                    break;
                case 429:
                    this.r.add(typeCast(CT_DataPoint.$, b));
                    break;
                case 420:
                    this.c = typeCast(CT_DataLabels.$, b);
                    break;
                case 416:
                    this.a = typeCast(CT_DataId.$, b);
                    break;
                case 881:
                    this.e = typeCast(CT_SeriesLayoutProperties.$, b);
                    break;
                case 84:
                    this.q.add(b);
                    break;
                case 601:
                    this.s.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Series.$t = /*@__PURE__*/ markType(CT_Series, 'CT_Series', Base.$, [ISupportSetProperty_$type]);
    return CT_Series;
})();
/**
 * @hidden
 */
export let CT_PlotSurface = /*@__PURE__*/ (() => {
    class CT_PlotSurface extends Base {
        constructor() {
            super();
            this.a = null;
            this.b = null;
            this.b = new List$1(CT_Extension.$, 0);
        }
        setProperty(a, b) {
            switch (a) {
                case 1570:
                    this.a = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 601:
                    this.b.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PlotSurface.$t = /*@__PURE__*/ markType(CT_PlotSurface, 'CT_PlotSurface', Base.$, [ISupportSetProperty_$type]);
    return CT_PlotSurface;
})();
/**
 * @hidden
 */
export let CT_PlotAreaRegion = /*@__PURE__*/ (() => {
    class CT_PlotAreaRegion extends Base {
        constructor() {
            super();
            this.a = null;
            this.c = null;
            this.b = null;
            this.c = new List$1(CT_Series.$, 0);
            this.b = new List$1(CT_Extension.$, 0);
        }
        setProperty(a, b) {
            switch (a) {
                case 1237:
                    this.a = typeCast(CT_PlotSurface.$, b);
                    break;
                case 1449:
                    this.c.add(typeCast(CT_Series.$, b));
                    break;
                case 601:
                    this.b.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PlotAreaRegion.$t = /*@__PURE__*/ markType(CT_PlotAreaRegion, 'CT_PlotAreaRegion', Base.$, [ISupportSetProperty_$type]);
    return CT_PlotAreaRegion;
})();
/**
 * @hidden
 */
export let CT_PlotAreaEx = /*@__PURE__*/ (() => {
    class CT_PlotAreaEx extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.c = null;
            this.e = null;
            this.d = new List$1(CT_Axis.$, 0);
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1915:
                    this.a = typeCast(CT_PlotAreaRegion.$, b);
                    break;
                case 1916:
                    this.d.add(typeCast(CT_Axis.$, b));
                    break;
                case 1570:
                    this.c = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 601:
                    this.e.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PlotAreaEx.$t = /*@__PURE__*/ markType(CT_PlotAreaEx, 'CT_PlotAreaEx', Base.$, [ISupportSetProperty_$type]);
    return CT_PlotAreaEx;
})();
/**
 * @hidden
 */
export let CT_ChartTitle = /*@__PURE__*/ (() => {
    class CT_ChartTitle extends ChartExTitleBase {
        constructor() {
            super();
            this.l = toNullable(ST_SidePos_$type, null);
            this.j = toNullable(ST_PosAlign_$type, null);
            this.k = toNullable(Boolean_$type, null);
        }
        static f(a) {
            let b = toNullable(ST_SidePos_$type, null);
            let c = toNullable(ST_PosAlign_$type, null);
            let d = toNullable(Boolean_$type, null);
            let e = CT_ChartTitle.m(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            return ((() => {
                let $ret = new CT_ChartTitle();
                $ret.j = c;
                $ret.k = d;
                $ret.l = b;
                return $ret;
            })());
        }
        static m(a, b, c, d) {
            b = toNullable(ST_SidePos_$type, null);
            c = toNullable(ST_PosAlign_$type, null);
            d = toNullable(Boolean_$type, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "pos":
                        b = toNullable(ST_SidePos_$type, XmlNamespaceDefinitionBase.b(ST_SidePos_$type, e.d));
                        break;
                    case "align":
                        c = toNullable(ST_PosAlign_$type, XmlNamespaceDefinitionBase.b(ST_PosAlign_$type, e.d));
                        break;
                    case "overlay":
                        d = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static n(a, b, c = toNullable(ST_PosAlign_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(ST_SidePos_$type, null)) {
            a.ad.p(b, "cx");
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "align";
                f = XmlNamespaceDefinitionBase.p(ST_PosAlign_$type, c.value);
                a.ad.h(g, f);
            }
            if (d.hasValue) {
                g = "overlay";
                f = ST_OnOff.g(d.value);
                a.ad.h(g, f);
            }
            if (e.hasValue) {
                g = "pos";
                f = XmlNamespaceDefinitionBase.p(ST_SidePos_$type, e.value);
                a.ad.h(g, f);
            }
            ;
        }
        setProperty(a, b) {
            if (super.d(a, b)) {
                return;
            }
            switch (a) {
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ChartTitle.$t = /*@__PURE__*/ markType(CT_ChartTitle, 'CT_ChartTitle', ChartExTitleBase.$, [ISupportSetProperty_$type]);
    return CT_ChartTitle;
})();
/**
 * @hidden
 */
export let CT_ChartEx = /*@__PURE__*/ (() => {
    class CT_ChartEx extends Base {
        constructor() {
            super();
            this.b = null;
            this.f = null;
            this.d = null;
            this.g = null;
            this.g = new List$1(CT_Extension.$, 0);
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 1745:
                    this.a = typeCast(CT_ChartTitle.$, b);
                    break;
                case 1235:
                    this.e = typeCast(CT_PlotAreaEx.$, b);
                    break;
                case 890:
                    this.c = typeCast(CT_LegendEx.$, b);
                    break;
                case 601:
                    this.g.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ChartEx.$t = /*@__PURE__*/ markType(CT_ChartEx, 'CT_ChartEx', Base.$, [ISupportSetProperty_$type]);
    return CT_ChartEx;
})();
/**
 * @hidden
 */
export let CT_Data = /*@__PURE__*/ (() => {
    class CT_Data extends Base {
        constructor() {
            super();
            this.g = 0;
            this.d = null;
            this.a = null;
            this.b = null;
            this.c = null;
            this.d = new List$1(CT_Extension.$, 0);
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        static h(a, b) {
            b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "id":
                        b = parseUInt32_1(c.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static i(a, b, c) {
            a.ad.p(b, "cx");
            let d = null;
            let e = null;
            e = "id";
            d = c.toString();
            a.ad.h(e, d);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1087:
                    this.a = typeCast(CT_NumericDimension.$, b);
                    break;
                case 1604:
                    this.b = typeCast(CT_StringDimension.$, b);
                    break;
                case 601:
                    this.d.add(typeCast(CT_Extension.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Data.$t = /*@__PURE__*/ markType(CT_Data, 'CT_Data', Base.$, [ISupportSetProperty_$type]);
    return CT_Data;
})();
/**
 * @hidden
 */
export let CT_FormatOverrides = /*@__PURE__*/ (() => {
    class CT_FormatOverrides extends Base {
        constructor() {
            super();
            this.b = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        setProperty(a, b) {
            switch (a) {
                case 656:
                    this.a.add(typeCast(CT_FormatOverride.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_FormatOverrides.$t = /*@__PURE__*/ markType(CT_FormatOverrides, 'CT_FormatOverrides', Base.$, [ISupportSetProperty_$type]);
    return CT_FormatOverrides;
})();
/**
 * @hidden
 */
export let ST_AxisId = /*@__PURE__*/ (() => {
    class ST_AxisId extends ValueType {
        constructor() {
            super();
            this.h = 0;
        }
        static c(a) {
            let b;
            let c = ST_AxisId.i(a, b);
            b = c.p1;
            return ((() => {
                let $ret = new ST_AxisId();
                $ret.h = b;
                return $ret;
            })());
        }
        static i(a, b) {
            b = 0;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = parseUInt32_1(c.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static k(a, b, c = true) {
            a.ad.p(ChartExElements.e, "cx");
            let d = null;
            let e = null;
            e = "val";
            d = b.toString();
            a.ad.h(e, d);
            if (c) {
                a.ad.k();
            }
        }
        j(a, b, c, d) {
            ST_AxisId.k(a, this.h, true);
        }
        toString() {
            return this.h.toString();
        }
        static f(a) {
            return a.h;
        }
        static e(a) {
            if (!a.hasValue) {
                return toNullable(Number_$type, null);
            }
            return toNullable(Number_$type, ST_AxisId.f(a.value));
        }
        static a(a) {
            return ((() => {
                let $ret = new ST_AxisId();
                $ret.h = a;
                return $ret;
            })());
        }
        static d(a) {
            if (!a.hasValue) {
                return toNullable(ST_AxisId.$, null);
            }
            return toNullable(ST_AxisId.$, ST_AxisId.a(a.value));
        }
    }
    ST_AxisId.$t = /*@__PURE__*/ markStruct(ST_AxisId, 'ST_AxisId');
    return ST_AxisId;
})();
/**
 * @hidden
 */
export let ChartExExtensions = /*@__PURE__*/ (() => {
    class ChartExExtensions extends Base {
        static ag(a, b, c, d, e) {
            d.p(e, "cx");
            d.l(DrawingMLMain.ao);
            if (a.b != null) {
                ChartExExtensions.ae(a.b, b, c, d, ChartExElements.l);
            }
            if (a.d != null) {
                ChartExExtensions.af(a.d, b, c, d, ChartExElements.k);
            }
            if (a.j != null) {
                DMLExtensions.a5(a.j, b, c, d, ChartExElements.b5);
            }
            if (a.k != null) {
                a.k.e(b, c, d, ChartExElements.cd);
            }
            if (a.h != null) {
                ChartExExtensions.ci(a.h, b, c, d, ChartExElements.o);
            }
            if (a.n != null) {
                ChartExExtensions.cs(a.n, b, c, d, ChartExElements.ai);
            }
            if (a.f != null) {
                ChartExExtensions.by(a.f, b, c, d, ChartExElements.bz);
            }
            if (a.m != null) {
                ChartExExtensions.ct(a.m, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static ae(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.ar(a.a, b, c, d, ChartExElements.ab);
            }
            if (a.c != null) {
                ChartExExtensions.cj(a.c, b, c, d);
            }
            if (a.d != null) {
                ChartExExtensions.ct(a.d, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static af(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.ah(a.a, b, c, d, ChartExElements.ca);
            }
            if (a.e != null) {
                ChartExExtensions.bv(a.e, b, c, d, ChartExElements.bw);
            }
            if (a.c != null) {
                ChartExExtensions.bl(a.c, b, c, d, ChartExElements.a9);
            }
            if (a.g != null) {
                ChartExExtensions.ct(a.g, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static au(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.cs(a.a, b, c, d, ChartExElements.ah);
            }
            d.k();
        }
        static by(a, b, c, d, e) {
        }
        static ar(a, b, c, d, e) {
            CT_ExternalDataEx.g(b, e, a.c);
            if (a.a != null) {
                a.a.q(b, c, d, ChartExElements.c, "cx");
            }
            d.k();
        }
        static ak(a, b, c, d, e) {
            CT_Data.i(b, e, a.f);
            if (a.a != null) {
                ChartExExtensions.bo(a.a, b, c, d, ChartExElements.bo);
            }
            else if (a.c != null) {
                ChartExExtensions.b4(a.c, b, c, d, ChartExElements.b7);
            }
            if (a.b != null) {
                ChartExExtensions.b4(a.b, b, c, d, ChartExElements.b7);
            }
            if (a.d != null) {
                ChartExExtensions.ct(a.d, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static bo(a, b, c, d, e) {
            CT_NumericDimension.h(b, e, a.c);
            if (a.a != null) {
                ChartExExtensions.av(a.a, b, c, d, ChartExElements.ae);
            }
            if (a.b != null) {
                ChartExExtensions.av(a.b, b, c, d, ChartExElements.bm);
            }
            if (a.e != null) {
                ChartExExtensions.ck(a.e, b, c, d);
            }
            d.k();
        }
        static b4(a, b, c, d, e) {
            CT_StringDimension.h(b, e, a.c);
            if (a.a != null) {
                ChartExExtensions.av(a.a, b, c, d, ChartExElements.ae);
            }
            if (a.b != null) {
                ChartExExtensions.av(a.b, b, c, d, ChartExElements.bm);
            }
            if (a.e != null) {
                ChartExExtensions.cl(a.e, b, c, d);
            }
            d.k();
        }
        static av(a, b, c, d, e) {
            CT_Formula.f(b, a.b, e);
            d.u(a.d);
            d.k();
        }
        static b6(a, b, c, d, e) {
            CT_StringValue.f(b, a.d, e);
            d.u(a.b);
            d.k();
        }
        static bq(a, b, c, d, e) {
            CT_NumericValue.f(b, a.d, e);
            d.u(numberToString(a.b, CultureInfo.invariantCulture));
            d.k();
        }
        static bp(a, b, c, d, e) {
            CT_NumericLevel.k(b, e, a.c, a.e, a.h);
            if (a.a != null) {
                for (let f of fromEnum(a.a)) {
                    ChartExExtensions.bq(f, b, c, d, ChartExElements.b0);
                }
            }
            d.k();
        }
        static ah(a, b, c, d, e) {
            CT_ChartTitle.n(b, e, a.j, a.k, a.l);
            if (a.a != null) {
                ChartExExtensions.b8(a.a, b, c, d, ChartExElements.cb);
            }
            if (a.b != null) {
                DMLExtensions.a5(a.b, b, c, d, ChartExElements.b5);
            }
            if (a.c != null) {
                a.c.e(b, c, d, ChartExElements.cd);
            }
            if (a.e != null) {
                ChartExExtensions.ct(a.e, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static bv(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.bw(a.a, b, c, d, ChartExElements.bx);
            }
            if (a.d != null && a.d.count > 0) {
                for (let f of fromEnum(a.d)) {
                    ChartExExtensions.y(f, b, c, d, ChartExElements.d);
                }
            }
            if (a.c != null) {
                DMLExtensions.a5(a.c, b, c, d, ChartExElements.b5);
            }
            if (a.e != null) {
                ChartExExtensions.ct(a.e, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static bl(a, b, c, d, e) {
            CT_LegendEx.p(b, e, a.h, a.j, a.l);
            if (a.d != null) {
                DMLExtensions.a5(a.d, b, c, d, ChartExElements.b5);
            }
            if (a.e != null) {
                a.e.e(b, c, d, ChartExElements.cd);
            }
            if (a.g != null) {
                ChartExExtensions.ct(a.g, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static b8(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.b9(a.a, b, c, d, ChartExElements.cc);
            }
            if (a.b != null) {
                a.b.e(b, c, d, ChartExElements.b2);
            }
            d.k();
        }
        static b9(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.av(a.a, b, c, d, ChartExElements.ae);
            }
            if (a.c != null) {
                ChartExExtensions.cw(a.c, b, c, d, ChartExElements.cg);
            }
            d.k();
        }
        static bw(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.bx(a.a, b, c, d, ChartExElements.by);
            }
            if (a.c != null) {
                for (let f of fromEnum(a.c)) {
                    ChartExExtensions.b0(f, b, c, d, ChartExElements.b4);
                }
            }
            if (a.b != null) {
                ChartExExtensions.ct(a.b, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static y(a, b, c, d, e) {
            CT_Axis.ad(b, e, a.w, a.aa);
            if (a.e != null) {
                ChartExExtensions.ad(a.e, b, c, d, ChartExElements.j);
            }
            if (a.r != null) {
                ChartExExtensions.cc(a.r, b, c, d, ChartExElements.ch);
            }
            if (a.a != null) {
                ChartExExtensions.z(a.a, b, c, d, ChartExElements.ca);
            }
            if (a.c != null) {
                ChartExExtensions.aa(a.c, b, c, d, ChartExElements.ce);
            }
            if (a.f != null) {
                ChartExExtensions.bj(a.f, b, c, d, ChartExElements.bb);
            }
            if (a.h != null) {
                ChartExExtensions.bj(a.h, b, c, d, ChartExElements.bj);
            }
            if (a.n != null) {
                ChartExExtensions.cb(a.n, b, c, d, ChartExElements.bc);
            }
            if (a.p != null) {
                ChartExExtensions.cb(a.p, b, c, d, ChartExElements.bk);
            }
            if (a.l != null) {
                ChartExExtensions.ca(a.l, b, c, d, ChartExElements.b9);
            }
            if (a.j != null) {
                ChartExExtensions.bn(a.j, b, c, d, ChartExElements.bp);
            }
            if (a.s != null) {
                DMLExtensions.a5(a.s, b, c, d, ChartExElements.b5);
            }
            if (a.t != null) {
                a.t.e(b, c, d, ChartExElements.cd);
            }
            if (a.v != null) {
                ChartExExtensions.ct(a.v, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static z(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                ChartExExtensions.b8(a.a, b, c, d, ChartExElements.cb);
            }
            if (a.b != null) {
                DMLExtensions.a5(a.b, b, c, d, ChartExElements.b5);
            }
            if (a.c != null) {
                a.c.e(b, c, d, ChartExElements.cd);
            }
            if (a.e != null) {
                ChartExExtensions.ct(a.e, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static bx(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                DMLExtensions.a5(a.a, b, c, d, ChartExElements.b5);
            }
            if (a.b != null) {
                ChartExExtensions.ct(a.b, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static b0(a, b, c, d, e) {
            CT_Series.ae(b, e, a.u, a.w, a.y, a.ab, a.m);
            if (a.g != null) {
                ChartExExtensions.b8(a.g, b, c, d, ChartExElements.cb);
            }
            if (a.o != null) {
                DMLExtensions.a5(a.o, b, c, d, ChartExElements.b5);
            }
            if (a.k != null) {
                ChartExExtensions.cg(a.k, b, c, d, ChartExElements.cj);
            }
            if (a.i != null) {
                ChartExExtensions.cf(a.i, b, c, d, ChartExElements.ci);
            }
            if (a.r != null) {
                for (let f of fromEnum(a.r)) {
                    ChartExExtensions.aq(f, b, c, d, ChartExElements.w);
                }
            }
            if (a.c != null) {
                ChartExExtensions.ao(a.c, b, c, d, ChartExElements.v);
            }
            if (a.a != null) {
                ChartExExtensions.al(a.a, b, c, d, ChartExElements.s);
            }
            if (a.e != null) {
                ChartExExtensions.b2(a.e, b, c, d, ChartExElements.a8);
            }
            if (a.q != null) {
                ChartExExtensions.cm(a.q, b, c, d);
            }
            if (a.s != null) {
                ChartExExtensions.ct(a.s, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static cg(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.e != null) {
                a.e.save1(b, c, d, ChartExElements.bi);
            }
            if (a.c != null) {
                a.c.save1(b, c, d, ChartExElements.bg);
            }
            if (a.a != null) {
                a.a.save1(b, c, d, ChartExElements.be);
            }
            d.k();
        }
        static cf(a, b, c, d, e) {
            CT_ValueColorPositions.l(b, e, a.h);
            if (a.c != null) {
                ChartExExtensions.cd(a.c, b, c, d, ChartExElements.bh);
            }
            if (a.e != null) {
                ChartExExtensions.ce(a.e, b, c, d, ChartExElements.bf);
            }
            if (a.a != null) {
                ChartExExtensions.cd(a.a, b, c, d, ChartExElements.bd);
            }
            d.k();
        }
        static aq(a, b, c, d, e) {
            CT_DataPoint.g(b, e, a.d);
            if (a.a != null) {
                DMLExtensions.a5(a.a, b, c, d, ChartExElements.b5);
            }
            if (a.b != null) {
                ChartExExtensions.ct(a.b, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static ao(a, b, c, d, e) {
            CT_DataLabels.l(b, e, a.g);
            if (a.b != null) {
                ChartExExtensions.bn(a.b, b, c, d, ChartExElements.bp);
            }
            if (a.c != null) {
                DMLExtensions.a5(a.c, b, c, d, ChartExElements.b5);
            }
            if (a.d != null) {
                a.d.e(b, c, d, ChartExElements.cd);
            }
            if (a.a != null) {
                ChartExExtensions.ap(a.a, b, c, d, ChartExElements.ck);
            }
            if (a.h != null) {
                ChartExExtensions.cw(a.h, b, c, d, ChartExElements.b3);
            }
            if (a.i != null && a.i.count > 0) {
                for (let f of fromEnum(a.i)) {
                    ChartExExtensions.am(f, b, c, d, ChartExElements.t);
                }
            }
            if (a.j != null && a.j.count > 0) {
                for (let g of fromEnum(a.j)) {
                    ChartExExtensions.an(g, b, c, d, ChartExElements.u);
                }
            }
            if (a.f != null) {
                ChartExExtensions.ct(a.f, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static al(a, b, c, d, e) {
            CT_DataId.e(b, e, a.b);
            d.k();
        }
        static b2(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.e != null) {
                ChartExExtensions.bt(a.e, b, c, d, ChartExElements.bu);
            }
            if (a.g != null) {
                ChartExExtensions.bz(a.g, b, c, d, ChartExElements.b1);
            }
            if (a.i != null) {
                ChartExExtensions.b1(a.i, b, c, d, ChartExElements.ck);
            }
            if (a.a != null) {
                ChartExExtensions.x(a.a, b, c, d, ChartExElements.b);
            }
            if (a.b != null) {
                ChartExExtensions.ac(a.b, b, c, d, ChartExElements.h);
            }
            if (a.c != null) {
                ChartExExtensions.ba(a.c, b, c, d, ChartExElements.ax);
            }
            if (a.k != null) {
                ChartExExtensions.b3(a.k, b, c, d, ChartExElements.b6);
            }
            if (a.m != null) {
                ChartExExtensions.b7(a.m, b, c, d, ChartExElements.b8);
            }
            if (a.n != null) {
                ChartExExtensions.ct(a.n, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static b1(a, b, c, d, e) {
            CT_SeriesElementVisibilities.n(b, e, a.b, a.d, a.f, a.h, a.j);
            d.k();
        }
        static cd(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.as(a.a, b, c, d, ChartExElements.ad);
            }
            if (a.b != null) {
                ChartExExtensions.bm(a.b, b, c, d, ChartExElements.bn);
            }
            if (a.c != null) {
                ChartExExtensions.bu(a.c, b, c, d, ChartExElements.bv);
            }
            d.k();
        }
        static ce(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.bm(a.a, b, c, d, ChartExElements.bn);
            }
            if (a.b != null) {
                ChartExExtensions.bu(a.b, b, c, d, ChartExElements.bv);
            }
            d.k();
        }
        static as(a, b, c, d, e) {
            d.p(e, "cx");
            d.k();
        }
        static bm(a, b, c, d, e) {
            CT_NumberColorPosition.e(b, e, a.a);
            d.k();
        }
        static bu(a, b, c, d, e) {
            CT_PercentageColorPosition.e(b, e, a.a);
            d.k();
        }
        static bn(a, b, c, d, e) {
            CT_NumberFormat.g(b, e, a.a, a.c);
            d.k();
        }
        static ap(a, b, c, d, e) {
            CT_DataLabelVisibilities.i(b, e, a.a, a.c, a.e);
            d.k();
        }
        static cw(a, b, c, d, e) {
            d.p(e, "cx");
            d.u(a);
            d.k();
        }
        static am(a, b, c, d, e) {
            CT_DataLabel.k(b, e, a.g, a.i);
            if (a.b != null) {
                ChartExExtensions.bn(a.b, b, c, d, ChartExElements.bp);
            }
            if (a.c != null) {
                DMLExtensions.a5(a.c, b, c, d, ChartExElements.b5);
            }
            if (a.d != null) {
                a.d.e(b, c, d, ChartExElements.cd);
            }
            if (a.a != null) {
                ChartExExtensions.ap(a.a, b, c, d, ChartExElements.ck);
            }
            if (a.h != null) {
                ChartExExtensions.cw(a.h, b, c, d, ChartExElements.b3);
            }
            if (a.f != null) {
                ChartExExtensions.ct(a.f, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static an(a, b, c, d, e) {
            CT_DataLabelHidden.e(b, e, a.b);
            d.k();
        }
        static bt(a, b, c, d, e) {
            CT_ParentLabelLayout.e(b, e, a.a);
            d.k();
        }
        static bz(a, b, c, d, e) {
            CT_RegionLabelLayout.e(b, e, a.a);
            d.k();
        }
        static x(a, b, c, d, e) {
            d.p(e, "cx");
            d.k();
        }
        static ac(a, b, c, d, e) {
            CT_Binning.o(b, e, a.h, a.d, a.f);
            if (a.a != null) {
                a.a.i(b, c, d, ChartExElements.i, "cx");
            }
            if (a.b != null) {
                a.b.i(b, c, d, ChartExElements.g, "cx");
            }
            d.k();
        }
        static ba(a, b, c, d, e) {
            CT_Geography.p(b, e, a.d, a.f, a.h, a.j, a.l);
            if (a.a != null) {
                ChartExExtensions.aw(a.a, b, c, d, ChartExElements.aj);
            }
            d.k();
        }
        static b3(a, b, c, d, e) {
            CT_Statistics.e(b, e, a.a);
            d.k();
        }
        static b7(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                for (let f of fromEnum(a.a)) {
                    let g = ((() => {
                        let $ret = new CT_UnsignedInt();
                        $ret.g = f;
                        return $ret;
                    })());
                    g.i(b, c, d, ChartExElements.a7, "cx");
                }
            }
            d.k();
        }
        static aw(a, b, c, d, e) {
            CT_GeoCache.g(b, e, a.c);
            if (a.b != null) {
                ChartExExtensions.cw(a.b, b, c, d, ChartExElements.f);
            }
            if (a.a != null) {
                ChartExExtensions.ai(a.a, b, c, d, ChartExElements.n);
            }
            d.k();
        }
        static ai(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.d != null) {
                ChartExExtensions.cn(a.d, b, c, d);
            }
            if (a.b != null) {
                ChartExExtensions.co(a.b, b, c, d);
            }
            if (a.c != null) {
                ChartExExtensions.cp(a.c, b, c, d);
            }
            if (a.a != null) {
                ChartExExtensions.cq(a.a, b, c, d);
            }
            d.k();
        }
        static bf(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.cn(a.a, b, c, d);
            }
            d.k();
        }
        static a5(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.co(a.a, b, c, d);
            }
            d.k();
        }
        static a9(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.cp(a.a, b, c, d);
            }
            d.k();
        }
        static a0(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.cq(a.a, b, c, d);
            }
            d.k();
        }
        static be(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.bd(a.a, b, c, d, ChartExElements.a0);
            }
            if (a.c != null) {
                ChartExExtensions.bg(a.c, b, c, d, ChartExElements.a3);
            }
            d.k();
        }
        static bd(a, b, c, d, e) {
            CT_GeoLocationQuery.m(b, e, a.c, a.e, a.g, a.i, a.a);
            d.k();
        }
        static bg(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.bc(a.a, b, c, d, ChartExElements.az);
            }
            d.k();
        }
        static bc(a, b, c, d, e) {
            CT_GeoLocation.m(b, e, a.e, a.g, a.i, a.c);
            if (a.a != null) {
                ChartExExtensions.w(a.a, b, c, d, ChartExElements.a);
            }
            d.k();
        }
        static w(a, b, c, d, e) {
            CT_Address.r(b, e, a.b, a.d, a.f, a.h, a.j, a.l, a.n);
            d.k();
        }
        static a4(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.c != null) {
                ChartExExtensions.a3(a.c, b, c, d, ChartExElements.aq);
            }
            if (a.a != null) {
                ChartExExtensions.a2(a.a, b, c, d, ChartExElements.ap);
            }
            d.k();
        }
        static a3(a, b, c, d, e) {
            CT_GeoDataEntityQuery.g(b, e, a.c, a.a);
            d.k();
        }
        static a2(a, b, c, d, e) {
            CT_GeoData.s(b, e, a.e, a.m, a.o, a.g, a.i, a.k);
            if (a.d != null) {
                ChartExExtensions.cr(a.d, b, c, d);
            }
            if (a.b != null) {
                ChartExExtensions.cv(a.b, b, c, d, ChartExElements.q, ChartExElements.p, "cx");
            }
            d.k();
        }
        static bi(a, b, c, d, e = ChartExElements.a5) {
            let f = a.a;
            if (f == null || f.count == 0) {
                return;
            }
            ChartExExtensions.cr(f, b, c, d);
        }
        static aj(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.cv(a.a, b, c, d, ChartExElements.p, null, null);
            }
            d.k();
        }
        static bh(a, b, c, d, e) {
            CT_GeoPolygon.g(b, e, a.b, a.c, a.d);
            d.k();
        }
        static a8(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.a6(a.a, b, c, d, ChartExElements.at);
            }
            if (a.c != null) {
                ChartExExtensions.a7(a.c, b, c, d, ChartExElements.au);
            }
            d.k();
        }
        static a6(a, b, c, d, e) {
            CT_GeoDataPointQuery.j(b, e, a.b, a.d, a.f);
            d.k();
        }
        static a7(a, b, c, d, e) {
            CT_GeoDataPointToEntityQuery.h(b, e, a.d, a.b);
            d.k();
        }
        static az(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.ay(a.a, b, c, d, ChartExElements.al);
            }
            if (a.c != null) {
                ChartExExtensions.cu(a.c, b, c, d, ChartExElements.ak, "cx");
            }
            d.k();
        }
        static ay(a, b, c, d, e) {
            CT_GeoChildEntitiesQuery.f(b, e, a.b);
            if (a.a != null) {
                for (let f of fromEnum(a.a)) {
                    ChartExExtensions.ch(f, b, c, d, ChartExElements.x);
                }
            }
            d.k();
        }
        static ax(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                for (let f of fromEnum(a.a)) {
                    ChartExExtensions.bb(f, b, c, d, ChartExElements.ay);
                }
            }
            d.k();
        }
        static a1(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                for (let f of fromEnum(a.a)) {
                    ChartExExtensions.ch(f, b, c, d, ChartExElements.x);
                }
            }
            d.k();
        }
        static ch(a, b, c, d, e) {
            d.p(e, "cx");
            d.u(EnumUtil.getName(ST_EntityType_$type, a));
            d.k();
        }
        static bb(a, b, c, d, e) {
            CT_GeoHierarchyEntity.j(b, e, a.d, a.f, a.b);
            d.k();
        }
        static ad(a, b, c, d, e) {
            CT_CategoryAxisScaling.e(b, e, a.a);
            d.k();
        }
        static cc(a, b, c, d, e) {
            CT_ValueAxisScaling.l(b, e, a.f, a.b, a.d, a.h);
            d.k();
        }
        static aa(a, b, c, d, e) {
            CT_AxisUnits.h(b, e, a.d);
            if (a.a != null) {
                ChartExExtensions.ab(a.a, b, c, d, ChartExElements.cf);
            }
            if (a.c != null) {
                ChartExExtensions.ct(a.c, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static bj(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                DMLExtensions.a5(a.a, b, c, d, ChartExElements.b5);
            }
            if (a.b != null) {
                ChartExExtensions.ct(a.b, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static cb(a, b, c, d, e) {
            CT_TickMarks.f(b, e, a.b);
            if (a.a != null) {
                ChartExExtensions.ct(a.a, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static ca(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.ct(a.a, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static ab(a, b, c, d, e) {
            d.p(e, "cx");
            if (a.a != null) {
                ChartExExtensions.b8(a.a, b, c, d, ChartExElements.cb);
            }
            if (a.b != null) {
                DMLExtensions.a5(a.b, b, c, d, ChartExElements.b5);
            }
            if (a.c != null) {
                a.c.e(b, c, d, ChartExElements.cd);
            }
            if (a.d != null) {
                ChartExExtensions.ct(a.d, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static at(a, b, c, d, e) {
            CT_FormatOverride.g(b, e, a.d);
            if (a.a != null) {
                DMLExtensions.a5(a.a, b, c, d, ChartExElements.b5);
            }
            if (a.b != null) {
                ChartExExtensions.ct(a.b, b, c, d, ChartExElements.ac);
            }
            d.k();
        }
        static bk(a, b, c, d, e) {
            CT_HeaderFooter.x(b, e, a.d, a.f, a.h);
            if (a.t != null) {
                ChartExExtensions.cw(a.t, b, c, d, ChartExElements.br);
            }
            if (a.r != null) {
                ChartExExtensions.cw(a.r, b, c, d, ChartExElements.bq);
            }
            if (a.l != null) {
                ChartExExtensions.cw(a.l, b, c, d, ChartExElements.z);
            }
            if (a.j != null) {
                ChartExExtensions.cw(a.j, b, c, d, ChartExElements.y);
            }
            if (a.p != null) {
                ChartExExtensions.cw(a.p, b, c, d, ChartExElements.ag);
            }
            if (a.n != null) {
                ChartExExtensions.cw(a.n, b, c, d, ChartExElements.af);
            }
            d.k();
        }
        static br(a, b, c, d, e) {
            CT_PageMargins.o(b, e, a.a, a.c, a.e, a.g, a.i, a.k);
            d.k();
        }
        static bs(a, b, c, d, e) {
            CT_PageSetup.ae(b, e, a.h, a.j, a.l, a.n, a.p, a.r, a.t, a.v, a.x);
            d.k();
        }
        static v(a, b, c, d, e) {
            CT_Extension.e(b, e, a.b);
            d.k();
        }
        static b5(a, b, c, d, e) {
            let f = a.a;
            if (f == null || f.count == 0) {
                return;
            }
            CT_StringLevel.i(b, e, a.c, a.f);
            for (let g of fromEnum(f)) {
                ChartExExtensions.b6(g, b, c, d, ChartExElements.b0);
            }
            d.k();
        }
        static ci(a, b, c, d, e) {
            CT_ColorMapping.ad(b, e, a.d, a.f, a.h, a.j, a.l, a.n, a.p, a.r, a.t, a.v, a.x, a.z);
            if (a.b != null) {
                a.b.d(b, c, d, DrawingMLMain.ds);
            }
        }
        static cs(a, b, c, d, e = ChartExElements.ai) {
            if (a == null || a.count == 0) {
                return;
            }
            d.p(e, "cx");
            for (let f of fromEnum(a)) {
                ChartExExtensions.at(f, b, c, d, ChartExElements.ah);
            }
            d.k();
        }
        static ct(a, b, c, d, e = ChartExElements.ac) {
            if (a == null || a.count == 0) {
                return;
            }
            d.p(e, "cx");
            for (let f of fromEnum(a)) {
                ChartExExtensions.v(f, b, c, d, ChartExElements.aa);
            }
            d.k();
        }
        static cj(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            for (let e of fromEnum(a)) {
                ChartExExtensions.ak(e, b, c, d, ChartExElements.r);
            }
        }
        static ck(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            for (let e of fromEnum(a)) {
                ChartExExtensions.bp(e, b, c, d, ChartExElements.ba);
            }
        }
        static cl(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            for (let e of fromEnum(a)) {
                ChartExExtensions.b5(e, b, c, d, ChartExElements.ba);
            }
        }
        static cm(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            for (let e of fromEnum(a)) {
                e.j(b, c, d, ChartExElements.e);
            }
        }
        static cn(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            d.p(ChartExElements.a2, "cx");
            for (let e of fromEnum(a)) {
                ChartExExtensions.be(e, b, c, d, ChartExElements.a1);
            }
            d.k();
        }
        static co(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            d.p(ChartExElements.as, "cx");
            for (let e of fromEnum(a)) {
                ChartExExtensions.a4(e, b, c, d, ChartExElements.ar);
            }
            d.k();
        }
        static cp(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            d.p(ChartExElements.aw, "cx");
            for (let e of fromEnum(a)) {
                ChartExExtensions.a8(e, b, c, d, ChartExElements.av);
            }
            d.k();
        }
        static cq(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            d.p(ChartExElements.an, "cx");
            for (let e of fromEnum(a)) {
                ChartExExtensions.az(e, b, c, d, ChartExElements.am);
            }
            d.k();
        }
        static cu(a, b, c, d, e, f) {
            if (a == null || a.count == 0) {
                return;
            }
            let g = stringIsNullOrEmpty(e) == false;
            if (g) {
                d.p(e, f);
            }
            for (let h of fromEnum(a)) {
                ChartExExtensions.bb(h, b, c, d, ChartExElements.ay);
            }
            if (g) {
                d.k();
            }
        }
        static cr(a, b, c, d) {
            if (a == null || a.count == 0) {
                return;
            }
            d.p(ChartExElements.a5, "cx");
            for (let e of fromEnum(a)) {
                ChartExExtensions.bh(e, b, c, d, ChartExElements.a4);
            }
            d.k();
        }
        static cv(a, b, c, d, e, f, g) {
            if (a == null || a.count == 0) {
                return;
            }
            let h = stringIsNullOrEmpty(f) == false;
            if (h) {
                d.p(f, g);
            }
            for (let i of fromEnum(a)) {
                ChartExExtensions.cw(i, b, c, d, e);
            }
            if (h) {
                d.k();
            }
        }
        static a(a) {
            switch (a) {
                case 1: return 9;
                case 0: return 10;
                case 2: return 1;
                case 3: return 2;
                case 4: return 3;
                case 5: return 6;
                case 6: return 4;
                case 7: return 7;
                case 8: return 8;
                default: return 0;
            }
        }
        static k(a) {
            switch (a) {
                case 8: return 8;
                case 9: return 1;
                case 10: return 0;
                case 1: return 2;
                case 2: return 3;
                case 3: return 4;
                case 6: return 5;
                case 7: return 7;
                default: return 6;
            }
        }
        static f(a, b) {
            switch (a) {
                case 3: return 0;
                case 1: break;
                case 0: return b == 2 ? 8 : b == 0 ? 7 : 1;
                case 2: return b == 2 ? 9 : b == 0 ? 4 : 2;
            }
            return 3;
        }
        static s(a) {
            let b = 3;
            let c = 1;
            switch (a) {
                case 6:
                case 5: return null;
                case 0:
                    b = 3;
                    c = 1;
                    break;
                case 8:
                    b = 0;
                    c = 2;
                    break;
                case 9:
                    b = 2;
                    c = 2;
                    break;
                case 1:
                    b = 0;
                    c = 1;
                    break;
                case 2:
                    b = 2;
                    c = 1;
                    break;
                case 3:
                    b = 1;
                    c = 1;
                    break;
                case 7:
                    b = 0;
                    c = 0;
                    break;
                case 4:
                    b = 2;
                    c = 0;
                    break;
            }
            return Tuple.a(ST_SidePos_$type, ST_PosAlign_$type, b, c);
        }
        static h(a) {
            switch (a) {
                case 2: return 4;
                case 0: return 2;
                case 1: return 3;
                default: return 4142;
            }
        }
        static q(a) {
            switch (a) {
                case 4: return 2;
                case 2: return 0;
                case 3: return 1;
                case 4142: break;
            }
            return 3;
        }
        static b(a) {
            switch (a) {
                case 7: return -9;
                case 6: return -8;
                case 0: return -2;
                case 3: return -5;
                case 4: return -6;
                case 9: return 1;
                case 5: return -7;
                case 2: return -4;
                case 1: return -3;
                case 8: return -10;
                default: break;
            }
            return -4142;
        }
        static i(a) {
            if (a == null) {
                return null;
            }
            return ((() => {
                let $ret = new CT_Tx();
                $ret.b = a.b;
                return $ret;
            })());
        }
        static g(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                default: return 2;
            }
        }
        static n(a) {
            switch (a) {
                case 0: return 0;
                case 1: return 1;
                default: return 2;
            }
        }
        static p(a) {
            switch (a) {
                case 114: return 0;
                case 51: break;
                case 117: break;
                case 116: return 3;
                case 118: return 5;
                case 119: return 6;
                case 120: return 7;
                case 115: return 2;
                case 121: return 4;
            }
            return 1;
        }
        static u(a, b, c, d) {
            if (a == null) {
                return;
            }
            a.clear();
            let e = new List$1(Axis.$, 0);
            switch (b.chartType) {
                case 119:
                case 118:
                case 121: return;
                case 114:
                case 117:
                case 120:
                    e.add(b._axisCollection$i.item(1, 1));
                    e.add(b._axisCollection$i.item(2, 1));
                    break;
                case 116:
                    e.add(b._axisCollection$i.item(1, 1));
                    e.add(b._axisCollection$i.item(2, 1));
                    e.add(b._axisCollection$i.item(2, 2));
                    break;
                case 115:
                    e.add(b._axisCollection$i.item(1, 1));
                    e.add(b._axisCollection$i.item(2, 1));
                    break;
            }
            if (e.count == 0) {
                return;
            }
            for (let f of fromEnum(e)) {
                if (f == null) {
                    continue;
                }
                let g = new CT_Axis();
                ChartExExtensions.t(g, f, b, c, d);
                a.add(g);
            }
        }
        static t(a, b, c, d, e) {
            if (b == null) {
                return;
            }
            a.aa = intSToU(b._cg);
            a.w = toNullable(Boolean_$type, (b.visible == false));
            if (b.type == 1) {
                let f = toNullable(Number_$type, null);
                if (b._gapWidth$i.hasValue) {
                    f = toNullable(Number_$type, b._gapWidth$i.value / 100);
                }
                a.e = ((() => {
                    let $ret = new CT_CategoryAxisScaling();
                    $ret.a = ((() => {
                        let $ret = new ST_GapWidthRatio();
                        $ret.b = f;
                        return $ret;
                    })());
                    return $ret;
                })());
            }
            else {
                let g = toNullable(Number_$type, null);
                let h = toNullable(Number_$type, null);
                if (b.maximumScaleIsAuto == false) {
                    g = toNullable(Number_$type, b.maximumScale);
                }
                if (b.minimumScaleIsAuto == false) {
                    h = toNullable(Number_$type, b.minimumScale);
                }
                a.r = ((() => {
                    let $ret = new CT_ValueAxisScaling();
                    $ret.b = ((() => {
                        let $ret = new ST_DoubleOrAutomatic();
                        $ret.b = g;
                        return $ret;
                    })());
                    $ret.d = ((() => {
                        let $ret = new ST_DoubleOrAutomatic();
                        $ret.b = h;
                        return $ret;
                    })());
                    return $ret;
                })());
                let i = ChartExExtensions.r(b.displayUnit);
                if (i.hasValue) {
                    a.c = ((() => {
                        let $ret = new CT_AxisUnits();
                        $ret.d = toNullable(ST_AxisUnit_$type, i.value);
                        return $ret;
                    })());
                    if (b.displayUnitLabel != null) {
                        a.c.a = ChartExExtensions.j(b, d, e);
                    }
                }
            }
            if (b.majorGridLines != null) {
                a.f = ((() => {
                    let $ret = new CT_Gridlines();
                    $ret.a = ChartSerializer.a5(d, null, b.majorGridLines, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
            }
            if (b.minorGridLines != null) {
                a.h = ((() => {
                    let $ret = new CT_Gridlines();
                    $ret.a = ChartSerializer.a5(d, null, b.minorGridLines, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
            }
            a.j = ((() => {
                let $ret = new CT_NumberFormat();
                $ret.c = b.tickLabels.numberFormat;
                $ret.a = toNullable(Boolean_$type, b.tickLabels.numberFormatLinked);
                return $ret;
            })());
            if (b.tickLines != null) {
                a.s = ChartSerializer.a5(d, null, b.tickLines, toNullable(BorderLineStyle_$type, null));
            }
            let j = b.tickLabels;
            if (j._aw()) {
                let k = -1000;
                let l = ChartSerializer.a9(d, k, toNullable(TextHorizontalOverflow_$type, null), toNullable(TextVerticalOverflow_$type, 2), 0, true, toNullable(VerticalTitleAlignment_$type, -4108));
                a.t = ChartSerializer.a7(l, j._an, null, j.readingOrder, d, null, true);
            }
            a.l = new CT_TickLabels();
            let m = ChartExExtensions.q(b.minorTickMark);
            let n = ChartExExtensions.q(b.majorTickMark);
            a.n = ((() => {
                let $ret = new CT_TickMarks();
                $ret.b = toNullable(ST_TickMarksType_$type, n);
                return $ret;
            })());
            a.p = ((() => {
                let $ret = new CT_TickMarks();
                $ret.b = toNullable(ST_TickMarksType_$type, m);
                return $ret;
            })());
            let o = b.axisTitle;
            if (o != null) {
                a.a = ChartExSerializer.a(o, d);
            }
        }
        static j(a, b, c) {
            let d = a != null ? a.displayUnitLabel : null;
            if (d == null) {
                return null;
            }
            let e = ChartSerializer.a9(b, d.rotation, toNullable(TextHorizontalOverflow_$type, 0), toNullable(TextVerticalOverflow_$type, 0), d.textDirection, d.wrapText, toNullable(VerticalTitleAlignment_$type, null));
            let f = ((() => {
                let $ret = new CT_AxisUnitsLabel();
                $ret.b = ChartSerializer.a5(b, d.fill, d.border, toNullable(BorderLineStyle_$type, null));
                return $ret;
            })());
            let g = d.text;
            if (g == null) {
                if (a.displayUnit == -4114) {
                    g = new FormattedString(numberToString(a.displayUnitCustom, CultureInfo.currentCulture));
                }
                else {
                    let h = c._cu(a.displayUnit);
                    if (h != null) {
                        g = new FormattedString(h);
                    }
                }
            }
            if (g != null) {
                let i = ChartSerializer.a7(e, d.defaultFont, g, d.readingOrder, b);
                f.a = ((() => {
                    let $ret = new CT_Text();
                    $ret.b = i;
                    return $ret;
                })());
            }
            else {
                f.c = ChartSerializer.a7(e, d.defaultFont, null, d.readingOrder, b, null);
            }
            return f;
        }
        static r(a) {
            switch (a) {
                case -4142: return toNullable(ST_AxisUnit_$type, null);
                case -8: return toNullable(ST_AxisUnit_$type, 6);
                case -4114:
                case -2: return toNullable(ST_AxisUnit_$type, 0);
                case -5: return toNullable(ST_AxisUnit_$type, 3);
                case -10: return toNullable(ST_AxisUnit_$type, 8);
                case -6: return toNullable(ST_AxisUnit_$type, 4);
                case 1: return toNullable(ST_AxisUnit_$type, 9);
                case -7: return toNullable(ST_AxisUnit_$type, 5);
                case -4: return toNullable(ST_AxisUnit_$type, 2);
                case -9: return toNullable(ST_AxisUnit_$type, 7);
                case -3: return toNullable(ST_AxisUnit_$type, 1);
                default: break;
            }
            return toNullable(ST_AxisUnit_$type, null);
        }
        static e(a) {
            switch (a) {
                case 0: return 1;
                case 1: return 2;
                case 2: return 3;
                default: return 0;
            }
        }
        static m(a) {
            switch (a) {
                case 1: return 0;
                case 2: return 1;
                case 3: return 2;
                default: return 3;
            }
        }
        static d(a) {
            switch (a) {
                case 5: return 5;
                case 2: return 2;
                case 0: return 0;
                case 1: return 1;
                case 3: return 3;
                case 6: return 6;
                default: return 4;
            }
        }
        static l(a) {
            switch (a) {
                case 4: return 4;
                case 2: return 2;
                case 5: return 5;
                case 1: return 1;
                case 3: return 3;
                case 6: return 6;
                default: return 0;
            }
        }
        static c(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                default: return 0;
            }
        }
        static o(a) {
            switch (a) {
                case 1: return 1;
                case 2: return 2;
                default: return 0;
            }
        }
    }
    ChartExExtensions.$t = /*@__PURE__*/ markType(ChartExExtensions, 'ChartExExtensions');
    return ChartExExtensions;
})();
/**
 * @hidden
 */
export let CT_StyleReference = /*@__PURE__*/ (() => {
    class CT_StyleReference extends Base {
        constructor() {
            super();
            this.b = null;
            this.i = 0;
            this.d = null;
            this.e = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new EG_ColorChoice_DML();
            }
            return this.e;
        }
        static j(a, b, c) {
            b = 0;
            c = null;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "idx":
                        b = parseUInt32_1(d.d, CultureInfo.invariantCulture);
                        break;
                    case "mods":
                        c = ST_StyleReferenceModifierList.a(d.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static k(a, b, c, d) {
            a.ad.p(b, "cs");
            let e = null;
            let f = null;
            if (c != null) {
                f = "mods";
                e = c.e();
                a.ad.h(f, e);
            }
            f = "idx";
            e = d.toString();
            a.ad.h(f, e);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1619:
                    this.a = typeCast(CT_StyleColor.$, b);
                    break;
                default:
                    if (this.f.g(a)) {
                        this.f.i(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_StyleReference.$t = /*@__PURE__*/ markType(CT_StyleReference, 'CT_StyleReference', Base.$, [ISupportSetProperty_$type]);
    return CT_StyleReference;
})();
/**
 * @hidden
 */
export let CT_FontReference_ChartStyle = /*@__PURE__*/ (() => {
    class CT_FontReference_ChartStyle extends Base {
        constructor() {
            super();
            this.c = null;
            this.i = 0;
            this.e = null;
            this.f = null;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get g() {
            if (this.f == null) {
                this.f = new EG_ColorChoice_DML();
            }
            return this.f;
        }
        static k(a, b, c) {
            b = 0;
            c = null;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "idx":
                        b = XmlNamespaceDefinitionBase.b(ST_FontCollectionIndex_$type, d.d);
                        break;
                    case "mods":
                        c = ST_StyleReferenceModifierList.a(d.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static l(a, b, c, d) {
            a.ad.p(b, "cs");
            let e = null;
            let f = null;
            if (c != null) {
                f = "mods";
                e = c.e();
                a.ad.h(f, e);
            }
            f = "idx";
            e = XmlNamespaceDefinitionBase.p(ST_FontCollectionIndex_$type, d);
            a.ad.h(f, e);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1619:
                    this.b = typeCast(CT_StyleColor.$, b);
                    break;
                default:
                    if (this.g.g(a)) {
                        this.g.i(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        static a(a, b, c = toNullable(Number_$type, null), d = toNullable(Number_$type, null)) {
            let e = ((() => {
                let $ret = new CT_FontReference_ChartStyle();
                $ret.h = a;
                return $ret;
            })());
            e.g.c = CT_SchemeColor_DML.e(b, c, d);
            return e;
        }
    }
    CT_FontReference_ChartStyle.$t = /*@__PURE__*/ markType(CT_FontReference_ChartStyle, 'CT_FontReference_ChartStyle', Base.$, [ISupportSetProperty_$type]);
    return CT_FontReference_ChartStyle;
})();
/**
 * @hidden
 */
export let CT_StyleEntry = /*@__PURE__*/ (() => {
    class CT_StyleEntry extends Base {
        constructor() {
            super();
            this.j = null;
            this.f = null;
            this.x = 0;
            this.e = null;
            this.d = null;
            this.b = null;
            this.p = null;
            this.t = null;
            this.r = null;
            this.n = null;
            this.w = null;
            this.v = null;
            this.l = null;
            this.m = null;
            this.a = null;
        }
        get k() {
            return this.j;
        }
        set k(a) {
            this.j = a;
        }
        get i() {
            return this.f;
        }
        set i(a) {
            this.f = a;
        }
        get y() {
            return this.x;
        }
        set y(a) {
            this.x = a;
        }
        get h() {
            return this.e;
        }
        set h(a) {
            this.e = a;
        }
        get g() {
            return this.d;
        }
        set g(a) {
            this.d = a;
        }
        get c() {
            return this.b;
        }
        set c(a) {
            this.b = a;
        }
        get q() {
            return this.p;
        }
        set q(a) {
            this.p = a;
        }
        get u() {
            return this.t;
        }
        set u(a) {
            this.t = a;
        }
        get s() {
            return this.r;
        }
        set s(a) {
            this.r = a;
        }
        get o() {
            return this.n;
        }
        set o(a) {
            this.n = a;
        }
        static ab(a, b) {
            b = null;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "mods":
                        b = ST_StyleEntryModifierList.a(c.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static ac(a, b, c = null) {
            a.ad.p(b, "cs");
            let d = null;
            let e = null;
            if (c != null) {
                e = "mods";
                d = c.e();
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 925:
                    this.i = typeCast(CT_StyleReference.$, b);
                    break;
                case 909:
                    this.y = b;
                    break;
                case 635:
                    this.h = typeCast(CT_StyleReference.$, b);
                    break;
                case 561:
                    this.g = typeCast(CT_StyleReference.$, b);
                    break;
                case 660:
                    this.c = typeCast(CT_FontReference_ChartStyle.$, b);
                    break;
                case 1570:
                    this.q = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 455:
                    this.u = typeCast(CT_TextCharacterProperties_DML.$, b);
                    break;
                case 136:
                    this.s = typeCast(CT_TextBodyProperties_DML.$, b);
                    break;
                case 601:
                    this.o = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        aa(a) {
            if (a == null) {
                return;
            }
            let b = a.c;
            let c = 0;
            if (b != null && this.h != null && this.h.h > 0) {
                let d = false;
                c = ((() => { let e = CT_FillStyleList.c(this.h.h, d); d = e.p1; return e.ret; })());
                let e = d ? b.a.b._inner[c] : b.c.b._inner[c];
                if (d) {
                    this.v = e;
                }
                else {
                    this.w = e;
                }
            }
            if (b != null && this.g != null && this.g.h > 0) {
                c = this.g.h;
                this.l = b.b.c._inner[c];
            }
            if (b != null && this.i != null && this.i.h > 0) {
                c = this.i.h;
                this.m = b.d.a._inner[c];
            }
            if (this.c != null) {
                this.a = this.c.h == 0 ? a.a : this.c.h == 1 ? a.b : null;
            }
        }
    }
    CT_StyleEntry.$t = /*@__PURE__*/ markType(CT_StyleEntry, 'CT_StyleEntry', Base.$, [ISupportSetProperty_$type]);
    return CT_StyleEntry;
})();
/**
 * @hidden
 */
export let CT_ChartStyle = /*@__PURE__*/ (() => {
    class CT_ChartStyle extends Base {
        constructor() {
            super();
            this.bi = toNullable(Number_$type, null);
            this.e = null;
            this.f = null;
            this.g = null;
            this.h = null;
            this.i = null;
            this.j = null;
            this.k = null;
            this.l = null;
            this.m = null;
            this.c = null;
            this.n = null;
            this.o = null;
            this.p = null;
            this.q = null;
            this.r = null;
            this.s = null;
            this.t = null;
            this.u = null;
            this.v = null;
            this.w = null;
            this.x = null;
            this.y = null;
            this.z = null;
            this.aa = null;
            this.ab = null;
            this.ac = null;
            this.ad = null;
            this.ae = null;
            this.af = null;
            this.ag = null;
            this.ah = null;
            this.be = null;
        }
        get bj() {
            return this.bi;
        }
        set bj(a) {
            this.bi = a;
        }
        get ai() {
            return this.e;
        }
        set ai(a) {
            this.e = a;
        }
        get aj() {
            return this.f;
        }
        set aj(a) {
            this.f = a;
        }
        get ak() {
            return this.g;
        }
        set ak(a) {
            this.g = a;
        }
        get al() {
            return this.h;
        }
        set al(a) {
            this.h = a;
        }
        get am() {
            return this.i;
        }
        set am(a) {
            this.i = a;
        }
        get an() {
            return this.j;
        }
        set an(a) {
            this.j = a;
        }
        get ao() {
            return this.k;
        }
        set ao(a) {
            this.k = a;
        }
        get ap() {
            return this.l;
        }
        set ap(a) {
            this.l = a;
        }
        get aq() {
            return this.m;
        }
        set aq(a) {
            this.m = a;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
        get ar() {
            return this.n;
        }
        set ar(a) {
            this.n = a;
        }
        get as() {
            return this.o;
        }
        set as(a) {
            this.o = a;
        }
        get at() {
            return this.p;
        }
        set at(a) {
            this.p = a;
        }
        get au() {
            return this.q;
        }
        set au(a) {
            this.q = a;
        }
        get av() {
            return this.r;
        }
        set av(a) {
            this.r = a;
        }
        get aw() {
            return this.s;
        }
        set aw(a) {
            this.s = a;
        }
        get ax() {
            return this.t;
        }
        set ax(a) {
            this.t = a;
        }
        get ay() {
            return this.u;
        }
        set ay(a) {
            this.u = a;
        }
        get az() {
            return this.v;
        }
        set az(a) {
            this.v = a;
        }
        get a0() {
            return this.w;
        }
        set a0(a) {
            this.w = a;
        }
        get a1() {
            return this.x;
        }
        set a1(a) {
            this.x = a;
        }
        get a2() {
            return this.y;
        }
        set a2(a) {
            this.y = a;
        }
        get a3() {
            return this.z;
        }
        set a3(a) {
            this.z = a;
        }
        get a4() {
            return this.aa;
        }
        set a4(a) {
            this.aa = a;
        }
        get a5() {
            return this.ab;
        }
        set a5(a) {
            this.ab = a;
        }
        get a6() {
            return this.ac;
        }
        set a6(a) {
            this.ac = a;
        }
        get a7() {
            return this.ad;
        }
        set a7(a) {
            this.ad = a;
        }
        get a8() {
            return this.ae;
        }
        set a8(a) {
            this.ae = a;
        }
        get a9() {
            return this.af;
        }
        set a9(a) {
            this.af = a;
        }
        get ba() {
            return this.ag;
        }
        set ba(a) {
            this.ag = a;
        }
        get bb() {
            return this.ah;
        }
        set bb(a) {
            this.ah = a;
        }
        get bf() {
            return this.be;
        }
        set bf(a) {
            this.be = a;
        }
        static bl(a, b) {
            b = toNullable(Number_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "id":
                        b = toNullable(Number_$type, parseUInt32_1(c.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static bn(a, b, c = toNullable(Number_$type, null)) {
            a.ad.p(b, "cs");
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "id";
                d = c.value.toString();
                a.ad.h(e, d);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 85:
                    this.ai = typeCast(CT_StyleEntry.$, b);
                    break;
                case 233:
                    this.aj = typeCast(CT_StyleEntry.$, b);
                    break;
                case 262:
                    this.ak = typeCast(CT_StyleEntry.$, b);
                    break;
                case 417:
                    this.al = typeCast(CT_StyleEntry.$, b);
                    break;
                case 418:
                    this.am = typeCast(CT_StyleEntry.$, b);
                    break;
                case 423:
                    this.an = typeCast(CT_StyleEntry.$, b);
                    break;
                case 424:
                    this.ao = typeCast(CT_StyleEntry.$, b);
                    break;
                case 425:
                    this.ap = typeCast(CT_StyleEntry.$, b);
                    break;
                case 426:
                    this.aq = typeCast(CT_StyleEntry.$, b);
                    break;
                case 427:
                    this.d = typeCast(CT_MarkerLayout.$, b);
                    break;
                case 428:
                    this.ar = typeCast(CT_StyleEntry.$, b);
                    break;
                case 433:
                    this.as = typeCast(CT_StyleEntry.$, b);
                    break;
                case 535:
                    this.at = typeCast(CT_StyleEntry.$, b);
                    break;
                case 542:
                    this.au = typeCast(CT_StyleEntry.$, b);
                    break;
                case 594:
                    this.av = typeCast(CT_StyleEntry.$, b);
                    break;
                case 654:
                    this.aw = typeCast(CT_StyleEntry.$, b);
                    break;
                case 739:
                    this.ax = typeCast(CT_StyleEntry.$, b);
                    break;
                case 740:
                    this.ay = typeCast(CT_StyleEntry.$, b);
                    break;
                case 779:
                    this.az = typeCast(CT_StyleEntry.$, b);
                    break;
                case 885:
                    this.a0 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 890:
                    this.a1 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1235:
                    this.a2 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1236:
                    this.a3 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1450:
                    this.a4 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1451:
                    this.a5 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1745:
                    this.a6 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1767:
                    this.a7 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1768:
                    this.a8 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1807:
                    this.a9 = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1825:
                    this.ba = typeCast(CT_StyleEntry.$, b);
                    break;
                case 1851:
                    this.bb = typeCast(CT_StyleEntry.$, b);
                    break;
                case 601:
                    this.bf = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        get a() {
            let a = [this.ai, this.aj, this.ak, this.al, this.am, this.an, this.ao, this.ap, this.aq, this.ar, this.as, this.at, this.au, this.av, this.aw, this.ax, this.ay, this.az, this.a0, this.a1, this.a2, this.a3, this.a4, this.a5, this.a6, this.a7, this.a8, this.a9, this.ba, this.bb];
            return a;
        }
        static b() {
            let a = 5;
            let b = 15;
            let c = 25;
            let d = 35;
            let e = 65;
            let f = 75;
            let g = 85;
            let h = 95;
            let i = new CT_ChartStyle();
            i.bj = toNullable(Number_$type, 10);
            i.ai = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.ai.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.ai.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                return $ret;
            })());
            i.aj = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.aj.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.aj.q = ((() => {
                let $ret = new CT_ShapeProperties_DML();
                $ret.a = ((() => {
                    let $ret = new CT_LineProperties_DML();
                    $ret.h = toNullable(ST_LineWidth.$, new ST_LineWidth(1, ST_Coordinate32Unqualified.a(9525)));
                    $ret.f = toNullable(ST_LineCap_$type, 2);
                    $ret.g = toNullable(ST_CompoundLine_$type, 0);
                    $ret.e = toNullable(ST_PenAlignment_$type, 0);
                    return $ret;
                })());
                return $ret;
            })());
            i.aj.q.a.n.c = CT_ChartStyle.bh(1, toNullable(Number_$type, b), toNullable(Number_$type, g));
            i.aj.q.a.p.c = new CT_LineJoinRound();
            i.aj.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                $ret.j = toNullable(Number_$type, 1200);
                return $ret;
            })());
            i.ak = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.ak.k = CT_ChartStyle.bc();
            i.ak.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.ak.q = CT_ChartStyle.bg(0);
            i.ak.q.a = new CT_LineProperties_DML();
            i.ak.q.a.n.c = CT_ChartStyle.bh(1, toNullable(Number_$type, b), toNullable(Number_$type, g));
            i.ak.q.a.p.c = new CT_LineJoinRound();
            i.ak.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 1000);
                $ret.j = toNullable(Number_$type, 1200);
                return $ret;
            })());
            i.al = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.al.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.al.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                return $ret;
            })());
            i.am = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.am.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.am.q = CT_ChartStyle.bg(14);
            i.am.q.a = new CT_LineProperties_DML();
            i.am.q.a.n.c = CT_ChartStyle.bh(13, toNullable(Number_$type, c), toNullable(Number_$type, f));
            i.am.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                return $ret;
            })());
            i.am.s = ((() => {
                let $ret = new CT_TextBodyProperties_DML();
                $ret.af = toNullable(Number_$type, 0);
                $ret.al = toNullable(Boolean_$type, true);
                $ret.at = toNullable(ST_TextVertOverflowType_$type, 2);
                $ret.x = toNullable(ST_TextHorzOverflowType_$type, 1);
                $ret.ar = toNullable(ST_TextVerticalType_$type, 0);
                $ret.av = toNullable(ST_TextWrappingType_$type, 1);
                $ret.z = toNullable(Number_$type, 36576);
                $ret.an = toNullable(Number_$type, 18288);
                $ret.ad = toNullable(Number_$type, 36576);
                $ret.p = toNullable(Number_$type, 18288);
                $ret.l = toNullable(ST_TextAnchoringType_$type, 1);
                $ret.m = toNullable(Boolean_$type, true);
                return $ret;
            })());
            i.am.s.j.c = new CT_TextShapeAutofit();
            i.an = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.an.h.a = ((() => {
                let $ret = new CT_StyleColor();
                $ret.f = ((() => {
                    let $ret = new ST_StyleColorVal();
                    $ret.f = toNullable(ST_StyleColorEnum_$type, 0);
                    return $ret;
                })());
                return $ret;
            })());
            i.an.c = CT_FontReference_ChartStyle.a(1, 1);
            i.an.q = CT_ChartStyle.bg(12);
            i.ao = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.ao.h.a = ((() => {
                let $ret = new CT_StyleColor();
                $ret.f = ((() => {
                    let $ret = new ST_StyleColorVal();
                    $ret.f = toNullable(ST_StyleColorEnum_$type, 0);
                    return $ret;
                })());
                return $ret;
            })());
            i.ao.c = CT_FontReference_ChartStyle.a(1, 1);
            i.ao.q = CT_ChartStyle.bg(12);
            i.ap = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.ap.i.a = ((() => {
                let $ret = new CT_StyleColor();
                $ret.f = ((() => {
                    let $ret = new ST_StyleColorVal();
                    $ret.f = toNullable(ST_StyleColorEnum_$type, 0);
                    return $ret;
                })());
                return $ret;
            })());
            i.ap.c = CT_FontReference_ChartStyle.a(1, 1);
            i.ap.q = ((() => {
                let $ret = new CT_ShapeProperties_DML();
                $ret.a = ((() => {
                    let $ret = new CT_LineProperties_DML();
                    $ret.h = toNullable(ST_LineWidth.$, new ST_LineWidth(1, ST_Coordinate32Unqualified.a(28575)));
                    $ret.f = toNullable(ST_LineCap_$type, 0);
                    return $ret;
                })());
                return $ret;
            })());
            i.ap.q.a.n.c = CT_ChartStyle.bh(12);
            i.ap.q.a.p.c = new CT_LineJoinRound();
            i.aq = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.aq.h.a = ((() => {
                let $ret = new CT_StyleColor();
                $ret.f = ((() => {
                    let $ret = new ST_StyleColorVal();
                    $ret.f = toNullable(ST_StyleColorEnum_$type, 0);
                    return $ret;
                })());
                return $ret;
            })());
            i.aq.c = CT_FontReference_ChartStyle.a(1, 1);
            i.aq.q = CT_ChartStyle.bg(12);
            i.aq.q.a = new CT_LineProperties_DML();
            i.aq.q.a.n.c = CT_ChartStyle.bh(14);
            i.d = ((() => {
                let $ret = new CT_MarkerLayout();
                $ret.c = toNullable(ST_MarkerStyle_$type, 1);
                $ret.a = toNullable(Number_$type, 5);
                return $ret;
            })());
            i.ar = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.ar.i.a = ((() => {
                let $ret = new CT_StyleColor();
                $ret.f = ((() => {
                    let $ret = new ST_StyleColorVal();
                    $ret.f = toNullable(ST_StyleColorEnum_$type, 0);
                    return $ret;
                })());
                return $ret;
            })());
            i.ar.c = CT_FontReference_ChartStyle.a(1, 1);
            i.ar.q = new CT_ShapeProperties_DML();
            i.ar.q.a = new CT_LineProperties_DML();
            i.ar.q.a.n.c = CT_ChartStyle.bh(12);
            i.ar.q.a.p.c = new CT_LineJoinRound();
            i.as = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.as.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.as.q = new CT_ShapeProperties_DML();
            i.as.q.a = ((() => {
                let $ret = new CT_LineProperties_DML();
                $ret.h = toNullable(ST_LineWidth.$, new ST_LineWidth(1, ST_Coordinate32Unqualified.a(9525)));
                return $ret;
            })());
            i.as.q.a.n.c = CT_ChartStyle.bh(1, toNullable(Number_$type, b), toNullable(Number_$type, g));
            i.as.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                return $ret;
            })());
            i.at = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.at.c = CT_FontReference_ChartStyle.a(1, 13);
            i.at.q = CT_ChartStyle.bg(13);
            i.au = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.au.c = CT_FontReference_ChartStyle.a(1, 1);
            i.av = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.av.c = CT_FontReference_ChartStyle.a(1, 1);
            i.aw = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.aw.c = CT_FontReference_ChartStyle.a(1, 1);
            i.ax = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.ax.c = CT_FontReference_ChartStyle.a(1, 1);
            i.ax.q = new CT_ShapeProperties_DML();
            i.ax.q.a = ((() => {
                let $ret = new CT_LineProperties_DML();
                $ret.h = toNullable(ST_LineWidth.$, new ST_LineWidth(1, ST_Coordinate32Unqualified.a(9525)));
                $ret.f = toNullable(ST_LineCap_$type, 2);
                $ret.g = toNullable(ST_CompoundLine_$type, 0);
                $ret.e = toNullable(ST_PenAlignment_$type, 0);
                return $ret;
            })());
            i.ax.q.a.n.c = CT_ChartStyle.bh(1, toNullable(Number_$type, b), toNullable(Number_$type, g));
            i.ax.q.a.p.c = new CT_LineJoinRound();
            i.ay = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.ay.c = CT_FontReference_ChartStyle.a(1, 1);
            i.ay.q = new CT_ShapeProperties_DML();
            i.ay.q.a = ((() => {
                let $ret = new CT_LineProperties_DML();
                $ret.h = toNullable(ST_LineWidth.$, new ST_LineWidth(1, ST_Coordinate32Unqualified.a(9525)));
                $ret.f = toNullable(ST_LineCap_$type, 2);
                $ret.g = toNullable(ST_CompoundLine_$type, 0);
                $ret.e = toNullable(ST_PenAlignment_$type, 0);
                return $ret;
            })());
            i.ay.q.a.n.c = CT_ChartStyle.bh(1, toNullable(Number_$type, a), toNullable(Number_$type, h));
            i.ay.q.a.p.c = new CT_LineJoinRound();
            i.az = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.az.c = CT_FontReference_ChartStyle.a(1, 1);
            i.a0 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a0.c = CT_FontReference_ChartStyle.a(1, 1);
            i.a0 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a0.c = CT_FontReference_ChartStyle.a(1, 1);
            i.a1 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a1.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.a1.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                return $ret;
            })());
            i.a2 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a2.k = CT_ChartStyle.bc();
            i.a2.c = CT_FontReference_ChartStyle.a(1, 1);
            i.a3 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a3.k = CT_ChartStyle.bc();
            i.a3.c = CT_FontReference_ChartStyle.a(1, 1);
            i.a4 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a4.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.a4.q = new CT_ShapeProperties_DML();
            i.a4.q.a = ((() => {
                let $ret = new CT_LineProperties_DML();
                $ret.e = toNullable(ST_PenAlignment_$type, 0);
                $ret.f = toNullable(ST_LineCap_$type, 2);
                $ret.g = toNullable(ST_CompoundLine_$type, 0);
                $ret.h = toNullable(ST_LineWidth.$, new ST_LineWidth(1, ST_Coordinate32Unqualified.a(9525)));
                return $ret;
            })());
            i.a4.q.a.n.c = CT_ChartStyle.bh(1, toNullable(Number_$type, g), toNullable(Number_$type, b));
            i.a4.q.a.p.c = new CT_LineJoinRound();
            i.a4.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                return $ret;
            })());
            i.a5 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a5.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.a5.q = new CT_ShapeProperties_DML();
            i.a5.q.a = ((() => {
                let $ret = new CT_LineProperties_DML();
                $ret.f = toNullable(ST_LineCap_$type, 2);
                $ret.h = toNullable(ST_LineWidth.$, new ST_LineWidth(1, ST_Coordinate32Unqualified.a(9525)));
                return $ret;
            })());
            i.a5.q.a.n.c = new CT_SolidColorFillProperties();
            i.a5.q.a.n.c.b.e = ((() => {
                let $ret = new CT_SRgbColor_DML();
                $ret.f = new ST_HexColorRGB(2, 217, 217, 217);
                return $ret;
            })());
            i.a5.q.a.p.c = new CT_LineJoinRound();
            i.a6 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a6.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.a6.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 1400);
                $ret.d = toNullable(Boolean_$type, false);
                $ret.j = toNullable(Number_$type, 1200);
                $ret.p = toNullable(ST_TextPoint.$, new ST_TextPoint(1, ST_TextPointUnqualified.a(0)));
                $ret.e = toNullable(ST_Percentage.$, ST_Percentage.b(0));
                return $ret;
            })());
            i.a7 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a7.i.a = ((() => {
                let $ret = new CT_StyleColor();
                $ret.f = ((() => {
                    let $ret = new ST_StyleColorVal();
                    $ret.f = toNullable(ST_StyleColorEnum_$type, 0);
                    return $ret;
                })());
                return $ret;
            })());
            i.a7.c = CT_FontReference_ChartStyle.a(1, 1);
            i.a7.q = ((() => {
                let $ret = new CT_ShapeProperties_DML();
                $ret.a = new CT_LineProperties_DML();
                return $ret;
            })());
            i.a7.q.a.n.c = CT_ChartStyle.bh(12);
            i.a7.q.a.l.b = ((() => {
                let $ret = new CT_PresetLineDashProperties();
                $ret.a = toNullable(ST_PresetLineDashVal_$type, 7);
                return $ret;
            })());
            i.a8 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a8.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.a8.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                return $ret;
            })());
            i.a9 = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.a9.c = CT_FontReference_ChartStyle.a(1, 13);
            i.a9.q = CT_ChartStyle.bg(14);
            i.ba = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.ba.c = CT_FontReference_ChartStyle.a(1, 1, toNullable(Number_$type, e), toNullable(Number_$type, d));
            i.ba.u = ((() => {
                let $ret = new CT_TextCharacterProperties_DML();
                $ret.r = toNullable(Number_$type, 900);
                $ret.j = toNullable(Number_$type, 1200);
                return $ret;
            })());
            i.bb = ((() => {
                let $ret = new CT_StyleEntry();
                $ret.i = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.h = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_StyleReference();
                    $ret.h = 0;
                    return $ret;
                })());
                return $ret;
            })());
            i.bb.c = CT_FontReference_ChartStyle.a(1, 1);
            return i;
        }
        static bc() {
            let a = [0, 1];
            return CT_ChartStyle.bd(a);
        }
        static bd(a) {
            let b = ((() => {
                let $ret = new ST_StyleEntryModifierList();
                $ret.d = new List$1(ST_StyleEntryModifier.$, 0);
                return $ret;
            })());
            for (let d = 0; d < a.length; d++) {
                let c = a[d];
                b.d.add(((() => {
                    let $ret = new ST_StyleEntryModifier();
                    $ret.d = toNullable(ST_StyleEntryModifierEnum_$type, c);
                    return $ret;
                })()));
            }
            return b;
        }
        static bg(a, b = toNullable(Number_$type, null), c = toNullable(Number_$type, null)) {
            let d = new CT_ShapeProperties_DML();
            d.l.c = CT_ChartStyle.bh(a, b, c);
            return d;
        }
        static bh(a, b = toNullable(Number_$type, null), c = toNullable(Number_$type, null)) {
            let d = new CT_SolidColorFillProperties();
            d.b.c = CT_SchemeColor_DML.e(a, b, c);
            return d;
        }
        bm(a) {
            switch (a) {
                case 118:
                case 119:
                    this.al.c.g.c = ((() => {
                        let $ret = new CT_SchemeColor_DML();
                        $ret.g = 14;
                        return $ret;
                    })());
                    this.al.c.g.c.b.p = null;
                    this.al.c.g.c.b.q = null;
                    break;
                default: break;
            }
        }
    }
    CT_ChartStyle.$t = /*@__PURE__*/ markType(CT_ChartStyle, 'CT_ChartStyle', Base.$, [ISupportSetProperty_$type]);
    return CT_ChartStyle;
})();
/**
 * @hidden
 */
export let CT_ColorStyleVariation = /*@__PURE__*/ (() => {
    class CT_ColorStyleVariation extends CT_DMLColorBase {
        constructor() {
            super();
        }
        d(a, b, c) {
            c.p(ChartStyleElements.ar, "cs");
            if (this.b != null) {
                this.b.af(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.ag(a, b);
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ColorStyleVariation.$t = /*@__PURE__*/ markType(CT_ColorStyleVariation, 'CT_ColorStyleVariation', CT_DMLColorBase.$, [ISupportSetProperty_$type]);
    return CT_ColorStyleVariation;
})();
/**
 * @hidden
 */
export let CT_StyleColor = /*@__PURE__*/ (() => {
    class CT_StyleColor extends CT_DMLColorBase {
        constructor() {
            super();
            this.f = null;
        }
        static e(a) {
            let b = null;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = ST_StyleColorVal.a(c.d);
                        break;
                    default: break;
                }
            }
            let d = ((() => {
                let $ret = new CT_StyleColor();
                $ret.f = b;
                return $ret;
            })());
            return d;
        }
        d(a, b, c) {
            ChartStyleUtils.b(a, ChartStyleElements.al, this.f);
            if (this.b != null) {
                this.b.af(a, b, c, null);
            }
            c.k();
        }
        setProperty(a, b) {
            if (this.b != null) {
                this.b.ag(a, b);
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_StyleColor.$t = /*@__PURE__*/ markType(CT_StyleColor, 'CT_StyleColor', CT_DMLColorBase.$, [ISupportSetProperty_$type]);
    return CT_StyleColor;
})();
/**
 * @hidden
 */
export let CT_ColorStyle = /*@__PURE__*/ (() => {
    class CT_ColorStyle extends Base {
        constructor() {
            super();
            this.d = null;
            this.e = null;
            this.c = null;
            this.b = null;
            this.f = toNullable(Number_$type, null);
            this.d = new List$1(CT_DMLColorBase.$, 0);
            this.e = new List$1(CT_ColorStyleVariation.$, 0);
        }
        static h(a, b, c) {
            b = null;
            c = toNullable(Number_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "meth":
                        b = ST_ColorStyleMethod.a(d.d);
                        break;
                    case "id":
                        c = toNullable(Number_$type, parseUInt32_1(d.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c
            };
        }
        static i(a, b, c, d) {
            a.ad.p(b, "cs");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "id";
                e = c.value.toString();
                a.ad.h(f, e);
            }
            if (d != null) {
                f = "meth";
                e = d.f();
                a.ad.h(f, e);
            }
        }
        static a() {
            let a = 20;
            let b = 30;
            let c = 40;
            let d = 50;
            let e = 60;
            let f = 70;
            let g = 80;
            let h = new CT_ColorStyle();
            h.b = ((() => {
                let $ret = new ST_ColorStyleMethod();
                $ret.d = toNullable(ST_ColorStyleMethodEnum_$type, 0);
                return $ret;
            })());
            h.f = toNullable(Number_$type, 100);
            h.d.add(((() => {
                let $ret = new CT_SchemeColor_DML();
                $ret.g = 4;
                return $ret;
            })()));
            h.d.add(((() => {
                let $ret = new CT_SchemeColor_DML();
                $ret.g = 5;
                return $ret;
            })()));
            h.d.add(((() => {
                let $ret = new CT_SchemeColor_DML();
                $ret.g = 6;
                return $ret;
            })()));
            h.d.add(((() => {
                let $ret = new CT_SchemeColor_DML();
                $ret.g = 7;
                return $ret;
            })()));
            h.d.add(((() => {
                let $ret = new CT_SchemeColor_DML();
                $ret.g = 8;
                return $ret;
            })()));
            h.d.add(((() => {
                let $ret = new CT_SchemeColor_DML();
                $ret.g = 9;
                return $ret;
            })()));
            let i = null;
            i = new CT_ColorStyleVariation();
            h.e.add(i);
            i = new CT_ColorStyleVariation();
            i.b.p = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(e);
                return $ret;
            })());
            h.e.add(i);
            i = new CT_ColorStyleVariation();
            i.b.p = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(g);
                return $ret;
            })());
            i.b.q = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(a);
                return $ret;
            })());
            h.e.add(i);
            i = new CT_ColorStyleVariation();
            i.b.p = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(g);
                return $ret;
            })());
            h.e.add(i);
            i = new CT_ColorStyleVariation();
            i.b.p = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(e);
                return $ret;
            })());
            i.b.q = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(c);
                return $ret;
            })());
            h.e.add(i);
            i = new CT_ColorStyleVariation();
            i.b.p = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(d);
                return $ret;
            })());
            h.e.add(i);
            i = new CT_ColorStyleVariation();
            i.b.p = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(f);
                return $ret;
            })());
            i.b.q = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(b);
                return $ret;
            })());
            h.e.add(i);
            i = new CT_ColorStyleVariation();
            i.b.p = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(f);
                return $ret;
            })());
            h.e.add(i);
            i = new CT_ColorStyleVariation();
            i.b.p = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(d);
                return $ret;
            })());
            i.b.q = ((() => {
                let $ret = new CT_Percentage();
                $ret.a = ST_Percentage.b(d);
                return $ret;
            })());
            h.e.add(i);
            return h;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ColorStyle.$t = /*@__PURE__*/ markType(CT_ColorStyle, 'CT_ColorStyle');
    return CT_ColorStyle;
})();
/**
 * @hidden
 */
export let ChartStyleExtensions = /*@__PURE__*/ (() => {
    class ChartStyleExtensions extends Base {
        static b(a, b, c, d, e) {
            CT_ColorStyle.i(b, e, a.f, a.b);
            d.l(DrawingMLMain.ao);
            if (a.c != null) {
                a.c.d(b, c, d, ChartStyleElements.u);
            }
            if (a.d != null) {
                for (let f of fromEnum(a.d)) {
                    f.d(b, c, d);
                }
            }
            if (a.e != null) {
                for (let g of fromEnum(a.e)) {
                    ChartStyleExtensions.c(g, b, c, d, ChartStyleElements.ar);
                }
            }
            if (a.c != null) {
                a.c.d(b, c, d, null);
            }
            d.k();
        }
        static c(a, b, c, d, e) {
            d.p(e, "cs");
            if (a.b != null) {
                a.b.af(b, c, d, null);
            }
            d.k();
        }
        static a(a, b, c, d, e) {
            CT_ChartStyle.bn(b, e, a.bj);
            b.ad.l(DrawingMLMain.ao);
            if (a.ai != null) {
                ChartStyleExtensions.f(a.ai, b, c, d, ChartStyleElements.a);
            }
            if (a.aj != null) {
                ChartStyleExtensions.f(a.aj, b, c, d, ChartStyleElements.c);
            }
            if (a.ak != null) {
                ChartStyleExtensions.f(a.ak, b, c, d, ChartStyleElements.d);
            }
            if (a.al != null) {
                ChartStyleExtensions.f(a.al, b, c, d, ChartStyleElements.g);
            }
            if (a.am != null) {
                ChartStyleExtensions.f(a.am, b, c, d, ChartStyleElements.h);
            }
            if (a.an != null) {
                ChartStyleExtensions.f(a.an, b, c, d, ChartStyleElements.i);
            }
            if (a.ao != null) {
                ChartStyleExtensions.f(a.ao, b, c, d, ChartStyleElements.j);
            }
            if (a.ap != null) {
                ChartStyleExtensions.f(a.ap, b, c, d, ChartStyleElements.k);
            }
            if (a.aq != null) {
                ChartStyleExtensions.f(a.aq, b, c, d, ChartStyleElements.l);
            }
            if (a.d != null) {
                ChartStyleExtensions.e(a.d, b, c, d, ChartStyleElements.m);
            }
            if (a.ar != null) {
                ChartStyleExtensions.f(a.ar, b, c, d, ChartStyleElements.n);
            }
            if (a.as != null) {
                ChartStyleExtensions.f(a.as, b, c, d, ChartStyleElements.o);
            }
            if (a.at != null) {
                ChartStyleExtensions.f(a.at, b, c, d, ChartStyleElements.q);
            }
            if (a.au != null) {
                ChartStyleExtensions.f(a.au, b, c, d, ChartStyleElements.r);
            }
            if (a.av != null) {
                ChartStyleExtensions.f(a.av, b, c, d, ChartStyleElements.t);
            }
            if (a.bf != null) {
                a.bf.d(b, c, d, ChartStyleElements.u);
            }
            if (a.aw != null) {
                ChartStyleExtensions.f(a.aw, b, c, d, ChartStyleElements.w);
            }
            if (a.ax != null) {
                ChartStyleExtensions.f(a.ax, b, c, d, ChartStyleElements.y);
            }
            if (a.ay != null) {
                ChartStyleExtensions.f(a.ay, b, c, d, ChartStyleElements.z);
            }
            if (a.az != null) {
                ChartStyleExtensions.f(a.az, b, c, d, ChartStyleElements.aa);
            }
            if (a.a0 != null) {
                ChartStyleExtensions.f(a.a0, b, c, d, ChartStyleElements.ab);
            }
            if (a.a1 != null) {
                ChartStyleExtensions.f(a.a1, b, c, d, ChartStyleElements.ac);
            }
            if (a.a2 != null) {
                ChartStyleExtensions.f(a.a2, b, c, d, ChartStyleElements.ag);
            }
            if (a.a3 != null) {
                ChartStyleExtensions.f(a.a3, b, c, d, ChartStyleElements.ah);
            }
            if (a.a4 != null) {
                ChartStyleExtensions.f(a.a4, b, c, d, ChartStyleElements.ai);
            }
            if (a.a5 != null) {
                ChartStyleExtensions.f(a.a5, b, c, d, ChartStyleElements.aj);
            }
            if (a.a6 != null) {
                ChartStyleExtensions.f(a.a6, b, c, d, ChartStyleElements.am);
            }
            if (a.a7 != null) {
                ChartStyleExtensions.f(a.a7, b, c, d, ChartStyleElements.an);
            }
            if (a.a8 != null) {
                ChartStyleExtensions.f(a.a8, b, c, d, ChartStyleElements.ao);
            }
            if (a.a9 != null) {
                ChartStyleExtensions.f(a.a9, b, c, d, ChartStyleElements.ap);
            }
            if (a.ba != null) {
                ChartStyleExtensions.f(a.ba, b, c, d, ChartStyleElements.aq);
            }
            if (a.bb != null) {
                ChartStyleExtensions.f(a.bb, b, c, d, ChartStyleElements.as);
            }
            d.k();
        }
        static f(a, b, c, d, e) {
            CT_StyleEntry.ac(b, e, a.k);
            if (a.i != null) {
                ChartStyleExtensions.g(a.i, b, c, d, ChartStyleElements.ae);
            }
            if (a.y != 0) {
                d.p(ChartStyleElements.ad, "cs");
                d.u(numberToString(a.y, CultureInfo.invariantCulture));
                d.k();
            }
            if (a.h != null) {
                ChartStyleExtensions.g(a.h, b, c, d, ChartStyleElements.v);
            }
            if (a.g != null) {
                ChartStyleExtensions.g(a.g, b, c, d, ChartStyleElements.s);
            }
            if (a.c != null) {
                ChartStyleExtensions.d(a.c, b, c, d, ChartStyleElements.x);
            }
            if (a.q != null) {
                DMLExtensions.a5(a.q, b, c, d, ChartStyleElements.ak);
            }
            if (a.u != null) {
                a.u.aq(b, c, d, ChartStyleElements.p);
            }
            if (a.s != null) {
                DMLExtensions.bd(a.s, b, c, d, ChartStyleElements.b);
            }
            if (a.o != null) {
                a.o.d(b, c, d, ChartStyleElements.u);
            }
            d.k();
        }
        static e(a, b, c, d, e) {
            CT_MarkerLayout.g(b, e, a.a, a.c);
            d.k();
        }
        static g(a, b, c, d, e) {
            CT_StyleReference.k(b, e, a.c, a.h);
            if (a.a != null) {
                a.a.d(b, c, d);
            }
            if (a.f != null) {
                a.f.h(b, c, d, null);
            }
            d.k();
        }
        static d(a, b, c, d, e) {
            CT_FontReference_ChartStyle.l(b, e, a.d, a.h);
            if (a.b != null) {
                a.b.d(b, c, d);
            }
            if (a.g != null) {
                a.g.h(b, c, d, null);
            }
            d.k();
        }
    }
    ChartStyleExtensions.$t = /*@__PURE__*/ markType(ChartStyleExtensions, 'ChartStyleExtensions');
    return ChartStyleExtensions;
})();
/**
 * @hidden
 */
export let ChartDeserializer = /*@__PURE__*/ (() => {
    class ChartDeserializer extends Base {
        constructor() {
            super(...arguments);
            this.b = null;
            this.o = null;
        }
        static lm(a) {
            a.az(ChartExElements.m, ChartDeserializer.by);
            a.az(DrawingMLChart.bh, ChartDeserializer.bx);
            a.ay(DrawingMLChart.bh, ChartDeserializer.bz);
            a.az(DrawingMLChart.bq, ChartDeserializer.cn);
            a.az(DrawingMLChart.c2, ChartDeserializer.e9);
            a.az(DrawingMLChart.e2, ChartDeserializer.io);
            a.az(DrawingMLChart.f2, ChartDeserializer.ka);
            a.az(DrawingMLChart.bi, ChartDeserializer.b3);
            a.az(DrawingMLChart.eo, ChartDeserializer.hq);
            a.az(DrawingMLChart.et, ChartDeserializer.hx);
            a.az(DrawingMLChart.bf, ChartDeserializer.bv);
            a.az(DrawingMLChart.fx, ChartDeserializer.j2);
            a.az(DrawingMLChart.gf, ChartDeserializer.kw);
            a.az(DrawingMLChart.cf, ChartDeserializer.dm);
            a.az(DrawingMLChart.es, ChartDeserializer.hw);
            a.az(DrawingMLChart.gj, ChartDeserializer.k5);
            a.az(DrawingMLChart.cg, ChartDeserializer.dn);
            a.az(DrawingMLMain.ds, ChartDeserializer.dp);
            a.az(DrawingMLMain.dr, ChartDeserializer.dl);
            a.az(DrawingMLChart.dw, ChartDeserializer.gq);
            a.az(DrawingMLChart.cm, ChartDeserializer.d4);
            a.az(DrawingMLChart.bg, ChartDeserializer.bw);
            a.az(DrawingMLChart.bp, ChartDeserializer.cl);
            a.az(DrawingMLChart.co, ChartDeserializer.d6);
            a.az(DrawingMLChart.e8, ChartDeserializer.i1);
            a.az(DrawingMLChart.gi, ChartDeserializer.k4);
            a.az(DrawingMLChart.ga, ChartDeserializer.kr);
            a.az(DrawingMLChart.aw, ChartDeserializer.ak);
            a.az(DrawingMLChart.en, ChartDeserializer.hp);
            a.az(DrawingMLChart.go, ChartDeserializer.la);
            a.az(DrawingMLChart.cl, ChartDeserializer.d3);
            a.az(DrawingMLChart.fr, ChartDeserializer.jn);
            a.az(DrawingMLChart.a0, ChartDeserializer.aq);
            a.az(DrawingMLChart.ep, ChartDeserializer.hr);
            a.az(DrawingMLChart.c9, ChartDeserializer.fj);
            a.az(DrawingMLChart.eq, ChartDeserializer.hs);
            a.az(DrawingMLChart.bu, ChartDeserializer.ct);
            a.az(DrawingMLChart.fg, ChartDeserializer.jb);
            a.az(DrawingMLChart.ge, ChartDeserializer.kv);
            a.az(DrawingMLChart.c3, ChartDeserializer.fb);
            a.az(DrawingMLChart.ec, ChartDeserializer.ha);
            a.az(DrawingMLChart.f1, ChartDeserializer.j9);
            a.az(DrawingMLChart.ez, ChartDeserializer.ii);
            a.az(DrawingMLChart.ch, ChartDeserializer.dr);
            a.az(DrawingMLChart.fz, ChartDeserializer.j6);
            a.az(DrawingMLChart.ev, ChartDeserializer.h5);
            a.az(DrawingMLChart.eu, ChartDeserializer.h3);
            a.az(DrawingMLChart.gk, ChartDeserializer.k6);
            a.az(DrawingMLMain.b0, ChartDeserializer.ba);
            a.az(DrawingMLMain.f2, ChartDeserializer.fu);
            a.az(DrawingMLMain.he, ChartDeserializer.hb);
            a.az(DrawingMLMain.hs, ChartDeserializer.h2);
            a.az(DrawingMLMain.gs, ChartDeserializer.gr);
            a.az(DrawingMLMain.g6, ChartDeserializer.gw);
            a.az(DrawingMLMain.ir, ChartDeserializer.jv);
            a.az(DrawingMLMain.ie, ChartDeserializer.iw);
            a.az(DrawingMLMain.iq, ChartDeserializer.ju);
            a.az(DrawingMLMain.d3, ChartDeserializer.d1);
            a.az(DrawingMLMain.bh, ChartDeserializer.am);
            a.az(DrawingMLMain.eh, ChartDeserializer.eb);
            a.az(DrawingMLMain.ce, ChartDeserializer.bs);
            a.az(DrawingMLMain.fu, ChartDeserializer.fm);
            a.az(DrawingMLMain.bj, ChartDeserializer.ap);
            a.az(DrawingMLMain.h4, ChartDeserializer.ij);
            a.az(DrawingMLMain.bd, ChartDeserializer.ac);
            a.az(DrawingMLMain.g4, ChartDeserializer.gv);
            a.az(DrawingMLMain.jz, ChartDeserializer.k1);
            a.az(DrawingMLMain.bn, ChartDeserializer.a0);
            a.az(DrawingMLMain.bm, ChartDeserializer.az);
            a.az(DrawingMLMain.dv, ChartDeserializer.dq);
            a.az(DrawingMLMain.ct, ChartDeserializer.b8);
            a.az(DrawingMLMain.ih, ChartDeserializer.iy);
            a.az(DrawingMLMain.i1, ChartDeserializer.j4);
            a.az(DrawingMLMain.e8, ChartDeserializer.ez);
            a.az(DrawingMLMain.i9, ChartDeserializer.kf);
            a.az(DrawingMLMain.ig, ChartDeserializer.ix);
            a.az(DrawingMLMain.ho, ChartDeserializer.hy);
            a.az(DrawingMLMain.jn, ChartDeserializer.kq);
            a.az(DrawingMLMain.ij, ChartDeserializer.i6);
            a.az(DrawingMLMain.cq, ChartDeserializer.b6);
            a.az(DrawingMLMain.fh, ChartDeserializer.e6);
            a.az(DrawingMLMain.eo, ChartDeserializer.ef);
            a.az(DrawingMLMain.a2, ChartDeserializer.s);
            a.az(DrawingMLMain.a9, ChartDeserializer.z);
            a.az(DrawingMLMain.a7, ChartDeserializer.x);
            a.az(DrawingMLMain.e9, ChartDeserializer.e0);
            a.az(DrawingMLMain.fb, ChartDeserializer.e2);
            a.az(DrawingMLMain.fa, ChartDeserializer.e1);
            a.az(DrawingMLMain.ib, ChartDeserializer.iq);
            a.az(DrawingMLMain.id, ChartDeserializer.is);
            a.az(DrawingMLMain.ic, ChartDeserializer.ir);
            a.az(DrawingMLMain.f5, ChartDeserializer.fv);
            a.az(DrawingMLMain.f7, ChartDeserializer.fx);
            a.az(DrawingMLMain.f6, ChartDeserializer.fw);
            a.az(DrawingMLMain.hy, ChartDeserializer.ic);
            a.az(DrawingMLMain.h0, ChartDeserializer.ie);
            a.az(DrawingMLMain.hz, ChartDeserializer.id);
            a.az(DrawingMLMain.eq, ChartDeserializer.eh);
            a.az(DrawingMLMain.es, ChartDeserializer.ej);
            a.az(DrawingMLMain.er, ChartDeserializer.ei);
            a.az(DrawingMLMain.bv, ChartDeserializer.a6);
            a.az(DrawingMLMain.bx, ChartDeserializer.a8);
            a.az(DrawingMLMain.bw, ChartDeserializer.a7);
            a.az(DrawingMLMain.eg, ChartDeserializer.d8);
            a.az(DrawingMLMain.fj, ChartDeserializer.e8);
            a.az(DrawingMLMain.c5, ChartDeserializer.cp);
            a.az(DrawingMLMain.f9, ChartDeserializer.fz);
            a.az(DrawingMLMain.ga, ChartDeserializer.f0);
            a.az(DrawingMLMain.gb, ChartDeserializer.f1);
            a.az(DrawingMLMain.gc, ChartDeserializer.f2);
            a.az(DrawingMLMain.gd, ChartDeserializer.f3);
            a.az(DrawingMLMain.ge, ChartDeserializer.f4);
            a.az(DrawingMLMain.gf, ChartDeserializer.f5);
            a.az(DrawingMLMain.gg, ChartDeserializer.f6);
            a.az(DrawingMLMain.gh, ChartDeserializer.f7);
            a.az(DrawingMLMain.fz, ChartDeserializer.fr);
            a.az(DrawingMLMain.iu, ChartDeserializer.jx);
            a.az(DrawingMLMain.it, ChartDeserializer.jw);
            a.az(DrawingMLMain.b6, ChartDeserializer.bk);
            a.az(DrawingMLMain.b5, ChartDeserializer.bj);
            a.az(DrawingMLMain.cc, ChartDeserializer.br);
            a.az(DrawingMLMain.ca, ChartDeserializer.bp);
            a.az(DrawingMLMain.cb, ChartDeserializer.bq);
            a.az(DrawingMLMain.b8, ChartDeserializer.bm);
            a.az(DrawingMLMain.b7, ChartDeserializer.bl);
            a.az(DrawingMLMain.b9, ChartDeserializer.bo);
            a.az(DrawingMLMain.b2, ChartDeserializer.bc);
            a.az(DrawingMLMain.b4, ChartDeserializer.bi);
            a.az(DrawingMLMain.b3, ChartDeserializer.bh);
            a.az(DrawingMLMain.je, ChartDeserializer.ki);
            a.az(DrawingMLMain.c6, ChartDeserializer.cq);
            a.az(DrawingMLMain.ix, ChartDeserializer.jy);
            a.az(DrawingMLMain.iy, ChartDeserializer.jz);
            a.az(DrawingMLMain.bt, ChartDeserializer.a4);
            a.az(DrawingMLMain.a3, ChartDeserializer.t);
            a.az(DrawingMLMain.a4, ChartDeserializer.u);
            a.az(DrawingMLMain.a5, ChartDeserializer.v);
            a.az(DrawingMLMain.a6, ChartDeserializer.w);
            a.az(DrawingMLMain.a8, ChartDeserializer.y);
            a.az(DrawingMLMain.bb, ChartDeserializer.ab);
            a.az(DrawingMLMain.bq, ChartDeserializer.a2);
            a.az(DrawingMLMain.by, ChartDeserializer.a9);
            a.az(DrawingMLMain.ck, ChartDeserializer.b1);
            a.az(DrawingMLMain.cm, ChartDeserializer.b4);
            a.az(DrawingMLMain.de, ChartDeserializer.c7);
            a.az(DrawingMLMain.dy, ChartDeserializer.dv);
            a.az(DrawingMLMain.ep, ChartDeserializer.eg);
            a.az(DrawingMLMain.e7, ChartDeserializer.ey);
            a.az(DrawingMLMain.cs, ChartDeserializer.b7);
            a.az(DrawingMLMain.dh, ChartDeserializer.c9);
            a.az(DrawingMLMain.ba, ChartDeserializer.aa);
            a.az(DrawingMLMain.bs, ChartDeserializer.a3);
            a.az(DrawingMLMain.dx, ChartDeserializer.du);
            a.az(DrawingMLMain.ej, ChartDeserializer.ed);
            a.az(DrawingMLMain.fg, ChartDeserializer.e4);
            a.az(DrawingMLMain.hd, ChartDeserializer.g8);
            a.az(DrawingMLMain.hr, ChartDeserializer.h1);
            a.az(DrawingMLMain.h1, ChartDeserializer.ig);
            a.az(DrawingMLMain.h2, ChartDeserializer.ih);
            a.az(DrawingMLMain.io, ChartDeserializer.js);
            a.az(DrawingMLMain.j9, ChartDeserializer.lf);
            a.az(DrawingMLMain.gz, ChartDeserializer.gt);
            a.az(DrawingMLMain.ip, ChartDeserializer.jt);
            a.az(DrawingMLMain.ek, ChartDeserializer.ee);
            a.az(DrawingMLMain.bu, ChartDeserializer.a5);
            a.az(DrawingMLMain.hi, ChartDeserializer.hg);
            a.az(DrawingMLMain.et, ChartDeserializer.el);
            a.az(DrawingMLMain.ev, ChartDeserializer.en);
            a.az(DrawingMLMain.fv, ChartDeserializer.fn);
            a.az(DrawingMLMain.hg, ChartDeserializer.he);
            a.az(DrawingMLMain.jl, ChartDeserializer.kp);
            a.az(DrawingMLMain.eu, ChartDeserializer.em);
            a.az(DrawingMLMain.d2, ChartDeserializer.dx);
            a.az(DrawingMLMain.i0, ChartDeserializer.j3);
            a.az(DrawingMLMain.jk, ChartDeserializer.ko);
            a.az(DrawingMLMain.i3, ChartDeserializer.j7);
            a.az(DrawingMLMain.dz, ChartDeserializer.dw);
            a.az(DrawingMLMain.dw, ChartDeserializer.dt);
            a.az(DrawingMLMain.bo, ChartDeserializer.a1);
            a.az(DrawingMLMain.cl, ChartDeserializer.b2);
            a.az(DrawingMLMain.co, ChartDeserializer.b5);
            a.az(DrawingMLMain.jd, ChartDeserializer.kh);
            a.az(DrawingMLMain.fx, ChartDeserializer.fq);
            a.az(DrawingMLMain.dj, ChartDeserializer.db);
            a.az(DrawingMLMain.di, ChartDeserializer.da);
            a.az(DrawingMLMain.ez, ChartDeserializer.er);
            a.az(DrawingMLMain.jy, ChartDeserializer.k0);
            a.az(DrawingMLMain.jx, ChartDeserializer.kz);
            a.az(DrawingMLMain.jw, ChartDeserializer.ky);
            a.az(DrawingMLMain.jv, ChartDeserializer.kx);
            a.az(DrawingMLMain.fr, ChartDeserializer.fa);
            a.az(DrawingMLMain.df, ChartDeserializer.c8);
            a.az(DrawingMLMain.cu, ChartDeserializer.cd);
            a.az(DrawingMLMain.i8, ChartDeserializer.kd);
            a.az(DrawingMLMain.e3, ChartDeserializer.et);
            a.az(DrawingMLMain.e4, ChartDeserializer.eu);
            a.az(DrawingMLMain.hp, ChartDeserializer.hz);
            a.az(DrawingMLMain.cz, ChartDeserializer.cf);
            a.az(DrawingMLMain.h7, ChartDeserializer.im);
            a.az(DrawingMLMain.bl, ChartDeserializer.ay);
            a.az(DrawingMLMain.gm, ChartDeserializer.gm);
            a.az(DrawingMLMain.ex, ChartDeserializer.ep);
            a.az(DrawingMLMain.jf, ChartDeserializer.kj);
            a.az(DrawingMLMain.dd, ChartDeserializer.c5);
            a.az(DrawingMLMain.im, ChartDeserializer.jr);
            a.az(DrawingMLMain.hm, ChartDeserializer.hv);
            a.az(DrawingMLMain.hv, ChartDeserializer.h7);
            a.az(DrawingMLMain.b1, ChartDeserializer.bb);
            a.az(DrawingMLMain.d4, ChartDeserializer.d2);
            a.az(DrawingMLMain.dn, ChartDeserializer.dc);
            a.az(DrawingMLMain.h8, ChartDeserializer.ip);
            a.az(DrawingMLMain.jb, ChartDeserializer.kg);
            a.az(DrawingMLChart.dk, ChartDeserializer.gd);
            a.az(DrawingMLChart.c4, ChartDeserializer.fd);
            a.az(DrawingMLChart.gt, ChartDeserializer.lg);
            a.az(DrawingMLChart.gw, ChartDeserializer.lj);
            a.az(DrawingMLChart.gr, ChartDeserializer.ld);
            a.az(DrawingMLChart.cw, ChartDeserializer.ev);
            a.az(DrawingMLChart.gs, ChartDeserializer.le);
            a.az(DrawingMLChart.gv, ChartDeserializer.li);
            a.az(DrawingMLChart.gp, ChartDeserializer.lb);
            a.az(DrawingMLChart.ct, ChartDeserializer.eo);
            a.az(DrawingMLChart.em, ChartDeserializer.ho);
            a.az(DrawingMLChart.cz, ChartDeserializer.e3);
            a.az(DrawingMLChart.dl, ChartDeserializer.ge);
            a.az(DrawingMLChart.bz, ChartDeserializer.cy);
            a.az(DrawingMLChart.f5, ChartDeserializer.ke);
            a.az(DrawingMLChart.fs, ChartDeserializer.jo);
            a.az(DrawingMLChart.bs, ChartDeserializer.cr);
            a.az(DrawingMLChart.d2, ChartDeserializer.gy);
            a.az(DrawingMLChart.b0, ChartDeserializer.cz);
            a.az(DrawingMLChart.fk, ChartDeserializer.jg);
            a.az(DrawingMLChart.fp, ChartDeserializer.jl);
            a.az(DrawingMLChart.ff, ChartDeserializer.i9);
            a.az(DrawingMLChart.fo, ChartDeserializer.jk);
            a.az(DrawingMLChart.fn, ChartDeserializer.jj);
            a.az(DrawingMLChart.fe, ChartDeserializer.i8);
            a.az(DrawingMLChart.e9, ChartDeserializer.i2);
            a.az(DrawingMLChart.e0, ChartDeserializer.ik);
            a.az(DrawingMLChart.cy, ChartDeserializer.ex);
            a.az(DrawingMLChart.e1, ChartDeserializer.il);
            a.az(DrawingMLChart.bt, ChartDeserializer.cs);
            a.az(DrawingMLChart.ey, ChartDeserializer.ia);
            a.az(DrawingMLChart.eg, ChartDeserializer.hi);
            a.az(DrawingMLChart.f6, ChartDeserializer.kk);
            a.az(DrawingMLChart.ei, ChartDeserializer.hk);
            a.az(DrawingMLChart.ar, ChartDeserializer.ae);
            a.az(DrawingMLChart.as, ChartDeserializer.af);
            a.az(DrawingMLChart.aq, ChartDeserializer.ad);
            a.az(DrawingMLChart.eh, ChartDeserializer.hj);
            a.az(DrawingMLChart.ej, ChartDeserializer.hl);
            a.az(DrawingMLChart.au, ChartDeserializer.ai);
            a.az(DrawingMLChart.at, ChartDeserializer.ah);
            a.az(DrawingMLChart.dd, ChartDeserializer.fp);
            a.az(DrawingMLChart.dc, ChartDeserializer.fo);
            a.az(DrawingMLChart.fy, ChartDeserializer.j5);
            a.az(DrawingMLChart.ew, ChartDeserializer.h8);
            a.az(DrawingMLChart.e4, ChartDeserializer.iu);
            a.az(DrawingMLChart.el, ChartDeserializer.hn);
            a.az(DrawingMLChart.ek, ChartDeserializer.hm);
            a.az(DrawingMLChart.b2, ChartDeserializer.c1);
            a.az(DrawingMLChart.a5, ChartDeserializer.av);
            a.az(DrawingMLChart.a4, ChartDeserializer.au);
            a.az(DrawingMLChart.d7, ChartDeserializer.g4);
            a.az(DrawingMLChart.f4, ChartDeserializer.kc);
            a.az(DrawingMLChart.f3, ChartDeserializer.kb);
            a.az(DrawingMLChart.a9, ChartDeserializer.be);
            a.az(DrawingMLChart.gm, ChartDeserializer.k8);
            a.az(DrawingMLChart.be, ChartDeserializer.bu);
            a.az(DrawingMLChart.br, ChartDeserializer.co);
            a.az(DrawingMLChart.fb, ChartDeserializer.i4);
            a.az(DrawingMLChart.b6, ChartDeserializer.c6);
            a.az(DrawingMLChart.cs, ChartDeserializer.ek);
            a.az(DrawingMLChart.gn, ChartDeserializer.k9);
            a.az(DrawingMLChart.fa, ChartDeserializer.i3);
            a.az(DrawingMLChart.b1, ChartDeserializer.c0);
            a.az(DrawingMLChart.b5, ChartDeserializer.c4);
            a.az(DrawingMLChart.ay, ChartDeserializer.an);
            a.az(DrawingMLChart.d9, ChartDeserializer.g6);
            a.az(DrawingMLChart.b4, ChartDeserializer.c3);
            a.az(DrawingMLChart.gb, ChartDeserializer.ks);
            a.az(DrawingMLChart.b7, ChartDeserializer.dd);
            a.az(DrawingMLChart.bd, ChartDeserializer.bt);
            a.az(DrawingMLChart.gl, ChartDeserializer.k7);
            a.az(DrawingMLChart.c1, ChartDeserializer.e7);
            a.az(DrawingMLChart.a8, ChartDeserializer.bd);
            a.az(DrawingMLChart.cd, ChartDeserializer.dj);
            a.az(DrawingMLChart.gd, ChartDeserializer.ku);
            a.az(DrawingMLChart.ef, ChartDeserializer.hh);
            a.az(DrawingMLChart.cp, ChartDeserializer.d7);
            a.az(DrawingMLChart.a1, ChartDeserializer.ar);
            a.az(DrawingMLChart.c0, ChartDeserializer.e5);
            a.az(DrawingMLChart.bw, ChartDeserializer.cv);
            a.az(DrawingMLChart.bv, ChartDeserializer.cu);
            a.az(DrawingMLChart.gc, ChartDeserializer.kt);
            a.az(DrawingMLChart.b9, ChartDeserializer.df);
            a.az(DrawingMLChart.b8, ChartDeserializer.de);
            a.az(DrawingMLChart.ca, ChartDeserializer.dg);
            a.az(DrawingMLChart.dz, ChartDeserializer.gs);
            a.az(DrawingMLChart.er, ChartDeserializer.ht);
            a.az(DrawingMLChart.dt, ChartDeserializer.gl);
            a.az(DrawingMLChart.d4, ChartDeserializer.g0);
            a.az(DrawingMLChart.d3, ChartDeserializer.gz);
            a.az(DrawingMLChart.d1, ChartDeserializer.gx);
            a.az(DrawingMLChart.cn, ChartDeserializer.d5);
            a.az(DrawingMLChart.dv, ChartDeserializer.gp);
            a.az(DrawingMLChart.f0, ChartDeserializer.j8);
            a.az(DrawingMLChart.du, ChartDeserializer.go);
            a.az(DrawingMLChart.df, ChartDeserializer.fy);
            a.az(DrawingMLChart.fj, ChartDeserializer.je);
            a.az(DrawingMLChart.c7, ChartDeserializer.fg);
            a.az(DrawingMLChart.cq, ChartDeserializer.d9);
            a.az(DrawingMLChart.cv, ChartDeserializer.es);
            a.az(DrawingMLChart.gh, ChartDeserializer.k3);
            a.az(DrawingMLChart.fu, ChartDeserializer.jq);
            a.az(DrawingMLChart.cr, ChartDeserializer.ea);
            a.az(DrawingMLChart.gg, ChartDeserializer.k2);
            a.az(DrawingMLChart.b3, ChartDeserializer.c2);
            a.az(DrawingMLChart.ex, ChartDeserializer.h9);
            a.az(DrawingMLChart.e5, ChartDeserializer.iv);
            a.az(DrawingMLChart.gu, ChartDeserializer.lh);
            a.az(DrawingMLChart.gx, ChartDeserializer.lk);
            a.az(DrawingMLChart.ck, ChartDeserializer.d0);
            a.az(DrawingMLChart.cx, ChartDeserializer.ew);
            a.az(DrawingMLChart.a6, ChartDeserializer.aw);
            a.az(DrawingMLChart.eb, ChartDeserializer.g9);
            a.az(DrawingMLChart.fc, ChartDeserializer.i5);
            a.az(DrawingMLChart.fd, ChartDeserializer.i7);
            a.az(DrawingMLChart.d8, ChartDeserializer.g5);
            a.az(DrawingMLChart.fw, ChartDeserializer.j1);
            a.az(DrawingMLChart.fv, ChartDeserializer.j0);
            a.az(DrawingMLChart.bn, ChartDeserializer.ch);
            a.az(DrawingMLChart.e7, ChartDeserializer.i0);
            a.az(DrawingMLChart.e6, ChartDeserializer.iz);
            a.az(DrawingMLChart.gq, ChartDeserializer.lc);
            a.az(DrawingMLChart.a3, ChartDeserializer.at);
            a.az(DrawingMLChart.a2, ChartDeserializer.as);
            a.az(DrawingMLChart.ba, ChartDeserializer.bf);
            a.az(DrawingMLChart.fl, ChartDeserializer.jh);
            a.az(DrawingMLChart.ft, ChartDeserializer.jp);
            a.az(DrawingMLChart.bb, ChartDeserializer.bg);
            a.az(DrawingMLChart.e3, ChartDeserializer.it);
            a.az(DrawingMLChart.az, ChartDeserializer.ao);
            a.az(DrawingMLChart.dg, ChartDeserializer.f9);
            a.az(DrawingMLChart.dp, ChartDeserializer.gh);
            a.az(DrawingMLChart.dh, ChartDeserializer.ga);
            a.az(DrawingMLChart.dq, ChartDeserializer.gi);
            a.az(DrawingMLChart.f7, ChartDeserializer.kl);
            a.az(DrawingMLChart.bj, ChartDeserializer.b9);
            a.az(DrawingMLChart.bl, ChartDeserializer.cb);
            a.az(DrawingMLChart.bm, ChartDeserializer.cc);
            a.az(DrawingMLChart.bk, ChartDeserializer.ca);
            a.az(DrawingMLChart.dj, ChartDeserializer.gc);
            a.az(DrawingMLChart.ds, ChartDeserializer.gk);
            a.az(DrawingMLChart.bx, ChartDeserializer.cw);
            a.az(DrawingMLChart.de, ChartDeserializer.ft);
            a.az(DrawingMLChart.ea, ChartDeserializer.g7);
            a.az(DrawingMLChart.dm, ChartDeserializer.gf);
            a.az(DrawingMLChart.dn, ChartDeserializer.gg);
            a.az(DrawingMLChart.bo, ChartDeserializer.ci);
            a.az(DrawingMLChart.bc, ChartDeserializer.bn);
            a.az(DrawingMLChart.by, ChartDeserializer.cx);
            a.az(DrawingMLChart.av, ChartDeserializer.aj);
            a.az(DrawingMLChart.c5, ChartDeserializer.fe);
            a.az(DrawingMLChart.c6, ChartDeserializer.ff);
            a.az(DrawingMLChart.f8, ChartDeserializer.km);
            a.az(DrawingMLChart.f9, ChartDeserializer.kn);
            a.az(DrawingMLChart.d0, ChartDeserializer.gu);
            a.az(DrawingMLChart.a7, ChartDeserializer.ax);
            a.az(DrawingMLChart.di, ChartDeserializer.gb);
            a.az(DrawingMLChart.dr, ChartDeserializer.gj);
            a.az(DrawingMLChart.fh, ChartDeserializer.jc);
            a.az(DrawingMLChart.fq, ChartDeserializer.jm);
            a.az(DrawingMLChart.fm, ChartDeserializer.ji);
            a.az(DrawingMLChart.fi, ChartDeserializer.jd);
            a.az(DrawingMLChart.db, ChartDeserializer.fl);
            a.az(DrawingMLChart.da, ChartDeserializer.fk);
            a.az(DrawingMLMain.c0, ChartDeserializer.cg);
            a.az(DrawingMLMain.hq, ChartDeserializer.h0);
            a.az(DrawingMLMain.hc, ChartDeserializer.g3);
            a.az(DrawingMLMain.ei, ChartDeserializer.ec);
            a.az(DrawingMLMain.ay, ChartDeserializer.p);
            a.az(DrawingMLMain.c3, ChartDeserializer.ck);
            a.az(DrawingMLMain.hx, ChartDeserializer.ib);
            a.az(DrawingMLMain.hh, ChartDeserializer.hf);
            a.az(DrawingMLMain.a0, ChartDeserializer.r);
            a.az(DrawingMLMain.az, ChartDeserializer.q);
            a.az(DrawingMLMain.hl, ChartDeserializer.hu);
            a.az(DrawingMLMain.c2, ChartDeserializer.cj);
            a.az(DrawingMLMain.cj, ChartDeserializer.b0);
            a.az(DrawingMLMain.gn, ChartDeserializer.gn);
            a.az(DrawingMLMain.f1, ChartDeserializer.fs);
            a.az(DrawingMLMain.bg, ChartDeserializer.ag);
            a.az(DrawingMLMain.hu, ChartDeserializer.h6);
            a.az(DrawingMLMain.cw, ChartDeserializer.ce);
            a.az(DrawingMLMain.ht, ChartDeserializer.h4);
            a.az(DrawingMLChart.ax, ChartDeserializer.al);
            a.az(DrawingMLChart.cu, ChartDeserializer.eq);
            a.az(DrawingMLChart.ed, ChartDeserializer.hc);
            a.az(DrawingMLChart.ee, ChartDeserializer.hd);
            a.az(DrawingMLChart.c8, ChartDeserializer.fi);
            a.az(DrawingMLChart.d6, ChartDeserializer.g2);
            a.az(DrawingMLChart.d5, ChartDeserializer.g1);
            a.az(DrawingMLChart.cc, ChartDeserializer.di);
            a.az(DrawingMLChart.cb, ChartDeserializer.dh);
            a.az(DrawingMLChart.cj, ChartDeserializer.dz);
            a.az(DrawingMLChart.ci, ChartDeserializer.dy);
            a.az(DrawingMLChart.ce, ChartDeserializer.dk);
            a.az(DrawingMLChart2012.br, ChartDeserializer.jf);
            a.az(DrawingMLChart2012.bq, ChartDeserializer.ja);
            a.az(DrawingMLChart2012.bh, ChartDeserializer.fh);
            a.az(DrawingMLChart2012.bg, ChartDeserializer.fc);
            a.az(DrawingMLChart2012.av, ChartDeserializer.cm);
            a.az(DrawingMLChart2012.a2, ChartDeserializer.ds);
        }
        static by(a) {
            throw new InvalidXLSXElementException(ChartExElements.m);
        }
        static bx(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(ChartDeserializer.$, b, false);
            if (c == null) {
                let d = SerializationUtils.t(b.a9._d.uri);
                c = ((() => {
                    let $ret = new ChartDeserializer();
                    $ret.b = b.a9._by;
                    $ret.o = d;
                    return $ret;
                })());
                c.b = b.a9._by;
                b.s.k(c);
            }
            let e = new CT_ChartSpace();
            b.s.k(e);
        }
        static bz(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(ChartDeserializer.$, b);
            if (c == null) {
                return;
            }
            let d = ChartDeserializer.a(CT_ChartSpace.$, a);
            if (d == null) {
                return;
            }
            d.a = b.a9._b3;
            if (c.b._ad == null) {
                c.b._ad = new ChartDeserializationCache();
            }
            c.b._ad.a.addItem(c.o, d);
        }
        static cn(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.b = d;
        }
        static e9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextLanguageID.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextLanguageID();
                $ret.b = d;
                return $ret;
            })());
            c.r = f;
        }
        static io(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.d = d;
        }
        static ka(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_Style.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_Style();
                $ret.a = d;
                return $ret;
            })());
            c.p = f;
        }
        static b3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (c == null) {
                return;
            }
            let d = 0;
            let e = 0;
            let f = 0;
            let g = 0;
            let h = 0;
            let i = 0;
            let j = 0;
            let k = 0;
            let l = 0;
            let m = 0;
            let n = 0;
            let o = 0;
            let p = CT_ColorMapping.ac(a, d, e, f, g, h, i, j, k, l, m, n, o);
            d = p.p1;
            e = p.p2;
            f = p.p3;
            g = p.p4;
            h = p.p5;
            i = p.p6;
            j = p.p7;
            k = p.p8;
            l = p.p9;
            m = p.p10;
            n = p.p11;
            o = p.p12;
            let q = ((() => {
                let $ret = new CT_ColorMapping();
                $ret.d = h;
                $ret.f = i;
                $ret.h = j;
                $ret.j = k;
                $ret.l = l;
                $ret.n = m;
                $ret.p = d;
                $ret.r = f;
                $ret.t = o;
                $ret.v = n;
                $ret.x = e;
                $ret.z = g;
                return $ret;
            })());
            c.t = q;
            ChartDeserializer.ll(b, q);
        }
        static hq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PivotSource();
            c.j = d;
            ChartDeserializer.ll(b, d);
        }
        static hx(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Protection();
            c.n = d;
            ChartDeserializer.ll(b, d);
        }
        static bv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Chart();
            c.f = d;
            ChartDeserializer.ll(b, d);
        }
        static j2(a) {
            let b = [CT_ChartSpace.$, CT_Title.$, CT_PivotFmt.$, CT_Marker_Chart.$, CT_DLbl.$, CT_Surface.$, CT_PlotArea.$, CT_AreaSer.$, CT_DPt.$, CT_Trendline.$, CT_TrendlineLbl.$, CT_ErrBars.$, CT_DLbls.$, CT_ChartLines.$, CT_LineSer.$, CT_UpDownBar.$, CT_RadarSer.$, CT_ScatterSer.$, CT_PieSer.$, CT_BarSer.$, CT_SurfaceSer.$, CT_BandFmt.$, CT_BubbleSer.$, CT_ValAx.$, CT_DispUnitsLbl.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$, CT_DTable.$, CT_Legend.$];
            let c = typeCast(ObjectModelChartPartManager.$, a);
            let d;
            let e = CT_ShapeProperties.f(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ShapeProperties_DML();
                $ret.q = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(1570, f);
            }
            ChartDeserializer.ll(c, f);
        }
        static kw(a) {
            let b = [CT_ChartSpace.$, CT_Title.$, CT_PivotFmt.$, CT_DLbl.$, CT_TrendlineLbl.$, CT_DLbls.$, CT_ValAx.$, CT_DispUnitsLbl.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$, CT_DTable.$, CT_Legend.$, CT_LegendEntry.$];
            let c = typeCast(ObjectModelChartPartManager.$, a);
            let d = new CT_TextBody_DML();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1783, d);
            }
            ChartDeserializer.ll(c, d);
        }
        static dm(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c;
            let d;
            let e = CT_ExternalData.f(b, d, c);
            d = e.p1;
            c = e.p2;
            let f = ((() => {
                let $ret = new CT_ExternalData();
                $ret.c = c;
                return $ret;
            })());
            if (d.hasValue) {
                f.a = CT_Boolean.b(d.value);
            }
            let g = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (g == null) {
                return;
            }
            g.h = f;
            ChartDeserializer.ll(b, f);
        }
        static hw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = new CT_PrintSettings();
            let d = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (d == null) {
                return;
            }
            d.l = c;
            ChartDeserializer.ll(b, c);
        }
        static k5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = DMLChartUtils.ak(b);
            let d = ChartDeserializer.a(CT_ChartSpace.$, b);
            if (d == null) {
                return;
            }
            d.z = c;
            ChartDeserializer.ll(b, c);
        }
        static dn(a) {
            let b = [CT_ChartSpace.$, CT_PivotSource.$, CT_Chart.$, CT_Title.$, CT_StrRef.$, CT_StrData.$, CT_Layout.$, CT_ManualLayout.$, CT_PivotFmt.$, CT_Marker_Chart.$, CT_DLbl.$, CT_View3D.$, CT_Surface.$, CT_PlotArea.$, CT_AreaChart.$, CT_AreaSer.$, CT_DPt.$, CT_Trendline.$, CT_TrendlineLbl.$, CT_ErrBars.$, CT_NumRef.$, CT_NumData.$, CT_MultiLvlStrRef.$, CT_MultiLvlStrData.$, CT_DLbls.$, CT_Area3DChart.$, CT_LineChart.$, CT_LineSer.$, CT_UpDownBars.$, CT_Line3DChart.$, CT_StockChart.$, CT_RadarChart.$, CT_RadarSer.$, CT_ScatterChart.$, CT_ScatterSer.$, CT_PieChart.$, CT_PieSer.$, CT_Pie3DChart.$, CT_DoughnutChart.$, CT_BarChart.$, CT_BarSer.$, CT_Bar3DChart.$, CT_OfPieChart.$, CT_SurfaceChart.$, CT_SurfaceSer.$, CT_Surface3DChart.$, CT_BubbleChart.$, CT_BubbleSer.$, CT_ValAx.$, CT_Scaling.$, CT_DispUnits.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$, CT_DTable.$, CT_Legend.$, CT_LegendEntry.$];
            let c = typeCast(ObjectModelChartPartManager.$, a);
            let d = new CT_ExtensionList();
            let e = SerializationUtils.j(c, b);
            if (e == null) {
                return;
            }
            e.setProperty(601, d);
            ChartDeserializer.ll(c, d);
        }
        static dp(a) {
            let b = [CT_ColorMapping.$, CT_TextBodyProperties_DML.$, CT_Scene3D.$, CT_Backdrop.$, CT_Shape3D.$, CT_TextListStyle_DML.$, CT_TextParagraphProperties_DML.$, CT_Blip_DML.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_Hyperlink.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartPartManager.$, a);
            let d = new CT_OfficeArtExtensionList();
            let e = SerializationUtils.j(c, b);
            if (e == null) {
                return;
            }
            e.setProperty(601, d);
            ChartDeserializer.ll(c, d);
        }
        static dl(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = null;
            let d = CT_OfficeArtExtension.d(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_OfficeArtExtension();
                $ret.b = c;
                return $ret;
            })());
            let f = ChartDeserializer.a(CT_OfficeArtExtensionList.$, b);
            if (f == null) {
                return;
            }
            f.b.b.add(e);
        }
        static gq(a) {
            let b = [CT_PivotSource.$, CT_Trendline.$];
            let c = typeCast(ObjectModelChartPartManager.$, a);
            let d = SerializationUtils.j(c, b);
            if (d == null) {
                return;
            }
            let e = c.ab.ad;
            d.setProperty(1045, e);
        }
        static d4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PivotSource.$, b);
            if (c == null) {
                return;
            }
            let d = CT_UnsignedInt.c(b);
            c.a = d;
        }
        static bw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Protection.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.a = d;
        }
        static cl(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Protection.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.c = d;
        }
        static d6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Protection.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.e = d;
        }
        static i1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Protection.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.g = d;
        }
        static k4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Protection.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.i = d;
        }
        static kr(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Chart.$, CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_Title();
            d.setProperty(1745, e);
            ChartDeserializer.ll(b, e);
        }
        static ak(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.a = d;
        }
        static hp(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_PivotFmts();
                $ret.e = new List$1(CT_PivotFmt.$, 0);
                return $ret;
            })());
            c.y = CT_PivotFmts.c(d);
            ChartDeserializer.ll(b, d);
        }
        static la(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_View3D();
            c.u = d;
            ChartDeserializer.ll(b, d);
        }
        static d3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Surface();
            c.o = d;
            ChartDeserializer.ll(b, d);
        }
        static jn(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Surface();
            c.q = d;
            ChartDeserializer.ll(b, d);
        }
        static aq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Surface();
            c.m = d;
            ChartDeserializer.ll(b, d);
        }
        static hr(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PlotArea();
            c.k = d;
            ChartDeserializer.ll(b, d);
        }
        static fj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_Legend();
                $ret.m = new List$1(CT_LegendEntry.$, 0);
                $ret.k = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            c.i = d;
            ChartDeserializer.ll(b, d);
        }
        static hs(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.c = d;
        }
        static ct(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_DispBlanksAs.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_DispBlanksAs();
                $ret.b = d;
                return $ret;
            })());
            c.g = f;
        }
        static jb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.e = d;
        }
        static kv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            if (ChartDeserializer.n(b)) {
                return;
            }
            else if (ChartDeserializer.k(b)) {
                return;
            }
            else {
            }
        }
        static n(a) {
            let b = [CT_Title.$, CT_DLbl.$, CT_TrendlineLbl.$, CT_DispUnitsLbl.$];
            let c = SerializationUtils.j(a, b, false);
            if (c == null) {
                return false;
            }
            let d = new CT_Tx();
            c.setProperty(1776, d);
            ChartDeserializer.ll(a, d);
            return true;
        }
        static k(a) {
            let b = [CT_AreaSer.$, CT_BarSer.$, CT_PieSer.$, CT_LineSer.$, CT_BubbleSer.$, CT_SurfaceSer.$, CT_ScatterSer.$, CT_RadarSer.$];
            let c = SerializationUtils.j(a, b, false);
            if (c == null) {
                return false;
            }
            let d = new CT_SerTx();
            c.setProperty(1776, d);
            ChartDeserializer.ll(a, d);
            return true;
        }
        static fb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Title.$, CT_DLbl.$, CT_PlotArea.$, CT_TrendlineLbl.$, CT_DispUnitsLbl.$, CT_Legend.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_Layout();
            d.setProperty(876, e);
            ChartDeserializer.ll(b, e);
        }
        static ha(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Title.$, CT_Legend.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1150, e);
        }
        static j9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Tx.$, CT_SerTx.$, CT_AxDataSource.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_StrRef();
            d.setProperty(1606, e);
            ChartDeserializer.ll(b, e);
        }
        static ii(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Tx.$, CT_SerTx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_TextBody_DML();
            d.setProperty(1362, e);
            ChartDeserializer.ll(b, e);
        }
        static dr(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_StrRef.$, CT_NumRef.$, CT_MultiLvlStrRef.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = b.ab.ad;
            d.setProperty(612, e);
        }
        static j6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_StrRef.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_StrData();
                $ret.f = new List$1(CT_StrVal.$, 0);
                return $ret;
            })());
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static h5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_StrData.$, CT_NumData.$, CT_MultiLvlStrData.$];
            let d = CT_UnsignedInt.c(b);
            let e = SerializationUtils.j(b, c);
            if (e == null) {
                return;
            }
            e.setProperty(1278, d);
        }
        static h3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            if (ChartDeserializer.g(b)) {
                return;
            }
            else if (ChartDeserializer.l(b)) {
                return;
            }
            else {
            }
        }
        static l(a) {
            let b = [CT_StrData.$, CT_Lvl.$];
            let c = SerializationUtils.j(a, b, false);
            if (c == null) {
                return false;
            }
            let d;
            let e = CT_StrVal.f(a, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_StrVal();
                $ret.d = d;
                return $ret;
            })());
            c.setProperty(1277, f);
            ChartDeserializer.ll(a, f);
            return true;
        }
        static g(a) {
            let b = ChartDeserializer.a(CT_NumData.$, a, false);
            if (b == null) {
                return false;
            }
            let c;
            let d;
            let e = CT_NumVal.h(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_NumVal();
                $ret.f = c;
                $ret.a = d;
                return $ret;
            })());
            b.e.add(f);
            ChartDeserializer.ll(a, f);
            return true;
        }
        static k6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_StrVal.$, CT_SerTx.$, CT_NumVal.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = b.ab.ad;
            d.setProperty(1818, e);
        }
        static ba(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextBody_DML.$, b);
            if (c == null) {
                return;
            }
            let d = SerializationUtils.f(b);
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static fu(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextBody_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextListStyle_DML();
            c.b = d;
            ChartDeserializer.ll(b, d);
        }
        static hb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextBody_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextParagraph_DML();
            c.d.add(d);
            ChartDeserializer.ll(b, d);
        }
        static h2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_PresetTextShape.f(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_PresetTextShape();
                $ret.a = d;
                return $ret;
            })());
            c.c = f;
            ChartDeserializer.ll(b, f);
        }
        static gr(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextNoAutofit();
            c.setProperty(1057, d);
        }
        static gw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = CT_TextNormalAutofit.h(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_TextNormalAutofit();
                $ret.c = d;
                $ret.e = e;
                return $ret;
            })());
            c.setProperty(1057, g);
        }
        static jv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextShapeAutofit();
            c.setProperty(1565, d);
        }
        static iw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_TextBodyProperties_DML.$, CT_ShapeProperties_DML.$];
            let d = new CT_Scene3D();
            let e = SerializationUtils.j(b, c);
            if (e == null) {
                return;
            }
            e.setProperty(1423, d);
            ChartDeserializer.ll(b, d);
        }
        static ju(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = toNullable(Number_$type, null);
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(ST_PresetMaterialType_$type, null);
            let g = CT_Shape3D.y(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = ((() => {
                let $ret = new CT_Shape3D();
                $ret.v = c;
                $ret.r = d;
                $ret.p = e;
                return $ret;
            })());
            let i = [CT_TextBodyProperties_DML.$, CT_ShapeProperties_DML.$];
            let j = SerializationUtils.j(b, i);
            if (j == null) {
                return;
            }
            j.setProperty(1423, h);
            ChartDeserializer.ll(b, h);
        }
        static d1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_FlatText.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_FlatText();
                $ret.b = d;
                return $ret;
            })());
            c.setProperty(650, f);
            ChartDeserializer.ll(b, f);
        }
        static am(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_PresetTextShape.$, CT_CustomGeometry2D.$, CT_PresetGeometry2D.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_GeomGuideList();
            d.setProperty(80, e);
            ChartDeserializer.ll(b, e);
        }
        static eb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_GeomGuideList.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_GeomGuide.c(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_GeomGuide();
                $ret.b = d;
                $ret.a = e;
                return $ret;
            })());
            c.b.add(g);
        }
        static bs(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Scene3D.$, b);
            if (c == null) {
                return;
            }
            let d = 0;
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = CT_Camera.l(a, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_Camera();
                $ret.d = d;
                $ret.g = e;
                $ret.i = f;
                return $ret;
            })());
            c.c = h;
            ChartDeserializer.ll(b, h);
        }
        static fm(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Scene3D.$, b);
            if (c == null) {
                return;
            }
            let d = 0;
            let e = 0;
            let f = CT_LightRig.h(a, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_LightRig();
                $ret.e = d;
                $ret.c = e;
                return $ret;
            })());
            c.e = g;
            ChartDeserializer.ll(b, g);
        }
        static ap(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Scene3D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Backdrop();
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static ij(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Camera.$, CT_LightRig.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = 0;
            let f = 0;
            let g = 0;
            let h = CT_SphereCoords.h(a, e, f, g);
            e = h.p1;
            f = h.p2;
            g = h.p3;
            let i = ((() => {
                let $ret = new CT_SphereCoords();
                $ret.a = e;
                $ret.c = f;
                $ret.e = g;
                return $ret;
            })());
            d.setProperty(1370, i);
        }
        static ac(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Backdrop.$, b);
            if (c == null) {
                return;
            }
            let d, e, f;
            let g = CT_Point3D.h(b, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_Point3D();
                $ret.a = d;
                $ret.c = e;
                $ret.e = f;
                return $ret;
            })());
            c.c = h;
        }
        static gv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Backdrop.$, b);
            if (c == null) {
                return;
            }
            let d, e, f;
            let g = CT_Vector3D.i(b, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_Vector3D();
                $ret.b = d;
                $ret.d = e;
                $ret.f = f;
                return $ret;
            })());
            c.e = h;
        }
        static k1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Backdrop.$, b);
            if (c == null) {
                return;
            }
            let d, e, f;
            let g = CT_Vector3D.i(b, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_Vector3D();
                $ret.b = d;
                $ret.d = e;
                $ret.f = f;
                return $ret;
            })());
            c.g = h;
        }
        static a0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Shape3D.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(ST_BevelPresetType_$type, null);
            let g = CT_Bevel.l(a, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_Bevel();
                $ret.i = d;
                $ret.e = e;
                $ret.g = f;
                return $ret;
            })());
            c.c = h;
        }
        static az(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Shape3D.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(ST_BevelPresetType_$type, null);
            let g = CT_Bevel.l(a, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_Bevel();
                $ret.i = d;
                $ret.e = e;
                $ret.g = f;
                return $ret;
            })());
            c.a = h;
        }
        static dq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Shape3D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.g = d;
            ChartDeserializer.ll(b, d);
        }
        static b8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Shape3D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.e = d;
            ChartDeserializer.ll(b, d);
        }
        static iy(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_ScRgbColor.e(b);
            d.setProperty(1431, e);
            ChartDeserializer.ll(b, e);
        }
        static j4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new ST_HexColorRGB();
            let f = CT_SRgbColor.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_SRgbColor_DML();
                $ret.f = e;
                return $ret;
            })());
            d.setProperty(1586, g);
            ChartDeserializer.ll(b, g);
        }
        static ez(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_HslColor.e(b);
            d.setProperty(1586, e);
            ChartDeserializer.ll(b, e);
        }
        static kf(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_SystemColor.e(b);
            d.setProperty(1652, e);
            ChartDeserializer.ll(b, e);
        }
        static ix(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_SchemeColor_DML.f(b);
            d.setProperty(1429, e);
            ChartDeserializer.ll(b, e);
        }
        static hy(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_PresetColor.e(b);
            d.setProperty(1272, e);
        }
        static kq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = DMLUtils.p(b);
            d.setProperty(1744, e);
        }
        static i6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = DMLUtils.p(b);
            d.setProperty(1459, e);
        }
        static b6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_ComplementTransform();
            d.setProperty(326, e);
        }
        static e6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_InverseTransform();
            d.setProperty(845, e);
        }
        static ef(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_GrayscaleTransform();
            d.setProperty(731, e);
        }
        static s(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.x(b);
        }
        static z(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.ae(b);
        }
        static x(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.ac(b);
        }
        static e0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bk(b);
        }
        static e2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bm(b);
        }
        static e1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bl(b);
        }
        static iq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.b8(b);
        }
        static is(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.ca(b);
        }
        static ir(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.b9(b);
        }
        static fv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bs(b);
        }
        static fx(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bu(b);
        }
        static fw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bt(b);
        }
        static ic(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.b2(b);
        }
        static ie(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.b4(b);
        }
        static id(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.b3(b);
        }
        static eh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bc(b);
        }
        static ej(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.be(b);
        }
        static ei(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bd(b);
        }
        static a6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.am(b);
        }
        static a8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.ao(b);
        }
        static a7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.an(b);
        }
        static d8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.a7(b);
        }
        static e8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            SerializationUtils.bp(b);
        }
        static cp(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextListStyle_DML.$, b);
            if (c == null) {
                return;
            }
            let d = CT_TextParagraphProperties_DML.o(b);
            c.c = d;
            ChartDeserializer.ll(b, d);
        }
        static fz(a) {
            ChartDeserializer.f8(a, 945);
        }
        static f0(a) {
            ChartDeserializer.f8(a, 946);
        }
        static f1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            ChartDeserializer.f8(a, 947);
        }
        static f2(a) {
            ChartDeserializer.f8(a, 948);
        }
        static f3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            ChartDeserializer.f8(a, 949);
        }
        static f4(a) {
            ChartDeserializer.f8(a, 950);
        }
        static f5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            ChartDeserializer.f8(a, 951);
        }
        static f6(a) {
            ChartDeserializer.f8(a, 952);
        }
        static f7(a) {
            ChartDeserializer.f8(a, 953);
        }
        static fr(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextSpacing();
            c.p = d;
            ChartDeserializer.ll(b, d);
        }
        static jx(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextSpacing();
            c.r = d;
            ChartDeserializer.ll(b, d);
        }
        static jw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextSpacing();
            c.q = d;
            ChartDeserializer.ll(b, d);
        }
        static bk(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBulletColorFollowText();
            c.setProperty(176, d);
        }
        static bj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.setProperty(175, d);
            ChartDeserializer.ll(b, d);
        }
        static br(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBulletSizeFollowText();
            c.setProperty(182, d);
            ChartDeserializer.ll(b, d);
        }
        static bp(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextBulletSizePercent.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextBulletSizePercent();
                $ret.a = d;
                return $ret;
            })());
            c.setProperty(182, f);
        }
        static bq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextBulletSizePoint.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextBulletSizePoint();
                $ret.a = d;
                return $ret;
            })());
            c.setProperty(181, f);
        }
        static bm(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBulletTypefaceFollowText();
            c.setProperty(178, d);
        }
        static bl(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.b7);
            c.setProperty(177, d);
            ChartDeserializer.ll(b, d);
        }
        static bo(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextNoBullet();
            c.setProperty(179, d);
        }
        static bc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_TextAutonumberBullet.g(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_TextAutonumberBullet();
                $ret.d = e;
                $ret.a = d;
                return $ret;
            })());
            c.setProperty(172, g);
        }
        static bi(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextCharBullet.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextCharBullet();
                $ret.a = d;
                return $ret;
            })());
            c.setProperty(174, f);
        }
        static bh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBlipBullet();
            c.setProperty(173, d);
            ChartDeserializer.ll(b, d);
        }
        static ki(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_TextTabStopList();
                $ret.e = new List$1(CT_TextTabStop.$, 0);
                return $ret;
            })());
            c.aa = d.e;
            ChartDeserializer.ll(b, d);
        }
        static cq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = CT_TextCharacterProperties_DML.z(b, DrawingMLMain.c6);
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static jy(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextSpacing.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextSpacingPercent.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextSpacingPercent();
                $ret.a = d;
                return $ret;
            })());
            c.a = f;
        }
        static jz(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextSpacing.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextSpacingPoint.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextSpacingPoint();
                $ret.a = d;
                return $ret;
            })());
            c.b = f;
        }
        static a4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_TextBlipBullet.$, CT_BlipFillProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Blip_DML.n(b);
            d.setProperty(127, e);
            ChartDeserializer.ll(b, e);
        }
        static t(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.y(b, c);
        }
        static u(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.z(b, c);
        }
        static v(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.aa(b, c);
        }
        static w(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.ab(b, c);
        }
        static y(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.ad(b, c);
        }
        static ab(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.af(b, c);
        }
        static a2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.al(b, c);
        }
        static a9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$, CT_EffectList.$];
            SerializationUtils.ap(b, c);
        }
        static b1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.ar(b, c);
        }
        static b4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.at(b, c);
        }
        static c7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.az(b, c);
        }
        static dv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$, CT_EffectList.$];
            SerializationUtils.a4(b, c);
        }
        static eg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.bb(b, c);
        }
        static ey(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Blip_DML.$, CT_EffectContainer.$];
            SerializationUtils.bi(b, c);
        }
        static b7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AlphaModulateEffect.$, CT_EffectContainer.$, CT_BlendEffect.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_EffectContainer.a(a);
            d.setProperty(344, e);
            ChartDeserializer.ll(b, e);
        }
        static c9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_EffectReference.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_EffectReference();
                $ret.a = d;
                return $ret;
            })());
            c.setProperty(556, f);
        }
        static aa(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_AlphaOutsetEffect.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AlphaOutsetEffect();
                $ret.b = d;
                return $ret;
            })());
            c.setProperty(556, f);
        }
        static a3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_BlendEffect.f(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_BlendEffect();
                $ret.c = d;
                return $ret;
            })());
            c.setProperty(125, f);
            ChartDeserializer.ll(b, f);
        }
        static du(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_FillEffect();
            c.setProperty(630, d);
            ChartDeserializer.ll(b, d);
        }
        static ed(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_EffectContainer.$, CT_EffectList.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_GlowEffect.g(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_GlowEffect();
                $ret.e = e;
                return $ret;
            })());
            d.setProperty(724, g);
            ChartDeserializer.ll(b, g);
        }
        static e4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_EffectContainer.$, CT_EffectList.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = CT_InnerShadowEffect.m(a, e, f, g);
            e = h.p1;
            f = h.p2;
            g = h.p3;
            let i = ((() => {
                let $ret = new CT_InnerShadowEffect();
                $ret.g = e;
                $ret.k = f;
                $ret.i = g;
                return $ret;
            })());
            d.setProperty(830, i);
            ChartDeserializer.ll(b, i);
        }
        static g8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_EffectContainer.$, CT_EffectList.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(Number_$type, null);
            let i = toNullable(Number_$type, null);
            let j = toNullable(Number_$type, null);
            let k = toNullable(Number_$type, null);
            let l = toNullable(ST_RectAlignment_$type, null);
            let m = toNullable(Boolean_$type, null);
            let n = CT_OuterShadowEffect.af(a, e, f, g, h, i, j, k, l, m);
            e = n.p1;
            f = n.p2;
            g = n.p3;
            h = n.p4;
            i = n.p5;
            j = n.p6;
            k = n.p7;
            l = n.p8;
            m = n.p9;
            let o = ((() => {
                let $ret = new CT_OuterShadowEffect();
                $ret.n = l;
                $ret.p = e;
                $ret.r = g;
                $ret.t = f;
                $ret.v = j;
                $ret.x = k;
                $ret.z = m;
                $ret.ab = h;
                $ret.ad = i;
                return $ret;
            })());
            d.setProperty(1142, o);
            ChartDeserializer.ll(b, o);
        }
        static h1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_EffectContainer.$, CT_EffectList.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = 0;
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = CT_PresetShadowEffect.l(a, e, f, g);
            e = h.p1;
            f = h.p2;
            g = h.p3;
            let i = ((() => {
                let $ret = new CT_PresetShadowEffect();
                $ret.d = e;
                $ret.j = f;
                $ret.h = g;
                return $ret;
            })());
            d.setProperty(1275, i);
            ChartDeserializer.ll(b, i);
        }
        static ig(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_EffectContainer.$, CT_EffectList.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(Number_$type, null);
            let i = toNullable(Number_$type, null);
            let j = toNullable(Number_$type, null);
            let k = toNullable(Number_$type, null);
            let l = toNullable(Number_$type, null);
            let m = toNullable(Number_$type, null);
            let n = toNullable(Number_$type, null);
            let o = toNullable(Number_$type, null);
            let p = toNullable(Number_$type, null);
            let q = toNullable(ST_RectAlignment_$type, null);
            let r = toNullable(Boolean_$type, null);
            let s = CT_ReflectionEffect.ar(a, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
            e = s.p1;
            f = s.p2;
            g = s.p3;
            h = s.p4;
            i = s.p5;
            j = s.p6;
            k = s.p7;
            l = s.p8;
            m = s.p9;
            n = s.p10;
            o = s.p11;
            p = s.p12;
            q = s.p13;
            r = s.p14;
            let t = ((() => {
                let $ret = new CT_ReflectionEffect();
                $ret.o = q;
                $ret.q = e;
                $ret.s = k;
                $ret.u = j;
                $ret.w = h;
                $ret.y = i;
                $ret.aa = l;
                $ret.ac = o;
                $ret.ae = p;
                $ret.ag = r;
                $ret.ai = f;
                $ret.ak = g;
                $ret.am = m;
                $ret.ao = n;
                return $ret;
            })());
            d.setProperty(1338, t);
        }
        static ih(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d, e;
            let f = CT_RelativeOffsetEffect.h(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_RelativeOffsetEffect();
                $ret.c = d;
                $ret.e = e;
                return $ret;
            })());
            c.setProperty(1343, g);
        }
        static js(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_EffectContainer.$, CT_EffectList.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_SoftEdgesEffect.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_SoftEdgesEffect();
                $ret.a = e;
                return $ret;
            })());
            d.setProperty(1551, g);
        }
        static lf(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(Number_$type, null);
            let i = toNullable(Number_$type, null);
            let j = CT_TransformEffect.u(a, d, e, f, g, h, i);
            d = j.p1;
            e = j.p2;
            f = j.p3;
            g = j.p4;
            h = j.p5;
            i = j.p6;
            let k = ((() => {
                let $ret = new CT_TransformEffect();
                $ret.h = f;
                $ret.j = g;
                $ret.l = d;
                $ret.n = e;
                $ret.p = h;
                $ret.r = i;
                return $ret;
            })());
            c.setProperty(1892, k);
            ChartDeserializer.ll(b, k);
        }
        static gt(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_NoFillProperties();
            d.setProperty(1063, e);
        }
        static jt(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_SolidColorFillProperties();
            d.setProperty(1553, e);
            ChartDeserializer.ll(b, e);
        }
        static ee(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = toNullable(ST_TileFlipMode_$type, null);
            let f = toNullable(Boolean_$type, null);
            let g = CT_GradientFillProperties.l(a, e, f);
            e = g.p1;
            f = g.p2;
            let h = ((() => {
                let $ret = new CT_GradientFillProperties();
                $ret.g = e;
                $ret.i = f;
                return $ret;
            })());
            d.setProperty(725, h);
            ChartDeserializer.ll(b, h);
        }
        static a5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_BlipFillProperties_DML.e(b);
            d.setProperty(128, e);
            ChartDeserializer.ll(b, e);
        }
        static hg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_PatternFillProperties.h(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_PatternFillProperties();
                $ret.e = e;
                return $ret;
            })());
            d.setProperty(1174, g);
            ChartDeserializer.ll(b, g);
        }
        static el(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_GroupFillProperties();
            d.setProperty(752, e);
            ChartDeserializer.ll(b, e);
        }
        static en(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_GradientFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_GradientStopList();
                $ret.c = new List$1(CT_GradientStop.$, 0);
                return $ret;
            })());
            c.e = CT_GradientStopList.e(d);
            ChartDeserializer.ll(b, d);
        }
        static fn(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_GradientFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(Boolean_$type, null);
            let f = CT_LinearShadeProperties.f(a, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_LinearShadeProperties();
                $ret.a = d;
                $ret.c = e;
                return $ret;
            })());
            c.setProperty(903, g);
        }
        static he(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_GradientFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_PathShadeProperties.f(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_PathShadeProperties();
                $ret.c = d;
                return $ret;
            })());
            c.setProperty(1172, f);
            ChartDeserializer.ll(b, f);
        }
        static kp(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_GradientFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.u(b);
            c.c = d;
            ChartDeserializer.ll(b, d);
        }
        static em(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_GradientFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d = new ST_PositiveFixedPercentage();
            let e = CT_GradientStop.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_GradientStop();
                $ret.d = d;
                return $ret;
            })());
            c.e.add(f);
            ChartDeserializer.ll(b, f);
        }
        static dx(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PathShadeProperties.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.u(b);
            c.a = d;
        }
        static j3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BlipFillProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.u(b);
            c.a = d;
        }
        static ko(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BlipFillProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TileInfoProperties();
            c.setProperty(1727, d);
        }
        static j7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BlipFillProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_StretchInfoProperties();
            c.setProperty(1608, d);
            ChartDeserializer.ll(b, d);
        }
        static dw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_StretchInfoProperties.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.u(b);
            c.a = d;
        }
        static dt(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PatternFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.c = d;
            ChartDeserializer.ll(b, d);
        }
        static a1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PatternFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static b2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ColorChangeEffect.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static b5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ColorChangeEffect.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.c = d;
            ChartDeserializer.ll(b, d);
        }
        static kh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextTabStopList.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(ST_TextTabAlignType_$type, null);
            let f = CT_TextTabStop.f(a, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_TextTabStop();
                $ret.a = e;
                $ret.c = d;
                return $ret;
            })());
            c.e.add(g);
        }
        static fq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_TextCharacterProperties_DML.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_LineProperties_DML.i(b);
            d.setProperty(918, e);
            ChartDeserializer.ll(b, e);
        }
        static db(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_TextCharacterProperties_DML.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_EffectList();
            d.setProperty(560, e);
            ChartDeserializer.ll(b, e);
        }
        static da(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_TextCharacterProperties_DML.$, CT_ShapeProperties_DML.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_EffectContainer.a(a);
            d.setProperty(558, e);
            ChartDeserializer.ll(b, e);
        }
        static er(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.w = d;
            ChartDeserializer.ll(b, d);
        }
        static k0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextUnderlineLineFollowText();
            c.setProperty(1793, d);
            ChartDeserializer.ll(b, d);
        }
        static kz(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = CT_LineProperties_DML.i(b);
            c.setProperty(1792, d);
            ChartDeserializer.ll(b, d);
        }
        static ky(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextUnderlineFillFollowText();
            c.af.a = d;
            b.s.k(d);
        }
        static kx(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextUnderlineFillGroupWrapper();
            c.setProperty(1790, d);
            ChartDeserializer.ll(b, d);
        }
        static fa(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.fr);
            c.c = d;
        }
        static c8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.df);
            c.b = d;
        }
        static cd(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.cu);
            c.a = d;
        }
        static kd(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.i8);
            c.c = d;
        }
        static et(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.h(b, DrawingMLMain.e3);
            c.ai = d;
            ChartDeserializer.ll(b, d);
        }
        static eu(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.h(b, DrawingMLMain.e4);
            c.aj = d;
            ChartDeserializer.ll(b, d);
        }
        static hz(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.t(b);
            c.setProperty(1273, d);
        }
        static cf(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_DashStopList();
            c.setProperty(368, d);
            ChartDeserializer.ll(b, d);
        }
        static im(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_LineJoinRound();
            ChartDeserializer.ll(b, d);
        }
        static ay(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_LineJoinBevel();
            c.setProperty(108, d);
        }
        static gm(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.j(b);
            c.setProperty(1019, d);
        }
        static ep(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.i(b);
            c.a = d;
        }
        static kj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.i(b);
            c.b = d;
        }
        static c5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DashStopList.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.d(b);
            c.b.add(d);
        }
        static jr(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Hyperlink.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.e(b);
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static hv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_TextParagraph_DML.$, CT_TextField.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_TextParagraphProperties_DML.o(a);
            d.setProperty(1154, e);
            ChartDeserializer.ll(b, e);
        }
        static h7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraph_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_RegularTextRun_DML();
            c.setProperty(1297, d);
            ChartDeserializer.ll(b, d);
        }
        static bb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraph_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextLineBreak();
            c.setProperty(164, d);
            ChartDeserializer.ll(b, d);
        }
        static d2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraph_DML.$, b);
            if (c == null) {
                return;
            }
            let d, e;
            let f = CT_TextField.l(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_TextField();
                $ret.e = d;
                $ret.j = e;
                return $ret;
            })());
            c.setProperty(651, g);
            ChartDeserializer.ll(b, g);
        }
        static dc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_TextParagraph_DML.$, b);
            if (c == null) {
                return;
            }
            let d = CT_TextCharacterProperties_DML.z(b, DrawingMLMain.dn);
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static ip(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_RegularTextRun_DML.$, CT_TextLineBreak.$, CT_TextField.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_TextCharacterProperties_DML.z(b, DrawingMLMain.h8);
            d.setProperty(1305, e);
            ChartDeserializer.ll(b, e);
        }
        static kg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_RegularTextRun_DML.$, CT_TextField.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = b.ab.ad;
            d.setProperty(1655, e);
        }
        static gd(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Layout.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ManualLayout();
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static fd(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_LayoutTarget.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_LayoutTarget();
                $ret.b = d;
                return $ret;
            })());
            c.q = f;
        }
        static lg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_LayoutMode.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_LayoutMode();
                $ret.b = d;
                return $ret;
            })());
            c.m = f;
        }
        static lj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_LayoutMode.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_LayoutMode();
                $ret.b = d;
                return $ret;
            })());
            c.o = f;
        }
        static ld(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_LayoutMode.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_LayoutMode();
                $ret.b = d;
                return $ret;
            })());
            c.k = f;
        }
        static ev(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_LayoutMode.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_LayoutMode();
                $ret.b = d;
                return $ret;
            })());
            c.i = f;
        }
        static le(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.e = d;
        }
        static li(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.g = d;
        }
        static lb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.c = d;
        }
        static eo(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ManualLayout.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.a = d;
        }
        static ho(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PivotFmts.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PivotFmt();
            c.e.add(d);
            ChartDeserializer.ll(b, d);
        }
        static e3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_PivotFmt.$, CT_DLbl.$, CT_AreaSer.$, CT_DPt.$, CT_LineSer.$, CT_RadarSer.$, CT_ScatterSer.$, CT_PieSer.$, CT_BarSer.$, CT_SurfaceSer.$, CT_BandFmt.$, CT_BubbleSer.$, CT_LegendEntry.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_UnsignedInt.c(b);
            d.setProperty(817, e);
        }
        static ge(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_PivotFmt.$, CT_DPt.$, CT_LineSer.$, CT_LineChart.$, CT_RadarSer.$, CT_ScatterSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = typeCast(CT_LineChart.$, d);
            if (e != null) {
                let f = false;
                if (((() => { let g = CT_Marker_Chart.g(b, f); f = g.p1; return g.ret; })())) {
                    e.o = toNullable(Boolean_$type, f);
                    return;
                }
            }
            let g = new CT_Marker_Chart();
            d.setProperty(979, g);
            ChartDeserializer.ll(b, g);
        }
        static cy(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_PivotFmt.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_DLbl();
            d.setProperty(401, e);
            ChartDeserializer.ll(b, e);
        }
        static ke(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Marker_Chart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_MarkerStyle.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_MarkerStyle();
                $ret.a = d;
                return $ret;
            })());
            c.c = f;
        }
        static jo(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Marker_Chart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_MarkerSize.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_MarkerSize();
                $ret.b = d;
                return $ret;
            })());
            c.a = f;
        }
        static cr(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$, CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$, CT_LegendEntry.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(467, e);
        }
        static gy(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_TrendlineLbl.$, CT_DLbls.$, CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = null;
            let f = false;
            let g = CT_NumFmt_Chart.f(a, e, f);
            e = g.p1;
            f = g.p2;
            let h = ((() => {
                let $ret = new CT_NumFmt_Chart();
                $ret.c = e;
                $ret.a = f;
                return $ret;
            })());
            d.setProperty(1088, h);
        }
        static cz(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_DLblPos.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_DLblPos();
                $ret.a = e;
                return $ret;
            })());
            d.setProperty(404, g);
        }
        static jg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1492, e);
        }
        static jl(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1498, e);
        }
        static i9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1485, e);
        }
        static jk(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1497, e);
        }
        static jj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1495, e);
        }
        static i8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1484, e);
        }
        static i2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DLbl.$, CT_DLbls.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = b.ab.ad;
            d.setProperty(1445, e);
        }
        static ik(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_View3D.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_RotX.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_RotX();
                $ret.b = d;
                return $ret;
            })());
            c.i = f;
        }
        static ex(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_View3D.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_HPercent.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_HPercent();
                $ret.c = d;
                return $ret;
            })());
            c.e = f;
        }
        static il(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_View3D.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_RotY.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_RotY();
                $ret.c = d;
                return $ret;
            })());
            c.k = f;
        }
        static cs(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_View3D.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_DepthPercent.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_DepthPercent();
                $ret.c = d;
                return $ret;
            })());
            c.c = f;
        }
        static ia(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_View3D.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.a = d;
        }
        static hi(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_View3D.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_Perspective.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_Perspective();
                $ret.b = d;
                return $ret;
            })());
            c.g = f;
        }
        static kk(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Surface.$, b);
            if (c == null) {
                return;
            }
            let d = CT_UnsignedInt.c(b);
            c.a = d;
        }
        static hk(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Surface.$, CT_AreaSer.$, CT_DPt.$, CT_BarSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_PictureOptions();
            d.setProperty(1199, e);
            ChartDeserializer.ll(b, e);
        }
        static ae(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PictureOptions.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.c = d;
        }
        static af(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PictureOptions.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.e = d;
        }
        static ad(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PictureOptions.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.a = d;
        }
        static hj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PictureOptions.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_PictureFormat.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_PictureFormat();
                $ret.a = d;
                return $ret;
            })());
            c.g = f;
        }
        static hl(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PictureOptions.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_PictureStackUnit.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_PictureStackUnit();
                $ret.a = d;
                return $ret;
            })());
            c.i = f;
        }
        static ai(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_AreaChart();
                $ret.c = new List$1(CT_UnsignedInt.$, 0);
                $ret.e = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            if (c.c == null) {
                c.c = d;
            }
            else {
                c.d = d;
            }
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static ah(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_Area3DChart();
                $ret.e = new List$1(CT_UnsignedInt.$, 0);
                $ret.g = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            c.b = d;
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static fp(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_LineChart();
                $ret.k = new List$1(CT_UnsignedInt.$, 0);
                $ret.m = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            if (c.n == null) {
                c.n = d;
            }
            else {
                c.o = d;
            }
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static fo(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_Line3DChart();
                $ret.e = new List$1(CT_UnsignedInt.$, 0);
                $ret.g = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            c.m = d;
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static j5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_StockChart();
                $ret.i = new List$1(CT_UnsignedInt.$, 0);
                $ret.m = new List$1(CT_LineSer.$, 0);
                $ret.k = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            c.ac = d;
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static h8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_RadarChart();
                $ret.k = new List$1(CT_RadarSer.$, 0);
                $ret.g = new List$1(CT_UnsignedInt.$, 0);
                $ret.i = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            if (c.u == null) {
                c.u = d;
            }
            else if (c.v == null) {
                c.v = d;
            }
            else if (c.w == null) {
                c.w = d;
            }
            else if (c.x == null) {
                c.x = d;
            }
            else {
            }
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static iu(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_ScatterChart();
                $ret.g = new List$1(CT_UnsignedInt.$, 0);
                $ret.i = new List$1(CT_Extension.$, 0);
                $ret.k = new List$1(CT_ScatterSer.$, 0);
                return $ret;
            })());
            if (c.y == null) {
                c.y = d;
            }
            else if (c.z == null) {
                c.z = d;
            }
            else if (c.aa == null) {
                c.aa = d;
            }
            else if (c.ab == null) {
                c.ab = d;
            }
            else {
            }
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static hn(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_PieChart();
                $ret.e = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            if (c.s == null) {
                c.s = d;
            }
            else if (c.t == null) {
                c.t = d;
            }
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static hm(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Pie3DChart();
            c.r = d;
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static c1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_DoughnutChart();
            if (c.i == null) {
                c.i = d;
            }
            else if (c.j == null) {
                c.j = d;
            }
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static av(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_BarChart();
                $ret.g = new List$1(CT_UnsignedInt.$, 0);
                $ret.k = new List$1(CT_ChartLines.$, 0);
                $ret.i = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            if (c.f == null) {
                c.f = d;
            }
            else {
                c.g = d;
            }
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static au(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_Bar3DChart();
                $ret.i = new List$1(CT_UnsignedInt.$, 0);
                $ret.k = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            c.e = d;
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static g4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_OfPieChart();
                $ret.m = new List$1(CT_UnsignedInt.$, 0);
                $ret.o = new List$1(CT_Extension.$, 0);
                $ret.q = new List$1(CT_ChartLines.$, 0);
                return $ret;
            })());
            if (c.p == null) {
                c.p = d;
            }
            else if (c.q == null) {
                c.q = d;
            }
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static kc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_SurfaceChart();
                $ret.c = new List$1(CT_UnsignedInt.$, 0);
                $ret.e = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            c.ae = d;
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static kb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_Surface3DChart();
                $ret.c = new List$1(CT_UnsignedInt.$, 0);
                $ret.e = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            c.ad = d;
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static be(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_BubbleChart();
                $ret.o = new List$1(CT_Extension.$, 0);
                $ret.q = new List$1(CT_BubbleSer.$, 0);
                $ret.m = new List$1(CT_UnsignedInt.$, 0);
                return $ret;
            })());
            c.h = d;
            c.aj.add(d);
            ChartDeserializer.ll(b, d);
        }
        static k8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ValAx();
            c.ah.add(d);
            ChartDeserializer.ll(b, d);
        }
        static bu(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_CatAx();
            c.ah.add(d);
            ChartDeserializer.ll(b, d);
        }
        static co(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_DateAx();
            c.ah.add(d);
            ChartDeserializer.ll(b, d);
        }
        static i4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_SerAx();
            c.ah.add(d);
            ChartDeserializer.ll(b, d);
        }
        static c6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PlotArea.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_DTable();
            c.k = d;
            ChartDeserializer.ll(b, d);
        }
        static ek(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_BarChart.$, CT_Bar3DChart.$];
            let d = SerializationUtils.j(b, c, false);
            if (d != null) {
                let e;
                let f = CT_BarGrouping.e(b, e);
                e = f.p1;
                let g = ((() => {
                    let $ret = new CT_BarGrouping();
                    $ret.b = e;
                    return $ret;
                })());
                d.setProperty(749, g);
                return;
            }
            c = [CT_AreaChart.$, CT_Area3DChart.$, CT_LineChart.$, CT_Line3DChart.$];
            d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let h;
            let i = CT_Grouping.e(b, h);
            h = i.p1;
            let j = ((() => {
                let $ret = new CT_Grouping();
                $ret.b = h;
                return $ret;
            })());
            d.setProperty(749, j);
        }
        static k9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AreaChart.$, CT_Area3DChart.$, CT_LineChart.$, CT_Line3DChart.$, CT_RadarChart.$, CT_ScatterChart.$, CT_PieChart.$, CT_Pie3DChart.$, CT_DoughnutChart.$, CT_BarChart.$, CT_Bar3DChart.$, CT_OfPieChart.$, CT_BubbleChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1833, e);
        }
        static i3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            if (ChartDeserializer.c(b)) {
                return;
            }
            else if (ChartDeserializer.d(b)) {
                return;
            }
            else if (ChartDeserializer.e(b)) {
                return;
            }
            else if (ChartDeserializer.f(b)) {
                return;
            }
            else if (ChartDeserializer.h(b)) {
                return;
            }
            else if (ChartDeserializer.i(b)) {
                return;
            }
            else if (ChartDeserializer.j(b)) {
                return;
            }
            else if (ChartDeserializer.m(b)) {
                return;
            }
            else {
            }
        }
        static c(a) {
            let b = [CT_AreaChart.$, CT_Area3DChart.$];
            let c = SerializationUtils.j(a, b, false);
            if (c == null) {
                return false;
            }
            let d = ((() => {
                let $ret = new CT_AreaSer();
                $ret.l = new List$1(CT_DPt.$, 0);
                $ret.r = new List$1(CT_Trendline.$, 0);
                $ret.n = new List$1(CT_ErrBars.$, 0);
                $ret.p = new List$1(CT_Extension.$, 0);
                $ret.k = typeCast(IChart_$type, c);
                return $ret;
            })());
            c.setProperty(1446, d);
            ChartDeserializer.ll(a, d);
            return true;
        }
        static d(a) {
            let b = [CT_BarChart.$, CT_Bar3DChart.$];
            let c = SerializationUtils.j(a, b, false);
            if (c == null) {
                return false;
            }
            let d = ((() => {
                let $ret = new CT_BarSer();
                $ret.r = new List$1(CT_DPt.$, 0);
                $ret.t = new List$1(CT_Extension.$, 0);
                $ret.v = new List$1(CT_Trendline.$, 0);
                $ret.q = typeCast(IChart_$type, c);
                return $ret;
            })());
            c.setProperty(1446, d);
            ChartDeserializer.ll(a, d);
            return true;
        }
        static e(a) {
            let b = ChartDeserializer.a(CT_BubbleChart.$, a, false);
            if (b == null) {
                return false;
            }
            let c = ((() => {
                let $ret = new CT_BubbleSer();
                $ret.p = new List$1(CT_DPt.$, 0);
                $ret.t = new List$1(CT_Extension.$, 0);
                $ret.v = new List$1(CT_Trendline.$, 0);
                $ret.r = new List$1(CT_ErrBars.$, 0);
                $ret.o = b;
                return $ret;
            })());
            b.q.add(c);
            ChartDeserializer.ll(a, c);
            return true;
        }
        static f(a) {
            let b = [CT_LineChart.$, CT_Line3DChart.$, CT_StockChart.$];
            let c = SerializationUtils.j(a, b, false);
            if (c == null) {
                return false;
            }
            let d = ((() => {
                let $ret = new CT_LineSer();
                $ret.p = new List$1(CT_DPt.$, 0);
                $ret.r = new List$1(CT_Extension.$, 0);
                $ret.t = new List$1(CT_Trendline.$, 0);
                $ret.o = typeCast(IChart_$type, c);
                return $ret;
            })());
            c.setProperty(1446, d);
            ChartDeserializer.ll(a, d);
            return true;
        }
        static h(a) {
            let b = [CT_PieChart.$, CT_Pie3DChart.$, CT_DoughnutChart.$, CT_OfPieChart.$];
            let c = SerializationUtils.j(a, b, false);
            if (c == null) {
                return false;
            }
            let d = ((() => {
                let $ret = new CT_PieSer();
                $ret.l = new List$1(CT_DPt.$, 0);
                $ret.n = new List$1(CT_Extension.$, 0);
                $ret.k = typeCast(IChart_$type, c);
                return $ret;
            })());
            c.setProperty(1446, d);
            ChartDeserializer.ll(a, d);
            return true;
        }
        static i(a) {
            let b = ChartDeserializer.a(CT_RadarChart.$, a, false);
            if (b == null) {
                return false;
            }
            let c = ((() => {
                let $ret = new CT_RadarSer();
                $ret.l = new List$1(CT_DPt.$, 0);
                $ret.n = new List$1(CT_Extension.$, 0);
                $ret.k = b;
                return $ret;
            })());
            b.k.add(c);
            ChartDeserializer.ll(a, c);
            return true;
        }
        static j(a) {
            let b = ChartDeserializer.a(CT_ScatterChart.$, a, false);
            if (b == null) {
                return false;
            }
            let c = ((() => {
                let $ret = new CT_ScatterSer();
                $ret.n = new List$1(CT_DPt.$, 0);
                $ret.r = new List$1(CT_Extension.$, 0);
                $ret.p = new List$1(CT_ErrBars.$, 0);
                $ret.t = new List$1(CT_Trendline.$, 0);
                $ret.m = b;
                return $ret;
            })());
            b.k.add(c);
            ChartDeserializer.ll(a, c);
            return true;
        }
        static m(a) {
            let b = [CT_SurfaceChart.$, CT_Surface3DChart.$];
            let c = SerializationUtils.j(a, b, false);
            if (c == null) {
                return false;
            }
            let d = ((() => {
                let $ret = new CT_SurfaceSer();
                $ret.h = new List$1(CT_Extension.$, 0);
                $ret.g = typeCast(IChart_$type, c);
                return $ret;
            })());
            c.setProperty(1446, d);
            ChartDeserializer.ll(a, d);
            return true;
        }
        static c0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AreaChart.$, CT_AreaSer.$, CT_Area3DChart.$, CT_LineChart.$, CT_LineSer.$, CT_Line3DChart.$, CT_StockChart.$, CT_RadarChart.$, CT_RadarSer.$, CT_ScatterChart.$, CT_ScatterSer.$, CT_PieChart.$, CT_PieSer.$, CT_Pie3DChart.$, CT_DoughnutChart.$, CT_BarChart.$, CT_BarSer.$, CT_Bar3DChart.$, CT_OfPieChart.$, CT_BubbleChart.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_DLbls();
            d.setProperty(406, e);
            ChartDeserializer.ll(b, e);
        }
        static c4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AreaChart.$, CT_Area3DChart.$, CT_LineChart.$, CT_Line3DChart.$, CT_StockChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_ChartLines();
            d.setProperty(543, e);
            ChartDeserializer.ll(b, e);
        }
        static an(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AreaChart.$, CT_Area3DChart.$, CT_LineChart.$, CT_Line3DChart.$, CT_StockChart.$, CT_RadarChart.$, CT_ScatterChart.$, CT_BarChart.$, CT_Bar3DChart.$, CT_SurfaceChart.$, CT_Surface3DChart.$, CT_BubbleChart.$, CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_UnsignedInt.c(b, true);
            d.setProperty(81, e);
        }
        static g6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Trendline.$, CT_AreaSer.$, CT_LineSer.$, CT_RadarSer.$, CT_ScatterSer.$, CT_PieSer.$, CT_BarSer.$, CT_SurfaceSer.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = typeCast(CT_Trendline.$, d);
            if (e != null) {
                let f = 0;
                let g = CT_Order.e(b, f);
                f = g.p1;
                let h = ((() => {
                    let $ret = new CT_Order();
                    $ret.b = f;
                    return $ret;
                })());
                e.k = h;
                ChartDeserializer.ll(b, h);
                return;
            }
            let i = CT_UnsignedInt.c(b);
            d.setProperty(1135, i);
        }
        static c3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AreaSer.$, CT_LineSer.$, CT_RadarSer.$, CT_ScatterSer.$, CT_PieSer.$, CT_BarSer.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_DPt();
            d.setProperty(408, e);
            ChartDeserializer.ll(b, e);
        }
        static ks(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AreaSer.$, CT_LineSer.$, CT_ScatterSer.$, CT_BarSer.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_Trendline();
            d.setProperty(1767, e);
            ChartDeserializer.ll(b, e);
        }
        static dd(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AreaSer.$, CT_LineSer.$, CT_ScatterSer.$, CT_BarSer.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_ErrBars();
            d.setProperty(590, e);
            ChartDeserializer.ll(b, e);
        }
        static bt(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_AreaSer.$, CT_LineSer.$, CT_RadarSer.$, CT_PieSer.$, CT_BarSer.$, CT_SurfaceSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_AxDataSource();
            d.setProperty(229, e);
            ChartDeserializer.ll(b, e);
        }
        static k7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ErrBars.$, b, false);
            if (c != null) {
                c.c = CT_Double.c(b);
                return;
            }
            let d = [CT_AreaSer.$, CT_LineSer.$, CT_RadarSer.$, CT_PieSer.$, CT_BarSer.$, CT_SurfaceSer.$];
            let e = SerializationUtils.j(b, d);
            if (e == null) {
                return;
            }
            let f = new CT_NumDataSource();
            e.setProperty(1821, f);
            ChartDeserializer.ll(b, f);
        }
        static e7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DPt.$, CT_BarSer.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(848, e);
        }
        static bd(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DPt.$, CT_BubbleChart.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(183, e);
        }
        static dj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_DPt.$, CT_PieSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_UnsignedInt.c(b);
            d.setProperty(598, e);
        }
        static ku(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Trendline.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TrendlineType.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TrendlineType();
                $ret.b = d;
                return $ret;
            })());
            c.q = f;
        }
        static hh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Trendline.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_Period.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_Period();
                $ret.b = d;
                return $ret;
            })());
            c.m = f;
        }
        static d7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Trendline.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.g = d;
        }
        static ar(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Trendline.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.e = d;
        }
        static e5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Trendline.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.i = d;
        }
        static cv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Trendline.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.c = d;
        }
        static cu(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Trendline.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.a = d;
        }
        static kt(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Trendline.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TrendlineLbl();
            c.o = d;
            ChartDeserializer.ll(b, d);
        }
        static df(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ErrBars.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_ErrDir.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ErrDir();
                $ret.a = d;
                return $ret;
            })());
            c.g = f;
        }
        static de(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ErrBars.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_ErrBarType.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ErrBarType();
                $ret.b = d;
                return $ret;
            })());
            c.e = f;
        }
        static dg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ErrBars.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_ErrValType.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ErrValType();
                $ret.b = d;
                return $ret;
            })());
            c.i = f;
        }
        static gs(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ErrBars.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.a = d;
        }
        static ht(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ErrBars.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_NumDataSource();
            c.m = d;
            ChartDeserializer.ll(b, d);
        }
        static gl(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ErrBars.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_NumDataSource();
            c.k = d;
            ChartDeserializer.ll(b, d);
        }
        static g0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_NumDataSource.$, CT_AxDataSource.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_NumRef();
            d.setProperty(1095, e);
            ChartDeserializer.ll(b, e);
        }
        static gz(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_NumDataSource.$, CT_AxDataSource.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = ((() => {
                let $ret = new CT_NumData();
                $ret.c = new List$1(CT_Extension.$, 0);
                $ret.e = new List$1(CT_NumVal.$, 0);
                return $ret;
            })());
            d.setProperty(1092, e);
            ChartDeserializer.ll(b, e);
        }
        static gx(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_NumRef.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_NumData();
                $ret.c = new List$1(CT_Extension.$, 0);
                $ret.e = new List$1(CT_NumVal.$, 0);
                return $ret;
            })());
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static d5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_NumData.$, b);
            if (c == null) {
                return;
            }
            let d = b.ab.ad;
            c.g = d;
        }
        static gp(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_AxDataSource.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_MultiLvlStrRef();
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static j8(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_AxDataSource.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_StrData();
                $ret.f = new List$1(CT_StrVal.$, 0);
                return $ret;
            })());
            c.d = d;
            ChartDeserializer.ll(b, d);
        }
        static go(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_MultiLvlStrRef.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_MultiLvlStrData();
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static fy(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_MultiLvlStrData.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_Lvl();
                $ret.a = new List$1(CT_StrVal.$, 0);
                return $ret;
            })());
            c.d.add(d);
            ChartDeserializer.ll(b, d);
        }
        static je(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DLbls.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.setProperty(1491, d);
            ChartDeserializer.ll(b, d);
        }
        static fg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DLbls.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ChartLines();
            c.setProperty(886, d);
            ChartDeserializer.ll(b, d);
        }
        static d9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Area3DChart.$, CT_Line3DChart.$, CT_Bar3DChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_GapAmount.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_GapAmount();
                $ret.c = e;
                return $ret;
            })());
            d.setProperty(696, g);
        }
        static es(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_LineChart.$, CT_StockChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_ChartLines();
            d.setProperty(780, e);
            ChartDeserializer.ll(b, e);
        }
        static k3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_LineChart.$, CT_StockChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_UpDownBars();
            d.setProperty(1809, e);
            ChartDeserializer.ll(b, e);
        }
        static jq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_LineChart.$, CT_LineSer.$, CT_ScatterSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1547, e);
        }
        static ea(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_UpDownBars.$, CT_BarChart.$, CT_Bar3DChart.$, CT_OfPieChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_GapAmount.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_GapAmount();
                $ret.c = e;
                return $ret;
            })());
            d.setProperty(697, g);
        }
        static k2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_UpDownBars.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_UpDownBar();
            c.e = d;
            ChartDeserializer.ll(b, d);
        }
        static c2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_UpDownBars.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_UpDownBar();
            c.c = d;
            ChartDeserializer.ll(b, d);
        }
        static h9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_RadarChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_RadarStyle.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_RadarStyle();
                $ret.b = d;
                return $ret;
            })());
            c.e = f;
        }
        static iv(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ScatterChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_ScatterStyle.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ScatterStyle();
                $ret.b = d;
                return $ret;
            })());
            c.e = f;
        }
        static lh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ScatterSer.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_AxDataSource();
            d.setProperty(1890, e);
            ChartDeserializer.ll(b, e);
        }
        static lk(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ScatterSer.$, CT_BubbleSer.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_NumDataSource();
            d.setProperty(1898, e);
            ChartDeserializer.ll(b, e);
        }
        static d0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_PieChart.$, CT_DoughnutChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_FirstSliceAng.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_FirstSliceAng();
                $ret.c = e;
                return $ret;
            })());
            d.setProperty(647, g);
        }
        static ew(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DoughnutChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_HoleSize.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_HoleSize();
                $ret.b = d;
                return $ret;
            })());
            c.c = f;
        }
        static aw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_BarChart.$, CT_Bar3DChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_BarDir.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_BarDir();
                $ret.b = e;
                return $ret;
            })());
            d.setProperty(101, g);
        }
        static g9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BarChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_Overlap.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_Overlap();
                $ret.b = d;
                return $ret;
            })());
            c.c = f;
        }
        static i5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_BarChart.$, CT_OfPieChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_ChartLines();
            d.setProperty(1448, e);
            ChartDeserializer.ll(b, e);
        }
        static i7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_BarSer.$, CT_Bar3DChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_Shape_Chart.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_Shape_Chart();
                $ret.b = e;
                return $ret;
            })());
            d.setProperty(1461, g);
        }
        static g5(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_OfPieChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_OfPieType.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_OfPieType();
                $ret.b = d;
                return $ret;
            })());
            c.e = f;
        }
        static j1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_OfPieChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_SplitType.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_SplitType();
                $ret.b = d;
                return $ret;
            })());
            c.i = f;
        }
        static j0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_OfPieChart.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.a = d;
        }
        static ch(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_OfPieChart.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_CustSplit();
            c.m = d.a;
            ChartDeserializer.ll(b, d);
        }
        static i0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_OfPieChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_SecondPieSize.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_SecondPieSize();
                $ret.c = d;
                return $ret;
            })());
            c.g = f;
        }
        static iz(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_CustSplit.$, b);
            if (c == null) {
                return;
            }
            let d = CT_UnsignedInt.c(b);
            if (c.a == null) {
                c.a = new List$1(CT_UnsignedInt.$, 0);
            }
            c.a.add(d);
        }
        static lc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_SurfaceChart.$, CT_Surface3DChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(1869, e);
        }
        static at(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_SurfaceChart.$, CT_Surface3DChart.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = ((() => {
                let $ret = new CT_BandFmts();
                $ret.a = new List$1(CT_BandFmt.$, 0);
                return $ret;
            })());
            d.setProperty(97, e);
            ChartDeserializer.ll(b, e);
        }
        static as(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BandFmts.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_BandFmt();
            c.a.add(d);
            ChartDeserializer.ll(b, d);
        }
        static bf(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BubbleChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_BubbleScale.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_BubbleScale();
                $ret.c = d;
                return $ret;
            })());
            c.g = f;
        }
        static jh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BubbleChart.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.c = d;
        }
        static jp(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BubbleChart.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_SizeRepresents.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_SizeRepresents();
                $ret.b = d;
                return $ret;
            })());
            c.k = f;
        }
        static bg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_BubbleSer.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_NumDataSource();
            c.i = d;
            ChartDeserializer.ll(b, d);
        }
        static it(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = new CT_Scaling();
            d.setProperty(1418, e);
            ChartDeserializer.ll(b, e);
        }
        static ao(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e;
            let f = CT_AxPos.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_AxPos();
                $ret.a = e;
                return $ret;
            })());
            d.setProperty(82, g);
        }
        static f9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e = new CT_ChartLines();
            d.setProperty(963, e);
            ChartDeserializer.ll(b, e);
        }
        static gh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e = new CT_ChartLines();
            d.setProperty(1011, e);
            ChartDeserializer.ll(b, e);
        }
        static ga(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e;
            let f = CT_TickMark.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_TickMark();
                $ret.b = e;
                return $ret;
            })());
            d.setProperty(964, g);
        }
        static gi(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e;
            let f = CT_TickMark.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_TickMark();
                $ret.b = e;
                return $ret;
            })());
            d.setProperty(1012, g);
        }
        static kl(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e;
            let f = CT_TickLblPos.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_TickLblPos();
                $ret.b = e;
                return $ret;
            })());
            d.setProperty(1724, g);
        }
        static b9(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e = CT_UnsignedInt.c(b, true);
            d.setProperty(359, e);
        }
        static cb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e;
            let f = CT_Crosses.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_Crosses();
                $ret.a = e;
                return $ret;
            })());
            d.setProperty(361, g);
            ChartDeserializer.ll(b, g);
        }
        static cc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e = CT_Double.c(b);
            d.setProperty(362, e);
        }
        static ca(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_CatAx.$, CT_DateAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            let e;
            let f = CT_CrossBetween.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_CrossBetween();
                $ret.a = e;
                return $ret;
            })());
            d.setProperty(360, g);
        }
        static gc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_DateAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_AxisUnit.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_AxisUnit();
                $ret.a = e;
                return $ret;
            })());
            d.setProperty(967, g);
        }
        static gk(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_ValAx.$, CT_DateAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_AxisUnit.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_AxisUnit();
                $ret.a = e;
                return $ret;
            })());
            d.setProperty(1015, g);
        }
        static cw(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ValAx.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_DispUnits();
                $ret.e = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            c.dispUnits = d;
            ChartDeserializer.ll(b, d);
        }
        static ft(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Scaling.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_LogBase.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_LogBase();
                $ret.a = d;
                return $ret;
            })());
            c.e = f;
        }
        static g7(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Scaling.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_Orientation.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_Orientation();
                $ret.a = d;
                return $ret;
            })());
            c.g = f;
        }
        static gf(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Scaling.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.a = d;
        }
        static gg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Scaling.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.c = d;
        }
        static ci(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DispUnits.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Double.c(b);
            c.a = d;
        }
        static bn(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DispUnits.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_BuiltInUnit.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_BuiltInUnit();
                $ret.b = d;
                return $ret;
            })());
            c.b = f;
        }
        static cx(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DispUnits.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_DispUnitsLbl();
            c.c = d;
            ChartDeserializer.ll(b, d);
        }
        static aj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_CatAx.$, CT_DateAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = CT_Boolean.d(b, 3);
            d.setProperty(69, e);
        }
        static fe(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_CatAx.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_LblAlgn.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_LblAlgn();
                $ret.a = d;
                return $ret;
            })());
            c.e = f;
        }
        static ff(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_CatAx.$, CT_DateAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_LblOffset.e(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_LblOffset();
                $ret.c = e;
                return $ret;
            })());
            d.setProperty(884, g);
        }
        static km(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_CatAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_Skip.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_Skip();
                $ret.b = e;
                return $ret;
            })());
            d.setProperty(1725, g);
        }
        static kn(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_CatAx.$, CT_SerAx.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e;
            let f = CT_Skip.d(b, e);
            e = f.p1;
            let g = ((() => {
                let $ret = new CT_Skip();
                $ret.b = e;
                return $ret;
            })());
            d.setProperty(1726, g);
        }
        static gu(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_CatAx.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.c = d;
        }
        static ax(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DateAx.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TimeUnit.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TimeUnit();
                $ret.b = d;
                return $ret;
            })());
            c.i = f;
        }
        static gb(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DateAx.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TimeUnit.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TimeUnit();
                $ret.b = d;
                return $ret;
            })());
            c.k = f;
        }
        static gj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DateAx.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TimeUnit.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TimeUnit();
                $ret.b = d;
                return $ret;
            })());
            c.m = f;
        }
        static jc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DTable.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.a = d;
        }
        static jm(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DTable.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.g = d;
        }
        static ji(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DTable.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.e = d;
        }
        static jd(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_DTable.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.c = d;
        }
        static fl(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Legend.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_LegendPos.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_LegendPos();
                $ret.b = d;
                return $ret;
            })());
            c.e = f;
        }
        static fk(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Legend.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_LegendEntry();
            c.m.add(d);
            ChartDeserializer.ll(b, d);
        }
        static cg(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ShapeProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_CustomGeometry2D();
            c.setProperty(371, d);
            ChartDeserializer.ll(b, d);
        }
        static h0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ShapeProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PresetGeometry2D();
            c.setProperty(1274, d);
            ChartDeserializer.ll(b, d);
        }
        static g3(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Transform2D.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.m(b);
            c.a = d;
        }
        static ec(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeomGuideList();
            c.d = d;
            ChartDeserializer.ll(b, d);
        }
        static p(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_AdjustHandleList();
            c.a = d;
            ChartDeserializer.ll(b, d);
        }
        static ck(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ConnectionSiteList();
            c.b = d;
            ChartDeserializer.ll(b, d);
        }
        static ib(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.g(b);
            c.e = d;
        }
        static hf(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DList();
            c.f = d;
            ChartDeserializer.ll(b, d);
        }
        static r(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_AdjustHandleList.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.y(b);
            c.b.add(d);
            ChartDeserializer.ll(b, d);
        }
        static q(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_AdjustHandleList.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.n(b);
            c.b.add(d);
            ChartDeserializer.ll(b, d);
        }
        static hu(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_XYAdjustHandle.$, CT_PolarAdjustHandle.$, CT_ConnectionSite.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = DMLUtils.a(b);
            d.setProperty(1241, e);
        }
        static cj(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ConnectionSiteList.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.c(b);
            c.b.add(d);
            ChartDeserializer.ll(b, d);
        }
        static b0(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DClose();
            c.b.add(d);
        }
        static gn(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DMoveTo();
            c.b.add(d);
            ChartDeserializer.ll(b, d);
        }
        static fs(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DLineTo();
            c.b.add(d);
            ChartDeserializer.ll(b, d);
        }
        static ag(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.k(b);
            c.b.add(d);
        }
        static h6(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DQuadBezierTo();
            c.b.add(d);
            ChartDeserializer.ll(b, d);
        }
        static ce(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DCubicBezierTo();
            c.b.add(d);
            ChartDeserializer.ll(b, d);
        }
        static h4(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = [CT_Path2DMoveTo.$, CT_Path2DLineTo.$, CT_Path2DQuadBezierTo.$, CT_Path2DCubicBezierTo.$];
            let d = SerializationUtils.j(b, c);
            if (d == null) {
                return;
            }
            let e = DMLUtils.a(b);
            d.setProperty(1277, e);
        }
        static al(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ExternalData.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.a = d;
        }
        static eq(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PrintSettings.$, b);
            if (c == null) {
                return;
            }
            let d = false;
            let e = false;
            let f = false;
            let g = CT_HeaderFooter_Chart.w(a, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_HeaderFooter_Chart();
                $ret.a = d;
                $ret.h = e;
                $ret.f = f;
                return $ret;
            })());
            c.a = h;
            ChartDeserializer.ll(b, h);
        }
        static hc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PrintSettings.$, b);
            if (c == null) {
                return;
            }
            let d = 0;
            let e = 0;
            let f = 0;
            let g = 0;
            let h = 0;
            let i = 0;
            let j = CT_PageMargins_Chart.o(a, d, e, f, g, h, i);
            d = j.p1;
            e = j.p2;
            f = j.p3;
            g = j.p4;
            h = j.p5;
            i = j.p6;
            let k = ((() => {
                let $ret = new CT_PageMargins_Chart();
                $ret.h = d;
                $ret.j = e;
                $ret.l = f;
                $ret.b = g;
                $ret.f = h;
                $ret.d = i;
                return $ret;
            })());
            c.c = k;
        }
        static hd(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PrintSettings.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = toNullable(Number_$type, null);
            let f = toNullable(ST_PageSetupOrientation_$type, null);
            let g = toNullable(Boolean_$type, null);
            let h = toNullable(Boolean_$type, null);
            let i = toNullable(Boolean_$type, null);
            let j = toNullable(Number_$type, null);
            let k = toNullable(Number_$type, null);
            let l = toNullable(Number_$type, null);
            let m = CT_PageSetup_Chart.ac(a, d, e, f, g, h, i, j, k, l);
            d = m.p1;
            e = m.p2;
            f = m.p3;
            g = m.p4;
            h = m.p5;
            i = m.p6;
            j = m.p7;
            k = m.p8;
            l = m.p9;
            let n = ((() => {
                let $ret = new CT_PageSetup_Chart();
                $ret.g = g;
                $ret.i = l;
                $ret.k = h;
                $ret.m = e;
                $ret.o = j;
                $ret.q = f;
                $ret.s = d;
                $ret.u = i;
                $ret.w = k;
                return $ret;
            })());
            c.e = n;
        }
        static fi(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_PrintSettings.$, b);
            if (c == null) {
                return;
            }
            let d = DMLChartUtils.ak(b);
            c.g = d;
        }
        static g2(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_HeaderFooter_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = b.ab.ad;
            c.t = d;
        }
        static g1(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_HeaderFooter_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = b.ab.ad;
            c.r = d;
        }
        static di(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_HeaderFooter_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = b.ab.ad;
            c.l = d;
        }
        static dh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_HeaderFooter_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = b.ab.ad;
            c.j = d;
        }
        static dz(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_HeaderFooter_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = b.ab.ad;
            c.p = d;
        }
        static dy(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_HeaderFooter_Chart.$, b);
            if (c == null) {
                return;
            }
            let d = b.ab.ad;
            c.n = d;
        }
        static dk(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_ExtensionList.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_Extension.c(b, d);
            d = e.p1;
            let f = CT_Extension_DataLabels.i(d);
            if (f != null) {
                c.e.add(f);
                ChartDeserializer.ll(b, f);
                return;
            }
            let g = CT_Extension_DataLabelsRange.g(d);
            if (g != null) {
                c.e.add(g);
                ChartDeserializer.ll(b, g);
                return;
            }
            let h = ((() => {
                let $ret = new CT_Extension();
                $ret.b = d;
                return $ret;
            })());
            c.e.add(h);
        }
        static jf(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Extension_DataLabels.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.g = d;
        }
        static ja(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Extension_DataLabels.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Boolean.d(b, 3);
            c.f = d;
        }
        static fh(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Extension_DataLabels.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ChartLines();
            c.h = d;
            ChartDeserializer.ll(b, d);
        }
        static fc(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Extension_DataLabels.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Layout();
            c.j = d;
            ChartDeserializer.ll(b, d);
        }
        static cm(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_Extension_DataLabelsRange.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_SeriesDataLabelsRange();
            c.h = d;
            ChartDeserializer.ll(b, d);
        }
        static ds(a) {
            let b = typeCast(ObjectModelChartPartManager.$, a);
            let c = ChartDeserializer.a(CT_SeriesDataLabelsRange.$, b);
            if (c == null) {
                return;
            }
            c.c = b.ab.ad;
        }
        static a($t, a, b = false) {
            return SerializationUtils.i($t, a, b);
        }
        static ll(a, b) {
            a.s.k(b);
        }
        static f8(a, b) {
            let c = typeCast(ObjectModelChartPartManager.$, a);
            let d = ChartDeserializer.a(CT_TextListStyle_DML.$, c);
            if (d == null) {
                return;
            }
            let e = CT_TextParagraphProperties_DML.o(a);
            d.setProperty(b, e);
            ChartDeserializer.ll(c, e);
        }
    }
    ChartDeserializer.$t = /*@__PURE__*/ markType(ChartDeserializer, 'ChartDeserializer');
    return ChartDeserializer;
})();
/**
 * @hidden
 */
export let ChartExDeserializer = /*@__PURE__*/ (() => {
    class ChartExDeserializer extends Base {
        constructor(a) {
            super();
            this.d = null;
            this.h = null;
            this.d = a.a8._by;
        }
        static h1(a) {
            a.az(ChartExElements.m, ChartExDeserializer.bb);
            a.ay(ChartExElements.m, ChartExDeserializer.bc);
            a.az(ChartExElements.l, ChartExDeserializer.ba);
            a.az(ChartExElements.k, ChartExDeserializer.a9);
            a.az(ChartExElements.b5, ChartExDeserializer.g1);
            a.az(ChartExElements.cd, ChartExDeserializer.hl);
            a.az(ChartExElements.o, ChartExDeserializer.bh);
            a.az(ChartExElements.ai, ChartExDeserializer.cv);
            a.az(ChartExElements.bz, ChartExDeserializer.fy);
            a.az(DrawingMLMain.ds, ChartExDeserializer.ch);
            a.az(ChartExElements.ac, ChartExDeserializer.cg);
            a.az(ChartExElements.ab, ChartExDeserializer.cf);
            a.az(ChartExElements.r, ChartExDeserializer.bv);
            a.az(ChartExElements.bo, ChartExDeserializer.ff);
            a.az(ChartExElements.b7, ChartExDeserializer.g5);
            a.az(ChartExElements.ae, ChartExDeserializer.ck);
            a.az(ChartExElements.bm, ChartExDeserializer.e9);
            a.az(ChartExElements.ba, ChartExDeserializer.en);
            a.az(ChartExElements.b0, ChartExDeserializer.f4);
            a.az(ChartExElements.ca, ChartExDeserializer.hi);
            a.az(ChartExElements.bw, ChartExDeserializer.ft);
            a.az(ChartExElements.a9, ChartExDeserializer.ed);
            a.az(ChartExElements.cb, ChartExDeserializer.hj);
            a.az(ChartExElements.cc, ChartExDeserializer.hk);
            a.az(ChartExElements.b2, ChartExDeserializer.gf);
            a.az(ChartExElements.cg, ChartExDeserializer.ht);
            a.az(DrawingMLMain.b0, ChartExDeserializer.au);
            a.az(DrawingMLMain.f2, ChartExDeserializer.ej);
            a.az(DrawingMLMain.he, ChartExDeserializer.fl);
            a.az(DrawingMLMain.hs, ChartExDeserializer.f3);
            a.az(DrawingMLMain.gs, ChartExDeserializer.fa);
            a.az(DrawingMLMain.g6, ChartExDeserializer.fd);
            a.az(DrawingMLMain.ir, ChartExDeserializer.gw);
            a.az(DrawingMLMain.ie, ChartExDeserializer.gm);
            a.az(DrawingMLMain.iq, ChartExDeserializer.gv);
            a.az(DrawingMLMain.d3, ChartExDeserializer.cs);
            a.az(DrawingMLMain.bh, ChartExDeserializer.ab);
            a.az(DrawingMLMain.eh, ChartExDeserializer.cx);
            a.az(DrawingMLMain.ce, ChartExDeserializer.a7);
            a.az(DrawingMLMain.fu, ChartExDeserializer.ee);
            a.az(DrawingMLMain.bj, ChartExDeserializer.ae);
            a.az(DrawingMLMain.h4, ChartExDeserializer.gg);
            a.az(DrawingMLMain.bd, ChartExDeserializer.z);
            a.az(DrawingMLMain.g4, ChartExDeserializer.fc);
            a.az(DrawingMLMain.jz, ChartExDeserializer.hs);
            a.az(DrawingMLMain.bn, ChartExDeserializer.ah);
            a.az(DrawingMLMain.bm, ChartExDeserializer.ag);
            a.az(DrawingMLMain.dv, ChartExDeserializer.cj);
            a.az(DrawingMLMain.ct, ChartExDeserializer.bm);
            a.az(DrawingMLMain.ih, ChartExDeserializer.go);
            a.az(DrawingMLMain.i1, ChartExDeserializer.g3);
            a.az(DrawingMLMain.e8, ChartExDeserializer.d3);
            a.az(DrawingMLMain.i9, ChartExDeserializer.g9);
            a.az(DrawingMLMain.ig, ChartExDeserializer.gn);
            a.az(DrawingMLMain.ho, ChartExDeserializer.fz);
            a.az(DrawingMLMain.jn, ChartExDeserializer.hh);
            a.az(DrawingMLMain.ij, ChartExDeserializer.gr);
            a.az(DrawingMLMain.cq, ChartExDeserializer.bk);
            a.az(DrawingMLMain.fh, ChartExDeserializer.d9);
            a.az(DrawingMLMain.eo, ChartExDeserializer.dp);
            a.az(DrawingMLMain.a2, ChartExDeserializer.p);
            a.az(DrawingMLMain.a9, ChartExDeserializer.w);
            a.az(DrawingMLMain.a7, ChartExDeserializer.u);
            a.az(DrawingMLMain.e9, ChartExDeserializer.d4);
            a.az(DrawingMLMain.fb, ChartExDeserializer.d6);
            a.az(DrawingMLMain.fa, ChartExDeserializer.d5);
            a.az(DrawingMLMain.ib, ChartExDeserializer.gj);
            a.az(DrawingMLMain.id, ChartExDeserializer.gl);
            a.az(DrawingMLMain.ic, ChartExDeserializer.gk);
            a.az(DrawingMLMain.f5, ChartExDeserializer.ek);
            a.az(DrawingMLMain.f7, ChartExDeserializer.em);
            a.az(DrawingMLMain.f6, ChartExDeserializer.el);
            a.az(DrawingMLMain.hy, ChartExDeserializer.f9);
            a.az(DrawingMLMain.h0, ChartExDeserializer.gb);
            a.az(DrawingMLMain.hz, ChartExDeserializer.ga);
            a.az(DrawingMLMain.eq, ChartExDeserializer.dr);
            a.az(DrawingMLMain.es, ChartExDeserializer.dt);
            a.az(DrawingMLMain.er, ChartExDeserializer.ds);
            a.az(DrawingMLMain.bv, ChartExDeserializer.aq);
            a.az(DrawingMLMain.bx, ChartExDeserializer.as);
            a.az(DrawingMLMain.bw, ChartExDeserializer.ar);
            a.az(DrawingMLMain.eg, ChartExDeserializer.cw);
            a.az(DrawingMLMain.fj, ChartExDeserializer.ea);
            a.az(DrawingMLMain.dr, ChartExDeserializer.ce);
            a.az(DrawingMLMain.c5, ChartExDeserializer.b1);
            a.az(DrawingMLMain.f9, ChartExDeserializer.eo);
            a.az(DrawingMLMain.ga, ChartExDeserializer.ep);
            a.az(DrawingMLMain.gb, ChartExDeserializer.eq);
            a.az(DrawingMLMain.gc, ChartExDeserializer.er);
            a.az(DrawingMLMain.gd, ChartExDeserializer.es);
            a.az(DrawingMLMain.ge, ChartExDeserializer.et);
            a.az(DrawingMLMain.gf, ChartExDeserializer.eu);
            a.az(DrawingMLMain.gg, ChartExDeserializer.ev);
            a.az(DrawingMLMain.gh, ChartExDeserializer.ew);
            a.az(DrawingMLMain.fz, ChartExDeserializer.eh);
            a.az(DrawingMLMain.iu, ChartExDeserializer.gy);
            a.az(DrawingMLMain.it, ChartExDeserializer.gx);
            a.az(DrawingMLMain.b6, ChartExDeserializer.a0);
            a.az(DrawingMLMain.b5, ChartExDeserializer.az);
            a.az(DrawingMLMain.cc, ChartExDeserializer.a6);
            a.az(DrawingMLMain.ca, ChartExDeserializer.a4);
            a.az(DrawingMLMain.cb, ChartExDeserializer.a5);
            a.az(DrawingMLMain.b8, ChartExDeserializer.a2);
            a.az(DrawingMLMain.b7, ChartExDeserializer.a1);
            a.az(DrawingMLMain.b9, ChartExDeserializer.a3);
            a.az(DrawingMLMain.b2, ChartExDeserializer.aw);
            a.az(DrawingMLMain.b4, ChartExDeserializer.ay);
            a.az(DrawingMLMain.b3, ChartExDeserializer.ax);
            a.az(DrawingMLMain.je, ChartExDeserializer.hc);
            a.az(DrawingMLMain.c6, ChartExDeserializer.b2);
            a.az(DrawingMLMain.ix, ChartExDeserializer.gz);
            a.az(DrawingMLMain.iy, ChartExDeserializer.g0);
            a.az(DrawingMLMain.bt, ChartExDeserializer.ao);
            a.az(DrawingMLMain.a3, ChartExDeserializer.q);
            a.az(DrawingMLMain.a4, ChartExDeserializer.r);
            a.az(DrawingMLMain.a5, ChartExDeserializer.s);
            a.az(DrawingMLMain.a6, ChartExDeserializer.t);
            a.az(DrawingMLMain.a8, ChartExDeserializer.v);
            a.az(DrawingMLMain.bb, ChartExDeserializer.y);
            a.az(DrawingMLMain.bq, ChartExDeserializer.aj);
            a.az(DrawingMLMain.by, ChartExDeserializer.at);
            a.az(DrawingMLMain.ck, ChartExDeserializer.bf);
            a.az(DrawingMLMain.cm, ChartExDeserializer.bi);
            a.az(DrawingMLMain.de, ChartExDeserializer.b4);
            a.az(DrawingMLMain.dy, ChartExDeserializer.cn);
            a.az(DrawingMLMain.ep, ChartExDeserializer.dq);
            a.az(DrawingMLMain.e7, ChartExDeserializer.d2);
            a.az(DrawingMLMain.cs, ChartExDeserializer.bl);
            a.az(DrawingMLMain.dh, ChartExDeserializer.b6);
            a.az(DrawingMLMain.ba, ChartExDeserializer.x);
            a.az(DrawingMLMain.bs, ChartExDeserializer.an);
            a.az(DrawingMLMain.dx, ChartExDeserializer.cm);
            a.az(DrawingMLMain.ej, ChartExDeserializer.dm);
            a.az(DrawingMLMain.fg, ChartExDeserializer.d8);
            a.az(DrawingMLMain.hd, ChartExDeserializer.fk);
            a.az(DrawingMLMain.hr, ChartExDeserializer.f2);
            a.az(DrawingMLMain.h1, ChartExDeserializer.gc);
            a.az(DrawingMLMain.h2, ChartExDeserializer.ge);
            a.az(DrawingMLMain.io, ChartExDeserializer.gt);
            a.az(DrawingMLMain.j9, ChartExDeserializer.hy);
            a.az(DrawingMLMain.gz, ChartExDeserializer.fb);
            a.az(DrawingMLMain.ip, ChartExDeserializer.gu);
            a.az(DrawingMLMain.ek, ChartExDeserializer.dn);
            a.az(DrawingMLMain.bu, ChartExDeserializer.ap);
            a.az(DrawingMLMain.hi, ChartExDeserializer.fr);
            a.az(DrawingMLMain.et, ChartExDeserializer.du);
            a.az(DrawingMLMain.ev, ChartExDeserializer.dw);
            a.az(DrawingMLMain.fv, ChartExDeserializer.ef);
            a.az(DrawingMLMain.hg, ChartExDeserializer.fp);
            a.az(DrawingMLMain.jl, ChartExDeserializer.hg);
            a.az(DrawingMLMain.eu, ChartExDeserializer.dv);
            a.az(DrawingMLMain.d2, ChartExDeserializer.cp);
            a.az(DrawingMLMain.i0, ChartExDeserializer.g2);
            a.az(DrawingMLMain.jk, ChartExDeserializer.hf);
            a.az(DrawingMLMain.i3, ChartExDeserializer.g6);
            a.az(DrawingMLMain.dz, ChartExDeserializer.co);
            a.az(DrawingMLMain.dw, ChartExDeserializer.cl);
            a.az(DrawingMLMain.bo, ChartExDeserializer.ai);
            a.az(DrawingMLMain.cl, ChartExDeserializer.bg);
            a.az(DrawingMLMain.co, ChartExDeserializer.bj);
            a.az(DrawingMLMain.jd, ChartExDeserializer.hb);
            a.az(DrawingMLMain.fx, ChartExDeserializer.eg);
            a.az(DrawingMLMain.dj, ChartExDeserializer.b8);
            a.az(DrawingMLMain.di, ChartExDeserializer.b7);
            a.az(DrawingMLMain.ez, ChartExDeserializer.dz);
            a.az(DrawingMLMain.jy, ChartExDeserializer.hp);
            a.az(DrawingMLMain.jx, ChartExDeserializer.ho);
            a.az(DrawingMLMain.jw, ChartExDeserializer.hn);
            a.az(DrawingMLMain.jv, ChartExDeserializer.hm);
            a.az(DrawingMLMain.fr, ChartExDeserializer.eb);
            a.az(DrawingMLMain.df, ChartExDeserializer.b5);
            a.az(DrawingMLMain.cu, ChartExDeserializer.bp);
            a.az(DrawingMLMain.i8, ChartExDeserializer.g8);
            a.az(DrawingMLMain.e3, ChartExDeserializer.d0);
            a.az(DrawingMLMain.e4, ChartExDeserializer.d1);
            a.az(DrawingMLMain.hp, ChartExDeserializer.f0);
            a.az(DrawingMLMain.cz, ChartExDeserializer.br);
            a.az(DrawingMLMain.h7, ChartExDeserializer.gh);
            a.az(DrawingMLMain.bl, ChartExDeserializer.af);
            a.az(DrawingMLMain.gm, ChartExDeserializer.e7);
            a.az(DrawingMLMain.ex, ChartExDeserializer.dx);
            a.az(DrawingMLMain.jf, ChartExDeserializer.hd);
            a.az(DrawingMLMain.dd, ChartExDeserializer.b3);
            a.az(DrawingMLMain.im, ChartExDeserializer.gs);
            a.az(DrawingMLMain.hm, ChartExDeserializer.fx);
            a.az(DrawingMLMain.hv, ChartExDeserializer.f7);
            a.az(DrawingMLMain.b1, ChartExDeserializer.av);
            a.az(DrawingMLMain.d4, ChartExDeserializer.ct);
            a.az(DrawingMLMain.dn, ChartExDeserializer.b9);
            a.az(DrawingMLMain.h8, ChartExDeserializer.gi);
            a.az(DrawingMLMain.jb, ChartExDeserializer.ha);
            a.az(ChartExElements.bx, ChartExDeserializer.fu);
            a.az(ChartExElements.d, ChartExDeserializer.ac);
            a.az(ChartExElements.by, ChartExDeserializer.fv);
            a.az(ChartExElements.b4, ChartExDeserializer.gq);
            a.az(ChartExElements.cj, ChartExDeserializer.hw);
            a.az(ChartExElements.ci, ChartExDeserializer.hv);
            a.az(ChartExElements.w, ChartExDeserializer.b0);
            a.az(ChartExElements.v, ChartExDeserializer.bz);
            a.az(ChartExElements.s, ChartExDeserializer.bw);
            a.az(ChartExElements.a8, ChartExDeserializer.ec);
            a.az(ChartExElements.e, ChartExDeserializer.ad);
            a.az(ChartExElements.bi, ChartExDeserializer.e4);
            a.az(ChartExElements.bg, ChartExDeserializer.e2);
            a.az(ChartExElements.be, ChartExDeserializer.e0);
            a.az(ChartExElements.bh, ChartExDeserializer.e3);
            a.az(ChartExElements.bf, ChartExDeserializer.e1);
            a.az(ChartExElements.bd, ChartExDeserializer.ez);
            a.az(ChartExElements.ad, ChartExDeserializer.ci);
            a.az(ChartExElements.bn, ChartExDeserializer.fe);
            a.az(ChartExElements.bv, ChartExDeserializer.fs);
            a.az(ChartExElements.bp, ChartExDeserializer.fg);
            a.az(ChartExElements.ck, ChartExDeserializer.hx);
            a.az(ChartExElements.b3, ChartExDeserializer.gp);
            a.az(ChartExElements.t, ChartExDeserializer.bx);
            a.az(ChartExElements.u, ChartExDeserializer.by);
            a.az(ChartExElements.bu, ChartExDeserializer.fo);
            a.az(ChartExElements.b1, ChartExDeserializer.gd);
            a.az(ChartExElements.b, ChartExDeserializer.l);
            a.az(ChartExElements.h, ChartExDeserializer.al);
            a.az(ChartExElements.ax, ChartExDeserializer.dd);
            a.az(ChartExElements.b6, ChartExDeserializer.g4);
            a.az(ChartExElements.b8, ChartExDeserializer.g7);
            a.az(ChartExElements.i, ChartExDeserializer.am);
            a.az(ChartExElements.g, ChartExDeserializer.ak);
            a.az(ChartExElements.aj, ChartExDeserializer.cz);
            a.az(ChartExElements.n, ChartExDeserializer.bd);
            a.az(ChartExElements.a2, ChartExDeserializer.di);
            a.az(ChartExElements.as, ChartExDeserializer.c8);
            a.az(ChartExElements.aw, ChartExDeserializer.dc);
            a.az(ChartExElements.an, ChartExDeserializer.c3);
            a.az(ChartExElements.a1, ChartExDeserializer.dh);
            a.az(ChartExElements.a0, ChartExDeserializer.dg);
            a.az(ChartExElements.a3, ChartExDeserializer.dj);
            a.az(ChartExElements.az, ChartExDeserializer.df);
            a.az(ChartExElements.a, ChartExDeserializer.k);
            a.az(ChartExElements.ar, ChartExDeserializer.c7);
            a.az(ChartExElements.aq, ChartExDeserializer.c6);
            a.az(ChartExElements.ap, ChartExDeserializer.c5);
            a.az(ChartExElements.a5, ChartExDeserializer.dl);
            a.az(ChartExElements.q, ChartExDeserializer.bo);
            a.az(ChartExElements.a4, ChartExDeserializer.dk);
            a.az(ChartExElements.p, ChartExDeserializer.bn);
            a.az(ChartExElements.av, ChartExDeserializer.db);
            a.az(ChartExElements.at, ChartExDeserializer.c9);
            a.az(ChartExElements.au, ChartExDeserializer.da);
            a.az(ChartExElements.am, ChartExDeserializer.c2);
            a.az(ChartExElements.al, ChartExDeserializer.c1);
            a.az(ChartExElements.ak, ChartExDeserializer.c0);
            a.az(ChartExElements.ao, ChartExDeserializer.c4);
            a.az(ChartExElements.x, ChartExDeserializer.ca);
            a.az(ChartExElements.ay, ChartExDeserializer.de);
            a.az(ChartExElements.a7, ChartExDeserializer.d7);
            a.az(ChartExElements.j, ChartExDeserializer.a8);
            a.az(ChartExElements.ch, ChartExDeserializer.hu);
            a.az(ChartExElements.ce, ChartExDeserializer.hq);
            a.az(ChartExElements.bb, ChartExDeserializer.ex);
            a.az(ChartExElements.bj, ChartExDeserializer.e5);
            a.az(ChartExElements.bc, ChartExDeserializer.ey);
            a.az(ChartExElements.bk, ChartExDeserializer.e6);
            a.az(ChartExElements.b9, ChartExDeserializer.he);
            a.az(ChartExElements.cf, ChartExDeserializer.hr);
            a.az(DrawingMLMain.c0, ChartExDeserializer.bs);
            a.az(DrawingMLMain.hq, ChartExDeserializer.f1);
            a.az(DrawingMLMain.hc, ChartExDeserializer.fj);
            a.az(DrawingMLMain.ei, ChartExDeserializer.cy);
            a.az(DrawingMLMain.ay, ChartExDeserializer.m);
            a.az(DrawingMLMain.c3, ChartExDeserializer.bu);
            a.az(DrawingMLMain.hx, ChartExDeserializer.f8);
            a.az(DrawingMLMain.hh, ChartExDeserializer.fq);
            a.az(DrawingMLMain.a0, ChartExDeserializer.o);
            a.az(DrawingMLMain.az, ChartExDeserializer.n);
            a.az(DrawingMLMain.hl, ChartExDeserializer.fw);
            a.az(DrawingMLMain.c2, ChartExDeserializer.bt);
            a.az(DrawingMLMain.cj, ChartExDeserializer.be);
            a.az(DrawingMLMain.gn, ChartExDeserializer.e8);
            a.az(DrawingMLMain.f1, ChartExDeserializer.ei);
            a.az(DrawingMLMain.bg, ChartExDeserializer.aa);
            a.az(DrawingMLMain.hu, ChartExDeserializer.f6);
            a.az(DrawingMLMain.cw, ChartExDeserializer.bq);
            a.az(DrawingMLMain.ht, ChartExDeserializer.f4);
            a.az(ChartExElements.ah, ChartExDeserializer.cu);
            a.az(ChartExElements.a6, ChartExDeserializer.dy);
            a.az(ChartExElements.bs, ChartExDeserializer.fm);
            a.az(ChartExElements.bt, ChartExDeserializer.fn);
            a.az(ChartExElements.br, ChartExDeserializer.fi);
            a.az(ChartExElements.bq, ChartExDeserializer.fh);
            a.az(ChartExElements.z, ChartExDeserializer.cc);
            a.az(ChartExElements.y, ChartExDeserializer.cb);
            a.az(ChartExElements.ag, ChartExDeserializer.cr);
            a.az(ChartExElements.af, ChartExDeserializer.cq);
            a.az(ChartExElements.aa, ChartExDeserializer.cd);
        }
        static bb(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = new ChartExDeserializer(b);
            c.h = SerializationUtils.t(b.a8._d.uri);
            ChartExDeserializer.h0(b, c);
            let d = new CT_ChartSpaceEx();
            ChartExDeserializer.h0(b, d);
        }
        static bc(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(ChartExDeserializer.$, b);
            let d = ChartExDeserializer.c(CT_ChartSpaceEx.$, a);
            ChartExDeserializer.hz(b.a8._b7, d.l);
            d.a = b.a8._b3;
            if (c.d._ad == null) {
                c.d._ad = new ChartDeserializationCache();
            }
            c.d._ad.a.addItem(c.h, d);
        }
        static ba(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = new CT_ChartData();
            let d = ChartExDeserializer.c(CT_ChartSpaceEx.$, b);
            if (d == null) {
                return;
            }
            d.b = c;
            ChartExDeserializer.h0(b, c);
        }
        static a9(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = new CT_ChartEx();
            let d = ChartExDeserializer.c(CT_ChartSpaceEx.$, b);
            if (d == null) {
                return;
            }
            d.d = c;
            ChartExDeserializer.h0(b, c);
        }
        static g1(a) {
            let b = [CT_ChartSpaceEx.$, CT_ChartTitle.$, CT_PlotAreaEx.$, CT_PlotSurface.$, CT_Series.$, CT_DataPoint.$, CT_DataLabels.$, CT_DataLabel.$, CT_Axis.$, CT_AxisTitle.$, CT_AxisUnitsLabel.$, CT_Gridlines.$, CT_LegendEx.$, CT_FormatOverride.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = toNullable(ST_BlackWhiteMode_$type, null);
            let e = CT_ShapeProperties_DML.t(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ShapeProperties_DML();
                $ret.q = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(1570, f);
            }
            ChartExDeserializer.h0(c, f);
        }
        static hl(a) {
            let b = [CT_ChartSpaceEx.$, CT_ChartTitle.$, CT_DataLabels.$, CT_DataLabel.$, CT_Axis.$, CT_AxisTitle.$, CT_AxisUnitsLabel.$, CT_LegendEx.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_TextBody_DML();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1783, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static bh(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_ColorMapping.a(b);
            let d = ChartExDeserializer.c(CT_ChartSpaceEx.$, b);
            if (d == null) {
                return;
            }
            d.h = c;
            ChartExDeserializer.h0(b, c);
        }
        static cv(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = new CT_FormatOverrides();
            let d = ChartExDeserializer.c(CT_ChartSpaceEx.$, b);
            if (d == null) {
                return;
            }
            c.a = d.n;
            ChartExDeserializer.h0(b, c);
        }
        static fy(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = new CT_PrintSettingsEx();
            let d = ChartExDeserializer.c(CT_ChartSpaceEx.$, b);
            if (d == null) {
                return;
            }
            d.f = c;
            ChartExDeserializer.h0(b, c);
        }
        static cg(a) {
            let b = [CT_ChartSpaceEx.$, CT_ChartData.$, CT_Data.$, CT_ChartEx.$, CT_ChartTitle.$, CT_PlotAreaEx.$, CT_PlotAreaRegion.$, CT_PlotSurface.$, CT_Series.$, CT_DataPoint.$, CT_DataLabels.$, CT_DataLabel.$, CT_SeriesLayoutProperties.$, CT_Axis.$, CT_AxisTitle.$, CT_AxisUnits.$, CT_AxisUnitsLabel.$, CT_Gridlines.$, CT_TickMarks.$, CT_TickLabels.$, CT_LegendEx.$, CT_FormatOverride.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_ExtensionList();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(601, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static cf(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c;
            let d;
            let e = CT_ExternalDataEx.f(b, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_ExternalDataEx();
                $ret.c = d;
                return $ret;
            })());
            if (c.hasValue) {
                f.a = CT_Boolean.b(c.value);
            }
            let g = ChartExDeserializer.c(CT_ChartData.$, b);
            if (g == null) {
                return;
            }
            g.a = f;
        }
        static bv(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c;
            let d = CT_Data.h(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_Data();
                $ret.f = c;
                return $ret;
            })());
            let f = ChartExDeserializer.c(CT_ChartData.$, b);
            if (f == null) {
                return;
            }
            f.c.add(e);
            ChartExDeserializer.h0(b, e);
        }
        static ff(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Data.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_NumericDimension.g(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_NumericDimension();
                $ret.c = d;
                return $ret;
            })());
            c.a = f;
            ChartExDeserializer.h0(b, f);
        }
        static g5(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Data.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_StringDimension.g(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_StringDimension();
                $ret.c = d;
                return $ret;
            })());
            switch (d) {
                case 0:
                    if (c.b != null) {
                    }
                    c.b = f;
                    break;
                case 1:
                    if (c.c != null) {
                    }
                    c.c = f;
                    break;
            }
            ChartExDeserializer.h0(b, f);
        }
        static ck(a) {
            let b = [CT_NumericDimension.$, CT_StringDimension.$, CT_TextData.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_Formula.a(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(612, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static e9(a) {
            let b = [CT_NumericDimension.$, CT_StringDimension.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_Formula.a(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1907, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static en(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_NumericDimension.$, b);
            if (c == null) {
                return;
            }
            let d = 0;
            let e = null;
            let f = null;
            let g = CT_NumericLevel.j(a, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_NumericLevel();
                $ret.c = e;
                $ret.e = f;
                $ret.h = d;
                return $ret;
            })());
            c.e.add(h);
            ChartExDeserializer.h0(b, h);
        }
        static f4(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_NumericLevel.$, b);
            if (c == null) {
                return;
            }
            let d = CT_NumericValue.a(b);
            let e = a.ab.ad;
            let f;
            let g = ((() => { let h = tryParseNumber(e, f); f = h.p1; return h.ret; })()) == false;
            if (g) {
            }
            d.b = f;
            c.a.add(d);
        }
        static hi(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = null;
            let d = ChartExDeserializer.c(CT_Axis.$, b, false);
            if (d != null) {
                let e = new CT_AxisTitle();
                d.a = e;
                c = e;
            }
            else {
                let f = CT_ChartTitle.f(b);
                let g = ChartExDeserializer.c(CT_ChartEx.$, b, false);
                if (g != null) {
                    g.a = f;
                    c = f;
                }
            }
            if (c != null) {
                ChartExDeserializer.h0(b, c);
            }
        }
        static ft(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ChartEx.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PlotAreaEx();
            c.e = d;
            ChartExDeserializer.h0(b, d);
        }
        static ed(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ChartEx.$, b);
            if (c == null) {
                return;
            }
            let d = CT_LegendEx.a(b);
            c.c = d;
            ChartExDeserializer.h0(b, d);
        }
        static hj(a) {
            let b = [CT_ChartTitle.$, CT_Series.$, CT_AxisTitle.$, CT_AxisUnitsLabel.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_Text();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1776, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static hk(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Text.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextData();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static gf(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Text.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBody_DML();
            c.b = d;
            ChartExDeserializer.h0(b, d);
        }
        static ht(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextData.$, b);
            if (c == null) {
                return;
            }
            let d = a.ab.ad;
            c.c = d;
        }
        static au(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextBody_DML.$, b);
            if (c == null) {
                return;
            }
            let d = SerializationUtils.f(b);
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static ej(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextBody_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextListStyle_DML();
            c.b = d;
            ChartExDeserializer.h0(b, d);
        }
        static fl(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextBody_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextParagraph_DML();
            c.d.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static f3(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_PresetTextShape.f(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_PresetTextShape();
                $ret.a = d;
                return $ret;
            })());
            c.c = f;
            ChartExDeserializer.h0(b, f);
        }
        static fa(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextNoAutofit();
            c.j.a = d;
        }
        static fd(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_TextNormalAutofit.h(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_TextNormalAutofit();
                $ret.c = d;
                $ret.e = e;
                return $ret;
            })());
            c.j.b = g;
        }
        static gw(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextShapeAutofit();
            c.j.c = d;
        }
        static gm(a) {
            let b = [CT_TextBodyProperties_DML.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_Scene3D();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1423, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static gv(a) {
            let b = [CT_TextBodyProperties_DML.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_Shape3D.k(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1564, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static cs(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextBodyProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_FlatText.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_FlatText();
                $ret.b = d;
                return $ret;
            })());
            c.h.a = f;
        }
        static ch(a) {
            let b = [CT_TextBodyProperties_DML.$, CT_Scene3D.$, CT_Backdrop.$, CT_Shape3D.$, CT_TextListStyle_DML.$, CT_TextParagraphProperties_DML.$, CT_Blip_DML.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_Hyperlink.$, CT_ShapeProperties_DML.$, CT_ColorMapping.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_OfficeArtExtensionList();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(601, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static ab(a) {
            let b = [CT_PresetTextShape.$, CT_CustomGeometry2D.$, CT_PresetGeometry2D.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_GeomGuideList();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(80, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static cx(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeomGuideList.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeomGuide();
            c.b.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static a7(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Scene3D.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Camera.a(b);
            c.c = d;
            ChartExDeserializer.h0(b, d);
        }
        static ee(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Scene3D.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_LightRig.h(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = new CT_LightRig();
            c.e = g;
            ChartExDeserializer.h0(b, g);
        }
        static ae(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Scene3D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Backdrop();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static gg(a) {
            let b = [CT_Camera.$, CT_LightRig.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d, e, f;
            let g = CT_SphereCoords.h(c, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_SphereCoords();
                $ret.a = d;
                $ret.c = e;
                $ret.e = f;
                return $ret;
            })());
            let i = SerializationUtils.j(c, b);
            if (i != null) {
                i.setProperty(1370, h);
            }
        }
        static z(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Backdrop.$, b);
            if (c == null) {
                return;
            }
            let d, e, f;
            let g = CT_Point3D.h(b, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_Point3D();
                $ret.a = d;
                $ret.c = e;
                $ret.e = f;
                return $ret;
            })());
            c.c = h;
        }
        static fc(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Backdrop.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Vector3D.a(b);
            c.e = d;
        }
        static hs(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Backdrop.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Vector3D.a(b);
            c.g = d;
        }
        static ah(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Shape3D.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Bevel.a(b);
            c.c = d;
        }
        static ag(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Shape3D.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Bevel.a(b);
            c.a = d;
        }
        static cj(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Shape3D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.g = d;
            ChartExDeserializer.h0(b, d);
        }
        static bm(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Shape3D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.e = d;
            ChartExDeserializer.h0(b, d);
        }
        static go(a) {
            let b = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_ScRgbColor.e(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1431, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static g3(a) {
            let b = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_SRgbColor_DML.e(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1586, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static d3(a) {
            let b = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_HslColor.e(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(800, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static g9(a) {
            let b = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_SystemColor.e(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1652, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static gn(a) {
            let b = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_SchemeColor_DML.f(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1429, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static fz(a) {
            let b = [CT_Color_DML.$, CT_AlphaInverseEffect.$, CT_SolidColorFillProperties.$, CT_GradientStop.$, CT_GlowEffect.$, CT_InnerShadowEffect.$, CT_OuterShadowEffect.$, CT_PresetShadowEffect.$, CT_ColorReplaceEffect.$, CT_DuotoneEffect.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_PresetColor();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1272, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static hh(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_PositiveFixedPercentage();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1744, d);
            }
        }
        static gr(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_PositiveFixedPercentage();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1459, d);
            }
        }
        static bk(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_ComplementTransform();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(326, d);
            }
        }
        static d9(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_InverseTransform();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(845, d);
            }
        }
        static dp(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_GrayscaleTransform();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(731, d);
            }
        }
        static p(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.p(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(31, d);
            }
        }
        static w(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.f(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(38, d);
            }
        }
        static u(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.q(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(36, d);
            }
        }
        static d4(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.o(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(802, d);
            }
        }
        static d6(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.b(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(804, d);
            }
        }
        static d5(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.q(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(803, d);
            }
        }
        static gj(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1407, d);
            }
        }
        static gl(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1409, d);
            }
        }
        static gk(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1408, d);
            }
        }
        static ek(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(941, d);
            }
        }
        static em(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(943, d);
            }
        }
        static el(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(942, d);
            }
        }
        static f9(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1331, d);
            }
        }
        static gb(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1333, d);
            }
        }
        static ga(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1332, d);
            }
        }
        static dr(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(733, d);
            }
        }
        static dt(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(735, d);
            }
        }
        static ds(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(734, d);
            }
        }
        static aq(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(131, d);
            }
        }
        static as(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(133, d);
            }
        }
        static ar(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = DMLUtils.l(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(132, d);
            }
        }
        static cw(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_GammaTransform();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(695, d);
            }
        }
        static ea(a) {
            let b = [CT_ScRgbColor.$, CT_SRgbColor_DML.$, CT_HslColor.$, CT_SystemColor.$, CT_SchemeColor_DML.$, CT_PresetColor.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_InverseGammaTransform();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(846, d);
            }
        }
        static ce(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_OfficeArtExtensionList.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_OfficeArtExtension.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_OfficeArtExtension();
                $ret.b = d;
                return $ret;
            })());
            c.b.b.add(f);
        }
        static b1(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.a = c;
            ChartExDeserializer.h0(b, c);
        }
        static eo(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.b = c;
            ChartExDeserializer.h0(b, c);
        }
        static ep(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.c = c;
            ChartExDeserializer.h0(b, c);
        }
        static eq(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.d = c;
            ChartExDeserializer.h0(b, c);
        }
        static er(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.e = c;
            ChartExDeserializer.h0(b, c);
        }
        static es(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.f = c;
            ChartExDeserializer.h0(b, c);
        }
        static et(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.g = c;
            ChartExDeserializer.h0(b, c);
        }
        static eu(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.h = c;
            ChartExDeserializer.h0(b, c);
        }
        static ev(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.i = c;
            ChartExDeserializer.h0(b, c);
        }
        static ew(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = CT_TextParagraphProperties_DML.o(b);
            let d = ChartExDeserializer.c(CT_TextListStyle.$, b);
            if (d == null) {
                return;
            }
            d.j = c;
            ChartExDeserializer.h0(b, c);
        }
        static eh(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextSpacing();
            c.p = d;
            ChartExDeserializer.h0(b, d);
        }
        static gy(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextSpacing();
            c.r = d;
            ChartExDeserializer.h0(b, d);
        }
        static gx(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextSpacing();
            c.q = d;
            ChartExDeserializer.h0(b, d);
        }
        static a0(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBulletColorFollowText();
            c.v.b = d;
        }
        static az(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.v.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static a6(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBulletSizeFollowText();
            c.x.a = d;
        }
        static a4(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextBulletSizePercent.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextBulletSizePercent();
                $ret.a = d;
                return $ret;
            })());
            c.x.b = f;
        }
        static a5(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextBulletSizePoint.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextBulletSizePoint();
                $ret.a = d;
                return $ret;
            })());
            c.x.c = f;
        }
        static a2(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBulletTypefaceFollowText();
            c.z.a = d;
        }
        static a1(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.b7);
            c.z.b = d;
        }
        static a3(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextNoBullet();
            c.t.d = d;
        }
        static aw(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_TextAutonumberBullet.g(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_TextAutonumberBullet();
                $ret.a = d;
                $ret.d = e;
                return $ret;
            })());
            c.t.a = g;
        }
        static ay(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextCharBullet.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextCharBullet();
                $ret.a = d;
                return $ret;
            })());
            c.t.c = f;
        }
        static ax(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextBlipBullet();
            c.t.b = d;
            ChartExDeserializer.h0(b, d);
        }
        static hc(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_TextTabStopList();
                $ret.e = new List$1(CT_TextTabStop.$, 0);
                return $ret;
            })());
            c.aa = CT_TextTabStopList.c(d);
            ChartExDeserializer.h0(b, d);
        }
        static b2(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraphProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = CT_TextCharacterProperties_DML.z(b, DrawingMLMain.c6);
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static gz(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextSpacing.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextSpacingPercent.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextSpacingPercent();
                $ret.a = d;
                return $ret;
            })());
            c.a = f;
        }
        static g0(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextSpacing.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TextSpacingPoint.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TextSpacingPoint();
                $ret.a = d;
                return $ret;
            })());
            c.b = f;
        }
        static ao(a) {
            let b = [CT_TextBlipBullet.$, CT_BlipFillProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_Blip_DML.n(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(127, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static q(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_AlphaBiLevelEffect.d(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AlphaBiLevelEffect();
                $ret.a = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(32, f);
            }
        }
        static r(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_AlphaCeilingEffect();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(33, d);
            }
        }
        static s(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_AlphaFloorEffect();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(34, d);
            }
        }
        static t(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_AlphaInverseEffect();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(35, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static v(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_AlphaModulateFixedEffect.e(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AlphaModulateFixedEffect();
                $ret.b = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(37, f);
            }
        }
        static y(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_AlphaReplaceEffect.d(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AlphaReplaceEffect();
                $ret.a = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(40, f);
            }
        }
        static aj(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_BiLevelEffect.d(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_BiLevelEffect();
                $ret.a = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(117, f);
            }
        }
        static at(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$, CT_EffectList.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e;
            let f = CT_BlurEffect.h(c, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_BlurEffect();
                $ret.e = d;
                $ret.c = e;
                return $ret;
            })());
            let h = SerializationUtils.j(c, b);
            if (h != null) {
                h.setProperty(134, g);
            }
        }
        static bf(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_ColorChangeEffect.i(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ColorChangeEffect();
                $ret.f = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(279, f);
            }
            ChartExDeserializer.h0(c, f);
        }
        static bi(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_ColorReplaceEffect();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(285, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static b4(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_DuotoneEffect();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(546, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static cn(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$, CT_EffectList.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_FillOverlayEffect.f(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_FillOverlayEffect();
                $ret.c = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(633, f);
            }
            ChartExDeserializer.h0(c, f);
        }
        static dq(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_GrayscaleEffect();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(732, d);
            }
        }
        static d2(a) {
            let b = [CT_Blip_DML.$, CT_EffectContainer.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d, e, f;
            let g = CT_HSLEffect.k(c, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_HSLEffect();
                $ret.d = d;
                $ret.h = e;
                $ret.f = f;
                return $ret;
            })());
            let i = SerializationUtils.j(c, b);
            if (i != null) {
                i.setProperty(799, h);
            }
        }
        static bl(a) {
            let b = [CT_AlphaModulateEffect.$, CT_EffectContainer.$, CT_BlendEffect.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_EffectContainer.a(a);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(344, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static b6(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_EffectReference.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_EffectReference();
                $ret.a = d;
                return $ret;
            })());
            c.c.p = f;
        }
        static x(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_AlphaOutsetEffect.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AlphaOutsetEffect();
                $ret.b = d;
                return $ret;
            })());
            c.c.g = f;
        }
        static an(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_BlendEffect.f(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_BlendEffect();
                $ret.c = d;
                return $ret;
            })());
            c.c.j = f;
            ChartExDeserializer.h0(b, f);
        }
        static cm(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_FillEffect();
            c.c.q = d;
            ChartExDeserializer.h0(b, d);
        }
        static dm(a) {
            let b = [CT_EffectContainer.$, CT_EffectList.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_GlowEffect.g(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_GlowEffect();
                $ret.e = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(724, f);
            }
            ChartExDeserializer.h0(c, f);
        }
        static d8(a) {
            let b = [CT_EffectContainer.$, CT_EffectList.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e;
            let f;
            let g = CT_InnerShadowEffect.m(c, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_InnerShadowEffect();
                $ret.g = d;
                $ret.i = f;
                $ret.k = e;
                return $ret;
            })());
            let i = SerializationUtils.j(c, b);
            if (i != null) {
                i.setProperty(830, h);
            }
            ChartExDeserializer.h0(c, h);
        }
        static fk(a) {
            let b = [CT_EffectContainer.$, CT_EffectList.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_OuterShadowEffect.d(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1142, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static f2(a) {
            let b = [CT_EffectContainer.$, CT_EffectList.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e;
            let f;
            let g = CT_PresetShadowEffect.l(c, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_PresetShadowEffect();
                $ret.h = f;
                $ret.j = e;
                $ret.d = d;
                return $ret;
            })());
            let i = SerializationUtils.j(c, b);
            if (i != null) {
                i.setProperty(1275, h);
            }
            ChartExDeserializer.h0(c, h);
        }
        static gc(a) {
            let b = [CT_EffectContainer.$, CT_EffectList.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_ReflectionEffect.a(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1338, d);
            }
        }
        static ge(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d, e;
            let f = CT_RelativeOffsetEffect.h(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_RelativeOffsetEffect();
                $ret.c = d;
                $ret.e = e;
                return $ret;
            })());
            c.c.aa = g;
        }
        static gt(a) {
            let b = [CT_EffectContainer.$, CT_EffectList.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_SoftEdgesEffect.d(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_SoftEdgesEffect();
                $ret.a = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(1551, f);
            }
        }
        static hy(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_EffectContainer.$, b);
            if (c == null) {
                return;
            }
            let d = CT_TransformEffect.a(b);
            c.c.ad = d;
        }
        static fb(a) {
            let b = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_NoFillProperties();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1063, d);
            }
        }
        static gu(a) {
            let b = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_SolidColorFillProperties();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1553, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static dn(a) {
            let b = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e;
            let f = CT_GradientFillProperties.l(c, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_GradientFillProperties();
                $ret.g = d;
                $ret.i = e;
                return $ret;
            })());
            let h = SerializationUtils.j(c, b);
            if (h != null) {
                h.setProperty(725, g);
            }
            ChartExDeserializer.h0(c, g);
        }
        static ap(a) {
            let b = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_BlipFillProperties_DML.e(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(128, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static fr(a) {
            let b = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_LineProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_PatternFillProperties.h(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_PatternFillProperties();
                $ret.e = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(1174, f);
            }
            ChartExDeserializer.h0(c, f);
        }
        static du(a) {
            let b = [CT_FillEffect.$, CT_FillOverlayEffect.$, CT_TextCharacterProperties_DML.$, CT_TextUnderlineFillGroupWrapper.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_GroupFillProperties();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(752, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static dw(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ((() => {
                let $ret = new CT_GradientStopList();
                $ret.c = new List$1(CT_GradientStop.$, 0);
                return $ret;
            })());
            let d = ChartExDeserializer.c(CT_GradientFillProperties.$, b);
            if (d == null) {
                return;
            }
            d.e = CT_GradientStopList.e(c);
            ChartExDeserializer.h0(b, c);
        }
        static ef(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c;
            let d;
            let e = CT_LinearShadeProperties.f(b, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_LinearShadeProperties();
                $ret.a = c;
                $ret.c = d;
                return $ret;
            })());
            let g = ChartExDeserializer.c(CT_GradientFillProperties.$, b);
            if (g == null) {
                return;
            }
            g.b.a = f;
        }
        static fp(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GradientFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_PathShadeProperties.f(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_PathShadeProperties();
                $ret.c = d;
                return $ret;
            })());
            c.b.b = f;
            ChartExDeserializer.h0(b, f);
        }
        static hg(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = DMLUtils.u(b);
            let d = ChartExDeserializer.c(CT_GradientFillProperties.$, b);
            if (d == null) {
                return;
            }
            d.c = c;
        }
        static dv(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = new ST_PositiveFixedPercentage();
            let d = CT_GradientStop.e(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_GradientStop();
                $ret.d = c;
                return $ret;
            })());
            let f = ChartExDeserializer.c(CT_GradientStopList.$, b);
            if (f == null) {
                return;
            }
            f.c.add(e);
            ChartExDeserializer.h0(b, e);
        }
        static cp(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = DMLUtils.u(b);
            let d = ChartExDeserializer.c(CT_PathShadeProperties.$, b);
            if (d == null) {
                return;
            }
            d.a = c;
        }
        static g2(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = DMLUtils.u(b);
            let d = ChartExDeserializer.c(CT_BlipFillProperties_DML.$, b);
            if (d == null) {
                return;
            }
            d.a = c;
        }
        static hf(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = DMLUtils.w(b);
            let d = ChartExDeserializer.c(CT_BlipFillProperties_DML.$, b);
            if (d == null) {
                return;
            }
            d.g.b = c;
        }
        static g6(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_BlipFillProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_StretchInfoProperties();
            c.g.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static co(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_StretchInfoProperties.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.u(b);
            c.a = d;
        }
        static cl(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = new CT_Color_DML();
            let d = ChartExDeserializer.c(CT_PatternFillProperties.$, b);
            if (d == null) {
                return;
            }
            d.c = c;
            ChartExDeserializer.h0(b, c);
        }
        static ai(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_PatternFillProperties.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static bg(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ColorChangeEffect.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static bj(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ColorChangeEffect.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.c = d;
            ChartExDeserializer.h0(b, d);
        }
        static hb(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextTabStopList.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_TextTabStop.f(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_TextTabStop();
                $ret.a = e;
                $ret.c = d;
                return $ret;
            })());
            c.e.add(g);
        }
        static eg(a) {
            let b = [CT_TextCharacterProperties_DML.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_LineProperties_DML.i(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(918, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static b8(a) {
            let b = [CT_TextCharacterProperties_DML.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_EffectList();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(560, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static b7(a) {
            let b = [CT_TextCharacterProperties_DML.$, CT_ShapeProperties_DML.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_EffectContainer.a(a);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(558, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static dz(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Color_DML();
            c.w = d;
            ChartExDeserializer.h0(b, d);
        }
        static hp(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextUnderlineLineFollowText();
            c.ah.b = d;
        }
        static ho(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = CT_LineProperties_DML.i(b);
            c.ah.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static hn(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextUnderlineFillFollowText();
            c.af.a = d;
        }
        static hm(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextUnderlineFillGroupWrapper();
            c.af.b = d;
            ChartExDeserializer.h0(b, d);
        }
        static eb(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.fr);
            c.c = d;
        }
        static b5(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.df);
            c.b = d;
        }
        static bp(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.cu);
            c.a = d;
        }
        static g8(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.v(b, DrawingMLMain.i8);
            c.ak = d;
        }
        static d0(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.h(b, DrawingMLMain.e3);
            c.ai = d;
            ChartExDeserializer.h0(b, d);
        }
        static d1(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextCharacterProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.h(b, DrawingMLMain.e4);
            c.aj = d;
            ChartExDeserializer.h0(b, d);
        }
        static f0(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.t(b);
            c.l.b = d;
        }
        static br(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_DashStopList();
            c.l.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static gh(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_LineJoinRound();
            c.p.c = d;
        }
        static af(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_LineJoinBevel();
            c.p.a = d;
        }
        static e7(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.j(b);
            c.p.b = d;
        }
        static dx(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.i(b);
            c.a = d;
        }
        static hd(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_LineProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.i(b);
            c.b = d;
        }
        static b3(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_DashStopList.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.d(b);
            c.b.add(d);
        }
        static gs(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Hyperlink.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.e(b);
            c.a = d;
        }
        static fx(a) {
            let b = [CT_TextParagraph_DML.$, CT_TextField.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_TextParagraphProperties_DML.o(c);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1154, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static f7(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraph_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_RegularTextRun_DML();
            c.setProperty(1297, d);
            ChartExDeserializer.h0(b, d);
        }
        static av(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraph_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TextLineBreak();
            c.setProperty(164, d);
            ChartExDeserializer.h0(b, d);
        }
        static ct(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraph_DML.$, b);
            if (c == null) {
                return;
            }
            let d, e;
            let f = CT_TextField.l(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_TextField();
                $ret.e = d;
                $ret.j = e;
                return $ret;
            })());
            c.setProperty(651, g);
            ChartExDeserializer.h0(b, g);
        }
        static b9(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_TextParagraph_DML.$, b);
            if (c == null) {
                return;
            }
            let d = CT_TextCharacterProperties_DML.z(b, DrawingMLMain.dn);
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static gi(a) {
            let b = [CT_RegularTextRun_DML.$, CT_TextLineBreak.$, CT_TextField.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = CT_TextCharacterProperties_DML.z(c, DrawingMLMain.h8);
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1305, d);
            }
            ChartExDeserializer.h0(c, d);
        }
        static ha(a) {
            let b = [CT_RegularTextRun_DML.$, CT_TextField.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = a.ab.ad;
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1655, d);
            }
        }
        static fu(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_PlotAreaEx.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PlotAreaRegion();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static ac(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_PlotAreaEx.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_Axis.ac(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_Axis();
                $ret.aa = d;
                $ret.w = e;
                return $ret;
            })());
            c.d.add(g);
            ChartExDeserializer.h0(b, g);
        }
        static fv(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_PlotAreaRegion.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PlotSurface();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static gq(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_PlotAreaRegion.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Series.d(b);
            c.c.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static hw(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Series.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ValueColors();
            c.k = d;
            ChartExDeserializer.h0(b, d);
        }
        static hv(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Series.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_ValueColorPositions.k(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ValueColorPositions();
                $ret.h = d;
                return $ret;
            })());
            c.i = f;
            ChartExDeserializer.h0(b, f);
        }
        static b0(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Series.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_DataPoint.f(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_DataPoint();
                $ret.d = d;
                return $ret;
            })());
            c.r.add(f);
            ChartExDeserializer.h0(b, f);
        }
        static bz(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Series.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_DataLabels.k(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_DataLabels();
                $ret.g = d;
                return $ret;
            })());
            c.c = f;
            ChartExDeserializer.h0(b, f);
        }
        static bw(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Series.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_DataId.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_DataId();
                $ret.b = d;
                return $ret;
            })());
            c.a = f;
        }
        static ec(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Series.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_SeriesLayoutProperties();
            c.e = d;
            ChartExDeserializer.h0(b, d);
        }
        static ad(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Series.$, b);
            if (c == null) {
                return;
            }
            let d = ST_AxisId.c(b);
            c.q.add(d);
        }
        static e4(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ValueColors.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_SolidColorFillProperties();
            c.e = d;
            ChartExDeserializer.h0(b, d);
        }
        static e2(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ValueColors.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_SolidColorFillProperties();
            c.c = d;
            ChartExDeserializer.h0(b, d);
        }
        static e0(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ValueColors.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_SolidColorFillProperties();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static e3(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ValueColorPositions.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ValueColorEndPosition();
            c.c = d;
            ChartExDeserializer.h0(b, d);
        }
        static e1(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ValueColorPositions.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ValueColorMiddlePosition();
            c.e = d;
            ChartExDeserializer.h0(b, d);
        }
        static ez(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ValueColorPositions.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ValueColorEndPosition();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static ci(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ValueColorEndPosition.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ExtremeValueColorPosition();
            c.a = d;
        }
        static fe(a) {
            let b = [CT_ValueColorEndPosition.$, CT_ValueColorMiddlePosition.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_NumberColorPosition.d(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_NumberColorPosition();
                $ret.a = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(1912, f);
            }
        }
        static fs(a) {
            let b = [CT_ValueColorEndPosition.$, CT_ValueColorMiddlePosition.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e = CT_PercentageColorPosition.d(c, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_PercentageColorPosition();
                $ret.a = d;
                return $ret;
            })());
            let g = SerializationUtils.j(c, b);
            if (g != null) {
                g.setProperty(1913, f);
            }
        }
        static fg(a) {
            let b = [CT_DataLabels.$, CT_DataLabel.$, CT_Axis.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d;
            let e;
            let f = CT_NumberFormat.f(c, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_NumberFormat();
                $ret.c = d;
                $ret.a = e;
                return $ret;
            })());
            let h = SerializationUtils.j(c, b);
            if (h != null) {
                h.setProperty(1088, g);
            }
        }
        static hx(a) {
            let b = [CT_DataLabels.$, CT_DataLabel.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = ChartExDeserializer.c(CT_SeriesLayoutProperties.$, c, false);
            if (d != null) {
                let e = CT_SeriesElementVisibilities.a(c);
                d.i = e;
                return;
            }
            let f = SerializationUtils.j(c, b);
            if (f == null) {
                return;
            }
            let g;
            let h;
            let i;
            let j = CT_DataLabelVisibilities.h(c, g, h, i);
            g = j.p1;
            h = j.p2;
            i = j.p3;
            let k = ((() => {
                let $ret = new CT_DataLabelVisibilities();
                $ret.e = i;
                $ret.a = h;
                $ret.c = g;
                return $ret;
            })());
            f.setProperty(1844, k);
        }
        static gp(a) {
            let b = [CT_DataLabels.$, CT_DataLabel.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = a.ab.ad;
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1445, d);
            }
        }
        static bx(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_DataLabels.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_DataLabel.j(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_DataLabel();
                $ret.i = d;
                $ret.g = e;
                return $ret;
            })());
            c.i.add(g);
            ChartExDeserializer.h0(b, g);
        }
        static by(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c;
            let d = CT_DataLabelHidden.d(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_DataLabelHidden();
                $ret.b = c;
                return $ret;
            })());
            let f = ChartExDeserializer.c(CT_DataLabels.$, b);
            if (f == null) {
                return;
            }
            f.j.add(e);
        }
        static fo(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_SeriesLayoutProperties.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_ParentLabelLayout.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_ParentLabelLayout();
                $ret.a = d;
                return $ret;
            })());
            c.e = f;
        }
        static gd(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_SeriesLayoutProperties.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_RegionLabelLayout.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_RegionLabelLayout();
                $ret.a = d;
                return $ret;
            })());
            c.g = f;
        }
        static l(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_SeriesLayoutProperties.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Aggregation();
            c.a = d;
        }
        static al(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_SeriesLayoutProperties.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Binning.c(b);
            c.b = d;
            ChartExDeserializer.h0(b, d);
        }
        static dd(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_SeriesLayoutProperties.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Geography.c(b);
            c.c = d;
            ChartExDeserializer.h0(b, d);
        }
        static g4(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_SeriesLayoutProperties.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_Statistics.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_Statistics();
                $ret.a = d;
                return $ret;
            })());
            c.k = f;
        }
        static g7(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_SeriesLayoutProperties.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Subtotals();
            c.m = d;
            ChartExDeserializer.h0(b, d);
        }
        static am(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Binning.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = CT_Binning.n(b, d);
            d = e.p1;
            if (d.hasValue) {
                c.a = ((() => {
                    let $ret = new CT_Double();
                    $ret.f = d.value;
                    return $ret;
                })());
            }
        }
        static ak(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Binning.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(Number_$type, null);
            let e = CT_Binning.m(b, d);
            d = e.p1;
            if (d.hasValue) {
                c.b = ((() => {
                    let $ret = new CT_UnsignedInt();
                    $ret.g = d.value;
                    return $ret;
                })());
            }
        }
        static cz(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c;
            let d = CT_GeoCache.f(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_GeoCache();
                $ret.c = c;
                return $ret;
            })());
            let f = ChartExDeserializer.c(CT_Geography.$, b);
            if (f == null) {
                return;
            }
            f.a = e;
            ChartExDeserializer.h0(b, e);
        }
        static bd(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoCache.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Clear();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static di(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Clear.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoLocationQueryResults();
            d.a = c.d;
            ChartExDeserializer.h0(b, d);
        }
        static c8(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Clear.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoDataEntityQueryResults();
            d.a = c.b;
            ChartExDeserializer.h0(b, d);
        }
        static dc(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Clear.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoDataPointToEntityQueryResults();
            d.a = c.c;
            ChartExDeserializer.h0(b, d);
        }
        static c3(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Clear.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoChildEntitiesQueryResults();
            d.a = c.a;
            ChartExDeserializer.h0(b, d);
        }
        static dh(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoLocationQueryResults.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoLocationQueryResult();
            c.a.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static dg(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoLocationQueryResult.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoLocationQuery();
            c.a = d;
        }
        static dj(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoLocationQueryResult.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoLocations();
            c.c = d;
            ChartExDeserializer.h0(b, d);
        }
        static df(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoLocations.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoLocation();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static k(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoLocation.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Address.a(b);
            c.a = d;
        }
        static c7(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoDataEntityQueryResults.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoDataEntityQueryResult();
            c.a.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static c6(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoDataEntityQueryResult.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = CT_GeoDataEntityQuery.f(b, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_GeoDataEntityQuery();
                $ret.c = e;
                $ret.a = d;
                return $ret;
            })());
            c.c = g;
        }
        static c5(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoDataEntityQueryResult.$, b);
            if (c == null) {
                return;
            }
            let d = CT_GeoData.a(b);
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static dl(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoData.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoPolygons();
            d.a = c.d;
            ChartExDeserializer.h0(b, d);
        }
        static bo(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoData.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Copyrights();
            d.a = c.b;
            ChartExDeserializer.h0(b, d);
        }
        static dk(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoPolygons.$, b);
            if (c == null) {
                return;
            }
            let d = CT_GeoPolygon.a(b);
            c.a.add(d);
        }
        static bn(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Copyrights.$, b);
            if (c == null) {
                return;
            }
            let d = ChartExDeserializer.g(b);
            c.a.add(d);
        }
        static db(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoDataPointToEntityQueryResults.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoDataPointToEntityQueryResult();
            c.a.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static c9(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoDataPointToEntityQueryResult.$, b);
            if (c == null) {
                return;
            }
            let d = CT_GeoDataPointQuery.a(b);
            c.a = d;
        }
        static da(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoDataPointToEntityQueryResult.$, b);
            if (c == null) {
                return;
            }
            let d = CT_GeoDataPointToEntityQuery.a(b);
            c.c = d;
        }
        static c2(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoChildEntitiesQueryResults.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoChildEntitiesQueryResult();
            c.a.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static c1(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c;
            let d = CT_GeoChildEntitiesQuery.e(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_GeoChildEntitiesQuery();
                $ret.b = c;
                return $ret;
            })());
            let f = ChartExDeserializer.c(CT_GeoChildEntitiesQueryResult.$, b);
            if (f == null) {
                return;
            }
            f.a = e;
            ChartExDeserializer.h0(b, e);
        }
        static c0(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoChildEntitiesQueryResult.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoChildEntities();
            d.a = c.c;
            ChartExDeserializer.h0(b, d);
        }
        static c4(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoChildEntitiesQuery.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeoChildTypes();
            d.a = c.a;
            ChartExDeserializer.h0(b, d);
        }
        static ca(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoChildTypes.$, b);
            if (c == null) {
                return;
            }
            let d = ChartExDeserializer.g(b);
            let e;
            if (((() => { let f = EnumUtil.tryParse$1(ST_EntityType_$type, d, true, e); e = f.p2; return f.ret; })()) == false) {
                e = 11;
            }
            c.a.add(e);
        }
        static de(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_GeoChildEntities.$, b);
            if (c == null) {
                return;
            }
            let d = CT_GeoHierarchyEntity.a(b);
            c.a.add(d);
        }
        static d7(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Subtotals.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Subtotals.b(b);
            if (d.hasValue) {
                c.a.add(d.value);
            }
        }
        static a8(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Axis.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_CategoryAxisScaling.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_CategoryAxisScaling();
                $ret.a = d;
                return $ret;
            })());
            c.e = f;
        }
        static hu(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Axis.$, b);
            if (c == null) {
                return;
            }
            let d = CT_ValueAxisScaling.a(b);
            c.r = d;
        }
        static hq(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Axis.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_AxisUnits.g(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_AxisUnits();
                $ret.d = d;
                return $ret;
            })());
            c.c = f;
            ChartExDeserializer.h0(b, f);
        }
        static ex(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Axis.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Gridlines();
            c.f = d;
            ChartExDeserializer.h0(b, d);
        }
        static e5(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Axis.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Gridlines();
            c.h = d;
            ChartExDeserializer.h0(b, d);
        }
        static ey(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c;
            let d = CT_TickMarks.e(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_TickMarks();
                $ret.b = c;
                return $ret;
            })());
            let f = ChartExDeserializer.c(CT_Axis.$, b);
            if (f == null) {
                return;
            }
            f.n = e;
            ChartExDeserializer.h0(b, e);
        }
        static e6(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Axis.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_TickMarks.e(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_TickMarks();
                $ret.b = d;
                return $ret;
            })());
            c.p = f;
            ChartExDeserializer.h0(b, f);
        }
        static he(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Axis.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_TickLabels();
            c.l = d;
            ChartExDeserializer.h0(b, d);
        }
        static hr(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_AxisUnits.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_AxisUnitsLabel();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static bs(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ShapeProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_CustomGeometry2D();
            c.n.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static f1(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ShapeProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PresetGeometry2D();
            c.n.b = d;
            ChartExDeserializer.h0(b, d);
        }
        static fj(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Transform2D.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.m(b);
            c.a = d;
        }
        static cy(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_GeomGuideList();
            c.d = d;
            ChartExDeserializer.h0(b, d);
        }
        static m(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_AdjustHandleList();
            c.a = d;
            ChartExDeserializer.h0(b, d);
        }
        static bu(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ConnectionSiteList();
            c.b = d;
            ChartExDeserializer.h0(b, d);
        }
        static f8(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.g(b);
            c.e = d;
        }
        static fq(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_CustomGeometry2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DList();
            c.f = d;
            ChartExDeserializer.h0(b, d);
        }
        static o(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_AdjustHandleList.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_XYAdjustHandle();
            c.b.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static n(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_AdjustHandleList.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_PolarAdjustHandle();
            c.b.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static fw(a) {
            let b = [CT_XYAdjustHandle.$, CT_PolarAdjustHandle.$, CT_ConnectionSite.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_AdjPoint2D();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1241, d);
            }
        }
        static bt(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ConnectionSiteList.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_ConnectionSite();
            c.b.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static be(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DClose();
            c.b.add(d);
        }
        static e8(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DMoveTo();
            c.b.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static ei(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DLineTo();
            c.b.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static aa(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DArcTo();
            c.b.add(d);
        }
        static f6(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DQuadBezierTo();
            c.b.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static bq(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_Path2D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Path2DCubicBezierTo();
            c.b.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static f5(a) {
            let b = [CT_Path2DMoveTo.$, CT_Path2DLineTo.$, CT_Path2DQuadBezierTo.$, CT_Path2DCubicBezierTo.$];
            let c = typeCast(ObjectModelChartExPartManager.$, a);
            let d = new CT_AdjPoint2D();
            let e = SerializationUtils.j(c, b);
            if (e != null) {
                e.setProperty(1277, d);
            }
        }
        static cu(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_FormatOverrides.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_FormatOverride();
            c.a.add(d);
            ChartExDeserializer.h0(b, d);
        }
        static dy(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_PrintSettings.$, b);
            if (c == null) {
                return;
            }
            let d, e, f;
            let g = CT_HeaderFooter_Chart.w(b, d, e, f);
            d = g.p1;
            e = g.p2;
            f = g.p3;
            let h = ((() => {
                let $ret = new CT_HeaderFooter_Chart();
                $ret.a = d;
                $ret.h = e;
                $ret.f = f;
                return $ret;
            })());
            c.a = h;
            ChartExDeserializer.h0(b, h);
        }
        static fm(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_PrintSettings.$, b);
            if (c == null) {
                return;
            }
            let d = CT_PageMargins_Chart.a(b);
            c.c = d;
        }
        static fn(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_PrintSettingsEx.$, b);
            if (c == null) {
                return;
            }
            let d = CT_PageSetup.a(b);
            c.j = d;
        }
        static fi(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_HeaderFooter.$, b);
            if (c == null) {
                return;
            }
            let d = ChartExDeserializer.g(b);
            c.t = d;
        }
        static fh(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_HeaderFooter.$, b);
            if (c == null) {
                return;
            }
            let d = ChartExDeserializer.g(b);
            c.r = d;
        }
        static cc(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_HeaderFooter.$, b);
            if (c == null) {
                return;
            }
            let d = ChartExDeserializer.g(b);
            c.l = d;
        }
        static cb(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_HeaderFooter.$, b);
            if (c == null) {
                return;
            }
            let d = ChartExDeserializer.g(b);
            c.j = d;
        }
        static cr(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_HeaderFooter.$, b);
            if (c == null) {
                return;
            }
            let d = ChartExDeserializer.g(b);
            c.p = d;
        }
        static cq(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_HeaderFooter.$, b);
            if (c == null) {
                return;
            }
            let d = ChartExDeserializer.g(b);
            c.n = d;
        }
        static cd(a) {
            let b = typeCast(ObjectModelChartExPartManager.$, a);
            let c = ChartExDeserializer.c(CT_ExtensionList.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Extension();
            c.e.add(d);
        }
        static c($t, a, b = true) {
            return SerializationUtils.i($t, a, b);
        }
        static h0(a, b) {
            a.s.k(b);
        }
        static f(a, b = true) {
            let c = a.ab.ad;
            let d;
            if (((() => { let e = tryParseNumber(c, d); d = e.p1; return e.ret; })()) == false) {
                if (b) {
                }
            }
            return d;
        }
        static i(a, b = true) {
            let c = a.ab.ad;
            let d;
            if (((() => { let e = tryParseUInt32_2(c, 0, CultureInfo.invariantCulture, d); d = e.p3; return e.ret; })()) == false) {
                if (b) {
                }
            }
            return d;
        }
        static g(a) {
            return a.ab.ad;
        }
        static hz(a, b) {
            b.clear();
            for (let c of fromEnum(a._bh)) {
                let d = null;
                if (((() => { let e = b.tryGetValue(c.a.name, d); d = e.p1; return e.ret; })())) {
                    continue;
                }
                b.addItem(c.a.name, c.a);
            }
        }
        static e(a) {
            switch (a) {
                case 116: return true;
                default: return false;
            }
        }
        static b(a) {
            if (a == null) {
                return null;
            }
            let b = toNullable(Number_$type, null);
            let c = toNullable(Number_$type, null);
            let d = false;
            let e = toNullable(Number_$type, null);
            let f = false;
            let g = toNullable(Number_$type, null);
            let h = 1;
            if (a.a != null) {
                b = toNullable(Number_$type, CT_Double.d(a.a));
            }
            if (a.b != null) {
                c = toNullable(Number_$type, a.b.g);
            }
            if (a.d != null) {
                d = true;
                if (a.d.b.hasValue) {
                    e = toNullable(Number_$type, a.d.b.value);
                }
            }
            if (a.f != null) {
                f = true;
                if (a.f.b.hasValue) {
                    g = toNullable(Number_$type, a.f.b.value);
                }
            }
            if (a.h.hasValue && a.h.value == 0) {
                h = 0;
            }
            return new CategoryAxisBinning(b, c, d, e, f, g, h);
        }
        static a(a) {
            if (a == null) {
                return null;
            }
            let b = false;
            let c = true;
            let d = true;
            let e = false;
            let f = 0;
            if (a.i != null) {
                if (a.i.h.hasValue) {
                    b = a.i.h.value;
                }
                if (a.i.j.hasValue) {
                    c = a.i.j.value;
                }
                if (a.i.f.hasValue) {
                    d = a.i.f.value;
                }
                if (a.i.d.hasValue) {
                    e = a.i.d.value;
                }
            }
            if (a.k != null && a.k.a.hasValue) {
                f = a.k.a.value == 1 ? 1 : 0;
            }
            return new BoxAndWhiskerSettings(b, c, d, e, f);
        }
        static j(a) {
            if (a.xValues != null) {
                let b = a.xValues._u();
                let c = a.xValues.getValues();
                for (let d of fromEnum(b.c)) {
                }
            }
        }
    }
    ChartExDeserializer.$t = /*@__PURE__*/ markType(ChartExDeserializer, 'ChartExDeserializer');
    return ChartExDeserializer;
})();
/**
 * @hidden
 */
export let ChartSerializer = /*@__PURE__*/ (() => {
    class ChartSerializer extends Base {
        constructor(a) {
            super();
            this.bc = null;
            this.bc = a;
        }
        bx(a, b, c, d) {
            if (a == null) {
                return;
            }
            a._jy();
            a._jt();
            let e = this.bc;
            let f = a.chartArea;
            let g = a.plotArea;
            let h = ((() => {
                let $ret = new CT_ChartSpace();
                $ret.b = CT_Boolean.b(false);
                $ret.r = ((() => {
                    let $ret = new CT_TextLanguageID();
                    $ret.b = "en-US";
                    return $ret;
                })());
                $ret.d = CT_Boolean.b(f.roundedCorners);
                return $ret;
            })());
            h.v = ChartSerializer.a5(e, f.fill, f.border, toNullable(BorderLineStyle_$type, null));
            h.f = ((() => {
                let $ret = new CT_Chart();
                $ret.c = CT_Boolean.b(a.plotVisibleOnly);
                $ret.g = ((() => {
                    let $ret = new CT_DispBlanksAs();
                    $ret.b = DMLChartExtensions.ao(a.displayBlanksAs);
                    return $ret;
                })());
                $ret.a = CT_Boolean.b(a.chartTitle == null);
                return $ret;
            })());
            if (WorksheetChart._f6(a.chartType)) {
                h.f.u = ChartSerializer.a0(a.depthPercent, a.heightPercent, a.rotationX, a.rotationY, a.perspective, a.rightAngleAxes);
                h.f.m = ChartSerializer.as(e, a, a.backWall);
                h.f.q = ChartSerializer.as(e, a, a.sideWall);
                h.f.o = ChartSerializer.as(e, a, a.floor);
            }
            else if (WorksheetChart._gl(a.chartType)) {
                h.f.u = ChartSerializer.a1();
            }
            h.f.k = ((() => {
                let $ret = new CT_PlotArea();
                $ret.af = ChartSerializer.a5(e, g.fill, g.border, toNullable(BorderLineStyle_$type, null));
                $ret.l = ChartSerializer.x(e, g.position, g.left, g.top, toNullable(Number_$type, g.width), toNullable(Number_$type, g.height), true);
                return $ret;
            })());
            let i = ChartSerializer.bg(a, h.f.k);
            a._seriesCollection$i._av();
            ChartSerializer.bm(a, h.f.k, i, c);
            let j = a.chartTitle;
            if (j != null) {
                h.f.s = ((() => {
                    let $ret = new CT_Title();
                    $ret.c = ChartSerializer.x(e, j.position, j.left, j.top, toNullable(Number_$type, null), toNullable(Number_$type, null));
                    $ret.a = CT_Boolean.b(j.overlay);
                    $ret.g = ChartSerializer.a5(e, j.fill, j.border, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
                let k = ChartSerializer.a9(e, j.rotation, toNullable(TextHorizontalOverflow_$type, j.horizontalOverflow), toNullable(TextVerticalOverflow_$type, j.verticalOverflow), j.textDirection, j.wrapText, toNullable(VerticalTitleAlignment_$type, j.verticalAlignment));
                h.f.s.e = ChartSerializer.ay(e, k, j.defaultFont, null, j.text, j.readingOrder, j._a5);
                h.f.s.i = ChartSerializer.a8(e, k, j.defaultFont, null, j.readingOrder);
            }
            h.f.i = ChartSerializer.y(e, a);
            ChartSerializerExtensions.k(h, b, c, d, DrawingMLChart.bh);
        }
        static by(a, b, c, d, e, f, g, h, i, j, k = false) {
            let l = ChartSerializer.x(d, f, g, h, toNullable(Number_$type, i), toNullable(Number_$type, j));
            if (l != null) {
                ChartSerializerExtensions.s(l, a, b, c, e);
            }
        }
        static bz(a, b, c) {
            c.p(DrawingMLMain.gz, "a");
            c.k();
        }
        static bm(a, b, c, d) {
            switch (a.chartType) {
                case 57:
                case 58:
                case 59:
                case 51:
                case 52:
                case 53:
                    b.f = ChartSerializer.i(a, c, d);
                    break;
                case 4:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                    b.n = ChartSerializer.aa(a, c, d);
                    break;
                case 1:
                case 76:
                case 77:
                    b.c = ChartSerializer.c(a, c, d);
                    break;
                case -4098:
                case 78:
                case 79:
                    b.b = ChartSerializer.b(a, c, d);
                    break;
                case 5:
                case 69:
                    b.s = ChartSerializer.al(a, c, d);
                    break;
                case -4120:
                case 80:
                    b.i = ChartSerializer.v(a, c, d);
                    break;
                case -4169:
                case 74:
                case 75:
                case 72:
                case 73:
                    b.y = ChartSerializer.ap(a, c, d);
                    break;
                case -4151:
                case 82:
                case 81:
                    b.u = ChartSerializer.an(a, c, d);
                    break;
                case 15:
                case 87:
                    b.h = ChartSerializer.l(a, c, d);
                    break;
                case 85:
                case 86:
                    b.ad = ChartSerializer.at(a, c, d);
                    break;
                case 83:
                case 84:
                    b.ae = ChartSerializer.au(a, c, d);
                    break;
                case 60:
                case 61:
                case 62:
                case -4100:
                case 54:
                case 55:
                case 56:
                case 102:
                case 103:
                case 104:
                case 105:
                case 99:
                case 100:
                case 101:
                case 95:
                case 96:
                case 97:
                case 98:
                case 92:
                case 93:
                case 94:
                case 109:
                case 110:
                case 111:
                case 112:
                case 106:
                case 107:
                case 108:
                    b.e = ChartSerializer.h(a, c, d);
                    break;
                case 71:
                case 68:
                    b.p = ChartSerializer.aj(a, c, d);
                    break;
                case -4101:
                    b.m = ChartSerializer.z(a, c, d);
                    break;
                case -4102:
                case 70:
                    b.r = ChartSerializer.ak(a, c, d);
                    break;
                case 88:
                case 89:
                    b.ac = ChartSerializer.ar(a, c, d, false);
                    break;
                case 90:
                case 91:
                    b.ac = ChartSerializer.ar(a, c, d, true);
                    b.f = ChartSerializer.j(a, c, d);
                    break;
                case 113:
                    ChartSerializer.bn(a, b, c, d);
                    break;
            }
        }
        static bn(a, b, c, d) {
            let e = ComboChartSerializer.e(a._seriesCollection$i);
            for (let f of fromEnum(e)) {
                ComboChartSerializer.g(a, a.sheet, c, b, f, d);
            }
        }
        static bg(a, b) {
            let c = new List$1(Axis.$, 0);
            if (WorksheetChart._f3(a.chartType) == false) {
                return c;
            }
            let d = a._axisCollection$i;
            let e = d.item(1, 1);
            let f = d.item(2, 1);
            let g = d.item(1, 2);
            let h = d.item(2, 2);
            let i = d.item(3);
            if (WorksheetChart._gy(a.chartType) == false) {
                g = null;
                h = null;
            }
            if (a.chartType == 113 && a._seriesCollection$i._ah == false) {
                g = null;
                h = null;
            }
            let j = a.chartType == 113;
            if (j) {
                let k = false;
                let l = false;
                let m = a._seriesCollection$i._as(k, l);
                k = m.p0;
                l = m.p1;
                if (k == false) {
                    e = null;
                    f = null;
                }
                if (l == false) {
                    g = null;
                    h = null;
                }
            }
            let n = [e, f, g, h];
            for (let p = 0; p < n.length; p++) {
                let o = n[p];
                if (o != null) {
                    ChartSerializer.bl(a, b, o, d);
                    c.add(o);
                }
            }
            if (ChartSerializer.bf(a.chartType)) {
                if (i == null) {
                    i = new Axis(d, 3, 1);
                }
                ChartSerializer.bl(a, b, i, d);
                c.add(i);
            }
            return c;
        }
        static be(a) {
            if (a.chartType != 113) {
                return false;
            }
            return a._seriesCollection$i._ad(6);
        }
        static bl(a, b, c, d) {
            let e = a.sheet;
            let f = c.type;
            let g = null;
            let h = null;
            let i = null;
            let j = null;
            let k = null;
            let l = c._ac;
            switch (f) {
                case 1:
                    switch (c.categoryType) {
                        case 3:
                            i = new CT_DateAx();
                            b.ah.add(i);
                            g = i.p;
                            break;
                        default:
                            h = new CT_CatAx();
                            b.ah.add(h);
                            g = h.n;
                            break;
                    }
                    break;
                case 2:
                    j = new CT_ValAx();
                    j.e = ((() => {
                        let $ret = new CT_CrossBetween();
                        $ret.a = l != null && l.axisBetweenCategories ? 0 : 1;
                        return $ret;
                    })());
                    b.ah.add(j);
                    g = j.j;
                    break;
                case 3:
                    k = new CT_SerAx();
                    b.ah.add(k);
                    g = k.f;
                    break;
                default: return;
            }
            g.c = ((() => {
                let $ret = new CT_UnsignedInt();
                $ret.g = intSToU(c._cg);
                return $ret;
            })());
            if (c.type != 3) {
                let m = a._eh(c, true);
                let n = DMLChartExtensions.av(m, c);
                if (n.hasValue) {
                    g.e = ((() => {
                        let $ret = new CT_AxPos();
                        $ret.a = n.value;
                        return $ret;
                    })());
                }
            }
            if (l != null) {
                g.d = ((() => {
                    let $ret = new CT_UnsignedInt();
                    $ret.g = intSToU(l._cg);
                    return $ret;
                })());
                let o = DMLChartExtensions.aw(l.crosses);
                if (o.hasValue) {
                    g.h = ((() => {
                        let $ret = new CT_Crosses();
                        $ret.a = o.value;
                        return $ret;
                    })());
                }
                else {
                    let p = l._dp;
                    if (p.hasValue) {
                        g.b = CT_Double.a(p.value);
                    }
                }
            }
            g.a = CT_Boolean.b(c.visible == false);
            g.f = ChartSerializer.o(e, a, c.majorGridLines);
            g.g = ChartSerializer.o(e, a, c.minorGridLines);
            g.l = ((() => {
                let $ret = new CT_TickMark();
                $ret.b = DMLChartExtensions.ak(c.majorTickMark);
                return $ret;
            })());
            g.m = ((() => {
                let $ret = new CT_TickMark();
                $ret.b = DMLChartExtensions.ak(c.minorTickMark);
                return $ret;
            })());
            let q = ((() => {
                let $ret = new CT_NumFmt_Chart();
                $ret.c = "General";
                $ret.a = false;
                return $ret;
            })());
            if (c.tickLabels != null) {
                if (stringIsNullOrEmpty(c.tickLabels.numberFormat) == false) {
                    q.c = c.tickLabels.numberFormat;
                }
                q.a = c.tickLabels.numberFormatLinked;
            }
            g.i = q;
            g.o = new CT_ShapeProperties_DML();
            g.o.l.d = new CT_NoFillProperties();
            g.o.a = ((() => {
                let $ret = new CT_LineProperties_DML();
                $ret.h = toNullable(ST_LineWidth.$, null);
                $ret.q = toNullable(Number_$type, ExcelUtils.dh(0.75));
                return $ret;
            })());
            if (c.tickLabels != null) {
                g.o = ChartSerializer.a5(e, c.tickLabels.fill, null, toNullable(BorderLineStyle_$type, null));
                let r = ChartSerializer.a9(e, c.tickLabels.rotation, toNullable(TextHorizontalOverflow_$type, 0), toNullable(TextVerticalOverflow_$type, 2), c.tickLabels.textDirection, false, toNullable(VerticalTitleAlignment_$type, null));
                g.p = ChartSerializer.a8(e, r, c.tickLabels.font, null, c.tickLabels.readingOrder);
            }
            if (c.tickLines != null) {
                g.o.a = ChartSerializer.a4(e, c.tickLines, toNullable(BorderLineStyle_$type, null));
            }
            g.k = ((() => {
                let $ret = new CT_TickLblPos();
                $ret.b = DMLChartExtensions.aj(c.tickLabelPosition);
                return $ret;
            })());
            if (c.axisTitle != null) {
                g.n = ChartSerializer.aw(e, c.axisTitle);
            }
            g.j = new CT_Scaling();
            if (c.scaleType == -4133) {
                g.j.e = ((() => {
                    let $ret = new CT_LogBase();
                    $ret.a = c.logBase;
                    return $ret;
                })());
            }
            let s = c.reversePlotOrder ? 4 : 3;
            g.j.g = ((() => {
                let $ret = new CT_Orientation();
                $ret.a = s;
                return $ret;
            })());
            if (c.maximumScaleIsAuto == false) {
                g.j.a = ((() => {
                    let $ret = new CT_Double();
                    $ret.f = c._b9;
                    return $ret;
                })());
            }
            if (c.minimumScaleIsAuto == false) {
                g.j.c = ((() => {
                    let $ret = new CT_Double();
                    $ret.f = c._cb;
                    return $ret;
                })());
            }
            if (h != null) {
                ChartSerializer.bo(a, b, c, h);
            }
            else if (i != null) {
                ChartSerializer.bp(a, b, c, i);
            }
            else if (j != null) {
                ChartSerializer.bw(a, b, c, j);
            }
            else if (k != null) {
                ChartSerializer.bv(a, b, c, k);
            }
        }
        static bo(a, b, c, d) {
            d.a = CT_Boolean.b(c.baseUnitIsAuto);
            let e = c.tickLabels;
            if (e != null) {
                d.e = ((() => {
                    let $ret = new CT_LblAlgn();
                    $ret.a = DMLChartExtensions.ag(e.alignment);
                    return $ret;
                })());
                d.g = ((() => {
                    let $ret = new CT_LblOffset();
                    $ret.c = e.offset;
                    return $ret;
                })());
            }
            d.a = ((() => {
                let $ret = new CT_Boolean(3);
                $ret.m = toNullable(Boolean_$type, c.categoryType == -4105);
                return $ret;
            })());
            if (!c.tickLabelSpacingIsAuto) {
                d.i = ((() => {
                    let $ret = new CT_Skip();
                    $ret.b = c.tickLabelSpacing;
                    return $ret;
                })());
            }
            if (c.tickMarkSpacing > 0) {
                d.k = ((() => {
                    let $ret = new CT_Skip();
                    $ret.b = c.tickMarkSpacing;
                    return $ret;
                })());
            }
        }
        static bv(a, b, c, d) {
            if (!c.tickLabelSpacingIsAuto) {
                d.a = ((() => {
                    let $ret = new CT_Skip();
                    $ret.b = c.tickLabelSpacing;
                    return $ret;
                })());
            }
            if (c.tickMarkSpacing > 0) {
                d.c = ((() => {
                    let $ret = new CT_Skip();
                    $ret.b = c.tickMarkSpacing;
                    return $ret;
                })());
            }
        }
        static bw(a, b, c, d) {
            let e = a.sheet;
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = c._du(f, g);
            f = h.p0;
            g = h.p1;
            if (f.hasValue) {
                d.a = ((() => {
                    let $ret = new CT_AxisUnit();
                    $ret.a = f.value;
                    return $ret;
                })());
            }
            if (g.hasValue) {
                d.c = ((() => {
                    let $ret = new CT_AxisUnit();
                    $ret.a = g.value;
                    return $ret;
                })());
            }
            d.dispUnits = new CT_DispUnits();
            if (c.displayUnit == -4142) {
                d.dispUnits.b = null;
                d.dispUnits.a = null;
            }
            else {
                let i = DMLChartUtils.aw(c.displayUnit);
                if (i.hasValue) {
                    d.dispUnits.b = ((() => {
                        let $ret = new CT_BuiltInUnit();
                        $ret.b = i.value;
                        return $ret;
                    })());
                }
                else {
                    d.dispUnits.a = CT_Double.a(c.displayUnitCustom);
                }
            }
            let j = c.displayUnitLabel;
            if (j != null) {
                d.dispUnits.c = ((() => {
                    let $ret = new CT_DispUnitsLbl();
                    $ret.a = ChartSerializer.x(e, j.position, j.left, j.top, toNullable(Number_$type, null), toNullable(Number_$type, null));
                    $ret.e = ChartSerializer.a5(e, j.fill, j.border, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
                let k = ChartSerializer.a9(e, j.rotation, toNullable(TextHorizontalOverflow_$type, j.horizontalOverflow), toNullable(TextVerticalOverflow_$type, j.verticalOverflow), j.textDirection, j.wrapText, toNullable(VerticalTitleAlignment_$type, null));
                d.dispUnits.c.c = ChartSerializer.ay(e, k, j.defaultFont, null, j.text, j.readingOrder, j._a5);
                d.dispUnits.c.g = ChartSerializer.a8(e, k, j.defaultFont, null, j.readingOrder);
            }
        }
        static bp(a, b, c, d) {
            let e = a.sheet;
            let f = toNullable(Number_$type, null);
            let g = toNullable(Number_$type, null);
            let h = c._du(f, g);
            f = h.p0;
            g = h.p1;
            if (f.hasValue) {
                d.c = ((() => {
                    let $ret = new CT_AxisUnit();
                    $ret.a = f.value;
                    return $ret;
                })());
            }
            if (g.hasValue) {
                d.e = ((() => {
                    let $ret = new CT_AxisUnit();
                    $ret.a = g.value;
                    return $ret;
                })());
            }
            if (c.baseUnitIsAuto == false) {
                d.i = ((() => {
                    let $ret = new CT_TimeUnit();
                    $ret.b = DMLChartExtensions.al(c.baseUnit);
                    return $ret;
                })());
                d.a = CT_Boolean.b(false);
            }
            else {
                d.a = CT_Boolean.b(true);
            }
            if (c.majorUnitIsAuto == false) {
                d.k = ((() => {
                    let $ret = new CT_TimeUnit();
                    $ret.b = DMLChartExtensions.al(c.majorUnitScale);
                    return $ret;
                })());
            }
            if (c.minorUnitIsAuto == false) {
                d.m = ((() => {
                    let $ret = new CT_TimeUnit();
                    $ret.b = DMLChartExtensions.al(c.minorUnitScale);
                    return $ret;
                })());
            }
        }
        static as(a, b, c) {
            if (c == null) {
                return null;
            }
            let d = ((() => {
                let $ret = new CT_Surface();
                $ret.e = ChartSerializer.a5(a, c.fill, c.border, toNullable(BorderLineStyle_$type, null));
                $ret.a = CT_UnsignedInt.a(intSToU(c.thickness));
                return $ret;
            })());
            d.e.g = new CT_Shape3D();
            return d;
        }
        static y(a, b) {
            let c = b != null ? b.legend : null;
            if (c == null) {
                return null;
            }
            let d = c.position == 5 ? -4114 : -4105;
            let e = ((() => {
                let $ret = new CT_Legend();
                $ret.c = ChartSerializer.x(a, d, c.left, c.top, toNullable(Number_$type, c.width), toNullable(Number_$type, c.height));
                $ret.g = ChartSerializer.a5(a, c.fill, c.border, toNullable(BorderLineStyle_$type, null));
                $ret.a = CT_Boolean.b(c.overlay);
                return $ret;
            })());
            let f = ChartSerializer.a9(a, c.rotation, toNullable(TextHorizontalOverflow_$type, 0), toNullable(TextVerticalOverflow_$type, 2), c.textDirection, true, toNullable(VerticalTitleAlignment_$type, null));
            e.i = ChartSerializer.a8(a, f, c.defaultFont, null, -5002);
            let g = DMLChartExtensions.ax(c.position);
            if (g.hasValue) {
                e.e = ((() => {
                    let $ret = new CT_LegendPos();
                    $ret.b = g.value;
                    return $ret;
                })());
            }
            if (c._legendEntries$i != null) {
                e.m = new List$1(CT_LegendEntry.$, 0);
                let h = b._g5();
                for (let i = 0; i < h.count; i++) {
                    let j = h._inner[i];
                    if (j._ak() == false) {
                        continue;
                    }
                    let k = ((() => {
                        let $ret = new CT_LegendEntry();
                        $ret.a = CT_Boolean.b(j.isDeleted);
                        $ret.b = CT_UnsignedInt.a(intSToU(i));
                        return $ret;
                    })());
                    f = ChartSerializer.a9(a, 0, toNullable(TextHorizontalOverflow_$type, 0), toNullable(TextVerticalOverflow_$type, 2), 0, true, toNullable(VerticalTitleAlignment_$type, null));
                    k.e.a = ChartSerializer.a8(a, f, j.font, j.fontFill, -5002);
                    let l = ((() => {
                        let $ret = new CT_TextParagraph_DML();
                        $ret.c = ChartSerializer.bb(a, j.font, -5002);
                        return $ret;
                    })());
                    k.e.a.d.add(l);
                    e.m.add(k);
                }
            }
            return e;
        }
        static o(a, b, c) {
            return ChartSerializer.s(a, b, c);
        }
        static q(a, b, c) {
            return ChartSerializer.s(a, b, c);
        }
        static r(a, b, c) {
            return ChartSerializer.s(a, b, c);
        }
        static p(a, b, c) {
            return ChartSerializer.s(a, b, c);
        }
        static n(a, b, c) {
            return ChartSerializer.s(a, b, c);
        }
        static s(a, b, c) {
            if (c == null) {
                return null;
            }
            if (c.widthInPoints == 0.75 && c.fill == null) {
                return null;
            }
            let d = ((() => {
                let $ret = new CT_ChartLines();
                $ret.a = new CT_ShapeProperties_DML();
                return $ret;
            })());
            d.a.a = ChartSerializer.a4(a, c, toNullable(BorderLineStyle_$type, null));
            return d;
        }
        static a1() {
            return ((() => {
                let $ret = new CT_View3D();
                $ret.i = ((() => {
                    let $ret = new CT_RotX();
                    $ret.b = 90;
                    return $ret;
                })());
                $ret.k = ((() => {
                    let $ret = new CT_RotY();
                    $ret.c = 0;
                    return $ret;
                })());
                $ret.a = ((() => {
                    let $ret = new CT_Boolean(3);
                    $ret.m = toNullable(Boolean_$type, false);
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_Perspective();
                    $ret.b = 0;
                    return $ret;
                })());
                return $ret;
            })());
        }
        static a0(a, b, c, d, e, f) {
            c = truncate(ExcelUtils.cl(c));
            d = truncate(ExcelUtils.cl(d));
            let g = ((() => {
                let $ret = new CT_View3D();
                $ret.c = ((() => {
                    let $ret = new CT_DepthPercent();
                    $ret.c = a;
                    return $ret;
                })());
                $ret.e = ((() => {
                    let $ret = new CT_HPercent();
                    $ret.c = b;
                    return $ret;
                })());
                $ret.g = ((() => {
                    let $ret = new CT_Perspective();
                    $ret.b = (e * 2);
                    return $ret;
                })());
                $ret.a = CT_Boolean.b(f);
                $ret.i = ((() => {
                    let $ret = new CT_RotX();
                    $ret.b = c;
                    return $ret;
                })());
                $ret.k = ((() => {
                    let $ret = new CT_RotY();
                    $ret.c = d;
                    return $ret;
                })());
                return $ret;
            })());
            return g;
        }
        static bq(a, b, c, d, e) {
            a.a = CT_Boolean.b(c.varyColors);
            a.b = ((() => {
                let $ret = new CT_BarDir();
                $ret.b = DMLChartExtensions.ab(c.chartType);
                return $ret;
            })());
            a.c = ((() => {
                let $ret = new CT_BarGrouping();
                $ret.b = DMLChartExtensions.ac(c.chartType);
                return $ret;
            })());
            a.a = CT_Boolean.b(false);
            for (let f = 0; f < c._seriesCollection$i.count; f++) {
                let g = c._seriesCollection$i.item(f);
                let h = ChartSerializer.k(c, g, intSToU(f), d, e);
                a.f.add(h);
            }
        }
        static br(a, b, c, d, e) {
            a.d = ((() => {
                let $ret = new CT_Grouping();
                $ret.b = d ? 1 : DMLChartUtils.aa(c.chartType);
                return $ret;
            })());
            a.a = CT_Boolean.b(c.varyColors);
            for (let f = 0; f < c._seriesCollection$i.count; f++) {
                let g = c._seriesCollection$i.item(f);
                let h = ChartSerializer.ab(c, g, intSToU(f), e);
                a.f.add(h);
            }
            a.a = CT_Boolean.b(false);
        }
        static j(a, b, c) {
            let d = new CT_BarChart();
            d.f.b = ((() => {
                let $ret = new CT_BarDir();
                $ret.b = 1;
                return $ret;
            })());
            d.f.c = ((() => {
                let $ret = new CT_BarGrouping();
                $ret.b = 1;
                return $ret;
            })());
            d.g = new List$1(CT_UnsignedInt.$, 0);
            for (let e = 0; e < b.count; e++) {
                let f = b._inner[e];
                if (f.axisGroup == 2) {
                    continue;
                }
                d.g.add(((() => {
                    let $ret = new CT_UnsignedInt();
                    $ret.g = intSToU(f._cg);
                    return $ret;
                })()));
            }
            for (let g = 0; g < a._seriesCollection$i.count; g++) {
                let h = a._seriesCollection$i.item(g);
                if (h.type != 1) {
                    continue;
                }
                let i = ChartSerializer.k(a, h, intSToU(g), false, c);
                d.f.f.add(i);
            }
            return d;
        }
        static i(a, b, c) {
            let d = a.sheet;
            let e = new CT_BarChart();
            let f = e.f;
            ChartSerializer.bq(f, d, a, false, c);
            e.g = ChartSerializer.bk(b);
            if (a.seriesLines != null) {
                let g = ChartSerializer.q(d, a, a.seriesLines);
                if (g != null) {
                    e.k = new List$1(CT_ChartLines.$, 0);
                    e.k.add(g);
                }
            }
            if (a.seriesOverlap != 0) {
                e.c = ((() => {
                    let $ret = new CT_Overlap();
                    $ret.b = a.seriesOverlap;
                    return $ret;
                })());
            }
            let h = a._iy;
            if (h.hasValue) {
                e.a = ((() => {
                    let $ret = new CT_GapAmount();
                    $ret.c = h.value;
                    return $ret;
                })());
            }
            return e;
        }
        static h(a, b, c) {
            let d = a.sheet;
            let e = new CT_Bar3DChart();
            let f = e.h;
            ChartSerializer.bq(f, d, a, true, c);
            e.i = ChartSerializer.bk(b);
            e.e = ((() => {
                let $ret = new CT_Shape_Chart();
                $ret.b = DMLChartExtensions.ai(a.barShapeResolved);
                return $ret;
            })());
            let g = a._iy;
            if (g.hasValue) {
                e.c = ((() => {
                    let $ret = new CT_GapAmount();
                    $ret.c = g.value;
                    return $ret;
                })());
            }
            let h = a._ix;
            if (h.hasValue) {
                e.a = ((() => {
                    let $ret = new CT_GapAmount();
                    $ret.c = h.value;
                    return $ret;
                })());
            }
            return e;
        }
        static z(a, b, c) {
            let d = a.sheet;
            let e = new CT_Line3DChart();
            let f = e.d;
            ChartSerializer.br(f, d, a, true, c);
            e.e = ChartSerializer.bk(b);
            if (a.gapDepth != 150) {
                e.a = ((() => {
                    let $ret = new CT_GapAmount();
                    $ret.c = a.gapDepth;
                    return $ret;
                })());
            }
            return e;
        }
        static ak(a, b, c) {
            let d = a.sheet;
            let e = new CT_Pie3DChart();
            let f = e.b;
            ChartSerializer.bs(f, a, d, c);
            return e;
        }
        static aa(a, b, c) {
            let d = a.sheet;
            let e = new CT_LineChart();
            let f = e.j;
            ChartSerializer.br(f, d, a, false, c);
            e.k = ChartSerializer.bk(b);
            if (WorksheetChart._f4(a.chartType)) {
                e.e = ((() => {
                    let $ret = new CT_Marker_Chart();
                    $ret.j = toNullable(Boolean_$type, true);
                    return $ret;
                })());
            }
            return e;
        }
        static c(a, b, c) {
            let d = a.sheet;
            let e = new CT_AreaChart();
            let f = e.b;
            let g = DMLChartUtils.aa(a.chartType);
            f.d = ((() => {
                let $ret = new CT_Grouping();
                $ret.b = g;
                return $ret;
            })());
            f.a = CT_Boolean.b(a.varyColors);
            for (let h = 0; h < a._seriesCollection$i.count; h++) {
                let i = a._seriesCollection$i.item(h);
                let j = ChartSerializer.d(a, i, intSToU(h), c);
                f.f.add(j);
            }
            e.c = ChartSerializer.bk(b);
            return e;
        }
        static b(a, b, c) {
            let d = a.sheet;
            let e = new CT_Area3DChart();
            let f = e.d;
            let g = DMLChartUtils.aa(a.chartType);
            f.d = ((() => {
                let $ret = new CT_Grouping();
                $ret.b = g;
                return $ret;
            })());
            f.a = CT_Boolean.b(a.varyColors);
            for (let h = 0; h < a._seriesCollection$i.count; h++) {
                let i = a._seriesCollection$i.item(h);
                let j = ChartSerializer.d(a, i, intSToU(h), c);
                f.f.add(j);
            }
            e.e = ChartSerializer.bk(b);
            e.a = ((() => {
                let $ret = new CT_GapAmount();
                $ret.c = a.gapDepth;
                return $ret;
            })());
            return e;
        }
        static ap(a, b, c) {
            let d = a.sheet;
            let e = new CT_ScatterChart();
            e.e = DMLChartUtils.x(a.chartType);
            e.a = CT_Boolean.b(a.varyColors);
            e.k = new List$1(CT_ScatterSer.$, 0);
            for (let f = 0; f < a._seriesCollection$i.count; f++) {
                let g = a._seriesCollection$i.item(0);
                let h = a._seriesCollection$i.item(f);
                let i = ChartSerializer.aq(a, h, g, intSToU(f), c);
                if (i != null) {
                    e.k.add(i);
                }
            }
            e.g = ChartSerializer.bk(b);
            return e;
        }
        static al(a, b, c) {
            let d = a.sheet;
            let e = new CT_PieChart();
            let f = e.d;
            ChartSerializer.bs(f, a, d, c);
            if (a.firstSliceAngle > 0) {
                e.a = ((() => {
                    let $ret = new CT_FirstSliceAng();
                    $ret.c = a.firstSliceAngle;
                    return $ret;
                })());
            }
            return e;
        }
        static aj(a, b, c) {
            let d = a.sheet;
            let e = new CT_OfPieChart();
            let f = e.l;
            ChartSerializer.bs(f, a, d, c);
            let g = a.chartType == 68 ? 0 : 1;
            e.e = ((() => {
                let $ret = new CT_OfPieType();
                $ret.b = g;
                return $ret;
            })());
            let h = a._iy;
            if (h.hasValue) {
                e.c = ((() => {
                    let $ret = new CT_GapAmount();
                    $ret.c = h.value;
                    return $ret;
                })());
            }
            if (a.seriesLines != null) {
                e.q = new List$1(CT_ChartLines.$, 0);
                e.q.add(((() => {
                    let $ret = new CT_ChartLines();
                    $ret.a = ChartSerializer.a5(d, null, a.seriesLines, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })()));
            }
            e.g = ((() => {
                let $ret = new CT_SecondPieSize();
                $ret.c = a.secondPlotSize;
                return $ret;
            })());
            return e;
        }
        static v(a, b, c) {
            let d = a.sheet;
            let e = new CT_DoughnutChart();
            let f = e.f;
            f.a = CT_Boolean.b(true);
            for (let g = 0; g < a._seriesCollection$i.count; g++) {
                let h = a._seriesCollection$i.item(g);
                let i = ChartSerializer.am(a, h, intSToU(g), c);
                f.d.add(i);
            }
            if (a.firstSliceAngle > 0) {
                e.a = ((() => {
                    let $ret = new CT_FirstSliceAng();
                    $ret.c = a.firstSliceAngle;
                    return $ret;
                })());
            }
            e.c = ((() => {
                let $ret = new CT_HoleSize();
                $ret.b = a.doughnutHoleSize;
                return $ret;
            })());
            return e;
        }
        static an(a, b, c) {
            let d = a.sheet;
            let e = new CT_RadarChart();
            e.a = CT_Boolean.b(a.varyColors);
            e.e = DMLChartUtils.v(a.chartType);
            e.k = new List$1(CT_RadarSer.$, 0);
            for (let f = 0; f < a._seriesCollection$i.count; f++) {
                let g = a._seriesCollection$i.item(f);
                let h = ChartSerializer.ao(a, g, intSToU(f), c);
                e.k.add(h);
            }
            e.g = ChartSerializer.bk(b);
            return e;
        }
        static l(a, b, c) {
            let d = a.sheet;
            let e = (a.chartType == 87);
            let f = ((() => {
                let $ret = new CT_BubbleChart();
                $ret.m = new List$1(CT_UnsignedInt.$, 0);
                $ret.q = new List$1(CT_BubbleSer.$, 0);
                $ret.o = new List$1(CT_Extension.$, 0);
                return $ret;
            })());
            f.e = CT_Boolean.b(a.varyColors);
            f.q = new List$1(CT_BubbleSer.$, 0);
            for (let g = 0; g < a._seriesCollection$i.count; g++) {
                let h = a._seriesCollection$i.item(g);
                let i = ChartSerializer.m(a, h, intSToU(g), e, c);
                f.q.add(i);
            }
            f.m = ChartSerializer.bk(b);
            return f;
        }
        static au(a, b, c) {
            let d = a.sheet;
            let e = new CT_SurfaceChart();
            let f = e.b;
            ChartSerializer.bu(f, d, a, false, c);
            e.c = ChartSerializer.bk(b, toNullable(AxisGroup_$type, null), false);
            return e;
        }
        static at(a, b, c) {
            let d = a.sheet;
            let e = new CT_Surface3DChart();
            let f = e.b;
            ChartSerializer.bu(f, d, a, true, c);
            e.c = ChartSerializer.bk(b, toNullable(AxisGroup_$type, null), false);
            return e;
        }
        static ar(a, b, c, d) {
            let e = a.sheet;
            let f = WorksheetChart._i0(a.chartType);
            let g = new CT_StockChart();
            g.i = new List$1(CT_UnsignedInt.$, 0);
            for (let h = 0; h < b.count; h++) {
                let i = b._inner[h];
                if (d && i.axisGroup == 1) {
                    continue;
                }
                g.i.add(((() => {
                    let $ret = new CT_UnsignedInt();
                    $ret.g = intSToU(i._cg);
                    return $ret;
                })()));
            }
            let j = f.hasValue ? f.value - 1 : a._seriesCollection$i.count - 1;
            g.m = new List$1(CT_LineSer.$, 0);
            for (let k = 0; k <= j; k++) {
                let l = a._seriesCollection$i.item(k);
                if (d && l.type != 2) {
                    continue;
                }
                let m = ChartSerializer.ab(a, l, intSToU(k), c);
                g.m.add(m);
            }
            let n = a.upDownBars;
            let o = a.highLowLines;
            let p = a.dropLines;
            if (n != null) {
                g.g = ChartSerializer.az(n, e);
            }
            if (o != null) {
                g.c = ChartSerializer.p(e, a, o);
            }
            if (p != null) {
                g.a = ChartSerializer.n(e, a, p);
            }
            return g;
        }
        static bu(a, b, c, d, e) {
            let f = c.chartType == 84 || c.chartType == 86;
            a.a = CT_Boolean.b(f);
            let g = null;
            for (let h = 0; h < c._seriesCollection$i.count; h++) {
                let i = c._seriesCollection$i.item(h);
                if (g == null) {
                    g = i;
                }
                let j = ChartSerializer.av(c, i, intSToU(h), d, e);
                a.d.add(j);
            }
            if (g != null) {
                a.b = ChartSerializer.g(b, c);
            }
        }
        static b0(a, b, c, d, e = true) {
            if (e && WorksheetChart._f3(b) == false) {
                return;
            }
            let f = a.item(1, 1);
            let g = a.item(2, 1);
            if (c && f == null) {
                throw new BaseError(1, ExcelUtils.eg("LE_Serialization_NoPrimaryCategoryAxis", enumGetBox(ChartType_$type, b)));
            }
            if (d && g == null) {
                throw new BaseError(1, ExcelUtils.eg("LE_Serialization_NoPrimaryValueAxis", enumGetBox(ChartType_$type, b)));
            }
        }
        static bf(a) {
            switch (a) {
                case 83:
                case 85:
                case 86:
                case 84: return true;
                default: return false;
            }
        }
        static bi(a, b, c) {
            let d = b.dataLabels._ea;
            if (b == null || stringIsNullOrEmpty(d)) {
                return c;
            }
            d = SerializationUtils.u(d);
            let e = c != null ? c : new List$1(CT_Extension.$, 0);
            let f = ((() => {
                let $ret = new CT_Extension_DataLabelsRange();
                $ret.b = "{02D57815-91ED-43cb-92C2-25804820EDAC}";
                $ret.h = ((() => {
                    let $ret = new CT_SeriesDataLabelsRange();
                    $ret.c = d;
                    return $ret;
                })());
                return $ret;
            })());
            e.add(f);
            return e;
        }
        static k(a, b, c, d, e) {
            let f = a.sheet;
            let g = new CT_BarSer();
            let h = g.p;
            ChartSerializer.bt(h, f, b, e, c, true);
            g.a = CT_Boolean.b(b.invertIfNegative);
            let i = ChartSerializer.e(a, b);
            g.c = i;
            let j = ChartSerializer.ad(a, b);
            g.i = j;
            g.g = ChartSerializer.w(a, b);
            g.k = new CT_PictureOptions();
            ChartSerializerExtensions.a5(g.k, b);
            if (d) {
                let k = DMLChartExtensions.ai(b.barShapeResolved);
                g.m = ((() => {
                    let $ret = new CT_Shape_Chart();
                    $ret.b = k;
                    return $ret;
                })());
            }
            g.v = ChartSerializer.bj(f, b);
            g.e = ChartSerializer.u(f, b);
            g.r = ChartSerializer.bh(f, b);
            g.t = ChartSerializer.bi(f, b, g.t);
            return g;
        }
        static ab(a, b, c, d) {
            let e = a.sheet;
            let f = new CT_LineSer();
            let g = f.n;
            let h = WorksheetChart._f6(a.chartType);
            ChartSerializer.bt(g, e, b, d, c, h);
            let i = ChartSerializer.e(a, b);
            f.c = i;
            let j = ChartSerializer.ad(a, b);
            f.k = j;
            f.g = ChartSerializer.w(a, b);
            f.a = CT_Boolean.b(b.smooth);
            f.i = ChartSerializer.ac(e, b.markerStyle, b._dl, b.markerFill, b.markerBorder, toNullable(ChartType_$type, b.chartType));
            f.t = ChartSerializer.bj(e, b);
            f.e = ChartSerializer.u(e, b);
            f.p = ChartSerializer.bh(e, b);
            f.r = ChartSerializer.bi(e, b, f.r);
            return f;
        }
        static d(a, b, c, d) {
            let e = a.sheet;
            let f = new CT_AreaSer();
            let g = f.j;
            ChartSerializer.bt(g, e, b, d, c, true);
            let h = ChartSerializer.e(a, b);
            f.a = h;
            let i = ChartSerializer.ad(a, b);
            f.e = i;
            let j = ChartSerializer.w(a, b);
            if (j != null) {
                f.n = new List$1(CT_ErrBars.$, 0);
                f.n.add(j);
            }
            f.g = new CT_PictureOptions();
            ChartSerializerExtensions.a5(f.g, b);
            f.r = ChartSerializer.bj(e, b);
            f.c = ChartSerializer.u(e, b);
            f.l = ChartSerializer.bh(e, b);
            f.p = ChartSerializer.bi(e, b, f.p);
            return f;
        }
        static am(a, b, c, d) {
            let e = a.sheet;
            let f = new CT_PieSer();
            let g = f.j;
            ChartSerializer.bt(g, e, b, d, c, true);
            f.l = ChartSerializer.bh(e, b);
            let h = ChartSerializer.e(a, b);
            f.c = h;
            let i = ChartSerializer.ad(a, b);
            f.g = i;
            let j = b._dk;
            if (j.hasValue) {
                f.a = ((() => {
                    let $ret = new CT_UnsignedInt();
                    $ret.g = intSToU(j.value);
                    return $ret;
                })());
            }
            f.e = ChartSerializer.u(e, b);
            f.l = ChartSerializer.bh(e, b);
            f.n = ChartSerializer.bi(e, b, f.n);
            return f;
        }
        static aq(a, b, c, d, e, f = false) {
            let g = a.sheet;
            let h = new CT_ScatterSer();
            let i = h.l;
            let j = a.chartType == -4169;
            ChartSerializer.bt(i, g, b, e, d, false, j);
            if (f == false) {
                let k = c.xValues != null ? typeCast(SeriesValuesBase.$, c.xValues) : typeCast(SeriesValuesBase.$, c.values);
                if (d > 0 && b.xValues != null && b.xValues._ac == false) {
                    k = b.xValues;
                }
                let l = ChartSerializer.f(a, k);
                h.c = l;
            }
            let m = ChartSerializer.ad(a, b);
            h.i = m;
            h.p = new List$1(CT_ErrBars.$, 0);
            h.p.add(ChartSerializer.w(a, b));
            h.a = CT_Boolean.b(b._b6);
            let n = null;
            let o = b.chartType != 75 && b.chartType != 73;
            if (o) {
                let p = b.markerFill != null ? b.markerFill : b.line != null ? b.line.fill : ChartSerializer.a(b, d);
                let q = b.markerStyle;
                if (q == -4142) {
                    q = -4105;
                }
                n = ChartSerializer.ac(g, q, b._dl, p, b.markerBorder, toNullable(ChartType_$type, b.chartType));
            }
            else {
                n = ((() => {
                    let $ret = new CT_Marker_Chart();
                    $ret.c = ((() => {
                        let $ret = new CT_MarkerStyle();
                        $ret.a = 0;
                        return $ret;
                    })());
                    return $ret;
                })());
            }
            if (a.chartType == -4169 && b.markerStyle == -4142) {
                let r = b.line != null ? ExcelUtils.dh(b.line.widthInPoints) : ExcelUtils.dh(2.25);
                i.d = new CT_ShapeProperties_DML();
                i.d.l.g();
                i.d.a = ((() => {
                    let $ret = new CT_LineProperties_DML();
                    $ret.f = toNullable(ST_LineCap_$type, 0);
                    $ret.q = toNullable(Number_$type, r);
                    return $ret;
                })());
                i.d.a.n.d = new CT_NoFillProperties();
            }
            h.g = n;
            h.t = ChartSerializer.bj(g, b);
            h.e = ChartSerializer.u(g, b);
            h.n = ChartSerializer.bh(g, b);
            h.r = ChartSerializer.bi(g, b, h.r);
            return h;
        }
        static ao(a, b, c, d) {
            let e = a.sheet;
            let f = new CT_RadarSer();
            let g = f.j;
            ChartSerializer.bt(g, e, b, d, c, a.chartType == 82);
            f.e = ChartSerializer.ac(e, b.markerStyle, b._dl, b.markerFill, b.markerBorder, toNullable(ChartType_$type, a.chartType));
            let h = ChartSerializer.e(a, b);
            f.a = h;
            let i = ChartSerializer.ad(a, b);
            f.g = i;
            f.c = ChartSerializer.u(e, b);
            f.l = ChartSerializer.bh(e, b);
            f.n = ChartSerializer.bi(e, b, f.n);
            return f;
        }
        static m(a, b, c, d, e) {
            let f = a.sheet;
            let g = new CT_BubbleSer();
            let h = g.n;
            ChartSerializer.bt(h, f, b, e, c, true);
            g.i = b.bubbleSizes != null ? ChartSerializer.ae(a, b.bubbleSizes, b) : ChartSerializer.af(a, b);
            g.e = ChartSerializer.e(a, b);
            g.k = ChartSerializer.ad(a, b);
            if (b.errorBars != null) {
                g.r = new List$1(CT_ErrBars.$, 0);
                let i = ChartSerializer.w(a, b);
                if (i != null) {
                    g.r = new List$1(CT_ErrBars.$, 0);
                    g.r.add(i);
                }
            }
            if (d) {
                g.a = CT_Boolean.b(true);
            }
            g.v = ChartSerializer.bj(f, b);
            g.g = ChartSerializer.u(f, b);
            g.p = ChartSerializer.bh(f, b);
            g.t = ChartSerializer.bi(f, b, g.t);
            if (b.chartType == 87) {
                g.a = CT_Boolean.b(true);
            }
            return g;
        }
        static av(a, b, c, d, e) {
            let f = a.sheet;
            let g = new CT_SurfaceSer();
            let h = g.f;
            ChartSerializer.bt(h, f, b, e, c, true);
            let i = ChartSerializer.e(a, b);
            g.a = i;
            let j = ChartSerializer.ad(a, b);
            g.c = j;
            return g;
        }
        static bh(a, b) {
            if (b == null) {
                return null;
            }
            let c = b.chart;
            let d = b.chartType == 87;
            let e = c != null ? c.varyColors : true;
            let f = b._dataPointCollection$i;
            let g = new List$1(CT_DPt.$, 2, f.count);
            for (let h = 0; h < f.count; h++) {
                let i = f.item(h);
                if (i._aw(false) == false) {
                    continue;
                }
                let j = i._ai;
                if (j == null && e) {
                    j = ChartSerializer.a(b, h);
                }
                let k = i._ac;
                let l = ((() => {
                    let $ret = new CT_DPt();
                    $ret.g = ((() => {
                        let $ret = new CT_UnsignedInt();
                        $ret.g = intSToU(h);
                        return $ret;
                    })());
                    $ret.m = ChartSerializer.a5(a, j, k, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
                l.e = ((() => {
                    let $ret = new CT_UnsignedInt();
                    $ret.g = intSToU(i._a3);
                    return $ret;
                })());
                l.a = CT_Boolean.b(d);
                l.c = CT_Boolean.b(i._au);
                let m = WorksheetChart._gw(b.chartType);
                l.i = m ? ChartSerializer.ac(a, i._ao, toNullable(Number_$type, i._a9), i._al, i._ae, toNullable(ChartType_$type, null)) : null;
                ChartSerializerExtensions.a4(l.k, i);
                g.add(l);
            }
            return g;
        }
        static g(a, b) {
            let c = 0;
            for (let d of fromEnum(b._seriesCollection$i)) {
                let e = d.values;
                let f = e != null ? e.getValues() : null;
                if (f != null && f.length > c) {
                    c = f.length;
                }
            }
            let g = ((() => {
                let $ret = new CT_BandFmts();
                $ret.a = new List$1(CT_BandFmt.$, 0);
                return $ret;
            })());
            for (let h = 0; h < c; h++) {
                let i = ChartSerializer.a(b, h);
                let j = ((() => {
                    let $ret = new CT_BandFmt();
                    $ret.a = ((() => {
                        let $ret = new CT_UnsignedInt();
                        $ret.g = intSToU(h);
                        return $ret;
                    })());
                    $ret.c = ChartSerializer.a5(a, i, null, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
                g.a.add(j);
            }
            return g;
        }
        static bt(a, b, c, d, e, f, g = false) {
            a.a = CT_UnsignedInt.a(e);
            let h = c.chart;
            let i = h != null ? h._seriesCollection$i : null;
            let j = toNullable(Number_$type, null);
            if (i != null) {
                j = i._aq(c);
            }
            if (j.hasValue) {
                a.b = CT_UnsignedInt.a(j.value);
            }
            if (c.name != null) {
                a.c = DMLChartUtils.z(c.name, b, d);
            }
            let k = f ? c.fill : null;
            let l = f ? typeCast(ChartLineBase.$, c.border) : c.line != null ? typeCast(ChartLineBase.$, c.line) : null;
            let m = c.chart;
            let n = f ? false : m != null && m._gt == false;
            if (f == false) {
                if (l == null) {
                    l = new ChartLine();
                }
                if (l.fill == null) {
                    l.fill = k;
                }
                k = null;
            }
            a.d = ChartSerializer.a5(b, k, l, toNullable(BorderLineStyle_$type, null));
            if (f == false && g && (l == null || l.fill == null)) {
                if (a.d.a == null) {
                    a.d.a = new CT_LineProperties_DML();
                }
                a.d.a.n.i();
            }
        }
        static bs(a, b, c, d) {
            a.a = CT_Boolean.b(b.varyColors);
            for (let e = 0; e < b._seriesCollection$i.count; e++) {
                let f = b._seriesCollection$i.item(e);
                let g = ChartSerializer.am(b, f, intSToU(e), d);
                a.d.add(g);
            }
        }
        static a(a, b) {
            return ExcelUtils.o(a, b);
        }
        static w(a, b) {
            let c = a.sheet;
            let d = b.errorBars;
            if (d == null) {
                return null;
            }
            let e = ((() => {
                let $ret = new CT_ErrBars();
                $ret.e = ((() => {
                    let $ret = new CT_ErrBarType();
                    $ret.b = DMLChartExtensions.ae(d.direction);
                    return $ret;
                })());
                $ret.i = ((() => {
                    let $ret = new CT_ErrValType();
                    $ret.b = DMLChartExtensions.af(d.errorValueType);
                    return $ret;
                })());
                return $ret;
            })());
            e.c = CT_Double.a(d.value);
            if (e.o == null) {
                e.o = new CT_ShapeProperties_DML();
            }
            if (e.o.a == null) {
                e.o.a = new CT_LineProperties_DML();
            }
            if (d.fill != null) {
                ChartSerializerExtensions.a3(EG_LineFillProperties.$, e.o.a.n, d.fill, c);
            }
            e.o.a.q = toNullable(Number_$type, ExcelUtils.dh(d.widthInPoints));
            e.a = CT_Boolean.b(d.endStyle == 2);
            return e;
        }
        static e(a, b) {
            let c = a.sheet;
            let d = b.xValues;
            if (d == null) {
                return null;
            }
            let e = d._t();
            if (e == null || e.length == 0) {
                return null;
            }
            let f = new CT_AxDataSource();
            let g = d._ad > 1;
            ;
            if (g) {
                let h = intDivide(e.length, d._ad);
                f.a = new CT_MultiLvlStrRef();
                f.a.a = ((() => {
                    let $ret = new CT_MultiLvlStrData();
                    $ret.b = CT_UnsignedInt.a(intSToU(h));
                    return $ret;
                })());
                let i = null;
                let j = new List$1(List$1.$.specialize(String_$type), 2, d._ad);
                for (let k = 0; k < d._ad; k++) {
                    j.add(new List$1(String_$type, 2, h));
                }
                for (let l = 0; l < e.length; l++) {
                    let m = l % d._ad;
                    let n = e[l];
                    let o = n == null ? stringEmpty() : n.toString();
                    j._inner[m].add(o);
                }
                for (let p = 0; p < j.count; p++) {
                    let q = j._inner[p];
                    i = ((() => {
                        let $ret = new CT_Lvl();
                        $ret.a = new List$1(CT_StrVal.$, 0);
                        return $ret;
                    })());
                    f.a.a.d.add(i);
                    for (let r = 0; r < q.count; r++) {
                        i.a.add(((() => {
                            let $ret = new CT_StrVal();
                            $ret.d = intSToU(r);
                            $ret.b = q._inner[r];
                            return $ret;
                        })()));
                    }
                }
            }
            else {
                f.e = ((() => {
                    let $ret = new CT_StrRef();
                    $ret.a = new CT_StrData();
                    return $ret;
                })());
                f.e.a.b = CT_UnsignedInt.a(intSToU(e.length));
                if (e.length > 0) {
                    f.e.a.f = new List$1(CT_StrVal.$, 0);
                }
                for (let s = 0; s < e.length; s++) {
                    let t = e[s];
                    let u = t != null ? t.toString() : stringEmpty();
                    f.e.a.f.add(((() => {
                        let $ret = new CT_StrVal();
                        $ret.d = intSToU(s);
                        $ret.b = u;
                        return $ret;
                    })()));
                }
            }
            if (d._f != null) {
                let v = d._f._toString1(c._c);
                v = SerializationUtils.u(v);
                if (g) {
                    if (f.a == null) {
                        f.a = new CT_MultiLvlStrRef();
                    }
                    f.a.e = v;
                }
                else {
                    if (f.e == null) {
                        f.e = new CT_StrRef();
                    }
                    f.e.e = v;
                }
            }
            return f;
        }
        static f(a, b) {
            let c = a.sheet;
            if (b == null) {
                return null;
            }
            let d = null;
            let e = b.getValues();
            if (e == null || e.length == 0) {
                return null;
            }
            let f = new CT_AxDataSource();
            let g = typeCast(XValues.$, b);
            if (g != null && g._ab == 2) {
                f.c = ChartSerializer.ai(e);
                if (b._f != null) {
                    d = b._f._toString1(c._c);
                    d = SerializationUtils.u(d);
                    f.c.e = d;
                }
                return f;
            }
            f.e = ((() => {
                let $ret = new CT_StrRef();
                $ret.a = new CT_StrData();
                return $ret;
            })());
            f.e.a.b = CT_UnsignedInt.a(intSToU(e.length));
            if (e.length > 0) {
                f.e.a.f = new List$1(CT_StrVal.$, 0);
            }
            for (let h = 0; h < e.length; h++) {
                let i = e[h];
                let j = i != null ? i.toString() : stringEmpty();
                f.e.a.f.add(((() => {
                    let $ret = new CT_StrVal();
                    $ret.d = intSToU(h);
                    $ret.b = j;
                    return $ret;
                })()));
            }
            if (b._f != null) {
                d = b._f._toString1(c._c);
                d = SerializationUtils.u(d);
                if (f.e == null) {
                    f.e = new CT_StrRef();
                }
                f.e.e = d;
            }
            return f;
        }
        static ad(a, b) {
            return ChartSerializer.ae(a, b.values, b);
        }
        static ae(a, b, c) {
            let d = a.sheet;
            if (b == null) {
                return null;
            }
            let e = new CT_NumDataSource();
            let f = b.getValues();
            e.b = ChartSerializer.ai(f);
            if (b._f != null) {
                let g = b._f._toString1(d._c);
                g = SerializationUtils.u(g);
                if (e.b == null) {
                    e.b = new CT_NumRef();
                }
                e.b.e = g;
            }
            return e;
        }
        static af(a, b) {
            let c = b.values;
            if (c == null) {
                return null;
            }
            let d = a.sheet;
            let e = ((() => {
                let $ret = new CT_NumDataSource();
                $ret.a = ((() => {
                    let $ret = new CT_NumData();
                    $ret.e = new List$1(CT_NumVal.$, 0);
                    $ret.g = "General";
                    return $ret;
                })());
                return $ret;
            })());
            let f = e.a.e;
            let g = c.getValues();
            for (let h = 0; h < g.length; h++) {
                let i = ((() => {
                    let $ret = new CT_NumVal();
                    $ret.f = intSToU(h);
                    $ret.d = "1";
                    return $ret;
                })());
                f.add(i);
            }
            return e;
        }
        static ai(a) {
            let b = null;
            if (a != null && a.length > 0) {
                b = new CT_NumRef();
                b.a = ((() => {
                    let $ret = new CT_NumData();
                    $ret.a = CT_UnsignedInt.a(intSToU(a.length));
                    return $ret;
                })());
                b.a.a = CT_UnsignedInt.a(intSToU(a.length));
                b.a.e = new List$1(CT_NumVal.$, 0);
                for (let c = 0; c < a.length; c++) {
                    let d = a[c];
                    let e = d != null ? d.toString() : stringEmpty();
                    if (SerializationUtils.l(e) == false) {
                        e = "0";
                    }
                    b.a.e.add(((() => {
                        let $ret = new CT_NumVal();
                        $ret.f = intSToU(c);
                        $ret.d = e;
                        return $ret;
                    })()));
                }
            }
            return b;
        }
        static a6(a, b) {
            let c = new CT_SolidColorFillProperties();
            let d = b.color;
            if (WorkbookColorInfo.l_op_Equality(d, null)) {
                return null;
            }
            DMLChartExtensions.a9(c.b, d, a);
            return c;
        }
        static a2(a, b) {
            let c = ((() => {
                let $ret = new CT_GradientFillProperties();
                $ret.e = new List$1(CT_GradientStop.$, 0);
                return $ret;
            })());
            let d = b.getStops();
            for (let e of fromEnum(d)) {
                let f = ST_PositiveFixedPercentage.o(e.position);
                let g = ((() => {
                    let $ret = new CT_GradientStop();
                    $ret.d = new ST_PositiveFixedPercentage(1, ST_Percentage.b(f));
                    return $ret;
                })());
                DMLChartExtensions.a9(g.b, e.color, a);
                c.e.add(g);
            }
            if (b.angle != 0) {
                c.b.a = ((() => {
                    let $ret = new CT_LinearShadeProperties();
                    $ret.a = toNullable(Number_$type, ST_Angle.l(b.angle));
                    $ret.c = toNullable(Boolean_$type, true);
                    return $ret;
                })());
            }
            let h = DMLChartExtensions.a0(b.gradientType);
            if (h.hasValue) {
                c.b.b = ((() => {
                    let $ret = new CT_PathShadeProperties();
                    $ret.c = toNullable(ST_PathShadeType_$type, h.value);
                    return $ret;
                })());
            }
            return c;
        }
        static bd(a, b) {
            let c = new CT_NoFillProperties();
            return c;
        }
        static x(a, b, c, d, e, f, g = false, h = true) {
            let i = new CT_Layout();
            if (b == -4114) {
                let j = ((() => {
                    let $ret = new CT_ManualLayout();
                    $ret.e = CT_Double.a(c);
                    $ret.g = CT_Double.a(d);
                    return $ret;
                })());
                if (e.hasValue) {
                    j.c = CT_Double.a(e.value);
                }
                if (f.hasValue) {
                    j.a = CT_Double.a(f.value);
                }
                if (h) {
                    j.m = ((() => {
                        let $ret = new CT_LayoutMode();
                        $ret.b = 0;
                        return $ret;
                    })());
                    j.o = ((() => {
                        let $ret = new CT_LayoutMode();
                        $ret.b = 0;
                        return $ret;
                    })());
                }
                if (g) {
                    j.q = ((() => {
                        let $ret = new CT_LayoutTarget();
                        $ret.b = 0;
                        return $ret;
                    })());
                }
                i.a = j;
            }
            return i;
        }
        static ba(a, b, c = null) {
            let d = new CT_TextCharacterProperties_DML();
            if (b.height > 0) {
                d.r = toNullable(Number_$type, SerializationUtils.p(b.height));
            }
            if (nullableNotEquals(b._bold$i, null)) {
                d.d = toNullable(Boolean_$type, (nullableEquals(b._bold$i, true)));
            }
            if (nullableNotEquals(b._italic$i, null)) {
                d.i = toNullable(Boolean_$type, (nullableEquals(b._italic$i, true)));
            }
            if (nullableNotEquals(b._strikeout$i, null)) {
                d.q = toNullable(ST_TextStrikeType_$type, nullableEquals(b._strikeout$i, true) ? 1 : 0);
            }
            if (b.underlineStyle != -1) {
                d.s = DMLChartExtensions.a1(b.underlineStyle);
            }
            if (b.superscriptSubscriptStyle != -1) {
                switch (b.superscriptSubscriptStyle) {
                    case 0:
                        d.e = toNullable(ST_Percentage.$, ST_Percentage.b(0));
                        break;
                    case 2:
                        d.e = toNullable(ST_Percentage.$, ST_Percentage.b(-25000));
                        break;
                    case 1:
                        d.e = toNullable(ST_Percentage.$, ST_Percentage.b(30000));
                        break;
                }
            }
            let e = ((() => {
                let $ret = new CT_TextFont();
                $ret.d = stringIsNullOrEmpty(b.name) == false ? b.name : "+mn-lt";
                return $ret;
            })());
            let f = ((() => {
                let $ret = new CT_TextFont();
                $ret.d = "+mn-ea";
                return $ret;
            })());
            let g = ((() => {
                let $ret = new CT_TextFont();
                $ret.d = "+mn-cs";
                return $ret;
            })());
            d.c = e;
            d.b = f;
            d.a = g;
            let h = true;
            if (c != null) {
                ChartSerializerExtensions.a3(EG_FillProperties.$, d.ad, c, a);
                h = false;
            }
            if (h && WorkbookColorInfo.l_op_Inequality(b.colorInfo, null)) {
                d.ad.c = DMLChartExtensions.an(b.colorInfo, a);
            }
            return d;
        }
        static a9(a, b, c, d, e, f, g) {
            let h = new CT_TextBodyProperties_DML();
            if (b != 0) {
                h.af = toNullable(Number_$type, ST_Angle.l(b));
            }
            if (e != 0) {
                h.ar = toNullable(ST_TextVerticalType_$type, DMLChartExtensions.as(e));
            }
            if (d.hasValue) {
                h.at = toNullable(ST_TextVertOverflowType_$type, DMLChartExtensions.at(d.value));
            }
            h.av = toNullable(ST_TextWrappingType_$type, f ? 1 : 0);
            if (c.hasValue) {
                h.x = toNullable(ST_TextHorzOverflowType_$type, DMLChartExtensions.ar(c.value));
            }
            if (g.hasValue) {
                h.l = toNullable(ST_TextAnchoringType_$type, DMLChartExtensions.aq(g.value));
                if (nullableEquals(h.l, 1)) {
                    h.m = toNullable(Boolean_$type, true);
                }
            }
            return h;
        }
        static ay(a, b, c, d, e, f, g) {
            if (e == null && g == null) {
                return null;
            }
            let h = new CT_Tx();
            if (g != null) {
                h.a = ((() => {
                    let $ret = new CT_StrRef();
                    $ret.e = g._toString1(a._c);
                    return $ret;
                })());
            }
            if (e != null) {
                h.b = ChartSerializer.a7(b, c, e, f, a);
            }
            return h;
        }
        static a7(a, b, c, d, e, f = null, g = false) {
            let h = null;
            h = ((() => {
                let $ret = new CT_TextBody_DML();
                $ret.a = a;
                return $ret;
            })());
            let i = ((() => {
                let $ret = new CT_TextParagraph_DML();
                $ret.c = ChartSerializer.bb(e, b, d);
                return $ret;
            })());
            i.c.a = ChartSerializer.ba(e, b, f);
            if (g) {
                i.a = typeCast(CT_TextCharacterProperties_DML.$, i.c.a);
            }
            h.d.add(i);
            if (c != null) {
                let j = c._c();
                if (j.length > 0) {
                    for (let l = 0; l < j.length; l++) {
                        let k = j[l];
                        let m = null;
                        if (k.h) {
                            m = k.d(e.workbook);
                        }
                        let n = ((() => {
                            let $ret = new CT_RegularTextRun_DML();
                            $ret.a = m != null ? ChartSerializer.ba(e, m) : null;
                            $ret.c = k.l;
                            return $ret;
                        })());
                        i.f.add(((() => {
                            let $ret = new EG_TextRun();
                            $ret.a = n;
                            return $ret;
                        })()));
                    }
                }
                else {
                    let o = ((() => {
                        let $ret = new CT_RegularTextRun_DML();
                        $ret.c = c.unformattedString;
                        return $ret;
                    })());
                    i.f.add(((() => {
                        let $ret = new EG_TextRun();
                        $ret.a = o;
                        return $ret;
                    })()));
                }
            }
            return h;
        }
        static a8(a, b, c, d, e) {
            return ChartSerializer.a7(b, c, null, e, a, d);
        }
        static bb(a, b, c) {
            let d = ((() => {
                let $ret = new CT_TextParagraphProperties_DML();
                $ret.a = ChartSerializer.ba(a, b);
                $ret.m = DMLChartExtensions.a2(c);
                return $ret;
            })());
            return d;
        }
        static a3(a, b) {
            return ChartSerializer.a4(a, b, toNullable(BorderLineStyle_$type, b.lineStyle));
        }
        static a4(a, b, c) {
            let d = b != null ? b.widthInPoints : 0.75;
            let e = ExcelUtils.dh(d);
            let f = ((() => {
                let $ret = new CT_LineProperties_DML();
                $ret.h = toNullable(ST_LineWidth.$, null);
                $ret.q = toNullable(Number_$type, e);
                return $ret;
            })());
            if (c.hasValue) {
                f.l.b = ((() => {
                    let $ret = new CT_PresetLineDashProperties();
                    $ret.a = DMLChartExtensions.ay(c.value);
                    return $ret;
                })());
            }
            if (b != null) {
                let g = typeCast(ChartSolidFill.$, b.fill);
                let h = g == null ? typeCast(ChartGradientFill.$, b.fill) : null;
                let i = g == null && h == null ? typeCast(ChartEmptyFill.$, b.fill) : null;
                if (g != null) {
                    f.n.c = ChartSerializer.a6(a, g);
                }
                else if (h != null) {
                    f.n.a = ChartSerializer.a2(a, h);
                }
                else if (i != null) {
                    f.n.d = ChartSerializer.bd(a, i);
                }
            }
            return f;
        }
        static a5(a, b, c, d) {
            if (d.hasValue == false && c != null && c._ai.hasValue) {
                d = toNullable(BorderLineStyle_$type, DMLChartExtensions.d(c._ai.value));
            }
            let e = new CT_ShapeProperties_DML();
            let f = typeCast(ChartSolidFill.$, b);
            let g = f == null ? typeCast(ChartGradientFill.$, b) : null;
            let h = g == null && f == null ? typeCast(ChartEmptyFill.$, b) : null;
            if (f != null) {
                let i = ChartSerializer.a6(a, f);
                e.l.c = i;
            }
            else if (g != null) {
                let j = ChartSerializer.a2(a, g);
                e.l.a = j;
            }
            else if (h != null) {
                let k = ChartSerializer.bd(a, h);
                e.l.d = k;
            }
            if (c != null) {
                e.a = ChartSerializer.a4(a, c, d);
            }
            e.j.b = new CT_EffectList();
            return e;
        }
        static aw(a, b) {
            if (b == null) {
                return null;
            }
            let c = ChartSerializer.a9(a, b.rotation, toNullable(TextHorizontalOverflow_$type, b.horizontalOverflow), toNullable(TextVerticalOverflow_$type, b.verticalOverflow), b.textDirection, b.wrapText, toNullable(VerticalTitleAlignment_$type, b.verticalAlignment));
            let d = ((() => {
                let $ret = new CT_Title();
                $ret.a = CT_Boolean.b(b.overlay);
                $ret.c = ChartSerializer.x(a, b.position, b.left, b.top, toNullable(Number_$type, null), toNullable(Number_$type, null));
                $ret.g = ChartSerializer.a5(a, b.fill, b.border, toNullable(BorderLineStyle_$type, null));
                $ret.e = ChartSerializer.ay(a, c, b.defaultFont, null, b.text, b.readingOrder, b._a5);
                $ret.i = ChartSerializer.a8(a, c, b.defaultFont, null, b.readingOrder);
                return $ret;
            })());
            return d;
        }
        static ax(a, b) {
            if (b == null) {
                return null;
            }
            let c = ((() => {
                let $ret = new CT_Trendline();
                $ret.q = ((() => {
                    let $ret = new CT_TrendlineType();
                    $ret.b = DMLChartExtensions.am(b.trendlineType);
                    return $ret;
                })());
                $ret.e = b.backward != 0 ? ((() => {
                    let $ret = new CT_Double();
                    $ret.f = b.backward;
                    return $ret;
                })()) : null;
                $ret.g = b.forward != 0 ? ((() => {
                    let $ret = new CT_Double();
                    $ret.f = b.forward;
                    return $ret;
                })()) : null;
                $ret.w = b.name;
                return $ret;
            })());
            if (b._intercept$i.hasValue) {
                c.i = CT_Double.a(b._intercept$i.value);
            }
            let d = b.label;
            if (d != null) {
                let e = new CT_TrendlineLbl();
                e.a = ChartSerializer.x(a, d.position, d.left, d.top, toNullable(Number_$type, null), toNullable(Number_$type, null), false, false);
                if (stringIsNullOrEmpty(d.numberFormat) == false) {
                    e.c = ChartSerializer.ag(d);
                }
                let f = ChartSerializer.a9(a, d.rotation, toNullable(TextHorizontalOverflow_$type, d.horizontalOverflow), toNullable(TextVerticalOverflow_$type, d.verticalOverflow), d.textDirection, d.wrapText, toNullable(VerticalTitleAlignment_$type, d.verticalAlignment));
                e.e = ChartSerializer.ay(a, f, d.defaultFont, null, d.text, d.readingOrder, d._a5);
                e.i = ChartSerializer.a8(a, f, d.defaultFont, null, d.readingOrder);
                if (d.fill != null || d.border != null) {
                    e.g = ChartSerializer.a5(a, d.fill, d.border, toNullable(BorderLineStyle_$type, null));
                }
                c.o = e;
            }
            c.a = CT_Boolean.b(d != null ? d.displayEquation : false);
            c.c = CT_Boolean.b(d != null ? d.displayRSquared : false);
            switch (b.trendlineType) {
                case 4:
                    c.k = ((() => {
                        let $ret = new CT_Order();
                        $ret.b = b.order;
                        return $ret;
                    })());
                    break;
                case 3:
                    c.m = ((() => {
                        let $ret = new CT_Period();
                        $ret.b = b.period;
                        return $ret;
                    })());
                    break;
            }
            if (b.line != null) {
                c.s = new CT_ShapeProperties_DML();
                let g = DMLChartExtensions.d(b.line.lineStyle);
                c.s.a = ChartSerializer.a4(a, b.line, toNullable(BorderLineStyle_$type, g));
            }
            return c;
        }
        static bj(a, b) {
            if (b == null || b._bx == false) {
                return null;
            }
            let c = b.chart;
            if (c != null && WorksheetChart._f6(c.chartType)) {
                return null;
            }
            let d = new List$1(CT_Trendline.$, 2, b._trendlineCollection$i.count);
            for (let e of fromEnum(b._trendlineCollection$i)) {
                let f = ChartSerializer.ax(a, e);
                if (f != null) {
                    d.add(f);
                }
            }
            return d;
        }
        static u(a, b) {
            if (b == null || b.showDataLabels == false) {
                return null;
            }
            let c = ((() => {
                let $ret = new CT_DLbls();
                $ret.b = new CT_ExtensionList();
                return $ret;
            })());
            let d = b._dataPointCollection$i;
            for (let e = 0; e < d.count; e++) {
                let f = d.item(e);
                if (f.dataLabel == null) {
                    continue;
                }
                let g = ChartSerializer.t(f.dataLabel, b, e, a);
                c.f.add(g);
            }
            let h = b.dataLabels;
            let i = h != null ? h.defaultFont : null;
            if (h != null) {
                ChartSerializerExtensions.a(c.e.d, h, b, a);
            }
            c.e.a = CT_Boolean.b(h.showLeaderLines);
            let j = ((() => {
                let $ret = new CT_Extension_DataLabels();
                $ret.b = "{CE6537A1-D6FC-4f65-9D91-7224C49458BB}";
                $ret.g = CT_Boolean.b(b.dataLabels.showLeaderLines);
                $ret.f = CT_Boolean.b(stringIsNullOrEmpty(h._ea) == false);
                return $ret;
            })());
            if (b.leaderLines != null) {
                j.h = ChartSerializer.r(a, b.chart, b.leaderLines);
            }
            c.b.e.add(j);
            return c;
        }
        static t(a, b, c, d) {
            let e = new CT_DLbl();
            e.b = CT_UnsignedInt.a(intSToU(c));
            ChartSerializerExtensions.a(e.d.d, a, b, d);
            if (a.left > 0 || a.top > 0) {
                e.d.a = ((() => {
                    let $ret = new CT_Layout();
                    $ret.a = ((() => {
                        let $ret = new CT_ManualLayout();
                        $ret.e = CT_Double.a(a.left);
                        $ret.g = CT_Double.a(a.height);
                        return $ret;
                    })());
                    return $ret;
                })());
            }
            let f = null;
            if (a.width > 0 || a.height > 0) {
                f = ((() => {
                    let $ret = new CT_Layout();
                    $ret.a = ((() => {
                        let $ret = new CT_ManualLayout();
                        $ret.c = CT_Double.a(a.width);
                        $ret.a = CT_Double.a(a.height);
                        return $ret;
                    })());
                    return $ret;
                })());
            }
            let g = stringIsNullOrEmpty(b.dataLabels._ea) == false;
            if (f != null || g) {
                e.e = new List$1(CT_Extension.$, 0);
                let h = ((() => {
                    let $ret = new CT_Extension_DataLabels();
                    $ret.j = f;
                    $ret.f = CT_Boolean.b(g);
                    return $ret;
                })());
                e.e.add(h);
            }
            if (a.text != null) {
                let i = ChartSerializer.a9(d, a.rotation, toNullable(TextHorizontalOverflow_$type, a.horizontalOverflow), toNullable(TextVerticalOverflow_$type, a.verticalOverflow), a.textDirection, a.wrapText, toNullable(VerticalTitleAlignment_$type, null));
                e.d.b = ChartSerializer.ay(d, i, a._cl, null, a.text, a.readingOrder, a._a5);
            }
            return e;
        }
        static ac(a, b, c, d, e, f) {
            let g = null;
            let h = toNullable(MarkerStyle_$type, null);
            if (f.hasValue) {
                h = WorksheetChart._iz(f.value);
            }
            if (b == -4105 && h.hasValue) {
                b = h.value;
            }
            let i = b != -4105 || c.hasValue || d != null || e != null;
            if (i) {
                g = ((() => {
                    let $ret = new CT_Marker_Chart();
                    $ret.e = ChartSerializer.a5(a, d, e, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
                if (c.hasValue) {
                    g.a = ((() => {
                        let $ret = new CT_MarkerSize();
                        $ret.b = c.value;
                        return $ret;
                    })());
                }
                if (b != -4105) {
                    g.c = ((() => {
                        let $ret = new CT_MarkerStyle();
                        $ret.a = DMLChartExtensions.ap(b);
                        return $ret;
                    })());
                }
            }
            return g;
        }
        static ag(a) {
            if (a == null) {
                return null;
            }
            return ChartSerializer.ah(a.numberFormat, a.numberFormatLinked);
        }
        static ah(a, b, c = false) {
            if (stringIsNullOrEmpty(a)) {
                if (c) {
                    return null;
                }
                else {
                    a = "General";
                }
            }
            else {
            }
            let d = ((() => {
                let $ret = new CT_NumFmt_Chart();
                $ret.c = a;
                $ret.a = b;
                return $ret;
            })());
            return d;
        }
        static az(a, b) {
            if (a == null) {
                return null;
            }
            let c = ((() => {
                let $ret = new CT_UpDownBars();
                $ret.a = ((() => {
                    let $ret = new CT_GapAmount();
                    $ret.c = a.gapWidth;
                    return $ret;
                })());
                return $ret;
            })());
            let d = a.upBar;
            let e = a.downBar;
            c.e = ((() => {
                let $ret = new CT_UpDownBar();
                $ret.a = ChartSerializer.a5(b, d.fill, d.border, toNullable(BorderLineStyle_$type, null));
                return $ret;
            })());
            c.c = ((() => {
                let $ret = new CT_UpDownBar();
                $ret.a = ChartSerializer.a5(b, e.fill, e.border, toNullable(BorderLineStyle_$type, null));
                return $ret;
            })());
            return c;
        }
        static bk(a, b = toNullable(AxisGroup_$type, null), c = true) {
            let d = new List$1(CT_UnsignedInt.$, 0);
            for (let e = 0; e < a.count; e++) {
                let f = a._inner[e];
                if (c && f.type == 3) {
                    continue;
                }
                if (b.hasValue && f.axisGroup != b.value) {
                    continue;
                }
                d.add(((() => {
                    let $ret = new CT_UnsignedInt();
                    $ret.g = intSToU(f._cg);
                    return $ret;
                })()));
            }
            return d;
        }
    }
    ChartSerializer.$t = /*@__PURE__*/ markType(ChartSerializer, 'ChartSerializer');
    return ChartSerializer;
})();
/**
 * @hidden
 */
export let ChartExSerializer = /*@__PURE__*/ (() => {
    class ChartExSerializer extends Base {
        constructor(a) {
            super();
            this.k = null;
            this.k = a;
        }
        p(a, b, c, d) {
            if (a == null) {
                return;
            }
            ChartExSerializer.r(a);
            let e = this.k;
            let f = e != null ? e.workbook : null;
            if (f == null) {
                return;
            }
            let g = new CT_ChartSpaceEx();
            let h = c._as;
            g.b = ChartExSerializer.b(a, h);
            g.d = new CT_ChartEx();
            if (a.chartTitle != null) {
                g.d.a = ChartExSerializer.c(a.chartTitle, e);
            }
            g.d.e = new CT_PlotAreaEx();
            g.d.e.a = new CT_PlotAreaRegion();
            let i = a.chartArea.fill;
            let j = a.chartArea.border;
            if (i != null || j != null) {
                g.j = ChartSerializer.a5(e, i, j, toNullable(BorderLineStyle_$type, null));
            }
            let k = a.plotArea.fill;
            let l = a.plotArea.border;
            if (k != null || l != null) {
                let m = ((() => {
                    let $ret = new CT_PlotSurface();
                    $ret.a = ChartSerializer.a5(e, k, l, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
                g.d.e.a.a = m;
            }
            if (a.legend != null) {
                g.d.c = ChartExSerializer.f(a.legend, e);
            }
            ;
            let n = ChartExSerializer.l(a, g.b, e, c);
            for (let o of fromEnum(n)) {
                g.d.e.a.c.add(o);
            }
            ChartExExtensions.u(g.d.e.d, a, e, c);
            ChartExExtensions.ag(g, b, c, d, ChartExElements.m);
        }
        static l(a, b, c, d) {
            let e = new Dictionary$2(Series.$, CT_Series.$, 0);
            for (let f = 0; f < a._seriesCollection$i.count; f++) {
                let g = a._seriesCollection$i.item(f);
                let h = ChartExSerializer.h(g, f, b, c, d);
                e.addItem(g, h);
            }
            for (let i of fromEnum(a._seriesCollection$i)) {
                if (i.owningSeries != null) {
                    let j = null;
                    let k = null;
                    let l = e.tryGetValue(i, j);
                    j = l.p1;
                    let m = e.tryGetValue(i.owningSeries, k);
                    k = m.p1;
                    if (j != null && k != null) {
                        j.y = toNullable(Number_$type, intSToU(k.t));
                    }
                }
            }
            return e.values;
        }
        static h(a, b, c, d, e) {
            if (a == null) {
                return null;
            }
            let f = a.chart;
            let g = toNullable(Number_$type, null);
            let h = null;
            if (((() => { let i = c.b.tryGetValue(a, h); h = i.p1; return i.ret; })())) {
                g = toNullable(Number_$type, h.f);
            }
            let i = ((() => {
                let $ret = new CT_Series();
                $ret.m = ChartExExtensions.p(a.chartType);
                $ret.t = b;
                return $ret;
            })());
            if (g.hasValue) {
                i.a = ((() => {
                    let $ret = new CT_DataId();
                    $ret.b = g.value;
                    return $ret;
                })());
            }
            let j = ChartExSerializer.m(a, f);
            if (j.hasValue) {
                i.q.add(j.value);
            }
            let k = a.name;
            if (k != null && k._d != null) {
                let l = null;
                if (((() => { let m = e._as.tryGetValue(k._d, l); l = m.p1; return m.ret; })())) {
                    i.g = ((() => {
                        let $ret = new CT_Text();
                        $ret.a = ((() => {
                            let $ret = new CT_TextData();
                            $ret.a = ((() => {
                                let $ret = new CT_Formula();
                                $ret.b = 0;
                                $ret.d = l;
                                return $ret;
                            })());
                            return $ret;
                        })());
                        return $ret;
                    })());
                }
            }
            let m = a.fill;
            let n = null;
            if (ChartExDeserializer.e(a.chartType)) {
                n = a.line;
            }
            else {
                n = a.border;
            }
            if (m != null || n != null) {
                i.o = ChartSerializer.a5(d, m, n, toNullable(BorderLineStyle_$type, null));
            }
            i.e = ChartExSerializer.i(a, f.chartType, d);
            for (let o = 0; o < a._dataPointCollection$i.count; o++) {
                let p = a._dataPointCollection$i.item(o);
                if (p.fill == null && p.border == null) {
                    continue;
                }
                let q = ((() => {
                    let $ret = new CT_DataPoint();
                    $ret.d = intSToU(o);
                    $ret.a = ChartSerializer.a5(d, p.fill, p.border, toNullable(BorderLineStyle_$type, null));
                    return $ret;
                })());
                i.r.add(q);
            }
            if (a.showDataLabels) {
                let r = a.dataLabels;
                i.c = ((() => {
                    let $ret = new CT_DataLabels();
                    $ret.g = toNullable(ST_DataLabelPos_$type, ChartExExtensions.k(DMLChartExtensions.f(a.dataLabels.labelPosition, a.chartType)));
                    $ret.b = ChartExSerializer.g(r.numberFormat, r.numberFormatLinked);
                    $ret.a = ChartExSerializer.e(r);
                    $ret.h = r.separator;
                    return $ret;
                })());
                let s = ChartSerializer.a9(d, r.rotation, toNullable(TextHorizontalOverflow_$type, r.horizontalOverflow), toNullable(TextVerticalOverflow_$type, r.verticalOverflow), r.textDirection, r.wrapText, toNullable(VerticalTitleAlignment_$type, r.verticalAlignment));
                i.c.d = ChartSerializer.a8(d, s, r.defaultFont, null, r.readingOrder);
                if (r.fill != null || r.border != null) {
                    i.c.c = ChartSerializer.a5(d, r.fill, r.border, toNullable(BorderLineStyle_$type, null));
                }
                let t = null;
                for (let u = 0; u < a._dataPointCollection$i.count; u++) {
                    let v = a._dataPointCollection$i.item(u).dataLabel;
                    if (v == null) {
                        continue;
                    }
                    if (v.isDeleted) {
                        if (t == null) {
                            t = new List$1(Number_$type, 0);
                        }
                        t.add(u);
                        continue;
                    }
                }
                if (t != null && t.count > 0) {
                    for (let w of fromEnum(t)) {
                        i.c.j.add(((() => {
                            let $ret = new CT_DataLabelHidden();
                            $ret.b = intSToU(w);
                            return $ret;
                        })()));
                    }
                }
                for (let x = 0; x < a._dataPointCollection$i.count; x++) {
                    let y = a._dataPointCollection$i.item(x);
                    let z = y.dataLabel;
                    if (z == null) {
                        continue;
                    }
                    let aa = ChartExSerializer.d(z, a, x, d);
                    i.c.i.add(aa);
                }
            }
            if (a.chartType == 121) {
                ChartExSerializer.q(a, i, d, e);
            }
            return i;
        }
        static q(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            let e = a.geographicMapSettings;
            if (e == null) {
                e = GeographicMapSettings._c();
            }
            let f = ((() => {
                let $ret = new CT_Geography();
                $ret.h = e.attribution;
                $ret.j = e.cultureLanguage;
                $ret.l = e.cultureRegion;
                $ret.a = ((() => {
                    let $ret = new CT_GeoCache();
                    $ret.b = null;
                    $ret.a = new CT_Clear();
                    $ret.c = e._m;
                    return $ret;
                })());
                return $ret;
            })());
            if (e._projection$i.hasValue) {
                f.d = toNullable(ST_GeoProjectionType_$type, ChartExExtensions.m(e._projection$i.value));
            }
            if (e._area$i.hasValue) {
                f.f = toNullable(ST_GeoMappingLevel_$type, ChartExExtensions.l(e._area$i.value));
            }
            b.e.g = ((() => {
                let $ret = new CT_RegionLabelLayout();
                $ret.a = ChartExExtensions.o(e.labels);
                return $ret;
            })());
            if (e.colors != null) {
                if (e.colors.seriesColor == 1) {
                    b.i = ((() => {
                        let $ret = new CT_ValueColorPositions();
                        $ret.h = toNullable(Number_$type, 3);
                        return $ret;
                    })());
                }
                let g = e.colors.minimum;
                let h = e.colors.midpoint;
                let i = e.colors.maximum;
                if (WorkbookColorInfo.l_op_Inequality(g, null) || WorkbookColorInfo.l_op_Inequality(h, null) || WorkbookColorInfo.l_op_Inequality(i, null)) {
                    b.k = new CT_ValueColors();
                    if (WorkbookColorInfo.l_op_Inequality(g, null)) {
                        b.k.e = new CT_SolidColorFillProperties();
                        DMLChartExtensions.a9(b.k.e.b, g, c);
                    }
                    if (WorkbookColorInfo.l_op_Inequality(h, null)) {
                        b.k.c = new CT_SolidColorFillProperties();
                        DMLChartExtensions.a9(b.k.c.b, h, c);
                    }
                    if (WorkbookColorInfo.l_op_Inequality(i, null)) {
                        b.k.a = new CT_SolidColorFillProperties();
                        DMLChartExtensions.a9(b.k.a.b, i, c);
                    }
                }
            }
            b.e.c = f;
        }
        static m(a, b) {
            let c = toNullable(Number_$type, null);
            switch (b.chartType) {
                case 114:
                case 117:
                case 116:
                case 120:
                case 115:
                    c = toNullable(Number_$type, a._z._cg);
                    break;
                case 118:
                case 119:
                case 121: break;
            }
            if (c.hasValue) {
                return toNullable(ST_AxisId.$, ((() => {
                    let $ret = new ST_AxisId();
                    $ret.h = intSToU(c.value);
                    return $ret;
                })()));
            }
            return toNullable(ST_AxisId.$, null);
        }
        static g(a, b) {
            return ((() => {
                let $ret = new CT_NumberFormat();
                $ret.c = a;
                $ret.a = toNullable(Boolean_$type, b);
                return $ret;
            })());
        }
        static d(a, b, c, d) {
            if (a == null) {
                return null;
            }
            let e = ((() => {
                let $ret = new CT_DataLabel();
                $ret.i = intSToU(c);
                $ret.g = toNullable(ST_DataLabelPos_$type, ChartExExtensions.k(DMLChartExtensions.f(a.labelPosition, b.chartType)));
                $ret.b = ChartExSerializer.g(a.numberFormat, a.numberFormatLinked);
                $ret.a = ChartExSerializer.e(a);
                $ret.h = a.separator;
                return $ret;
            })());
            let f = a.fill;
            let g = a.border;
            if (f != null || g != null) {
                e.c = ChartSerializer.a5(d, f, g, toNullable(BorderLineStyle_$type, null));
            }
            let h = ChartSerializer.a9(d, a.rotation, toNullable(TextHorizontalOverflow_$type, a.horizontalOverflow), toNullable(TextVerticalOverflow_$type, a.verticalOverflow), a.textDirection, a.wrapText, toNullable(VerticalTitleAlignment_$type, a.verticalAlignment));
            if (h != null) {
                h.j.c = new CT_TextShapeAutofit();
            }
            e.d = ChartSerializer.a7(h, a.defaultFont, a.text, a.readingOrder, d);
            if (e.d != null) {
                e.d.b = new CT_TextListStyle_DML();
            }
            return e;
        }
        static e(a) {
            if (a == null) {
                return null;
            }
            let b = typeCast(SeriesDataLabels.$, a);
            if (b == null && nullableEquals(a._showCategoryName$i, null) && nullableEquals(a._showSeriesName$i, null) && nullableEquals(a._showValue$i, null)) {
                return null;
            }
            let c = new CT_DataLabelVisibilities();
            if (nullableNotEquals(a._showCategoryName$i, null)) {
                c.a = toNullable(Boolean_$type, (nullableEquals(a._showCategoryName$i, true)));
            }
            if (nullableNotEquals(a._showSeriesName$i, null)) {
                c.c = toNullable(Boolean_$type, (nullableEquals(a._showSeriesName$i, true)));
            }
            if (nullableNotEquals(a._showValue$i, null)) {
                c.e = toNullable(Boolean_$type, (nullableEquals(a._showValue$i, true)));
            }
            return c;
        }
        static i(a, b, c) {
            if (WorksheetChart._f9(b) == false) {
            }
            let d = new CT_SeriesLayoutProperties();
            switch (a.chartType) {
                case 114:
                    let e = a.boxAndWhiskerSettings;
                    let f = e != null ? e.showMeanLine : false;
                    let g = e != null ? e.showMeanMarkers : true;
                    let h = e != null ? e.showInnerPoints : false;
                    let i = e != null ? e.showOutlierPoints : true;
                    d.i = ((() => {
                        let $ret = new CT_SeriesElementVisibilities();
                        $ret.d = toNullable(Boolean_$type, f);
                        $ret.f = toNullable(Boolean_$type, g);
                        $ret.h = toNullable(Boolean_$type, h);
                        $ret.j = toNullable(Boolean_$type, i);
                        return $ret;
                    })());
                    let j = (e != null && e.quartileCalculation == 0) ? 0 : 1;
                    d.k = ((() => {
                        let $ret = new CT_Statistics();
                        $ret.a = toNullable(ST_QuartileMethod_$type, j);
                        return $ret;
                    })());
                    break;
                case 51:
                    let k = a.axisBinning;
                    if (k != null) {
                        d.b = new CT_Binning();
                        d.b.h = toNullable(ST_IntervalClosedSide_$type, (k._a == 0) ? 0 : 1);
                        if (k._binWidth$i.hasValue) {
                            d.b.a = CT_Double.a(k._binWidth$i.value);
                        }
                        if (k._numberOfBins$i.hasValue) {
                            d.b.b = CT_UnsignedInt.a(intSToU(k._numberOfBins$i.value));
                        }
                        if (k._overflowThreshold$i.hasValue) {
                            d.b.d = ((() => {
                                let $ret = new ST_DoubleOrAutomatic();
                                $ret.b = toNullable(Number_$type, k._overflowThreshold$i.value);
                                return $ret;
                            })());
                        }
                        else if (k.overflow) {
                            d.b.d = new ST_DoubleOrAutomatic();
                        }
                        if (k._underflowThreshold$i.hasValue) {
                            d.b.f = ((() => {
                                let $ret = new ST_DoubleOrAutomatic();
                                $ret.b = toNullable(Number_$type, k._underflowThreshold$i.value);
                                return $ret;
                            })());
                        }
                        else if (k.underflow) {
                            d.b.f = new ST_DoubleOrAutomatic();
                        }
                    }
                    else {
                        d.a = new CT_Aggregation();
                    }
                    break;
                case 119:
                    d.e = ((() => {
                        let $ret = new CT_ParentLabelLayout();
                        $ret.a = ChartExExtensions.n(a.dataLabels.parentLabelLayout);
                        return $ret;
                    })());
                    break;
                case 120:
                    d.i = ((() => {
                        let $ret = new CT_SeriesElementVisibilities();
                        $ret.b = toNullable(Boolean_$type, a.showWaterfallConnectorLines);
                        return $ret;
                    })());
                    let l = false;
                    for (let m = 0; m < a._dataPointCollection$i.count; m++) {
                        let n = a._dataPointCollection$i.item(m);
                        if (n.setAsTotal == true) {
                            l = true;
                            break;
                        }
                    }
                    if (l) {
                        d.m = new CT_Subtotals();
                        for (let o = 0; o < a._dataPointCollection$i.count; o++) {
                            let p = a._dataPointCollection$i.item(o);
                            if (p.setAsTotal == false) {
                                continue;
                            }
                            d.m.a.add(intSToU(o));
                        }
                    }
                    break;
                case 115:
                    d = null;
                    break;
            }
            return d;
        }
        static c(a, b) {
            if (a == null) {
                return null;
            }
            let c = ((() => {
                let $ret = new CT_ChartTitle();
                $ret.k = toNullable(Boolean_$type, a.overlay);
                return $ret;
            })());
            let d;
            let e;
            let f = ChartExSerializer.n(a.position, d, e);
            d = f.p1;
            e = f.p2;
            c.l = toNullable(ST_SidePos_$type, d);
            c.j = toNullable(ST_PosAlign_$type, e);
            ChartExSerializer.o(c, a, b, false);
            return c;
        }
        static a(a, b) {
            if (a == null) {
                return null;
            }
            let c = new CT_AxisTitle();
            ChartExSerializer.o(c, a, b, true);
            return c;
        }
        static o(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (b._cc() == false) {
                return;
            }
            a.b = ChartSerializer.a5(c, b.fill, b.border, toNullable(BorderLineStyle_$type, null));
            let e = ChartSerializer.a9(c, b.rotation, toNullable(TextHorizontalOverflow_$type, b.horizontalOverflow), toNullable(TextVerticalOverflow_$type, b.verticalOverflow), b.textDirection, b.wrapText, toNullable(VerticalTitleAlignment_$type, b.verticalAlignment));
            let f = b._b7;
            a.a = ((() => {
                let $ret = new CT_Text();
                $ret.b = ChartSerializer.a7(e, f, b.text, b.readingOrder, c);
                return $ret;
            })());
        }
        static n(a, b, c) {
            b = 1;
            c = 1;
            switch (a) {
                case -4105:
                case -4114:
                case 100: break;
                case 101:
                    b = 0;
                    c = 1;
                    break;
                case 102:
                    b = 2;
                    c = 1;
                    break;
                case 103:
                    b = 3;
                    c = 1;
                    break;
                case 104:
                    b = 1;
                    c = 0;
                    break;
                case 105:
                    b = 1;
                    c = 2;
                    break;
                case 106:
                    b = 3;
                    c = 0;
                    break;
                case 107:
                    b = 3;
                    c = 2;
                    break;
                case 108:
                    b = 0;
                    c = 0;
                    break;
                case 109:
                    b = 0;
                    c = 2;
                    break;
                case 110:
                    b = 2;
                    c = 0;
                    break;
                case 111:
                    b = 2;
                    c = 2;
                    break;
            }
            return {
                p1: b,
                p2: c
            };
        }
        static b(a, b) {
            let c = a._seriesCollection$i;
            let d = ((() => {
                let $ret = new CT_ChartData();
                $ret.b = new Dictionary$2(Series.$, CT_Data.$, 0);
                return $ret;
            })());
            for (let e of fromEnum(c)) {
                let f = e._b2 ? e.xValues : null;
                let g = e._b1 ? e.values : null;
                if (f == null && g == null) {
                    continue;
                }
                let h = new CT_Data();
                if (f != null) {
                    let i = null;
                    if (((() => { let j = b.tryGetValue(f._f, i); i = j.p1; return j.ret; })()) == false) {
                    }
                    else {
                        let j = f._ae.hasValue && f._ae.value ? 1 : 0;
                        h.b = ((() => {
                            let $ret = new CT_StringDimension();
                            $ret.c = 0;
                            $ret.a = ((() => {
                                let $ret = new CT_Formula();
                                $ret.b = j;
                                $ret.d = i;
                                return $ret;
                            })());
                            return $ret;
                        })());
                    }
                }
                if (g != null) {
                    let k = null;
                    if (((() => { let l = b.tryGetValue(g._f, k); k = l.p1; return l.ret; })()) == false) {
                    }
                    else {
                        let l = 0;
                        if (g._v) {
                            h.c = ((() => {
                                let $ret = new CT_StringDimension();
                                $ret.c = 1;
                                $ret.a = ((() => {
                                    let $ret = new CT_Formula();
                                    $ret.b = l;
                                    $ret.d = k;
                                    return $ret;
                                })());
                                return $ret;
                            })());
                        }
                        else {
                            let m = ChartExSerializer.j(e.chartType);
                            h.a = ((() => {
                                let $ret = new CT_NumericDimension();
                                $ret.c = m;
                                $ret.a = ((() => {
                                    let $ret = new CT_Formula();
                                    $ret.b = l;
                                    $ret.d = k;
                                    return $ret;
                                })());
                                return $ret;
                            })());
                        }
                    }
                }
                let n = d.c.count;
                h.f = intSToU(n);
                d.b.addItem(e, h);
                d.c.add(h);
            }
            return d;
        }
        static j(a) {
            switch (a) {
                case 118:
                case 119: return 3;
                case 121: return 4;
                default: return 0;
            }
        }
        static f(a, b) {
            if (a == null) {
                return null;
            }
            let c = new CT_LegendEx();
            let d = ChartExExtensions.s(a.position);
            if (d != null) {
                c.l = toNullable(ST_SidePos_$type, d.c);
                c.h = toNullable(ST_PosAlign_$type, d.d);
            }
            c.j = toNullable(Boolean_$type, a.overlay);
            if (a.fill != null) {
                c.d = ChartSerializer.a5(b, a.fill, a.border, toNullable(BorderLineStyle_$type, null));
            }
            if (a._as()) {
                let e = ChartSerializer.a9(b, a.rotation, toNullable(TextHorizontalOverflow_$type, 0), toNullable(TextVerticalOverflow_$type, 0), a.textDirection, false, toNullable(VerticalTitleAlignment_$type, -4108));
                c.e = ChartSerializer.a7(e, a._an, null, -5002, b, a.defaultFontFill);
            }
            return c;
        }
        static r(a) {
            let b = a.chartType;
            let c = a._seriesCollection$i.count > 0 ? a._seriesCollection$i.item(0) : null;
            let d = a._seriesCollection$i.count > 1 ? a._seriesCollection$i.item(1) : null;
            let e = c != null && d != null ? [c.chartType, d.chartType] : c != null ? [c.chartType] : new Array(0);
            let f = null;
            switch (b) {
                case 116:
                    if (e.length < 2) {
                        f = ExcelUtils.ef("LE_WorksheetChart_Save_Series_Pareto");
                    }
                    else {
                        let g = e[0] == 51 || e[1] == 51;
                        let h = e[0] == 116 || e[1] == 116;
                        if (g == false || h == false) {
                            f = ExcelUtils.ef("LE_WorksheetChart_Save_Series_Pareto");
                        }
                    }
                    break;
                case 117:
                    if (e.length < 1 || e[0] != 51) {
                        f = ExcelUtils.eg("LE_WorksheetChart_Save_Series", enumGetBox(ChartType_$type, b));
                    }
                    break;
                default:
                    if (e.length < 1 || e[0] != b) {
                        f = ExcelUtils.eg("LE_WorksheetChart_Save_Series", enumGetBox(ChartType_$type, b));
                    }
                    break;
            }
            if (f != null) {
                throw new BaseError(1, f);
            }
        }
    }
    ChartExSerializer.$t = /*@__PURE__*/ markType(ChartExSerializer, 'ChartExSerializer');
    return ChartExSerializer;
})();
/**
 * @hidden
 */
export let ComboChartSerializer = /*@__PURE__*/ (() => {
    class ComboChartSerializer extends Base {
        static e(a) {
            let b = new Dictionary$2(String_$type, SeriesGroup.$, 0);
            let c = new Dictionary$2(Series.$, Number_$type, 0);
            for (let d = 0; d < a.count; d++) {
                c.addItem(a.item(d), d);
            }
            for (let e = 0; e < a.count; e++) {
                let f = a.item(e);
                let g;
                let h = ((() => { let i = ComboChartGroup._as(f.chartType, f.axisGroup, g); g = i.p2; return i.ret; })());
                if (g == 0) {
                    continue;
                }
                let i = null;
                if (((() => { let j = b.tryGetValue(h, i); i = j.p1; return j.ret; })()) == false) {
                    i = new SeriesGroup(g, f.axisGroup);
                    b.addItem(h, i);
                }
                let j = a._aq(f);
                i.h(f, c.item(f), j.hasValue ? j.value : e);
            }
            return b.values;
        }
        static g(a, b, c, d, e, f) {
            let g = e.b;
            let h = false;
            let i = ((() => { let j = ComboChartSerializer.d(g, h); h = j.p1; return j.ret; })());
            let j = a._ft(g, e.a);
            switch (g) {
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    let k = ComboChartSerializer.c(g);
                    let l = new CT_BarChart();
                    let m = h ? 0 : i ? 3 : 1;
                    l.f.a = CT_Boolean.b(true);
                    l.f.c = ((() => {
                        let $ret = new CT_BarGrouping();
                        $ret.b = m;
                        return $ret;
                    })());
                    let n = k ? 1 : 0;
                    l.f.b = ((() => {
                        let $ret = new CT_BarDir();
                        $ret.b = n;
                        return $ret;
                    })());
                    for (let o = 0; o < e.d.count; o++) {
                        let p = e.d._inner[o];
                        let q = e.g(p);
                        let r = ChartSerializer.k(a, p, q, false, f);
                        l.f.f.add(r);
                    }
                    l.g = ComboChartSerializer.f(c, e.a, true);
                    if (j != null) {
                        if (j._gapWidth$i.hasValue) {
                            l.a = ((() => {
                                let $ret = new CT_GapAmount();
                                $ret.c = j._gapWidth$i.value;
                                return $ret;
                            })());
                        }
                        if (j._seriesOverlap$i.hasValue) {
                            l.c = ((() => {
                                let $ret = new CT_Overlap();
                                $ret.b = j._seriesOverlap$i.value;
                                return $ret;
                            })());
                        }
                    }
                    if (d.f == null) {
                        d.f = l;
                    }
                    else if (d.g == null) {
                        d.g = l;
                    }
                    break;
                case 10:
                case 11:
                case 12:
                    let s = new CT_LineChart();
                    let t = h ? 0 : i ? 2 : 1;
                    s.j.a = CT_Boolean.b(true);
                    s.j.d = ((() => {
                        let $ret = new CT_Grouping();
                        $ret.b = t;
                        return $ret;
                    })());
                    s.a = CT_Boolean.b(false);
                    for (let u = 0; u < e.d.count; u++) {
                        let v = e.d._inner[u];
                        let w = e.g(v);
                        let x = ChartSerializer.ab(a, v, w, f);
                        s.j.f.add(x);
                    }
                    s.k = ComboChartSerializer.f(c, e.a, true);
                    if (d.n == null) {
                        d.n = s;
                    }
                    else if (d.o == null) {
                        d.o = s;
                    }
                    break;
                case 1:
                case 2:
                case 3:
                    let y = new CT_AreaChart();
                    let z = h ? 0 : i ? 2 : 1;
                    y.b.d = ((() => {
                        let $ret = new CT_Grouping();
                        $ret.b = z;
                        return $ret;
                    })());
                    y.b.a = CT_Boolean.b(true);
                    for (let aa = 0; aa < e.d.count; aa++) {
                        let ab = e.d._inner[aa];
                        let ac = e.g(ab);
                        let ad = ChartSerializer.d(a, ab, ac, f);
                        y.b.f.add(ad);
                    }
                    y.c = ComboChartSerializer.f(c, e.a, true);
                    if (d.c == null) {
                        d.c = y;
                    }
                    else if (d.d == null) {
                        d.d = y;
                    }
                    break;
                case 13:
                    let ae = new CT_PieChart();
                    ae.d.a = CT_Boolean.b(true);
                    for (let af = 0; af < e.d.count; af++) {
                        let ag = e.d._inner[af];
                        let ah = e.g(ag);
                        let ai = ChartSerializer.am(a, ag, ah, f);
                        ae.d.d.add(ai);
                    }
                    if (j != null) {
                        if (j._firstSliceAngle$i.hasValue) {
                            ae.a = ((() => {
                                let $ret = new CT_FirstSliceAng();
                                $ret.c = j._firstSliceAngle$i.value;
                                return $ret;
                            })());
                        }
                    }
                    if (d.s == null) {
                        d.s = ae;
                    }
                    else if (d.t == null) {
                        d.t = ae;
                    }
                    break;
                case 16:
                    let aj = new CT_DoughnutChart();
                    aj.f.a = CT_Boolean.b(true);
                    for (let ak = 0; ak < e.d.count; ak++) {
                        let al = e.d._inner[ak];
                        let am = e.g(al);
                        let an = ChartSerializer.am(a, al, am, f);
                        aj.f.d.add(an);
                    }
                    if (j != null) {
                        if (j._firstSliceAngle$i.hasValue) {
                            aj.c = ((() => {
                                let $ret = new CT_HoleSize();
                                $ret.b = j._doughnutHoleSize$i.value;
                                return $ret;
                            })());
                        }
                    }
                    if (d.i == null) {
                        d.i = aj;
                    }
                    else if (d.j == null) {
                        d.j = aj;
                    }
                    break;
                case 15:
                case 14:
                    let ao = new CT_OfPieChart();
                    let ap = g == 15 ? 1 : 0;
                    ao.e = ((() => {
                        let $ret = new CT_OfPieType();
                        $ret.b = ap;
                        return $ret;
                    })());
                    ao.l.a = CT_Boolean.b(true);
                    for (let aq = 0; aq < e.d.count; aq++) {
                        let ar = e.d._inner[aq];
                        let as = e.g(ar);
                        let at = ChartSerializer.am(a, ar, as, f);
                        ao.l.d.add(at);
                    }
                    if (j != null) {
                        if (j._gapWidth$i.hasValue) {
                            ao.c = ((() => {
                                let $ret = new CT_GapAmount();
                                $ret.c = j._gapWidth$i.value;
                                return $ret;
                            })());
                        }
                    }
                    if (d.p == null) {
                        d.p = ao;
                    }
                    else if (d.q == null) {
                        d.q = ao;
                    }
                    break;
                case 20:
                case 19:
                    let au = new CT_ScatterChart();
                    au.a = CT_Boolean.b(true);
                    au.e = DMLChartUtils.y(g);
                    let av = e.d.count > 0 ? e.d._inner[0] : null;
                    au.k = new List$1(CT_ScatterSer.$, 0);
                    for (let aw = 0; aw < e.d.count; aw++) {
                        let ax = e.d._inner[aw];
                        let ay = e.g(ax);
                        let az = ChartSerializer.aq(a, ax, av, ay, f, true);
                        au.k.add(az);
                    }
                    au.g = ComboChartSerializer.f(c, e.a, true);
                    if (d.y == null) {
                        d.y = au;
                    }
                    else if (d.z == null) {
                        d.z = au;
                    }
                    else if (d.aa == null) {
                        d.aa = au;
                    }
                    else if (d.ab == null) {
                        d.ab = au;
                    }
                    break;
                case 17:
                case 18:
                    let a0 = new CT_RadarChart();
                    a0.a = CT_Boolean.b(true);
                    a0.e = DMLChartUtils.w(g);
                    a0.k = new List$1(CT_RadarSer.$, 0);
                    for (let a1 = 0; a1 < e.d.count; a1++) {
                        let a2 = e.d._inner[a1];
                        let a3 = e.g(a2);
                        let a4 = ChartSerializer.ao(a, a2, a3, f);
                        a0.k.add(a4);
                    }
                    a0.g = ComboChartSerializer.f(c, e.a, true);
                    if (d.u == null) {
                        d.u = a0;
                    }
                    else if (d.v == null) {
                        d.v = a0;
                    }
                    else if (d.w == null) {
                        d.w = a0;
                    }
                    else if (d.x == null) {
                        d.x = a0;
                    }
                    break;
                default: break;
            }
        }
        static d(a, b) {
            b = false;
            let c = false;
            switch (a) {
                case 2:
                case 5:
                case 8:
                case 11:
                    c = true;
                    break;
                case 3:
                case 6:
                case 9:
                case 12:
                    c = true;
                    b = true;
                    break;
                default: return {
                    ret: false,
                    p1: b
                };
            }
            return {
                ret: c,
                p1: b
            };
        }
        static c(a) {
            switch (a) {
                case 7:
                case 8:
                case 9: return true;
                default: return false;
            }
        }
        static a(a) {
            switch (a) {
                case 57:
                case 58:
                case 59:
                case 51:
                case 52:
                case 53:
                case 4:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 1:
                case 76:
                case 77:
                case 5:
                case -4120:
                case 68:
                case 71:
                case -4169:
                case 74:
                case 75:
                case 72:
                case 73:
                case -4151:
                case 82:
                case 81: return a;
            }
            let b = false;
            let c = ((() => { let d = WorksheetChart._gj(a, b); b = d.p1; return d.ret; })());
            let d, e;
            if (((() => { let f = WorksheetChart._f8(a, d, e); d = f.p1; e = f.p2; return f.ret; })())) {
                if (d) {
                    return b ? 53 : c ? 52 : 51;
                }
                else {
                    return b ? 59 : c ? 58 : 57;
                }
            }
            if (WorksheetChart._gd(a)) {
                return b ? 64 : c ? 63 : 4;
            }
            if (WorksheetChart._f7(a)) {
                return b ? 77 : c ? 76 : 1;
            }
            if (WorksheetChart._ge(a)) {
                switch (a) {
                    case -4102:
                    case 70: return 5;
                    case 80: return 80;
                }
            }
            if (WorksheetChart._gk(a)) {
                return 4;
            }
            switch (a) {
                case 15:
                case 87: return -4169;
                case 83:
                case 85:
                case 86:
                case 84: return 1;
            }
            return 57;
        }
        static f(a, b, c) {
            return ChartSerializer.bk(a, toNullable(AxisGroup_$type, b), c);
        }
        static b(a) {
            switch (a) {
                case 1:
                case 2:
                case 3: return 0;
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9: return 1;
                case 13:
                case 14:
                case 15:
                case 16: return 3;
                case 10:
                case 11:
                case 12: return 2;
                case 17:
                case 18: return 4;
                case 20:
                case 19: return 6;
                default: break;
            }
            return 1;
        }
    }
    ComboChartSerializer.$t = /*@__PURE__*/ markType(ComboChartSerializer, 'ComboChartSerializer');
    return ComboChartSerializer;
})();
/**
 * @hidden
 */
export let ChartSerializerExtensions = /*@__PURE__*/ (() => {
    class ChartSerializerExtensions extends Base {
        static a(a, b, c, d) {
            if (b == null) {
                return;
            }
            a.a = CT_Boolean.b(b._co);
            a.b = CT_Boolean.b(b._cp);
            a.c = CT_Boolean.b(b._cq);
            a.d = CT_Boolean.b(b._cr);
            a.e = CT_Boolean.b(b._ct);
            a.f = CT_Boolean.b(b._cu);
            let e = b._ad;
            let f = b._ch;
            let g = b._cl;
            if (e != null || f != null) {
                a.i = ChartSerializer.a5(d, e, f, toNullable(BorderLineStyle_$type, null));
            }
            let h = ChartSerializer.a9(d, b.rotation, toNullable(TextHorizontalOverflow_$type, b.horizontalOverflow), toNullable(TextVerticalOverflow_$type, b.verticalOverflow), b.textDirection, b.wrapText, toNullable(VerticalTitleAlignment_$type, b.verticalAlignment));
            a.j = ChartSerializer.a8(d, h, g, null, b.readingOrder);
            if (stringIsNullOrEmpty(b.numberFormat) == false) {
                a.h = ChartSerializer.ag(b);
            }
            if (stringIsNullOrEmpty(b.separator) == false) {
                a.l = b.separator;
            }
            let i = DMLChartExtensions.f(b.labelPosition, c.chartType);
            if (i != 0 && i != 5) {
                a.g = ((() => {
                    let $ret = new CT_DLblPos();
                    $ret.a = DMLChartExtensions.ad(i);
                    return $ret;
                })());
            }
        }
        static a6(a, b) {
            a.a = CT_Boolean.b(b.applyPicToEnd);
            a.c = CT_Boolean.b(b.applyPicToFront);
            a.e = CT_Boolean.b(b.applyPicToSides);
            a.g = ((() => {
                let $ret = new CT_PictureFormat();
                $ret.a = DMLChartExtensions.ah(b.pictureType);
                return $ret;
            })());
            a.i = ((() => {
                let $ret = new CT_PictureStackUnit();
                $ret.a = b.pictureUnit;
                return $ret;
            })());
        }
        static a5(a, b) {
            a.a = CT_Boolean.b(b.applyPicToEnd);
            a.c = CT_Boolean.b(b.applyPicToFront);
            a.e = CT_Boolean.b(b.applyPicToSides);
            a.g = ((() => {
                let $ret = new CT_PictureFormat();
                $ret.a = DMLChartExtensions.ah(b.pictureType);
                return $ret;
            })());
            a.i = ((() => {
                let $ret = new CT_PictureStackUnit();
                $ret.a = b.pictureUnit;
                return $ret;
            })());
        }
        static a4(a, b) {
            let c = ExcelUtils.du(b._applyPicToEnd$i);
            let d = ExcelUtils.du(b._applyPicToFront$i);
            let e = ExcelUtils.du(b._applyPicToSides$i);
            if (c.hasValue) {
                a.a = CT_Boolean.b(c.value);
            }
            if (d.hasValue) {
                a.c = CT_Boolean.b(d.value);
            }
            if (e.hasValue) {
                a.e = CT_Boolean.b(e.value);
            }
        }
        static a3($t, a, b, c) {
            let d = typeCast(ChartSolidFill.$, b);
            let e = d == null ? typeCast(ChartGradientFill.$, b) : null;
            if (d != null) {
                a.c = ChartSerializer.a6(c, d);
            }
            else if (e != null) {
                a.a = ChartSerializer.a2(c, e);
            }
        }
        static s(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                ChartSerializerExtensions.aa(a.a, b, c, d, DrawingMLChart.dk);
            }
            d.k();
        }
        static aa(a, b, c, d, e) {
            d.p(e, null);
            if (a.q != null) {
                ChartSerializerExtensions.u(a.q, b, c, d, DrawingMLChart.c4);
            }
            if (a.m != null) {
                ChartSerializerExtensions.t(a.m, b, c, d, DrawingMLChart.gt);
            }
            if (a.o != null) {
                ChartSerializerExtensions.t(a.o, b, c, d, DrawingMLChart.gw);
            }
            if (a.k != null) {
                ChartSerializerExtensions.t(a.k, b, c, d, DrawingMLChart.gr);
            }
            if (a.i != null) {
                ChartSerializerExtensions.t(a.i, b, c, d, DrawingMLChart.cw);
            }
            if (a.e != null) {
                a.e.i(b, c, d, DrawingMLChart.gs);
            }
            if (a.g != null) {
                a.g.i(b, c, d, DrawingMLChart.gv);
            }
            if (a.c != null) {
                a.c.i(b, c, d, DrawingMLChart.gp);
            }
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.ct);
            }
            d.k();
        }
        static t(a, b, c, d, e) {
            CT_LayoutMode.f(b, e, a.b);
            d.k();
        }
        static u(a, b, c, d, e) {
            CT_LayoutTarget.f(b, e, a.b);
            d.k();
        }
        static ax(a, b, c, d, e) {
            CT_TextLanguageID.e(b, e, a.b);
            d.k();
        }
        static k(a, b, c, d, e, f = true) {
            d.p(e, null);
            if (f) {
                d.l(DrawingMLMain.ao);
                d.l(DrawingMLChart.ao);
            }
            if (a.b != null) {
                a.b.q(b, c, d, DrawingMLChart.bq, "c");
            }
            if (a.r != null) {
                ChartSerializerExtensions.ax(a.r, b, c, d, DrawingMLChart.c2);
            }
            if (a.d != null) {
                a.d.q(b, c, d, DrawingMLChart.e2, "c");
            }
            if (a.f != null) {
                ChartSerializerExtensions.i(a.f, b, c, d, DrawingMLChart.bf);
            }
            if (a.v != null) {
                DMLExtensions.a5(a.v, b, c, d, DrawingMLChart.fx);
            }
            if (a.x != null) {
                a.x.e(b, c, d, DrawingMLChart.gf);
            }
            d.k();
        }
        static i(a, b, c, d, e) {
            d.p(e, null);
            if (a.s != null) {
                ChartSerializerExtensions.ay(a.s, b, c, d, DrawingMLChart.ga);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.aw, "c");
            }
            if (a.u != null) {
                ChartSerializerExtensions.a2(a.u, b, c, d, DrawingMLChart.go);
            }
            if (a.o != null) {
                ChartSerializerExtensions.at(a.o, b, c, d, DrawingMLChart.cl);
            }
            if (a.q != null) {
                ChartSerializerExtensions.at(a.q, b, c, d, DrawingMLChart.fr);
            }
            if (a.m != null) {
                ChartSerializerExtensions.at(a.m, b, c, d, DrawingMLChart.a0);
            }
            if (a.k != null) {
                ChartSerializerExtensions.aj(a.k, b, c, d, DrawingMLChart.ep);
            }
            if (a.i != null) {
                ChartSerializerExtensions.v(a.i, b, c, d, DrawingMLChart.c9);
            }
            if (a.c != null) {
                a.c.q(b, c, d, DrawingMLChart.eq, "c");
            }
            if (a.g != null) {
                ChartSerializerExtensions.m(a.g, b, c, d, DrawingMLChart.bu);
            }
            if (a.e != null) {
                a.e.q(b, c, d, DrawingMLChart.fg, "c");
            }
            d.k();
        }
        static m(a, b, c, d, e) {
            CT_DispBlanksAs.f(b, e, a.b);
            d.k();
        }
        static v(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                ChartSerializerExtensions.x(a.e, b, c, d, DrawingMLChart.db);
            }
            if (a.m != null) {
                for (let f of fromEnum(a.m)) {
                    ChartSerializerExtensions.w(f, b, c, d, DrawingMLChart.da);
                }
            }
            if (a.c != null) {
                ChartSerializerExtensions.s(a.c, b, c, d, DrawingMLChart.c3);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.ec, "c");
            }
            if (a.g != null) {
                DMLExtensions.a5(a.g, b, c, d, DrawingMLChart.fx);
            }
            if (a.i != null) {
                a.i.e(b, c, d, DrawingMLChart.gf);
            }
            d.k();
        }
        static w(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.i(b, c, d, DrawingMLChart.cz, "c");
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.bs, "c");
            }
            if (a.e != null) {
                a.e.c(b, c, d, null);
            }
            d.k();
        }
        static x(a, b, c, d, e) {
            CT_LegendPos.f(b, e, a.b);
            d.k();
        }
        static at(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.f6, "c");
            }
            if (a.e != null) {
                DMLExtensions.a5(a.e, b, c, d, DrawingMLChart.fx);
            }
            if (a.c != null) {
                DMLChartExtensions.cl(a.c, b, c, d, DrawingMLChart.ei);
            }
            d.k();
        }
        static af(a, b, c, d, e) {
            CT_PictureFormat.e(b, e, a.a);
            d.k();
        }
        static ag(a, b, c, d, e) {
            CT_PictureStackUnit.e(b, e, a.a);
            d.k();
        }
        static aj(a, b, c, d, e) {
            d.p(e, null);
            if (a.l != null) {
                ChartSerializerExtensions.s(a.l, b, c, d, DrawingMLChart.c3);
            }
            if (a.c != null) {
                ChartSerializerExtensions.c(a.c, b, c, d, DrawingMLChart.au);
            }
            if (a.d != null) {
                ChartSerializerExtensions.c(a.d, b, c, d, DrawingMLChart.au);
            }
            if (a.b != null) {
                ChartSerializerExtensions.b(a.b, b, c, d, DrawingMLChart.at);
            }
            if (a.n != null) {
                ChartSerializerExtensions.z(a.n, b, c, d, DrawingMLChart.dd);
            }
            if (a.o != null) {
                ChartSerializerExtensions.z(a.o, b, c, d, DrawingMLChart.dd);
            }
            if (a.m != null) {
                ChartSerializerExtensions.y(a.m, b, c, d, DrawingMLChart.dc);
            }
            if (a.f != null) {
                ChartSerializerExtensions.e(a.f, b, c, d, DrawingMLChart.a5);
            }
            if (a.g != null) {
                ChartSerializerExtensions.e(a.g, b, c, d, DrawingMLChart.a5);
            }
            if (a.ac != null) {
                ChartSerializerExtensions.as(a.ac, b, c, d, DrawingMLChart.fy);
            }
            if (a.u != null) {
                ChartSerializerExtensions.ak(a.u, b, c, d, DrawingMLChart.ew);
            }
            if (a.v != null) {
                ChartSerializerExtensions.ak(a.v, b, c, d, DrawingMLChart.ew);
            }
            if (a.w != null) {
                ChartSerializerExtensions.ak(a.w, b, c, d, DrawingMLChart.ew);
            }
            if (a.x != null) {
                ChartSerializerExtensions.ak(a.x, b, c, d, DrawingMLChart.ew);
            }
            if (a.y != null) {
                DMLChartExtensions.cp(a.y, b, c, d, DrawingMLChart.e4);
            }
            if (a.z != null) {
                DMLChartExtensions.cp(a.z, b, c, d, DrawingMLChart.e4);
            }
            if (a.aa != null) {
                DMLChartExtensions.cp(a.aa, b, c, d, DrawingMLChart.e4);
            }
            if (a.ab != null) {
                DMLChartExtensions.cp(a.ab, b, c, d, DrawingMLChart.e4);
            }
            if (a.s != null) {
                ChartSerializerExtensions.ai(a.s, b, c, d, DrawingMLChart.el);
            }
            if (a.t != null) {
                ChartSerializerExtensions.ai(a.t, b, c, d, DrawingMLChart.el);
            }
            if (a.r != null) {
                ChartSerializerExtensions.ah(a.r, b, c, d, DrawingMLChart.ek);
            }
            if (a.i != null) {
                ChartSerializerExtensions.n(a.i, b, c, d, DrawingMLChart.b2);
            }
            if (a.j != null) {
                ChartSerializerExtensions.n(a.j, b, c, d, DrawingMLChart.b2);
            }
            if (a.e != null) {
                ChartSerializerExtensions.d(a.e, b, c, d, DrawingMLChart.a4);
            }
            if (a.p != null) {
                ChartSerializerExtensions.ab(a.p, b, c, d, DrawingMLChart.d7);
            }
            if (a.q != null) {
                ChartSerializerExtensions.ab(a.q, b, c, d, DrawingMLChart.d7);
            }
            if (a.ae != null) {
                ChartSerializerExtensions.av(a.ae, b, c, d, DrawingMLChart.f4);
            }
            if (a.ad != null) {
                ChartSerializerExtensions.au(a.ad, b, c, d, DrawingMLChart.f3);
            }
            if (a.h != null) {
                ChartSerializerExtensions.f(a.h, b, c, d, DrawingMLChart.a9);
            }
            for (let f of fromEnum(a.ah)) {
                f.save(b, c, d);
            }
            if (a.af != null) {
                DMLExtensions.a5(a.af, b, c, d, DrawingMLChart.fx);
            }
            d.k();
        }
        static e(a, b, c, d, e) {
            d.p(e, null);
            if (a.f != null) {
                a.f.g(b, c, d, null);
            }
            if (a.a != null) {
                ChartSerializerExtensions.p(a.a, b, c, d, DrawingMLChart.cr);
            }
            if (a.c != null) {
                ChartSerializerExtensions.ad(a.c, b, c, d, DrawingMLChart.eb);
            }
            if (a.k != null) {
                for (let f of fromEnum(a.k)) {
                    ChartSerializerExtensions.j(f, b, c, d, DrawingMLChart.fc);
                }
            }
            if (a.g != null) {
                for (let g of fromEnum(a.g)) {
                    g.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static z(a, b, c, d, e) {
            d.p(e, null);
            if (a.j != null) {
                a.j.g(b, c, d, null);
            }
            if (a.c != null) {
                ChartSerializerExtensions.j(a.c, b, c, d, DrawingMLChart.cv);
            }
            if (a.e != null) {
                DMLChartExtensions.b7(a.e, b, c, d, DrawingMLChart.dl);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.fu, "c");
            }
            if (a.k != null) {
                for (let f of fromEnum(a.k)) {
                    f.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static c(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.g(b, c, d, null);
            }
            if (a.c != null) {
                for (let f of fromEnum(a.c)) {
                    f.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static ai(a, b, c, d, e) {
            d.p(e, null);
            if (a.d != null) {
                a.d.e(b, c, d, null);
            }
            if (a.a != null) {
                ChartSerializerExtensions.o(a.a, b, c, d, DrawingMLChart.ck);
            }
            d.k();
        }
        static n(a, b, c, d, e) {
            d.p(e, null);
            if (a.f != null) {
                a.f.e(b, c, d, null);
            }
            if (a.a != null) {
                ChartSerializerExtensions.o(a.a, b, c, d, DrawingMLChart.ck);
            }
            if (a.c != null) {
                ChartSerializerExtensions.q(a.c, b, c, d, DrawingMLChart.cx);
            }
            d.k();
        }
        static q(a, b, c, d, e) {
            CT_HoleSize.f(b, e, a.b);
            d.k();
        }
        static o(a, b, c, d, e) {
            CT_FirstSliceAng.f(b, e, a.c);
            d.k();
        }
        static j(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLExtensions.a5(a.a, b, c, d, DrawingMLChart.fx);
            }
            d.k();
        }
        static p(a, b, c, d, e) {
            CT_GapAmount.f(b, e, a.c);
            d.k();
        }
        static ad(a, b, c, d, e) {
            CT_Overlap.f(b, e, a.b);
            d.k();
        }
        static ay(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                ChartSerializerExtensions.az(a.e, b, c, d, DrawingMLChart.ge);
            }
            if (a.c != null) {
                ChartSerializerExtensions.s(a.c, b, c, d, DrawingMLChart.c3);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.ec, "c");
            }
            if (a.g != null) {
                DMLExtensions.a5(a.g, b, c, d, DrawingMLChart.fx);
            }
            if (a.i != null) {
                a.i.e(b, c, d, DrawingMLChart.gf);
            }
            d.k();
        }
        static az(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLChartExtensions.cw(a.a, b, c, d, DrawingMLChart.f1);
            }
            if (a.b != null) {
                a.b.e(b, c, d, DrawingMLChart.ez);
            }
            d.k();
        }
        static a2(a, b, c, d, e) {
            d.p(e, null);
            if (a.i != null) {
                ChartSerializerExtensions.an(a.i, b, c, d, DrawingMLChart.e0);
            }
            if (a.e != null) {
                ChartSerializerExtensions.r(a.e, b, c, d, DrawingMLChart.cy);
            }
            if (a.k != null) {
                ChartSerializerExtensions.ao(a.k, b, c, d, DrawingMLChart.e1);
            }
            if (a.c != null) {
                ChartSerializerExtensions.l(a.c, b, c, d, DrawingMLChart.bt);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.ey, "c");
            }
            if (a.g != null) {
                ChartSerializerExtensions.ae(a.g, b, c, d, DrawingMLChart.eg);
            }
            d.k();
        }
        static an(a, b, c, d, e) {
            CT_RotX.f(b, e, a.b);
            d.k();
        }
        static r(a, b, c, d, e) {
            CT_HPercent.f(b, e, a.c);
            d.k();
        }
        static ao(a, b, c, d, e) {
            CT_RotY.f(b, e, a.c);
            d.k();
        }
        static l(a, b, c, d, e) {
            CT_DepthPercent.f(b, e, a.c);
            d.k();
        }
        static ae(a, b, c, d, e) {
            CT_Perspective.f(b, e, a.b);
            d.k();
        }
        static ak(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                ChartSerializerExtensions.am(a.e, b, c, d, DrawingMLChart.ex);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.gn, "c");
            }
            if (a.k != null) {
                for (let f of fromEnum(a.k)) {
                    ChartSerializerExtensions.al(f, b, c, d, DrawingMLChart.fa);
                }
            }
            if (a.c != null) {
                DMLChartExtensions.br(a.c, b, c, d, DrawingMLChart.b1);
            }
            if (a.g != null) {
                for (let g of fromEnum(a.g)) {
                    g.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static am(a, b, c, d, e) {
            CT_RadarStyle.f(b, e, a.b);
            d.k();
        }
        static al(a, b, c, d, e) {
            d.p(e, null);
            if (a.j != null) {
                a.j.f(b, c, d, null);
            }
            if (a.e != null) {
                DMLChartExtensions.b7(a.e, b, c, d, DrawingMLChart.dl);
            }
            if (a.l != null) {
                for (let f of fromEnum(a.l)) {
                    DMLChartExtensions.bs(f, b, c, d, DrawingMLChart.b4);
                }
            }
            if (a.c != null) {
                DMLChartExtensions.br(a.c, b, c, d, DrawingMLChart.b1);
            }
            if (a.a != null) {
                DMLChartExtensions.bd(a.a, b, c, d, DrawingMLChart.bd);
            }
            if (a.g != null) {
                DMLChartExtensions.cd(a.g, b, c, d, DrawingMLChart.gl);
            }
            d.k();
        }
        static f(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                a.e.q(b, c, d, DrawingMLChart.gn, "c");
            }
            if (a.q != null) {
                for (let f of fromEnum(a.q)) {
                    ChartSerializerExtensions.h(f, b, c, d, DrawingMLChart.fa);
                }
            }
            if (a.i != null) {
                DMLChartExtensions.br(a.i, b, c, d, DrawingMLChart.b1);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.a8, "c");
            }
            if (a.g != null) {
                ChartSerializerExtensions.g(a.g, b, c, d, DrawingMLChart.ba);
            }
            if (a.c != null) {
                a.c.q(b, c, d, DrawingMLChart.fl, "c");
            }
            if (a.k != null) {
                ChartSerializerExtensions.aq(a.k, b, c, d, DrawingMLChart.ft);
            }
            if (a.m != null) {
                for (let g of fromEnum(a.m)) {
                    g.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static h(a, b, c, d, e) {
            d.p(e, null);
            if (a.n != null) {
                a.n.f(b, c, d, null);
            }
            if (a.c != null) {
                a.c.q(b, c, d, DrawingMLChart.c1, "c");
            }
            if (a.p != null) {
                for (let f of fromEnum(a.p)) {
                    DMLChartExtensions.bs(f, b, c, d, DrawingMLChart.b4);
                }
            }
            if (a.g != null) {
                DMLChartExtensions.br(a.g, b, c, d, DrawingMLChart.b1);
            }
            if (a.v != null) {
                for (let g of fromEnum(a.v)) {
                    DMLChartExtensions.c3(g, b, c, d, DrawingMLChart.gb);
                }
            }
            if (a.r != null && a.r.count > 0) {
                DMLChartExtensions.bt(a.r._inner[0], b, c, d, DrawingMLChart.b7);
            }
            if (a.e != null) {
                DMLChartExtensions.bd(a.e, b, c, d, DrawingMLChart.gu);
            }
            if (a.k != null) {
                DMLChartExtensions.cd(a.k, b, c, d, DrawingMLChart.gx);
            }
            if (a.i != null) {
                DMLChartExtensions.cd(a.i, b, c, d, DrawingMLChart.bb);
            }
            if (a.a != null) {
                a.a.q(b, c, d, DrawingMLChart.a8, "c");
            }
            d.k();
        }
        static g(a, b, c, d, e) {
            CT_BubbleScale.f(b, e, a.c);
            d.k();
        }
        static aq(a, b, c, d, e) {
            CT_SizeRepresents.f(b, e, a.b);
            d.k();
        }
        static av(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.e(b, c, d, null);
            }
            if (a.c != null) {
                for (let f of fromEnum(a.c)) {
                    f.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static aw(a, b, c, d, e) {
            d.p(e, null);
            if (a.f != null) {
                a.f.f(b, c, d, null);
            }
            if (a.a != null) {
                DMLChartExtensions.bd(a.a, b, c, d, DrawingMLChart.bd);
            }
            if (a.c != null) {
                DMLChartExtensions.cd(a.c, b, c, d, DrawingMLChart.gl);
            }
            d.k();
        }
        static d(a, b, c, d, e) {
            d.p(e, null);
            if (a.h != null) {
                a.h.g(b, c, d, null);
            }
            if (a.c != null) {
                ChartSerializerExtensions.p(a.c, b, c, d, DrawingMLChart.cr);
            }
            if (a.a != null) {
                ChartSerializerExtensions.p(a.a, b, c, d, DrawingMLChart.cq);
            }
            if (a.e != null) {
                DMLChartExtensions.ct(a.e, b, c, d, DrawingMLChart.fd);
            }
            if (a.i != null) {
                for (let f of fromEnum(a.i)) {
                    f.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static y(a, b, c, d, e) {
            d.p(e, null);
            if (a.d != null) {
                a.d.g(b, c, d, null);
            }
            if (a.a != null) {
                ChartSerializerExtensions.p(a.a, b, c, d, DrawingMLChart.cq);
            }
            if (a.e != null) {
                for (let f of fromEnum(a.e)) {
                    f.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static ah(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.e(b, c, d, null);
            }
            d.k();
        }
        static au(a, b, c, d, e) {
            d.p(e, null);
            if (a.b != null) {
                a.b.e(b, c, d, null);
            }
            if (a.c != null) {
                for (let f of fromEnum(a.c)) {
                    f.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static ab(a, b, c, d, e) {
            d.p(e, null);
            if (a.e != null) {
                ChartSerializerExtensions.ac(a.e, b, c, d, DrawingMLChart.d8);
            }
            if (a.l != null) {
                a.l.e(b, c, d, null);
            }
            if (a.c != null) {
                ChartSerializerExtensions.p(a.c, b, c, d, DrawingMLChart.cr);
            }
            if (a.i != null) {
                ChartSerializerExtensions.ar(a.i, b, c, d, DrawingMLChart.fw);
            }
            if (a.a != null) {
                a.a.i(b, c, d, DrawingMLChart.fv);
            }
            if (a.g != null) {
                ChartSerializerExtensions.ap(a.g, b, c, d, DrawingMLChart.e7);
            }
            if (a.q != null) {
                for (let f of fromEnum(a.q)) {
                    ChartSerializerExtensions.j(f, b, c, d, DrawingMLChart.fc);
                }
            }
            d.k();
        }
        static ac(a, b, c, d, e) {
            CT_OfPieType.f(b, e, a.b);
            d.k();
        }
        static ar(a, b, c, d, e) {
            CT_SplitType.f(b, e, a.b);
            d.k();
        }
        static b(a, b, c, d, e) {
            d.p(e, null);
            if (a.d != null) {
                a.d.g(b, c, d, null);
            }
            if (a.a != null) {
                ChartSerializerExtensions.p(a.a, b, c, d, DrawingMLChart.cq);
            }
            if (a.e != null) {
                for (let f of fromEnum(a.e)) {
                    f.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            d.k();
        }
        static ap(a, b, c, d, e) {
            CT_SecondPieSize.f(b, e, a.c);
            d.k();
        }
        static as(a, b, c, d, e) {
            d.p(e, null);
            if (a.m != null) {
                for (let f of fromEnum(a.m)) {
                    DMLChartExtensions.b3(f, b, c, d, DrawingMLChart.fa);
                }
            }
            if (a.e != null) {
                DMLChartExtensions.br(a.e, b, c, d, DrawingMLChart.b1);
            }
            if (a.a != null) {
                ChartSerializerExtensions.j(a.a, b, c, d, DrawingMLChart.b5);
            }
            if (a.c != null) {
                ChartSerializerExtensions.j(a.c, b, c, d, DrawingMLChart.cv);
            }
            if (a.g != null) {
                ChartSerializerExtensions.a1(a.g, b, c, d, DrawingMLChart.gh);
            }
            if (a.i != null) {
                for (let g of fromEnum(a.i)) {
                    g.i(b, c, d, DrawingMLChart.ay, "c");
                }
            }
            if (a.k != null) {
                ChartExExtensions.ct(a.k, b, c, d, DrawingMLChart.cg);
            }
            d.k();
        }
        static a1(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                ChartSerializerExtensions.p(a.a, b, c, d, DrawingMLChart.cr);
            }
            if (a.e != null) {
                ChartSerializerExtensions.a0(a.e, b, c, d, DrawingMLChart.gg);
            }
            if (a.c != null) {
                ChartSerializerExtensions.a0(a.c, b, c, d, DrawingMLChart.b3);
            }
            if (a.g != null) {
                ChartExExtensions.ct(a.g, b, c, d, DrawingMLChart.cg);
            }
            d.k();
        }
        static a0(a, b, c, d, e) {
            d.p(e, null);
            if (a.a != null) {
                DMLExtensions.a5(a.a, b, c, d, DrawingMLChart.fx);
            }
            d.k();
        }
    }
    ChartSerializerExtensions.$t = /*@__PURE__*/ markType(ChartSerializerExtensions, 'ChartSerializerExtensions');
    return ChartSerializerExtensions;
})();
/**
 * @hidden
 */
export let WorksheetChartExtensions = /*@__PURE__*/ (() => {
    class WorksheetChartExtensions extends Base {
        static aq(a, b, c, d) {
            let e = c.workbook;
            a._i8(c);
            try {
                let f = b.f;
                let g = f.a == null || f.a.k == false;
                let h = b.f.k;
                if (h == null) {
                    return;
                }
                let i = WorksheetChartExtensions.d(b);
                a.chartType = i;
                if (g && f.s != null) {
                    a.chartTitle = new ChartTitle();
                    a.chartTitle._l(a);
                    WorksheetChartExtensions.aa(a.chartTitle, f.s, f, null, c, d);
                }
                let j = new Dictionary$2(Number_$type, Tuple$2.$.specialize(Axis.$, IAxis_$type), 0);
                WorksheetChartExtensions.r(a, b, c, d, j);
                let k = WorksheetChartExtensions.n(h);
                let l = WorksheetChartExtensions.o(k);
                let m = new Dictionary$2(Series.$, ISeries_$type, 0);
                for (let n of fromEnum(l)) {
                    let o = a._seriesCollection$i.add();
                    WorksheetChartExtensions.av(a, o, n, b, c, d);
                    m.addItem(o, n);
                }
                if (a.chartType == 74) {
                    let p = 0;
                    let q = 0;
                    let r = 0;
                    for (let s of fromEnum(l)) {
                        if (s.isExplicitlyNoFill) {
                            p += 1;
                        }
                        let t = DMLChartUtils.au(s);
                        if (t.hasValue) {
                            switch (t.value) {
                                case 0:
                                    r += 1;
                                    break;
                                default:
                                    q += 1;
                                    break;
                            }
                        }
                    }
                    if (p == l.count) {
                        a.chartType = -4169;
                        a._seriesCollection$i._aw(74, a.chartType);
                    }
                    if (r == l.count) {
                        a.chartType = 75;
                        a._seriesCollection$i._aw(74, a.chartType);
                    }
                }
                let u = DMLChartUtils.l(b.f.i, a._seriesCollection$i, c);
                a.legend = u;
                WorksheetChartExtensions.az(b.f.i, a._seriesCollection$i, c);
                let v = f.u;
                if (v != null) {
                    if (v.e != null) {
                        a.autoScaling = true;
                    }
                    if (v.a != null) {
                        a.rightAngleAxes = v.a.k;
                    }
                    if (v.g != null) {
                        let w = intDivide(v.g.b, 2);
                        w = Math.min(w, 120);
                        a.perspective = w;
                    }
                    if (v.c != null) {
                        a.depthPercent = v.c.c;
                    }
                    if (v.e != null) {
                        a.heightPercent = v.e.c;
                    }
                    if (v.i != null) {
                        let x = v.i.b;
                        x = Math.min(x, 359);
                        a.rotationX = x;
                    }
                    if (v.k != null) {
                        let y = v.k.c;
                        y = Math.max(y, -90);
                        y = Math.min(y, 90);
                        a.rotationY = y;
                    }
                }
                if (f.m != null) {
                    WorksheetChartExtensions.ap(a.backWall, f.m, 0, c);
                }
                if (f.q != null) {
                    WorksheetChartExtensions.ap(a.sideWall, f.q, 1, c);
                }
                if (f.o != null) {
                    WorksheetChartExtensions.ap(a.floor, f.o, 2, c);
                }
                if (f.g != null) {
                    a.displayBlanksAs = DMLChartExtensions.h(f.g.b);
                }
                for (let z of fromEnum(k)) {
                    let aa = null;
                    let ab = null;
                    let ac = z.getGap(aa, ab);
                    aa = ac.p0;
                    ab = ac.p1;
                    if (aa != null) {
                        a.gapDepth = aa.c;
                    }
                    if (ab != null) {
                        a.gapWidth = ab.c;
                    }
                }
                for (let ad of fromEnum(k)) {
                    let ae = ad._getFirstSliceAngle$i();
                    let af = ad._getHoleSize$i();
                    if (ae.hasValue) {
                        a.firstSliceAngle = ae.value;
                    }
                    if (af.hasValue) {
                        a.doughnutHoleSize = af.value;
                    }
                    let ag = ad._getOverlap$i();
                    if (ag.hasValue) {
                        a.seriesOverlap = ag.value;
                    }
                    let ah = ad._getVaryColors$i();
                    if (ah.hasValue) {
                        a.varyColors = ah.value;
                    }
                }
                if (f.c != null) {
                    a.plotVisibleOnly = f.c.k;
                }
                let ai = b.v;
                let aj = ai != null ? ai.a : null;
                if (ai != null) {
                    a.chartArea.fill = DMLChartUtils.c(ai.l);
                }
                if (aj != null) {
                    let ak = new ChartBorder();
                    DMLChartExtensions.a4(ak, aj, c);
                    a.chartArea.border = ak;
                }
                a.chartArea.roundedCorners = CT_Boolean.g(b.d);
                ai = h.af;
                aj = ai != null ? ai.a : null;
                if (ai != null) {
                    a.plotArea.fill = DMLChartUtils.c(ai.l);
                }
                if (aj != null) {
                    let al = new ChartBorder();
                    DMLChartExtensions.a4(al, aj, c);
                    a.plotArea.border = al;
                }
                let am = null;
                for (let an of fromEnum(k)) {
                    am = an.getSerLines();
                    if (am != null) {
                        break;
                    }
                }
                if (am != null) {
                    a.seriesLines = new ChartSeriesLines();
                    WorksheetChartExtensions.z(a.seriesLines, am, c, d);
                }
                let ao = -4105;
                let ap = 0, aq = 0, ar = 0, as = 0;
                let at = toNullable(Boolean_$type, null);
                let au = h.l;
                if (au != null) {
                    let av = DMLChartUtils.a8(au, ao, ap, aq, ar, as, at);
                    ao = av.p1;
                    ap = av.p2;
                    aq = av.p3;
                    ar = av.p4;
                    as = av.p5;
                    at = av.p6;
                    if (at.hasValue) {
                    }
                    a.plotArea.position = ao;
                    a.plotArea.height = as;
                    a.plotArea.left = ap;
                    a.plotArea.top = aq;
                    a.plotArea.width = ar;
                }
                switch (i) {
                    case -4120:
                    case 5:
                        for (let aw of fromEnum(a._seriesCollection$i)) {
                            if (aw.explosion > 0) {
                                a.chartType = i == -4120 ? 80 : 69;
                            }
                        }
                        break;
                    case 4:
                    case 63:
                    case 64:
                    case -4151:
                    case 75:
                    case 73:
                        for (let ax of fromEnum(a._seriesCollection$i)) {
                            if (ax.markerStyle != -4142) {
                                switch (i) {
                                    case 4:
                                        a.chartType = 65;
                                        break;
                                    case 63:
                                        a.chartType = 66;
                                        break;
                                    case 64:
                                        a.chartType = 67;
                                        break;
                                    case -4151:
                                        a.chartType = 81;
                                        break;
                                    case 75:
                                        a.chartType = 74;
                                        break;
                                    case 73:
                                        a.chartType = 72;
                                        break;
                                }
                            }
                        }
                        break;
                }
                let ay = WorksheetChart._gy(a.chartType);
                if (ay == false) {
                    let az = a._axisCollection$i.item(2, 2);
                    if (az != null) {
                        a._axisCollection$i._ao(az);
                    }
                    for (let a0 of fromEnum(a._axisCollection$i)) {
                        if (a0._ab == az) {
                            switch (a0.type) {
                                case 1:
                                    a0._ab = a._axisCollection$i.item(2);
                                    break;
                                case 2:
                                case 3:
                                    a0._ab = a._axisCollection$i.item(1);
                                    break;
                            }
                        }
                    }
                }
                let a1 = h.ac;
                if (a1 != null) {
                    let a2 = a1.c;
                    let a3 = a1.a;
                    let a4 = a1.g;
                    if (a3 != null) {
                        let a5 = new ChartDropLines();
                        WorksheetChartExtensions.w(a5, a3, c, d);
                        a.dropLines = a5;
                    }
                    if (a2 != null) {
                        let a6 = new ChartHighLowLines();
                        WorksheetChartExtensions.x(a6, a2, c, d);
                        a.highLowLines = a6;
                    }
                    if (a4 != null) {
                        let a7 = new UpDownBars();
                        WorksheetChartExtensions.ao(a7, a4, c, d);
                        a.upDownBars = a7;
                    }
                }
                WorksheetChartExtensions.aw(a._axisCollection$i, j, m);
                if (a.chartType == 113) {
                    let a8 = false;
                    for (let a9 of fromEnum(k)) {
                        if (a9.axisIds != null) {
                            for (let ba of fromEnum(a9.axisIds)) {
                                for (let bb of fromEnum(j)) {
                                    if (bb.key == ba.g) {
                                        if (bb.value.c.axisGroup == 1) {
                                            a8 = true;
                                            break;
                                        }
                                    }
                                }
                                if (a8) {
                                    break;
                                }
                            }
                        }
                    }
                    let bc = 0;
                    for (let bd of fromEnum(k)) {
                        let be = null;
                        let bf = null;
                        let bg = bd.getGap(be, bf);
                        be = bg.p0;
                        bf = bg.p1;
                        let bh = bd._getFirstSliceAngle$i();
                        let bi = bd._getHoleSize$i();
                        let bj = bd._getOverlap$i();
                        if (bf != null || bh.hasValue || bi.hasValue || bj.hasValue) {
                            let bk = toNullable(AxisGroup_$type, null);
                            if (bd.axisIds != null) {
                                for (let bl of fromEnum(bd.axisIds)) {
                                    for (let bm of fromEnum(j)) {
                                        if (bm.key == bl.g) {
                                            bk = toNullable(AxisGroup_$type, bm.value.c.axisGroup);
                                            break;
                                        }
                                    }
                                    if (bk.hasValue) {
                                        break;
                                    }
                                }
                            }
                            else {
                                bc += 1;
                                bk = toNullable(AxisGroup_$type, a8 ? 2 : bc == 1 ? 1 : 2);
                            }
                            let bn = bd.getSeries();
                            let bo = bn.count > 0 ? bn._inner[0] : null;
                            if (bk.hasValue && bo != null) {
                                let bp = bd.getChartType(b, bo);
                                if (WorksheetChart._go(bp)) {
                                    let bq = a._fr(bp, bk.value);
                                    if (bf != null) {
                                        bq._gapWidth$i = toNullable(Number_$type, bf.c);
                                    }
                                    if (bh.hasValue) {
                                        bq._firstSliceAngle$i = toNullable(Number_$type, bh.value);
                                    }
                                    if (bj.hasValue) {
                                        bq._seriesOverlap$i = toNullable(Number_$type, bj.value);
                                    }
                                    if (bi.hasValue) {
                                        bq._doughnutHoleSize$i = toNullable(Number_$type, bi.value);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            finally {
                a._ja();
            }
        }
        static ap(a, b, c, d) {
            if (b == null) {
                return;
            }
            if (b.a != null) {
                a.thickness = b.a.g;
            }
            let e = b.e;
            let f = e != null ? e.a : null;
            if (e != null) {
                a.fill = DMLChartUtils.c(e.l);
            }
            if (f != null) {
                let g = new ChartBorder(null);
                DMLChartExtensions.a4(g, f, d);
                a.border = g;
            }
        }
        static aa(a, b, c, d, e, f) {
            let g = b.g;
            let h = g != null ? g.a : null;
            WorksheetChartExtensions.t(a, g, h, b.e, b.i, b.c, e, f);
            if (b.a != null && b.a.k) {
                a.overlay = true;
            }
        }
        static ag(a, b, c, d) {
            if (b == null) {
                return;
            }
            WorksheetChartExtensions.ah(a, b.e, b.c, b.g, b.a, c, d);
        }
        static ah(a, b, c, d, e, f, g) {
            let h = b != null ? b.a : null;
            WorksheetChartExtensions.t(a, b, h, c, d, e, f, g);
        }
        static z(a, b, c, d) {
            let e = typeCast(ChartLineBase.$, a);
            WorksheetChartExtensions.y(e, b, c, d);
        }
        static al(a, b, c, d) {
            let e = b.q != null ? DMLChartExtensions.x(b.q.b) : 1;
            a.trendlineType = e;
            a.backward = b.e != null ? b.e.f : 0;
            a.forward = b.g != null ? b.g.f : 0;
            a._intercept$i = b.i != null ? toNullable(Number_$type, b.i.f) : toNullable(Number_$type, null);
            a.order = b.k != null ? b.k.b : 2;
            a.period = b.m != null ? b.m.b : 2;
            a.name = b.w;
            let f = b.s;
            let g = f != null ? f.a : null;
            if (g != null) {
                a.line = new TrendlineLine();
                DMLChartExtensions.a6(a.line, g, c);
            }
            let h = null;
            let i = b.o;
            if (i != null) {
                h = new TrendlineLabel();
                WorksheetChartExtensions.am(h, b, c, d);
            }
            a.label = h;
        }
        static am(a, b, c, d) {
            let e = b != null ? b.o : null;
            if (e == null) {
                return;
            }
            let f = e.g;
            let g = f != null ? f.a : null;
            let h = e.e;
            let i = e.i;
            WorksheetChartExtensions.t(a, f, g, e.e, e.i, e.a, c, d);
            if (e.c != null) {
                let j;
                let k;
                if (((() => { let l = WorksheetChartExtensions.l(e.c, j, k); j = l.p1; k = l.p2; return l.ret; })())) {
                    a.numberFormat = j;
                    a.numberFormatLinked = k;
                }
            }
            a.displayEquation = CT_Boolean.g(b.a);
            a.displayRSquared = CT_Boolean.g(b.c);
        }
        static ab(a, b, c, d, e) {
            WorksheetChartExtensions.ad(a, b.d.d, b.d.b, c, d, e);
            a.isDeleted = CT_Boolean.g(b.a);
            let f = b.d.a;
            let g = c != null ? c.j : null;
            let h;
            let i, j, k, l;
            let m;
            if (f != null) {
                let n = DMLChartUtils.a8(f, h, i, j, k, l, m);
                h = n.p1;
                i = n.p2;
                j = n.p3;
                k = n.p4;
                l = n.p5;
                m = n.p6;
                a.left = i;
                a.top = j;
                if (f.a != null) {
                    a.labelPosition = 5;
                }
            }
            if (g != null) {
                let o = DMLChartUtils.a8(g, h, i, j, k, l, m);
                h = o.p1;
                i = o.p2;
                j = o.p3;
                k = o.p4;
                l = o.p5;
                m = o.p6;
                a.width = k;
                a.height = l;
            }
        }
        static ac(a, b, c, d, e) {
            WorksheetChartExtensions.ad(a, b.e.d, null, c, d, e);
        }
        static ad(a, b, c, d, e, f) {
            let g = d != null ? d.f : null;
            a._showBubbleSize$i = SerializationUtils.q(b.a);
            a._showCategoryName$i = SerializationUtils.q(b.b);
            a._showLegendKey$i = SerializationUtils.q(b.c);
            a._showPercentage$i = SerializationUtils.q(b.d);
            a._showRange$i = toNullable(Boolean_$type, g ? true : false);
            a._showSeriesName$i = SerializationUtils.q(b.e);
            a._showValue$i = SerializationUtils.q(b.f);
            if (b.g != null) {
                a.labelPosition = DMLChartExtensions.g(b.g.a);
            }
            a.separator = b.l;
            let h;
            let i;
            if (((() => { let j = WorksheetChartExtensions.l(b.h, h, i); h = j.p1; i = j.p2; return j.ret; })())) {
                a.numberFormat = h;
                a.numberFormatLinked = i;
            }
            let j = b.i;
            let k = j != null ? j.a : null;
            WorksheetChartExtensions.t(a, j, k, c, b.j, null, e, f);
            if (WorksheetChartExtensions.m(c) == false) {
                a.text = null;
            }
        }
        static af(a, b, c, d, e) {
            if (c != null) {
                let f = c.m;
                let g = f != null ? f.a : null;
                let h = f != null ? f.l : null;
                if (h != null) {
                    a.fill = DMLChartUtils.c(h);
                }
                if (g != null) {
                    let i = new ChartBorder();
                    DMLChartExtensions.a4(i, g, d);
                    a.border = i;
                }
                a._invertIfNegative$i = ExcelUtils.dv(CT_Boolean.g(c.c));
                if (c.e != null) {
                    let j = Math.min(400, c.e.g);
                    a._explosion$i = toNullable(Number_$type, j);
                }
            }
        }
        static y(a, b, c, d) {
            if (b == null) {
                return;
            }
            let e = b.a;
            let f = e != null ? e.a : null;
            if (f != null) {
                a.fill = DMLChartUtils.d(f.n);
            }
            if (f != null && f.h.hasValue) {
                a.widthInPoints = ExcelUtils.cj(ST_LineWidth.m(f.h.value));
            }
        }
        static w(a, b, c, d) {
            let e = typeCast(ChartLineBase.$, a);
            WorksheetChartExtensions.y(e, b, c, d);
        }
        static x(a, b, c, d) {
            let e = typeCast(ChartLineBase.$, a);
            WorksheetChartExtensions.y(e, b, c, d);
        }
        static ao(a, b, c, d) {
            if (b == null) {
                return;
            }
            a.gapWidth = b.a != null ? b.a.c : 150;
            let e = b.e;
            let f = b.c;
            if (e != null) {
                WorksheetChartExtensions.an(a.upBar, e, c, d);
            }
            if (f != null) {
                WorksheetChartExtensions.an(a.downBar, f, c, d);
            }
        }
        static an(a, b, c, d) {
            if (b == null) {
                return;
            }
            let e = b.a;
            let f = e != null ? e.a : null;
            if (e != null) {
                a.fill = DMLChartUtils.c(e.l);
            }
            if (f != null) {
                let g = new ChartBorder();
                DMLChartExtensions.a4(g, f, c);
                a.border = g;
            }
        }
        static ar(a, b, c, d) {
            let e = b.d;
            let f = e != null ? e.e : null;
            let g = f != null ? f.a : null;
            let h = b.b;
            if (h == null) {
                return;
            }
            if (g == null) {
                return;
            }
            if (g.c == null || g.c.count == 0) {
                return;
            }
            a._i8();
            try {
                let i = null;
                let j = null;
                let k = null;
                let l = WorksheetChartExtensions.e(b, g.c);
                a.chartType = l;
                j = b.j;
                k = j != null ? j.a : null;
                if (j != null) {
                    a.chartArea.fill = DMLChartUtils.c(j.l);
                    if (k != null) {
                        i = new ChartBorder();
                        DMLChartExtensions.a4(i, k, c);
                        a.chartArea.border = i;
                    }
                }
                let m = g.a;
                if (m != null) {
                    j = m.a;
                    k = j != null ? j.a : null;
                    a.plotArea.fill = DMLChartUtils.c(j.l);
                    if (k != null) {
                        i = new ChartBorder();
                        DMLChartExtensions.a4(i, k, c);
                        a.plotArea.border = i;
                    }
                }
                WorksheetChartExtensions.ay(a, e.a, b, c, d);
                let n = new Dictionary$2(Number_$type, CT_Data.$, 0);
                for (let o of fromEnum(h.c)) {
                    n.addItem(o.f, o);
                }
                let p = new Dictionary$2(Number_$type, Axis.$, 0);
                let q = 0;
                let r = 0;
                for (let s = 0; s < f.d.count; s++) {
                    let t = f.d._inner[s];
                    let u = t.e != null ? 1 : 2;
                    let v = 1;
                    switch (u) {
                        case 1:
                            q += 1;
                            v = q == 1 ? 1 : 2;
                            break;
                        case 2:
                            r += 1;
                            v = r == 1 ? 1 : 2;
                            break;
                    }
                    let w = a._axisCollection$i.add(u, v);
                    WorksheetChartExtensions.v(w, t, b, c, d);
                    p.addItem(t.aa, w);
                }
                let x = new HashSet$1(Number_$type, 0);
                let y = new Dictionary$2(Number_$type, CT_Series.$, 0);
                for (let z = 0; z < g.c.count; z++) {
                    let aa = g.c._inner[z];
                    y.addItem(intSToU(z), aa);
                    if (aa.w.hasValue && aa.w.value) {
                        x.add_1(intSToU(z));
                    }
                }
                let ab = new Dictionary$2(CT_Series.$, Series.$, 0);
                for (let ac of fromEnum(g.c)) {
                    if (ac.w.hasValue && ac.w.value) {
                        continue;
                    }
                    if (ac.y.hasValue) {
                        if (x.contains(ac.y.value)) {
                            continue;
                        }
                    }
                    let ad = a._seriesCollection$i.add();
                    WorksheetChartExtensions.aj(ad, a, ac, b, c, d, n, p, y);
                    ab.addItem(ac, ad);
                }
                for (let ae = 0; ae < g.c.count; ae++) {
                    let af = g.c._inner[ae];
                    if (af.y.hasValue) {
                        let ag = af.y.value;
                        if (ag >= 0 && ag < g.c.count) {
                            let ah = g.c._inner[ag];
                            let ai = null;
                            let aj = null;
                            if (((() => { let ak = ab.tryGetValue(af, ai); ai = ak.p1; return ak.ret; })()) && ((() => { let ak = ab.tryGetValue(ah, aj); aj = ak.p1; return ak.ret; })())) {
                                ai.owningSeries = aj;
                            }
                        }
                    }
                }
                if (e.c != null) {
                    let ak = new Legend();
                    WorksheetChartExtensions.ai(ak, e.c, a, c, d);
                    a.legend = ak;
                }
            }
            finally {
                a._ja();
            }
        }
        static aj(a, b, c, d, e, f, g, h, i) {
            a.chartType = WorksheetChartExtensions.f(c.m);
            let j = null;
            let k = c.a;
            if (k == null) {
            }
            let l = null;
            if (k != null) {
                let m;
                if (((() => { let n = g.tryGetValue(k.b, m); m = n.p1; return n.ret; })()) == false) {
                    return;
                }
                if (m.b != null) {
                    if (m.b.a != null) {
                        if (((() => { let n = d.l.tryGetValue(m.b.a.d, l); l = n.p1; return n.ret; })())) {
                            j = l._j;
                        }
                    }
                    a.xValues = new XValues(e, j, 0, null, null);
                }
                if (m.a != null) {
                    if (m.a.a != null) {
                        if (((() => { let n = d.l.tryGetValue(m.a.a.d, l); l = n.p1; return n.ret; })())) {
                            j = l._j;
                        }
                    }
                    a.values = new SeriesValues(e, j, null, false);
                }
                else if (m.c != null) {
                    if (m.c.a != null) {
                        if (((() => { let n = d.l.tryGetValue(m.c.a.d, l); l = n.p1; return n.ret; })())) {
                            j = l._j;
                        }
                    }
                    a.values = new SeriesValues(e, j, null, false);
                    a.values._v = true;
                }
            }
            if (c.g != null && c.g.a != null) {
                j = null;
                if (c.g.a.a != null && c.g.a.a.d != null && ((() => { let n = d.l.tryGetValue(c.g.a.a.d, l); l = n.p1; return n.ret; })())) {
                    j = l._j;
                }
                let n = c.g.a.c;
                a.name = SeriesName._b(e, j, n);
            }
            let o = c.o;
            let p = o != null ? o.a : null;
            if (o != null) {
                a.fill = DMLChartUtils.c(o.l);
            }
            if (p != null) {
                let q = ChartExDeserializer.e(a.chartType);
                if (q) {
                    let r = new ChartLine();
                    DMLChartExtensions.a6(r, p, e);
                    a.line = r;
                }
                else {
                    let s = new ChartBorder();
                    DMLChartExtensions.a4(s, p, e);
                    a.border = s;
                }
            }
            for (let t of fromEnum(c.q)) {
                let u = null;
                if (((() => { let v = h.tryGetValue(t.h, u); u = v.p1; return v.ret; })()) == false) {
                    continue;
                }
                if (u.type == 2) {
                    a.axisGroup = u.axisGroup;
                    break;
                }
            }
            let v = c.e;
            let w = v != null ? v.b : null;
            if (w != null) {
                a.axisBinning = ChartExDeserializer.b(w);
            }
            if (a.chartType == 114) {
                a.boxAndWhiskerSettings = ChartExDeserializer.a(v);
            }
            if (v != null && v.i != null && v.i.b.hasValue) {
                a.showWaterfallConnectorLines = v.i.b.value;
            }
            if (v != null && v.c != null) {
                a.geographicMapSettings = WorksheetChartExtensions.i(v.c, c.k, c.i, v.g, e);
            }
            let x = c.r;
            let y = x.count > 0 ? new Dictionary$2(Number_$type, DataPoint.$, 0) : null;
            for (let z = 0; z < x.count; z++) {
                let aa = x._inner[z];
                o = aa.a;
                p = o != null ? o.a : null;
                let ab = DMLChartUtils.c(o.l);
                let ac = null;
                if (p != null) {
                    ac = new ChartBorder();
                    DMLChartExtensions.a4(ac, p, e);
                }
                let ad = new DataPoint(null);
                ad.fill = ab;
                ad.border = ac;
                let ae = aa.d;
                let af = null;
                if (((() => { let ag = y.tryGetValue(ae, af); af = ag.p1; return ag.ret; })()) == false) {
                    y.addItem(ae, ad);
                }
            }
            let ag = v != null ? v.m : null;
            if (ag != null && ag.a.count > 0) {
                if (y == null) {
                    y = new Dictionary$2(Number_$type, DataPoint.$, 0);
                }
                for (let ah of fromEnum(ag.a)) {
                    let ai = ah;
                    let aj = null;
                    if (((() => { let ak = y.tryGetValue(ai, aj); aj = ak.p1; return ak.ret; })()) == false) {
                        aj = new DataPoint(null);
                        y.addItem(ai, aj);
                    }
                    aj.setAsTotal = true;
                }
            }
            let ak = c.c;
            if (ak != null) {
                let al = toNullable(DataLabelPosition_$type, null);
                if (a.chart.chartType == 118) {
                    al = toNullable(DataLabelPosition_$type, 1);
                }
                a.showDataLabels = true;
                WorksheetChartExtensions.ak(a.dataLabels, ak, v, e, f);
                if (al.hasValue) {
                    a.dataLabels.labelPosition = al.value;
                }
                if (ak.i.count > 0) {
                    if (y == null) {
                        y = new Dictionary$2(Number_$type, DataPoint.$, 0);
                    }
                    for (let am of fromEnum(ak.i)) {
                        let an = am.i;
                        let ao = null;
                        if (((() => { let ap = y.tryGetValue(an, ao); ao = ap.p1; return ap.ret; })()) == false) {
                            ao = new DataPoint(null);
                            y.addItem(an, ao);
                        }
                        let ap = new DataLabel();
                        WorksheetChartExtensions.ae(ap, am, e, f);
                        if (al.hasValue) {
                            ap.labelPosition = al.value;
                        }
                        ao.dataLabel = ap;
                    }
                    for (let aq of fromEnum(ak.j)) {
                        let ar = aq.b;
                        let as = null;
                        if (((() => { let at = y.tryGetValue(ar, as); as = at.p1; return at.ret; })()) == false) {
                            as = new DataPoint(null);
                            y.addItem(ar, as);
                        }
                        let at = as.dataLabel;
                        if (at == null) {
                            at = new DataLabel();
                        }
                        at.isDeleted = true;
                        if (al.hasValue) {
                            at.labelPosition = al.value;
                        }
                        as.dataLabel = at;
                    }
                }
            }
            if (y != null) {
                a._dataPointCollection$i._ak(y);
            }
        }
        static ai(a, b, c, d, e) {
            if (b == null) {
                return;
            }
            if (b.j.hasValue) {
                a.overlay = b.j.value;
            }
            if (b.l.hasValue) {
                let f = b.h.hasValue ? b.h.value : 1;
                a.position = ChartExExtensions.f(b.l.value, f);
            }
            let g = b.d;
            let h = g != null ? g.a : null;
            if (g != null) {
                a.fill = DMLChartUtils.c(g.l);
            }
            if (h != null) {
                let i = new ChartBorder();
                DMLChartExtensions.a4(i, h, d);
                a.border = i;
            }
            let j = b.e;
            if (j != null) {
                DMLChartUtils.a7(a, j, d);
            }
            let k = c._seriesCollection$i.count;
            let l = new Array(k);
            for (let m = 0; m < k; m++) {
                l[m] = new LegendEntry(a);
            }
            a._legendEntries$i._ag(l);
        }
        static ak(a, b, c, d, e) {
            WorksheetChartExtensions.ae(a, b, d, e);
            if (c != null && c.e != null) {
                a.parentLabelLayout = ChartExExtensions.g(c.e.a);
            }
        }
        static ae(a, b, c, d) {
            if (b == null) {
                return;
            }
            if (b.b != null) {
                a.numberFormat = b.b.c;
                a.numberFormatLinked = b.b.a.hasValue ? b.b.a.value : stringIsNullOrEmpty(a.numberFormat);
            }
            let e = b.c;
            let f = e != null ? e.a : null;
            let g = null;
            let h = b.d;
            WorksheetChartExtensions.t(a, e, f, g, h, null, c, d);
            a.separator = b.h;
            WorksheetChartExtensions.au(a, b.a, c, d);
            if (b.g.hasValue) {
                a.labelPosition = ChartExExtensions.a(b.g.value);
            }
        }
        static au(a, b, c, d) {
            if (b == null) {
                return;
            }
            a._showCategoryName$i = SerializationUtils.r(b.a);
            a._showSeriesName$i = SerializationUtils.r(b.c);
            a._showValue$i = SerializationUtils.r(b.e);
        }
        static v(a, b, c, d, e) {
            let f = d.workbook;
            WorksheetChartExtensions.at(a, b.t, f, true);
            let g = b.s;
            let h = g != null ? g.a : null;
            if (g != null) {
                a.tickLabels.fill = DMLChartUtils.c(g.l);
            }
            if (h != null) {
                let i = new ChartTickLines();
                DMLChartExtensions.a7(i, h, d);
                a.tickLines = i;
            }
            WorksheetChartExtensions.as(a, b.e, b.r, d, e);
            WorksheetChartExtensions.ax(a, b.a, c, d, e);
            if (b.j != null) {
                a.tickLabels.numberFormat = b.j.c;
                if (b.j.a.hasValue) {
                    a.tickLabels.numberFormatLinked = b.j.a.value;
                }
            }
            if (b.f != null) {
                let j = DMLChartUtils.g(b.f.a, 0, a, true);
                a.majorGridLines = j;
            }
            if (b.h != null) {
                let k = DMLChartUtils.g(b.h.a, 1, a, true);
                a.minorGridLines = k;
            }
            if (b.n != null && b.n.b.hasValue) {
                a.majorTickMark = ChartExExtensions.h(b.n.b.value);
            }
            else {
                a.majorTickMark = 4142;
            }
            if (b.p != null && b.p.b.hasValue) {
                a.minorTickMark = ChartExExtensions.h(b.p.b.value);
            }
            else {
                a.minorTickMark = 4142;
            }
            if (b.w.hasValue && b.w.value) {
                a.visible = false;
            }
            let l = b.c;
            if (l != null) {
                if (l.d.hasValue) {
                    a.displayUnit = ChartExExtensions.b(l.d.value);
                }
                else {
                    a.displayUnit = -4114;
                }
                let m = l.a;
                if (m != null) {
                    let n = new DisplayUnitLabel();
                    let o = null;
                    if (m.a != null) {
                        o = ChartExExtensions.i(m.a);
                    }
                    WorksheetChartExtensions.ah(n, m.b, o, m.c, null, d, e);
                    a.displayUnitLabel = n;
                    if (a.displayUnit == -4114 && n.text != null) {
                        let p = n.text.unformattedString;
                        let q;
                        if (((() => { let r = tryParseNumber(p, q); q = r.p1; return r.ret; })())) {
                            a.displayUnit = -4114;
                            a.displayUnitCustom = q;
                            n.text = null;
                        }
                    }
                }
            }
        }
        static as(a, b, c, d, e) {
            if (b != null) {
                if (b.a != null && b.a.b.hasValue) {
                    let f = b.a.b.value * 100;
                    f = Math.min(f, 500);
                    f = Math.max(f, 0);
                    a._gapWidth$i = toNullable(Number_$type, f);
                }
            }
            else if (c != null) {
                if (c.b == null) {
                    a.maximumScaleIsAuto = true;
                }
                else {
                    a.maximumScaleIsAuto = c.b.a;
                    if (c.b.b.hasValue) {
                        a.maximumScale = c.b.b.value;
                    }
                }
                if (c.d == null) {
                    a.minimumScaleIsAuto = true;
                }
                else {
                    a.minimumScaleIsAuto = c.d.a;
                    if (c.d.b.hasValue) {
                        a.minimumScale = c.d.b.value;
                    }
                }
                if (c.f == null) {
                    a.majorUnitIsAuto = true;
                }
                else {
                    a.majorUnitIsAuto = c.f.a;
                    if (c.f.b.hasValue) {
                        a.majorUnit = c.f.b.value;
                    }
                }
                if (c.h == null) {
                    a.minorUnitIsAuto = true;
                }
                else {
                    a.minorUnitIsAuto = c.h.a;
                    if (c.h.b.hasValue) {
                        a.minorUnit = c.h.b.value;
                    }
                }
            }
        }
        static c(a, b, c, d) {
            if (a == null) {
                return null;
            }
            let e = new ChartTitle();
            let f = a.b;
            let g = f != null ? f.a : null;
            let h = a.a != null ? a.a.b : null;
            let i = ((() => {
                let $ret = new CT_Tx();
                $ret.b = h;
                return $ret;
            })());
            WorksheetChartExtensions.t(e, f, g, i, a.c, new CT_Layout(), c, d);
            if (a.a != null && a.a.a != null) {
                let j = a.a.a.a;
                if (j != null) {
                    let k;
                    if (((() => { let l = b.l.tryGetValue(j.d, k); k = l.p1; return l.ret; })())) {
                        e._a5 = k._j;
                    }
                }
                let l = a.a.a.c;
                if (e.text == null && stringIsNullOrEmpty(l) == false) {
                    e.text = new FormattedString(l);
                }
            }
            return e;
        }
        static ax(a, b, c, d, e) {
            if (b == null) {
                return;
            }
            a.axisTitle = WorksheetChartExtensions.c(b, c, d, e);
        }
        static ay(a, b, c, d, e) {
            if (b == null) {
                return;
            }
            let f = WorksheetChartExtensions.c(b, c, d, e);
            if (b.k.hasValue) {
                f.overlay = b.k.value;
            }
            f.position = WorksheetChartExtensions.h(b.l, b.j);
            a.chartTitle = f;
        }
        static h(a, b) {
            if (a.hasValue == false) {
                a = toNullable(ST_SidePos_$type, 1);
            }
            if (b.hasValue == false) {
                b = toNullable(ST_PosAlign_$type, 1);
            }
            switch (a.value) {
                case 1:
                    switch (b.value) {
                        case 1: return 100;
                        case 0: return 104;
                        case 2: return 105;
                    }
                    break;
                case 3:
                    switch (b.value) {
                        case 1: return 103;
                        case 0: return 106;
                        case 2: return 107;
                    }
                    break;
                case 0:
                    switch (b.value) {
                        case 1: return 101;
                        case 0: return 108;
                        case 2: return 109;
                    }
                    break;
                case 2:
                    switch (b.value) {
                        case 1: return 102;
                        case 0: return 110;
                        case 2: return 111;
                    }
                    break;
            }
            return 100;
        }
        static e(a, b) {
            let c = 0;
            for (let d of fromEnum(b)) {
                switch (d.m) {
                    case 1:
                        c += 1;
                        continue;
                    case 3: return 116;
                    case 0: return 114;
                    case 2: return 115;
                    case 4: return 121;
                    case 5: return 118;
                    case 6: return 119;
                    case 7: return 120;
                }
            }
            return c > 0 ? 117 : 0;
        }
        static f(a) {
            switch (a) {
                case 0: return 114;
                case 1: return 51;
                case 3: return 116;
                case 5: return 118;
                case 6: return 119;
                case 7: return 120;
                case 2: return 115;
                case 4: return 121;
                default: return 0;
            }
        }
        static i(a, b, c, d, e) {
            if (a == null && b == null && c == null && d == null) {
                return null;
            }
            let f = c != null && c.h.hasValue && c.h.value > 2 ? 1 : 0;
            let g = null;
            let h = null;
            let i = null;
            if (b != null) {
                if (b.e != null) {
                    g = DMLChartUtils.af(b.e);
                }
                if (b.c != null) {
                    h = DMLChartUtils.af(b.c);
                }
                if (b.a != null) {
                    i = DMLChartUtils.af(b.a);
                }
            }
            let j = null;
            if (WorkbookColorInfo.l_op_Inequality(g, null) || WorkbookColorInfo.l_op_Inequality(h, null) || WorkbookColorInfo.l_op_Inequality(i, null) || f != 0) {
                j = new GeographicMapColors(f, g, h, i);
            }
            let k = a != null ? a.j : "en-US";
            let l = a != null ? a.l : "US";
            let m = a != null ? a.h : "Powered by Bing";
            let n = d != null ? ChartExExtensions.c(d.a) : 0;
            let o = toNullable(GeographicMapProjection_$type, null);
            let p = toNullable(GeographicMappingArea_$type, null);
            if (a != null && a.d.hasValue) {
                o = toNullable(GeographicMapProjection_$type, ChartExExtensions.e(a.d.value));
            }
            if (a != null && a.f.hasValue) {
                p = toNullable(GeographicMappingArea_$type, ChartExExtensions.d(a.f.value));
            }
            let q = new GeographicMapSettings(k, l, m, o, p, n, j);
            return q;
        }
        static aw(a, b, c) {
            let d = false;
            let e = 0;
            for (let f of fromEnum(c)) {
                let g = f.key;
                let h = f.value.chart;
                if (h.axisIds == null) {
                    e += 1;
                    continue;
                }
                for (let i of fromEnum(h.axisIds)) {
                    let j = null;
                    if (((() => { let k = b.tryGetValue(i.g, j); j = k.p1; return k.ret; })())) {
                        if (j.c.type == 2) {
                            g.axisGroup = j.c.axisGroup;
                            if (g.axisGroup == 1) {
                                d = true;
                            }
                            break;
                        }
                    }
                }
            }
            if (e == 0) {
                return;
            }
            let k = 0;
            for (let l of fromEnum(c)) {
                let m = l.key;
                let n = l.value.chart;
                if (n.axisIds != null) {
                    continue;
                }
                k += 1;
                if (d == false) {
                    m.axisGroup = k == 1 ? 1 : 2;
                }
                else {
                    m.axisGroup = 2;
                }
            }
        }
        static l(a, b, c) {
            b = null;
            c = false;
            if (a == null) {
                return {
                    ret: false,
                    p1: b,
                    p2: c
                };
            }
            b = SerializationUtils.v(a.c);
            c = a.a;
            return {
                ret: true,
                p1: b,
                p2: c
            };
        }
        static az(a, b, c) {
            if (a == null || a.m == null || a.m.count == 0) {
                return;
            }
            let d = new List$1(Trendline.$, 0);
            for (let e of fromEnum(b)) {
                for (let f of fromEnum(e._trendlineCollection$i)) {
                    d.add(f);
                }
            }
            if (d.count == 0) {
                return;
            }
            let g = new Dictionary$2(Number_$type, CT_LegendEntry.$, 0);
            let h = b.count - 1;
            for (let i of fromEnum(a.m)) {
                let j = i.b.g;
                if (j <= h) {
                    continue;
                }
                g.addItem(j, i);
            }
            for (let k = 0; k < d.count; k++) {
                let l = b.count + k;
                let m = null;
                if (((() => { let n = g.tryGetValue(l, m); m = n.p1; return n.ret; })())) {
                    let n = d._inner[k];
                    n.legendEntry = DMLChartUtils.m(m, c);
                }
            }
        }
        static m(a) {
            if (a == null) {
                return false;
            }
            let b = a.b;
            let c = b != null ? b.d : null;
            let d = false;
            if (c != null) {
                for (let e of fromEnum(c)) {
                    if (e.f == null) {
                        return false;
                    }
                    for (let f of fromEnum(e.f)) {
                        if (f.b != null) {
                            return false;
                        }
                        if (f.a != null && stringIsNullOrEmpty(f.a.c) == false) {
                            d = true;
                        }
                    }
                }
            }
            return d;
        }
        static o(a, b = true) {
            let c = new List$1(ISeries_$type, 0);
            for (let d of fromEnum(a)) {
                let e = d.getSeries();
                c.o(e);
            }
            if (b) {
                DocCoreUtils.as(ISeries_$type, c, new ISeriesSortComparer());
            }
            return c;
        }
        static n(a) {
            if (a == null) {
                return null;
            }
            let b = new List$1(IChart_$type, 0);
            if (a.c != null) {
                b.add(a.c);
            }
            if (a.d != null) {
                b.add(a.d);
            }
            if (a.b != null) {
                b.add(a.b);
            }
            if (a.e != null) {
                b.add(a.e);
            }
            if (a.f != null) {
                b.add(a.f);
            }
            if (a.g != null) {
                b.add(a.g);
            }
            if (a.h != null) {
                b.add(a.h);
            }
            if (a.i != null) {
                b.add(a.i);
            }
            if (a.j != null) {
                b.add(a.j);
            }
            if (a.m != null) {
                b.add(a.m);
            }
            if (a.n != null) {
                b.add(a.n);
            }
            if (a.o != null) {
                b.add(a.o);
            }
            if (a.p != null) {
                b.add(a.p);
            }
            if (a.q != null) {
                b.add(a.q);
            }
            if (a.r != null) {
                b.add(a.r);
            }
            if (a.s != null) {
                b.add(a.s);
            }
            if (a.t != null) {
                b.add(a.t);
            }
            if (a.u != null) {
                b.add(a.u);
            }
            if (a.v != null) {
                b.add(a.v);
            }
            if (a.w != null) {
                b.add(a.w);
            }
            if (a.x != null) {
                b.add(a.x);
            }
            if (a.y != null) {
                b.add(a.y);
            }
            if (a.z != null) {
                b.add(a.z);
            }
            if (a.aa != null) {
                b.add(a.aa);
            }
            if (a.ab != null) {
                b.add(a.ab);
            }
            if (a.ac != null) {
                b.add(a.ac);
            }
            if (a.ad != null) {
                b.add(a.ad);
            }
            if (a.ae != null) {
                b.add(a.ae);
            }
            return b;
        }
        static t(a, b, c, d, e, f, g, h) {
            let i = g.workbook;
            if (c != null) {
                let j = new ChartBorder(a.owner);
                DMLChartExtensions.a4(j, c, g);
                a.border = j;
            }
            if (b != null) {
                a.fill = DMLChartUtils.c(b.l);
            }
            if (d != null) {
                if (d.a != null) {
                    let k = d.a.e;
                    let l = WorkbookLoadManagerExcel2007._bs(k);
                    k = l.p0;
                    let m = Formula._k(k, 1, 0, i.currentFormat, CultureInfo.invariantCulture, h._bi);
                    a._b2(g, m);
                }
                else {
                    a.text = DMLChartUtils.t(d, a);
                }
            }
            else if (e != null) {
                a.text = DMLChartUtils.u(e, a);
            }
            let n = e != null ? e.a : null;
            if (n == null && d != null && d.b != null) {
                n = d.b.a;
            }
            if (n != null) {
                if (n.x.hasValue) {
                    a.horizontalOverflow = DMLChartExtensions.r(n.x.value);
                }
                if (n.at.hasValue) {
                    a.verticalOverflow = DMLChartExtensions.s(n.at.value);
                }
                if (n.ar.hasValue) {
                    a.textDirection = DMLChartExtensions.q(n.ar.value);
                }
                if (n.af.hasValue) {
                    let o = ST_Angle.j(n.af.value);
                    a.rotation = ExcelUtils.cl(o);
                }
                if (n.av.hasValue) {
                    a.wrapText = n.av.value == 1;
                }
                if (n.l.hasValue) {
                    a.verticalAlignment = DMLChartExtensions.y(n.l.value);
                }
            }
            let p = e != null && e.d != null && e.d.count > 0 ? e.d._inner[0] : null;
            let q = p != null ? p.c : null;
            if (q == null && d != null && d.b != null && d.b.d != null && d.b.d.count > 0) {
                q = d.b.d._inner[0].c;
            }
            if (q != null) {
                a.readingOrder = q.m.hasValue == false ? -5002 : q.m.value ? -5004 : -5003;
                if (q.a != null) {
                    let r = a._e(i);
                    DMLChartUtils.a5(r, typeCast(CT_TextCharacterProperties_DML.$, q.a));
                    if (nullableEquals(q.a.r, null) && r.height >= 0) {
                    }
                }
            }
            let s = -4105;
            let t, u, v, w;
            let x = toNullable(Boolean_$type, null);
            let y = DMLChartUtils.a8(f, s, t, u, v, w, x);
            s = y.p1;
            t = y.p2;
            u = y.p3;
            v = y.p4;
            w = y.p5;
            x = y.p6;
            a.position = s;
            a.left = t;
            a.top = u;
        }
        static r(a, b, c, d, e) {
            let f = b.f.k.ah;
            let g = new List$1(Axis.$, 0);
            let h = 1;
            let i = 1;
            let j = new Dictionary$2(Number_$type, Axis.$, 1, 4);
            let k = new List$1(Tuple$2.$.specialize(Number_$type, Axis.$), 0);
            let l = 0;
            for (let m = 0; m < f.count; m++) {
                let n = f._inner[m];
                let o = 1;
                switch (n.axisType) {
                    case 1:
                        o = h;
                        h = 2;
                        break;
                    case 2:
                        o = i;
                        i = 2;
                        break;
                    case 3:
                        o = 1;
                        break;
                }
                let p = n.axisType;
                if (l > 1) {
                    p = 1;
                }
                let q = a._axisCollection$i.add(p, o);
                if (n.axisType == 2) {
                    l += 1;
                }
                WorksheetChartExtensions.s(q, n, b, c, d);
                j.addItem(n.id, q);
                k.add(Tuple.a(Number_$type, Axis.$, n.crossAxId, q));
                e.addItem(n.id, Tuple.a(Axis.$, IAxis_$type, q, n));
            }
            if (WorksheetChart._gr(a.chartType) == false) {
                let r = a._axisCollection$i.item(2, 1);
                let s = a._axisCollection$i.item(2, 2);
                if (r != null && s != null) {
                    r._ab = s;
                    s._ab = r;
                }
                return;
            }
            for (let t of fromEnum(k)) {
                let u = null;
                if (((() => { let v = j.tryGetValue(t.c, u); u = v.p1; return v.ret; })())) {
                    t.d._ab = u;
                }
            }
            let v = new Dictionary$2(Axis.$, AxisCrosses_$type, 0);
            let w = new Dictionary$2(Axis.$, Number_$type, 0);
            let x = new Dictionary$2(Axis.$, Boolean_$type, 0);
            for (let y of fromEnum(e.values)) {
                let z = y.c._ab;
                if (z == null) {
                    continue;
                }
                let aa = -4105;
                if (((() => { let ab = v.tryGetValue(z, aa); aa = ab.p1; return ab.ret; })()) == false) {
                    v.addItem(z, y.c.crosses);
                }
                let ab = NaN;
                if (((() => { let ac = w.tryGetValue(z, ab); ab = ac.p1; return ac.ret; })()) == false) {
                    w.addItem(z, y.c.crossesAt);
                }
                let ac = false;
                if (((() => { let ad = x.tryGetValue(z, ac); ac = ad.p1; return ad.ret; })()) == false) {
                    x.addItem(z, y.c.axisBetweenCategories);
                }
            }
            for (let ad of fromEnum(v)) {
                ad.key.crosses = ad.value;
            }
            for (let ae of fromEnum(w)) {
                ae.key._dy(ae.value, false);
            }
            for (let af of fromEnum(x)) {
                af.key.axisBetweenCategories = af.value;
            }
        }
        static s(a, b, c, d, e) {
            let f = d.workbook;
            let g = b.sharedProps;
            let h = c.f;
            let i = a.chart;
            if (g.e != null) {
                a.position = DMLChartExtensions.b(g.e.a);
            }
            if (g.n != null) {
                let j = new ChartTitle();
                j._l(i);
                WorksheetChartExtensions.aa(j, g.n, h, b, d, e);
                a.axisTitle = j;
            }
            let k = b.baseUnit;
            if (k != null) {
                a.baseUnit = k.c.hasValue ? DMLChartExtensions.w(k.c.value) : 0;
                a.baseUnitIsAuto = k.d;
            }
            let l = toNullable(ST_TimeUnit_$type, null);
            let m = toNullable(ST_TimeUnit_$type, null);
            if (((() => { let n = b._tryGetMajorMinorTimeUnit$i(m, l); m = n.p0; l = n.p1; return n.ret; })())) {
                if (m.hasValue) {
                    a.majorUnitScale = DMLChartExtensions.w(m.value);
                    a.majorUnitIsAuto = false;
                }
                else {
                    a.majorUnitIsAuto = true;
                }
                if (l.hasValue) {
                    a.minorUnitScale = DMLChartExtensions.w(l.value);
                    a.minorUnitIsAuto = false;
                }
                else {
                    a.minorUnitIsAuto = true;
                }
            }
            let n = g.o;
            let o = n != null ? n.a : null;
            a.categoryType = b._categoryType$i.hasValue ? b._categoryType$i.value : -4105;
            let p = g.h != null ? g.h.a : 0;
            a.crosses = DMLChartExtensions.a(p);
            if (g.b != null) {
                a.crossesAt = g.b.f;
            }
            a.axisBetweenCategories = b.axisCrossesBetween;
            let q = b.dispUnits;
            let r = toNullable(Number_$type, null);
            a.displayUnit = q != null ? ((() => { let s = DMLChartUtils.j(q, r); r = s.p1; return s.ret; })()) : -4142;
            if (r.hasValue) {
                a.displayUnitCustom = r.value;
            }
            let s = q != null ? q.c : null;
            if (s != null) {
                let t = new DisplayUnitLabel();
                WorksheetChartExtensions.ag(t, s, d, e);
                a.displayUnitLabel = t;
            }
            let u;
            let v;
            if (((() => { let w = WorksheetChartExtensions.l(g.i, u, v); u = w.p1; v = w.p2; return w.ret; })())) {
                a.tickLabels.numberFormat = u;
                a.tickLabels.numberFormatLinked = v;
            }
            let w = g.j;
            if (w != null) {
                if (w.g != null) {
                    a.reversePlotOrder = (w.g.a == 4);
                }
                let x = w.e;
                if (x != null) {
                    a.logBase = x.a;
                }
                a.scaleType = x != null ? -4133 : -4132;
                a.minimumScaleIsAuto = true;
                a.maximumScaleIsAuto = true;
                if (w.c != null) {
                    a.minimumScaleIsAuto = false;
                    a.minimumScale = w.c.f;
                }
                if (w.a != null) {
                    a.maximumScaleIsAuto = false;
                    a.maximumScale = w.a.f;
                }
            }
            let y, z;
            if (((() => { let aa = b._tryGetMajorMinorUnit$i(y, z); y = aa.p0; z = aa.p1; return aa.ret; })())) {
                if (z.hasValue && y.hasValue && z.value >= y.value) {
                    z = nullableDivide(y, 5);
                }
                a._dt(y, z);
            }
            if (g.k != null) {
                a.tickLabelPosition = DMLChartExtensions.u(g.k.b);
            }
            a.majorTickMark = g.l != null ? DMLChartExtensions.v(g.l.b) : 4142;
            a.minorTickMark = g.m != null ? DMLChartExtensions.v(g.m.b) : 4142;
            if (o != null) {
                let aa = DMLChartUtils.i(o);
                a.tickLines = aa;
            }
            if (n != null) {
                a.tickLabels.fill = DMLChartUtils.c(n.l);
            }
            let ab = g.p;
            WorksheetChartExtensions.at(a, ab, f, false);
            let ac = b._tickLabelAlignment$i;
            if (ac.hasValue) {
                a.tickLabels.alignment = DMLChartExtensions.t(ac.value);
            }
            if (b._tickLabelMultiLevel$i.hasValue) {
                a.tickLabels.multiLevel = b._tickLabelMultiLevel$i.value;
            }
            let ad = b._tickMarkSkipValue$i;
            let ae = b._tickLabelSkip$i;
            if (ad.hasValue) {
                a.tickMarkSpacing = ad.value;
            }
            a.tickLabelSpacingIsAuto = true;
            if (ae.hasValue) {
                a.tickLabelSpacing = ae.value;
                a.tickLabelSpacingIsAuto = false;
            }
            let af = b._tickLabelOffset$i;
            if (af.hasValue) {
                a.tickLabels.offset = af.value;
            }
            let ag = ab != null ? ab.a : null;
            if (ag != null && ag.ar.hasValue) {
                a.tickLabels.textDirection = DMLChartExtensions.q(ag.ar.value);
            }
            if (ag != null && ag.af.hasValue) {
                if (ag.af.value == -60000000) {
                    let ah = toNullable(Number_$type, null);
                    let ai = toNullable(ST_TextVerticalType_$type, null);
                    let aj = g.n;
                    ab = aj != null ? aj.i : null;
                    ag = ab != null ? ab.a : null;
                    if (ag != null) {
                        ai = ag.ar;
                        ah = ag.af;
                    }
                    if (a.axisTitle != null && ai.hasValue == false && ah.hasValue == false) {
                        a.axisTitle.textDirection = 2;
                        a.axisTitle.rotation = 0;
                    }
                }
                else {
                    let ak = ST_Angle.j(ag.af.value);
                    a.tickLabels.rotation = ExcelUtils.cl(ak);
                }
            }
            if (g.f != null) {
                let al = DMLChartUtils.f(g.f, 0, a);
                a.majorGridLines = al;
            }
            if (g.g != null) {
                let am = DMLChartUtils.f(g.g, 1, a);
                a.minorGridLines = am;
            }
            a.visible = g.a == null || g.a.k == false;
        }
        static at(a, b, c, d) {
            if (b != null && b.d != null && b.d.count > 0) {
                let e = b.d._inner[0];
                let f = e != null ? e.c : null;
                let g = f != null ? typeCast(CT_TextCharacterProperties_DML.$, f.a) : null;
                let h = e != null ? typeCast(CT_TextCharacterProperties_DML.$, e.a) : null;
                if (g == null) {
                    g = h;
                }
                if (g != null) {
                    let i = a.tickLabels._e(c);
                    DMLChartUtils.a5(i, g);
                }
                if (f != null) {
                    a.tickLabels.readingOrder = f.m.hasValue == false ? -5002 : f.m.value ? -5004 : -5003;
                }
            }
            let j = b != null ? b.a : null;
            if (d && j != null) {
                let k = a.tickLabels;
                let l;
                let m;
                let n = WorksheetChartExtensions.q(j, l, m);
                l = n.p1;
                m = n.p2;
                k.rotation = l;
                k.textDirection = m;
                if (j.l.hasValue && j.l.value == 1) {
                    k.alignment = -4108;
                }
                else if (j.m.hasValue && j.m.value) {
                    k.alignment = -4108;
                }
            }
        }
        static av(a, b, c, d, e, f) {
            let g = e.workbook;
            let h = c.chart;
            let i = c.sharedProps;
            let j = i.d;
            let k = j != null ? j.l : null;
            let l = i.c;
            b.name = DMLChartUtils.n(l, e, f);
            let m = h._sT_Shape$i;
            if (m.hasValue) {
                b._barShape$i = toNullable(BarShape_$type, DMLChartExtensions.c(m.value));
            }
            let n = c.getSeriesChartType(a.chartType, c.seriesType);
            if (j != null && j.a != null) {
                let o = new ChartBorder(null);
                DMLChartExtensions.a4(o, j.a, e);
                if (WorksheetChart._gd(n, 1)) {
                    let p = new ChartLine();
                    p.fill = o.fill;
                    p.widthInPoints = o.widthInPoints;
                    p.lineStyle = DMLChartExtensions.m(o.lineStyle);
                    b.line = p;
                }
                else {
                    b.border = o;
                }
            }
            b.chartType = n;
            b.type = h.seriesType;
            if (k != null) {
                let q = DMLChartUtils.c(k);
                b.fill = q;
            }
            b.bubbleSizes = c.getBubbleSizes(e, f);
            let r = c.cT_ErrBars;
            if (r != null) {
                b.errorBars = DMLChartUtils.k(r, e);
            }
            b.invertIfNegative = c.invertIfNegativeValue;
            let s = c.cT_NumDataSource;
            if (s != null) {
                if (s.b != null) {
                    b.values = typeCast(SeriesValues.$, DMLChartUtils.p(s.b, e, f, false));
                }
                else if (s.a != null) {
                    b.values = typeCast(SeriesValues.$, DMLChartUtils.o(s.a, e, f, false));
                }
            }
            let t = c.cT_AxDataSource;
            if (t != null) {
                if (t.e != null) {
                    b.xValues = DMLChartUtils.s(t.e, e, f);
                }
                else if (t.a != null) {
                    b.xValues = DMLChartUtils.q(t.a, e, f);
                }
                else if (t.c != null) {
                    b.xValues = typeCast(XValues.$, DMLChartUtils.p(t.c, e, f, true));
                }
                else if (t.d != null) {
                    b.xValues = typeCast(XValues.$, DMLChartUtils.r(t.d, e, f));
                }
                else if (t.b != null) {
                    b.xValues = typeCast(XValues.$, DMLChartUtils.o(t.b, e, f, true));
                }
            }
            let u = c.cT_Marker;
            if (u != null) {
                let v = null;
                let w = null;
                let x = toNullable(Number_$type, null);
                let y = toNullable(MarkerStyle_$type, null);
                let z = WorksheetChartExtensions.p(u, e, v, w, x, y);
                v = z.p2;
                w = z.p3;
                x = z.p4;
                y = z.p5;
                b.markerFill = v;
                b.markerBorder = w;
                if (x.hasValue) {
                    b.markerSize = x.value;
                }
                if (y.hasValue) {
                    b.markerStyle = y.value;
                }
            }
            else if (WorksheetChart._f4(a.chartType)) {
                b.markerStyle = -4105;
            }
            if (i.b != null) {
                b.plotOrder = i.b.g;
            }
            let aa = c.cT_PictureOptions;
            if (aa != null) {
                b.applyPicToEnd = aa.a != null ? aa.a.k : false;
                b.applyPicToFront = aa.c != null ? aa.c.k : false;
                b.applyPicToSides = aa.e != null ? aa.e.k : false;
                if (aa.g != null) {
                    b.pictureType = DMLChartExtensions.p(aa.g.a);
                }
                if (aa.i != null) {
                    b.pictureUnit = aa.i.a;
                }
            }
            let ab = c.getExplosion();
            if (ab != null) {
                let ac = Math.min(400, ab.g);
                b.explosion = ac;
                if (b.explosion > 0) {
                    switch (b.chartType) {
                        case 5:
                            b.chartType = 69;
                            break;
                        case -4102:
                            b.chartType = 70;
                            break;
                        case -4120:
                            b.chartType = 80;
                            break;
                    }
                }
            }
            let ad = c.getSmooth();
            if (ad != null) {
                b.smooth = ad.k;
            }
            let ae = c.getTrendlines();
            if (ae != null) {
                let af = b._trendlineCollection$i;
                for (let ag of fromEnum(ae)) {
                    let ah = new Trendline(af);
                    WorksheetChartExtensions.al(ah, ag, e, f);
                    af._al(ah);
                }
            }
            let ai = null;
            let aj = null;
            let ak = ((() => { let al = c.getDLbls(aj); aj = al.p0; return al.ret; })());
            if (ak != null) {
                ai = CT_DLbls.c(ak.b);
            }
            let al = c.getDataPoints();
            WorksheetChartExtensions.u(a, b, c, ak, ai, aj, al, e, f);
            if (c.isBubble3D) {
                a.chartType = 87;
                b.chartType = 87;
            }
        }
        static u(a, b, c, d, e, f, g, h, i) {
            let j = h.workbook;
            let k = b._dataPointCollection$i;
            let l = null;
            let m = null;
            let n = new Dictionary$2(Number_$type, CT_DPt.$, 0);
            let o = new Dictionary$2(Number_$type, CT_DLbl.$, 0);
            let p = new Dictionary$2(Number_$type, DataPoint.$, 0);
            b.showDataLabels = false;
            if (d != null) {
                b.showDataLabels = true;
                let q = d.e.b;
                let r = CT_Boolean.g(d.e.a);
                let s = false;
                let t = d.e.d;
                if (e != null) {
                    if (e.h != null) {
                        q = e.h;
                    }
                    if (e.g != null) {
                        r = e.g.k;
                    }
                    if (e.f != null) {
                        s = CT_Boolean.g(e.f);
                    }
                }
                let u = b.dataLabels;
                WorksheetChartExtensions.ad(u, t, null, e, h, i);
                b.dataLabels.showLeaderLines = r;
                if (q != null) {
                    l = q.a;
                    m = l != null ? l.a : null;
                    let v = new LeaderLines();
                    DMLChartExtensions.a7(v, m, h);
                    b.leaderLines = v;
                }
                if (d.f != null && d.f.count > 0) {
                    for (let w of fromEnum(d.f)) {
                        let x = w.b;
                        if (x == null) {
                            continue;
                        }
                        o.addItem(x.g, w);
                    }
                }
            }
            if (g != null && g.count > 0) {
                for (let y of fromEnum(g)) {
                    let z = y.g;
                    if (z == null) {
                        continue;
                    }
                    n.addItem(z.g, y);
                }
                for (let aa of fromEnum(n)) {
                    let ab = aa.value;
                    let ac = null;
                    let ad = o.tryGetValue(aa.key, ac);
                    ac = ad.p1;
                    let ae = WorksheetChartExtensions.g(ab, ac, b, k, h, i);
                    p.addItem(aa.key, ae);
                }
            }
            for (let af of fromEnum(o)) {
                let ag = null;
                if (((() => { let ah = n.tryGetValue(af.key, ag); ag = ah.p1; return ah.ret; })()) == false) {
                    let ah = WorksheetChartExtensions.g(ag, af.value, b, k, h, i);
                    p.addItem(af.key, ah);
                }
            }
            k._ak(p);
            if (f != null && f.h != null) {
                let ai = f.h.c;
                if (stringIsNullOrEmpty(ai) == false) {
                    let aj = WorkbookLoadManagerExcel2007._bs(ai);
                    ai = aj.p0;
                    let ak = typeCast(SingleTargetFormula.$, Formula._k(ai, 1, 0, j.currentFormat, CultureInfo.invariantCulture, i._bi));
                    b.dataLabels._eb(h, ak);
                }
            }
        }
        static g(a, b, c, d, e, f) {
            let g = new DataPoint(d);
            if (a != null) {
                WorksheetChartExtensions.af(g, c, a, e, f);
            }
            if (b != null) {
                let h = new DataLabel();
                let i = CT_DLbls.c(CT_ExtensionList.a(b.e));
                WorksheetChartExtensions.ab(h, b, i, e, f);
                g.dataLabel = h;
            }
            let j = a != null ? a.i : null;
            if (j != null) {
                let k = null;
                let l = null;
                let m = toNullable(Number_$type, null);
                let n = toNullable(MarkerStyle_$type, null);
                let o = WorksheetChartExtensions.p(j, e, k, l, m, n);
                k = o.p2;
                l = o.p3;
                m = o.p4;
                n = o.p5;
                g.markerFill = k;
                g.markerBorder = l;
                if (m.hasValue) {
                    g._markerSize$i = toNullable(Number_$type, m.value);
                }
                if (n.hasValue) {
                    g._markerStyle$i = toNullable(MarkerStyle_$type, n.value);
                }
            }
            if (a != null && a.e != null) {
                g._explosion$i = toNullable(Number_$type, a.e.g);
            }
            let p = a != null ? a.k : null;
            if (p != null) {
                if (p.a != null) {
                    g._applyPicToEnd$i = ExcelUtils.dv(p.a.k);
                }
                if (p.c != null) {
                    g._applyPicToFront$i = ExcelUtils.dv(p.c.k);
                }
                if (p.e != null) {
                    g._applyPicToSides$i = ExcelUtils.dv(p.e.k);
                }
            }
            return g;
        }
        static p(a, b, c, d, e, f) {
            c = null;
            d = null;
            e = toNullable(Number_$type, null);
            f = toNullable(MarkerStyle_$type, null);
            if (a != null) {
                let g = a.e;
                let h = g != null ? g.a : null;
                if (g != null) {
                    c = DMLChartUtils.c(g.l);
                }
                if (h != null) {
                    d = new ChartBorder(null);
                    DMLChartExtensions.a4(d, h, b);
                }
                if (a.a != null) {
                    e = toNullable(Number_$type, a.a.b);
                }
                if (a.c != null) {
                    f = toNullable(MarkerStyle_$type, DMLChartExtensions.o(a.c.a));
                }
            }
            return {
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        static d(a) {
            let b = WorksheetChartExtensions.b(a);
            if (b.length > 1) {
                let c = b[0];
                switch (c) {
                    case 88:
                    case 89:
                    case 90:
                    case 91: return c;
                    default: break;
                }
                return 113;
            }
            let d = WorksheetChartExtensions.j(a);
            return d != null ? d.getChartType(a, null) : 0;
        }
        static b(a) {
            let b = WorksheetChartExtensions.a(a);
            let c = new List$1(ChartType_$type, 0);
            for (let e = 0; e < b.length; e++) {
                let d = b[e];
                c.add(d.getChartType(a, null));
            }
            return c.toArray();
        }
        static a(a) {
            let b = a != null ? a.f : null;
            let c = b != null ? b.k : null;
            let d = [c.b, c.c, c.d, c.e, c.f, c.g, c.h, c.i, c.j, c.m, c.n, c.o, c.p, c.q, c.r, c.s, c.t, c.u, c.v, c.w, c.x, c.y, c.z, c.aa, c.ab, c.ac, c.ad, c.ae];
            let e = new List$1(IChart_$type, 0);
            for (let g = 0; g < d.length; g++) {
                let f = d[g];
                if (f != null) {
                    e.add(f);
                }
            }
            return e.toArray();
        }
        static j(a) {
            let b = a.f != null ? a.f.k : null;
            if (b == null) {
                return null;
            }
            if (b.b != null) {
                return b.b;
            }
            else if (b.c != null) {
                return b.c;
            }
            else if (b.ac != null) {
                return b.ac;
            }
            else if (b.e != null) {
                return b.e;
            }
            else if (b.f != null) {
                return b.f;
            }
            else if (b.h != null) {
                return b.h;
            }
            else if (b.i != null) {
                return b.i;
            }
            else if (b.n != null) {
                return b.n;
            }
            else if (b.m != null) {
                return b.m;
            }
            else if (b.p != null) {
                return b.p;
            }
            else if (b.p != null) {
                return b.p;
            }
            else if (b.s != null) {
                return b.s;
            }
            else if (b.r != null) {
                return b.r;
            }
            else if (b.u != null) {
                return b.u;
            }
            else if (b.y != null) {
                return b.y;
            }
            else if (b.ae != null) {
                return b.ae;
            }
            else if (b.ad != null) {
                return b.ad;
            }
            else {
                return null;
            }
        }
        static k($t, a) {
            if (getBoxIfEnum($t, a) == null) {
            }
            return getBoxIfEnum($t, a) != null;
        }
        static q(a, b, c) {
            let d = 0;
            if (a.af.hasValue) {
                d = a.af.value;
            }
            if (d == -60000000) {
                c = 2;
                b = 0;
            }
            else {
                let e = ST_Angle.j(d);
                b = ExcelUtils.cl(e);
                if (a.ar.hasValue) {
                    c = DMLChartExtensions.q(a.ar.value);
                }
                else {
                    c = 0;
                }
            }
            return {
                p1: b,
                p2: c
            };
        }
    }
    WorksheetChartExtensions.$t = /*@__PURE__*/ markType(WorksheetChartExtensions, 'WorksheetChartExtensions');
    return WorksheetChartExtensions;
})();
/**
 * @hidden
 */
export let DeserializedChartInfo = /*@__PURE__*/ (() => {
    class DeserializedChartInfo extends Base {
        constructor() {
            super();
            this.c = null;
            this.d = null;
            this.f = null;
            this.b = null;
            this.e = null;
            this.g = 0;
            this.c = new Dictionary$2(String_$type, CT_ChartSpace.$, 0);
            this.d = new Dictionary$2(String_$type, CT_ChartSpaceEx.$, 0);
            this.f = new Dictionary$2(String_$type, CT_ChartStyle.$, 0);
            this.e = new Dictionary$2(String_$type, CT_ColorStyle.$, 0);
            this.g = 0;
        }
        static a(a) {
            let b = ((() => {
                let $ret = new DeserializedChartInfo();
                $ret.b = typeCast(CT_StyleMatrix.$, a.d);
                return $ret;
            })());
            for (let c of fromEnum(a.a)) {
                let d = typeCast(CT_ChartSpace.$, c.value);
                let e = d == null ? typeCast(CT_ChartSpaceEx.$, c.value) : null;
                if (d == null && e == null) {
                    continue;
                }
                if (d != null) {
                    b.c.addItem(c.key, d);
                }
                else if (e != null) {
                    b.d.addItem(c.key, e);
                }
            }
            for (let f of fromEnum(a.b)) {
                let g = typeCast(CT_ChartStyle.$, f.value);
                if (g == null) {
                    continue;
                }
                b.f.addItem(f.key, g);
            }
            for (let h of fromEnum(a.c)) {
                let i = typeCast(CT_ColorStyle.$, h.value);
                if (i == null) {
                    continue;
                }
                b.e.addItem(h.key, i);
            }
            return b;
        }
    }
    DeserializedChartInfo.$t = /*@__PURE__*/ markType(DeserializedChartInfo, 'DeserializedChartInfo');
    return DeserializedChartInfo;
})();
/**
 * @hidden
 */
export let ConditionalFormattingSerializer = /*@__PURE__*/ (() => {
    class ConditionalFormattingSerializer extends Base {
        constructor(a) {
            super();
            this.p = null;
            this.s = null;
            this.m = null;
            this.m = a;
        }
        static a(a) {
            if (a._conditionalFormats$i.count == 0) {
                return null;
            }
            else {
                return new ConditionalFormattingSerializer(a);
            }
        }
        get n() {
            return this.s != null && this.s.count > 0;
        }
        w(a, b) {
            if (this.p != null) {
                this.p.clear();
            }
            else {
                this.p = new Dictionary$2(ConditionalFormatBase.$, Number_$type, 0);
            }
            for (let c of fromEnum(b)) {
                let d = typeCast(ConditionalFormatBase.$, c);
                if (d == null || d._bw == null) {
                    continue;
                }
                let e = a._bc(d._bw);
                this.p.item(d, e);
            }
        }
        x(a, b, c) {
            let d = this.m._conditionalFormats$i;
            let e = ConditionalFormattingSerializer.q(d);
            this.s = new List$1(ConditionX14Wrapper.$, 0);
            for (let f of fromEnum(e.values)) {
                if (f.a == false) {
                    for (let g of fromEnum(f.e)) {
                        let h = ((() => {
                            let $ret = new ConditionX14Wrapper();
                            $ret.a = g;
                            $ret.d = ConditionX14Wrapper.c();
                            $ret.b = false;
                            return $ret;
                        })());
                        this.s.add(h);
                    }
                    continue;
                }
                let i = new List$1(String_$type, 0);
                ConditionBase._a1(this.m, f.c, 1, false, true, i);
                SpreadsheetMLMain.z8(a, i, f.b);
                for (let j = 0; j < f.e.count; j++) {
                    let k = null;
                    let l = f.e._inner[j];
                    k = this.l(a, b, c, l);
                    if (k != null) {
                        this.s.add(k);
                    }
                }
                c.k();
            }
        }
        y(a, b, c, d = false) {
            if (this.n == false) {
                return;
            }
            if (d) {
                SpreadsheetMLMain.abh(a);
            }
            SpreadsheetMLMain.abb(a, "{78C0D931-6437-407d-A8EE-F0AAD7539E65}", SpreadsheetML2009Main.b1);
            SpreadsheetML2009Main.df(a);
            let e = ConditionalFormattingSerializer.r(this.s);
            for (let f of fromEnum(e.values)) {
                SpreadsheetML2009Main.de(a, Excel2006Main.ar, toNullable(Boolean_$type, f.b));
                for (let g of fromEnum(f.e)) {
                    X14Serializer.f(a, b, c, g);
                }
                let h = ConditionBase._a1(this.m, f.c, 1, false, true, null, toNullable(String_$type, ConditionalFormattingSerializer.o));
                Excel2006Main.aw(a, h);
                c.k();
                c.k();
            }
            c.k();
            c.k();
            if (d) {
                c.k();
            }
        }
        l(a, b, c, d) {
            switch (d.conditionType) {
                case 0: return this.i(typeCast(OperatorConditionalFormat.$, d), a, b, c);
                case 1: return this.g(typeCast(FormulaConditionalFormat.$, d), a, b, c);
                case 11: return this.b(typeCast(AverageConditionalFormat.$, d), a, b, c);
                case 4: return this.j(typeCast(RankConditionalFormat.$, d), a, b, c);
                case 8: return this.k(typeCast(TextOperatorConditionalFormat.$, d), a, b, c);
                case 10: return this.f(typeCast(DateTimeConditionalFormat.$, d), a, b, c);
                case 3: return this.e(typeCast(DataBarConditionalFormat.$, d), a, b, c);
                case 2: return this.c(typeCast(ColorScaleConditionalFormat.$, d), a, b, c);
                case 5: return this.h(typeCast(IconSetConditionalFormat.$, d), a, b, c);
                case 7:
                case 6:
                case 13:
                case 14:
                case 9:
                case 12:
                    let e = typeCast(ConditionalFormatBase.$, d);
                    return this.d(e, a, b, c);
                default: return null;
            }
        }
        i(a, b, c, d) {
            if (ConditionBaseExtensions.b(a)) {
                let e = ((() => {
                    let $ret = new ConditionX14Wrapper();
                    $ret.a = a;
                    $ret.d = ConditionX14Wrapper.c();
                    $ret.b = false;
                    return $ret;
                })());
                return e;
            }
            let f = this.t(a);
            let g = EnumConverter.j(a.operator);
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, 1), f, a.priority, a.stopIfTrue, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(ST_ConditionalFormattingOperator_$type, g));
            let h = c._cv(a.operand1);
            let i = c._cv(a.operand2);
            ConditionalFormattingSerializer.ae(b, d, h);
            ConditionalFormattingSerializer.ae(b, d, i);
            d.k();
            return null;
        }
        g(a, b, c, d) {
            if (ConditionBaseExtensions.b(a)) {
                let e = ((() => {
                    let $ret = new ConditionX14Wrapper();
                    $ret.a = a;
                    $ret.d = ConditionX14Wrapper.c();
                    $ret.b = false;
                    return $ret;
                })());
                return e;
            }
            let f = this.t(a);
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, 0), f, a.priority, a.stopIfTrue);
            let g = c._cv(a.formula);
            ConditionalFormattingSerializer.ae(b, d, g);
            d.k();
            return null;
        }
        b(a, b, c, d) {
            let e = this.t(a);
            let f = toNullable(Boolean_$type, null);
            let g = toNullable(Number_$type, null);
            let h = toNullable(Boolean_$type, null);
            let i = ConditionalFormattingSerializer.v(a, f, g, h);
            f = i.p1;
            g = i.p2;
            h = i.p3;
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, 17), e, a.priority, a.stopIfTrue, f, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(ST_ConditionalFormattingOperator_$type, null), null, toNullable(ST_TimePeriod_$type, null), toNullable(Number_$type, null), g, h);
            d.k();
            return null;
        }
        j(a, b, c, d) {
            let e = this.t(a);
            let f = toNullable(Boolean_$type, null);
            let g = toNullable(Boolean_$type, null);
            let h = intSToU(a.rank);
            if (a.isPercent) {
                f = toNullable(Boolean_$type, true);
            }
            if (a.topBottom == 0) {
                g = toNullable(Boolean_$type, true);
            }
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, 5), e, a.priority, a.stopIfTrue, toNullable(Boolean_$type, null), f, g, toNullable(ST_ConditionalFormattingOperator_$type, null), null, toNullable(ST_TimePeriod_$type, null), toNullable(Number_$type, h));
            d.k();
            return null;
        }
        k(a, b, c, d) {
            let e = this.t(a);
            let f = a.textOperator;
            let g = EnumConverter.g(a.conditionType, toNullable(FormatConditionTextOperator_$type, f));
            let h = EnumConverter.i(f);
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, g), e, a.priority, a.stopIfTrue, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(ST_ConditionalFormattingOperator_$type, h), a.text);
            let i = ConditionalFormattingUtils.f(a);
            if (stringIsNullOrEmpty(i) == false) {
                ConditionalFormattingSerializer.ae(b, d, i);
            }
            d.k();
            return null;
        }
        f(a, b, c, d) {
            let e = this.t(a);
            let f = EnumConverter.n(a.dateOperator);
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, 16), e, a.priority, a.stopIfTrue, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(ST_ConditionalFormattingOperator_$type, null), null, toNullable(ST_TimePeriod_$type, f));
            let g = ConditionalFormattingUtils.e(a);
            if (stringIsNullOrEmpty(g) == false) {
                ConditionalFormattingSerializer.ae(b, d, g);
            }
            d.k();
            return null;
        }
        d(a, b, c, d) {
            let e = a.conditionType;
            switch (e) {
                case 13:
                case 14:
                case 9:
                case 12:
                case 6:
                case 7: break;
                default: return null;
            }
            let f = this.t(a);
            let g = EnumConverter.g(e, toNullable(FormatConditionTextOperator_$type, null));
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, g), f, a.priority, a.stopIfTrue);
            let h = false;
            switch (e) {
                case 13:
                case 14:
                case 9:
                case 12:
                    h = true;
                    break;
            }
            if (h) {
                let i = ConditionalFormattingUtils.d(a);
                if (stringIsNullOrEmpty(i) == false) {
                    ConditionalFormattingSerializer.ae(b, d, i);
                }
            }
            d.k();
            return null;
        }
        e(a, b, c, d) {
            let e = toNullable(Number_$type, null);
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, 3), e, a.priority, a.stopIfTrue);
            let f = c._cv(a.formula);
            ConditionalFormattingSerializer.ae(b, d, f);
            let g = toNullable(Number_$type, intSToU(a.fillPercentMin));
            let h = toNullable(Number_$type, intSToU(a.fillPercentMax));
            let i = toNullable(Boolean_$type, null);
            if (a.showValue == false) {
                i = toNullable(Boolean_$type, false);
            }
            SpreadsheetMLMain.aap(b, g, h, i);
            let j = a.worksheet;
            let k = [a.minPoint, a.maxPoint];
            ConditionValueExtensions.b(a.minPoint, b, c, d, j, false);
            ConditionValueExtensions.b(a.maxPoint, b, c, d, j, false);
            ConditionalFormattingSerializer.z(b, d, j, a._cv, SpreadsheetMLMain.eu);
            d.k();
            let l = null;
            if (ConditionBaseExtensions.b(a)) {
                l = ((() => {
                    let $ret = new ConditionX14Wrapper();
                    $ret.a = a;
                    $ret.d = ConditionX14Wrapper.c();
                    $ret.b = true;
                    return $ret;
                })());
                this.aa(b, d, l.d);
            }
            d.k();
            return l;
        }
        h(a, b, c, d) {
            if (ConditionBaseExtensions.b(a)) {
                let e = ((() => {
                    let $ret = new ConditionX14Wrapper();
                    $ret.a = a;
                    $ret.d = ConditionX14Wrapper.c();
                    $ret.b = false;
                    return $ret;
                })());
                return e;
            }
            let f = toNullable(Number_$type, null);
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, 4), f, a.priority, a.stopIfTrue);
            let g = c._cv(a.formula);
            ConditionalFormattingSerializer.ae(b, d, g);
            let h = ExcelUtils.ai(a.iconSet);
            SpreadsheetMLMain.ab7(b, SpreadsheetMLMain.jt, toNullable(ST_IconSetType_$type, h), toNullable(Boolean_$type, a._cm), toNullable(Boolean_$type, a.isReverseOrder), toNullable(Boolean_$type, a.showValue), toNullable(Boolean_$type, false));
            let i = a.worksheet;
            for (let j = 0; j < a._iconCriteria$i.count; j++) {
                let k = a._iconCriteria$i.item(j);
                let l = k.comparison == 0;
                ConditionValueExtensions.b(k._b, b, c, d, i, false, toNullable(Boolean_$type, l));
            }
            d.k();
            d.k();
            return null;
        }
        c(a, b, c, d) {
            if (ConditionBaseExtensions.b(a)) {
                let e = ((() => {
                    let $ret = new ConditionX14Wrapper();
                    $ret.a = a;
                    $ret.d = ConditionX14Wrapper.c();
                    $ret.b = false;
                    return $ret;
                })());
                return e;
            }
            let f = toNullable(Number_$type, null);
            let g = a.worksheet;
            SpreadsheetMLMain.zq(b, SpreadsheetMLMain.eg, toNullable(ST_CfType_$type, 2), f, a.priority, a.stopIfTrue);
            let h = c._cv(a.formula);
            ConditionalFormattingSerializer.ae(b, d, h);
            SpreadsheetMLMain.z1(b);
            ConditionValueExtensions.b(a.minimumThreshold._b, b, c, d, g, false);
            if (a.colorScaleType == 1) {
                ConditionValueExtensions.b(a.midpointThreshold._b, b, c, d, g, false);
            }
            ConditionValueExtensions.b(a.maximumThreshold._b, b, c, d, g, false);
            ColorInfoExtensions.d(a.minimumThreshold._al, b, d, g, SpreadsheetMLMain.eu);
            if (a.colorScaleType == 1) {
                ColorInfoExtensions.d(a.midpointThreshold._al, b, d, g, SpreadsheetMLMain.eu);
            }
            ColorInfoExtensions.d(a.maximumThreshold._al, b, d, g, SpreadsheetMLMain.eu);
            d.k();
            d.k();
            return null;
        }
        static z(a, b, c, d, e) {
            if (WorkbookColorInfo.l_op_Equality(d, null)) {
                return;
            }
            ColorInfoExtensions.d(d, a, b, c, e);
        }
        aa(a, b, c) {
            SpreadsheetMLMain.abh(a);
            SpreadsheetMLMain.abb(a, "{B025F937-C7B1-47D3-B67F-A62EFF666E3E}", SpreadsheetML2009Main.b1);
            if (stringIsNullOrEmpty(c) == false) {
                SpreadsheetML2009Main.dl(a, c);
                b.k();
            }
            b.k();
            b.k();
        }
        static ae(a, b, c) {
            if (stringIsNullOrEmpty(c)) {
                return;
            }
            SpreadsheetMLMain.abz(a, c);
            b.k();
        }
        static q(a) {
            let b = new Dictionary$2(String_$type, ConditionalFormattingWrapper.$, 1, a.count);
            for (let c of fromEnum(a)) {
                let d = c._a0(1, false);
                let e = ConditionalFormattingWrapperBase.d(d, c._af);
                let f = null;
                if (((() => { let g = b.tryGetValue(e, f); f = g.p1; return g.ret; })()) == false) {
                    f = new ConditionalFormattingWrapper(c.regions);
                    f.b = c._af;
                    b.addItem(e, f);
                }
                f.e.add(c);
            }
            for (let g of fromEnum(b.values)) {
                let h = false;
                for (let i of fromEnum(g.e)) {
                    let j = ConditionBaseExtensions.a(i);
                    if (j != 1) {
                        h = true;
                        break;
                    }
                }
                g.a = h;
            }
            return b;
        }
        static r(a) {
            let b = new Dictionary$2(String_$type, ConditionalFormattingX14Wrapper.$, 1, a.count);
            for (let c of fromEnum(a)) {
                let d = c.a;
                let e = d._a0(1, false);
                let f = ConditionalFormattingWrapperBase.d(e, d._af);
                let g = null;
                if (((() => { let h = b.tryGetValue(f, g); g = h.p1; return h.ret; })()) == false) {
                    g = new ConditionalFormattingX14Wrapper(d.regions);
                    g.b = d._af;
                    b.addItem(f, g);
                }
                g.e.add(c);
            }
            return b;
        }
        t(a) {
            if (this.p == null) {
                return toNullable(Number_$type, null);
            }
            if (a._bw == null) {
                return toNullable(Number_$type, null);
            }
            let b = 0;
            if (((() => { let c = this.p.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                return toNullable(Number_$type, b);
            }
            else {
                return toNullable(Number_$type, null);
            }
        }
        static v(a, b, c, d) {
            b = toNullable(Boolean_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(Boolean_$type, null);
            let e = a.aboveBelow;
            switch (e) {
                case 0: break;
                case 4:
                case 2:
                    if (e == 2) {
                        d = toNullable(Boolean_$type, true);
                    }
                    break;
                case 1:
                case 5:
                case 3:
                    b = toNullable(Boolean_$type, false);
                    if (e == 3) {
                        d = toNullable(Boolean_$type, true);
                    }
                    break;
            }
            switch (e) {
                case 4:
                case 5:
                    c = toNullable(Number_$type, a.numericStandardDeviation);
                    break;
                default: break;
            }
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static u(a) {
            if (isNaN_(a)) {
                a = 0;
            }
            return numberToString(a, CultureInfo.invariantCulture);
        }
        static ab(a, b, c, d) {
            let e = b._cv(d);
            ConditionalFormattingSerializer.ad(a, c, e);
        }
        static ac(a, b, c) {
            let d = ConditionalFormattingSerializer.u(c);
            ConditionalFormattingSerializer.ac(a, b, c);
        }
        static ad(a, b, c) {
            if (stringIsNullOrEmpty(c)) {
                return;
            }
            Excel2006Main.av(a, c);
            b.k();
        }
    }
    ConditionalFormattingSerializer.$t = /*@__PURE__*/ markType(ConditionalFormattingSerializer, 'ConditionalFormattingSerializer');
    ConditionalFormattingSerializer.o = ' ';
    return ConditionalFormattingSerializer;
})();
/**
 * @hidden
 */
export let X14Serializer = /*@__PURE__*/ (() => {
    class X14Serializer extends Base {
        static f(a, b, c, d) {
            let e = d.a;
            let f = d.d;
            let g = d.b;
            switch (e.conditionType) {
                case 0:
                    X14Serializer.e(a, b, c, typeCast(OperatorConditionalFormat.$, e), f);
                    break;
                case 1:
                    X14Serializer.c(a, b, c, typeCast(FormulaConditionalFormat.$, e), f);
                    break;
                case 2:
                    X14Serializer.a(a, b, c, typeCast(ColorScaleConditionalFormat.$, e), f);
                    break;
                case 3:
                    X14Serializer.b(a, b, c, typeCast(DataBarConditionalFormat.$, e), f, g);
                    break;
                case 5:
                    X14Serializer.d(a, b, c, typeCast(IconSetConditionalFormat.$, e), f);
                    break;
                case 11:
                case 4:
                case 7:
                case 6:
                case 8:
                case 10:
                case 13:
                case 14:
                case 9:
                case 12: break;
                default: break;
            }
        }
        static a(a, b, c, d, e) {
            let f = 2;
            let g = false;
            let h = g ? 0 : d.priority;
            let i = g && d.stopIfTrue;
            let j = d.worksheet;
            let k = d.formula;
            let l = k != null;
            SpreadsheetML2009Main.db(a, e, toNullable(ST_CfType_$type, f), h, i, toNullable(ST_ConditionalFormattingOperator_$type, null), toNullable(Boolean_$type, l));
            if (k != null) {
                ConditionalFormattingSerializer.ab(a, b, c, k);
            }
            SpreadsheetML2009Main.dd(a);
            ConditionValueExtensions.b(d.minimumThreshold._b, a, b, c, d.worksheet, true, toNullable(Boolean_$type, null));
            if (d.colorScaleType == 1) {
                ConditionValueExtensions.b(d.midpointThreshold._b, a, b, c, d.worksheet, true, toNullable(Boolean_$type, null));
            }
            ConditionValueExtensions.b(d.maximumThreshold._b, a, b, c, d.worksheet, true, toNullable(Boolean_$type, null));
            ColorInfoExtensions.d(d.minimumThreshold._al, a, c, j, SpreadsheetML2009Main.az);
            if (d.colorScaleType == 1) {
                ColorInfoExtensions.d(d.midpointThreshold._al, a, c, j, SpreadsheetML2009Main.az);
            }
            ColorInfoExtensions.d(d.maximumThreshold._al, a, c, j, SpreadsheetML2009Main.az);
            c.k();
            c.k();
        }
        static b(a, b, c, d, e, f) {
            let g = 3;
            let h = f ? 0 : d.priority;
            let i = f && d.stopIfTrue;
            let j = d.formula;
            let k = j != null;
            SpreadsheetML2009Main.db(a, e, toNullable(ST_CfType_$type, g), h, i, toNullable(ST_ConditionalFormattingOperator_$type, null), toNullable(Boolean_$type, k));
            if (j != null) {
                ConditionalFormattingSerializer.ab(a, b, c, j);
            }
            let l = d.barFillType == 1;
            let m = EnumConverter.m(d.direction);
            let n = d.negativeBarFormat.barColorType == 1;
            let o = d.negativeBarFormat.barBorderColorType == 1;
            let p = EnumConverter.l(d.axisPosition);
            SpreadsheetML2009Main.dg(a, toNullable(Number_$type, intSToU(d.fillPercentMin)), toNullable(Number_$type, intSToU(d.fillPercentMax)), toNullable(Boolean_$type, d.showValue), toNullable(Boolean_$type, d.showBorder), toNullable(Boolean_$type, l), toNullable(ST_DataBarDirection_$type, m), toNullable(Boolean_$type, n), toNullable(Boolean_$type, o), toNullable(ST_DataBarAxisPosition_$type, p));
            ConditionValueExtensions.b(d.minPoint, a, b, c, d.worksheet, true, toNullable(Boolean_$type, null));
            ConditionValueExtensions.b(d.maxPoint, a, b, c, d.worksheet, true, toNullable(Boolean_$type, null));
            if (d.showBorder) {
                ColorInfoExtensions.d(d._ct, a, c, d.worksheet, SpreadsheetML2009Main.av);
            }
            if (d.negativeBarFormat.barColorType == 0) {
                ColorInfoExtensions.d(d.negativeBarFormat._r, a, c, d.worksheet, SpreadsheetML2009Main.b5);
            }
            if (d.negativeBarFormat.barBorderColorType == 0) {
                ColorInfoExtensions.d(d.negativeBarFormat._p, a, c, d.worksheet, SpreadsheetML2009Main.b4);
            }
            if (WorkbookColorInfo.l_op_Inequality(d.axisColor, null)) {
                ColorInfoExtensions.d(d.axisColor, a, c, d.worksheet, SpreadsheetML2009Main.as);
            }
            c.k();
            c.k();
        }
        static d(a, b, c, d, e) {
            let f = 4;
            let g = false;
            let h = g ? 0 : d.priority;
            let i = g && d.stopIfTrue;
            let j = d.formula;
            let k = j != null;
            SpreadsheetML2009Main.db(a, e, toNullable(ST_CfType_$type, f), h, i, toNullable(ST_ConditionalFormattingOperator_$type, null), toNullable(Boolean_$type, k));
            if (j != null) {
                ConditionalFormattingSerializer.ab(a, b, c, j);
            }
            let l = ExcelUtils.ai(d.iconSet);
            let m = d.isCustom;
            let n = toNullable(Boolean_$type, null);
            let o = toNullable(Boolean_$type, null);
            let p = d.showValue;
            SpreadsheetMLMain.ab7(a, SpreadsheetML2009Main.bu, toNullable(ST_IconSetType_$type, l), n, o, toNullable(Boolean_$type, p), toNullable(Boolean_$type, m));
            ConditionalFormattingSerializer.ab(a, b, c, d.formula);
            let q = d.worksheet;
            for (let r = 0; r < d._iconCriteria$i.count; r++) {
                let s = d._iconCriteria$i.item(r);
                let t = s.comparison == 0;
                ConditionValueExtensions.b(s._b, a, b, c, q, true, toNullable(Boolean_$type, t));
            }
            let u = d.isReverseOrder;
            let v = u ? d._iconCriteria$i.count : 0;
            let w = u ? -1 : d._iconCriteria$i.count;
            let x = u ? -1 : 1;
            for (let y = v; y != w; y += x) {
                let z = d._iconCriteria$i.item(y);
                let aa = z.iconSet;
                let ab = z.icon == -1 ? 0 : intSToU(((() => { let ac = IconSetConditionalFormat._cp(z.icon, aa); aa = ac.p1; return ac.ret; })()));
                let ac = z.icon == -1 ? 20 : ExcelUtils.ai(aa);
                SpreadsheetML2009Main.da(a, ac, ab);
                c.k();
            }
            c.k();
            c.k();
        }
        static e(a, b, c, d, e) {
            let f = false;
            let g = 1;
            let h = f ? 0 : d.priority;
            let i = f && d.stopIfTrue;
            let j = EnumConverter.j(d.operator);
            SpreadsheetML2009Main.db(a, e, toNullable(ST_CfType_$type, g), h, i, toNullable(ST_ConditionalFormattingOperator_$type, j));
            ConditionalFormattingSerializer.ab(a, b, c, d.operand1);
            ConditionalFormattingSerializer.ab(a, b, c, d.operand2);
            if (d._bw != null) {
                ObjectModelStylesPartManager.ct(a, b, d._bw, SpreadsheetML2009Main.bj);
            }
            c.k();
        }
        static c(a, b, c, d, e) {
            let f = false;
            let g = 0;
            let h = f ? 0 : d.priority;
            let i = f && d.stopIfTrue;
            SpreadsheetML2009Main.db(a, e, toNullable(ST_CfType_$type, g), h, i);
            ConditionalFormattingSerializer.ab(a, b, c, d.formula);
            if (d._bw != null) {
                ObjectModelStylesPartManager.ct(a, b, d._bw, SpreadsheetML2009Main.bj);
            }
            c.k();
        }
    }
    X14Serializer.$t = /*@__PURE__*/ markType(X14Serializer, 'X14Serializer');
    return X14Serializer;
})();
/**
 * @hidden
 */
export let FormatSchemeDeserializer = /*@__PURE__*/ (() => {
    class FormatSchemeDeserializer extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
        }
        static cp(a) {
            a.az(DrawingMLMain.d8, FormatSchemeDeserializer.a0);
            a.ay(DrawingMLMain.d8, FormatSchemeDeserializer.a1);
            a.az(DrawingMLMain.bp, FormatSchemeDeserializer.v);
            a.az(DrawingMLMain.dm, FormatSchemeDeserializer.ar);
            a.az(DrawingMLMain.d1, FormatSchemeDeserializer.ay);
            a.az(DrawingMLMain.f0, FormatSchemeDeserializer.bp);
            a.az(DrawingMLMain.bu, FormatSchemeDeserializer.y);
            a.az(DrawingMLMain.ek, FormatSchemeDeserializer.a4);
            a.az(DrawingMLMain.et, FormatSchemeDeserializer.ba);
            a.az(DrawingMLMain.gz, FormatSchemeDeserializer.bu);
            a.az(DrawingMLMain.hi, FormatSchemeDeserializer.by);
            a.az(DrawingMLMain.ip, FormatSchemeDeserializer.cg);
            a.az(DrawingMLMain.bt, FormatSchemeDeserializer.x);
            a.az(DrawingMLMain.i0, FormatSchemeDeserializer.ci);
            a.az(DrawingMLMain.i3, FormatSchemeDeserializer.cj);
            a.az(DrawingMLMain.jk, FormatSchemeDeserializer.cl);
            a.az(DrawingMLMain.a3, FormatSchemeDeserializer.h);
            a.az(DrawingMLMain.a4, FormatSchemeDeserializer.i);
            a.az(DrawingMLMain.a5, FormatSchemeDeserializer.j);
            a.az(DrawingMLMain.a6, FormatSchemeDeserializer.k);
            a.az(DrawingMLMain.a7, FormatSchemeDeserializer.l);
            a.az(DrawingMLMain.a8, FormatSchemeDeserializer.m);
            a.az(DrawingMLMain.bb, FormatSchemeDeserializer.o);
            a.az(DrawingMLMain.bq, FormatSchemeDeserializer.w);
            a.az(DrawingMLMain.by, FormatSchemeDeserializer.ac);
            a.az(DrawingMLMain.ck, FormatSchemeDeserializer.ae);
            a.az(DrawingMLMain.cm, FormatSchemeDeserializer.ag);
            a.az(DrawingMLMain.de, FormatSchemeDeserializer.an);
            a.az(DrawingMLMain.ds, FormatSchemeDeserializer.at);
            a.az(DrawingMLMain.dy, FormatSchemeDeserializer.aw);
            a.az(DrawingMLMain.ep, FormatSchemeDeserializer.a6);
            a.az(DrawingMLMain.e7, FormatSchemeDeserializer.be);
            a.az(DrawingMLMain.f5, FormatSchemeDeserializer.bq);
            a.az(DrawingMLMain.jn, FormatSchemeDeserializer.cn);
            a.az(DrawingMLMain.e8, FormatSchemeDeserializer.bf);
            a.az(DrawingMLMain.ho, FormatSchemeDeserializer.bz);
            a.az(DrawingMLMain.ig, FormatSchemeDeserializer.cc);
            a.az(DrawingMLMain.ih, FormatSchemeDeserializer.cd);
            a.az(DrawingMLMain.a2, FormatSchemeDeserializer.g);
            a.az(DrawingMLMain.a9, FormatSchemeDeserializer.n);
            a.az(DrawingMLMain.bv, FormatSchemeDeserializer.z);
            a.az(DrawingMLMain.bw, FormatSchemeDeserializer.aa);
            a.az(DrawingMLMain.bx, FormatSchemeDeserializer.ab);
            a.az(DrawingMLMain.cq, FormatSchemeDeserializer.ai);
            a.az(DrawingMLMain.eg, FormatSchemeDeserializer.a2);
            a.az(DrawingMLMain.eo, FormatSchemeDeserializer.a5);
            a.az(DrawingMLMain.eq, FormatSchemeDeserializer.a7);
            a.az(DrawingMLMain.er, FormatSchemeDeserializer.a8);
            a.az(DrawingMLMain.es, FormatSchemeDeserializer.a9);
            a.az(DrawingMLMain.e9, FormatSchemeDeserializer.bg);
            a.az(DrawingMLMain.fa, FormatSchemeDeserializer.bh);
            a.az(DrawingMLMain.fb, FormatSchemeDeserializer.bi);
            a.az(DrawingMLMain.fh, FormatSchemeDeserializer.bk);
            a.az(DrawingMLMain.fj, FormatSchemeDeserializer.bl);
            a.az(DrawingMLMain.f6, FormatSchemeDeserializer.br);
            a.az(DrawingMLMain.f7, FormatSchemeDeserializer.bs);
            a.az(DrawingMLMain.hy, FormatSchemeDeserializer.b2);
            a.az(DrawingMLMain.hz, FormatSchemeDeserializer.b3);
            a.az(DrawingMLMain.h0, FormatSchemeDeserializer.b4);
            a.az(DrawingMLMain.ib, FormatSchemeDeserializer.b8);
            a.az(DrawingMLMain.ic, FormatSchemeDeserializer.b9);
            a.az(DrawingMLMain.id, FormatSchemeDeserializer.ca);
            a.az(DrawingMLMain.ij, FormatSchemeDeserializer.ce);
            a.az(DrawingMLMain.cs, FormatSchemeDeserializer.aj);
            a.az(DrawingMLMain.cl, FormatSchemeDeserializer.af);
            a.az(DrawingMLMain.co, FormatSchemeDeserializer.ah);
            a.az(DrawingMLMain.dr, FormatSchemeDeserializer.as);
            a.az(DrawingMLMain.dz, FormatSchemeDeserializer.ax);
            a.az(DrawingMLMain.ev, FormatSchemeDeserializer.bc);
            a.az(DrawingMLMain.fv, FormatSchemeDeserializer.bn);
            a.az(DrawingMLMain.hg, FormatSchemeDeserializer.bx);
            a.az(DrawingMLMain.jl, FormatSchemeDeserializer.cm);
            a.az(DrawingMLMain.eu, FormatSchemeDeserializer.bb);
            a.az(DrawingMLMain.d2, FormatSchemeDeserializer.az);
            a.az(DrawingMLMain.bo, FormatSchemeDeserializer.u);
            a.az(DrawingMLMain.dw, FormatSchemeDeserializer.av);
            a.az(DrawingMLMain.dl, FormatSchemeDeserializer.aq);
            a.az(DrawingMLMain.di, FormatSchemeDeserializer.ao);
            a.az(DrawingMLMain.dj, FormatSchemeDeserializer.ap);
            a.az(DrawingMLMain.ie, FormatSchemeDeserializer.cb);
            a.az(DrawingMLMain.iq, FormatSchemeDeserializer.ch);
            a.az(DrawingMLMain.ej, FormatSchemeDeserializer.a3);
            a.az(DrawingMLMain.fg, FormatSchemeDeserializer.bj);
            a.az(DrawingMLMain.hd, FormatSchemeDeserializer.bw);
            a.az(DrawingMLMain.hr, FormatSchemeDeserializer.b1);
            a.az(DrawingMLMain.h1, FormatSchemeDeserializer.b5);
            a.az(DrawingMLMain.io, FormatSchemeDeserializer.cf);
            a.az(DrawingMLMain.bj, FormatSchemeDeserializer.q);
            a.az(DrawingMLMain.ce, FormatSchemeDeserializer.ad);
            a.az(DrawingMLMain.fu, FormatSchemeDeserializer.bm);
            a.az(DrawingMLMain.bd, FormatSchemeDeserializer.p);
            a.az(DrawingMLMain.g4, FormatSchemeDeserializer.bv);
            a.az(DrawingMLMain.jz, FormatSchemeDeserializer.co);
            a.az(DrawingMLMain.h4, FormatSchemeDeserializer.b6);
            a.az(DrawingMLMain.bm, FormatSchemeDeserializer.s);
            a.az(DrawingMLMain.bn, FormatSchemeDeserializer.t);
            a.az(DrawingMLMain.ct, FormatSchemeDeserializer.ak);
            a.az(DrawingMLMain.dv, FormatSchemeDeserializer.au);
            a.az(DrawingMLMain.fx, FormatSchemeDeserializer.bo);
            a.az(DrawingMLMain.bl, FormatSchemeDeserializer.r);
            a.az(DrawingMLMain.cz, FormatSchemeDeserializer.al);
            a.az(DrawingMLMain.ex, FormatSchemeDeserializer.bd);
            a.az(DrawingMLMain.gm, FormatSchemeDeserializer.bt);
            a.az(DrawingMLMain.hp, FormatSchemeDeserializer.b0);
            a.az(DrawingMLMain.h7, FormatSchemeDeserializer.b7);
            a.az(DrawingMLMain.jf, FormatSchemeDeserializer.ck);
            a.az(DrawingMLMain.dd, FormatSchemeDeserializer.am);
        }
        static a0(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = null;
            let d = CT_StyleMatrix.g(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_StyleMatrix();
                $ret.e = c;
                return $ret;
            })());
            let f = FormatSchemeDeserializer.b(FormatSchemeDeserializer.$, b, false);
            f = ((() => {
                let $ret = new FormatSchemeDeserializer();
                $ret.c = e;
                return $ret;
            })());
            b.s.k(f);
            b.s.k(e);
        }
        static a1(a) {
            let b = FormatSchemeDeserializer.b(FormatSchemeDeserializer.$, a);
            if (b == null) {
                return;
            }
            let c = typeCast(ObjectModelThemePartManager.$, a);
            c.ba._bu.c = b.c;
            let d = typeCast(CT_StyleMatrix.$, a.s.h());
            b = typeCast(FormatSchemeDeserializer.$, a.s.h());
        }
        static v(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_StyleMatrix.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_BackgroundFillStyleList();
            c.a = d;
            b.s.k(d);
        }
        static ar(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_StyleMatrix.$, b);
            if (c == null) {
                return;
            }
            let d = ((() => {
                let $ret = new CT_EffectStyleList();
                $ret.c = new List$1(CT_EffectStyleItem.$, 0);
                return $ret;
            })());
            c.b = d;
            b.s.k(d);
        }
        static ay(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_StyleMatrix.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_FillStyleList();
            c.c = d;
            b.s.k(d);
        }
        static bp(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_StyleMatrix.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_LineStyleList();
            c.d = d;
            b.s.k(d);
        }
        static y(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = CT_BlipFillProperties_DML.e(b);
            let d = [CT_BackgroundFillStyleList.$, CT_FillStyleList.$, CT_FillOverlayEffect.$];
            let e = SerializationUtils.j(b, d);
            if (e != null) {
                e.setProperty(128, c);
            }
            b.s.k(c);
        }
        static a4(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = toNullable(ST_TileFlipMode_$type, null);
            let d = toNullable(Boolean_$type, null);
            let e = CT_GradientFillProperties.l(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_GradientFillProperties();
                $ret.g = c;
                $ret.i = d;
                return $ret;
            })());
            let g = [CT_BackgroundFillStyleList.$, CT_FillStyleList.$, CT_FillOverlayEffect.$, CT_LineProperties_DML.$];
            let h = SerializationUtils.j(b, g);
            if (h != null) {
                h.setProperty(725, f);
            }
            b.s.k(f);
        }
        static ba(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = [CT_BackgroundFillStyleList.$, CT_FillStyleList.$, CT_FillOverlayEffect.$];
            let d = new CT_GroupFillProperties();
            let e = SerializationUtils.j(b, c);
            if (e != null) {
                e.setProperty(752, d);
            }
            b.s.k(d);
        }
        static bu(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = new CT_NoFillProperties();
            SerializationUtils.a3(CT_NoFillProperties.$, b, c, 1063);
        }
        static by(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = toNullable(ST_PresetPatternVal_$type, null);
            let d = CT_PatternFillProperties.h(b, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_PatternFillProperties();
                $ret.e = c;
                return $ret;
            })());
            SerializationUtils.a3(CT_PatternFillProperties.$, a, e, 1174);
        }
        static cg(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = new CT_SolidColorFillProperties();
            SerializationUtils.a3(CT_SolidColorFillProperties.$, b, c, 1553);
        }
        static x(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_BlipFillProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = CT_Blip_DML.n(a);
            c.d = d;
            b.s.k(d);
        }
        static ci(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_BlipFillProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.u(b);
            c.a = d;
            b.s.k(d);
        }
        static cj(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_BlipFillProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_StretchInfoProperties();
            c.g.a = d;
            b.s.k(d);
        }
        static cl(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_BlipFillProperties_DML.$, b);
            if (c == null) {
                return;
            }
            let d = DMLUtils.w(b);
            c.g.b = d;
            b.s.k(d);
        }
        static h(a) {
            SerializationUtils.y(a);
        }
        static i(a) {
            SerializationUtils.z(a);
        }
        static j(a) {
            SerializationUtils.aa(a);
        }
        static k(a) {
            SerializationUtils.ab(a);
        }
        static l(a) {
            SerializationUtils.ac(a);
        }
        static m(a) {
            SerializationUtils.ad(a);
        }
        static o(a) {
            SerializationUtils.af(a);
        }
        static w(a) {
            SerializationUtils.al(a);
        }
        static ac(a) {
            SerializationUtils.ap(a);
        }
        static ae(a) {
            SerializationUtils.ar(a);
        }
        static ag(a) {
            SerializationUtils.at(a);
        }
        static an(a) {
            SerializationUtils.az(a);
        }
        static at(a) {
            if (FormatSchemeDeserializer.d(a) == false) {
                return;
            }
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = new CT_OfficeArtExtensionList();
            let d = [CT_Blip_DML.$, CT_Scene3D.$, CT_Backdrop.$, CT_Shape3D.$, CT_LineProperties_DML.$];
            let e = SerializationUtils.j(b, d);
            if (e != null) {
                e.setProperty(601, c);
            }
            b.s.k(c);
        }
        static aw(a) {
            SerializationUtils.a4(a);
        }
        static a6(a) {
            SerializationUtils.bb(a);
        }
        static be(a) {
            SerializationUtils.bi(a);
        }
        static bq(a) {
            SerializationUtils.bs(a);
        }
        static cn(a) {
            SerializationUtils.cl(a);
        }
        static bf(a) {
            SerializationUtils.bj(a);
        }
        static bz(a) {
            SerializationUtils.bz(a);
        }
        static cc(a) {
            SerializationUtils.cc(a);
        }
        static cd(a) {
            SerializationUtils.cd(a);
        }
        static e(a) {
            let b = FormatSchemeDeserializer.b(CT_StyleMatrix.$, a, false);
            if (b == null) {
                return false;
            }
            SerializationUtils.ch(a);
            return true;
        }
        static f(a) {
            let b = FormatSchemeDeserializer.b(CT_StyleMatrix.$, a, false);
            if (b == null) {
                return false;
            }
            SerializationUtils.ci(a);
            return true;
        }
        static g(a) {
            SerializationUtils.x(a);
        }
        static n(a) {
            SerializationUtils.ae(a);
        }
        static z(a) {
            SerializationUtils.am(a);
        }
        static aa(a) {
            SerializationUtils.an(a);
        }
        static ab(a) {
            SerializationUtils.ao(a);
        }
        static ai(a) {
            SerializationUtils.av(a);
        }
        static a2(a) {
            SerializationUtils.a7(a);
        }
        static a5(a) {
            SerializationUtils.ba(a);
        }
        static a7(a) {
            SerializationUtils.bc(a);
        }
        static a8(a) {
            SerializationUtils.bd(a);
        }
        static a9(a) {
            SerializationUtils.be(a);
        }
        static bg(a) {
            SerializationUtils.bk(a);
        }
        static bh(a) {
            SerializationUtils.bl(a);
        }
        static bi(a) {
            SerializationUtils.bm(a);
        }
        static bk(a) {
            SerializationUtils.bo(a);
        }
        static bl(a) {
            SerializationUtils.bp(a);
        }
        static br(a) {
            SerializationUtils.bt(a);
        }
        static bs(a) {
            SerializationUtils.bu(a);
        }
        static b2(a) {
            SerializationUtils.b2(a);
        }
        static b3(a) {
            SerializationUtils.b3(a);
        }
        static b4(a) {
            SerializationUtils.b4(a);
        }
        static b8(a) {
            SerializationUtils.b8(a);
        }
        static b9(a) {
            SerializationUtils.b9(a);
        }
        static ca(a) {
            SerializationUtils.ca(a);
        }
        static ce(a) {
            SerializationUtils.ce(a);
        }
        static aj(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_AlphaModulateEffect.$, b);
            if (c == null) {
                return;
            }
            let d = toNullable(ST_EffectContainerType_$type, null);
            let e = null;
            let f = CT_EffectContainer.l(a, d, e);
            d = f.p1;
            e = f.p2;
            let g = ((() => {
                let $ret = new CT_EffectContainer();
                $ret.g = d;
                $ret.i = e;
                return $ret;
            })());
            c.a = g;
            b.s.k(g);
        }
        static af(a) {
            SerializationUtils.as(a);
        }
        static ah(a) {
            SerializationUtils.au(a);
        }
        static as(a) {
            if (FormatSchemeDeserializer.d(a) == false) {
                return;
            }
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_OfficeArtExtensionList.$, b);
            if (c == null) {
                return;
            }
            let d;
            let e = CT_OfficeArtExtension.d(b, d);
            d = e.p1;
            let f = ((() => {
                let $ret = new CT_OfficeArtExtension();
                $ret.b = d;
                return $ret;
            })());
            c.b.b.add(f);
        }
        static ax(a) {
            SerializationUtils.a5(a);
        }
        static bc(a) {
            SerializationUtils.bg(a);
        }
        static bn(a) {
            SerializationUtils.br(a);
        }
        static bx(a) {
            SerializationUtils.by(a);
        }
        static cm(a) {
            SerializationUtils.ck(a);
        }
        static bb(a) {
            SerializationUtils.bf(a);
        }
        static az(a) {
            SerializationUtils.a6(a);
        }
        static u(a) {
            SerializationUtils.ak(a);
        }
        static av(a) {
            SerializationUtils.a2(a);
        }
        static aq(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_EffectStyleList.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_EffectStyleItem();
            c.c.add(d);
            b.s.k(d);
        }
        static ao(a) {
            SerializationUtils.a0(a);
        }
        static ap(a) {
            let b = FormatSchemeDeserializer.b(CT_EffectStyleItem.$, a);
            if (b == null) {
                return;
            }
            let c = new CT_EffectList();
            b.f.b = c;
            a.s.k(c);
        }
        static cb(a) {
            SerializationUtils.cb(a);
        }
        static ch(a) {
            SerializationUtils.cg(a);
        }
        static a3(a) {
            SerializationUtils.a8(a);
        }
        static bj(a) {
            SerializationUtils.bn(a);
        }
        static bw(a) {
            SerializationUtils.bx(a);
        }
        static b1(a) {
            SerializationUtils.b1(a);
        }
        static b5(a) {
            SerializationUtils.b5(a);
        }
        static cf(a) {
            SerializationUtils.cf(a);
        }
        static q(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_Scene3D.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_Backdrop();
            c.a = d;
            b.s.k(d);
        }
        static ad(a) {
            SerializationUtils.aq(a);
        }
        static bm(a) {
            SerializationUtils.bq(a);
        }
        static p(a) {
            SerializationUtils.ag(a);
        }
        static bv(a) {
            SerializationUtils.bw(a);
        }
        static co(a) {
            SerializationUtils.cm(a);
        }
        static b6(a) {
            SerializationUtils.b6(a);
        }
        static s(a) {
            SerializationUtils.ai(a);
        }
        static t(a) {
            SerializationUtils.aj(a);
        }
        static ak(a) {
            SerializationUtils.aw(a);
        }
        static au(a) {
            SerializationUtils.a1(a);
        }
        static bo(a) {
            let b = typeCast(ObjectModelThemePartManager.$, a);
            let c = FormatSchemeDeserializer.b(CT_LineStyleList.$, b);
            if (c == null) {
                return;
            }
            let d = new CT_LineProperties_DML();
            c.a.add(d);
            b.s.k(d);
        }
        static r(a) {
            SerializationUtils.ah(a);
        }
        static al(a) {
            SerializationUtils.ax(a);
        }
        static bd(a) {
            SerializationUtils.bh(a);
        }
        static bt(a) {
            SerializationUtils.bv(a);
        }
        static b0(a) {
            SerializationUtils.b0(a);
        }
        static b7(a) {
            SerializationUtils.b7(a);
        }
        static ck(a) {
            SerializationUtils.cj(a);
        }
        static am(a) {
            SerializationUtils.ay(a);
        }
        static d(a) {
            let b = FormatSchemeDeserializer.b(FormatSchemeDeserializer.$, a, false);
            return b != null;
        }
        static b($t, a, b = true) {
            return SerializationUtils.i($t, a, b);
        }
        static a(a, b) {
            return SerializationUtils.a(a, b);
        }
    }
    FormatSchemeDeserializer.$t = /*@__PURE__*/ markType(FormatSchemeDeserializer, 'FormatSchemeDeserializer');
    return FormatSchemeDeserializer;
})();
/**
 * @hidden
 */
export let SparklinesSerializer = /*@__PURE__*/ (() => {
    class SparklinesSerializer extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        b(a, b, c) {
            let d = this.a._sparklineGroups$i;
            if (d.count == 0) {
                return;
            }
            let e = false;
            for (let f of fromEnum(d)) {
                if (f._sparklines$i.count > 0) {
                    e = true;
                    break;
                }
            }
            if (e == false) {
                return;
            }
            SpreadsheetMLMain.abb(a, "{05C60535-1F16-4fd2-B633-F4F36F0B64E0}", SpreadsheetML2009Main.b1);
            SparklinesSerializer.c(a);
            for (let g of fromEnum(d)) {
                if (g._sparklines$i.count == 0) {
                    continue;
                }
                let h = toNullable(Number_$type, null);
                let i = toNullable(Number_$type, null);
                let j = toNullable(Number_$type, null);
                let k = toNullable(ST_SparklineType_$type, null);
                let l = toNullable(Boolean_$type, null);
                let m = toNullable(ST_DispBlanksAs_$type, null);
                let n = toNullable(Boolean_$type, null);
                let o = toNullable(Boolean_$type, null);
                let p = toNullable(Boolean_$type, null);
                let q = toNullable(Boolean_$type, null);
                let r = toNullable(Boolean_$type, null);
                let s = toNullable(Boolean_$type, null);
                let t = toNullable(Boolean_$type, null);
                let u = toNullable(Boolean_$type, null);
                let v = toNullable(ST_SparklineAxisMinMax_$type, null);
                let w = toNullable(ST_SparklineAxisMinMax_$type, null);
                let x = toNullable(Boolean_$type, null);
                if (g.dateAxis) {
                    l = toNullable(Boolean_$type, true);
                }
                if (g.displayBlanksAs != 2) {
                    m = toNullable(ST_DispBlanksAs_$type, SparklineExtensions.c(g.displayBlanksAs));
                }
                if (g.displayHidden) {
                    u = toNullable(Boolean_$type, true);
                }
                if (g.displayXAxis) {
                    t = toNullable(Boolean_$type, true);
                }
                if (g.firstPoint) {
                    q = toNullable(Boolean_$type, true);
                }
                if (g.highPoint) {
                    o = toNullable(Boolean_$type, true);
                }
                if (g.lastPoint) {
                    r = toNullable(Boolean_$type, true);
                }
                if (g.lineWeight != 0.75) {
                    j = toNullable(Number_$type, g.lineWeight);
                }
                if (g.lowPoint) {
                    p = toNullable(Boolean_$type, true);
                }
                if (g.verticalAxisMax != 0) {
                    h = toNullable(Number_$type, g.verticalAxisMax);
                }
                if (g.verticalAxisMaxType != 0) {
                    w = toNullable(ST_SparklineAxisMinMax_$type, SparklineExtensions.a(g.verticalAxisMaxType));
                }
                if (g.verticalAxisMin != 0) {
                    i = toNullable(Number_$type, g.verticalAxisMin);
                }
                if (g.verticalAxisMinType != 0) {
                    v = toNullable(ST_SparklineAxisMinMax_$type, SparklineExtensions.a(g.verticalAxisMinType));
                }
                if (g.markers) {
                    n = toNullable(Boolean_$type, true);
                }
                if (g.negativePoints) {
                    s = toNullable(Boolean_$type, true);
                }
                if (g.rightToLeft) {
                    x = toNullable(Boolean_$type, true);
                }
                if (g.type != 0) {
                    k = toNullable(ST_SparklineType_$type, SparklineExtensions.b(g.type));
                }
                CT_SparklineGroup.bi(a, SpreadsheetML2009Main.co, l, m, u, t, q, o, r, j, p, h, i, n, w, v, s, x, k);
                if (WorkbookColorInfo.l_op_Inequality(g.colorSeries, null)) {
                    ColorInfoExtensions.d(g.colorSeries, a, c, this.a, SpreadsheetML2009Main.a8);
                }
                if (WorkbookColorInfo.l_op_Inequality(g.colorNegativePoints, null)) {
                    ColorInfoExtensions.d(g.colorNegativePoints, a, c, this.a, SpreadsheetML2009Main.a6);
                }
                if (WorkbookColorInfo.l_op_Inequality(g.colorAxis, null)) {
                    ColorInfoExtensions.d(g.colorAxis, a, c, this.a, SpreadsheetML2009Main.a0);
                }
                if (WorkbookColorInfo.l_op_Inequality(g.colorMarkers, null)) {
                    ColorInfoExtensions.d(g.colorMarkers, a, c, this.a, SpreadsheetML2009Main.a5);
                }
                if (WorkbookColorInfo.l_op_Inequality(g.colorFirstPoint, null)) {
                    ColorInfoExtensions.d(g.colorFirstPoint, a, c, this.a, SpreadsheetML2009Main.a1);
                }
                if (WorkbookColorInfo.l_op_Inequality(g.colorLastPoint, null)) {
                    ColorInfoExtensions.d(g.colorLastPoint, a, c, this.a, SpreadsheetML2009Main.a3);
                }
                if (WorkbookColorInfo.l_op_Inequality(g.colorHighPoint, null)) {
                    ColorInfoExtensions.d(g.colorHighPoint, a, c, this.a, SpreadsheetML2009Main.a2);
                }
                if (WorkbookColorInfo.l_op_Inequality(g.colorLowPoint, null)) {
                    ColorInfoExtensions.d(g.colorLowPoint, a, c, this.a, SpreadsheetML2009Main.a4);
                }
                if (g.dateRangeFormula != null) {
                    let y = b._cv(g.dateRangeFormula);
                    Excel2006Main.av(a, y);
                    c.k();
                }
                if (g._sparklines$i.count > 0) {
                    SparklinesSerializer.d(a, SpreadsheetML2009Main.cr);
                    for (let z of fromEnum(g._sparklines$i)) {
                        SparklinesSerializer.d(a, SpreadsheetML2009Main.cn);
                        let aa = new WorksheetCellAddress(1, z.location.firstRow, z.location._v);
                        let ab = aa.toString();
                        let ac = z.dataRegion;
                        let ad = ac != null ? ac._toString2(1, true, true, true) : z.dataRegionName;
                        Excel2006Main.av(a, ad);
                        c.k();
                        Excel2006Main.aw(a, ab);
                        c.k();
                        c.k();
                    }
                    c.k();
                }
                c.k();
            }
            c.k();
            c.k();
        }
        static c(a) {
            a.ad.o(SpreadsheetML2009Main.cp);
            a.ad.i("xmlns", "xm", null, Excel2006Elements.b);
        }
        static d(a, b) {
            a.ad.o(b);
        }
    }
    SparklinesSerializer.$t = /*@__PURE__*/ markType(SparklinesSerializer, 'SparklinesSerializer');
    return SparklinesSerializer;
})();
/**
 * @hidden
 */
export let ObjectModelChartExPartManager = /*@__PURE__*/ (() => {
    class ObjectModelChartExPartManager extends ChartExPartManager {
        constructor() {
            super();
            this.bb = null;
            this.bd = null;
            this.bg = 100;
            this.bf = null;
            ChartExDeserializer.h1(this);
        }
        u(a) {
            let b = typeCast(WorksheetChart.$, a);
            let c = this.a8;
            let d = new ChartExSerializer(b.sheet);
            d.p(b, this, this.a8._b9, this.ad);
            return null;
        }
        t() {
            return super.t();
        }
        a() {
            let a = this.a8;
            let b = null;
            a._b3 = ((() => { let c = ObjectModelChartPartManager.a8(this.l, a, b); b = c.p2; return c.ret; })());
            if (this.l.canSeek) {
                this.l.position = 0;
            }
            else {
                this.l = new MemoryStream(2, b);
            }
            return super.a();
        }
        b(a) {
            let b = typeCast(WorksheetChart.$, a);
            if (b == null) {
                return null;
            }
            let c = b._gu;
            let d = b._gv;
            let e = b._fx;
            if (e == null) {
                if (c) {
                    return null;
                }
            }
            if (e != null && e.a == null) {
                if (c) {
                    return null;
                }
            }
            let f = this.a8;
            if (c || d) {
                let g = null;
                if (c) {
                    this.l.write(e.a.a, 0, e.a.a.length);
                }
                else {
                    g = super.b(a);
                }
                return WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(Async.g(e.e != null, () => f._j(ObjectModelChartUserShapePartManager.v, e, e.e.c)), () => Async.g(g != null, () => g)), () => Async.g(e.c != null, () => f._j(ObjectModelChartColorStylePartManager.a9, e, e.c.c))), () => Async.g(e.d != null, () => f._j(ObjectModelChartStylePartManager.a9, e, e.d.c))), () => {
                    if (e.b == null) {
                        return null;
                    }
                    return Async.d(Tuple$2.$.specialize(IPackageRelationship_$type, ImageData.$), e.b, (h) => f._bz(h.d, h.c.id));
                });
            }
            else {
                return WorkItemExtensions.i(Tuple$2.$.specialize(Uri.$, String_$type), WorkItemExtensions.i(Tuple$2.$.specialize(Uri.$, String_$type), super.b(a), () => {
                    let h = this.be;
                    return this.a8._j(ObjectModelChartColorStylePartManager.a9, h);
                }), () => {
                    let h = this.bc;
                    h.bm(b.chartType);
                    return this.a8._j(ObjectModelChartStylePartManager.a9, h);
                });
            }
        }
        get bc() {
            if (this.bb == null) {
                this.bb = CT_ChartStyle.b();
            }
            this.bb.bj = toNullable(Number_$type, this.bg);
            this.bg += 1;
            return this.bb;
        }
        get be() {
            if (this.bd == null) {
                this.bd = CT_ColorStyle.a();
            }
            return this.bd;
        }
        get a8() {
            return ObjectModelChartExPartManager.a9(this);
        }
        static a9(a) {
            return a.d;
        }
    }
    ObjectModelChartExPartManager.$t = /*@__PURE__*/ markType(ObjectModelChartExPartManager, 'ObjectModelChartExPartManager', ChartExPartManager.$);
    ObjectModelChartExPartManager.ba = /*@__PURE__*/ new ObjectModelChartExPartManager();
    return ObjectModelChartExPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelChartsheetPartManager = /*@__PURE__*/ (() => {
    class ObjectModelChartsheetPartManager extends ChartsheetPartManager {
        constructor() {
            super();
            this.bd = null;
            this.bc = 0;
            this.be = null;
            this.a8 = null;
            this.az(SpreadsheetMLMain.ej, ObjectModelChartsheetPartManager.bg);
            this.ay(SpreadsheetMLMain.ej, ObjectModelChartsheetPartManager.bi);
            this.az(SpreadsheetMLMain.fq, ObjectModelChartsheetPartManager.bk);
            this.az(SpreadsheetMLMain.fr, ObjectModelChartsheetPartManager.bl);
            this.az(SpreadsheetMLMain.g2, ObjectModelChartsheetPartManager.bn);
            this.az(SpreadsheetMLMain.i5, ObjectModelWorksheetPartManager.d2);
            this.az(SpreadsheetMLMain.lm, ObjectModelWorksheetPartManager.em);
            this.az(SpreadsheetMLMain.ln, ObjectModelWorksheetPartManager.en);
            this.az(SpreadsheetMLMain.l2, ObjectModelWorksheetPartManager.eq);
            this.az(SpreadsheetMLMain.l4, ObjectModelWorksheetPartManager.er);
            this.az(SpreadsheetMLMain.mi, ObjectModelChartsheetPartManager.bp);
            this.az(SpreadsheetMLMain.ow, ObjectModelChartsheetPartManager.br);
            this.az(SpreadsheetMLMain.ox, ObjectModelChartsheetPartManager.bt);
            this.az(SpreadsheetMLMain.oz, ObjectModelChartsheetPartManager.bv);
            this.az(SpreadsheetMLMain.o0, ObjectModelChartsheetPartManager.bw);
            this.az(SpreadsheetMLMain.qq, ObjectModelChartsheetPartManager.by);
        }
        t() {
            let a = this.a9;
            let b = a._d.uri.toString();
            this.a8 = a._b7._ao(b);
            if (this.a8 == null) {
                return null;
            }
            return super.t();
        }
        u(a) {
            let b = typeCast(Chartsheet.$, a);
            if (b == null) {
                return null;
            }
            this.a8 = b;
            this.bc = this.a8.workbook.currentFormat;
            let c = this.a9;
            let d = c._b9;
            let e = d._s(b);
            this.bz(b, e);
            let f = false;
            for (let g = 0; g < b._p.count; g++) {
                let h = d._z(b._p.item(g));
                if (h != null) {
                    f = true;
                    break;
                }
            }
            let i = new SheetRelationships();
            let j = b._bf == null ? null : ExcelUtils.x(b._bf, b._a7);
            return WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(Async.g(j != null, () => WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), String_$type, c._b0(j, b._a7), (k) => e.a = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), k).d)), () => Async.g(f, () => WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), String_$type, c._j(ObjectModelDrawingPartManager.bg, b), (k) => i.a = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), k).d))), () => Async.g(this.be.count != 0, () => WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), String_$type, c._j(ObjectModelVmlDrawingPartManager.bb, this.be), (k) => i.c = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), k).d))), () => Async.g(b._bb != null, () => WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), String_$type, c._j(ObjectModelVmlDrawingPartManager.bb, b._bb), (k) => i.b = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), k).d))), () => this.a7(d, i));
        }
        ai(a) {
            switch (a) {
                case SpreadsheetMLMain.hk:
                    {
                        let b;
                        let c = SpreadsheetMLMain.vq(this, b);
                        b = c.p1;
                        switch (b) {
                            default: return false;
                        }
                    }
            }
            return super.ai(a);
        }
        get a9() {
            return ObjectModelChartsheetPartManager.ba(this);
        }
        static ba(a) {
            return a.d;
        }
        static bg(a) {
            a.bf();
        }
        bf() {
            this.s.k(this.a8._g);
        }
        static bi(a) {
            a.bh();
        }
        bh() {
            this.a8._p._ao();
        }
        static bk(a) {
            a.bj();
        }
        bj() {
            let a = new ST_Guid();
            let b;
            let c;
            let d;
            let e = SpreadsheetMLMain.ux(this, a, b, c, d);
            a = e.p1;
            b = e.p2;
            c = e.p3;
            d = e.p4;
            let f = this.a9;
            let g = f._by;
            let h = g._customViews$i;
            let i = h._item(ST_Guid.e(a));
            if (i == null) {
                return;
            }
            let j = i.getSheetPrintOptions(this.a8, true);
            if (j != null) {
                this.s.k(j);
            }
            let k = i.getSheetDisplayOptions(this.a8, true);
            if (k == null) {
                return;
            }
            this.s.k(k);
            k.magnification = b;
            k.visibility = XlsxUtilities.af(c);
            k.sizeWithWindow = d;
        }
        static bl(a) {
        }
        static bn(a) {
            a.bm();
        }
        bm() {
            let a;
            let b = SpreadsheetMLMain.vh(this, a);
            a = b.p1;
            let c = this.a9;
            let d = c._b7;
            let e = PackageUtilities.ak(c._g(a)).originalString;
            let f;
            if (((() => { let g = d._a6.tryGetValue(e, f); f = g.p1; return g.ret; })())) {
                for (let g of fromEnum(f)) {
                    d._bp(this.a8, g);
                }
            }
            else {
            }
        }
        static bp(a) {
            a.bo();
        }
        bo() {
            let a;
            let b = SpreadsheetMLMain.w9(this, a);
            a = b.p1;
            let c = this.a9;
            let d = typeCast(ImageData.$, c._au(a));
            if (d != null) {
                let e = XlsxUtilities.v(d);
                this.a8._bf = ExcelUtils.g6(e);
                this.a8._a7 = e.d;
            }
            else {
            }
        }
        static br(a) {
            a.bq();
        }
        bq() {
            let a;
            let b;
            let c = SpreadsheetMLMain.t9(this, a, b);
            a = c.p1;
            b = c.p2;
            this.a8._ak = b;
        }
        static bv(a) {
            a.bu();
        }
        bu() {
            let a;
            let b;
            let c;
            let d;
            let e = SpreadsheetMLMain.uc(this, a, b, c, d);
            a = e.p1;
            b = e.p2;
            c = e.p3;
            d = e.p4;
            let f = this.a8.displayOptions;
            this.s.k(f);
            if (this.a8._r) {
                return;
            }
            this.a8._r = true;
            this.a8._w = b;
            let g = c;
            let h = ExcelUtils.fl(g);
            g = h.p0;
            f.magnification = g;
            f.sizeWithWindow = d;
        }
        static bw(a) {
        }
        static bt(a) {
            a.bs();
        }
        bs() {
            let a = null;
            let b, c;
            if (SpreadsheetMLMain.b4(this)) {
                let d, e, f;
                let g;
                let h = SpreadsheetMLMain.ub(this, d, e, f, g, b, c);
                d = h.p1;
                e = h.p2;
                f = h.p3;
                g = h.p4;
                b = h.p5;
                c = h.p6;
                if (e != null && f != null && nullableNotEquals(g, null)) {
                    a = ProtectionValidationInfo.b(d, Convert.fromBase64String(e), Convert.fromBase64String(f), g.value);
                }
            }
            else {
                let i;
                let j = SpreadsheetMLMain.ua(this, i, b, c);
                i = j.p1;
                b = j.p2;
                c = j.p3;
                if (i.hasValue) {
                    a = ProtectionValidationInfo.c(i.value.e());
                }
            }
            let k = this.a8.protection;
            k.allowEditObjects = b == false;
            k.allowEditContents = c == false;
            k._c.b = a;
            k._c.j(b || c);
        }
        static by(a) {
            a.bx();
        }
        bx() {
            this.a8.tabColorInfo = ObjectModelCommonPartHelpers.c(this, SpreadsheetMLMain.yf);
        }
        bz(a, b) {
            this.bd = new List$1(UnknownShape.$, 0);
            this.be = new List$1(WorksheetShape.$, 0);
            ObjectModelWorksheetPartManager.f1(a._p, this.bd, this.be);
        }
        a7(a, b) {
            let c = a._b;
            let d = this.a8.printOptions;
            let e = a._s(this.a8);
            SpreadsheetMLMain.zs(this);
            if (b.c != null || b.b != null) {
                this.ad.l(VmlNamespace.ao);
            }
            this.b3();
            this.b6();
            this.b4();
            this.b1();
            ObjectModelWorksheetPartManager.gq(this, d);
            ObjectModelWorksheetPartManager.gr(this, d);
            ObjectModelWorksheetPartManager.gi(this, d);
            ObjectModelWorksheetPartManager.gf(this, b.a);
            ObjectModelWorksheetPartManager.gl(this, b.c);
            ObjectModelWorksheetPartManager.gm(this, b.b);
            ObjectModelWorksheetPartManager.gu(this, a, e);
            return null;
        }
        b2(a) {
            if (a._ag() == false) {
                return;
            }
            let b = null;
            if (a._c != null) {
                let c = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), this.d._j(ObjectModelPrinterSettingsPartManager.a8, a._c));
                if (c != null) {
                    b = c.d;
                }
            }
            SpreadsheetMLMain.acr(this, a.paperSize, void 0, void 0, void 0, intSToU(a.startPageNumber), void 0, void 0, void 0, XlsxUtilities.ax(a.orientation), void 0, a.printInBlackAndWhite, a.draftQuality, XlsxUtilities.aq(a.printNotes), a.pageNumbering == 1, XlsxUtilities.a1(a.printErrors), intSToU(a.resolution), intSToU(a.verticalResolution), intSToU(a.numberOfCopies), b);
            this.ad.k();
        }
        b0(a) {
            let b = a.getSheetDisplayOptions(this.a8, false);
            if (b == null) {
                return;
            }
            SpreadsheetMLMain.aai(this, ST_Guid.a(a._t), intSToU(b.magnification), XlsxUtilities.a3(b.visibility), b.sizeWithWindow);
            if (a.savePrintOptions) {
                let c = a.getSheetPrintOptions(this.a8, false);
                if (c != null) {
                    ObjectModelWorksheetPartManager.gq(this, c);
                    ObjectModelWorksheetPartManager.gr(this, c);
                    ObjectModelWorksheetPartManager.gi(this, c);
                }
            }
            this.ad.k();
        }
        b1() {
            let a = this.a9._by;
            if (a._cq == false) {
                return;
            }
            if (Enumerable.d(CustomView.$, a._customViews$i, (b) => b.getSheetDisplayOptions(this.a8, false) != null) == false) {
                return;
            }
            SpreadsheetMLMain.aam(this);
            ExcelUtils.fo(CustomView.$, a._customViews$i, runOn(this, this.b0));
            this.ad.k();
        }
        b3() {
            let a = null;
            if (this.a8.workbook._k != null) {
                a = this.a8._ak;
            }
            SpreadsheetMLMain.adm(this, void 0, void 0, void 0, void 0, void 0, void 0, a);
            this.b7();
            this.ad.k();
        }
        b4() {
            let a = this.a8.protection;
            let b = this.d._z == 0;
            if (b && nullableEquals(a._c.h(), 0)) {
                b = false;
            }
            if (b == false) {
                let c;
                let d, e;
                let f;
                let g = a._c.e(c, d, e, f);
                c = g.p0;
                d = g.p1;
                e = g.p2;
                f = g.p3;
                SpreadsheetMLMain.zv(this, c, d != null ? Convert.toBase64String(d) : null, e != null ? Convert.toBase64String(e) : null, f, a.allowEditObjects == false, a.allowEditContents == false);
            }
            else {
                let h = a._c.h();
                let i = h.hasValue ? toNullable(ST_UnsignedShortHex.$, new ST_UnsignedShortHex(1, h.value)) : toNullable(ST_UnsignedShortHex.$, null);
                SpreadsheetMLMain.zu(this, i, a.allowEditObjects == false, a.allowEditContents == false);
            }
            this.ad.k();
        }
        b5() {
            let a = this.a9._by;
            let b = this.a8.displayOptions;
            (((c, d, e, f, g) => SpreadsheetMLMain.zw(c, d, f, e, g))(this, 0, intSToU(b.magnification), a.windowOptions.selectedSheet == this.a8 || this.a8._w, b.sizeWithWindow));
            this.ad.k();
        }
        b6() {
            SpreadsheetMLMain.adr(this);
            this.b5();
            this.ad.k();
        }
        b7() {
            if (WorkbookColorInfo.l_op_Equality(this.a8.tabColorInfo, null)) {
                return;
            }
            ObjectModelCommonPartHelpers.ao(this, this.a8.tabColorInfo, 4, SpreadsheetMLMain.ad2);
        }
    }
    ObjectModelChartsheetPartManager.$t = /*@__PURE__*/ markType(ObjectModelChartsheetPartManager, 'ObjectModelChartsheetPartManager', ChartsheetPartManager.$);
    ObjectModelChartsheetPartManager.bb = /*@__PURE__*/ new ObjectModelChartsheetPartManager();
    return ObjectModelChartsheetPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelActiveXBinaryPartManager = /*@__PURE__*/ (() => {
    class ObjectModelActiveXBinaryPartManager extends ActiveXBinaryPartManager {
        constructor() {
            super();
        }
        a() {
            return WorkItem.g(Base.$, new BinaryData(DocCoreUtils.c(this.l)));
        }
        b(a) {
            let b = typeCast(BinaryData.$, a);
            if (b == null) {
                return null;
            }
            this.l.write(b.a, 0, b.a.length);
            return null;
        }
        get v() {
            return ObjectModelActiveXBinaryPartManager.w(this);
        }
        static w(a) {
            return a.d;
        }
    }
    ObjectModelActiveXBinaryPartManager.$t = /*@__PURE__*/ markType(ObjectModelActiveXBinaryPartManager, 'ObjectModelActiveXBinaryPartManager', ActiveXBinaryPartManager.$);
    ObjectModelActiveXBinaryPartManager.x = /*@__PURE__*/ new ObjectModelActiveXBinaryPartManager();
    return ObjectModelActiveXBinaryPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelActiveXPartManager = /*@__PURE__*/ (() => {
    class ObjectModelActiveXPartManager extends ActiveXPartManager {
        constructor() {
            super();
        }
        a() {
            return WorkItem.g(Base.$, RoundTripDataPartManager.r(this.v, this.l, this.m));
        }
        b(a) {
            let b = typeCast(RoundTripControlData.$, a);
            if (b == null) {
                return null;
            }
            return RoundTripDataPartManager.s(b, this.v, this.l);
        }
        get v() {
            return ObjectModelActiveXPartManager.w(this);
        }
        static w(a) {
            return a.d;
        }
    }
    ObjectModelActiveXPartManager.$t = /*@__PURE__*/ markType(ObjectModelActiveXPartManager, 'ObjectModelActiveXPartManager', ActiveXPartManager.$);
    ObjectModelActiveXPartManager.x = /*@__PURE__*/ new ObjectModelActiveXPartManager();
    return ObjectModelActiveXPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelChartColorStylePartManager = /*@__PURE__*/ (() => {
    class ObjectModelChartColorStylePartManager extends ChartColorStylePartManager {
        constructor() {
            super();
        }
        get_aj() {
            return false;
        }
        a() {
            return WorkItem.g(Base.$, new BinaryData(DocCoreUtils.c(this.l)));
        }
        b(a) {
            let b = typeCast(CT_ColorStyle.$, a);
            if (b != null) {
                return super.b(a);
            }
            let c = typeCast(Excel2007ChartData.$, a);
            if (c == null) {
                return null;
            }
            if (c.c != null) {
                this.l.write(c.c.d.a, 0, c.c.d.a.length);
            }
            return null;
        }
        u(a) {
            let b = typeCast(CT_ColorStyle.$, a);
            if (b != null) {
                ChartStyleExtensions.b(b, this, this.a7._b9, this.ad, ChartStyleElements.f);
            }
            return null;
        }
        get a7() {
            return ObjectModelChartColorStylePartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelChartColorStylePartManager.$t = /*@__PURE__*/ markType(ObjectModelChartColorStylePartManager, 'ObjectModelChartColorStylePartManager', ChartColorStylePartManager.$);
    ObjectModelChartColorStylePartManager.a9 = /*@__PURE__*/ new ObjectModelChartColorStylePartManager();
    return ObjectModelChartColorStylePartManager;
})();
/**
 * @hidden
 */
export let ObjectModelChartPartManager = /*@__PURE__*/ (() => {
    class ObjectModelChartPartManager extends ChartPartManager {
        constructor() {
            super();
            this.bc = null;
            this.bd = null;
            ChartDeserializer.lm(this);
        }
        u(a) {
            let b = typeCast(WorksheetChart.$, a);
            let c = this.a9;
            let d = new ChartSerializer(b.sheet);
            d.bx(b, this, this.a9._b9, this.ad);
            return null;
        }
        t() {
            return super.t();
        }
        a() {
            let a = this.a9;
            let b = null;
            a._b3 = ((() => { let c = ObjectModelChartPartManager.a8(this.l, a, b); b = c.p2; return c.ret; })());
            if (this.l.canSeek) {
                this.l.position = 0;
            }
            else {
                this.l = new MemoryStream(2, b);
            }
            let c = false;
            return WorkItemExtensions.l(Base.$, Base.$, Async.k(InvalidXLSXElementException.$, Base.$, () => super.a(), (d) => {
                a._b3 = null;
                switch (d._elementName) {
                    case ChartExElements.m:
                        c = true;
                        break;
                    default: break;
                }
            }), (d) => {
                if (c) {
                    return Async.q(Stream.$, Base.$, a._d.getStream(3, 1), (e) => {
                        let f = ObjectModelChartExPartManager.ba.e(a, e);
                        return f.a();
                    });
                }
                return WorkItem.g(Base.$, WorkItemExtensions.m(Base.$, d));
            });
        }
        b(a) {
            let b = typeCast(WorksheetChart.$, a);
            if (b == null) {
                return null;
            }
            let c = b._gu;
            let d = b._fx;
            if (d == null) {
                if (c) {
                    return null;
                }
            }
            if (d != null && d.a == null) {
                if (c) {
                    return null;
                }
            }
            let e = this.a9;
            if (c) {
                this.l.write(d.a.a, 0, d.a.a.length);
                return WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(Async.g(d.e != null, () => e._j(ObjectModelChartUserShapePartManager.v, d, d.e.c)), () => Async.g(d.c != null, () => e._j(ObjectModelChartColorStylePartManager.a9, d, d.c.c))), () => Async.g(d.d != null, () => e._j(ObjectModelChartStylePartManager.a9, d, d.d.c))), () => {
                    if (d.b == null) {
                        return null;
                    }
                    return Async.d(Tuple$2.$.specialize(IPackageRelationship_$type, ImageData.$), d.b, (f) => e._bz(f.d, f.c.id));
                });
            }
            else {
                return super.b(a);
            }
        }
        get a9() {
            return ObjectModelChartPartManager.ba(this);
        }
        static ba(a) {
            return a.d;
        }
        static a8(a, b, c) {
            c = DocCoreUtils.c(a);
            let d = new Excel2007ChartData();
            d.a = new BinaryData(c);
            d.e = b._bc(BinaryData.$, ObjectModelChartUserShapePartManager.v);
            d.c = b._bc(BinaryData.$, ObjectModelChartColorStylePartManager.a9);
            d.d = b._bc(BinaryData.$, ObjectModelChartStylePartManager.a9);
            let e = ImagePartManagerBase.v(b._z);
            let f = b._d.getRelationships();
            for (let g of fromEnum(f)) {
                if (g.relationshipType == e) {
                    let h = typeCast(ImageData.$, b._as(g));
                    if (h == null) {
                        continue;
                    }
                    if (d.b == null) {
                        d.b = new List$1(Tuple$2.$.specialize(IPackageRelationship_$type, ImageData.$), 0);
                    }
                    d.b.add(Tuple.a(IPackageRelationship_$type, ImageData.$, g, h));
                }
            }
            return {
                ret: d,
                p2: c
            };
        }
    }
    ObjectModelChartPartManager.$t = /*@__PURE__*/ markType(ObjectModelChartPartManager, 'ObjectModelChartPartManager', ChartPartManager.$);
    ObjectModelChartPartManager.bb = /*@__PURE__*/ new ObjectModelChartPartManager();
    return ObjectModelChartPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelChartStylePartManager = /*@__PURE__*/ (() => {
    class ObjectModelChartStylePartManager extends ChartStylePartManager {
        constructor() {
            super();
        }
        get a7() {
            return ObjectModelChartStylePartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
        a() {
            return WorkItem.g(Base.$, new BinaryData(DocCoreUtils.c(this.l)));
        }
        u(a) {
            let b = typeCast(CT_ChartStyle.$, a);
            if (b != null) {
                ChartStyleExtensions.a(b, this, this.a7._b9, this.ad, ChartStyleElements.e);
            }
            return null;
        }
        b(a) {
            let b = typeCast(CT_ChartStyle.$, a);
            if (b != null) {
                return super.b(a);
            }
            let c = typeCast(Excel2007ChartData.$, a);
            if (c == null) {
                return null;
            }
            if (c.d != null) {
                this.l.write(c.d.d.a, 0, c.d.d.a.length);
            }
            return null;
        }
        get_aj() {
            return false;
        }
    }
    ObjectModelChartStylePartManager.$t = /*@__PURE__*/ markType(ObjectModelChartStylePartManager, 'ObjectModelChartStylePartManager', ChartStylePartManager.$);
    ObjectModelChartStylePartManager.a9 = /*@__PURE__*/ new ObjectModelChartStylePartManager();
    return ObjectModelChartStylePartManager;
})();
/**
 * @hidden
 */
export let ObjectModelConnectionsPartManager = /*@__PURE__*/ (() => {
    class ObjectModelConnectionsPartManager extends ConnectionsPartManager {
        constructor() {
            super();
        }
        a() {
            let a = RoundTripDataPartManager.r(this.a7, this.l, this.m);
            this.a7._by._m = a;
            return WorkItem.g(Base.$, a);
        }
        b(a) {
            let b = this.a7._by._m;
            if (b == null) {
                return null;
            }
            return RoundTripDataPartManager.s(b, this.a7, this.l);
        }
        u(a) {
            throw new NotImplementedException(0);
        }
        get a7() {
            return ObjectModelConnectionsPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelConnectionsPartManager.$t = /*@__PURE__*/ markType(ObjectModelConnectionsPartManager, 'ObjectModelConnectionsPartManager', ConnectionsPartManager.$);
    ObjectModelConnectionsPartManager.a9 = /*@__PURE__*/ new ObjectModelConnectionsPartManager();
    return ObjectModelConnectionsPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelCorePropertiesPartManager = /*@__PURE__*/ (() => {
    class ObjectModelCorePropertiesPartManager extends CorePropertiesPartManager {
        constructor() {
            super();
            this.az(CoreProperties.aq, ObjectModelCorePropertiesPartManager.ba);
            this.az(CoreProperties.ar, ObjectModelCorePropertiesPartManager.bb);
            this.az(CoreProperties.as, ObjectModelCorePropertiesPartManager.bc);
            this.az(CoreProperties.at, ObjectModelCorePropertiesPartManager.bg);
            this.az(CoreProperties.au, ObjectModelCorePropertiesPartManager.bh);
            this.az("http://purl.org/dc/elements/1.1/creator", ObjectModelCorePropertiesPartManager.be);
            this.az(DcElements.ar, ObjectModelCorePropertiesPartManager.bf);
            this.az("http://purl.org/dc/elements/1.1/subject", ObjectModelCorePropertiesPartManager.bj);
            this.az("http://purl.org/dc/elements/1.1/title", ObjectModelCorePropertiesPartManager.bk);
            this.az("http://purl.org/dc/terms/created", ObjectModelCorePropertiesPartManager.bd);
            this.az("http://purl.org/dc/terms/modified", ObjectModelCorePropertiesPartManager.bi);
        }
        u(a) {
            let b = this.a7._by;
            CoreProperties.a7(this);
            if (stringIsNullOrEmpty(b.documentProperties.title) == false) {
                DcElements.a2(this, b.documentProperties.title);
                this.ad.k();
            }
            if (stringIsNullOrEmpty(b.documentProperties.subject) == false) {
                DcElements.a1(this, b.documentProperties.subject);
                this.ad.k();
            }
            if (stringIsNullOrWhiteSpace(b.documentProperties.author) == false) {
                DcElements.az(this, b.documentProperties.author.trim());
                this.ad.k();
            }
            if (stringIsNullOrEmpty(b.documentProperties.keywords) == false) {
                CoreProperties.a8(this, null, b.documentProperties.keywords);
                this.ad.k();
            }
            if (stringIsNullOrEmpty(b.documentProperties.comments) == false) {
                DcElements.a0(this, b.documentProperties.comments);
                this.ad.k();
            }
            if (stringIsNullOrWhiteSpace(b.documentProperties.author) == false) {
                CoreProperties.a9(this, b.documentProperties.author.trim());
                this.ad.k();
            }
            let c = dateNow();
            DcTerms.aw(this, c);
            this.ad.k();
            DcTerms.ax(this, c);
            this.ad.k();
            if (stringIsNullOrEmpty(b.documentProperties.category) == false) {
                CoreProperties.a5(this, b.documentProperties.category);
                this.ad.k();
            }
            if (stringIsNullOrEmpty(b.documentProperties.status) == false) {
                CoreProperties.a6(this, b.documentProperties.status);
                this.ad.k();
            }
            this.ad.k();
            return null;
        }
        static ba(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = CoreProperties.ay(a, c);
            c = d.p1;
            b.category = c;
        }
        static bb(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = CoreProperties.az(a, c);
            c = d.p1;
            b.status = c;
        }
        static bc(a) {
            let b = ObjectModelCorePropertiesPartManager.a8(a)._by;
            a.s.k(b.documentProperties);
        }
        static bd(a) {
            let b;
            let c = DcTerms.au(a, b);
            b = c.p1;
        }
        static be(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DcElements.av(a, c);
            c = d.p1;
            b.author = c;
        }
        static bf(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DcElements.aw(a, c);
            c = d.p1;
            b.comments = c;
        }
        static bg(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = CoreProperties.a1(a, c, d);
            c = e.p1;
            d = e.p2;
            b.keywords = d;
        }
        static bh(a) {
            let b;
            let c = CoreProperties.a2(a, b);
            b = c.p1;
        }
        static bi(a) {
            let b;
            let c = DcTerms.av(a, b);
            b = c.p1;
        }
        static bj(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DcElements.ax(a, c);
            c = d.p1;
            b.subject = c;
        }
        static bk(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DcElements.ay(a, c);
            c = d.p1;
            b.title = c;
        }
        get a7() {
            return ObjectModelCorePropertiesPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelCorePropertiesPartManager.$t = /*@__PURE__*/ markType(ObjectModelCorePropertiesPartManager, 'ObjectModelCorePropertiesPartManager', CorePropertiesPartManager.$);
    ObjectModelCorePropertiesPartManager.a9 = /*@__PURE__*/ new ObjectModelCorePropertiesPartManager();
    return ObjectModelCorePropertiesPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelCtrlPropPartManager = /*@__PURE__*/ (() => {
    class ObjectModelCtrlPropPartManager extends CtrlPropPartManager {
        constructor() {
            super();
        }
        a() {
            return WorkItem.g(Base.$, RoundTripDataPartManager.r(this.v, this.l, this.m));
        }
        b(a) {
            let b = typeCast(RoundTripControlData.$, a);
            if (b == null) {
                return null;
            }
            return RoundTripDataPartManager.s(b, this.v, this.l);
        }
        get v() {
            return ObjectModelCtrlPropPartManager.w(this);
        }
        static w(a) {
            return a.d;
        }
    }
    ObjectModelCtrlPropPartManager.$t = /*@__PURE__*/ markType(ObjectModelCtrlPropPartManager, 'ObjectModelCtrlPropPartManager', CtrlPropPartManager.$);
    ObjectModelCtrlPropPartManager.x = /*@__PURE__*/ new ObjectModelCtrlPropPartManager();
    return ObjectModelCtrlPropPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelCustomXmlItemPartManager = /*@__PURE__*/ (() => {
    class ObjectModelCustomXmlItemPartManager extends CustomXmlItemPartManager {
        constructor() {
            super();
        }
        a() {
            let a = new BinaryData(DocCoreUtils.c(this.l));
            this.v._by._g7(a);
            return WorkItem.g(Base.$, a);
        }
        b(a) {
            let b = typeCast(Tuple$2.$.specialize(BinaryData.$, BinaryData.$), a);
            if (b == null) {
                return null;
            }
            return WorkItemExtensions.a(this.d._j(ObjectModelCustomXmlItemPropsPartManager.x, b.d), () => {
                let c = b.c;
                this.l.write(c.a, 0, c.a.length);
            });
        }
        get v() {
            return ObjectModelCustomXmlItemPartManager.w(this);
        }
        static w(a) {
            return a.d;
        }
    }
    ObjectModelCustomXmlItemPartManager.$t = /*@__PURE__*/ markType(ObjectModelCustomXmlItemPartManager, 'ObjectModelCustomXmlItemPartManager', CustomXmlItemPartManager.$);
    ObjectModelCustomXmlItemPartManager.x = /*@__PURE__*/ new ObjectModelCustomXmlItemPartManager();
    return ObjectModelCustomXmlItemPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelCustomXmlItemPropsPartManager = /*@__PURE__*/ (() => {
    class ObjectModelCustomXmlItemPropsPartManager extends CustomXmlItemPropsPartManager {
        constructor() {
            super();
        }
        a() {
            let a = new BinaryData(DocCoreUtils.c(this.l));
            this.v._by._g8(a);
            return WorkItem.g(Base.$, a);
        }
        b(a) {
            let b = typeCast(BinaryData.$, a);
            if (b == null) {
                return null;
            }
            this.l.write(b.a, 0, b.a.length);
            return null;
        }
        get v() {
            return ObjectModelCustomXmlItemPropsPartManager.w(this);
        }
        static w(a) {
            return a.d;
        }
    }
    ObjectModelCustomXmlItemPropsPartManager.$t = /*@__PURE__*/ markType(ObjectModelCustomXmlItemPropsPartManager, 'ObjectModelCustomXmlItemPropsPartManager', CustomXmlItemPropsPartManager.$);
    ObjectModelCustomXmlItemPropsPartManager.x = /*@__PURE__*/ new ObjectModelCustomXmlItemPropsPartManager();
    return ObjectModelCustomXmlItemPropsPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelDrawingPartManager = /*@__PURE__*/ (() => {
    class ObjectModelDrawingPartManager extends DrawingPartManager {
        constructor() {
            super();
            this.bu = 0;
            this.bi = null;
            this.br = null;
            this.bq = null;
            this.bh = null;
            this.az(DrawingMLSpreadsheetDrawing.em, ObjectModelDrawingPartManager.b7);
            this.az(DrawingMLMain.cx, ObjectModelDrawingPartManager.b2);
            this.az(DrawingMLMain.cy, ObjectModelDrawingPartManager.b3);
            this.az(DrawingMLMain.dt, ObjectModelDrawingPartManager.b4);
            this.az(DrawingMLMain.du, ObjectModelDrawingPartManager.b5);
            ObjectModelCommonPartHelpers.am(this);
        }
        z(a) {
            switch (a) {
                case DrawingMLMain.c0: return 1;
            }
            return super.z(a);
        }
        p() {
            super.p();
            this.bh = new ObjectModelDrawingPartManager_ShapeLoader(this);
            DrawingPartManagerHelpers.ch(this);
            this.b8(DrawingMLSpreadsheetDrawing.dz);
            this.b8(DrawingMLSpreadsheetDrawing.d5);
            this.b8(DrawingMLSpreadsheetDrawing.d6);
            this.b8(DrawingMLSpreadsheetDrawing.ec);
            this.b8(DrawingMLSpreadsheetDrawing.eg);
            this.ay(DrawingMLSpreadsheetDrawing.dt, runOn(this, this.b1));
            this.ay(DrawingMLSpreadsheetDrawing.eb, runOn(this, this.b1));
            this.ay(DrawingMLSpreadsheetDrawing.ek, runOn(this, this.b1));
        }
        t() {
            this.br = new List$1(WorksheetShape.$, 0);
            let a = this.be;
            let b = a._b7;
            b._a6.addItem(a._d.uri.toString(), this.br);
            return super.t();
        }
        ax(a, b) {
            switch (a) {
                case DrawingMLMain.c0:
                    {
                        let c = this.s.a(CT_ShapeProperties.$);
                        if (c == null) {
                            return;
                        }
                        let d = ((() => {
                            let $ret = new CT_CustomGeometry2D();
                            $ret.g = b;
                            return $ret;
                        })());
                        c.e = d;
                        this.s.k(d);
                        break;
                    }
            }
            super.ax(a, b);
        }
        u(a) {
            let b = typeCast(Sheet.$, a);
            if (b == null) {
                return null;
            }
            let c = this.be._b9;
            this.bz(c, b);
            let d = new Dictionary$2(ExcelImage.$, String_$type, 0);
            return WorkItemExtensions.c(c._b8(b._p, d), () => {
                this.s.k(d);
                let e = b._p;
                let f = new List$1(WorksheetShape.$, 2, e.count);
                for (let g = 0; g < e.count; g++) {
                    let h = c._z(e.item(g));
                    if (h != null) {
                        f.add(h);
                    }
                }
                DrawingMLSpreadsheetDrawing.fg(this);
                if (b.type == 1) {
                    return WorkItemExtensions.a(Async.d(WorksheetShape.$, f, (i) => this.bb(c, i)), () => this.ad.k());
                }
                return WorkItemExtensions.a(Async.d(WorksheetShape.$, f, (i) => this.bd(c, i)), () => this.ad.k());
            });
        }
        bz(a, b) {
            this.bq = new Dictionary$2(WorksheetShape.$, ObjectModelDrawingPartManager_ShapeIdentity.$, 0);
            let c = 1;
            let d = this.by(a, b._p, c);
            c = d.p2;
        }
        by(a, b, c) {
            for (let d = 0; d < b.count; d++) {
                let e = a._z(b.item(d));
                if (e == null) {
                    continue;
                }
                this.bq.addItem(e, new ObjectModelDrawingPartManager_ShapeIdentity(e, c++));
                let f = typeCast(WorksheetShapeGroupBase.$, e);
                if (f != null) {
                    let g = this.by(a, f._shapes$i, c);
                    c = g.p2;
                }
            }
            return {
                p2: c
            };
        }
        bj(a) {
            if (a._b1.hasValue == false) {
                return null;
            }
            let b = this.bq.item(a);
            return ((() => {
                let $ret = new CT_Connector();
                $ret.c = a._b7;
                $ret.b = a._a0;
                $ret.a = ((() => {
                    let $ret = new CT_ConnectorNonVisual();
                    $ret.a = ((() => {
                        let $ret = new CT_NonVisualDrawingProps();
                        $ret.c = ST_DrawingElementId.a(b.c);
                        $ret.f = b.a;
                        $ret.d = a.visible == false;
                        return $ret;
                    })());
                    $ret.b = ((() => {
                        let $ret = new CT_NonVisualConnectorProperties();
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.spPr = ((() => {
                    let $ret = new CT_ShapeProperties();
                    $ret.e = ((() => {
                        let $ret = new CT_PresetGeometry2D();
                        $ret.b = a._b1.value;
                        $ret.a = ((() => {
                            let $ret = new CT_GeomGuideList();
                            return $ret;
                        })());
                        return $ret;
                    })());
                    $ret.a = a._k._c(ObjectModelExcelDocumentManager.$, IEG_FillProperties_$type, IEG_ShapeFillVisitor.a, this.be);
                    $ret.c = a._n._c(ObjectModelExcelDocumentManager.$, CT_LineProperties.$, CT_ShapeOutlineVisitor.a, this.be);
                    $ret.d = XlsxUtilities.ah(a);
                    return $ret;
                })());
                $ret.style = ObjectModelDrawingPartManager.bm(a);
                return $ret;
            })());
        }
        a7(a) {
            if (a._b3 == null) {
                if (a._fx != null && a._fx.a == null) {
                    return null;
                }
            }
            let b = this.be;
            if (WorksheetChart._f9(a.chartType)) {
                return WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), IGraphicalObjectContent_$type, b._j(ObjectModelChartExPartManager.ba, a), (c) => {
                    let d = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), c);
                    let e = d.c;
                    let f = d.d;
                    let g = this.bq.item(a);
                    let h = ObjectModelDrawingPartManager.bx(f);
                    let i = stringIsNullOrEmpty(a._b8) == false ? a._b8 : h.hasValue ? stringFormat("Chart {0}", h.value) : null;
                    return ((() => {
                        let $ret = new CT_GraphicalObjectFrame();
                        $ret.a = ((() => {
                            let $ret = new CT_GraphicalObject();
                            $ret.a = ((() => {
                                let $ret = new CT_GraphicalObjectData();
                                $ret.b = ((() => {
                                    let $ret = new List$1(Tuple$2.$.specialize(String_$type, Base.$), 0);
                                    $ret.add(Tuple.a(String_$type, Base.$, DrawingMLChart2014.aq, ((() => {
                                        let $ret = new CT_RelId();
                                        $ret.a = f;
                                        return $ret;
                                    })())));
                                    return $ret;
                                })());
                                $ret.c = DrawingMLChart2014.ao.s(b._z);
                                return $ret;
                            })());
                            return $ret;
                        })());
                        $ret.e = a._b7;
                        $ret.d = a._a0;
                        $ret.c = XlsxUtilities.ah(a);
                        $ret.b = h.hasValue ? ((() => {
                            let $ret = new CT_GraphicalObjectFrameNonVisual();
                            $ret.a = ((() => {
                                let $ret = new CT_NonVisualDrawingProps();
                                $ret.c = new ST_DrawingElementId(1, intSToU(h.value));
                                $ret.f = i;
                                return $ret;
                            })());
                            $ret.b = new CT_NonVisualGraphicFrameProperties();
                            return $ret;
                        })()) : null;
                        return $ret;
                    })());
                });
            }
            return WorkItemExtensions.k(Tuple$2.$.specialize(Uri.$, String_$type), IGraphicalObjectContent_$type, b._j(ObjectModelChartPartManager.bb, a), (c) => {
                let d = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), c);
                let e = d.c;
                let f = d.d;
                let g = this.bq.item(a);
                let h = ObjectModelDrawingPartManager.bx(f);
                let i = stringIsNullOrEmpty(a._b8) == false ? a._b8 : h.hasValue ? stringFormat("Chart {0}", h.value) : null;
                return ((() => {
                    let $ret = new CT_GraphicalObjectFrame();
                    $ret.a = ((() => {
                        let $ret = new CT_GraphicalObject();
                        $ret.a = ((() => {
                            let $ret = new CT_GraphicalObjectData();
                            $ret.b = ((() => {
                                let $ret = new List$1(Tuple$2.$.specialize(String_$type, Base.$), 0);
                                $ret.add(Tuple.a(String_$type, Base.$, DrawingMLChart.bf, ((() => {
                                    let $ret = new CT_RelId();
                                    $ret.a = f;
                                    return $ret;
                                })())));
                                return $ret;
                            })());
                            $ret.c = DrawingMLChart.ao.s(b._z);
                            return $ret;
                        })());
                        return $ret;
                    })());
                    $ret.e = a._b7;
                    $ret.d = a._a0;
                    $ret.c = XlsxUtilities.ah(a);
                    $ret.b = h.hasValue ? ((() => {
                        let $ret = new CT_GraphicalObjectFrameNonVisual();
                        $ret.a = ((() => {
                            let $ret = new CT_NonVisualDrawingProps();
                            $ret.c = new ST_DrawingElementId(1, intSToU(h.value));
                            $ret.f = i;
                            return $ret;
                        })());
                        $ret.b = new CT_NonVisualGraphicFrameProperties();
                        return $ret;
                    })()) : null;
                    return $ret;
                })());
            });
        }
        static bx(a) {
            if (stringIsNullOrEmpty(a)) {
                return toNullable(Number_$type, null);
            }
            let b = stringReplace(a, "rId", stringEmpty());
            let c = 0;
            if (((() => { let d = tryParseInt32_1(b, c); c = d.p1; return d.ret; })())) {
                return toNullable(Number_$type, c);
            }
            return toNullable(Number_$type, null);
        }
        bp(a) {
            if (a._b9 == null) {
                return null;
            }
            let b = this.be;
            let c = this.bq.item(a);
            let d = ((() => {
                let $ret = new CT_GraphicalObjectFrame();
                $ret.a = ((() => {
                    let $ret = new CT_GraphicalObject();
                    $ret.a = ((() => {
                        let $ret = new CT_GraphicalObjectData();
                        $ret.c = Drawing2010Slicer.ao.s(b._z);
                        $ret.b = ((() => {
                            let $ret = new List$1(Tuple$2.$.specialize(String_$type, Base.$), 0);
                            $ret.add(Tuple.a(String_$type, Base.$, Drawing2010Slicer.at, ((() => {
                                let $ret = new CT_Slicer();
                                $ret.a = a._b9;
                                return $ret;
                            })())));
                            return $ret;
                        })());
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.e = a._b7;
                $ret.d = a._a0;
                $ret.b = ((() => {
                    let $ret = new CT_GraphicalObjectFrameNonVisual();
                    $ret.a = ((() => {
                        let $ret = new CT_NonVisualDrawingProps();
                        $ret.c = ST_DrawingElementId.a(c.c);
                        $ret.f = a._b9;
                        return $ret;
                    })());
                    $ret.b = new CT_NonVisualGraphicFrameProperties();
                    return $ret;
                })());
                $ret.c = XlsxUtilities.ah(a);
                return $ret;
            })());
            return ExcelUtils.aa(IGraphicalObjectContent_$type, d, a._b4);
        }
        a8(a, b) {
            let c = this.bq.item(b);
            let d = ((() => {
                let $ret = new CT_GroupShape();
                $ret.a = ((() => {
                    let $ret = new CT_GroupShapeNonVisual();
                    $ret.a = ((() => {
                        let $ret = new CT_NonVisualDrawingProps();
                        $ret.c = ST_DrawingElementId.a(c.c);
                        $ret.f = c.a;
                        $ret.d = b.visible == false;
                        return $ret;
                    })());
                    $ret.b = ((() => {
                        let $ret = new CT_NonVisualGroupDrawingShapeProps();
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.b = ((() => {
                    let $ret = new CT_GroupShapeProperties();
                    $ret.c = XlsxUtilities.ag(b);
                    return $ret;
                })());
                return $ret;
            })());
            return WorkItemExtensions.g(IGraphicalObjectContent_$type, Async.c(0, b._shapes$i.count, 1, (e) => {
                let f = a._z(b._shapes$i.item(e));
                return Async.g(f != null, () => WorkItemExtensions.e(IGraphicalObjectContent_$type, this.a9(a, f), (g) => d.d.add(WorkItemExtensions.m(IGraphicalObjectContent_$type, g))));
            }), () => d);
        }
        bk(a) {
            let b = this.s.a(Dictionary$2.$.specialize(ExcelImage.$, String_$type));
            if (b == null) {
                return null;
            }
            let c = this.bq.item(a);
            return ((() => {
                let $ret = new CT_Picture();
                $ret.d = a._b7;
                $ret.c = a._a0;
                $ret.b = ((() => {
                    let $ret = new CT_PictureNonVisual();
                    $ret.a = ((() => {
                        let $ret = new CT_NonVisualDrawingProps();
                        $ret.c = ST_DrawingElementId.a(c.c);
                        $ret.f = c.a;
                        $ret.e = c.a;
                        $ret.d = a.visible == false;
                        return $ret;
                    })());
                    $ret.b = ((() => {
                        let $ret = new CT_NonVisualPictureProperties();
                        $ret.a = ((() => {
                            let $ret = new CT_PictureLocking();
                            $ret.c = true;
                            return $ret;
                        })());
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.a = ((() => {
                    let $ret = new CT_BlipFillProperties();
                    $ret.d = ((() => {
                        let $ret = new CT_Blip();
                        $ret.d = b.item(a._image);
                        return $ret;
                    })());
                    $ret.e = ((() => {
                        let $ret = new CT_StretchInfoProperties();
                        $ret.a = ((() => {
                            let $ret = new CT_RelativeRect();
                            return $ret;
                        })());
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.spPr = ((() => {
                    let $ret = new CT_ShapeProperties();
                    $ret.e = ((() => {
                        let $ret = new CT_PresetGeometry2D();
                        $ret.b = 4;
                        $ret.a = ((() => {
                            let $ret = new CT_GeomGuideList();
                            return $ret;
                        })());
                        return $ret;
                    })());
                    $ret.d = XlsxUtilities.ah(a);
                    return $ret;
                })());
                return $ret;
            })());
        }
        bl(a) {
            let b = null;
            if (typeCast(UnknownShape.$, a) !== null && typeCast(CT_CustomGeometry2D.$, a._en) !== null) {
                b = a._en;
            }
            else if (a._b1.hasValue) {
                b = ((() => {
                    let $ret = new CT_PresetGeometry2D();
                    $ret.b = a._b1.value;
                    $ret.a = ((() => {
                        let $ret = new CT_GeomGuideList();
                        return $ret;
                    })());
                    return $ret;
                })());
            }
            if (b == null) {
                return null;
            }
            let c = this.bq.item(a);
            return ((() => {
                let $ret = new CT_Shape();
                $ret.e = a._b7;
                $ret.f = a._ca;
                $ret.c = a._ax;
                $ret.d = a._a0;
                $ret.a = ((() => {
                    let $ret = new CT_ShapeNonVisual();
                    $ret.a = ((() => {
                        let $ret = new CT_NonVisualDrawingProps();
                        $ret.c = ST_DrawingElementId.a(c.c);
                        $ret.f = c.a;
                        $ret.d = a.visible == false;
                        return $ret;
                    })());
                    $ret.b = ((() => {
                        let $ret = new CT_NonVisualDrawingShapeProps();
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.spPr = ((() => {
                    let $ret = new CT_ShapeProperties();
                    $ret.e = b;
                    $ret.a = a._k._c(ObjectModelExcelDocumentManager.$, IEG_FillProperties_$type, IEG_ShapeFillVisitor.a, this.be);
                    $ret.c = a._n._c(ObjectModelExcelDocumentManager.$, CT_LineProperties.$, CT_ShapeOutlineVisitor.a, this.be);
                    $ret.d = XlsxUtilities.ah(a);
                    return $ret;
                })());
                $ret.style = ObjectModelDrawingPartManager.bm(a);
                $ret.b = this.bo(a);
                return $ret;
            })());
        }
        static bn(a) {
            let b;
            if (a.isAutomatic) {
                b = ((() => {
                    let $ret = new CT_SysColor();
                    $ret.d = 27;
                    $ret.c = ST_HexColorRGB.b(SystemColorsInternal.bb);
                    return $ret;
                })());
            }
            else {
                if (nullableNotEquals(a._themeColorType$i, null)) {
                    b = ((() => {
                        let $ret = new CT_SchemeColor();
                        $ret.c = XlsxUtilities.ai(a._themeColorType$i.value);
                        return $ret;
                    })());
                }
                else if (Color.e(a._color$i, toNullable(Color.$, null))) {
                    let c = a._color$i.value;
                    let d = XlsxUtilities.bd(c);
                    if (nullableNotEquals(d, null)) {
                        b = ((() => {
                            let $ret = new CT_SysColor();
                            $ret.d = d.value;
                            $ret.c = ST_HexColorRGB.b(c);
                            return $ret;
                        })());
                    }
                    else {
                        b = ((() => {
                            let $ret = new CT_SRgbColor();
                            $ret.c = ST_HexColorRGB.b(c);
                            return $ret;
                        })());
                        if (c.l != 255) {
                            b.b.add(((() => {
                                let $ret = new ColorTransform_Alpha();
                                $ret.a = ST_PositiveFixedPercentage.d(new ST_Percentage(1, (c.l / 255) * 100));
                                return $ret;
                            })()));
                        }
                    }
                }
                else {
                    b = ((() => {
                        let $ret = new CT_SRgbColor();
                        $ret.c = ST_HexColorRGB.b(ExcelUtils.g3(a._aj(null, false, true)));
                        return $ret;
                    })());
                }
                if (nullableNotEquals(a._tint$i, null)) {
                    let e = a._tint$i.value;
                    if (e < 0) {
                        b.b.add(((() => {
                            let $ret = new ColorTransform_LumMod();
                            $ret.a = ST_Percentage.b((1 + e) * 100);
                            return $ret;
                        })()));
                    }
                    else {
                        b.b.add(((() => {
                            let $ret = new ColorTransform_LumMod();
                            $ret.a = ST_Percentage.b(e * 100);
                            return $ret;
                        })()));
                        b.b.add(((() => {
                            let $ret = new ColorTransform_LumOff();
                            $ret.a = ST_Percentage.b((1 - e) * 100);
                            return $ret;
                        })()));
                    }
                }
            }
            let f = ((() => {
                let $ret = new CT_SolidFillProperties();
                $ret.a = b;
                return $ret;
            })());
            return f;
        }
        bo(a) {
            let b = this.bq.item(a);
            let c = this.be._by;
            let d = typeCast(WorksheetShapeWithText.$, a);
            if (d == null || d.text == null) {
                return null;
            }
            let e = ((() => {
                let $ret = new CT_TextBody();
                $ret.b = new CT_TextListStyle();
                return $ret;
            })());
            e.a = CT_TextBodyProperties.b(d.text._o);
            e.a.d = toNullable(ST_TextAnchoringType_$type, XlsxUtilities.ak(d.text.verticalAlignment));
            if (d.text._s.hasValue && d.text._s.value == 0) {
                e.a.e = toNullable(Boolean_$type, true);
            }
            for (let f of fromEnum(d.text._paragraphs$i)) {
                let g = ((() => {
                    let $ret = new CT_TextParagraph();
                    $ret.a = ((() => {
                        let $ret = new CT_TextParagraphProperties();
                        $ret.c = toNullable(ST_TextAlignType_$type, XlsxUtilities.aj(f.alignment));
                        return $ret;
                    })());
                    return $ret;
                })());
                for (let h of fromEnum(f._getFormattingRuns(c))) {
                    let i = h;
                    let j = ((() => {
                        let $ret = new CT_RegularTextRun();
                        $ret.a = i.o || new CT_TextCharacterProperties();
                        $ret.b = i.l;
                        return $ret;
                    })());
                    let k = i.h ? i.f(c) : null;
                    if (k != null) {
                        if (k.height > 0) {
                            j.a.r = toNullable(Number_$type, SerializationUtils.p(k.height));
                        }
                        if (nullableEquals(k._bold$i, true)) {
                            j.a.d = ExcelUtils.du(k._bold$i);
                        }
                        if (nullableEquals(k._italic$i, true)) {
                            j.a.i = ExcelUtils.du(k._italic$i);
                        }
                        let l = k.underlineStyle;
                        if (l != -1) {
                            j.a.s = toNullable(ST_TextUnderlineType_$type, XlsxUtilities.al(l));
                        }
                        if (nullableEquals(k._strikeout$i, true)) {
                            j.a.q = toNullable(ST_TextStrikeType_$type, 1);
                        }
                        switch (k.superscriptSubscriptStyle) {
                            case 2:
                                j.a.e = toNullable(ST_Percentage.$, new ST_Percentage(1, -25));
                                break;
                            case 1:
                                j.a.e = toNullable(ST_Percentage.$, new ST_Percentage(1, 30));
                                break;
                        }
                        if (WorkbookColorInfo.l_op_Inequality(k.colorInfo, null)) {
                            j.a.y = ObjectModelDrawingPartManager.bn(k.colorInfo);
                        }
                        if (stringIsNullOrEmpty(k.name) == false) {
                            j.a.c = ((() => {
                                let $ret = new CT_TextFont();
                                $ret.d = k.name;
                                return $ret;
                            })());
                        }
                    }
                    g.c.add(j);
                }
                e.d.add(g);
            }
            return e;
        }
        static bm(a) {
            let b = ((() => {
                let $ret = new CT_ShapeStyle();
                $ret.d = ((() => {
                    let $ret = new CT_StyleMatrixReference();
                    $ret.b = a._a5 ? 1 : 2;
                    $ret.a = ((() => {
                        let $ret = new CT_SchemeColor();
                        $ret.c = 4;
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.c = ((() => {
                    let $ret = new CT_StyleMatrixReference();
                    $ret.b = a._a5 ? 0 : 1;
                    $ret.a = ((() => {
                        let $ret = new CT_SchemeColor();
                        $ret.c = 4;
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.b = ((() => {
                    let $ret = new CT_StyleMatrixReference();
                    $ret.b = 0;
                    $ret.a = ((() => {
                        let $ret = new CT_SchemeColor();
                        $ret.c = 4;
                        return $ret;
                    })());
                    return $ret;
                })());
                $ret.a = ((() => {
                    let $ret = new CT_FontReference();
                    $ret.b = 1;
                    $ret.a = ((() => {
                        let $ret = new CT_SchemeColor();
                        $ret.c = a._a5 ? 1 : 14;
                        return $ret;
                    })());
                    return $ret;
                })());
                return $ret;
            })());
            if (a._a5 == false) {
                b.d.a.b.add(((() => {
                    let $ret = new ColorTransform_Shade();
                    $ret.a = ST_PositiveFixedPercentage.d(new ST_Percentage(1, 50));
                    return $ret;
                })()));
            }
            return b;
        }
        a9(a, b) {
            return WorkItemExtensions.k(IGraphicalObjectContent_$type, IGraphicalObjectContent_$type, this.ba(a, b), (c) => {
                let d = WorkItemExtensions.m(IGraphicalObjectContent_$type, c);
                d = ExcelUtils.aa(IGraphicalObjectContent_$type, d, b._b3);
                let e = this.bp(b);
                if (e != null) {
                    return ((() => {
                        let $ret = new AlternateGraphicalObjectContent();
                        $ret.b = ((() => {
                            let $ret = new List$1(Tuple$2.$.specialize(Array_$type, IGraphicalObjectContent_$type), 0);
                            $ret.add(Tuple.a(Array_$type, IGraphicalObjectContent_$type, [Drawing2010Main.ao], e));
                            return $ret;
                        })());
                        $ret.a = d;
                        return $ret;
                    })());
                }
                return d;
            });
        }
        ba(a, b) {
            let c = typeCast(WorksheetShapeGroup.$, b);
            if (c != null) {
                return this.a8(a, c);
            }
            let d = typeCast(WorksheetImage.$, b);
            if (d != null) {
                return WorkItem.g(IGraphicalObjectContent_$type, this.bk(d));
            }
            let e = typeCast(WorksheetChart.$, b);
            if (e != null) {
                return this.a7(e);
            }
            if (b._bc) {
                return WorkItem.g(IGraphicalObjectContent_$type, this.bj(b));
            }
            return WorkItem.g(IGraphicalObjectContent_$type, this.bl(b));
        }
        static b0(a, b, c, d) {
            let e = a.worksheet;
            let f = e._gd(a.columnIndex);
            let g = e._gh(a.rowIndex, false, true);
            let h = b.x / 100;
            let i = b.y / 100;
            c = ExcelUtils.dm(MathUtilities.f(h * f));
            d = ExcelUtils.dm(MathUtilities.f(i * g));
            return {
                p2: c,
                p3: d
            };
        }
        b1(a) {
            if (this.bi == null) {
                return;
            }
            let b = a.s.a(EG_Anchor.$);
            if (b == null) {
                return;
            }
            if (b.a == null) {
                return;
            }
            this.bi._ay = b.a.a;
            this.bi._az = b.a.b;
        }
        static b2(a) {
            let b;
            let c = DrawingMLMain.la(a, b);
            b = c.p1;
        }
        static b3(a) {
        }
        static b4(a) {
        }
        static b5(a) {
        }
        b6(a) {
            let b = a.s.a(IGraphicalObjectContent_$type);
            let c = a.s.a(Sheet.$);
            let d = a.s.a(EG_Anchor.$);
            if (b == null || c == null || d == null) {
                return;
            }
            this.bu--;
            if (0 < this.bu) {
                return;
            }
            let e = ((() => {
                let $ret = new ObjectModelDrawingPartManager_ShapeLoadContext();
                $ret.a = c;
                $ret.b = this.br;
                return $ret;
            })());
            this.bi = b._accept$2$i(ObjectModelDrawingPartManager_ShapeLoadContext.$, WorksheetShape.$, this.bh, e);
            if (this.bi != null) {
                this.be._b7._bu(this.bi, d);
            }
            else if (this.ab.s) {
                this.ab.aj();
            }
        }
        static b7(a) {
            let b = ObjectModelDrawingPartManager.bf(a);
            let c = b._d;
            if (c == null) {
                return;
            }
            let d = null;
            if (b._an.f != 0) {
                let e = b._an.d();
                d = b._b7._ao(e.uri.toString());
            }
            if (d == null) {
                return;
            }
            a.s.k(d);
        }
        b8(a) {
            let b = this.x(a).b;
            this.az(a, (c) => {
                this.bu++;
                b(c);
            }, false);
            this.ay(a, runOn(this, this.b6));
        }
        bb(a, b) {
            DrawingMLSpreadsheetDrawing.e2(this);
            this.ce(b);
            this.cc(b);
            return WorkItemExtensions.e(IGraphicalObjectContent_$type, this.a9(a, b), (c) => {
                DrawingPartManagerHelpers.dg(this, WorkItemExtensions.m(IGraphicalObjectContent_$type, c));
                this.b9(b);
                this.ad.k();
            });
        }
        b9(a) {
            DrawingMLSpreadsheetDrawing.e3(this, a._ay, a._az);
            this.ad.k();
        }
        ca(a) {
            DrawingMLSpreadsheetDrawing.e4(this, a);
            this.ad.k();
        }
        cb(a) {
            DrawingMLSpreadsheetDrawing.e5(this, ST_Coordinate.b(a));
            this.ad.k();
        }
        cc(a) {
            let b = a._getBoundsInTwips();
            DrawingMLSpreadsheetDrawing.e7(this, new ST_PositiveCoordinate(1, ExcelUtils.dm(b.width)), new ST_PositiveCoordinate(1, ExcelUtils.dm(b.height)));
            this.ad.k();
        }
        cd(a) {
            DrawingMLSpreadsheetDrawing.e8(this);
            this.ci(a.topLeftCornerCell, a._topLeftCornerPosition$i);
            this.ad.k();
        }
        bc(a, b) {
            DrawingMLSpreadsheetDrawing.e9(this);
            this.cd(b);
            this.cc(b);
            return WorkItemExtensions.e(IGraphicalObjectContent_$type, this.a9(a, b), (c) => {
                DrawingPartManagerHelpers.dg(this, WorkItemExtensions.m(IGraphicalObjectContent_$type, c));
                this.b9(b);
                this.ad.k();
            });
        }
        ce(a) {
            let b = a._getBoundsInTwips();
            DrawingMLSpreadsheetDrawing.fa(this, new ST_Coordinate(1, ST_CoordinateUnqualified.a(ExcelUtils.dm(b.x))), new ST_Coordinate(1, ST_CoordinateUnqualified.a(ExcelUtils.dm(b.y))));
            this.ad.k();
        }
        cf(a) {
            DrawingMLSpreadsheetDrawing.fb(this, a);
            this.ad.k();
        }
        cg(a) {
            DrawingMLSpreadsheetDrawing.fc(this, ST_Coordinate.b(a));
            this.ad.k();
        }
        ch(a) {
            DrawingMLSpreadsheetDrawing.fe(this);
            this.ci(a.bottomRightCornerCell, a._bottomRightCornerPosition$i);
            this.ad.k();
        }
        ci(a, b) {
            let c;
            let d;
            let e = ObjectModelDrawingPartManager.b0(a, b, c, d);
            c = e.p2;
            d = e.p3;
            this.ca(a.columnIndex);
            this.cb(c);
            this.cf(a.rowIndex);
            this.cg(d);
        }
        bd(a, b) {
            DrawingMLSpreadsheetDrawing.ff(this, XlsxUtilities.av(b.positioningMode));
            this.cd(b);
            this.ch(b);
            let c = typeCast(WorksheetChart.$, b);
            let d = c != null && WorksheetChart._f9(c.chartType);
            if (d) {
                let e = ChartExUtils.c(c.chartType);
                this.cj(e);
                return WorkItemExtensions.e(IGraphicalObjectContent_$type, this.a9(a, b), (f) => {
                    DrawingPartManagerHelpers.dg(this, WorkItemExtensions.m(IGraphicalObjectContent_$type, f));
                    this.ad.k();
                    this.ck();
                    this.ad.k();
                    this.b9(b);
                    this.ad.k();
                });
            }
            else {
                return WorkItemExtensions.e(IGraphicalObjectContent_$type, this.a9(a, b), (f) => {
                    DrawingPartManagerHelpers.dg(this, WorkItemExtensions.m(IGraphicalObjectContent_$type, f));
                    this.b9(b);
                    this.ad.k();
                });
            }
        }
        cj(a) {
            MarkupCompatibility2006.az(this);
            let b = null;
            let c = null;
            switch (a) {
                case DrawingMLChartEx2015_9_8.aq:
                    b = DrawingMLChartEx2015_9_8.ao;
                    c = "cx1";
                    break;
                case DrawingMLChartEx2015_10_21.aq:
                    b = DrawingMLChartEx2015_10_21.ao;
                    c = "cx2";
                    break;
                case DrawingMLChartEx2016_5_10.aq:
                    b = DrawingMLChartEx2016_5_10.ao;
                    c = "cx4";
                    break;
                default: break;
            }
            MarkupCompatibility2006.a1(this, c);
            this.ad.l(b);
        }
        ck() {
            let a = this.ad;
            MarkupCompatibility2006.a2(this);
            a.p(DrawingMLSpreadsheetDrawing.eg, "xdr");
            a.h("macro", stringEmpty());
            a.h("textlink", stringEmpty());
            a.p(DrawingMLSpreadsheetDrawing.ea, "xdr");
            a.p(DrawingMLSpreadsheetDrawing.dv, "xdr");
            a.h("id", "0");
            a.h("name", stringEmpty());
            a.k();
            a.p(DrawingMLSpreadsheetDrawing.dw, "xdr");
            a.p(DrawingMLMain.iz, "a");
            a.h("noTextEdit", "1");
            a.k();
            a.k();
            a.k();
            a.p(DrawingMLSpreadsheetDrawing.eh, "xdr");
            a.p(DrawingMLMain.hq, "a");
            a.h("prst", "rect");
            a.p(DrawingMLMain.bh, "a");
            a.k();
            a.k();
            a.p(DrawingMLMain.ip, "a");
            a.p(DrawingMLMain.ho, "a");
            a.h("val", "white");
            a.k();
            a.k();
            a.p(DrawingMLMain.fx, "a");
            a.h("w", "1");
            a.p(DrawingMLMain.ip, "a");
            a.p(DrawingMLMain.ho, "a");
            a.h("val", "green");
            a.k();
            a.k();
            a.k();
            a.k();
            a.p(DrawingMLSpreadsheetDrawing.el, "xdr");
            a.p(DrawingMLMain.b0, "a");
            a.h("vertOverflow", "clip");
            a.h("horzOverflow", "clip");
            a.k();
            a.p(DrawingMLMain.f2, "a");
            a.k();
            a.p(DrawingMLMain.he, "a");
            let b = (c) => {
                a.p(DrawingMLMain.hv, "a");
                a.p(DrawingMLMain.h8, "a");
                a.h("lang", "en-US");
                a.h("sz", "1100");
                a.k();
                a.p(DrawingMLMain.jb, "a");
                a.u(c);
                a.k();
                a.k();
            };
            let c = ExcelUtils.ef("LD_Fallback_ChartEx_Line1");
            b(c);
            a.o(DrawingMLMain.b1);
            a.k();
            a.o(DrawingMLMain.b1);
            a.k();
            let d = ExcelUtils.ef("LD_Fallback_ChartEx_Line2");
            b(d);
            a.k();
            a.k();
            a.k();
            a.k();
        }
        get be() {
            return ObjectModelDrawingPartManager.bf(this);
        }
        static bf(a) {
            return a.d;
        }
    }
    ObjectModelDrawingPartManager.$t = /*@__PURE__*/ markType(ObjectModelDrawingPartManager, 'ObjectModelDrawingPartManager', DrawingPartManager.$);
    ObjectModelDrawingPartManager.bg = /*@__PURE__*/ new ObjectModelDrawingPartManager();
    return ObjectModelDrawingPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelDrawingPartManager_ShapeLoader = /*@__PURE__*/ (() => {
    class ObjectModelDrawingPartManager_ShapeLoader extends Base {
        constructor(a) {
            super();
            this.d = null;
            this.b = null;
            this.c = null;
            this.c = new ObjectModelDrawingPartManager_ShapeLoader_ShapeFillCreator(this);
            this.d = a.be._b7;
            this.b = a;
        }
        _visitAlternateGraphicalObjectContent$i(a, b) {
            return null;
        }
        _visitCT_Connector$i(a, b) {
            let c;
            if (a.spPr != null && a.spPr.e != null) {
                c = a.spPr.e._accept$2$i(Boolean_$type, WorksheetShape.$, ObjectModelDrawingPartManager_ShapeLoader_ShapeTypeCreator.a, null);
            }
            else {
                c = new UnknownShape(1);
            }
            c._b3 = a;
            c._b7 = a.c;
            c._a0 = a.b;
            c._b8 = ObjectModelDrawingPartManager_ShapeLoader.i(a.a);
            c._cn = ST_DrawingElementId.h(ObjectModelDrawingPartManager_ShapeLoader.h(a.a).getValueOrDefault());
            c.visible = (ObjectModelDrawingPartManager_ShapeLoader.g(a.a) == false);
            c._bc = true;
            this.j(c, a.style, b);
            if (a.spPr != null) {
                if (a.spPr.a != null) {
                    c.fill = a.spPr.a._accept$2$i(Workbook.$, ShapeFill.$, this.c, b.a.workbook);
                }
                if (a.spPr.c != null) {
                    c.outline = this.e(c.outline, a.spPr.c, b);
                }
                this.k(c, a.spPr.d);
            }
            b.b.add(c);
            return c;
        }
        _visitCT_GraphicalObjectFrame$i(a, b) {
            if (a.a == null || a.a.a == null) {
                return null;
            }
            let c = false;
            let d = Enumerable.ag(Tuple$2.$.specialize(String_$type, Base.$), a.a.a.b, (e) => e.c == DrawingMLChart.bf);
            if (d == null) {
                d = Enumerable.ag(Tuple$2.$.specialize(String_$type, Base.$), a.a.a.b, (e) => e.c == DrawingMLChart2014.aq);
                c = d != null;
            }
            if (d != null) {
                let e = typeCast(CT_RelId.$, d.d);
                if (e == null || e.a == null) {
                    return null;
                }
                let f = null;
                let g = null;
                let h = this.b.be._d;
                let i = h.getRelationships();
                let j = c ? ChartExPartManager.a6 : ChartPartManager.a6;
                let k = c ? ChartExPartManager.a7 : ChartPartManager.a7;
                if (c) {
                    let l = false;
                    for (let m of fromEnum(i)) {
                        if (m.relationshipType == k || m.relationshipType == j) {
                            l = true;
                            break;
                        }
                    }
                    if (l == false) {
                        j = ChartPartManager.a6;
                        k = ChartPartManager.a7;
                    }
                }
                for (let n of fromEnum(i)) {
                    if (n.relationshipType != k && n.relationshipType != j) {
                        continue;
                    }
                    let o = n.id;
                    if (o != e.a) {
                        continue;
                    }
                    if (this.b.be._ca == null) {
                        this.b.be._ca = new HashSet$1(String_$type, 0);
                    }
                    let p = stringFormat("{0}/{1}", h.uri.toString(), o);
                    if (this.b.be._ca.add_1(p) == false) {
                        continue;
                    }
                    let q = SerializationUtils.t(n.targetUri);
                    let r = this.b.be._b4();
                    if (r == null) {
                    }
                    else {
                        if (((() => { let s = r.c.tryGetValue(q, f); f = s.p1; return s.ret; })()) == false) {
                            let s = r.d.tryGetValue(q, g);
                            g = s.p1;
                        }
                    }
                    if (f != null || g != null) {
                        break;
                    }
                }
                if (f == null && g == null) {
                }
                let t = ((() => {
                    let $ret = new WorksheetChart(0);
                    $ret._b3 = a;
                    $ret._fx = f != null ? f.a : g != null ? g.a : null;
                    $ret._a0 = a.d;
                    $ret._b7 = a.e;
                    $ret._b8 = ObjectModelDrawingPartManager_ShapeLoader.i(a.b);
                    $ret._cn = ST_DrawingElementId.h(ObjectModelDrawingPartManager_ShapeLoader.h(a.b).getValueOrDefault());
                    $ret.visible = (ObjectModelDrawingPartManager_ShapeLoader.g(a.b) == false);
                    return $ret;
                })());
                if (f != null) {
                    WorksheetChartExtensions.aq(t, f, b.a, this.d);
                }
                else if (g != null) {
                    WorksheetChartExtensions.ar(t, g, b.a, this.d);
                }
                this.k(t, a.c);
                b.b.add(t);
                return t;
            }
            let u = Enumerable.ag(Tuple$2.$.specialize(String_$type, Base.$), a.a.a.b, (v) => v.c == Drawing2010Slicer.at);
            if (u != null) {
                let v = typeCast(CT_Slicer.$, u.d);
                if (v == null || v.a == null) {
                    return null;
                }
                let w = ((() => {
                    let $ret = new RectangleShape();
                    $ret._b9 = v.a;
                    $ret._b4 = a;
                    $ret._cn = ST_DrawingElementId.h(ObjectModelDrawingPartManager_ShapeLoader.h(a.b).getValueOrDefault());
                    $ret.fill = ShapeFill._fromColor$i(ColorsInternal.e);
                    $ret.outline = ShapeOutline._fromColor$i(ColorsInternal.d);
                    return $ret;
                })());
                w.text = new FormattedText("This shape represents a slicer. Slicers can be used in at least Excel 2010.\r\n\r\nIf the shape was modified in an earlier version of Excel, or if the workbook was saved in Excel 2003 or earlier, the slicer cannot be used.");
                this.k(w, a.c);
                b.b.add(w);
                return w;
            }
            return null;
        }
        _visitCT_GroupShape$i(a, b) {
            let c = ((() => {
                let $ret = new WorksheetShapeGroup(true);
                $ret._b3 = a;
                $ret._cn = ST_DrawingElementId.h(ObjectModelDrawingPartManager_ShapeLoader.h(a.a).getValueOrDefault());
                $ret._b8 = ObjectModelDrawingPartManager_ShapeLoader.i(a.a);
                $ret.visible = (ObjectModelDrawingPartManager_ShapeLoader.g(a.a) == false);
                return $ret;
            })());
            if (a.b != null) {
                if (a.b.a != null) {
                    c.fill = a.b.a._accept$2$i(Workbook.$, ShapeFill.$, this.c, b.a.workbook);
                }
                this.l(c, a.b.c);
            }
            let d = ((() => {
                let $ret = new ObjectModelDrawingPartManager_ShapeLoadContext();
                $ret.a = b.a;
                $ret.b = c._shapes$i;
                return $ret;
            })());
            a.d.q((e) => e._accept$2$i(ObjectModelDrawingPartManager_ShapeLoadContext.$, WorksheetShape.$, this, d));
            b.b.add(c);
            return c;
        }
        _visitCT_Picture$i(a, b) {
            let c = null;
            if (a.a != null) {
                let d = a.a.d;
                if (d != null) {
                    let e = this.b.be;
                    if (d.e != null) {
                        let f = typeCast(Uri.$, e._au(d.e));
                        if (f != null) {
                            ExcelUtils.e(e._b7._b, f);
                        }
                    }
                    if (c == null && d.d != null) {
                        c = typeCast(ImageData.$, e._au(d.d));
                    }
                    d.d = null;
                    d.e = null;
                }
            }
            if (c == null) {
                return null;
            }
            let g = ((() => {
                let $ret = new WorksheetImage(false);
                $ret._b3 = a;
                $ret._a0 = a.c;
                $ret._b7 = a.d;
                $ret._b8 = ObjectModelDrawingPartManager_ShapeLoader.i(a.b);
                $ret._cn = ST_DrawingElementId.h(ObjectModelDrawingPartManager_ShapeLoader.h(a.b).getValueOrDefault());
                $ret.visible = (ObjectModelDrawingPartManager_ShapeLoader.g(a.b) == false);
                return $ret;
            })());
            let h = XlsxUtilities.v(c);
            g._image = h.b;
            g.preferredFormat = h.d;
            if (a.spPr != null) {
                if (a.spPr.a != null) {
                    g.fill = a.spPr.a._accept$2$i(Workbook.$, ShapeFill.$, this.c, b.a.workbook);
                }
                if (a.spPr.c != null) {
                    g.outline = this.e(g.outline, a.spPr.c, b);
                }
                this.k(g, a.spPr.d);
            }
            b.b.add(g);
            return g;
        }
        _visitCT_Shape$i(a, b) {
            let c;
            if (a.spPr != null && a.spPr.e != null) {
                c = a.spPr.e._accept$2$i(Boolean_$type, WorksheetShape.$, ObjectModelDrawingPartManager_ShapeLoader_ShapeTypeCreator.a, null);
            }
            else {
                c = new UnknownShape(1);
            }
            c._b3 = a;
            c._b7 = a.e;
            c._ca = a.f;
            c._ax = a.c;
            c._a0 = a.d;
            c._b8 = ObjectModelDrawingPartManager_ShapeLoader.i(a.a);
            c._cn = ST_DrawingElementId.h(ObjectModelDrawingPartManager_ShapeLoader.h(a.a).getValueOrDefault());
            c.visible = (ObjectModelDrawingPartManager_ShapeLoader.g(a.a) == false);
            let d = typeCast(WorksheetShapeWithText.$, c);
            if (d != null) {
                d.text = this.a(a.b, this.f(a));
            }
            else {
            }
            c._bc = false;
            this.j(c, a.style, b);
            if (a.spPr != null) {
                if (a.spPr.a != null) {
                    c.fill = a.spPr.a._accept$2$i(Workbook.$, ShapeFill.$, this.c, b.a.workbook);
                }
                if (a.spPr.c != null) {
                    c.outline = this.e(c.outline, a.spPr.c, b);
                }
                this.k(c, a.spPr.d);
            }
            b.b.add(c);
            return c;
        }
        j(a, b, c) {
            if (b == null) {
                return;
            }
            if (b.c != null) {
                if (b.c.a != null && b.c.b != 0 && b.c.b != 1000) {
                    a.fill = new ShapeFillSolid(XlsxUtilities.ab(b.c.a, c.a.workbook));
                }
            }
            if (b.d != null) {
                if (b.d.a != null) {
                    a.outline = new ShapeOutlineSolid(XlsxUtilities.ab(b.d.a, c.a.workbook));
                }
            }
        }
        k(a, b) {
            if (b == null) {
                return;
            }
            a._b6 = b.d().n();
            a.flippedHorizontally = b.g();
            a.flippedVertically = b.h();
            this.d._bv(a, b);
        }
        l(a, b) {
            if (b == null) {
                return;
            }
            a._b6 = b.d().n();
            a.flippedHorizontally = b.g();
            a.flippedVertically = b.h();
            this.d._bv(a, b);
        }
        a(a, b) {
            if (a == null || a.d.count == 0) {
                return null;
            }
            let c = this.b.be;
            let d = c._by;
            let e = new ObjectModelDrawingPartManager_ShapeLoader_RunCreator(this.b, b);
            let f = ((() => {
                let $ret = new FormattedText();
                $ret._o = a.a;
                return $ret;
            })());
            if (a.a != null) {
                if (nullableNotEquals(a.a.d, null)) {
                    f.verticalAlignment = XlsxUtilities.aa(a.a.d.value);
                }
            }
            let g = a.b != null ? a.b.b : null;
            let h = g != null ? typeCast(CT_TextCharacterProperties.$, g.a) : null;
            if (g != null && g.c.hasValue) {
                f._s = toNullable(HorizontalTextAlignment_$type, XlsxUtilities.m(g.c.value));
            }
            let i = null;
            if (h != null) {
                let j = this.b.s.a(IWorkbookFontDefaultsResolver_$type);
                if (j == null) {
                    i = new DefRprFontResolver(h, d);
                    this.b.s.k(i);
                }
            }
            for (let k of fromEnum(a.d)) {
                let l = f._paragraphs$i._add1(stringEmpty());
                if (k.a != null) {
                    if (nullableNotEquals(k.a.c, null)) {
                        l.alignment = XlsxUtilities.m(k.a.c.value);
                    }
                }
                k.c.q((m) => m._accept$2$i(FormattedTextParagraph.$, FormattedTextRun.$, e, l));
            }
            if (i != null) {
                this.b.s.l(i);
            }
            return f;
        }
        static g(a) {
            if (a == null) {
                return false;
            }
            if (a.a == null) {
                return false;
            }
            return a.a.d;
        }
        static h(a) {
            if (a == null) {
                return toNullable(ST_DrawingElementId.$, null);
            }
            if (a.a == null) {
                return toNullable(ST_DrawingElementId.$, null);
            }
            return toNullable(ST_DrawingElementId.$, a.a.c);
        }
        static i(a) {
            if (a == null) {
                return null;
            }
            if (a.a == null) {
                return null;
            }
            return a.a.f;
        }
        f(a) {
            let b = a.style;
            if (b == null) {
                return null;
            }
            let c = b.a;
            if (b == null) {
                return null;
            }
            return XlsxUtilities.ab(c.a, this.b.be._by);
        }
        e(a, b, c) {
            if (b != null) {
                if (b.i != null) {
                    a = b.i._accept$2$i(Workbook.$, ShapeOutline.$, ObjectModelDrawingPartManager_ShapeLoader_ShapeOutlineCreator.a, c.a.workbook);
                }
                if (a == null) {
                    return null;
                }
                if (ST_LineWidth.j(b.h, toNullable(ST_LineWidth.$, null))) {
                    a._d = ST_LineWidth.m(b.h.value);
                }
                a._e = b.a;
                a._f = b.b;
            }
            return a;
        }
    }
    ObjectModelDrawingPartManager_ShapeLoader.$t = /*@__PURE__*/ markType(ObjectModelDrawingPartManager_ShapeLoader, 'ObjectModelDrawingPartManager_ShapeLoader', Base.$, [/*@__PURE__*/ IGraphicalObjectContentVisitor$2_$type.specialize(ObjectModelDrawingPartManager_ShapeLoadContext.$, WorksheetShape.$)]);
    return ObjectModelDrawingPartManager_ShapeLoader;
})();
/**
 * @hidden
 */
export let ObjectModelDrawingPartManager_ShapeLoader_RunCreator = /*@__PURE__*/ (() => {
    class ObjectModelDrawingPartManager_ShapeLoader_RunCreator extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.c = null;
            this.b = null;
            this.a = a;
            this.c = b;
            this.b = this.a.be._by;
        }
        _visitCT_RegularTextRun$i(a, b) {
            let c = ((() => {
                let $ret = new FormattedTextRun(b, b.unformattedString.length);
                $ret.o = a.a;
                return $ret;
            })());
            b._u(c);
            b.unformattedString += a.b;
            let d = this.a.s.a(IWorkbookFontDefaultsResolver_$type);
            let e = c.f(this.b);
            if (WorkbookColorInfo.l_op_Inequality(this.c, null)) {
                e.colorInfo = this.c;
            }
            let f = e.d._ak(d);
            let g = a.a;
            if (g != null) {
                if (nullableNotEquals(g.r, null)) {
                    f.height = truncate(Math.ceil((g.r.value / 100) * 20));
                }
                if (nullableNotEquals(g.d, null)) {
                    f._bold$i = XlsxUtilities.a8(g.d.value);
                }
                if (ST_Percentage.h(g.e, toNullable(ST_Percentage.$, null))) {
                    if (ST_Percentage.l(g.e.value) >= 30) {
                        f.superscriptSubscriptStyle = 1;
                    }
                    else if (ST_Percentage.l(g.e.value) <= -25) {
                        f.superscriptSubscriptStyle = 2;
                    }
                    else {
                        f.superscriptSubscriptStyle = 0;
                    }
                }
                if (g.y != null) {
                    f.colorInfo = XlsxUtilities.ac(g.y, this.b);
                }
                if (nullableNotEquals(g.i, null)) {
                    f._italic$i = XlsxUtilities.a8(g.i.value);
                }
                if (nullableNotEquals(g.s, null)) {
                    f.underlineStyle = XlsxUtilities.i(g.s.value);
                }
                if (nullableNotEquals(g.q, null)) {
                    f._strikeout$i = toNullable(Boolean_$type, g.q.value == 0 ? false : true);
                }
                if (g.c != null && g.c.d != null) {
                    f.name = g.c.d;
                }
            }
            e.setFontFormatting(f);
            return c;
        }
    }
    ObjectModelDrawingPartManager_ShapeLoader_RunCreator.$t = /*@__PURE__*/ markType(ObjectModelDrawingPartManager_ShapeLoader_RunCreator, 'ObjectModelDrawingPartManager_ShapeLoader_RunCreator', Base.$, [/*@__PURE__*/ IEG_TextRunVisitor$2_$type.specialize(FormattedTextParagraph.$, FormattedTextRun.$)]);
    return ObjectModelDrawingPartManager_ShapeLoader_RunCreator;
})();
/**
 * @hidden
 */
export let ObjectModelDrawingPartManager_ShapeLoader_ShapeFillCreator = /*@__PURE__*/ (() => {
    class ObjectModelDrawingPartManager_ShapeLoader_ShapeFillCreator extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        _visitCT_BlipFillProperties$i(a, b) {
            if (a.d != null) {
                if (a.d.d != null) {
                    let c = typeCast(ImageData.$, this.a.d._ai._au(a.d.d));
                    if (c != null) {
                        return new ShapeFillImage(c);
                    }
                    else {
                    }
                }
            }
            return null;
        }
        _visitCT_GroupFillProperties$i(a, b) {
            return null;
        }
        _visitCT_NoFillProperties$i(a, b) {
            return null;
        }
        _visitCT_SolidFillProperties$i(a, b) {
            if (a.a == null) {
                return null;
            }
            return new ShapeFillSolid(XlsxUtilities.ab(a.a, b));
        }
    }
    ObjectModelDrawingPartManager_ShapeLoader_ShapeFillCreator.$t = /*@__PURE__*/ markType(ObjectModelDrawingPartManager_ShapeLoader_ShapeFillCreator, 'ObjectModelDrawingPartManager_ShapeLoader_ShapeFillCreator', Base.$, [/*@__PURE__*/ IEG_FillPropertiesVisitor$2_$type.specialize(Workbook.$, ShapeFill.$)]);
    return ObjectModelDrawingPartManager_ShapeLoader_ShapeFillCreator;
})();
/**
 * @hidden
 */
export let IEG_ShapeFillVisitor = /*@__PURE__*/ (() => {
    class IEG_ShapeFillVisitor extends Base {
        _visitImage$i(a, b) {
            let c = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), b._bz(a._f));
            return ((() => {
                let $ret = new CT_BlipFillProperties();
                $ret.d = ((() => {
                    let $ret = new CT_Blip();
                    $ret.d = c.d;
                    return $ret;
                })());
                return $ret;
            })());
        }
        _visitNoFill$i(a, b) {
            return new CT_NoFillProperties();
        }
        _visitSolid$i(a, b) {
            return ObjectModelDrawingPartManager.bn(a.colorInfo);
        }
    }
    IEG_ShapeFillVisitor.$t = /*@__PURE__*/ markType(IEG_ShapeFillVisitor, 'IEG_ShapeFillVisitor', Base.$, [/*@__PURE__*/ IShapeFillVisitor$2_$type.specialize(ObjectModelExcelDocumentManager.$, IEG_FillProperties_$type)]);
    IEG_ShapeFillVisitor.a = /*@__PURE__*/ new IEG_ShapeFillVisitor();
    return IEG_ShapeFillVisitor;
})();
/**
 * @hidden
 */
export let CT_ShapeOutlineVisitor = /*@__PURE__*/ (() => {
    class CT_ShapeOutlineVisitor extends Base {
        static b(a, b) {
            if (a._e != null) {
                b.a = a._e;
            }
            if (a._f != null) {
                b.b = a._f;
            }
        }
        visitNoOutline(outline, argument) {
            return this._visitNoOutline$i.apply(this, arguments);
        }
        _visitNoOutline$i(a, b) {
            let c = new CT_LineProperties();
            c.i = new CT_NoFillProperties();
            CT_ShapeOutlineVisitor.b(a, c);
            return c;
        }
        visitSolid(outline, argument) {
            return this._visitSolid$i.apply(this, arguments);
        }
        _visitSolid$i(a, b) {
            let c = new CT_LineProperties();
            c.i = ObjectModelDrawingPartManager.bn(a.colorInfo);
            if (a._d != 0) {
                c.h = toNullable(ST_LineWidth.$, new ST_LineWidth(1, ST_Coordinate32Unqualified.a(a._d)));
            }
            CT_ShapeOutlineVisitor.b(a, c);
            return c;
        }
    }
    CT_ShapeOutlineVisitor.$t = /*@__PURE__*/ markType(CT_ShapeOutlineVisitor, 'CT_ShapeOutlineVisitor', Base.$, [/*@__PURE__*/ IShapeOutlineVisitor$2_$type.specialize(ObjectModelExcelDocumentManager.$, CT_LineProperties.$)]);
    CT_ShapeOutlineVisitor.a = /*@__PURE__*/ new CT_ShapeOutlineVisitor();
    return CT_ShapeOutlineVisitor;
})();
/**
 * @hidden
 */
export let DefRprFontResolver = /*@__PURE__*/ (() => {
    class DefRprFontResolver extends Base {
        constructor(a, b) {
            super();
            this.a = null;
            this.d = null;
            this.b = null;
            this.d = a;
            this.a = b;
        }
        resolveDefaults(a) {
            if (a == null) {
                return;
            }
            if (this.b == null) {
                this.b = DefRprFontResolver.c(this.d, this.a);
            }
            if (nullableEquals(a._bold$i, null)) {
                a._bold$i = this.b._bold$i;
            }
            if (WorkbookColorInfo.l_op_Equality(a.colorInfo, null)) {
                a.colorInfo = this.b.colorInfo;
            }
            if (a.height < 0) {
                a.height = this.b.height;
            }
            if (nullableEquals(a._italic$i, null)) {
                a._italic$i = this.b._italic$i;
            }
            if (stringIsNullOrEmpty(a.name)) {
                a.name = this.b.name;
            }
            if (nullableEquals(a._strikeout$i, null)) {
                a._strikeout$i = this.b._strikeout$i;
            }
            if (a.superscriptSubscriptStyle == -1) {
                a.superscriptSubscriptStyle = this.b.superscriptSubscriptStyle;
            }
            if (a.underlineStyle == -1) {
                a.underlineStyle = this.b.underlineStyle;
            }
            UltimateFontDefaultsResolver.a.resolveDefaults(a);
        }
        static c(a, b) {
            if (a == null) {
                return null;
            }
            let c = new WorkbookFontData(0, b);
            c._bold$i = XlsxUtilities.a9(a.d);
            c._italic$i = XlsxUtilities.a9(a.i);
            c.underlineStyle = a.s.hasValue == false ? -1 : XlsxUtilities.i(a.s.value);
            if (a.q.hasValue == false) {
                c._strikeout$i = toNullable(Boolean_$type, null);
            }
            else {
                c._strikeout$i = toNullable(Boolean_$type, a.q.value == 0 ? false : true);
            }
            c.name = DMLChartUtils.a3(a);
            if (a.y != null) {
                c.colorInfo = XlsxUtilities.ac(a.y, b);
            }
            if (a.r.hasValue) {
                c.height = SerializationUtils.o(a.r.value);
            }
            return c;
        }
    }
    DefRprFontResolver.$t = /*@__PURE__*/ markType(DefRprFontResolver, 'DefRprFontResolver', Base.$, [IWorkbookFontDefaultsResolver_$type]);
    return DefRprFontResolver;
})();
/**
 * @hidden
 */
export let ObjectModelExtendedPropertiesPartManager = /*@__PURE__*/ (() => {
    class ObjectModelExtendedPropertiesPartManager extends ExtendedPropertiesPartManager {
        constructor() {
            super();
            this.az(OfficeDocumentExtendedProperties.ar, ObjectModelExtendedPropertiesPartManager.bi);
            this.az(OfficeDocumentExtendedProperties.aq, ObjectModelExtendedPropertiesPartManager.bh);
            this.az(OfficeDocumentExtendedProperties.au, ObjectModelExtendedPropertiesPartManager.bj);
            this.az(OfficeDocumentExtendedProperties.av, ObjectModelExtendedPropertiesPartManager.bk);
            this.az(OfficeDocumentExtendedProperties.aw, ObjectModelExtendedPropertiesPartManager.bl);
            this.az(OfficeDocumentExtendedProperties.az, ObjectModelExtendedPropertiesPartManager.bm);
            this.az(OfficeDocumentExtendedProperties.a1, ObjectModelExtendedPropertiesPartManager.bn);
            this.az(OfficeDocumentExtendedProperties.a2, ObjectModelExtendedPropertiesPartManager.bo);
            this.az(OfficeDocumentExtendedProperties.ba, ObjectModelExtendedPropertiesPartManager.bp);
            this.az(OfficeDocumentExtendedProperties.bb, ObjectModelExtendedPropertiesPartManager.bq);
            this.az(OfficeDocumentExtendedProperties.bc, ObjectModelExtendedPropertiesPartManager.br);
            this.az(OfficeDocumentExtendedProperties.bf, ObjectModelExtendedPropertiesPartManager.bs);
            OfficeDocumentDocPropsVTypes.cc(this);
            this.ay(OfficeDocumentDocPropsVTypes.bb, ObjectModelExtendedPropertiesPartManager.bt);
        }
        u(a) {
            let b = this.a7._by;
            OfficeDocumentExtendedProperties.cr(this);
            OfficeDocumentExtendedProperties.b9(this, "Microsoft Excel");
            this.ad.k();
            OfficeDocumentExtendedProperties.ce(this, 0);
            this.ad.k();
            OfficeDocumentExtendedProperties.cs(this, false);
            this.ad.k();
            let c = this.a7._b9._a1;
            let d = 0;
            let e = 0;
            for (let f = 0; f < c.count; f++) {
                let g = c.item(f);
                if (g.type == 0) {
                    d++;
                }
                else if (g.type == 1) {
                    e++;
                }
            }
            let h = new List$1(Base.$, 0);
            if (d > 0) {
                h.add1("Worksheets");
                h.add1(d);
            }
            ;
            if (e > 0) {
                h.add1("Charts");
                h.add1(e);
            }
            ;
            if (b._namedReferences$i.count != 0) {
                h.add1("Named Ranges");
                h.add1(b._namedReferences$i.count);
            }
            let i = new CT_Vector(1, h, 0);
            OfficeDocumentExtendedProperties.cf(this);
            OfficeDocumentDocPropsVTypes.cf(this, i);
            this.ad.k();
            i = new CT_Vector(0, c.count, 11);
            for (let j = 0; j < i.a.length; j++) {
                i.a[j] = c.item(j).name;
            }
            OfficeDocumentExtendedProperties.cv(this);
            OfficeDocumentDocPropsVTypes.cf(this, i);
            this.ad.k();
            if (stringIsNullOrWhiteSpace(b.documentProperties.manager) == false) {
                OfficeDocumentExtendedProperties.cl(this, b.documentProperties.manager.trim());
                this.ad.k();
            }
            if (stringIsNullOrEmpty(b.documentProperties.company) == false) {
                OfficeDocumentExtendedProperties.cd(this, b.documentProperties.company);
                this.ad.k();
            }
            OfficeDocumentExtendedProperties.ck(this, false);
            this.ad.k();
            OfficeDocumentExtendedProperties.ct(this, false);
            this.ad.k();
            OfficeDocumentExtendedProperties.ci(this, false);
            this.ad.k();
            OfficeDocumentExtendedProperties.ca(this, "12.0000");
            this.ad.k();
            this.ad.k();
            return null;
        }
        static bi(a) {
            let b;
            let c = OfficeDocumentExtendedProperties.bj(a, b);
            b = c.p1;
        }
        static bh(a) {
            let b;
            let c = OfficeDocumentExtendedProperties.bi(a, b);
            b = c.p1;
        }
        static bj(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = OfficeDocumentExtendedProperties.bm(a, c);
            c = d.p1;
            b.company = c;
        }
        static bk(a) {
            let b;
            let c = OfficeDocumentExtendedProperties.bn(a, b);
            b = c.p1;
        }
        static bl(a) {
        }
        static bm(a) {
            let b;
            let c = OfficeDocumentExtendedProperties.br(a, b);
            b = c.p1;
        }
        static bn(a) {
            let b;
            let c = OfficeDocumentExtendedProperties.bt(a, b);
            b = c.p1;
        }
        static bo(a) {
            let b = a.s.a(DocumentProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = OfficeDocumentExtendedProperties.bu(a, c);
            c = d.p1;
            b.manager = c;
        }
        static bp(a) {
            let b = ObjectModelExtendedPropertiesPartManager.a8(a);
            a.s.k(b._by.documentProperties);
        }
        static bq(a) {
            let b;
            let c = OfficeDocumentExtendedProperties.b1(a, b);
            b = c.p1;
        }
        static br(a) {
            let b;
            let c = OfficeDocumentExtendedProperties.b2(a, b);
            b = c.p1;
        }
        static bs(a) {
        }
        static bt(a) {
            let b = a.s.a(CT_Vector.$);
            if (b == null) {
                return;
            }
        }
        get a7() {
            return ObjectModelExtendedPropertiesPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelExtendedPropertiesPartManager.$t = /*@__PURE__*/ markType(ObjectModelExtendedPropertiesPartManager, 'ObjectModelExtendedPropertiesPartManager', ExtendedPropertiesPartManager.$);
    ObjectModelExtendedPropertiesPartManager.a9 = /*@__PURE__*/ new ObjectModelExtendedPropertiesPartManager();
    return ObjectModelExtendedPropertiesPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelExternalLinkPartManager = /*@__PURE__*/ (() => {
    class ObjectModelExternalLinkPartManager extends ExternalLinkPartManager {
        constructor() {
            super();
            this.ba = 0;
            this.az(SpreadsheetMLMain.d5, ObjectModelExternalLinkPartManager.bb);
            this.az(SpreadsheetMLMain.f5, (a) => ObjectModelExternalLinkPartManager.bc(a));
            this.az(SpreadsheetMLMain.f6, ObjectModelExternalLinkPartManager.bd);
            this.az(SpreadsheetMLMain.f7, ObjectModelExternalLinkPartManager.be);
            this.az(SpreadsheetMLMain.hm, ObjectModelExternalLinkPartManager.bf);
            this.az(SpreadsheetMLMain.hn, ObjectModelExternalLinkPartManager.bg);
            this.az(SpreadsheetMLMain.lp, (a) => ObjectModelExternalLinkPartManager.bh(a, false));
            this.az(SpreadsheetML2009Main.b6, (a) => ObjectModelExternalLinkPartManager.bh(a, true));
            this.az(SpreadsheetMLMain.lq, ObjectModelExternalLinkPartManager.bi);
            this.az(SpreadsheetMLMain.lr, ObjectModelExternalLinkPartManager.bj);
            this.az(SpreadsheetMLMain.n5, ObjectModelExternalLinkPartManager.bk);
            this.az(SpreadsheetMLMain.oq, ObjectModelExternalLinkPartManager.bl);
            this.az(SpreadsheetMLMain.or, ObjectModelExternalLinkPartManager.bm);
            this.az(SpreadsheetMLMain.ou, ObjectModelExternalLinkPartManager.bn);
            this.az(SpreadsheetMLMain.ov, ObjectModelExternalLinkPartManager.bo);
            this.az(SpreadsheetMLMain.r4, ObjectModelExternalLinkPartManager.bp);
            ObjectModelCommonPartHelpers.aj(this);
        }
        u(a) {
            SpreadsheetMLMain.abe(this);
            let b = typeCast(ExternalWorkbookReference.$, a);
            if (b != null) {
                this.br(b);
            }
            else {
                let c = typeCast(OleLinkWorkbookReference.$, a);
                if (c != null) {
                    this.bs(c);
                }
                else {
                    let d = typeCast(DdeLinkWorkbookReference.$, a);
                    if (d != null) {
                        this.bq(d);
                    }
                    else {
                    }
                }
            }
            this.ad.k();
            return null;
        }
        static bb(a) {
            let b = a.s.a(WorksheetReferenceExternalRowValues.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f = SpreadsheetMLMain.t0(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = a;
            let h;
            if (((() => { let i = ExcelUtils.bl(c, 2, CultureInfo.invariantCulture, g.ba, h); g.ba = i.p3; h = i.p4; return i.ret; })()) == false) {
            }
            a.s.k(enumGetBox(ST_CellType_$type, d));
        }
        static bc(a) {
            let b = a.s.a(DdeLinkWorkbookReference.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = SpreadsheetMLMain.u9(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            b.ag.add(new DdeItem(c, d, e, f));
        }
        static bd(a) {
        }
        static be(a) {
            let b;
            let c;
            let d = SpreadsheetMLMain.vb(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = ObjectModelExternalLinkPartManager.a8(a);
            let f = e._by._bc(b, c);
            e._b7._i.add(f);
            a.an = f;
            a.s.k(f);
        }
        static bf(a) {
            let b;
            let c = SpreadsheetMLMain.vs(a, b);
            b = c.p1;
            let d = ObjectModelExternalLinkPartManager.a8(a);
            let e = typeCast(Uri.$, d._au(b));
            if (e == null) {
                return;
            }
            let f = ExcelUtils.ez(e).toString();
            f = ExcelUtils.ek(f);
            let g = d._by._bf(f);
            d._b7._i.add(g);
            let h = typeCast(ExternalWorkbookReference.$, g);
            if (h == null) {
                return;
            }
            a.an = h;
            a.s.k(h);
        }
        static bg(a) {
        }
        static bk(a) {
            let b = a.s.a(WorksheetReferenceExternal.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.xn(a, c);
            c = d.p1;
            a.s.k(b.t(c));
        }
        static bh(a, b) {
            let c = a.s.a(OleLinkWorkbookReference.$);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f;
            let g;
            if (b) {
                let h = SpreadsheetML2009Main.c4(a, d, e, f, g);
                d = h.p1;
                e = h.p2;
                f = h.p3;
                g = h.p4;
            }
            else {
                let i = SpreadsheetMLMain.wz(a, d, e, f, g);
                d = i.p1;
                e = i.p2;
                f = i.p3;
                g = i.p4;
            }
            c.ag.add(new OleItem(d, e, f, g));
        }
        static bi(a) {
        }
        static bj(a) {
            let b;
            let c;
            let d = SpreadsheetMLMain.w1(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = ObjectModelExternalLinkPartManager.a8(a);
            let f = typeCast(Uri.$, e._au(b));
            if (f == null) {
                return;
            }
            let g = e._by._bd(c, ExcelUtils.ez(f));
            e._b7._i.add(g);
            a.an = g;
            a.s.k(g);
        }
        static bl(a) {
            let b = a.s.a(ExternalWorkbookReference.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = SpreadsheetMLMain.xu(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = b.i(c);
            a.s.k(f);
        }
        static bm(a) {
        }
        static bn(a) {
            let b = a.s.a(ExternalWorkbookReference.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetMLMain.xy(a, c);
            c = d.p1;
            b.ag.add(c);
        }
        static bo(a) {
        }
        static bp(a) {
            let b = a.s.a(WorksheetReferenceExternalRowValues.$);
            if (b == null) {
                return;
            }
            let c = a;
            let d = ObjectModelCommonPartHelpers.d(a, c.ba);
            b.i(c.ba, d);
        }
        bq(a) {
            let b = this.a7;
            let c = b._b9;
            let d = c._b;
            SpreadsheetMLMain.aaw(this, a.ak, a.al);
            SpreadsheetMLMain.aav(this);
            for (let e of fromEnum(a.ag)) {
                SpreadsheetMLMain.aau(this, e.d, e.b, e.a, e.c);
                this.ad.k();
            }
            this.ad.k();
            this.ad.k();
        }
        br(a) {
            let b = this.a7;
            let c = b._b9;
            let d = c._b;
            let e = a.x;
            let f = ExcelUtils.d9(e);
            let g = stringStartsWith(f, "file://");
            let h;
            if (g) {
                h = new Uri(1, f, 1);
            }
            else if (c._l != null) {
                if (IOPath.isPathRooted(e) == false || IOPath.getPathRoot(e) == IOPath.getPathRoot(c._l)) {
                    let i = PackageUtilities.q(c._l, a.x, ExcelUtils.b1, true);
                    if (stringStartsWith(i, "//")) {
                        i = i.substr(1);
                    }
                    h = UriUtilities.b(ExcelUtils.d9(i));
                }
                else if (stringStartsWith(f, "/")) {
                    h = UriUtilities.b(f);
                }
                else {
                    if (g == false) {
                        f = stringInsert(f, 0, "file:///");
                    }
                    h = new Uri(1, f, 1);
                }
            }
            else {
                if (IOPath.isPathRooted(f)) {
                    let j = f;
                    if (g == false) {
                        f = stringInsert(f, 0, "file:///");
                    }
                    try {
                        h = new Uri(1, f, 1);
                    }
                    catch (k) {
                        let l = IOPath.getPathRoot(j);
                        if (l != null && l != j) {
                            f = j.substr(l.length);
                        }
                        h = UriUtilities.b(f);
                    }
                }
                else {
                    h = UriUtilities.b(f);
                }
            }
            let m = b._az(h, b._bq());
            SpreadsheetMLMain.abd(this, m);
            if (a.ag.count > 0) {
                SpreadsheetMLMain.adl(this);
                for (let n of fromEnum(a.ag)) {
                    SpreadsheetMLMain.adk(this, n);
                    this.ad.k();
                }
                this.ad.k();
            }
            if (a.u.count > 0) {
                ObjectModelCommonPartHelpers.aq(this, a);
            }
            if (a.ag.count > 0) {
                SpreadsheetMLMain.adh(this);
                for (let o = 0; o < a.ag.count; o++) {
                    let p = typeCast(WorksheetReferenceExternal.$, a.i(o));
                    if (p == null) {
                        continue;
                    }
                    SpreadsheetMLMain.adg(this, intSToU(o));
                    for (let q of fromEnum(p.x)) {
                        SpreadsheetMLMain.ac9(this, intSToU((q.g + 1)));
                        for (let r of fromEnum(q.e)) {
                            let s;
                            let t;
                            let u = WorkbookSaveManagerExcel2007._c0(r.value, s, t);
                            s = u.p1;
                            t = u.p2;
                            SpreadsheetMLMain.zl(this, CellAddress.u(q.g, r.key, d.currentFormat), s);
                            SpreadsheetMLMain.aei(this, t);
                            this.ad.k();
                            this.ad.k();
                        }
                        this.ad.k();
                    }
                    this.ad.k();
                }
                this.ad.k();
            }
            this.ad.k();
        }
        bs(a) {
            let b = this.a7;
            let c = b._b9;
            let d = c._b;
            let e = b._az(a.ak, b._br());
            SpreadsheetMLMain.acn(this, e, a.ai);
            SpreadsheetMLMain.acm(this);
            for (let f of fromEnum(a.ag)) {
                SpreadsheetMLMain.acl(this, f.d, f.b, f.a, f.c);
                this.ad.k();
            }
            this.ad.k();
            this.ad.k();
        }
        get a7() {
            return ObjectModelExternalLinkPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelExternalLinkPartManager.$t = /*@__PURE__*/ markType(ObjectModelExternalLinkPartManager, 'ObjectModelExternalLinkPartManager', ExternalLinkPartManager.$);
    ObjectModelExternalLinkPartManager.a9 = /*@__PURE__*/ new ObjectModelExternalLinkPartManager();
    return ObjectModelExternalLinkPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelWorkbookPartManagerBase = /*@__PURE__*/ (() => {
    class ObjectModelWorkbookPartManagerBase extends WorkbookPartManagerBase {
        constructor() {
            super();
            this.bh = null;
            this.az(SpreadsheetMLMain.dk, ObjectModelWorkbookPartManagerBase.bi);
            this.az(SpreadsheetMLMain.d1, ObjectModelWorkbookPartManagerBase.bj);
            this.az(SpreadsheetMLMain.ft, ObjectModelWorkbookPartManagerBase.bk);
            this.az(SpreadsheetMLMain.fu, ObjectModelWorkbookPartManagerBase.bl);
            this.az(SpreadsheetMLMain.hk, ObjectModelWorkbookPartManagerBase.bm);
            this.az(SpreadsheetMLMain.ho, ObjectModelWorkbookPartManagerBase.bn);
            this.az(SpreadsheetMLMain.hp, ObjectModelWorkbookPartManagerBase.bo);
            this.az(SpreadsheetMLMain.hq, ObjectModelWorkbookPartManagerBase.bp);
            this.az(SpreadsheetMLMain.hu, ObjectModelWorkbookPartManagerBase.bq);
            this.az(SpreadsheetMLMain.ml, ObjectModelWorkbookPartManagerBase.br);
            this.az(SpreadsheetMLMain.mm, ObjectModelWorkbookPartManagerBase.bt);
            this.az(SpreadsheetMLMain.on, ObjectModelWorkbookPartManagerBase.bu);
            this.az(SpreadsheetMLMain.oy, ObjectModelWorkbookPartManagerBase.bv);
            this.az(SpreadsheetMLMain.sk, ObjectModelWorkbookPartManagerBase.by);
            this.az(SpreadsheetMLMain.sp, ObjectModelWorkbookPartManagerBase.bz);
            this.az(SpreadsheetMLMain.sq, ObjectModelWorkbookPartManagerBase.b0);
            this.az(SpreadsheetMLMain.st, ObjectModelWorkbookPartManagerBase.b1);
            this.az(SpreadsheetML2009Main.ch, ObjectModelWorkbookPartManagerBase.bw);
            this.az(SpreadsheetML2009Main.ci, ObjectModelWorkbookPartManagerBase.bx);
            this.az(SpreadsheetML2009Main.b8, ObjectModelWorkbookPartManagerBase.bs);
            ObjectModelCommonPartHelpers.aj(this);
        }
        j() {
            return ((() => {
                let $ret = new Dictionary$2(PartManagerBase.$, Number_$type, 0);
                $ret.addItem(ObjectModelThemePartManager.bc, 0);
                $ret.addItem(ObjectModelStylesPartManager.a9, 1);
                $ret.addItem(ObjectModelSharedStringsPartManager.a9, 2);
                return $ret;
            })());
        }
        t() {
            let a = super.t();
            return WorkItemExtensions.g(Base.$, a, () => {
                this.bf._b7._z();
                return WorkItemExtensions.m(Base.$, a);
            });
        }
        u(a) {
            let b = this.bf;
            let c = this.bf._b9;
            let d = c._b;
            this.bh = new Dictionary$2(RoundTripControlData.$, String_$type, 0);
            return WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.i(Tuple$2.$.specialize(Uri.$, String_$type), WorkItemExtensions.i(Tuple$2.$.specialize(Uri.$, String_$type), WorkItemExtensions.c(WorkItemExtensions.c(WorkItemExtensions.c(Async.g(d._m != null, () => b._j(ObjectModelConnectionsPartManager.a9)), () => Async.d(PivotCacheInfo.$, d._d8(), (e) => WorkItemExtensions.e(Tuple$2.$.specialize(Uri.$, String_$type), this.bf._j(ObjectModelPivotCacheDefinitionPartManager.a9, e.a), (f) => this.bh.addItem(e.a, WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), f).d)))), () => Async.d(PivotCacheInfo.$, d._d9(), (e) => WorkItemExtensions.e(Tuple$2.$.specialize(Uri.$, String_$type), this.bf._j(ObjectModelPivotCacheDefinitionPartManager.a9, e.a), (f) => this.bh.addItem(e.a, WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), f).d)))), () => Async.d(Sheet.$, c._a1, (e) => {
                if (e.type == 0) {
                    return b._j(ObjectModelWorksheetPartManager.bj, e);
                }
                else if (e.type == 1) {
                    return b._j(ObjectModelChartsheetPartManager.bb, e);
                }
                else {
                    return null;
                }
            })), () => b._j(ObjectModelStylesPartManager.a9)), () => b._j(ObjectModelThemePartManager.bc)), () => Async.g(c._a3 != 0, () => b._j(ObjectModelSharedStringsPartManager.a9))), () => Async.d(WorkbookReferenceBase.$, c._ck.keys, (e) => {
                if (typeCast(CurrentWorkbookReference.$, e) !== null) {
                    return null;
                }
                return b._j(ObjectModelExternalLinkPartManager.a9, e);
            })), () => Async.g(d._k != null, () => b._j(ObjectModelVbaProjectPartManager.x))), () => this.be(c));
        }
        i(a) {
            if (typeCast(ObjectModelWorksheetPartManager.$, a) !== null || typeCast(ObjectModelChartsheetPartManager.$, a) !== null) {
                return true;
            }
            return super.i(a);
        }
        ai(a) {
            switch (a) {
                case SpreadsheetMLMain.hk:
                    {
                        let b;
                        let c = SpreadsheetMLMain.vq(this, b);
                        b = c.p1;
                        switch (b) {
                            case "{BBE1A952-AA13-448e-AADC-164F8A28A991}":
                            case "{876F7934-8845-4945-9796-88D515C7AA90}": return true;
                            default: return false;
                        }
                    }
            }
            return super.ai(a);
        }
        static bi(a) {
        }
        static bj(a) {
            let b = a.s.a(Workbook.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p = SpreadsheetMLMain.tx(a, c, d, e, f, g, h, i, j, k, l, m, n, o);
            c = p.p1;
            d = p.p2;
            e = p.p3;
            f = p.p4;
            g = p.p5;
            h = p.p6;
            i = p.p7;
            j = p.p8;
            k = p.p9;
            l = p.p10;
            m = p.p11;
            n = p.p12;
            o = p.p13;
            b.calculationMode = XlsxUtilities.a(d);
            b.cellReferenceMode = XlsxUtilities.c(f);
            b.iterativeCalculationsEnabled = g;
            b.maxRecursionIterations = h;
            b.maxChangeInIteration = i;
            b.precision = j ? 1 : 0;
            b.recalculateBeforeSave = l;
        }
        static bk(a) {
            let b = a.s.a(CustomViewCollection.$);
            if (b == null) {
                return;
            }
            let c;
            let d = new ST_Guid();
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v;
            let w;
            let x;
            let y;
            let z;
            let aa = SpreadsheetMLMain.u2(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z);
            c = aa.p1;
            d = aa.p2;
            e = aa.p3;
            f = aa.p4;
            g = aa.p5;
            h = aa.p6;
            i = aa.p7;
            j = aa.p8;
            k = aa.p9;
            l = aa.p10;
            m = aa.p11;
            n = aa.p12;
            o = aa.p13;
            p = aa.p14;
            q = aa.p15;
            r = aa.p16;
            s = aa.p17;
            t = aa.p18;
            u = aa.p19;
            v = aa.p20;
            w = aa.p21;
            x = aa.p22;
            y = aa.p23;
            z = aa.p24;
            let ab = b._item(ST_Guid.e(d));
            if (ab == null) {
                ab = new CustomView(b._e, true, true);
                ab._t = ST_Guid.e(d);
                b._add1(ab);
            }
            let ac = ab.windowOptions;
            ab.name = c;
            ab._ab(m);
            ab._aa(n);
            ac.maximized = o;
            ac.scrollBars = 0;
            if (q) {
                ac.scrollBars |= 1;
            }
            if (r) {
                ac.scrollBars |= 2;
            }
            ac.tabBarVisible = s;
            ac._boundsInPixels$i = ExcelUtils.hb(t, u, f, g);
            ac.tabBarWidth = v;
            ac._ao = e;
            ac.showFormulaBar = w;
            ac.showStatusBar = x;
            ac.objectDisplayStyle = XlsxUtilities.n(z);
        }
        static bl(a) {
            let b = a.s.a(Workbook.$);
            if (b == null) {
                return;
            }
            a.s.k(b._customViews$i);
        }
        static bm(a) {
            let b;
            let c = SpreadsheetMLMain.vq(a, b);
            b = c.p1;
        }
        static bn(a) {
            let b;
            let c = SpreadsheetMLMain.vu(a, b);
            b = c.p1;
            let d = ObjectModelWorkbookPartManagerBase.bg(a);
            let e = typeCast(WorkbookReferenceBase.$, d._au(b));
            d._b7._bi.add(e);
        }
        static bo(a) {
        }
        static bp(a) {
        }
        static bq(a) {
        }
        static br(a) {
            let b = a.ab.r(SpreadsheetML2009Main.b8);
            let c = a.s.a(Workbook.$);
            if (c == null) {
                return;
            }
            let d;
            let e;
            let f = SpreadsheetMLMain.xa(a, d, e);
            d = f.p1;
            e = f.p2;
            let g = ObjectModelWorkbookPartManagerBase.bg(a);
            let h = typeCast(RoundTripControlData.$, g._au(e));
            if (h != null) {
                let i = new PivotCacheInfo(h, d);
                if (b) {
                    c._hc(i);
                }
                else {
                    c._hb(i);
                }
            }
        }
        static bt(a) {
        }
        static bs(a) {
        }
        static bu(a) {
            let b = a.s.a(Workbook.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = SpreadsheetMLMain.xw(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            if (stringIsNullOrEmpty(f)) {
                return;
            }
            let h = a.d._g(f);
            let i;
            if (h.relationshipType == ObjectModelWorksheetPartManager.a6 || h.relationshipType == ObjectModelWorksheetPartManager.a5) {
                i = 0;
            }
            else if (h.relationshipType == ObjectModelChartsheetPartManager.a6 || h.relationshipType == ObjectModelChartsheetPartManager.a5) {
                i = 1;
            }
            else {
                i = 0;
            }
            let j = b._sheets$i._add2(c, d, i);
            if (j.type == 0) {
                j._ek = false;
            }
            j._e.visibility = XlsxUtilities.af(e);
            let k = PackageUtilities.ak(h).originalString;
            ObjectModelWorkbookPartManagerBase.bg(a)._b7._bo(j, k);
        }
        static bv(a) {
        }
        static bw(a) {
            let b = a.s.a(Workbook.$);
            if (b == null) {
                return;
            }
            let c;
            let d = SpreadsheetML2009Main.c6(a, c);
            c = d.p1;
            let e = ObjectModelWorkbookPartManagerBase.bg(a);
            let f = typeCast(BinaryData.$, e._au(c));
            if (f != null) {
                b._hd(f);
            }
        }
        static bx(a) {
        }
        static by(a) {
            let b;
            let c = SpreadsheetMLMain.yy(a, b);
            b = c.p1;
            a.s.k(ObjectModelWorkbookPartManagerBase.bg(a)._by);
        }
        static bz(a) {
            let b = a.s.a(Workbook.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v = SpreadsheetMLMain.yz(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u);
            c = v.p1;
            d = v.p2;
            e = v.p3;
            f = v.p4;
            g = v.p5;
            h = v.p6;
            i = v.p7;
            j = v.p8;
            k = v.p9;
            l = v.p10;
            m = v.p11;
            n = v.p12;
            o = v.p13;
            p = v.p14;
            q = v.p15;
            r = v.p16;
            s = v.p17;
            t = v.p18;
            u = v.p19;
            b.dateSystem = c ? 1 : 0;
            b.windowOptions.objectDisplayStyle = XlsxUtilities.n(d);
            b._g0 = l;
            b.saveExternalLinkedValues = j;
            b._gk = t;
        }
        static b0(a) {
            let b = a.s.a(Workbook.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f = null;
            if (Enumerable.d(AttributeValue.$, a.ab.u, (g) => g.a.e(a.d) == "workbookPassword")) {
                let g;
                let h;
                let i = SpreadsheetMLMain.y0(a, c, d, e, g, h);
                c = i.p1;
                d = i.p2;
                e = i.p3;
                g = i.p4;
                h = i.p5;
                if (g.hasValue) {
                    f = ProtectionValidationInfo.c(g.value);
                }
            }
            else {
                let j;
                let k;
                let l;
                let m;
                let n;
                let o;
                let p;
                let q;
                let r = SpreadsheetMLMain.y1(a, c, d, e, j, k, l, m, n, o, p, q);
                c = r.p1;
                d = r.p2;
                e = r.p3;
                j = r.p4;
                k = r.p5;
                l = r.p6;
                m = r.p7;
                n = r.p8;
                o = r.p9;
                p = r.p10;
                q = r.p11;
                if (o != null && p != null && nullableNotEquals(q, null)) {
                    f = ProtectionValidationInfo.b(n, Convert.fromBase64String(o), Convert.fromBase64String(p), q.value);
                }
            }
            b.protection.allowEditStructure = c == false;
            b.protection.allowEditWindows = d == false;
            b.protection._b.b = f;
            b.protection._b.j(c || d);
        }
        static b1(a) {
            let b = a.s.a(Workbook.$);
            if (b == null) {
                return;
            }
            let c = b.windowOptions;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q = SpreadsheetMLMain.y2(a, d, e, f, g, h, i, j, k, l, m, n, o, p);
            d = q.p1;
            e = q.p2;
            f = q.p3;
            g = q.p4;
            h = q.p5;
            i = q.p6;
            j = q.p7;
            k = q.p8;
            l = q.p9;
            m = q.p10;
            n = q.p11;
            o = q.p12;
            p = q.p13;
            c.minimized = e;
            c.scrollBars = 0;
            if (f) {
                c.scrollBars |= 1;
            }
            if (g) {
                c.scrollBars |= 2;
            }
            c.tabBarVisible = h;
            c._boundsInTwips$i = ExcelUtils.hb(i.getValueOrDefault(), j.getValueOrDefault(), k.getValueOrDefault(), l.getValueOrDefault());
            c.tabBarWidth = m;
            c.firstVisibleTabIndex = n;
            c._as = o;
        }
        b2(a) {
            let b = a.windowOptions;
            let c = b._boundsInPixels$i;
            SpreadsheetMLMain.aan(this, a.name, ST_Guid.a(a._t), b.selectedSheet == null ? 0 : b.selectedSheet._am, truncate(c.width), truncate(c.height), void 0, toNullable(Number_$type, null), void 0, void 0, void 0, a.savePrintOptions, a.saveHiddenRowsAndColumns, b.maximized, void 0, EnumUtil.enumHasFlag(b.scrollBars, 1), EnumUtil.enumHasFlag(b.scrollBars, 2), b.tabBarVisible, truncate(c.x), truncate(c.y), intSToU(b.tabBarWidth), b.showFormulaBar, b.showStatusBar, void 0, XlsxUtilities.aw(b.objectDisplayStyle));
            this.ad.k();
        }
        ba(a) {
            if (a._cz == false) {
                return null;
            }
            SpreadsheetMLMain.abb(this, "{876F7934-8845-4945-9796-88D515C7AA90}");
            this.ad.l(SpreadsheetML2009Main.ao);
            SpreadsheetML2009Main.dn(this);
            return WorkItemExtensions.a(Async.d(PivotCacheInfo.$, a._d9(), (b) => {
                this.b4(b);
                return null;
            }), () => {
                this.ad.k();
                this.ad.k();
            });
        }
        bb(a) {
            if (a._c1 == false) {
                return null;
            }
            SpreadsheetMLMain.abb(this, "{BBE1A952-AA13-448e-AADC-164F8A28A991}");
            this.ad.l(SpreadsheetML2009Main.ao);
            SpreadsheetML2009Main.dq(this);
            return WorkItemExtensions.a(Async.d(BinaryData.$, a._ea(), runOn(this, this.bd)), () => {
                this.ad.k();
                this.ad.k();
            });
        }
        bc(a) {
            let b = a._c1 || a._cz;
            if (b == false) {
                return null;
            }
            SpreadsheetMLMain.abh(this);
            return WorkItemExtensions.a(WorkItemExtensions.c(this.ba(a), () => this.bb(a)), () => this.ad.k());
        }
        b3(a) {
        }
        b4(a) {
            let b = this.bh.item(a.a);
            SpreadsheetMLMain.acw(this, a.b, b);
            this.ad.k();
        }
        b5(a) {
            if (a._cy == false) {
                return;
            }
            SpreadsheetMLMain.acx(this);
            ExcelUtils.fo(PivotCacheInfo.$, a._d8(), runOn(this, this.b4));
            this.ad.k();
        }
        b6(a) {
            let b = this.d._f(a).id;
            SpreadsheetMLMain.adi(this, a.name, a._am, XlsxUtilities.a3(a._e.visibility), b);
            this.ad.k();
        }
        bd(a) {
            return WorkItemExtensions.e(Tuple$2.$.specialize(Uri.$, String_$type), this.bf._j(ObjectModelSlicerCachePartManager.a8, a), (b) => {
                let c = WorkItemExtensions.m(Tuple$2.$.specialize(Uri.$, String_$type), b).d;
                SpreadsheetML2009Main.dp(this, c);
                this.ad.k();
            });
        }
        be(a) {
            let b = a._b;
            let c = b.windowOptions;
            let d = c._boundsInTwips$i;
            SpreadsheetMLMain.aem(this, a._cb._z);
            SpreadsheetMLMain.abn(this, "xl", "5", "5", "9303");
            this.ad.k();
            this.b3(b);
            SpreadsheetMLMain.aen(this, b.dateSystem == 1, XlsxUtilities.aw(c.objectDisplayStyle), void 0, void 0, void 0, void 0, void 0, b.saveExternalLinkedValues, void 0, b._k != null ? b._g0 : null, void 0, void 0, void 0, void 0, void 0, void 0, void 0, b._gk);
            this.ad.k();
            this.b7(b);
            SpreadsheetMLMain.zd(this);
            let e = a._a1.indexOf(c.selectedSheet);
            let f = Math.min(c.firstVisibleTabIndex, a._a1.count - 1);
            SpreadsheetMLMain.aeq(this, void 0, c.minimized, EnumUtil.enumHasFlag(c.scrollBars, 1), EnumUtil.enumHasFlag(c.scrollBars, 2), c.tabBarVisible, d.x == 0 ? toNullable(Number_$type, null) : toNullable(Number_$type, truncate(d.x)), d.y == 0 ? toNullable(Number_$type, null) : toNullable(Number_$type, truncate(d.y)), d.width == 0 ? toNullable(Number_$type, null) : toNullable(Number_$type, truncate(d.width)), d.height == 0 ? toNullable(Number_$type, null) : toNullable(Number_$type, truncate(d.height)), intSToU(c.tabBarWidth), intSToU(f), intSToU(e));
            this.ad.k();
            this.ad.k();
            SpreadsheetMLMain.adp(this);
            ExcelUtils.fo(Sheet.$, a._a1, runOn(this, this.b6));
            this.ad.k();
            let g = ObjectModelExternalLinkPartManager.a9.o(a._cb._z);
            let h = new List$1(IPackageRelationship_$type, 1, Enumerable.u(IPackageRelationship_$type, a._cb._d.getRelationships(), (i) => i.relationshipType == g));
            if (h.count != 0) {
                SpreadsheetMLMain.abg(this);
                for (let i of fromEnum(h)) {
                    SpreadsheetMLMain.abf(this, i.id);
                    this.ad.k();
                }
                this.ad.k();
            }
            ObjectModelCommonPartHelpers.aq(this, b._bb);
            SpreadsheetMLMain.zi(this, toNullable(Number_$type, 162913), XlsxUtilities.ao(b.calculationMode), void 0, XlsxUtilities.a2(b.cellReferenceMode), b.iterativeCalculationsEnabled, intSToU(b.maxRecursionIterations), b.maxChangeInIteration, b.precision == 1, void 0, b.recalculateBeforeSave);
            this.ad.k();
            if (b._cq) {
                SpreadsheetMLMain.aao(this);
                ExcelUtils.fo(CustomView.$, b._customViews$i, runOn(this, this.b2));
                this.ad.k();
            }
            this.b5(b);
            return WorkItemExtensions.a(this.bc(b), () => this.ad.k());
        }
        b7(a) {
            if (a.isProtected == false) {
                return;
            }
            let b = a.protection;
            if (this.d._z == 0) {
                SpreadsheetMLMain.aeo(this, b.allowEditStructure == false, b.allowEditWindows == false, void 0, b._b.h());
            }
            else {
                let c;
                let d, e;
                let f;
                let g = b._b.e(c, d, e, f);
                c = g.p0;
                d = g.p1;
                e = g.p2;
                f = g.p3;
                SpreadsheetMLMain.aep(this, b.allowEditStructure == false, b.allowEditWindows == false, void 0, void 0, void 0, void 0, toNullable(Number_$type, null), c, d != null ? Convert.toBase64String(d) : null, e != null ? Convert.toBase64String(e) : null, f);
            }
            this.ad.k();
        }
        get bf() {
            return ObjectModelWorkbookPartManagerBase.bg(this);
        }
        static bg(a) {
            return a.d;
        }
    }
    ObjectModelWorkbookPartManagerBase.$t = /*@__PURE__*/ markType(ObjectModelWorkbookPartManagerBase, 'ObjectModelWorkbookPartManagerBase', WorkbookPartManagerBase.$);
    return ObjectModelWorkbookPartManagerBase;
})();
/**
 * @hidden
 */
export let ObjectModelMacroEnabledTemplatePartManager = /*@__PURE__*/ (() => {
    class ObjectModelMacroEnabledTemplatePartManager extends ObjectModelWorkbookPartManagerBase {
        constructor() {
            super();
        }
        get_m() {
            return WorkbookPartManagerBase.a4;
        }
        get m() {
            return this.get_m();
        }
    }
    ObjectModelMacroEnabledTemplatePartManager.$t = /*@__PURE__*/ markType(ObjectModelMacroEnabledTemplatePartManager, 'ObjectModelMacroEnabledTemplatePartManager', ObjectModelWorkbookPartManagerBase.$);
    ObjectModelMacroEnabledTemplatePartManager.b8 = /*@__PURE__*/ new ObjectModelMacroEnabledTemplatePartManager();
    return ObjectModelMacroEnabledTemplatePartManager;
})();
/**
 * @hidden
 */
export let ObjectModelMacroEnabledWorkbookPartManager = /*@__PURE__*/ (() => {
    class ObjectModelMacroEnabledWorkbookPartManager extends ObjectModelWorkbookPartManagerBase {
        constructor() {
            super();
        }
        get_m() {
            return WorkbookPartManagerBase.a5;
        }
        get m() {
            return this.get_m();
        }
    }
    ObjectModelMacroEnabledWorkbookPartManager.$t = /*@__PURE__*/ markType(ObjectModelMacroEnabledWorkbookPartManager, 'ObjectModelMacroEnabledWorkbookPartManager', ObjectModelWorkbookPartManagerBase.$);
    ObjectModelMacroEnabledWorkbookPartManager.b8 = /*@__PURE__*/ new ObjectModelMacroEnabledWorkbookPartManager();
    return ObjectModelMacroEnabledWorkbookPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelPivotCacheDefinitionPartManager = /*@__PURE__*/ (() => {
    class ObjectModelPivotCacheDefinitionPartManager extends PivotCacheDefinitionPartManager {
        constructor() {
            super();
        }
        a() {
            return WorkItem.g(Base.$, RoundTripDataPartManager.r(this.a7, this.l, this.m));
        }
        b(a) {
            let b = typeCast(RoundTripControlData.$, a);
            if (b == null) {
                return null;
            }
            return RoundTripDataPartManager.s(b, this.a7, this.l);
        }
        u(a) {
            throw new NotImplementedException(0);
        }
        get a7() {
            return ObjectModelPivotCacheDefinitionPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelPivotCacheDefinitionPartManager.$t = /*@__PURE__*/ markType(ObjectModelPivotCacheDefinitionPartManager, 'ObjectModelPivotCacheDefinitionPartManager', PivotCacheDefinitionPartManager.$);
    ObjectModelPivotCacheDefinitionPartManager.a9 = /*@__PURE__*/ new ObjectModelPivotCacheDefinitionPartManager();
    return ObjectModelPivotCacheDefinitionPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelPivotCacheRecordsPartManager = /*@__PURE__*/ (() => {
    class ObjectModelPivotCacheRecordsPartManager extends PivotCacheRecordsPartManager {
        constructor() {
            super();
        }
        a() {
            return WorkItem.g(Base.$, new BinaryData(DocCoreUtils.c(this.l)));
        }
        b(a) {
            let b = typeCast(BinaryData.$, a);
            if (b == null) {
                return null;
            }
            this.l.write(b.a, 0, b.a.length);
            return null;
        }
        u(a) {
            throw new NotImplementedException(0);
        }
        get a7() {
            return ObjectModelPivotCacheRecordsPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelPivotCacheRecordsPartManager.$t = /*@__PURE__*/ markType(ObjectModelPivotCacheRecordsPartManager, 'ObjectModelPivotCacheRecordsPartManager', PivotCacheRecordsPartManager.$);
    ObjectModelPivotCacheRecordsPartManager.a9 = /*@__PURE__*/ new ObjectModelPivotCacheRecordsPartManager();
    return ObjectModelPivotCacheRecordsPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelPivotTablePartManager = /*@__PURE__*/ (() => {
    class ObjectModelPivotTablePartManager extends PivotTablePartManager {
        constructor() {
            super();
        }
        z(a) {
            return 2;
        }
        aw(a) {
            this.an = a;
            this.bc(a);
            let b = this.bb();
            if (b == null) {
                return;
            }
            b._g6(new PivotTableInfo(a, this.a7()));
        }
        u(a) {
            let b = typeCast(PivotTableInfo.$, a);
            if (b == null) {
                return null;
            }
            this.ad.t(b.b);
            if (b.a != null) {
                let c = this.a8._bd(b.a);
                if (c != null) {
                    this.a8._a0(c, ObjectModelPivotCacheDefinitionPartManager.a9);
                }
            }
            return null;
        }
        y(a, b) {
            switch (a.b.e(this.a8)) {
                case SpreadsheetMLMain.ik:
                    {
                        let c = typeCast(WorksheetCellFormatData.$, a.n);
                        if (c != null) {
                            let d = this.a8._b9._bc(c);
                            for (let e = 0; e < a.j.count; e++) {
                                let f = a.j._inner[e];
                                if (f.a.f == "dxfId") {
                                    a.j._inner[e] = new AttributeValue(2, f.a, d.toString());
                                    break;
                                }
                            }
                        }
                    }
                    break;
                default: break;
            }
            return 0;
        }
        a7() {
            let a = this.d;
            let b = ObjectModelPivotCacheDefinitionPartManager.a9.o(a._z);
            let c = Enumerable.af(IPackageRelationship_$type, Enumerable.u(IPackageRelationship_$type, a._d.getRelationships(), (d) => d.targetMode == 0 && d.relationshipType == b));
            if (c == null) {
                return null;
            }
            return typeCast(RoundTripControlData.$, a._as(c));
        }
        bb() {
            let a = this.a8;
            let b = a._b7;
            if (a._an.f == 0) {
                return null;
            }
            let c = a._an.d().uri.toString();
            return b._ao(c);
        }
        bc(a) {
            let b = this.a8;
            let c = b._b7;
            if (a.b.b.e(b) != SpreadsheetMLMain.mn) {
                return;
            }
            let d = a.b.c(SpreadsheetMLMain.iq, b);
            if (d == null) {
                return;
            }
            for (let e of fromEnum(d.f(SpreadsheetMLMain.ik, b))) {
                let f;
                if (((() => { let g = WorkbookLoadManagerExcel2007._aw(e, b, f); f = g.p2; return g.ret; })())) {
                    e.n = f;
                }
                else {
                }
            }
        }
        get a8() {
            return ObjectModelPivotTablePartManager.a9(this);
        }
        static a9(a) {
            return a.d;
        }
    }
    ObjectModelPivotTablePartManager.$t = /*@__PURE__*/ markType(ObjectModelPivotTablePartManager, 'ObjectModelPivotTablePartManager', PivotTablePartManager.$);
    ObjectModelPivotTablePartManager.ba = /*@__PURE__*/ new ObjectModelPivotTablePartManager();
    return ObjectModelPivotTablePartManager;
})();
/**
 * @hidden
 */
export let ObjectModelSharedStringsPartManager = /*@__PURE__*/ (() => {
    class ObjectModelSharedStringsPartManager extends SharedStringsPartManager {
        constructor() {
            super();
            this.az(SpreadsheetMLMain.pw, ObjectModelSharedStringsPartManager.ba);
            this.ay(SpreadsheetMLMain.pw, ObjectModelSharedStringsPartManager.bb);
            this.az(SpreadsheetMLMain.p8, ObjectModelSharedStringsPartManager.bc);
            ObjectModelCommonPartHelpers.al(this);
        }
        u(a) {
            let b = this.a7._b9;
            SpreadsheetMLMain.adw(this, toNullable(Number_$type, b._be), toNullable(Number_$type, intSToU(b._a3)));
            let c = b._b.shouldRemoveCarriageReturnsOnSave;
            let d = 0;
            return WorkItemExtensions.a(Async.e(StringElement.$, b._az(), (e) => {
                this.bd(b, e, c);
                if (1000 < ++d) {
                    d = 0;
                    return false;
                }
                return true;
            }), () => this.ad.k());
        }
        static ba(a) {
            a.s.k(new FormattedStringElement(0));
        }
        static bb(a) {
            let b = a.s.a(FormattedStringElement.$);
            if (b == null) {
                return;
            }
            let c = b;
            if (b._u == false) {
                c = c._q();
            }
            ObjectModelSharedStringsPartManager.a8(a)._b7._u.add(c);
        }
        static bc(a) {
            let b;
            let c;
            let d = SpreadsheetMLMain.x9(a, b, c);
            b = d.p1;
            c = d.p2;
        }
        bd(a, b, c) {
            if (c) {
                b = b._s(a._b);
            }
            ObjectModelCommonPartHelpers.au(this, a, b, SpreadsheetMLMain.ads);
        }
        get a7() {
            return ObjectModelSharedStringsPartManager.a8(this);
        }
        static a8(a) {
            return a.d;
        }
    }
    ObjectModelSharedStringsPartManager.$t = /*@__PURE__*/ markType(ObjectModelSharedStringsPartManager, 'ObjectModelSharedStringsPartManager', SharedStringsPartManager.$);
    ObjectModelSharedStringsPartManager.a9 = /*@__PURE__*/ new ObjectModelSharedStringsPartManager();
    return ObjectModelSharedStringsPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelSlicerCachePartManager = /*@__PURE__*/ (() => {
    class ObjectModelSlicerCachePartManager extends SlicerCachePartManager {
        constructor() {
            super();
        }
        a() {
            return WorkItem.g(Base.$, new BinaryData(DocCoreUtils.c(this.l)));
        }
        b(a) {
            let b = typeCast(BinaryData.$, a);
            if (b == null) {
                return null;
            }
            this.l.write(b.a, 0, b.a.length);
            return null;
        }
        u(a) {
            throw new NotImplementedException(0);
        }
        get a6() {
            return ObjectModelSlicerCachePartManager.a7(this);
        }
        static a7(a) {
            return a.d;
        }
    }
    ObjectModelSlicerCachePartManager.$t = /*@__PURE__*/ markType(ObjectModelSlicerCachePartManager, 'ObjectModelSlicerCachePartManager', SlicerCachePartManager.$);
    ObjectModelSlicerCachePartManager.a8 = /*@__PURE__*/ new ObjectModelSlicerCachePartManager();
    return ObjectModelSlicerCachePartManager;
})();
/**
 * @hidden
 */
export let ObjectModelSlicerPartManager = /*@__PURE__*/ (() => {
    class ObjectModelSlicerPartManager extends SlicerPartManager {
        constructor() {
            super();
        }
        a() {
            return WorkItem.g(Base.$, new BinaryData(DocCoreUtils.c(this.l)));
        }
        b(a) {
            let b = typeCast(BinaryData.$, a);
            if (b == null) {
                return null;
            }
            this.l.write(b.a, 0, b.a.length);
            return null;
        }
        u(a) {
            throw new NotImplementedException(0);
        }
        get a6() {
            return ObjectModelSlicerPartManager.a7(this);
        }
        static a7(a) {
            return a.d;
        }
    }
    ObjectModelSlicerPartManager.$t = /*@__PURE__*/ markType(ObjectModelSlicerPartManager, 'ObjectModelSlicerPartManager', SlicerPartManager.$);
    ObjectModelSlicerPartManager.a8 = /*@__PURE__*/ new ObjectModelSlicerPartManager();
    return ObjectModelSlicerPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelTemplatePartManager = /*@__PURE__*/ (() => {
    class ObjectModelTemplatePartManager extends ObjectModelWorkbookPartManagerBase {
        constructor() {
            super();
        }
        get_m() {
            return WorkbookPartManagerBase.a8;
        }
        get m() {
            return this.get_m();
        }
    }
    ObjectModelTemplatePartManager.$t = /*@__PURE__*/ markType(ObjectModelTemplatePartManager, 'ObjectModelTemplatePartManager', ObjectModelWorkbookPartManagerBase.$);
    ObjectModelTemplatePartManager.b8 = /*@__PURE__*/ new ObjectModelTemplatePartManager();
    return ObjectModelTemplatePartManager;
})();
/**
 * @hidden
 */
export let ObjectModelThemeManagerPartManager = /*@__PURE__*/ (() => {
    class ObjectModelThemeManagerPartManager extends ThemeManagerPartManager {
        constructor() {
            super();
            this.az(DrawingMLMain.jj, ObjectModelThemeManagerPartManager.a8);
        }
        aw(a) {
            let b = Enumerable.ag(AttributeValue.$, a.b.j, (c) => c.a.e(this.d) == IGOfficeExtensions.aq);
            if (b.d == null || ST_OnOff.e(b.d) == false) {
                this.d._bj();
            }
        }
        u(a) {
            DrawingMLMain.qa(this);
            this.ad.k();
            let b = this.d;
            return b._j(ObjectModelThemePartManager.bd);
        }
        static a8(a) {
        }
    }
    ObjectModelThemeManagerPartManager.$t = /*@__PURE__*/ markType(ObjectModelThemeManagerPartManager, 'ObjectModelThemeManagerPartManager', ThemeManagerPartManager.$);
    ObjectModelThemeManagerPartManager.a7 = /*@__PURE__*/ new ObjectModelThemeManagerPartManager();
    return ObjectModelThemeManagerPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelThemePartManager = /*@__PURE__*/ (() => {
    class ObjectModelThemePartManager extends ThemePartManager {
        constructor(a) {
            super(a);
            this.az(DrawingMLMain.ar, ObjectModelThemePartManager.bg);
            this.az(DrawingMLMain.as, ObjectModelThemePartManager.bh);
            this.az(DrawingMLMain.at, ObjectModelThemePartManager.bi);
            this.az(DrawingMLMain.au, ObjectModelThemePartManager.bj);
            this.az(DrawingMLMain.av, ObjectModelThemePartManager.bk);
            this.az(DrawingMLMain.aw, ObjectModelThemePartManager.bl);
            this.az(DrawingMLMain.cn, ObjectModelThemePartManager.bm);
            this.az(DrawingMLMain.da, ObjectModelThemePartManager.bn);
            this.az(DrawingMLMain.db, ObjectModelThemePartManager.bo);
            this.az(DrawingMLMain.d9, ObjectModelThemePartManager.bp);
            this.az(DrawingMLMain.ea, ObjectModelThemePartManager.bq);
            this.az(DrawingMLMain.ed, ObjectModelThemePartManager.br);
            this.az(DrawingMLMain.e2, ObjectModelThemePartManager.bs);
            this.az(DrawingMLMain.fr, ObjectModelThemePartManager.bt);
            this.az(DrawingMLMain.f3, ObjectModelThemePartManager.bu);
            this.az(DrawingMLMain.f4, ObjectModelThemePartManager.bv);
            this.az(DrawingMLMain.gi, ObjectModelThemePartManager.bw);
            this.az(DrawingMLMain.gl, ObjectModelThemePartManager.bx);
            this.az(DrawingMLMain.i1, ObjectModelThemePartManager.by);
            this.az(DrawingMLMain.i9, ObjectModelThemePartManager.bz);
            this.az(DrawingMLMain.jh, ObjectModelThemePartManager.b0);
            this.az(DrawingMLMain.ji, ObjectModelThemePartManager.b1);
            FormatSchemeDeserializer.cp(this);
        }
        a1() {
            {
                let a = this.l.canSeek;
                let b = a ? this.l.position : 0;
                let c = DocCoreUtils.c(this.l);
                if (a) {
                    this.l.position = b;
                }
                else {
                    this.l = new MemoryStream(2, c);
                }
                this.ba._by._i = c;
                this.ba._by._du = this.ba._z;
            }
            return super.a1();
        }
        static be() {
            return new MemoryStream(2, Convert.fromBase64String(ObjectModelThemePartManager.bf));
        }
        b(a) {
            let b = this.ba._by;
            if (b._i != null) {
                {
                    let c = new MemoryStream(2, b._i);
                    try {
                        this.b2(c, b._du);
                    }
                    finally {
                        if (c != null) {
                            c.dispose();
                        }
                    }
                }
            }
            else {
                {
                    let d = ObjectModelThemePartManager.be();
                    try {
                        this.b2(d, 0);
                    }
                    finally {
                        if (d != null) {
                            d.dispose();
                        }
                    }
                }
            }
            return null;
        }
        b2(a, b) {
            if (this.d._z != b) {
                {
                    let c = new StreamReader(a);
                    try {
                        let d = c.h();
                        d = stringReplace(d, DrawingMLMain.ao.s(b), DrawingMLMain.ao.s(this.d._z));
                        let e = Encoding.uTF8.getBytes1(d);
                        this.l.write(e, 0, e.length);
                    }
                    finally {
                        if (c != null) {
                            c.dispose();
                        }
                    }
                }
            }
            else {
                let f;
                let g = new Array(1024);
                while ((f = a.read(g, 0, 1024)) != 0) {
                    this.l.write(g, 0, f);
                }
                this.l.flush();
            }
        }
        u(a) {
            return null;
        }
        static bg(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 4));
        }
        static bh(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 5));
        }
        static bi(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 6));
        }
        static bj(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 7));
        }
        static bk(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 8));
        }
        static bl(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 9));
        }
        static bm(a) {
            let b;
            let c = DrawingMLMain.kt(a, b);
            b = c.p1;
        }
        static bn(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 1));
        }
        static bo(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 3));
        }
        static bp(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 11));
        }
        static bq(a) {
            let b = a.s.a(WorkbookLoadManagerExcel2007_FontCollection.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = DrawingMLMain.ln(a, c, d);
            c = e.p1;
            d = e.p2;
            if (c == null || d == null) {
                return;
            }
            b.f(c, d);
        }
        static br(a) {
            let b;
            let c = DrawingMLMain.lp(a, b);
            b = c.p1;
        }
        static bs(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 10));
        }
        static bt(a) {
            let b = a.s.a(WorkbookLoadManagerExcel2007_FontCollection.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = DrawingMLMain.l6(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            b.d = c;
        }
        static bu(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 0));
        }
        static bv(a) {
            a.s.k(enumGetBox(WorkbookThemeColorType_$type, 2));
        }
        static bw(a) {
            a.s.k(ObjectModelThemePartManager.bb(a)._bv);
        }
        static bx(a) {
            a.s.k(ObjectModelThemePartManager.bb(a)._bw);
        }
        static by(a) {
            if (FormatSchemeDeserializer.e(a)) {
                return;
            }
            let b = a.s.a(Nullable$1.$.specialize(WorkbookThemeColorType_$type));
            if (nullableEquals(b, null)) {
                return;
            }
            let c = new ST_HexColorRGB();
            let d = DrawingMLMain.m2(a, c);
            c = d.p1;
            ObjectModelThemePartManager.bb(a)._by._h[b.value] = ExcelUtils.g4(c.r);
        }
        static bz(a) {
            if (FormatSchemeDeserializer.f(a)) {
                return;
            }
            let b = a.s.a(Nullable$1.$.specialize(WorkbookThemeColorType_$type));
            if (nullableEquals(b, null)) {
                return;
            }
            let c;
            let d = new ST_HexColorRGB();
            let e = DrawingMLMain.m4(a, c, d);
            c = e.p1;
            d = e.p2;
            ObjectModelThemePartManager.bb(a)._by._h[b.value] = ExcelUtils.g4(XlsxUtilities.bh(c));
        }
        static b0(a) {
            let b;
            let c = DrawingMLMain.m7(a, b);
            b = c.p1;
            if (a.d._z == 0 && a.ab.af == DrawingMLMain.ao.s(1)) {
                a.d._bn(1);
            }
        }
        static b1(a) {
        }
        get ba() {
            return ObjectModelThemePartManager.bb(this);
        }
        static bb(a) {
            return a.d;
        }
    }
    ObjectModelThemePartManager.$t = /*@__PURE__*/ markType(ObjectModelThemePartManager, 'ObjectModelThemePartManager', ThemePartManager.$);
    ObjectModelThemePartManager.bc = /*@__PURE__*/ new ObjectModelThemePartManager(false);
    ObjectModelThemePartManager.bd = /*@__PURE__*/ new ObjectModelThemePartManager(true);
    ObjectModelThemePartManager.bf = "";
    return ObjectModelThemePartManager;
})();
/**
 * @hidden
 */
export let ObjectModelVbaProjectPartManager = /*@__PURE__*/ (() => {
    class ObjectModelVbaProjectPartManager extends VbaProjectPartManager {
        constructor() {
            super();
        }
        a() {
            let a = this.v._by;
            a._k = new BinaryData(DocCoreUtils.c(this.l));
            return WorkItem.g(Base.$, a._k);
        }
        b(a) {
            let b = this.v._by;
            this.l.write(b._k.a, 0, b._k.a.length);
            return null;
        }
        get v() {
            return ObjectModelVbaProjectPartManager.w(this);
        }
        static w(a) {
            return a.d;
        }
    }
    ObjectModelVbaProjectPartManager.$t = /*@__PURE__*/ markType(ObjectModelVbaProjectPartManager, 'ObjectModelVbaProjectPartManager', VbaProjectPartManager.$);
    ObjectModelVbaProjectPartManager.x = /*@__PURE__*/ new ObjectModelVbaProjectPartManager();
    return ObjectModelVbaProjectPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelVmlDrawingPartManager = /*@__PURE__*/ (() => {
    class ObjectModelVmlDrawingPartManager extends VmlDrawingPartManager {
        constructor() {
            super(false);
            this.az("xml", ObjectModelVmlDrawingPartManager.ci);
            this.az("urn:schemas-microsoft-com:vml/imagedata", ObjectModelVmlDrawingPartManager.bt);
            this.az("urn:schemas-microsoft-com:vml/path", ObjectModelVmlDrawingPartManager.b3);
            this.az("urn:schemas-microsoft-com:vml/shadow", ObjectModelVmlDrawingPartManager.b9);
            this.az("urn:schemas-microsoft-com:vml/shape", ObjectModelVmlDrawingPartManager.ca);
            this.az("urn:schemas-microsoft-com:vml/shapetype", ObjectModelVmlDrawingPartManager.cb);
            this.az("urn:schemas-microsoft-com:vml/stroke", ObjectModelVmlDrawingPartManager.cd);
            this.az(OfficeNamespace.ap, ObjectModelVmlDrawingPartManager.bw);
            this.az(ExcelNamespace.aq, ObjectModelVmlDrawingPartManager.bc);
            this.az(ExcelNamespace.ar, ObjectModelVmlDrawingPartManager.bd);
            this.az(ExcelNamespace.as, ObjectModelVmlDrawingPartManager.be);
            this.az(ExcelNamespace.at, ObjectModelVmlDrawingPartManager.bf);
            this.az(ExcelNamespace.ax, ObjectModelVmlDrawingPartManager.bg);
            this.az(ExcelNamespace.ay, ObjectModelVmlDrawingPartManager.bh);
            this.az(ExcelNamespace.az, ObjectModelVmlDrawingPartManager.bi);
            this.az(ExcelNamespace.a0, ObjectModelVmlDrawingPartManager.bj);
            this.az(ExcelNamespace.a2, ObjectModelVmlDrawingPartManager.bk);
            this.az(ExcelNamespace.a5, ObjectModelVmlDrawingPartManager.bl);
            this.az(ExcelNamespace.a8, ObjectModelVmlDrawingPartManager.bm);
            this.az(ExcelNamespace.a9, ObjectModelVmlDrawingPartManager.bn);
            this.az(ExcelNamespace.ba, ObjectModelVmlDrawingPartManager.bo);
            this.az(ExcelNamespace.bb, ObjectModelVmlDrawingPartManager.bp);
            this.az(ExcelNamespace.bc, ObjectModelVmlDrawingPartManager.bq);
            this.az(ExcelNamespace.bd, ObjectModelVmlDrawingPartManager.br);
            this.az(ExcelNamespace.be, ObjectModelVmlDrawingPartManager.bs);
            this.az(ExcelNamespace.bh, ObjectModelVmlDrawingPartManager.bu);
            this.az(ExcelNamespace.bj, ObjectModelVmlDrawingPartManager.bv);
            this.az(ExcelNamespace.bm, ObjectModelVmlDrawingPartManager.bx);
            this.az(ExcelNamespace.bn, ObjectModelVmlDrawingPartManager.by);
            this.az(ExcelNamespace.bo, ObjectModelVmlDrawingPartManager.bz);
            this.az(ExcelNamespace.bp, ObjectModelVmlDrawingPartManager.b0);
            this.az(ExcelNamespace.bs, ObjectModelVmlDrawingPartManager.b1);
            this.az(ExcelNamespace.bv, ObjectModelVmlDrawingPartManager.b2);
            this.az(ExcelNamespace.bw, ObjectModelVmlDrawingPartManager.b4);
            this.az(ExcelNamespace.bz, ObjectModelVmlDrawingPartManager.b6);
            this.az(ExcelNamespace.by, ObjectModelVmlDrawingPartManager.b5);
            this.az(ExcelNamespace.b1, ObjectModelVmlDrawingPartManager.b7);
            this.az(ExcelNamespace.b2, ObjectModelVmlDrawingPartManager.b8);
            this.az(ExcelNamespace.b3, ObjectModelVmlDrawingPartManager.cc);
            this.az(ExcelNamespace.b4, ObjectModelVmlDrawingPartManager.ce);
            this.az(ExcelNamespace.b5, ObjectModelVmlDrawingPartManager.cf);
            this.az(ExcelNamespace.b7, ObjectModelVmlDrawingPartManager.cg);
            this.az(ExcelNamespace.b9, ObjectModelVmlDrawingPartManager.ch);
        }
        z(a) {
            switch (a) {
                case "urn:schemas-microsoft-com:vml/textbox": return 2;
            }
            return super.z(a);
        }
        a() {
            let a = this.a9;
            let b = DocCoreUtils.c(this.l);
            a._b7._a4.addItem(a._d.uri.toString(), b);
            try {
                if (this.l.canSeek) {
                    this.l.position = 0;
                }
            }
            catch (c) {
            }
            if (this.l.canSeek == false || this.l.position != 0) {
                this.l = new MemoryStream(2, b);
            }
            return super.a();
        }
        aw(a) {
            let b = a.b.b.e(this.d);
            switch (b) {
                case "urn:schemas-microsoft-com:vml/textbox":
                    {
                        let c = this.s.a(LegacyShapeData.$);
                        if (c == null) {
                            return;
                        }
                        c.i = a;
                        break;
                    }
                default:
                    super.aw(a);
                    break;
            }
        }
        u(a) {
            let b = this.a9;
            let c = typeCast(LegacyDrawingHFInfo.$, a);
            if (c != null) {
                this.l.write(c.a, 0, c.a.length);
                return Async.d(LegacyShapeData.$, c.b, (d) => {
                    let e = d.f;
                    if (e == null) {
                        return null;
                    }
                    return b._b0(e.b, e.d, d.aq);
                });
            }
            this.dp(b._b9);
            return null;
        }
        get_aj() {
            return false;
        }
        static bc(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cb(a, c);
            c = d.p1;
            c = c.trim();
            let e = c.split(',');
            if (e.length != 8) {
                return;
            }
            let f = new Array(8);
            for (let g = 0; g < 8; g++) {
                let h = e[g];
                h = h.trim();
                let i;
                if (((() => { let j = tryParseInt32_1(h, i); i = j.p1; return j.ret; })()) == false) {
                    return;
                }
                b.b[g] = i;
            }
        }
        static bd(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cc(a, c);
            c = d.p1;
            b.n = toNullable(Boolean_$type, c);
        }
        static be(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cd(a, c);
            c = d.p1;
            b.o = toNullable(Boolean_$type, c);
        }
        static bf(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.ce(a, c);
            c = d.p1;
            b.p = toNullable(Boolean_$type, c);
        }
        static bg(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.ci(a, c);
            c = d.p1;
            b.q = toNullable(ST_CF_$type, c);
        }
        static bh(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cj(a, c);
            c = d.p1;
            b.r = toNullable(Number_$type, c);
        }
        static bi(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.ck(a, c);
            c = d.p1;
            b.j = c;
        }
        static bj(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cl(a, c);
            c = d.p1;
            b.s = toNullable(Boolean_$type, c);
        }
        static bk(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cn(a, c);
            c = d.p1;
            b.t = toNullable(Number_$type, c);
        }
        static bl(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cq(a, c);
            c = d.p1;
            b.u = toNullable(Boolean_$type, c);
        }
        static bm(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.ct(a, c);
            c = d.p1;
            b.v = toNullable(Number_$type, c);
        }
        static bn(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cu(a, c);
            c = d.p1;
            b.an = c;
        }
        static bo(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cv(a, c);
            c = d.p1;
            b.w = toNullable(Number_$type, c);
        }
        static bp(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cw(a, c);
            c = d.p1;
            b.x = toNullable(Boolean_$type, c);
        }
        static bq(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cx(a, c);
            c = d.p1;
            b.ao = c != null ? c : stringEmpty();
        }
        static br(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cy(a, c);
            c = d.p1;
            try {
                let e = ObjectModelVmlDrawingPartManager.ba(a);
                let f = e._by;
                let g = FormulaParser.l(f, a.s.a(Worksheet.$), null, -1, CultureInfo.invariantCulture, 1, 3);
                let h = WorkbookLoadManagerExcel2007._bs(c);
                c = h.p0;
                b.fmlaMacro = Formula._o(c, 3, g, e._b7._bi);
            }
            catch (i) {
            }
        }
        static bs(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.cz(a, c);
            c = d.p1;
            if (c == null) {
                c = stringEmpty();
            }
            b.ap = c;
        }
        static bt(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v;
            let w;
            let x;
            let y;
            let z;
            let aa = VmlNamespace.dr(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z);
            c = aa.p1;
            d = aa.p2;
            e = aa.p3;
            f = aa.p4;
            g = aa.p5;
            h = aa.p6;
            i = aa.p7;
            j = aa.p8;
            k = aa.p9;
            l = aa.p10;
            m = aa.p11;
            n = aa.p12;
            o = aa.p13;
            p = aa.p14;
            q = aa.p15;
            r = aa.p16;
            s = aa.p17;
            t = aa.p18;
            u = aa.p19;
            v = aa.p20;
            w = aa.p21;
            x = aa.p22;
            y = aa.p23;
            z = aa.p24;
            if (w == null) {
                return;
            }
            let ab = ObjectModelVmlDrawingPartManager.ba(a);
            let ac = typeCast(ImageData.$, ab._au(w));
            if (ac == null) {
                return;
            }
            b.aq = w;
            b.f = XlsxUtilities.v(ac);
        }
        static bu(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.c2(a, c);
            c = d.p1;
            b.y = toNullable(Number_$type, c);
        }
        static bv(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.c4(a, c);
            c = d.p1;
            b.ar = c;
        }
        static bw(a) {
            let b = a.s.a(LegacyShapeData.$);
            let c = a.s.a(LegacyShapeTypeData.$);
            if (b == null && c == null) {
                return;
            }
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p = OfficeNamespace.cj(a, d, e, f, g, h, i, j, k, l, m, n, o);
            d = p.p1;
            e = p.p2;
            f = p.p3;
            g = p.p4;
            h = p.p5;
            i = p.p6;
            j = p.p7;
            k = p.p8;
            l = p.p9;
            m = p.p10;
            n = p.p11;
            o = p.p12;
            let q = new LegacyShapeLockData();
            if (c != null) {
                c.a = q;
            }
            else if (b != null) {
                b.c = q;
            }
            q.a = d;
            q.c = o;
            q.b = i;
        }
        static bx(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.c7(a, c);
            c = d.p1;
            b.aa = toNullable(Boolean_$type, c);
        }
        static by(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.c8(a, c);
            c = d.p1;
            b.ab = toNullable(Number_$type, c);
        }
        static bz(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.c9(a, c);
            c = d.p1;
            b.ac = toNullable(Number_$type, c);
        }
        static b0(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.da(a, c);
            c = d.p1;
            b.ad = toNullable(Boolean_$type, c);
        }
        static b1(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.dd(a, c);
            c = d.p1;
            b.ae = toNullable(Boolean_$type, c);
        }
        static b2(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.de(a, c);
            c = d.p1;
            b.af = toNullable(Number_$type, c);
        }
        static b3(a) {
            let b = a.s.a(LegacyShapeData.$);
            let c = a.s.a(LegacyShapeTypeData.$);
            if (b == null && c == null) {
                return;
            }
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s = VmlNamespace.ds(a, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
            d = s.p1;
            e = s.p2;
            f = s.p3;
            g = s.p4;
            h = s.p5;
            i = s.p6;
            j = s.p7;
            k = s.p8;
            l = s.p9;
            m = s.p10;
            n = s.p11;
            o = s.p12;
            p = s.p13;
            q = s.p14;
            r = s.p15;
            let t = new LegacyShapePathData();
            if (c != null) {
                c.b = t;
            }
            else if (b != null) {
                b.d = t;
            }
            t.e = j;
            t.b = r;
            t.f = i;
            t.c = h;
            t.d = l;
            t.a = o;
        }
        static b4(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.df(a, c);
            c = d.p1;
            b.ag = toNullable(Boolean_$type, c);
        }
        static b5(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.dh(a, c);
            c = d.p1;
            b.ah = toNullable(Number_$type, c);
        }
        static b6(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.di(a, c);
            c = d.p1;
            b.ai = toNullable(Boolean_$type, c);
        }
        static b7(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.dk(a, c);
            c = d.p1;
            b.m = c;
        }
        static b8(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.dl(a, c);
            c = d.p1;
            b.as = c;
        }
        static b9(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n = VmlNamespace.dt(a, c, d, e, f, g, h, i, j, k, l, m);
            c = n.p1;
            d = n.p2;
            e = n.p3;
            f = n.p4;
            g = n.p5;
            h = n.p6;
            i = n.p7;
            j = n.p8;
            k = n.p9;
            l = n.p10;
            m = n.p11;
            b.k = true;
        }
        static ca(a) {
            let b = a.s.a(List$1.$.specialize(LegacyShapeData.$));
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v;
            let w;
            let x;
            let y;
            let z;
            let aa;
            let ab;
            let ac;
            let ad;
            let ae;
            let af;
            let ag;
            let ah;
            let ai;
            let aj;
            let ak;
            let al;
            let am;
            let an;
            let ao;
            let ap;
            let aq;
            let ar;
            let as;
            let at;
            let au;
            let av;
            let aw;
            let ax;
            let ay;
            let az;
            let a0;
            let a1;
            let a2;
            let a3;
            let a4;
            let a5;
            let a6;
            let a7;
            let a8 = VmlNamespace.du(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, a0, a1, a2, a3, a4, a5, a6, a7);
            c = a8.p1;
            d = a8.p2;
            e = a8.p3;
            f = a8.p4;
            g = a8.p5;
            h = a8.p6;
            i = a8.p7;
            j = a8.p8;
            k = a8.p9;
            l = a8.p10;
            m = a8.p11;
            n = a8.p12;
            o = a8.p13;
            p = a8.p14;
            q = a8.p15;
            r = a8.p16;
            s = a8.p17;
            t = a8.p18;
            u = a8.p19;
            v = a8.p20;
            w = a8.p21;
            x = a8.p22;
            y = a8.p23;
            z = a8.p24;
            aa = a8.p25;
            ab = a8.p26;
            ac = a8.p27;
            ad = a8.p28;
            ae = a8.p29;
            af = a8.p30;
            ag = a8.p31;
            ah = a8.p32;
            ai = a8.p33;
            aj = a8.p34;
            ak = a8.p35;
            al = a8.p36;
            am = a8.p37;
            an = a8.p38;
            ao = a8.p39;
            ap = a8.p40;
            aq = a8.p41;
            ar = a8.p42;
            as = a8.p43;
            at = a8.p44;
            au = a8.p45;
            av = a8.p46;
            aw = a8.p47;
            ax = a8.p48;
            ay = a8.p49;
            az = a8.p50;
            a0 = a8.p51;
            a1 = a8.p52;
            a2 = a8.p53;
            a3 = a8.p54;
            a4 = a8.p55;
            a5 = a8.p56;
            a6 = a8.p57;
            a7 = a8.p58;
            let a9 = ((() => {
                let $ret = new LegacyShapeData();
                $ret.at = c;
                $ret.au = n;
                $ret.az = a3;
                $ret.aw = d;
                $ret.ak = ao;
                $ret.av = ap;
                $ret.z = aj;
                return $ret;
            })());
            b.add(a9);
            a.s.k(a9);
        }
        static cb(a) {
            let b = a.s.a(List$1.$.specialize(LegacyShapeData.$));
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v;
            let w;
            let x;
            let y;
            let z;
            let aa;
            let ab;
            let ac;
            let ad;
            let ae;
            let af;
            let ag;
            let ah;
            let ai;
            let aj;
            let ak;
            let al;
            let am;
            let an;
            let ao;
            let ap;
            let aq;
            let ar;
            let as;
            let at;
            let au;
            let av;
            let aw;
            let ax;
            let ay;
            let az;
            let a0;
            let a1;
            let a2;
            let a3;
            let a4;
            let a5;
            let a6 = VmlNamespace.dv(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, a0, a1, a2, a3, a4, a5);
            c = a6.p1;
            d = a6.p2;
            e = a6.p3;
            f = a6.p4;
            g = a6.p5;
            h = a6.p6;
            i = a6.p7;
            j = a6.p8;
            k = a6.p9;
            l = a6.p10;
            m = a6.p11;
            n = a6.p12;
            o = a6.p13;
            p = a6.p14;
            q = a6.p15;
            r = a6.p16;
            s = a6.p17;
            t = a6.p18;
            u = a6.p19;
            v = a6.p20;
            w = a6.p21;
            x = a6.p22;
            y = a6.p23;
            z = a6.p24;
            aa = a6.p25;
            ab = a6.p26;
            ac = a6.p27;
            ad = a6.p28;
            ae = a6.p29;
            af = a6.p30;
            ag = a6.p31;
            ah = a6.p32;
            ai = a6.p33;
            aj = a6.p34;
            ak = a6.p35;
            al = a6.p36;
            am = a6.p37;
            an = a6.p38;
            ao = a6.p39;
            ap = a6.p40;
            aq = a6.p41;
            ar = a6.p42;
            as = a6.p43;
            at = a6.p44;
            au = a6.p45;
            av = a6.p46;
            aw = a6.p47;
            ax = a6.p48;
            ay = a6.p49;
            az = a6.p50;
            a0 = a6.p51;
            a1 = a6.p52;
            a2 = a6.p53;
            a3 = a6.p54;
            a4 = a6.p55;
            a5 = a6.p56;
            a.s.k(new LegacyShapeTypeData());
        }
        static cc(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.dm(a, c);
            c = d.p1;
            b.aj = toNullable(Boolean_$type, c);
        }
        static cd(a) {
            let b = a.s.a(LegacyShapeTypeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v;
            let w;
            let x;
            let y;
            let z;
            let aa;
            let ab;
            let ac;
            let ad;
            let ae;
            let af = VmlNamespace.dw(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae);
            c = af.p1;
            d = af.p2;
            e = af.p3;
            f = af.p4;
            g = af.p5;
            h = af.p6;
            i = af.p7;
            j = af.p8;
            k = af.p9;
            l = af.p10;
            m = af.p11;
            n = af.p12;
            o = af.p13;
            p = af.p14;
            q = af.p15;
            r = af.p16;
            s = af.p17;
            t = af.p18;
            u = af.p19;
            v = af.p20;
            w = af.p21;
            x = af.p22;
            y = af.p23;
            z = af.p24;
            aa = af.p25;
            ab = af.p26;
            ac = af.p27;
            ad = af.p28;
            ae = af.p29;
            b.c = ((() => {
                let $ret = new LegacyShapeStrokeData();
                $ret.a = j;
                return $ret;
            })());
        }
        static ce(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.dp(a, c);
            c = d.p1;
            b.ax = c != null ? c : stringEmpty();
        }
        static cf(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.dq(a, c);
            c = d.p1;
            b.ay = c != null ? c : stringEmpty();
        }
        static cg(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.ds(a, c);
            c = d.p1;
            b.al = toNullable(Number_$type, c);
        }
        static ch(a) {
            let b = a.s.a(LegacyShapeData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = ExcelNamespace.du(a, c);
            c = d.p1;
            b.am = toNullable(Boolean_$type, c);
        }
        static ci(a) {
            let b = new List$1(LegacyShapeData.$, 0);
            a.an = b;
            a.s.k(b);
        }
        cj(a) {
            ExcelNamespace.dw(this, stringJoin1(Number_$type, ", ", a.b));
            this.ad.k();
        }
        ck(a) {
            if (nullableEquals(a.n, null)) {
                return;
            }
            ExcelNamespace.dx(this, a.n.value);
            this.ad.k();
        }
        cl(a) {
            if (nullableEquals(a.o, null)) {
                return;
            }
            ExcelNamespace.dy(this, a.o.value);
            this.ad.k();
        }
        cm(a) {
            if (nullableEquals(a.p, null)) {
                return;
            }
            ExcelNamespace.dz(this, a.p.value);
            this.ad.k();
        }
        cn(a) {
            if (nullableEquals(a.q, null)) {
                return;
            }
            ExcelNamespace.d3(this, a.q.value);
            this.ad.k();
        }
        co(a) {
            if (nullableEquals(a.r, null)) {
                return;
            }
            ExcelNamespace.d4(this, a.r.value);
            this.ad.k();
        }
        cp(a, b) {
            ExcelNamespace.d5(this, b.j);
            this.c9(b.d);
            this.c2(b.c);
            if (b.i != null) {
                this.ad.t(b.i);
            }
            this.c6(b);
            this.di(b);
            this.cj(b);
            this.db(b);
            this.cr(b);
            this.dn(b);
            this.dc(b);
            this.cq(b);
            this.cs(b);
            this.da(b);
            this.ck(b);
            this.cl(b);
            this.dm(b);
            this.c5(b);
            this.c4(b);
            this.c0(b);
            this.c8(b);
            this.cv(b);
            this.cn(b);
            this.cm(b);
            this.c3(b);
            this.cx(b);
            this.cy(a, b);
            this.cz(b);
            this.dd(b);
            this.de(b);
            this.c1(b);
            this.cu(b);
            this.ct(b);
            this.dk(b);
            this.dl(b);
            this.co(b);
            this.c7(b);
            this.cw(b);
            this.ad.k();
        }
        cq(a) {
            if (nullableEquals(a.s, null)) {
                return;
            }
            ExcelNamespace.d6(this, a.s.value);
            this.ad.k();
        }
        cr(a) {
            if (nullableEquals(a.t, null)) {
                return;
            }
            ExcelNamespace.d8(this, a.t.value);
            this.ad.k();
        }
        cs(a) {
            if (nullableEquals(a.u, null)) {
                return;
            }
            ExcelNamespace.eb(this, a.u.value);
            this.ad.k();
        }
        ct(a) {
            if (a.v.hasValue == false) {
                return;
            }
            ExcelNamespace.ee(this, a.v.value);
            this.ad.k();
        }
        cu(a) {
            if (stringIsNullOrEmpty(a.an)) {
                return;
            }
            ExcelNamespace.ef(this, a.an);
            this.ad.k();
        }
        cv(a) {
            if (a.w.hasValue == false) {
                return;
            }
            ExcelNamespace.eg(this, a.w.value);
            this.ad.k();
        }
        cw(a) {
            if (nullableEquals(a.x, null)) {
                return;
            }
            ExcelNamespace.eh(this, a.x.value);
            this.ad.k();
        }
        cx(a) {
            if (stringIsNullOrEmpty(a.ao)) {
                return;
            }
            ExcelNamespace.ei(this, a.ao);
            this.ad.k();
        }
        cy(a, b) {
            if (b.fmlaMacro == null) {
                return;
            }
            ExcelNamespace.ej(this, a._cv(b.fmlaMacro));
            this.ad.k();
        }
        cz(a) {
            if (stringIsNullOrEmpty(a.ap)) {
                return;
            }
            ExcelNamespace.ek(this, a.ap);
            this.ad.k();
        }
        c0(a) {
            if (a.y.hasValue == false) {
                return;
            }
            ExcelNamespace.en(this, a.y.value);
            this.ad.k();
        }
        c1(a) {
            if (stringIsNullOrEmpty(a.ar)) {
                return;
            }
            ExcelNamespace.ep(this, a.ar);
            this.ad.k();
        }
        c2(a) {
            if (a == null) {
                return;
            }
            OfficeNamespace.cm(this, a.a, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), a.b, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), a.c);
            this.ad.k();
        }
        c4(a) {
            if (a.ab.hasValue == false) {
                return;
            }
            ExcelNamespace.et(this, a.ab.value);
            this.ad.k();
        }
        c5(a) {
            if (a.ac.hasValue == false) {
                return;
            }
            ExcelNamespace.eu(this, a.ac.value);
            this.ad.k();
        }
        c3(a) {
            if (nullableEquals(a.aa, null)) {
                return;
            }
            ExcelNamespace.es(this, a.aa.value);
            this.ad.k();
        }
        c6(a) {
            if (nullableEquals(a.ad, null)) {
                return;
            }
            ExcelNamespace.ev(this, a.ad.value);
            this.ad.k();
        }
        c7(a) {
            if (nullableEquals(a.ae, null)) {
                return;
            }
            ExcelNamespace.ey(this, a.ae.value);
            this.ad.k();
        }
        c8(a) {
            if (a.af.hasValue == false) {
                return;
            }
            ExcelNamespace.ez(this, a.af.value);
            this.ad.k();
        }
        c9(a) {
            if (a == null) {
                return;
            }
            VmlNamespace.d1(this, void 0, void 0, void 0, void 0, a.c, a.f, a.e, toNullable(Boolean_$type, null), a.d, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), a.a, void 0, void 0, a.b);
            this.ad.k();
        }
        da(a) {
            if (nullableEquals(a.ag, null)) {
                return;
            }
            ExcelNamespace.e0(this, a.ag.value);
            this.ad.k();
        }
        db(a) {
            if (nullableEquals(a.ah, null)) {
                return;
            }
            ExcelNamespace.e2(this, a.ah.value);
            this.ad.k();
        }
        dc(a) {
            if (nullableEquals(a.ai, null)) {
                return;
            }
            ExcelNamespace.e3(this, a.ai.value);
            this.ad.k();
        }
        dd(a) {
            if (stringIsNullOrEmpty(a.as)) {
                return;
            }
            ExcelNamespace.e5(this, a.m);
            this.ad.k();
        }
        de(a) {
            if (stringIsNullOrEmpty(a.as)) {
                return;
            }
            ExcelNamespace.e6(this, a.as);
            this.ad.k();
        }
        df() {
            VmlNamespace.d2(this, void 0, toNullable(Boolean_$type, true), toNullable(ST_ShadowType_$type, 0), toNullable(Boolean_$type, true), "black");
            this.ad.k();
        }
        dg(a, b) {
            let c = null;
            let d = typeCast(ShapeFillSolid.$, b.h._k);
            if (d != null) {
                c = ExcelUtils.d2(ExcelUtils.g3(d.colorInfo._aj(a._b, false)));
            }
            let e = toNullable(Boolean_$type, null);
            if (typeCast(ShapeFillNoFill.$, b.h._k) !== null) {
                e = toNullable(Boolean_$type, false);
            }
            (((f, g, h, i, j, k, l, m, n, o) => VmlNamespace.d3(f, g, h, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, toNullable(Boolean_$type, null), i, toNullable(Boolean_$type, null), void 0, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Number_$type, null), toNullable(ST_HrAlign_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), void 0, void 0, void 0, void 0, void 0, void 0, void 0, j, void 0, l, k, void 0, m, n, void 0, toNullable(Boolean_$type, null), toNullable(Number_$type, null), toNullable(ST_ConnectorType_$type, null), toNullable(ST_BWMode_$type, null), toNullable(ST_BWMode_$type, null), toNullable(ST_BWMode_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), o, void 0, void 0, void 0, void 0))(this, b.at, b.aw, b.au, b.z, c, e, b.ak, b.av, b.az));
            if (b.k) {
                this.df();
            }
            this.cp(a, b);
            this.ad.k();
        }
        dh(p) {
            VmlNamespace.d4(this, p.f, void 0, void 0, void 0, void 0, void 0, void 0, p.e, void 0, void 0, toNullable(Boolean_$type, null), void 0, toNullable(Boolean_$type, null), void 0, toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Number_$type, null), toNullable(ST_HrAlign_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), void 0, void 0, void 0, void 0, void 0, void 0, void 0, toNullable(ST_InsetMode_$type, null), void 0, toNullable(Boolean_$type, null), void 0, void 0, toNullable(Boolean_$type, null), void 0, void 0, toNullable(Boolean_$type, null), p.d, toNullable(ST_ConnectorType_$type, null), toNullable(ST_BWMode_$type, null), toNullable(ST_BWMode_$type, null), toNullable(ST_BWMode_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), toNullable(Boolean_$type, null), void 0, p.g);
            this.dj(p.c);
            this.c9(p.b);
            this.c2(p.a);
            this.ad.k();
        }
        di(p) {
            if (nullableEquals(p.aj, null)) {
                return;
            }
            ExcelNamespace.e7(this, p.aj.value);
            this.ad.k();
        }
        dj(p) {
            if (p == null) {
                return;
            }
            VmlNamespace.d5(this, void 0, toNullable(Boolean_$type, null), void 0, void 0, void 0, toNullable(ST_StrokeLineStyle_$type, null), toNullable(Number_$type, null), p.a);
            this.ad.k();
        }
        dk(p) {
            if (p.ax == null) {
                return;
            }
            ExcelNamespace.e9(this, p.ax);
            this.ad.k();
        }
        dl(p) {
            if (p.ay == null) {
                return;
            }
            ExcelNamespace.fa(this, p.ay);
            this.ad.k();
        }
        dm(p) {
            if (p.al.hasValue == false) {
                return;
            }
            ExcelNamespace.fc(this, p.al.value);
            this.ad.k();
        }
        dn(p) {
            if (nullableEquals(p.am, null)) {
                return;
            }
            ExcelNamespace.fe(this, p.am.value);
            this.ad.k();
        }
        dp(p) {
            let q = this.s.a(List$1.$.specialize(WorksheetShape.$));
            if (q == null) {
                return;
            }
            let r = this.a9;
            let s = new List$1(LegacyShapeData.$, 0);
            let t = false;
            let u = false;
            for (let v of fromEnum(q)) {
                let w = typeCast(UnknownShape.$, v);
                let x = null;
                if (w != null) {
                    x = w._eg;
                }
                else if (typeCast(WorksheetCellComment.$, v) !== null) {
                    x = new LegacyShapeData();
                }
                if (x != null) {
                    if (typeCast(WorksheetCellComment.$, v) !== null) {
                        t = true;
                    }
                    else {
                        u = true;
                    }
                    v._am(LegacyShapeData.$, Boolean_$type, ObjectModelVmlDrawingPartManager_UpdateLegacyShapeData.d, x);
                    s.add(x);
                }
                else {
                }
            }
            let y = new List$1(LegacyShapeTypeData.$, 0);
            if (t) {
                let z = new LegacyShapeTypeData();
                z.f = "_x0000_t202";
                z.e = "21600,21600";
                z.d = toNullable(Number_$type, 202);
                z.g = "m,l,21600r21600,l21600,xe";
                z.c = new LegacyShapeStrokeData();
                z.c.a = toNullable(ST_StrokeJoinStyle_$type, 2);
                z.b = new LegacyShapePathData();
                z.b.d = toNullable(Boolean_$type, true);
                z.b.a = toNullable(ST_ConnectType_$type, 1);
                y.add(z);
            }
            if (u) {
                let aa = new LegacyShapeTypeData();
                aa.f = "_x0000_t201";
                aa.e = "21600,21600";
                aa.d = toNullable(Number_$type, 201);
                aa.g = "m,l,21600r21600,l21600,xe";
                aa.c = new LegacyShapeStrokeData();
                aa.c.a = toNullable(ST_StrokeJoinStyle_$type, 2);
                aa.b = new LegacyShapePathData();
                aa.b.e = toNullable(Boolean_$type, false);
                aa.b.b = toNullable(Boolean_$type, false);
                aa.b.f = toNullable(Boolean_$type, false);
                aa.b.c = toNullable(Boolean_$type, false);
                aa.b.a = toNullable(ST_ConnectType_$type, 1);
                aa.a = new LegacyShapeLockData();
                aa.a.a = toNullable(ST_Ext_$type, 1);
                aa.a.c = toNullable(Boolean_$type, true);
                y.add(aa);
            }
            EmptyNamespace.ar(this);
            this.ad.l(ExcelNamespace.ao);
            y.q(runOn(this, this.dh));
            s.q((ab) => this.dg(p, ab));
            this.ad.k();
        }
        get a9() {
            return ObjectModelVmlDrawingPartManager.ba(this);
        }
        static ba(p) {
            return p.d;
        }
    }
    ObjectModelVmlDrawingPartManager.$t = /*@__PURE__*/ markType(ObjectModelVmlDrawingPartManager, 'ObjectModelVmlDrawingPartManager', VmlDrawingPartManager.$);
    ObjectModelVmlDrawingPartManager.bb = /*@__PURE__*/ new ObjectModelVmlDrawingPartManager();
    return ObjectModelVmlDrawingPartManager;
})();
/**
 * @hidden
 */
export let ObjectModelWorkbookPartManager = /*@__PURE__*/ (() => {
    class ObjectModelWorkbookPartManager extends ObjectModelWorkbookPartManagerBase {
        constructor() {
            super();
        }
        get_m() {
            return WorkbookPartManagerBase.a9;
        }
        get m() {
            return this.get_m();
        }
    }
    ObjectModelWorkbookPartManager.$t = /*@__PURE__*/ markType(ObjectModelWorkbookPartManager, 'ObjectModelWorkbookPartManager', ObjectModelWorkbookPartManagerBase.$);
    ObjectModelWorkbookPartManager.b8 = /*@__PURE__*/ new ObjectModelWorkbookPartManager();
    return ObjectModelWorkbookPartManager;
})();
(function (v) { callStaticConstructors(); })(true);
