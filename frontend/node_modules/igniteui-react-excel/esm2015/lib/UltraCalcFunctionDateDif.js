/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType } from "igniteui-react-core";
import { ErrorValue } from "./ErrorValue";
import { truncate } from "igniteui-react-core";
import { nullableAdd, nullableSubtract } from "igniteui-react-core";
import { dateGetMonth, dateFromValues } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionDateDif = /*@__PURE__*/ (() => {
    class UltraCalcFunctionDateDif extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c;
            c = a.pop();
            if (c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let d = c.toString().toLowerCase();
            c = a.pop();
            if (c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let e = Math.floor(c._toDouble3());
            c = a.pop();
            if (c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let f = Math.floor(c._toDouble3());
            if (f > e || f < 0) {
                return new ExcelCalcValue(ErrorValue.valueRangeOverflow);
            }
            let g = a._r;
            let h = ExcelCalcValue._excelDateToDateTime(g, f).value;
            let i = ExcelCalcValue._excelDateToDateTime(g, e).value;
            let j = h.getFullYear();
            let k = dateGetMonth(h);
            let l = h.getDate();
            let m = i.getFullYear();
            let n = dateGetMonth(i);
            let o = i.getDate();
            let p = 0;
            switch (d) {
                case "y":
                    p = m - j;
                    if (n < k || (n == k && o < l)) {
                        p--;
                    }
                    break;
                case "m":
                    p = (m * 12 + n) - (j * 12 + k);
                    if (o < l) {
                        p--;
                    }
                    break;
                case "d":
                    p = truncate((e - f));
                    break;
                case "md":
                    if (l <= o) {
                        p = o - l;
                    }
                    else {
                        let q = n == 1 ? m - 1 : m;
                        let r = n == 1 ? 12 : n - 1;
                        let s = dateFromValues(q, r, 1, 0, 0, 0, 0);
                        let t = nullableSubtract(nullableAdd(ExcelCalcValue._dateTimeToExcelDate(g, s), l), 1);
                        p = (nullableSubtract(e, t)).value;
                    }
                    break;
                case "ym":
                    p = (n + 12) - k;
                    if (o < l) {
                        p--;
                    }
                    p = p % 12;
                    break;
                case "yd":
                    if (k == n && l <= o) {
                        p = o - l;
                    }
                    else {
                        let u = n < k || k == n ? j + 1 : j;
                        let v = dateFromValues(u, n, 1, 0, 0, 0, 0);
                        let w = nullableSubtract(nullableAdd(ExcelCalcValue._dateTimeToExcelDate(g, v), o), 1);
                        p = (nullableSubtract(w, f)).value;
                    }
                    break;
                default: return new ExcelCalcValue(ErrorValue.valueRangeOverflow);
            }
            return new ExcelCalcValue(p);
        }
        get_name() {
            return "datedif";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 3;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 3;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
    }
    UltraCalcFunctionDateDif.$t = /*@__PURE__*/ markType(UltraCalcFunctionDateDif, 'UltraCalcFunctionDateDif', BuiltInFunctionBase.$);
    return UltraCalcFunctionDateDif;
})();
