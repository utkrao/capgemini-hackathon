/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_SeriesElementVisibilities = /*@__PURE__*/ (() => {
    class CT_SeriesElementVisibilities extends Base {
        constructor() {
            super(...arguments);
            this.c = toNullable(Boolean_$type, null);
            this.e = toNullable(Boolean_$type, null);
            this.g = toNullable(Boolean_$type, null);
            this.i = toNullable(Boolean_$type, null);
            this.k = toNullable(Boolean_$type, null);
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        static a(a) {
            let b = toNullable(Boolean_$type, null);
            let c = toNullable(Boolean_$type, null);
            let d = toNullable(Boolean_$type, null);
            let e = toNullable(Boolean_$type, null);
            let f = toNullable(Boolean_$type, null);
            let g = CT_SeriesElementVisibilities.m(a, b, c, d, e, f);
            b = g.p1;
            c = g.p2;
            d = g.p3;
            e = g.p4;
            f = g.p5;
            return ((() => {
                let $ret = new CT_SeriesElementVisibilities();
                $ret.b = b;
                $ret.d = c;
                $ret.f = d;
                $ret.h = e;
                $ret.j = f;
                return $ret;
            })());
        }
        static m(a, b, c, d, e, f) {
            b = toNullable(Boolean_$type, null);
            c = toNullable(Boolean_$type, null);
            d = toNullable(Boolean_$type, null);
            e = toNullable(Boolean_$type, null);
            f = toNullable(Boolean_$type, null);
            for (let g of fromEnum(a.ab.u)) {
                switch (g.a.e(a.d)) {
                    case "connectorLines":
                        b = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "meanLine":
                        c = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "meanMarker":
                        d = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "nonoutliers":
                        e = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "outliers":
                        f = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        static n(a, b, c = toNullable(Boolean_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(Boolean_$type, null), f = toNullable(Boolean_$type, null), g = toNullable(Boolean_$type, null)) {
            a.ad.p(b, "cx");
            let h = null;
            let i = null;
            if (c.hasValue) {
                i = "connectorLines";
                h = ST_OnOff.g(c.value);
                a.ad.h(i, h);
            }
            if (d.hasValue) {
                i = "meanLine";
                h = ST_OnOff.g(d.value);
                a.ad.h(i, h);
            }
            if (e.hasValue) {
                i = "meanMarker";
                h = ST_OnOff.g(e.value);
                a.ad.h(i, h);
            }
            if (f.hasValue) {
                i = "nonoutliers";
                h = ST_OnOff.g(f.value);
                a.ad.h(i, h);
            }
            if (g.hasValue) {
                i = "outliers";
                h = ST_OnOff.g(g.value);
                a.ad.h(i, h);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_SeriesElementVisibilities.$t = /*@__PURE__*/ markType(CT_SeriesElementVisibilities, 'CT_SeriesElementVisibilities');
    return CT_SeriesElementVisibilities;
})();
