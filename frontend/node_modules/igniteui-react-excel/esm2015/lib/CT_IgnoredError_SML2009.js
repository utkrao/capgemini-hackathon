/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_IgnoredError_SML2009 = /*@__PURE__*/ (() => {
    class CT_IgnoredError_SML2009 extends Base {
        constructor() {
            super();
            this.b = null;
            this.q = toNullable(Boolean_$type, null);
            this.aa = toNullable(Boolean_$type, null);
            this.y = toNullable(Boolean_$type, null);
            this.s = toNullable(Boolean_$type, null);
            this.u = toNullable(Boolean_$type, null);
            this.ac = toNullable(Boolean_$type, null);
            this.o = toNullable(Boolean_$type, null);
            this.w = toNullable(Boolean_$type, null);
            this.m = toNullable(Boolean_$type, null);
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get z() {
            return this.aa;
        }
        set z(a) {
            this.aa = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get ab() {
            return this.ac;
        }
        set ab(a) {
            this.ac = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        static ad(a, b, c, d, e, f, g, h, i, j) {
            b = toNullable(Boolean_$type, null);
            c = toNullable(Boolean_$type, null);
            d = toNullable(Boolean_$type, null);
            e = toNullable(Boolean_$type, null);
            f = toNullable(Boolean_$type, null);
            g = toNullable(Boolean_$type, null);
            h = toNullable(Boolean_$type, null);
            i = toNullable(Boolean_$type, null);
            j = toNullable(Boolean_$type, null);
            for (let k of fromEnum(a.ab.u)) {
                switch (k.a.e(a.d)) {
                    case "evalError":
                        b = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "twoDigitTextYear":
                        c = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "numberStoredAsText":
                        d = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "formula":
                        e = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "formulaRange":
                        f = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "unlockedFormula":
                        g = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "emptyCellReference":
                        h = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "listDataValidation":
                        i = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "calculatedColumn":
                        j = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j
            };
        }
        static ae(a, b, c = toNullable(Boolean_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(Boolean_$type, null), f = toNullable(Boolean_$type, null), g = toNullable(Boolean_$type, null), h = toNullable(Boolean_$type, null), i = toNullable(Boolean_$type, null), j = toNullable(Boolean_$type, null), k = toNullable(Boolean_$type, null)) {
            a.ad.p(b, null);
            let l = null;
            let m = null;
            if (c.hasValue) {
                m = "calculatedColumn";
                l = ST_OnOff.g(c.value);
                a.ad.h(m, l);
            }
            if (d.hasValue) {
                m = "emptyCellReference";
                l = ST_OnOff.g(d.value);
                a.ad.h(m, l);
            }
            if (e.hasValue) {
                m = "evalError";
                l = ST_OnOff.g(e.value);
                a.ad.h(m, l);
            }
            if (f.hasValue) {
                m = "formula";
                l = ST_OnOff.g(f.value);
                a.ad.h(m, l);
            }
            if (g.hasValue) {
                m = "formulaRange";
                l = ST_OnOff.g(g.value);
                a.ad.h(m, l);
            }
            if (h.hasValue) {
                m = "listDataValidation";
                l = ST_OnOff.g(h.value);
                a.ad.h(m, l);
            }
            if (i.hasValue) {
                m = "numberStoredAsText";
                l = ST_OnOff.g(i.value);
                a.ad.h(m, l);
            }
            if (j.hasValue) {
                m = "twoDigitTextYear";
                l = ST_OnOff.g(j.value);
                a.ad.h(m, l);
            }
            if (k.hasValue) {
                m = "unlockedFormula";
                l = ST_OnOff.g(k.value);
                a.ad.h(m, l);
            }
            ;
        }
    }
    CT_IgnoredError_SML2009.$t = /*@__PURE__*/ markType(CT_IgnoredError_SML2009, 'CT_IgnoredError_SML2009');
    return CT_IgnoredError_SML2009;
})();
