/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_ShapeNonVisual } from "./CT_ShapeNonVisual";
import { CT_ShapeProperties_DML } from "./CT_ShapeProperties_DML";
import { CT_ShapeStyle } from "./CT_ShapeStyle";
import { CT_TextBody_DML } from "./CT_TextBody_DML";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_Shape_ChartDrawing = /*@__PURE__*/ (() => {
    class CT_Shape_ChartDrawing extends Base {
        constructor() {
            super();
            this.o = null;
            this.p = null;
            this.k = toNullable(Boolean_$type, null);
            this.l = toNullable(Boolean_$type, null);
            this.e = null;
            this.a = null;
            this.g = null;
            this.c = null;
        }
        get q() {
            return this.o;
        }
        set q(a) {
            this.o = a;
        }
        get r() {
            return this.p;
        }
        set r(a) {
            this.p = a;
        }
        get m() {
            return this.k;
        }
        set m(a) {
            this.k = a;
        }
        get n() {
            return this.l;
        }
        set n(a) {
            this.l = a;
        }
        get f() {
            return this.e;
        }
        set f(a) {
            this.e = a;
        }
        get b() {
            return this.a;
        }
        set b(a) {
            this.a = a;
        }
        get h() {
            return this.g;
        }
        set h(a) {
            this.g = a;
        }
        get d() {
            return this.c;
        }
        set d(a) {
            this.c = a;
        }
        static t(a, b, c, d, e) {
            b = null;
            c = null;
            d = toNullable(Boolean_$type, null);
            e = toNullable(Boolean_$type, null);
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "macro":
                        b = f.d;
                        break;
                    case "textlink":
                        c = f.d;
                        break;
                    case "fLocksText":
                        d = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    case "fPublished":
                        e = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        static u(a, b, c = toNullable(Boolean_$type, null), d = toNullable(Boolean_$type, null), e = null, f = null) {
            a.ad.p(b, "cd");
            let g = null;
            let h = null;
            if (c.hasValue) {
                h = "fLocksText";
                g = ST_OnOff.g(c.value);
                a.ad.h(h, g);
            }
            if (d.hasValue) {
                h = "fPublished";
                g = ST_OnOff.g(d.value);
                a.ad.h(h, g);
            }
            if (e != null) {
                h = "macro";
                g = e;
                a.ad.h(h, g);
            }
            if (f != null) {
                h = "textlink";
                g = f;
                a.ad.h(h, g);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1106:
                    this.f = typeCast(CT_ShapeNonVisual.$, b);
                    break;
                case 1570:
                    this.b = typeCast(CT_ShapeProperties_DML.$, b);
                    break;
                case 1618:
                    this.h = typeCast(CT_ShapeStyle.$, b);
                    break;
                case 1777:
                    this.d = typeCast(CT_TextBody_DML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Shape_ChartDrawing.$t = /*@__PURE__*/ markType(CT_Shape_ChartDrawing, 'CT_Shape_ChartDrawing', Base.$, [ISupportSetProperty_$type]);
    return CT_Shape_ChartDrawing;
})();
