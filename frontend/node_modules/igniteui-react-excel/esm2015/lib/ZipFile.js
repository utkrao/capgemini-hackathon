/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ExternalEventWorkItem$1 } from "./ExternalEventWorkItem$1";
import { ExternalEventWorkItem } from "./ExternalEventWorkItem";
import { BaseError, Base, Stream, typeCast, fromEnum, markType } from "igniteui-react-core";
import { IZipFile_$type } from "./IZipFile";
import { List$1 } from "igniteui-react-core";
import { IZipEntry_$type } from "./IZipEntry";
import { ZipEntry } from "./ZipEntry";
import { MemoryStream } from "igniteui-react-core";
import { b64toUint8Array } from "igniteui-react-core";
import * as JSZip from "jszip/dist/jszip";
/**
 * @hidden
 */
export let ZipFile = /*@__PURE__*/ (() => {
    class ZipFile extends Base {
        constructor() {
            super();
            this.b = new List$1(IZipEntry_$type, 0);
            this.c = null;
            this.c = typeof JSZip.default === "function" ? new JSZip.default() : new JSZip();
        }
        createFile(fileName, directoryName, stream) {
            arguments[2] = (typeof arguments[2] === 'string' ? b64toUint8Array(arguments[2]) : arguments[2]);
            arguments[2] = (typeCast(Stream.$, arguments[2]) ? arguments[2] : new MemoryStream(2, arguments[2]));
            return this._createFile$i.apply(this, arguments);
        }
        _createFile$i(a, b, c) {
            return ZipEntry.a(a, b, c);
        }
        load(stream) {
            arguments[0] = (typeof arguments[0] === 'string' ? b64toUint8Array(arguments[0]) : arguments[0]);
            arguments[0] = (typeCast(Stream.$, arguments[0]) ? arguments[0] : new MemoryStream(2, arguments[0]));
            return this._load$i.apply(this, arguments);
        }
        _load$i(a) {
            let b = null;
            let c = typeCast(MemoryStream.$, a);
            if (c != null) {
                b = c.getBuffer();
                if (b.length != a.length) {
                    b = null;
                }
            }
            if (b == null) {
                b = new Array(a.length);
                a.read(b, 0, b.length);
            }
            let d = new ExternalEventWorkItem$1(IZipFile_$type);
            let e = (f) => {
                let g = this.c.files;
                let h = ZipFile.a(g);
                for (let i = 0; i < h.length; i++) {
                    this.b.add(new ZipEntry(0, h[i]));
                }
                d.ag(this);
            };
            let f = (g) => d.ag(null, new BaseError(1, g != null ? g.toString() : "Load error"));
            this.c.loadAsync(b).then(e, f);
            return d;
        }
        static a(a) {
            if (Object.getPrototypeOf(a) == null) {
                a = Object.assign({}, a);
            }
            var result = [];
            for (var i in a) {
                if (a.hasOwnProperty(i)) {
                    result.push(a[i]);
                }
            }
            ;
            return (result);
        }
        get entries() {
            return this.b;
        }
        save(stream) {
            arguments[0] = (typeof arguments[0] === 'string' ? b64toUint8Array(arguments[0]) : arguments[0]);
            arguments[0] = (typeCast(Stream.$, arguments[0]) ? arguments[0] : new MemoryStream(2, arguments[0]));
            return this._save$i.apply(this, arguments);
        }
        _save$i(a) {
            for (let b of fromEnum(this.b)) {
                let c = b;
                let d = c.name;
                if (d.charAt(0) == '/') {
                    d = d.substr(1);
                }
                if (c.isDirectory) {
                    this.c.folder(d);
                }
                else {
                    let e = new Array(c.b.length);
                    c.b.position = 0;
                    c.b.read(e, 0, e.length);
                    this.c.file(d, e);
                }
            }
            let f = (JSZip.support.uint8array) ? "uint8array" : "array";
            let g = new ExternalEventWorkItem();
            let h = (i) => {
                let j = i;
                a.write(j, 0, j.length);
                g.af();
            };
            let i = (j) => g.af(new BaseError(1, j != null ? j.toString() : "Load error"));
            this.c.generateAsync({ type: f, compression: 'DEFLATE' }).then(h, i);
            return g;
        }
    }
    ZipFile.$t = /*@__PURE__*/ markType(ZipFile, 'ZipFile', Base.$, [IZipFile_$type]);
    return ZipFile;
})();
