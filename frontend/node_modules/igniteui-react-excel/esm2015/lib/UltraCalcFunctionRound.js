/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { MathUtilities } from "./MathUtilities";
import { markType } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionRound = /*@__PURE__*/ (() => {
    class UltraCalcFunctionRound extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = null;
            if (b == 3) {
                c = a.pop();
            }
            let d = a.pop();
            let e = a.pop();
            if (d.isError) {
                return new ExcelCalcValue(d.toErrorValue());
            }
            if (e.isError) {
                return new ExcelCalcValue(e.toErrorValue());
            }
            if (c != null && c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let f;
            if (!((() => { let g = d._toDouble1(f); f = g.p0; return g.ret; })())) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            let g;
            if (!((() => { let h = e._toDouble1(g); g = h.p0; return h.ret; })())) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            if (true) {
                g = MathUtilities.i(g);
            }
            let h = 0;
            if (c != null) {
                if (!((() => { let i = c._toDouble1(h); h = i.p0; return i.ret; })())) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                }
                if (truncate(h) < 0 || truncate(h) > 1) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                }
            }
            return new ExcelCalcValue(UltraCalcFunctionRound._al(g, truncate(f), truncate(h)));
        }
        get_name() {
            return "round";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 2;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 2;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        static _ak(a, b) {
            return UltraCalcFunctionRound._al(a, b, 0);
        }
        static _al(a, b, c) {
            if (c == 0) {
                return MathUtilities.g(a, b);
            }
            if (b <= 15) {
                return round10N(a, b);
            }
            let d = Math.pow(10, b);
            let e = MathUtilities.i(a * d);
            return Math.round(e) / d;
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return true;
        }
    }
    UltraCalcFunctionRound.$t = /*@__PURE__*/ markType(UltraCalcFunctionRound, 'UltraCalcFunctionRound', BuiltInFunctionBase.$);
    return UltraCalcFunctionRound;
})();
