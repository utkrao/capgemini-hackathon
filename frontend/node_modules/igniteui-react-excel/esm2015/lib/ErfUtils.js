/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { isNaN_, isPositiveInfinity, isNegativeInfinity } from "igniteui-react-core";
/**
 * @hidden
 */
export let ErfUtils = /*@__PURE__*/ (() => {
    class ErfUtils extends Base {
        static bb(a) {
            let b = new ArrayBuffer(8);
            ;
            let c = new Float64Array(b);
            let d = new Int32Array(b);
            c[0] = a;
            return (d[1]);
        }
        static a8(a) {
            let b = new ArrayBuffer(8);
            ;
            let c = new Float64Array(b);
            let d = new Int32Array(b);
            c[0] = a;
            d[0] = 0;
            return (c[0]);
        }
        static c(a) {
            if (isNaN_(a)) {
                return NaN;
            }
            if (isPositiveInfinity(a)) {
                return 1;
            }
            if (isNegativeInfinity(a)) {
                return -1;
            }
            let b, c;
            let d, e, f, g, h, i, j, k;
            b = ErfUtils.bb(a);
            c = b & 2147483647;
            if (c < 1072365568) {
                if (c < 1043333120) {
                    if (c < 8388608) {
                        return (8 * a + 1.0270333367641007 * a) / 8;
                    }
                    return a + 0.12837916709551259 * a;
                }
                j = a * a;
                k = 0.12837916709551256 + j * (-0.3250421072470015 + j * (-0.02848174957559851 + j * (-0.0057702702964894416 + j * -2.3763016656650163E-05)));
                h = 1 + j * (0.39791722395915535 + j * (0.0650222499887673 + j * (0.0050813062818757656 + j * (0.00013249473800432165 + j * -3.9602282787753681E-06))));
                i = k / h;
                return a + a * i;
            }
            if (c < 1072955392) {
                h = Math.abs(a) - 1;
                f = -0.0023621185607526594 + h * (0.41485611868374833 + h * (-0.37220787603570132 + h * (0.31834661990116175 + h * (-0.11089469428239668 + h * (0.035478304325618236 + h * -0.0021663755948687908)))));
                g = 1 + h * (0.10642088040084423 + h * (0.540397917702171 + h * (0.071828654414196266 + h * (0.12617121980876164 + h * (0.013637083912029051 + h * 0.011984499846799107)))));
                if (b >= 0) {
                    return 0.84506291151046753 + f / g;
                }
                else {
                    return -0.84506291151046753 - f / g;
                }
            }
            if (c >= 1075314688) {
                if (b >= 0) {
                    return 1 - 1E-300;
                }
                else {
                    return 1E-300 - 1;
                }
            }
            a = Math.abs(a);
            h = 1 / (a * a);
            if (c < 1074191214) {
                d = -0.0098649440348471482 + h * (-0.69385857270718176 + h * (-10.558626225323291 + h * (-62.375332450326006 + h * (-162.39666946257347 + h * (-184.60509290671104 + h * (-81.2874355063066 + h * -9.8143293441691455))))));
                e = 1 + h * (19.651271667439257 + h * (137.65775414351904 + h * (434.56587747522923 + h * (645.38727173326788 + h * (429.00814002756783 + h * (108.63500554177944 + h * (6.5702497703192817 + h * -0.0604244152148581)))))));
            }
            else {
                d = -0.0098649429247001 + h * (-0.799283237680523 + h * (-17.757954917754752 + h * (-160.63638485582192 + h * (-637.56644336838963 + h * (-1025.0951316110773 + h * -483.5191916086514)))));
                e = 1 + h * (30.338060743482458 + h * (325.79251299657392 + h * (1536.729586084437 + h * (3199.8582195085955 + h * (2553.0504064331644 + h * (474.52854120695537 + h * -22.440952446585818))))));
            }
            j = ErfUtils.a8(a);
            k = Math.exp(-j * j - 0.5625) * Math.exp((j - a) * (j + a) + d / e);
            if (b >= 0) {
                return 1 - k / a;
            }
            else {
                return k / a - 1;
            }
        }
        static d(a) {
            if (isNaN_(a)) {
                return NaN;
            }
            if (isPositiveInfinity(a)) {
                return 0;
            }
            if (isNegativeInfinity(a)) {
                return 2;
            }
            let b, c;
            let d, e, f, g, h, i, j, k;
            b = ErfUtils.bb(a);
            c = b & 2147483647;
            if (c < 1072365568) {
                if (c < 1013972992) {
                    return 1 - a;
                }
                j = a * a;
                k = 0.12837916709551256 + j * (-0.3250421072470015 + j * (-0.02848174957559851 + j * (-0.0057702702964894416 + j * -2.3763016656650163E-05)));
                h = 1 + j * (0.39791722395915535 + j * (0.0650222499887673 + j * (0.0050813062818757656 + j * (0.00013249473800432165 + j * -3.9602282787753681E-06))));
                i = k / h;
                if (b < 1070596096) {
                    return 1 - (a + a * i);
                }
                else {
                    k = a * i;
                    k += (a - 0.5);
                    return 0.5 - k;
                }
            }
            if (c < 1072955392) {
                h = Math.abs(a) - 1;
                f = -0.0023621185607526594 + h * (0.41485611868374833 + h * (-0.37220787603570132 + h * (0.31834661990116175 + h * (-0.11089469428239668 + h * (0.035478304325618236 + h * -0.0021663755948687908)))));
                g = 1 + h * (0.10642088040084423 + h * (0.540397917702171 + h * (0.071828654414196266 + h * (0.12617121980876164 + h * (0.013637083912029051 + h * 0.011984499846799107)))));
                if (b >= 0) {
                    j = 1 - 0.84506291151046753;
                    return j - f / g;
                }
                else {
                    j = 0.84506291151046753 + f / g;
                    return 1 + j;
                }
            }
            if (c < 1077673984) {
                a = Math.abs(a);
                h = 1 / (a * a);
                if (c < 1074191213) {
                    d = -0.0098649440348471482 + h * (-0.69385857270718176 + h * (-10.558626225323291 + h * (-62.375332450326006 + h * (-162.39666946257347 + h * (-184.60509290671104 + h * (-81.2874355063066 + h * -9.8143293441691455))))));
                    e = 1 + h * (19.651271667439257 + h * (137.65775414351904 + h * (434.56587747522923 + h * (645.38727173326788 + h * (429.00814002756783 + h * (108.63500554177944 + h * (6.5702497703192817 + h * -0.0604244152148581)))))));
                }
                else {
                    if (b < 0 && c >= 1075314688) {
                        return 2 - 1E-300;
                    }
                    d = -0.0098649429247001 + h * (-0.799283237680523 + h * (-17.757954917754752 + h * (-160.63638485582192 + h * (-637.56644336838963 + h * (-1025.0951316110773 + h * -483.5191916086514)))));
                    e = 1 + h * (30.338060743482458 + h * (325.79251299657392 + h * (1536.729586084437 + h * (3199.8582195085955 + h * (2553.0504064331644 + h * (474.52854120695537 + h * -22.440952446585818))))));
                }
                j = ErfUtils.a8(a);
                k = Math.exp(-j * j - 0.5625) * Math.exp((j - a) * (j + a) + d / e);
                if (b > 0) {
                    return k / a;
                }
                else {
                    return 2 - k / a;
                }
            }
            else {
                if (b > 0) {
                    return 1E-300 * 1E-300;
                }
                else {
                    return 2 - 1E-300;
                }
            }
        }
    }
    ErfUtils.$t = /*@__PURE__*/ markType(ErfUtils, 'ErfUtils');
    return ErfUtils;
})();
