/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { MathUtilities } from "./MathUtilities";
import { Base, markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionPercentRankBase = /*@__PURE__*/ (() => {
    class UltraCalcFunctionPercentRankBase extends BuiltInFunctionBase {
        static _ak(a, b, c) {
            let d = 3;
            if (b == 3) {
                let e = a.pop();
                d = e._toInt();
                if (d < 1) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                }
            }
            let f = a.pop();
            let g = a.pop();
            if (f.isError) {
                return new ExcelCalcValue(f.toErrorValue());
            }
            let h = f._toDouble3();
            let i = g.toArrayProxy();
            let j = i.getLength(0);
            let k = i.getLength(1);
            let l, m, n;
            l = m = n = 0;
            let o = Number.POSITIVE_INFINITY;
            let p = Number.NEGATIVE_INFINITY;
            let q, r;
            q = r = 0;
            for (let s = 0; s < j; s++) {
                for (let t = 0; t < k; t++) {
                    let u = i.item(s, t);
                    if (u.isError) {
                        return new ExcelCalcValue(u.toErrorValue());
                    }
                    if (u.isNull || u.isString || u.isBoolean) {
                        l++;
                    }
                    else {
                        let v = u._toDouble3();
                        let w = Base.compareSimple(h, v);
                        if (w == 0) {
                            if (n == 0) {
                                m += r;
                                r = q = 0;
                            }
                            n++;
                        }
                        else if (w < 0) {
                            if (n == 0) {
                                w = Base.compareSimple(o, v);
                                if (w == 0) {
                                    q++;
                                }
                                else if (w > 0) {
                                    q = 1;
                                    o = v;
                                }
                            }
                        }
                        else {
                            if (n != 0) {
                                m++;
                            }
                            else {
                                w = Base.compareSimple(v, p);
                                if (w < 0) {
                                    m++;
                                }
                                else if (w == 0) {
                                    r++;
                                }
                                else {
                                    m += r;
                                    r = 1;
                                    p = v;
                                }
                            }
                        }
                    }
                }
            }
            let x = (k * j) - l;
            if (x == 0) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(3));
            }
            if (x == n) {
                return new ExcelCalcValue(x == 1 ? 1 : 0);
            }
            let y;
            if (c) {
                m++;
                x += 2;
            }
            if (n == 0) {
                if (q == 0 || r == 0) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(3));
                }
                let z = (m + r - 1) / (x - 1);
                let aa = (m + r) / (x - 1);
                let ab = (h - p) / (o - p);
                y = z + ab * (aa - z);
            }
            else if (m == 0) {
                y = 0;
            }
            else {
                y = m / (x - 1);
            }
            y = MathUtilities.k(y, d);
            return new ExcelCalcValue(y);
        }
        get_maxArgs() {
            return 3;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        get_minArgs() {
            return 2;
        }
        get minArgs() {
            return this.get_minArgs();
        }
    }
    UltraCalcFunctionPercentRankBase.$t = /*@__PURE__*/ markType(UltraCalcFunctionPercentRankBase, 'UltraCalcFunctionPercentRankBase', BuiltInFunctionBase.$);
    return UltraCalcFunctionPercentRankBase;
})();
