/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { List$1 } from "igniteui-react-core";
import { CT_NumericValue } from "./CT_NumericValue";
import { CultureInfo } from "igniteui-react-core";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_NumericLevel = /*@__PURE__*/ (() => {
    class CT_NumericLevel extends Base {
        constructor() {
            super();
            this.b = null;
            this.i = 0;
            this.d = null;
            this.f = null;
            this.a = null;
            this.a = new List$1(CT_NumericValue.$, 0);
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        static j(a, b, c, d) {
            b = 0;
            c = null;
            d = null;
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "ptCount":
                        b = parseUInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    case "formatCode":
                        c = e.d;
                        break;
                    case "name":
                        d = e.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static k(a, b, c, d, e) {
            a.ad.p(b, "cx");
            let f = null;
            let g = null;
            if (c != null) {
                g = "formatCode";
                f = c;
                a.ad.h(g, f);
            }
            if (d != null) {
                g = "name";
                f = d;
                a.ad.h(g, f);
            }
            g = "ptCount";
            f = e.toString();
            a.ad.h(g, f);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1277:
                    this.a.add(typeCast(CT_NumericValue.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_NumericLevel.$t = /*@__PURE__*/ markType(CT_NumericLevel, 'CT_NumericLevel', Base.$, [ISupportSetProperty_$type]);
    return CT_NumericLevel;
})();
