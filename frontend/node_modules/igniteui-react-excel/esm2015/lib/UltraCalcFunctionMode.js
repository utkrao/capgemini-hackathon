/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { Base, runOn, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { CalcFunctionUtilities } from "./CalcFunctionUtilities";
import { CalcArgumentHelper } from "./CalcArgumentHelper";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
/**
 * @hidden
 */
export let UltraCalcFunctionMode = /*@__PURE__*/ (() => {
    class UltraCalcFunctionMode extends BuiltInFunctionBase {
        evaluate(a, b) {
            return UltraCalcFunctionMode._ak(a, b, false);
        }
        static _ak(a, b, c) {
            let d = CalcFunctionUtilities.p(b);
            let e = CalcFunctionUtilities.o(b);
            try {
                for (let f = 0; f < b; f++) {
                    d.add(a.pop());
                }
                d.w();
                for (let g = 0; g < d.count; g++) {
                    let h = d._inner[g];
                    if (h.isError) {
                        return new ExcelCalcValue(h.toErrorValue());
                    }
                    let i = h.isArray || h.isArrayGroup || (h.isReference && h.toReference().isEnumerable);
                    if (i) {
                        let j = CalcArgumentHelper.c(h, 0, 1101, runOn(e, e.add));
                        if (j != null) {
                            return j;
                        }
                        continue;
                    }
                    if (h.isBoolean || h.isString || h.isNull) {
                        return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                    }
                    e.add(h._toDouble3());
                }
                let k = new Dictionary$2(Number_$type, Number_$type, 0);
                let l = 0;
                for (let m = 0; m < e.count; m++) {
                    let n = e._inner[m];
                    let o;
                    if (!((() => { let p = k.tryGetValue(n, o); o = p.p1; return p.ret; })())) {
                        k.item(n, 1);
                    }
                    else {
                        k.item(n, o + 1);
                        if (o + 1 > l) {
                            l = o + 1;
                        }
                    }
                }
                if (l == 0) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(3));
                }
                let p = new List$1(Number_$type, 0);
                for (let q of fromEnum(k)) {
                    if (q.value == l) {
                        p.add(q.key);
                    }
                }
                if (p.count > 1) {
                    p.aa((r, s) => {
                        let t = e.indexOf(r);
                        let u = e.indexOf(s);
                        return Base.compareSimple(t, u);
                    });
                    if (c) {
                        let r = ((() => {
                            let $firstRank;
                            let $ret = new Array($firstRank = 1);
                            let $currRet = $ret;
                            for (let $rankInit = 0; $rankInit < $firstRank; $rankInit++) {
                                $currRet[$rankInit] = new Array(p.count);
                            }
                            return $ret;
                        })());
                        for (let s = 0; s < p.count; s++) {
                            r[0][s] = new ExcelCalcValue(p._inner[s]);
                        }
                        return new ExcelCalcValue(r);
                    }
                }
                return new ExcelCalcValue(p._inner[0]);
            }
            finally {
                CalcFunctionUtilities.ac(e);
                CalcFunctionUtilities.ad(d);
            }
        }
        get_name() {
            return "mode";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 1;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 0x7FFFFFFF;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return super.doesParameterAllowIntermediateResultArray(a, b);
        }
    }
    UltraCalcFunctionMode.$t = /*@__PURE__*/ markType(UltraCalcFunctionMode, 'UltraCalcFunctionMode', BuiltInFunctionBase.$);
    return UltraCalcFunctionMode;
})();
