/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { NotImplementedException } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_OfficeStyleSheet = /*@__PURE__*/ (() => {
    class CT_OfficeStyleSheet extends Base {
        constructor() {
            super();
            this.b = null;
            this.d = null;
            this.j = null;
            this.h = null;
            this.f = null;
            this.l = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        static n(a, b) {
            b = null;
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "name":
                        b = c.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b
            };
        }
        static o(a, b, c = null) {
            a.ad.p(b, "a");
            let d = null;
            let e = null;
            if (c != null) {
                e = "name";
                d = c;
                a.ad.h(e, d);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            throw new NotImplementedException(0);
        }
    }
    CT_OfficeStyleSheet.$t = /*@__PURE__*/ markType(CT_OfficeStyleSheet, 'CT_OfficeStyleSheet', Base.$, [ISupportSetProperty_$type]);
    return CT_OfficeStyleSheet;
})();
