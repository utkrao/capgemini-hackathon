/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_Address = /*@__PURE__*/ (() => {
    class CT_Address extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.i = null;
            this.e = null;
            this.g = null;
            this.o = null;
            this.m = null;
            this.k = null;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        static a(a) {
            let b = null;
            let c = null;
            let d = null;
            let e = null;
            let f = null;
            let g = null;
            let h = null;
            let i = CT_Address.q(a, b, c, d, e, f, g, h);
            b = i.p1;
            c = i.p2;
            d = i.p3;
            e = i.p4;
            f = i.p5;
            g = i.p6;
            h = i.p7;
            return ((() => {
                let $ret = new CT_Address();
                $ret.b = b;
                $ret.h = c;
                $ret.d = d;
                $ret.f = e;
                $ret.j = h;
                $ret.n = f;
                $ret.l = g;
                return $ret;
            })());
        }
        static q(a, b, c, d, e, f, g, h) {
            b = null;
            c = null;
            d = null;
            e = null;
            f = null;
            g = null;
            h = null;
            for (let i of fromEnum(a.ab.u)) {
                switch (i.a.e(a.d)) {
                    case "address1":
                        b = i.d;
                        break;
                    case "countryRegion":
                        c = i.d;
                        break;
                    case "adminDistrict1":
                        d = i.d;
                        break;
                    case "adminDistrict2":
                        e = i.d;
                        break;
                    case "postalCode":
                        f = i.d;
                        break;
                    case "locality":
                        g = i.d;
                        break;
                    case "isoCountryCode":
                        h = i.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h
            };
        }
        static r(a, b, c = null, d = null, e = null, f = null, g = null, h = null, i = null) {
            a.ad.p(b, "cx");
            let j = null;
            let k = null;
            if (c != null) {
                k = "address1";
                j = c;
                a.ad.h(k, j);
            }
            if (d != null) {
                k = "adminDistrict1";
                j = d;
                a.ad.h(k, j);
            }
            if (e != null) {
                k = "adminDistrict2";
                j = e;
                a.ad.h(k, j);
            }
            if (f != null) {
                k = "countryRegion";
                j = f;
                a.ad.h(k, j);
            }
            if (g != null) {
                k = "isoCountryCode";
                j = g;
                a.ad.h(k, j);
            }
            if (h != null) {
                k = "locality";
                j = h;
                a.ad.h(k, j);
            }
            if (i != null) {
                k = "postalCode";
                j = i;
                a.ad.h(k, j);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Address.$t = /*@__PURE__*/ markType(CT_Address, 'CT_Address');
    return CT_Address;
})();
