/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, typeCast, markType } from "igniteui-react-core";
import { Convert } from "igniteui-react-core";
import { XlsxUtilities } from "./XlsxUtilities";
import { unwrapNullable, nullableEquals } from "igniteui-react-core";
/**
 * @hidden
 */
export let ProtectionInfo = /*@__PURE__*/ (() => {
    class ProtectionInfo extends Base {
        constructor() {
            super(...arguments);
            this.g = toNullable(Boolean_$type, null);
            this.i = toNullable(Boolean_$type, null);
        }
        equals(a) {
            return ProtectionInfo.d(this, typeCast(ProtectionInfo.$, a));
        }
        getHashCode() {
            let a = 0;
            a ^= Convert.toInt321(unwrapNullable(this.g));
            a ^= Convert.toInt321(unwrapNullable(this.i)) << 1;
            return a;
        }
        get h() {
            return this.g;
        }
        set h(a) {
            this.g = a;
        }
        get j() {
            return this.i;
        }
        set j(a) {
            this.i = a;
        }
        get e() {
            return nullableEquals(this.g, null) && nullableEquals(this.i, null);
        }
        k(a) {
            a._locked$i = XlsxUtilities.a9(this.j);
        }
        static a(a) {
            return ProtectionInfo.b(a, false);
        }
        static b(a, b) {
            let c = a._c5;
            if (b == false && nullableEquals(c, true)) {
                return null;
            }
            let d = new ProtectionInfo();
            d.j = toNullable(Boolean_$type, (nullableEquals(c, true)));
            return d;
        }
        static d(a, b) {
            if (Base.referenceEquals(a, null) && Base.referenceEquals(b, null)) {
                return true;
            }
            if (Base.referenceEquals(a, null) || Base.referenceEquals(b, null)) {
                return false;
            }
            return (nullableEquals(a.g, b.g) && nullableEquals(a.i, b.i));
        }
    }
    ProtectionInfo.$t = /*@__PURE__*/ markType(ProtectionInfo, 'ProtectionInfo');
    return ProtectionInfo;
})();
