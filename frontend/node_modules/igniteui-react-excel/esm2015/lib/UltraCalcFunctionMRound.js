/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
import { isInfinity, isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionMRound = /*@__PURE__*/ (() => {
    class UltraCalcFunctionMRound extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = a.pop();
            if (c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let d = c._toDouble3();
            let e = a.pop();
            if (e.isError) {
                return new ExcelCalcValue(e.toErrorValue());
            }
            let f = e._toDouble3();
            if (f < 0 && d > 0 || f > 0 && d < 0) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            let g = UltraCalcFunctionMRound._ak(f, d);
            return new ExcelCalcValue(g);
        }
        get_name() {
            return "mround";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 2;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 2;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        static _ak(a, b) {
            let c = a / b;
            if (isInfinity(c) || isNaN_(c)) {
                return 0;
            }
            c += 0.5;
            c = Math.floor(c);
            return c * b;
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return (b == false);
        }
    }
    UltraCalcFunctionMRound.$t = /*@__PURE__*/ markType(UltraCalcFunctionMRound, 'UltraCalcFunctionMRound', BuiltInFunctionBase.$);
    return UltraCalcFunctionMRound;
})();
