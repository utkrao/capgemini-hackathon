/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_PivotAreaReferences } from "./CT_PivotAreaReferences";
import { CT_ExtensionList } from "./CT_ExtensionList";
import { ST_PivotAreaType_$type } from "./ST_PivotAreaType";
import { ST_Axis_$type } from "./ST_Axis";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { parseInt32_1, parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_PivotArea = /*@__PURE__*/ (() => {
    class CT_PivotArea extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.af = toNullable(Number_$type, null);
            this.g = 0;
            this.m = false;
            this.z = false;
            this.x = false;
            this.v = false;
            this.i = false;
            this.ab = false;
            this.aj = null;
            this.k = false;
            this.ad = toNullable(ST_Axis_$type, null);
            this.ah = toNullable(Number_$type, null);
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get ae() {
            return this.af;
        }
        set ae(a) {
            this.af = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get y() {
            return this.z;
        }
        set y(a) {
            this.z = a;
        }
        get w() {
            return this.x;
        }
        set w(a) {
            this.x = a;
        }
        get u() {
            return this.v;
        }
        set u(a) {
            this.v = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get aa() {
            return this.ab;
        }
        set aa(a) {
            this.ab = a;
        }
        get ai() {
            return this.aj;
        }
        set ai(a) {
            this.aj = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get ac() {
            return this.ad;
        }
        set ac(a) {
            this.ad = a;
        }
        get ag() {
            return this.ah;
        }
        set ag(a) {
            this.ah = a;
        }
        static al(a, b, c, d, e, f, g, h, i, j, k, l, m) {
            b = toNullable(Number_$type, null);
            c = 0;
            d = false;
            e = false;
            f = false;
            g = false;
            h = false;
            i = false;
            j = null;
            k = false;
            l = toNullable(ST_Axis_$type, null);
            m = toNullable(Number_$type, null);
            for (let n of fromEnum(a.ab.u)) {
                switch (n.a.e(a.d)) {
                    case "field":
                        b = toNullable(Number_$type, parseInt32_1(n.d, CultureInfo.invariantCulture));
                        break;
                    case "type":
                        c = XmlNamespaceDefinitionBase.b(ST_PivotAreaType_$type, n.d);
                        break;
                    case "dataOnly":
                        d = ST_OnOff.e(n.d);
                        break;
                    case "labelOnly":
                        e = ST_OnOff.e(n.d);
                        break;
                    case "grandRow":
                        f = ST_OnOff.e(n.d);
                        break;
                    case "grandCol":
                        g = ST_OnOff.e(n.d);
                        break;
                    case "cacheIndex":
                        h = ST_OnOff.e(n.d);
                        break;
                    case "outline":
                        i = ST_OnOff.e(n.d);
                        break;
                    case "offset":
                        j = n.d;
                        break;
                    case "collapsedLevelsAreSubtotals":
                        k = ST_OnOff.e(n.d);
                        break;
                    case "axis":
                        l = toNullable(ST_Axis_$type, XmlNamespaceDefinitionBase.b(ST_Axis_$type, n.d));
                        break;
                    case "fieldPosition":
                        m = toNullable(Number_$type, parseUInt32_1(n.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k,
                p11: l,
                p12: m
            };
        }
        static am(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
            a.ad.p(b, null);
            let o = null;
            let p = null;
            if (c.hasValue) {
                p = "axis";
                o = XmlNamespaceDefinitionBase.p(ST_Axis_$type, c.value);
                a.ad.h(p, o);
            }
            if (d.hasValue) {
                p = "field";
                o = d.value.toString();
                a.ad.h(p, o);
            }
            if (e.hasValue) {
                p = "fieldPosition";
                o = e.value.toString();
                a.ad.h(p, o);
            }
            p = "cacheIndex";
            o = ST_OnOff.g(f);
            a.ad.h(p, o);
            p = "collapsedLevelsAreSubtotals";
            o = ST_OnOff.g(g);
            a.ad.h(p, o);
            p = "dataOnly";
            o = ST_OnOff.g(h);
            a.ad.h(p, o);
            p = "grandCol";
            o = ST_OnOff.g(i);
            a.ad.h(p, o);
            p = "grandRow";
            o = ST_OnOff.g(j);
            a.ad.h(p, o);
            p = "labelOnly";
            o = ST_OnOff.g(k);
            a.ad.h(p, o);
            if (l != null) {
                p = "offset";
                o = l;
                a.ad.h(p, o);
            }
            p = "outline";
            o = ST_OnOff.g(m);
            a.ad.h(p, o);
            p = "type";
            o = XmlNamespaceDefinitionBase.p(ST_PivotAreaType_$type, n);
            a.ad.h(p, o);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1337:
                    this.c = typeCast(CT_PivotAreaReferences.$, b);
                    break;
                case 601:
                    this.a = typeCast(CT_ExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_PivotArea.$t = /*@__PURE__*/ markType(CT_PivotArea, 'CT_PivotArea', Base.$, [ISupportSetProperty_$type]);
    return CT_PivotArea;
})();
