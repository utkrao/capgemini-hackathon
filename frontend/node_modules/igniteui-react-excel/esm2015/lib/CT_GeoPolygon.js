/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_GeoPolygon = /*@__PURE__*/ (() => {
    class CT_GeoPolygon extends Base {
        constructor() {
            super(...arguments);
            this.d = null;
            this.b = 0;
            this.c = null;
        }
        static a(a) {
            let b = null;
            let c = 0;
            let d = null;
            let e = CT_GeoPolygon.f(a, b, c, d);
            b = e.p1;
            c = e.p2;
            d = e.p3;
            return ((() => {
                let $ret = new CT_GeoPolygon();
                $ret.b = c;
                $ret.c = d;
                $ret.d = b;
                return $ret;
            })());
        }
        static f(a, b, c, d) {
            b = null;
            c = 0;
            d = null;
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "polygonId":
                        b = e.d;
                        break;
                    case "numPoints":
                        c = parseInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    case "pcaRings":
                        d = e.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static g(a, b, c, d, e) {
            a.ad.p(b, "cx");
            let f = null;
            let g = null;
            g = "numPoints";
            f = c.toString();
            a.ad.h(g, f);
            if (d != null) {
                g = "pcaRings";
                f = d;
                a.ad.h(g, f);
            }
            if (e != null) {
                g = "polygonId";
                f = e;
                a.ad.h(g, f);
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_GeoPolygon.$t = /*@__PURE__*/ markType(CT_GeoPolygon, 'CT_GeoPolygon');
    return CT_GeoPolygon;
})();
