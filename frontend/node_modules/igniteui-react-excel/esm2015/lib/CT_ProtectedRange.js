/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_Sqref } from "./ST_Sqref";
/**
 * @hidden
 */
export let CT_ProtectedRange = /*@__PURE__*/ (() => {
    class CT_ProtectedRange extends Base {
        constructor() {
            super();
            this.c = null;
            this.a = null;
            this.b = null;
            this.d = null;
        }
        static f(a, b, c, d, e) {
            b = null;
            c = null;
            d = null;
            e = null;
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "password":
                        b = f.d;
                        break;
                    case "sqref":
                        c = ST_Sqref.a(f.d);
                        break;
                    case "name":
                        d = f.d;
                        break;
                    case "securityDescriptor":
                        e = f.d;
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        static g(a, b, c, d, e, f) {
            a.ad.p(b, null);
            let g = null;
            let h = null;
            if (c != null) {
                h = "password";
                g = c;
                a.ad.h(h, g);
            }
            if (d != null) {
                h = "securityDescriptor";
                g = d;
                a.ad.h(h, g);
            }
            if (e != null) {
                h = "name";
                g = e;
                a.ad.h(h, g);
            }
            if (f != null) {
                h = "sqref";
                g = f.e();
                a.ad.h(h, g);
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ProtectedRange.$t = /*@__PURE__*/ markType(CT_ProtectedRange, 'CT_ProtectedRange');
    return CT_ProtectedRange;
})();
