/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SortCondition } from "./SortCondition";
import { WorksheetRow } from "./WorksheetRow";
import { Base, typeCast, Boolean_$type, markType } from "igniteui-react-core";
import { ExcelUtils } from "./ExcelUtils";
import { ErrorValue } from "./ErrorValue";
import { StringUtilities } from "./StringUtilities";
import { boolCompare } from "igniteui-react-core";
/**
 * Represents an ordered sort condition, which can sort data in either an ascending or descending manner.
 * @see [[SortSettings`1.sortConditions]]
 */
export let OrderedSortCondition = /*@__PURE__*/ (() => {
    class OrderedSortCondition extends SortCondition {
        constructor(..._rest) {
            let a;
            if (arguments.length === 0) {
                a = 0;
            }
            else if (arguments.length === 1) {
                a = 1;
            }
            switch (a) {
                case 0:
                    {
                        super(0);
                    }
                    break;
                case 1:
                    {
                        let sortDirection = _rest[0];
                        super(1, sortDirection);
                    }
                    break;
                default: throw new Error('Invalid arguments');
            }
        }
        /**
         * @hidden
         */
        _a() {
            let a = new OrderedSortCondition(this.sortDirection);
            return a;
        }
        /**
         * @hidden
         */
        _g($t, a, b, c, d, e) {
            let f = a.c;
            let g = f._rows$i._aj(b);
            let h = b == c ? g : f._rows$i._aj(c);
            let i = WorksheetRow._c2(g, d);
            let j = WorksheetRow._c2(h, e);
            if (i == null) {
                if (j == null) {
                    return 0;
                }
                return 1;
            }
            else if (j == null) {
                return -1;
            }
            let k = OrderedSortCondition._i($t, a.b, f, i, j);
            if (this.sortDirection == 1) {
                return -k;
            }
            return k;
        }
        /**
         * @hidden
         */
        _f(a) {
            return a == null || a._d != 0;
        }
        /**
         * @hidden
         */
        get__d() {
            return 0;
        }
        /**
         * @hidden
         */
        get _d() {
            return this.get__d();
        }
        /**
         * @hidden
         */
        static _i($t, a, b, c, d) {
            let e;
            let f = ((() => { let g = ExcelUtils.bz(b.workbook, c, e); e = g.p2; return g.ret; })());
            let g;
            let h = ((() => { let i = ExcelUtils.bz(b.workbook, d, g); g = i.p2; return i.ret; })());
            if (f) {
                if (h) {
                    return Base.compareSimple(e, g);
                }
                return -1;
            }
            else if (h) {
                return 1;
            }
            let i = typeCast(Boolean_$type, c) !== null;
            let j = typeCast(Boolean_$type, d) !== null;
            let k = null;
            if (typeCast(ErrorValue.$, c) !== null == false && i == false) {
                k = c.toString();
            }
            let l = null;
            if (typeCast(ErrorValue.$, d) !== null == false && j == false) {
                l = d.toString();
            }
            if (k != null) {
                if (l != null) {
                    return StringUtilities.d(k, l, a._q, a.caseSensitive ? 0 : 1);
                }
                return -1;
            }
            else if (l != null) {
                return 1;
            }
            if (i) {
                if (j) {
                    return boolCompare(c, d);
                }
                return -1;
            }
            else if (j) {
                return 1;
            }
            return 0;
        }
    }
    OrderedSortCondition.$t = /*@__PURE__*/ markType(OrderedSortCondition, 'OrderedSortCondition', SortCondition.$);
    return OrderedSortCondition;
})();
