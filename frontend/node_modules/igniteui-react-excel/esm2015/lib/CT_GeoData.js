/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { List$1 } from "igniteui-react-core";
import { CT_GeoPolygon } from "./CT_GeoPolygon";
import { CultureInfo } from "igniteui-react-core";
import { parseNumber } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_GeoData = /*@__PURE__*/ (() => {
    class CT_GeoData extends Base {
        constructor() {
            super();
            this.c = null;
            this.p = null;
            this.n = null;
            this.f = 0;
            this.l = 0;
            this.h = 0;
            this.j = 0;
            this.d = null;
            this.b = null;
            this.d = new List$1(CT_GeoPolygon.$, 0);
            this.b = new List$1(String_$type, 0);
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        static a(a) {
            let b = null;
            let c = null;
            let d = 0;
            let e = 0;
            let f = 0;
            let g = 0;
            let h = CT_GeoData.r(a, b, c, d, e, f, g);
            b = h.p1;
            c = h.p2;
            d = h.p3;
            e = h.p4;
            f = h.p5;
            g = h.p6;
            return ((() => {
                let $ret = new CT_GeoData();
                $ret.e = d;
                $ret.k = e;
                $ret.g = f;
                $ret.i = g;
                $ret.m = c;
                $ret.o = b;
                return $ret;
            })());
        }
        static r(a, b, c, d, e, f, g) {
            b = null;
            c = null;
            d = 0;
            e = 0;
            f = 0;
            g = 0;
            for (let h of fromEnum(a.ab.u)) {
                switch (h.a.e(a.d)) {
                    case "entityName":
                        b = h.d;
                        break;
                    case "entityId":
                        c = h.d;
                        break;
                    case "east":
                        d = parseNumber(h.d, CultureInfo.invariantCulture);
                        break;
                    case "west":
                        e = parseNumber(h.d, CultureInfo.invariantCulture);
                        break;
                    case "north":
                        f = parseNumber(h.d, CultureInfo.invariantCulture);
                        break;
                    case "south":
                        g = parseNumber(h.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g
            };
        }
        static s(a, b, c, d, e, f, g, h) {
            a.ad.p(b, "cx");
            let i = null;
            let j = null;
            j = "east";
            i = c.toString();
            a.ad.h(j, i);
            if (d != null) {
                j = "entityId";
                i = d;
                a.ad.h(j, i);
            }
            if (e != null) {
                j = "entityName";
                i = e;
                a.ad.h(j, i);
            }
            j = "north";
            i = f.toString();
            a.ad.h(j, i);
            j = "south";
            i = g.toString();
            a.ad.h(j, i);
            j = "west";
            i = h.toString();
            a.ad.h(j, i);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 721:
                    this.d.add(typeCast(CT_GeoPolygon.$, b));
                    break;
                case 351:
                    this.b.add(typeCast(String_$type, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_GeoData.$t = /*@__PURE__*/ markType(CT_GeoData, 'CT_GeoData', Base.$, [ISupportSetProperty_$type]);
    return CT_GeoData;
})();
