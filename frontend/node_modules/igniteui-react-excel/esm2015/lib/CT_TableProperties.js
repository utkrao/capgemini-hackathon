/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { EG_FillProperties } from "./EG_FillProperties";
import { EG_EffectProperties } from "./EG_EffectProperties";
import { ST_OnOff } from "./ST_OnOff";
import { NotImplementedException } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_TableProperties = /*@__PURE__*/ (() => {
    class CT_TableProperties extends Base {
        constructor() {
            super();
            this.ac = null;
            this.b = null;
            this.aa = toNullable(Boolean_$type, null);
            this.u = toNullable(Boolean_$type, null);
            this.s = toNullable(Boolean_$type, null);
            this.y = toNullable(Boolean_$type, null);
            this.w = toNullable(Boolean_$type, null);
            this.q = toNullable(Boolean_$type, null);
            this.o = toNullable(Boolean_$type, null);
            this.e = null;
            this.c = null;
        }
        get item() {
            return this.ac;
        }
        set item(a) {
            this.ac = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get z() {
            return this.aa;
        }
        set z(a) {
            this.aa = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new EG_FillProperties();
            }
            return this.e;
        }
        get d() {
            if (this.c == null) {
                this.c = new EG_EffectProperties();
            }
            return this.c;
        }
        static ae(a, b, c, d, e, f, g, h) {
            b = toNullable(Boolean_$type, null);
            c = toNullable(Boolean_$type, null);
            d = toNullable(Boolean_$type, null);
            e = toNullable(Boolean_$type, null);
            f = toNullable(Boolean_$type, null);
            g = toNullable(Boolean_$type, null);
            h = toNullable(Boolean_$type, null);
            for (let i of fromEnum(a.ab.u)) {
                switch (i.a.e(a.d)) {
                    case "rtl":
                        b = toNullable(Boolean_$type, ST_OnOff.e(i.d));
                        break;
                    case "firstRow":
                        c = toNullable(Boolean_$type, ST_OnOff.e(i.d));
                        break;
                    case "firstCol":
                        d = toNullable(Boolean_$type, ST_OnOff.e(i.d));
                        break;
                    case "lastRow":
                        e = toNullable(Boolean_$type, ST_OnOff.e(i.d));
                        break;
                    case "lastCol":
                        f = toNullable(Boolean_$type, ST_OnOff.e(i.d));
                        break;
                    case "bandRow":
                        g = toNullable(Boolean_$type, ST_OnOff.e(i.d));
                        break;
                    case "bandCol":
                        h = toNullable(Boolean_$type, ST_OnOff.e(i.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h
            };
        }
        static af(a, b, c = toNullable(Boolean_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(Boolean_$type, null), f = toNullable(Boolean_$type, null), g = toNullable(Boolean_$type, null), h = toNullable(Boolean_$type, null), i = toNullable(Boolean_$type, null)) {
            a.ad.p(b, "a");
            let j = null;
            let k = null;
            if (c.hasValue) {
                k = "bandCol";
                j = ST_OnOff.g(c.value);
                a.ad.h(k, j);
            }
            if (d.hasValue) {
                k = "bandRow";
                j = ST_OnOff.g(d.value);
                a.ad.h(k, j);
            }
            if (e.hasValue) {
                k = "firstCol";
                j = ST_OnOff.g(e.value);
                a.ad.h(k, j);
            }
            if (f.hasValue) {
                k = "firstRow";
                j = ST_OnOff.g(f.value);
                a.ad.h(k, j);
            }
            if (g.hasValue) {
                k = "lastCol";
                j = ST_OnOff.g(g.value);
                a.ad.h(k, j);
            }
            if (h.hasValue) {
                k = "lastRow";
                j = ST_OnOff.g(h.value);
                a.ad.h(k, j);
            }
            if (i.hasValue) {
                k = "rtl";
                j = ST_OnOff.g(i.value);
                a.ad.h(k, j);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
        setProperty(a, b) {
            throw new NotImplementedException(0);
        }
    }
    CT_TableProperties.$t = /*@__PURE__*/ markType(CT_TableProperties, 'CT_TableProperties', Base.$, [ISupportSetProperty_$type]);
    return CT_TableProperties;
})();
