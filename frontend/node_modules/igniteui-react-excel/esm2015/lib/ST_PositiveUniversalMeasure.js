/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ValueType, toNullable, markStruct } from "igniteui-react-core";
import { ST_UniversalMeasure } from "./ST_UniversalMeasure";
import { DocCoreUtils } from "./DocCoreUtils";
import { nullableNotEquals } from "igniteui-react-core";
/**
 * @hidden
 */
export let ST_PositiveUniversalMeasure = /*@__PURE__*/ (() => {
    class ST_PositiveUniversalMeasure extends ValueType {
        constructor(a, ..._rest) {
            super();
            this.b = 0;
            this.c = 0;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.c = c;
                        this.b = d;
                    }
                    break;
            }
        }
        toString() {
            return ST_UniversalMeasure.p(this.c, this.b);
        }
        d() {
            return ST_UniversalMeasure.l(this.c, this.b);
        }
        static a(a) {
            let b = ST_PositiveUniversalMeasure.e(a);
            if (nullableNotEquals(b, null)) {
                return b.getValueOrDefault();
            }
            throw DocCoreUtils.n(ST_PositiveUniversalMeasure.$, a);
        }
        static e(a) {
            let b;
            let c;
            if (((() => { let d = ST_UniversalMeasure.i(a, b, c); b = d.p1; c = d.p2; return d.ret; })()) == false) {
                return toNullable(ST_PositiveUniversalMeasure.$, null);
            }
            return toNullable(ST_PositiveUniversalMeasure.$, new ST_PositiveUniversalMeasure(1, b, c));
        }
    }
    ST_PositiveUniversalMeasure.$t = /*@__PURE__*/ markStruct(ST_PositiveUniversalMeasure, 'ST_PositiveUniversalMeasure');
    return ST_PositiveUniversalMeasure;
})();
