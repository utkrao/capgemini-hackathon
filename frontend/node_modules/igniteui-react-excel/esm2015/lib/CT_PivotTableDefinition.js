/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_AllocationMethod_$type } from "./ST_AllocationMethod";
import { ST_OnOff } from "./ST_OnOff";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
/**
 * @hidden
 */
export let CT_PivotTableDefinition = /*@__PURE__*/ (() => {
    class CT_PivotTableDefinition extends Base {
        constructor() {
            super();
            this.m = null;
            this.k = null;
            this.b = null;
            this.w = toNullable(Boolean_$type, null);
            this.aa = toNullable(Boolean_$type, null);
            this.s = toNullable(Boolean_$type, null);
            this.ac = null;
            this.ae = null;
            this.u = toNullable(Boolean_$type, null);
            this.q = toNullable(Boolean_$type, null);
            this.o = toNullable(ST_AllocationMethod_$type, null);
            this.ag = null;
            this.y = toNullable(Boolean_$type, null);
        }
        get l() {
            return this.m;
        }
        set l(a) {
            this.m = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get z() {
            return this.aa;
        }
        set z(a) {
            this.aa = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get ab() {
            return this.ac;
        }
        set ab(a) {
            this.ac = a;
        }
        get ad() {
            return this.ae;
        }
        set ad(a) {
            this.ae = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get p() {
            return this.q;
        }
        set p(a) {
            this.q = a;
        }
        get n() {
            return this.o;
        }
        set n(a) {
            this.o = a;
        }
        get af() {
            return this.ag;
        }
        set af(a) {
            this.ag = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        static ah(a, b, c, d, e, f, g, h, i, j, k) {
            b = toNullable(Boolean_$type, null);
            c = toNullable(Boolean_$type, null);
            d = toNullable(Boolean_$type, null);
            e = null;
            f = null;
            g = toNullable(Boolean_$type, null);
            h = toNullable(Boolean_$type, null);
            i = toNullable(ST_AllocationMethod_$type, null);
            j = null;
            k = toNullable(Boolean_$type, null);
            for (let l of fromEnum(a.ab.u)) {
                switch (l.a.e(a.d)) {
                    case "fillDownLabelsDefault":
                        b = toNullable(Boolean_$type, ST_OnOff.e(l.d));
                        break;
                    case "visualTotalsForSets":
                        c = toNullable(Boolean_$type, ST_OnOff.e(l.d));
                        break;
                    case "calculatedMembersInFilters":
                        d = toNullable(Boolean_$type, ST_OnOff.e(l.d));
                        break;
                    case "altText":
                        e = l.d;
                        break;
                    case "altTextSummary":
                        f = l.d;
                        break;
                    case "enableEdit":
                        g = toNullable(Boolean_$type, ST_OnOff.e(l.d));
                        break;
                    case "autoApply":
                        h = toNullable(Boolean_$type, ST_OnOff.e(l.d));
                        break;
                    case "allocationMethod":
                        i = toNullable(ST_AllocationMethod_$type, XmlNamespaceDefinitionBase.b(ST_AllocationMethod_$type, l.d));
                        break;
                    case "weightExpression":
                        j = l.d;
                        break;
                    case "hideValuesRow":
                        k = toNullable(Boolean_$type, ST_OnOff.e(l.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k
            };
        }
        static ai(a, b, c = toNullable(ST_AllocationMethod_$type, null), d = null, e = null, f = toNullable(Boolean_$type, null), g = toNullable(Boolean_$type, null), h = toNullable(Boolean_$type, null), i = toNullable(Boolean_$type, null), j = toNullable(Boolean_$type, null), k = toNullable(Boolean_$type, null), l = null) {
            a.ad.p(b, null);
            let m = null;
            let n = null;
            if (c.hasValue) {
                n = "allocationMethod";
                m = XmlNamespaceDefinitionBase.p(ST_AllocationMethod_$type, c.value);
                a.ad.h(n, m);
            }
            if (d != null) {
                n = "altText";
                m = d;
                a.ad.h(n, m);
            }
            if (e != null) {
                n = "altTextSummary";
                m = e;
                a.ad.h(n, m);
            }
            if (f.hasValue) {
                n = "autoApply";
                m = ST_OnOff.g(f.value);
                a.ad.h(n, m);
            }
            if (g.hasValue) {
                n = "calculatedMembersInFilters";
                m = ST_OnOff.g(g.value);
                a.ad.h(n, m);
            }
            if (h.hasValue) {
                n = "enableEdit";
                m = ST_OnOff.g(h.value);
                a.ad.h(n, m);
            }
            if (i.hasValue) {
                n = "fillDownLabelsDefault";
                m = ST_OnOff.g(i.value);
                a.ad.h(n, m);
            }
            if (j.hasValue) {
                n = "hideValuesRow";
                m = ST_OnOff.g(j.value);
                a.ad.h(n, m);
            }
            if (k.hasValue) {
                n = "visualTotalsForSets";
                m = ST_OnOff.g(k.value);
                a.ad.h(n, m);
            }
            if (l != null) {
                n = "weightExpression";
                m = l;
                a.ad.h(n, m);
            }
            ;
        }
    }
    CT_PivotTableDefinition.$t = /*@__PURE__*/ markType(CT_PivotTableDefinition, 'CT_PivotTableDefinition');
    return CT_PivotTableDefinition;
})();
