/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType, getEnumerator } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
/**
 * @hidden
 */
export let UltraCalcFunctionProbFunction = /*@__PURE__*/ (() => {
    class UltraCalcFunctionProbFunction extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = 0;
            if (b == 4) {
                c = a.pop()._toDecimal2();
            }
            let d = a.pop()._toDecimal2();
            if (b < 4) {
                c = d;
            }
            let e = a.pop().toArrayProxy();
            let f = a.pop().toArrayProxy();
            let g = e.getLength(0) * e.getLength(1);
            let h = f.getLength(0) * f.getLength(1);
            if (g != h) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(3));
            }
            let i = 0;
            let j = 0;
            let k = getEnumerator(e);
            let l = getEnumerator(f);
            while (k.moveNext()) {
                l.moveNext();
                let m = k.current;
                if (m.isError) {
                    return new ExcelCalcValue(m.toErrorValue());
                }
                let n = l.current;
                if (n.isError) {
                    return new ExcelCalcValue(n.toErrorValue());
                }
                let o = m._toDecimal2();
                if (o < 0 || o > 1) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                }
                if (o > 0) {
                    if (n.isString) {
                        return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                    }
                    if (n.isBoolean || m.isBoolean) {
                        return new ExcelCalcValue(new ExcelCalcErrorValue(2));
                    }
                    i += o;
                    let p = n._toDecimal2();
                    if (d <= p && p <= c) {
                        j += o;
                    }
                }
            }
            if (i != 1) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            return new ExcelCalcValue(j);
        }
        get_maxArgs() {
            return 4;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        get_minArgs() {
            return 3;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_name() {
            return "prob";
        }
        get name() {
            return this.get_name();
        }
    }
    UltraCalcFunctionProbFunction.$t = /*@__PURE__*/ markType(UltraCalcFunctionProbFunction, 'UltraCalcFunctionProbFunction', BuiltInFunctionBase.$);
    return UltraCalcFunctionProbFunction;
})();
