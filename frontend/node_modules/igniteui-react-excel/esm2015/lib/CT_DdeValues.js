/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { List$1 } from "igniteui-react-core";
import { CT_DdeValue } from "./CT_DdeValue";
import { CultureInfo } from "igniteui-react-core";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_DdeValues = /*@__PURE__*/ (() => {
    class CT_DdeValues extends Base {
        constructor() {
            super();
            this.a = null;
            this.c = toNullable(Number_$type, null);
            this.b = toNullable(Number_$type, null);
            this.a = new List$1(CT_DdeValue.$, 0);
        }
        static g(a, b, c) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "rows":
                        b = toNullable(Number_$type, parseUInt32_1(d.d, CultureInfo.invariantCulture));
                        break;
                    case "cols":
                        c = toNullable(Number_$type, parseUInt32_1(d.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c
            };
        }
        static h(a, b, c = toNullable(Number_$type, null), d = toNullable(Number_$type, null)) {
            a.ad.p(b, null);
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "cols";
                e = c.value.toString();
                a.ad.h(f, e);
            }
            if (d.hasValue) {
                f = "rows";
                e = d.value.toString();
                a.ad.h(f, e);
            }
        }
        setProperty(a, b) {
            switch (a) {
                case 1824:
                    this.a.add(typeCast(CT_DdeValue.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_DdeValues.$t = /*@__PURE__*/ markType(CT_DdeValues, 'CT_DdeValues', Base.$, [ISupportSetProperty_$type]);
    return CT_DdeValues;
})();
