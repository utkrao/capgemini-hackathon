/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcNumberStack } from "./ExcelCalcNumberStack";
import { UltraCalcConditionalFunctionBase_CriteriaEvaluator } from "./UltraCalcConditionalFunctionBase_CriteriaEvaluator";
import { ArrayProxy } from "./ArrayProxy";
import { CellCalcReference } from "./CellCalcReference";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { Base, typeCast, runOn, markType } from "igniteui-react-core";
import { ErrorValue } from "./ErrorValue";
import { List$1 } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { Tuple } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcConditionalFunctionBase = /*@__PURE__*/ (() => {
    class UltraCalcConditionalFunctionBase extends BuiltInFunctionBase {
        doesParameterAllowIntermediateResultArray(a, b) {
            if (a == 1) {
                return (b == false);
            }
            return false;
        }
        evaluate(a, b) {
            let c = null;
            if (this._an && b == 3) {
                c = a.pop();
            }
            let d = a.pop();
            let e = a.pop();
            if (e.isError) {
                return e;
            }
            if (d.isError) {
                return d;
            }
            if (c != null && c.isError) {
                return c;
            }
            if (e.isArrayGroup || (e.isReference == false && !e.isArray)) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            let f = new UltraCalcConditionalFunctionBase_CriteriaEvaluator(a, d._getResolvedValue());
            if (c != null && (c.isArrayGroup || (c.isReference == false && !c.isArray))) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            let g = e.toArrayProxy();
            let h = null;
            if (c != null) {
                h = typeCast(CellCalcReference.$, c._d(false).item(0, 0).value);
                if (h == null) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
            }
            let i = new UltraCalcConditionalFunctionBase_EvaluateHelper(this, f, g);
            if (h == null) {
                g._n(false, runOn(i, i.h));
            }
            else {
                let j = h._ao;
                let k = h._w.index;
                let l = h._u;
                let m = l._columns$i.maxCount - 1;
                let n = Math.min(m, j + g.getLength(0) - 1);
                let o = l._rows$i.maxCount - 1;
                let p = Math.min(o, k + g.getLength(1) - 1);
                let q = l._cx(k, j, p, n);
                let r = new ExcelCalcValue(q._c);
                r._n = c._n;
                r._y = true;
                let s = r._d(false);
                s._n(false, runOn(i, i.h));
            }
            return this._al(i.e, i.g);
        }
        get_minArgs() {
            return 2;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            if (this._an) {
                return 3;
            }
            return 2;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        _v(a) {
            if (a == 2) {
                return false;
            }
            return true;
        }
        get__am() {
            return true;
        }
        get _am() {
            return this.get__am();
        }
        get__an() {
            return true;
        }
        get _an() {
            return this.get__an();
        }
        static _ak(a, b, c, d, e = null) {
            if (e == null && b % 2 == 1) {
                return new ExcelCalcValue(ErrorValue.argumentOrFunctionNotAvailable);
            }
            else if (e != null && b % 2 == 0) {
                return new ExcelCalcValue(ErrorValue.argumentOrFunctionNotAvailable);
            }
            let f = 0;
            let g = 0;
            let h = new List$1(Tuple$2.$.specialize(UltraCalcConditionalFunctionBase_CriteriaEvaluator.$, ArrayProxy.$), 0);
            while (b > 1) {
                let i = a.pop();
                let j = a.pop();
                if (j.isArrayGroup || j.isReference == false) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
                let k = j.toArrayProxy();
                let l = new UltraCalcConditionalFunctionBase_CriteriaEvaluator(a, i._getResolvedValue());
                if (h.count == 0) {
                    f = k.getLength(0);
                    g = k.getLength(1);
                }
                else if (f != k.getLength(0) || g != k.getLength(1)) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
                h.add(Tuple.a(UltraCalcConditionalFunctionBase_CriteriaEvaluator.$, ArrayProxy.$, l, k));
                b -= 2;
            }
            h.w();
            let m = null;
            if (e != null) {
                let n = a.pop();
                if (n.isArrayGroup || n.isReference == false) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
                m = n.toArrayProxy();
                if (f != m.getLength(0) || g != m.getLength(1)) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
            }
            let o = a._w;
            let p = 0;
            let q = c;
            let r = null;
            let s = (t, u) => {
                if (r == null) {
                    let v = true;
                    for (let w = 0; w < h.count; w++) {
                        let x = h._inner[w];
                        let y = w == 0 ? t : x.d._c(u);
                        if (!h._inner[w].c.d(y)) {
                            v = false;
                            break;
                        }
                        if (w > 0 && x.d._h) {
                            ExcelCalcNumberStack._ad(y);
                        }
                    }
                    if (v) {
                        if (e == null) {
                            p++;
                        }
                        else {
                            let z = m._c(u);
                            if (z.isError) {
                                r = z.toErrorValue();
                            }
                            else if (z.isBoolean || z.isString || z.isNull) {
                            }
                            else {
                                let aa = z._getResolvedValue3(false);
                                let ab;
                                let ac;
                                if (((() => { let ad = z._ao(aa, ac, o, ab); ac = ad.p1; ab = ad.p3; return ad.ret; })())) {
                                    p++;
                                    q = e(q, ac);
                                }
                            }
                            if (m._h) {
                                ExcelCalcNumberStack._ad(z);
                            }
                        }
                    }
                }
            };
            h._inner[0].d._n(false, s);
            if (r != null) {
                return new ExcelCalcValue(r);
            }
            return d(q, p);
        }
    }
    UltraCalcConditionalFunctionBase.$t = /*@__PURE__*/ markType(UltraCalcConditionalFunctionBase, 'UltraCalcConditionalFunctionBase', BuiltInFunctionBase.$);
    return UltraCalcConditionalFunctionBase;
})();
/**
 * @hidden
 */
export let UltraCalcConditionalFunctionBase_EvaluateHelper = /*@__PURE__*/ (() => {
    class UltraCalcConditionalFunctionBase_EvaluateHelper extends Base {
        constructor(a, b, c) {
            super();
            this.c = null;
            this.b = null;
            this.a = null;
            this.d = 0;
            this.f = 0;
            this.b = a;
            this.c = b;
            this.a = c;
        }
        h(a, b) {
            let c = this.a._c(b);
            if (this.c.d(c)) {
                this.f++;
                if (this.b._am) {
                    let d;
                    if (((() => { let e = a._toDouble1(d); d = e.p0; return e.ret; })())) {
                        this.d += d;
                    }
                }
            }
            if (this.a._h) {
                ExcelCalcNumberStack._ad(c);
            }
        }
        get e() {
            return this.d;
        }
        get g() {
            return this.f;
        }
    }
    UltraCalcConditionalFunctionBase_EvaluateHelper.$t = /*@__PURE__*/ markType(UltraCalcConditionalFunctionBase_EvaluateHelper, 'UltraCalcConditionalFunctionBase_EvaluateHelper');
    return UltraCalcConditionalFunctionBase_EvaluateHelper;
})();
