/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { List$1 } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { Number_$type, runOn, markType } from "igniteui-react-core";
import { CalcArgumentHelper } from "./CalcArgumentHelper";
import { truncate } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionPercentileBase = /*@__PURE__*/ (() => {
    class UltraCalcFunctionPercentileBase extends BuiltInFunctionBase {
        static _ak(a, b, c) {
            let d = a.pop();
            let e = a.pop();
            if (d.isError) {
                return new ExcelCalcValue(d.toErrorValue());
            }
            let f = d._toDouble3();
            if (c) {
                if (b) {
                    if (f < 1 || f >= 4) {
                        return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                    }
                }
                else {
                    if (f < 0 || f >= 5) {
                        return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                    }
                }
                f = truncate(f) / 4;
            }
            else {
                if (f < 0 || f > 1) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                }
                if (b && (f == 0 || f == 1)) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                }
            }
            let g = new List$1(Number_$type, 0);
            let h = CalcArgumentHelper.c(e, 0, 1101, runOn(g, g.add));
            if (h != null) {
                return h;
            }
            if (g.count == 0) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            let i = 1 / (g.count + 1);
            if (b && (f < i || (f + i > 1))) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            let j = g._inner[0];
            if (g.count > 1) {
                if (b) {
                    f = (f - i) * (1 / (1 - i * 2));
                }
                g.y();
                let k = 1 / (g.count - 1);
                let l = (f % k) / k;
                let m = truncate(((g.count - 1) * f));
                j = g._inner[m];
                if (m < g.count - 1 && l != 0) {
                    j += (g._inner[m + 1] - g._inner[m]) * l;
                }
            }
            return new ExcelCalcValue(j);
        }
        get_maxArgs() {
            return 2;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        get_minArgs() {
            return 2;
        }
        get minArgs() {
            return this.get_minArgs();
        }
    }
    UltraCalcFunctionPercentileBase.$t = /*@__PURE__*/ markType(UltraCalcFunctionPercentileBase, 'UltraCalcFunctionPercentileBase', BuiltInFunctionBase.$);
    return UltraCalcFunctionPercentileBase;
})();
