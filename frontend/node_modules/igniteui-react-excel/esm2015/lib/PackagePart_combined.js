/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Stream, typeCast, String_$type, EnumUtil, markType, callStaticConstructors, runOn, fromEnum, TypeRegistrar } from "igniteui-react-core";
import { IPackagePart_$type } from "./IPackagePart";
import { IPackagePartEx_$type } from "./IPackagePartEx";
import { IPackage_$type } from "./IPackage";
import { Uri } from "igniteui-react-core";
import { IZipEntry_$type } from "./IZipEntry";
import { IPackageRelationship_$type } from "./IPackageRelationship";
import { MemoryStream } from "igniteui-react-core";
import { ArgumentException } from "igniteui-react-core";
import { IOPath } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { WorkItemExtensions } from "./WorkItemExtensions";
import { RelationshipTargetMode_$type } from "./RelationshipTargetMode";
import { PackageRelationship } from "./PackageRelationship";
import { InvalidTargetPackageRelationship } from "./InvalidTargetPackageRelationship";
import { Dictionary$2 } from "igniteui-react-core";
import { WorkItem } from "./WorkItem";
import { PackagePartExposedStream } from "./PackagePartExposedStream";
import { DocCoreExtensions } from "./DocCoreExtensions";
import { Enumerable } from "igniteui-react-core";
import { Async } from "./Async";
import { XmlTextReader } from "igniteui-react-core";
import { stringReplace, stringIsNullOrEmpty } from "igniteui-react-core";
import { StringComparer } from "igniteui-react-core";
import { ZipFile } from "./ZipFile";
import { RelationshipsWriter } from "./RelationshipsWriter";
import { ZipEntry } from "./ZipEntry";
import { XmlTextWriter } from "igniteui-react-core";
import { Encoding } from "igniteui-react-core";
/**
 * @hidden
 */
export let PackagePart = /*@__PURE__*/ (() => {
    class PackagePart extends Base {
        constructor(a, b, c) {
            super();
            this.f = null;
            this.d = null;
            this._$package = null;
            this._uri = null;
            this._contentType = null;
            this.b = null;
            this.f = new MemoryStream(0);
            this.$package = a;
            this.uri = b;
            this.contentType = c;
            let d = typeCast(Package.$, this.$package);
            if (d == null) {
                throw new ArgumentException(2, "The expected type for package parameter is type of Package.", "package");
            }
            if (d._q == 2) {
                let e = IOPath.getFileName(b.toString());
                let f = IOPath.getDirectoryName(b.toString());
                f = stringReplace(f, '\\', '/');
                this.b = d._c._createFile$i(e, f, new MemoryStream(0));
                d._c.entries.add(this.b);
            }
        }
        get $package() {
            return this._$package;
        }
        set $package(a) {
            this._$package = a;
        }
        get uri() {
            return this._uri;
        }
        set uri(a) {
            this._uri = a;
        }
        get contentType() {
            return this._contentType;
        }
        set contentType(a) {
            this._contentType = a;
        }
        getStream(a, b) {
            return WorkItemExtensions.l(Stream.$, Stream.$, this.b.openReader(), (c) => WorkItem.g(Stream.$, new PackagePartExposedStream(WorkItemExtensions.m(Stream.$, c))));
        }
        createRelationship(a, b, c, d) {
            let e = new PackageRelationship(1, this.uri, a, b, c, d);
            return this.a(e);
        }
        createExternalRelationship(a, b, c) {
            let d;
            if (((() => { let e = Uri.tryCreate(a, 0, d); d = e.p2; return e.ret; })())) {
                return this.createRelationship(d, 1, b, c);
            }
            let e = new InvalidTargetPackageRelationship(this.uri, a, 1, b, c);
            return this.a(e);
        }
        a(a) {
            if (this.d == null) {
                this.d = new Dictionary$2(String_$type, IPackageRelationship_$type, 1, 1);
            }
            if (this.d.count == 0) {
                let b = IOPath.getFileName(this.uri.toString()) + ".rels";
                let c = IOPath.getDirectoryName(this.uri.toString()) + "/_rels";
                if (c.charAt(0) == '\\') {
                    c = c.substr(1);
                }
                let d = this.$package;
                let e = d._c._createFile$i(b, c, this.f);
                d._c.entries.add(e);
            }
            this.d.addItem(a.id, a);
            return a;
        }
        getRelationships() {
            this.j();
            return this.d.values;
        }
        getRelationship(a) {
            this.j();
            let b = null;
            let c = this.d.tryGetValue(a, b);
            b = c.p1;
            return b;
        }
        get e() {
            return this.getRelationships();
        }
        c() {
            this.d = new Dictionary$2(String_$type, IPackageRelationship_$type, 0);
            let a = stringReplace(IOPath.getDirectoryName(DocCoreExtensions.fixDirectoryPath(this.uri.toString())), "\\", "/");
            let b = IOPath.getFileName(this.uri.toString());
            let c = this.$package;
            let d = c._c;
            let e = a + "/_rels/" + b + ".rels";
            let f = Enumerable.u(IZipEntry_$type, d.entries, (g) => g.name == e);
            if (Enumerable.aj(IZipEntry_$type, f) != 1) {
                return null;
            }
            c._b = Enumerable.ad(IZipEntry_$type, f);
            return Async.o(Stream.$, c._b.openReader(), (g) => {
                this.f = g;
                {
                    let h = new XmlTextReader(1, this.f);
                    try {
                        while (h.t()) {
                            if (h.l() && h.ai == "Relationship") {
                                if (h.e) {
                                    let i = h.ab("TargetMode");
                                    let j = h.ab("Target");
                                    let k = h.ab("Id");
                                    let l = h.ab("Type");
                                    let m = 0;
                                    if (stringIsNullOrEmpty(i) == false) {
                                        m = EnumUtil.getEnumValue(RelationshipTargetMode_$type, EnumUtil.parse(RelationshipTargetMode_$type, i, true));
                                    }
                                    let n = new PackageRelationship(1, this.uri, new Uri(1, j, 0), m, l, k);
                                    this.d.addItem(k, n);
                                }
                            }
                        }
                    }
                    finally {
                        if (h != null) {
                            h.dispose();
                        }
                    }
                }
                return null;
            });
        }
        j() {
            if (this.d == null) {
                this.d = new Dictionary$2(String_$type, IPackageRelationship_$type, 0);
            }
        }
    }
    PackagePart.$t = /*@__PURE__*/ markType(PackagePart, 'PackagePart', Base.$, [IPackagePart_$type, IPackagePartEx_$type]);
    return PackagePart;
})();
/**
 * @hidden
 */
export let Package = /*@__PURE__*/ (() => {
    class Package extends Base {
        constructor() {
            super();
            this._i = false;
            this._j = false;
            this._s = null;
            this._t = null;
            this._r = null;
            this._m = new Dictionary$2(String_$type, PackagePart.$, 0);
            this._p = null;
            this._k = new Dictionary$2(String_$type, String_$type, 2, StringComparer.g);
            this._l = new Dictionary$2(String_$type, String_$type, 2, StringComparer.g);
            this._q = 0;
            this._c = null;
            this._b = null;
            this._a = null;
            this._h = null;
        }
        static staticInit() {
            TypeRegistrar.register("Package", Package.$);
        }
        get _o() {
            return this._p;
        }
        get _n() {
            return this._m;
        }
        static _d(a, b) {
            return Package._createUsingFile(a, b, new ZipFile());
        }
        static _createUsingFile(a, b, c) {
            let d = new Package();
            d._q = b;
            d._c = c;
            if (b == 3) {
                a.position = 0;
                return WorkItemExtensions.g(IPackage_$type, WorkItemExtensions.c(WorkItemExtensions.c(d._c._load$i(a), runOn(d, d._f)), runOn(d, d._g)), () => d);
            }
            else {
                d._s = a;
                return WorkItem.g(IPackage_$type, d);
            }
        }
        createPart(a, b) {
            if (!this._i) {
                this._ah();
            }
            let c = new PackagePart(this, a, b);
            this._l.addItem(a.toString(), b);
            if (this.partExists(a)) {
                this._m.item(a.originalString, c);
            }
            else {
                this._m.addItem(a.originalString, c);
            }
            return c;
        }
        createRelationship(a, b, c, d) {
            if (!this._j) {
                this._ai();
            }
            let e = new PackageRelationship(0, a, b, c, d);
            this._p.add(e);
            return e;
        }
        getRelationships() {
            if (this._p == null) {
                this._ai();
            }
            return this._p;
        }
        getPart(a) {
            let b = null;
            if (this.partExists(a)) {
                b = this._m.item(a.originalString);
            }
            return b;
        }
        getParts() {
            return this._m.values;
        }
        getRelationship(a) {
            if (this._p == null) {
                this._ai();
            }
            return Enumerable.af(IPackageRelationship_$type, Enumerable.u(IPackageRelationship_$type, this._p, (b) => b.id == a));
        }
        _aa(a) {
            if (this._l.containsKey(a)) {
                return this._l.item(a);
            }
            let b = IOPath.getExtension(a).substr(1);
            if (this._k.containsKey(b)) {
                return this._k.item(b);
            }
            return null;
        }
        _f() {
            let a = Enumerable.ad(IZipEntry_$type, Enumerable.u(IZipEntry_$type, this._c.entries, (b) => b.name == "[Content_Types].xml"));
            return WorkItemExtensions.c(Async.o(Stream.$, a.openReader(), (b) => {
                {
                    let c = new XmlTextReader(1, b);
                    try {
                        while (c.t()) {
                            if (c.l() && c.ai == "Types") {
                                while (c.t()) {
                                    if (c.l()) {
                                        if (c.ai == "Override") {
                                            let d = c.ab("PartName");
                                            let e = c.ab("ContentType");
                                            if (!this._l.containsKey(d)) {
                                                this._l.addItem(d, e);
                                            }
                                        }
                                        else if (c.ai == "Default") {
                                            let f = c.ab("Extension");
                                            let g = c.ab("ContentType");
                                            if (!this._k.containsKey(f)) {
                                                this._k.addItem(f, g);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    finally {
                        if (c != null) {
                            c.dispose();
                        }
                    }
                }
                return null;
            }), () => Async.d(IZipEntry_$type, Enumerable.u(IZipEntry_$type, this._c.entries, (b) => b.name != "[Content_Types].xml" && !b.isDirectory), (b) => {
                let c = "/" + b.name;
                let d = this._aa(c);
                let e = new PackagePart(this, new Uri(1, c, 2), d);
                e.b = b;
                this._m.addItem(e.uri.originalString, e);
                return e.c();
            }));
        }
        _g() {
            this._p = new List$1(IPackageRelationship_$type, 0);
            this._b = Enumerable.ad(IZipEntry_$type, Enumerable.u(IZipEntry_$type, this._c.entries, (a) => a.name == "_rels/.rels"));
            return Async.o(Stream.$, this._b.openReader(), (a) => {
                this._t = a;
                {
                    let b = new XmlTextReader(1, a);
                    try {
                        while (b.t()) {
                            if (b.l() && b.ai == "Relationship") {
                                if (b.e) {
                                    let c = b.ab("TargetMode");
                                    let d = b.ab("Id");
                                    let e = b.ab("Type");
                                    let f = b.ab("Target");
                                    let g = 0;
                                    if (stringIsNullOrEmpty(c) == false) {
                                        g = EnumUtil.getEnumValue(RelationshipTargetMode_$type, EnumUtil.parse(RelationshipTargetMode_$type, c, true));
                                    }
                                    let h = new PackageRelationship(1, new Uri(1, "/", 2), new Uri(1, f, 0), g, e, d);
                                    this._p.add(h);
                                }
                            }
                        }
                    }
                    finally {
                        if (b != null) {
                            b.dispose();
                        }
                    }
                }
                return null;
            });
        }
        partExists(a) {
            return this._m.containsKey(a.originalString);
        }
        dispose() {
            if (this._q == 2) {
                if (this._t != null) {
                    RelationshipsWriter.j(this._o, this._t);
                }
                for (let a of fromEnum(this._m.values)) {
                    if (a.f != null) {
                        RelationshipsWriter.j(a.e, a.f);
                    }
                }
                if (this._r != null) {
                    ContentTypesWriter.j(this, this._r);
                }
                if (this._s != null) {
                    this._h = WorkItem.d(() => this._c._save$i(this._s));
                }
            }
        }
        _ah() {
            this._r = new MemoryStream(0);
            this._a = ZipEntry.a("[Content_Types].xml", "/", this._r);
            this._c.entries.add(this._a);
            this._i = true;
        }
        _ai() {
            this._t = new MemoryStream(0);
            this._b = ZipEntry.a(".rels", "/_rels", this._t);
            this._c.entries.add(this._b);
            if (this._p == null) {
                this._p = new List$1(IPackageRelationship_$type, 0);
            }
            this._j = true;
        }
    }
    Package.$t = /*@__PURE__*/ markType(Package, 'Package', Base.$, [IPackage_$type]);
    Package._v = "http://schemas.openxmlformats.org/package/2006/content-types";
    return Package;
})();
/**
 * @hidden
 */
export let ContentTypesWriter = /*@__PURE__*/ (() => {
    class ContentTypesWriter extends Base {
        static k(a, b, c) {
            a.an("Default", ContentTypesWriter.b);
            a.h("Extension", c);
            a.h("ContentType", b);
            a.v();
        }
        static l(a, b, c) {
            a.an("Override", ContentTypesWriter.b);
            a.h("PartName", c);
            a.h("ContentType", b);
            a.v();
        }
        static j(a, b) {
            {
                let c = new XmlTextWriter(0, b, Encoding.uTF8);
                try {
                    c.ad("xml", "version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"");
                    c.an("Types", ContentTypesWriter.b);
                    ContentTypesWriter.k(c, ContentTypesWriter.d, "rels");
                    ContentTypesWriter.k(c, "application/xml", "xml");
                    for (let d of fromEnum(a._l)) {
                        ContentTypesWriter.l(c, d.value, d.key);
                    }
                    c.v();
                }
                finally {
                    if (c != null) {
                        c.dispose();
                    }
                }
            }
        }
    }
    ContentTypesWriter.$t = /*@__PURE__*/ markType(ContentTypesWriter, 'ContentTypesWriter');
    ContentTypesWriter.d = "application/vnd.openxmlformats-package.relationships+xml";
    ContentTypesWriter.b = "http://schemas.openxmlformats.org/package/2006/content-types";
    return ContentTypesWriter;
})();
(function (v) { callStaticConstructors(); })(true);
