/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_UnderlineValues_$type } from "./ST_UnderlineValues";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
/**
 * @hidden
 */
export let CT_UnderlineProperty = /*@__PURE__*/ (() => {
    class CT_UnderlineProperty extends Base {
        constructor() {
            super();
            this.a = toNullable(ST_UnderlineValues_$type, null);
        }
        static c(a, b) {
            b = toNullable(ST_UnderlineValues_$type, null);
            for (let c of fromEnum(a.ab.u)) {
                switch (c.a.e(a.d)) {
                    case "val":
                        b = toNullable(ST_UnderlineValues_$type, XmlNamespaceDefinitionBase.b(ST_UnderlineValues_$type, c.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b
            };
        }
        static d(a, b, c = toNullable(ST_UnderlineValues_$type, null)) {
            a.ad.p(b, null);
            let d = null;
            let e = null;
            if (c.hasValue) {
                e = "val";
                d = XmlNamespaceDefinitionBase.p(ST_UnderlineValues_$type, c.value);
                a.ad.h(e, d);
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_UnderlineProperty.$t = /*@__PURE__*/ markType(CT_UnderlineProperty, 'CT_UnderlineProperty');
    return CT_UnderlineProperty;
})();
