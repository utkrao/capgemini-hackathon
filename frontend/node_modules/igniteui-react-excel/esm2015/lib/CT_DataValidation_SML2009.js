/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_DataValidationType_$type } from "./ST_DataValidationType";
import { ST_DataValidationErrorStyle_$type } from "./ST_DataValidationErrorStyle";
import { ST_DataValidationImeMode_$type } from "./ST_DataValidationImeMode";
import { ST_DataValidationOperator_$type } from "./ST_DataValidationOperator";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_DataValidation_SML2009 = /*@__PURE__*/ (() => {
    class CT_DataValidation_SML2009 extends Base {
        constructor() {
            super();
            this.d = null;
            this.f = null;
            this.b = null;
            this.z = toNullable(ST_DataValidationType_$type, null);
            this.n = toNullable(ST_DataValidationErrorStyle_$type, null);
            this.p = toNullable(ST_DataValidationImeMode_$type, null);
            this.r = toNullable(ST_DataValidationOperator_$type, null);
            this.l = toNullable(Boolean_$type, null);
            this.t = toNullable(Boolean_$type, null);
            this.x = toNullable(Boolean_$type, null);
            this.v = toNullable(Boolean_$type, null);
            this.ad = null;
            this.ab = null;
            this.ah = null;
            this.af = null;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get y() {
            return this.z;
        }
        set y(a) {
            this.z = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get o() {
            return this.p;
        }
        set o(a) {
            this.p = a;
        }
        get q() {
            return this.r;
        }
        set q(a) {
            this.r = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get s() {
            return this.t;
        }
        set s(a) {
            this.t = a;
        }
        get w() {
            return this.x;
        }
        set w(a) {
            this.x = a;
        }
        get u() {
            return this.v;
        }
        set u(a) {
            this.v = a;
        }
        get ac() {
            return this.ad;
        }
        set ac(a) {
            this.ad = a;
        }
        get aa() {
            return this.ab;
        }
        set aa(a) {
            this.ab = a;
        }
        get ag() {
            return this.ah;
        }
        set ag(a) {
            this.ah = a;
        }
        get ae() {
            return this.af;
        }
        set ae(a) {
            this.af = a;
        }
        static ai(a, b, c, d, e, f, g, h, i, j, k, l, m) {
            b = toNullable(ST_DataValidationType_$type, null);
            c = toNullable(ST_DataValidationErrorStyle_$type, null);
            d = toNullable(ST_DataValidationImeMode_$type, null);
            e = toNullable(ST_DataValidationOperator_$type, null);
            f = toNullable(Boolean_$type, null);
            g = toNullable(Boolean_$type, null);
            h = toNullable(Boolean_$type, null);
            i = toNullable(Boolean_$type, null);
            j = null;
            k = null;
            l = null;
            m = null;
            for (let n of fromEnum(a.ab.u)) {
                switch (n.a.e(a.d)) {
                    case "type":
                        b = toNullable(ST_DataValidationType_$type, XmlNamespaceDefinitionBase.b(ST_DataValidationType_$type, n.d));
                        break;
                    case "errorStyle":
                        c = toNullable(ST_DataValidationErrorStyle_$type, XmlNamespaceDefinitionBase.b(ST_DataValidationErrorStyle_$type, n.d));
                        break;
                    case "imeMode":
                        d = toNullable(ST_DataValidationImeMode_$type, XmlNamespaceDefinitionBase.b(ST_DataValidationImeMode_$type, n.d));
                        break;
                    case "operator":
                        e = toNullable(ST_DataValidationOperator_$type, XmlNamespaceDefinitionBase.b(ST_DataValidationOperator_$type, n.d));
                        break;
                    case "allowBlank":
                        f = toNullable(Boolean_$type, ST_OnOff.e(n.d));
                        break;
                    case "showDropDown":
                        g = toNullable(Boolean_$type, ST_OnOff.e(n.d));
                        break;
                    case "showInputMessage":
                        h = toNullable(Boolean_$type, ST_OnOff.e(n.d));
                        break;
                    case "showErrorMessage":
                        i = toNullable(Boolean_$type, ST_OnOff.e(n.d));
                        break;
                    case "errorTitle":
                        j = n.d;
                        break;
                    case "error":
                        k = n.d;
                        break;
                    case "promptTitle":
                        l = n.d;
                        break;
                    case "prompt":
                        m = n.d;
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k,
                p11: l,
                p12: m
            };
        }
        static aj(a, b, c = toNullable(ST_DataValidationOperator_$type, null), d = toNullable(Boolean_$type, null), e = null, f = toNullable(ST_DataValidationErrorStyle_$type, null), g = null, h = toNullable(ST_DataValidationImeMode_$type, null), i = null, j = null, k = toNullable(Boolean_$type, null), l = toNullable(Boolean_$type, null), m = toNullable(Boolean_$type, null), n = toNullable(ST_DataValidationType_$type, null)) {
            a.ad.p(b, null);
            let o = null;
            let p = null;
            if (c.hasValue) {
                p = "operator";
                o = XmlNamespaceDefinitionBase.p(ST_DataValidationOperator_$type, c.value);
                a.ad.h(p, o);
            }
            if (d.hasValue) {
                p = "allowBlank";
                o = ST_OnOff.g(d.value);
                a.ad.h(p, o);
            }
            if (e != null) {
                p = "error";
                o = e;
                a.ad.h(p, o);
            }
            if (f.hasValue) {
                p = "errorStyle";
                o = XmlNamespaceDefinitionBase.p(ST_DataValidationErrorStyle_$type, f.value);
                a.ad.h(p, o);
            }
            if (g != null) {
                p = "errorTitle";
                o = g;
                a.ad.h(p, o);
            }
            if (h.hasValue) {
                p = "imeMode";
                o = XmlNamespaceDefinitionBase.p(ST_DataValidationImeMode_$type, h.value);
                a.ad.h(p, o);
            }
            if (i != null) {
                p = "prompt";
                o = i;
                a.ad.h(p, o);
            }
            if (j != null) {
                p = "promptTitle";
                o = j;
                a.ad.h(p, o);
            }
            if (k.hasValue) {
                p = "showDropDown";
                o = ST_OnOff.g(k.value);
                a.ad.h(p, o);
            }
            if (l.hasValue) {
                p = "showErrorMessage";
                o = ST_OnOff.g(l.value);
                a.ad.h(p, o);
            }
            if (m.hasValue) {
                p = "showInputMessage";
                o = ST_OnOff.g(m.value);
                a.ad.h(p, o);
            }
            if (n.hasValue) {
                p = "type";
                o = XmlNamespaceDefinitionBase.p(ST_DataValidationType_$type, n.value);
                a.ad.h(p, o);
            }
            ;
        }
    }
    CT_DataValidation_SML2009.$t = /*@__PURE__*/ markType(CT_DataValidation_SML2009, 'CT_DataValidation_SML2009');
    return CT_DataValidation_SML2009;
})();
