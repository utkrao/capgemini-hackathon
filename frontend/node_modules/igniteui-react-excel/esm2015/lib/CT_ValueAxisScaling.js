/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_DoubleOrAutomatic } from "./ST_DoubleOrAutomatic";
import { ST_ValueAxisUnit } from "./ST_ValueAxisUnit";
/**
 * @hidden
 */
export let CT_ValueAxisScaling = /*@__PURE__*/ (() => {
    class CT_ValueAxisScaling extends Base {
        constructor() {
            super(...arguments);
            this.c = null;
            this.e = null;
            this.g = null;
            this.i = null;
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        static a(a) {
            let b = null;
            let c = null;
            let d = null;
            let e = null;
            let f = CT_ValueAxisScaling.k(a, b, c, d, e);
            b = f.p1;
            c = f.p2;
            d = f.p3;
            e = f.p4;
            return ((() => {
                let $ret = new CT_ValueAxisScaling();
                $ret.b = b;
                $ret.d = c;
                $ret.f = d;
                $ret.h = e;
                return $ret;
            })());
        }
        static k(a, b, c, d, e) {
            b = null;
            c = null;
            d = null;
            e = null;
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "max":
                        b = ST_DoubleOrAutomatic.f(f.d);
                        break;
                    case "min":
                        c = ST_DoubleOrAutomatic.f(f.d);
                        break;
                    case "majorUnit":
                        d = ST_ValueAxisUnit.f(f.d);
                        break;
                    case "minorUnit":
                        e = ST_ValueAxisUnit.f(f.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        static l(a, b, c = null, d = null, e = null, f = null) {
            a.ad.p(b, "cx");
            let g = null;
            let h = null;
            if (c != null) {
                h = "majorUnit";
                g = c.d();
                a.ad.h(h, g);
            }
            if (d != null) {
                h = "max";
                g = d.d();
                a.ad.h(h, g);
            }
            if (e != null) {
                h = "min";
                g = e.d();
                a.ad.h(h, g);
            }
            if (f != null) {
                h = "minorUnit";
                g = f.d();
                a.ad.h(h, g);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_ValueAxisScaling.$t = /*@__PURE__*/ markType(CT_ValueAxisScaling, 'CT_ValueAxisScaling');
    return CT_ValueAxisScaling;
})();
