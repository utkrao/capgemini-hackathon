/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { UltraCalcFunctionConvert_UnitInfo } from "./UltraCalcFunctionConvert_UnitInfo";
import { markType } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { MathUtilities } from "./MathUtilities";
import { ArgumentException } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
import { timeSpanInit2, timeSpanTotalDays, timeSpanTotalHours, timeSpanTotalMinutes, timeSpanTotalSeconds } from "igniteui-react-core";
import { stringCompare } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionConvert = /*@__PURE__*/ (() => {
    class UltraCalcFunctionConvert extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = a.pop().toString();
            let d = a.pop().toString();
            let e = a.pop();
            if (e.isError) {
                return new ExcelCalcValue(e.toErrorValue());
            }
            let f = e._toDouble3();
            let g = UltraCalcFunctionConvert_UnitInfo.d(d);
            let h = UltraCalcFunctionConvert_UnitInfo.d(c);
            if (g == null || h == null) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(3));
            }
            let i = h.c;
            let j = g.c;
            if (i == 0 || j == 0 || i != j) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(3));
            }
            d = g.l;
            c = h.l;
            f *= g.j;
            let k;
            switch (i) {
                case 1:
                    k = UltraCalcFunctionConvert._at(f, d, c);
                    break;
                case 2:
                    k = UltraCalcFunctionConvert._ak(f, d, c);
                    break;
                case 3:
                    k = UltraCalcFunctionConvert._as(f, d, c);
                    break;
                case 4:
                    k = UltraCalcFunctionConvert._aq(f, d, c);
                    break;
                case 5:
                    k = UltraCalcFunctionConvert._am(f, d, c);
                    break;
                case 6:
                    k = UltraCalcFunctionConvert._al(f, d, c);
                    break;
                case 7:
                    k = UltraCalcFunctionConvert._ap(f, d, c);
                    break;
                case 8:
                    k = UltraCalcFunctionConvert._ao(f, d, c);
                    break;
                case 9:
                    k = UltraCalcFunctionConvert._ar(f, d, c);
                    break;
                case 10:
                    k = UltraCalcFunctionConvert._an(f, d, c);
                    break;
                default: return new ExcelCalcValue(new ExcelCalcErrorValue(3));
            }
            k /= h.j;
            k = MathUtilities.i(k);
            return new ExcelCalcValue(k);
        }
        get_name() {
            return "convert";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 3;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 3;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        static _as(a, b, c) {
            let d = 365.25;
            let e = 24;
            let f = 60;
            let g = 60;
            let h = 0;
            switch (b) {
                case "yr":
                    h = a * d * e * f * g;
                    break;
                case "day":
                    h = a * e * f * g;
                    break;
                case "hr":
                    h = a * f * g;
                    break;
                case "mn":
                    h = a * g;
                    break;
                case "sec":
                    h = a;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            let i = truncate(round10N(h, 0));
            let j = truncate(((h - i) * 1000));
            let k = timeSpanInit2(0, 0, 0, i, j);
            switch (c) {
                case "yr": return timeSpanTotalDays(k) / d;
                case "day": return timeSpanTotalDays(k);
                case "hr": return timeSpanTotalHours(k);
                case "mn": return timeSpanTotalMinutes(k);
                case "sec": return timeSpanTotalSeconds(k);
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _at(a, b, c) {
            let d = 14593.9029372064;
            let e = 453.59237;
            let f = 28.349523125;
            let g = 1.66053100460465E-24;
            let h = 0;
            switch (b) {
                case "sg":
                    h = a * d;
                    break;
                case "lbm":
                    h = a * e;
                    break;
                case "ozm":
                    h = a * f;
                    break;
                case "g":
                    h = a;
                    break;
                case "u":
                    h = a * g;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            switch (c) {
                case "u": return h / g;
                case "g": return h;
                case "ozm": return h / f;
                case "lbm": return h / e;
                case "sg": return h / d;
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _ak(a, b, c) {
            let d = 72913.3858267717;
            let e = 63360;
            let f = 39.3700787401575;
            let g = 36;
            let h = 12;
            let i = 0.0138888888888889;
            let j = 0.166666666666667;
            let k = 3.93700787401575E-09;
            let l = 0;
            switch (b) {
                case "Nmi":
                    l = a * d;
                    break;
                case "mi":
                    l = a * e;
                    break;
                case "m":
                    l = a * f;
                    break;
                case "yd":
                    l = a * g;
                    break;
                case "ft":
                    l = a * h;
                    break;
                case "in":
                    l = a;
                    break;
                case "pica":
                    l = a * j;
                    break;
                case "Pica":
                    l = a * i;
                    break;
                case "ang":
                    l = a * k;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            switch (c) {
                case "ang": return l / k;
                case "pica": return l / j;
                case "Pica": return l / i;
                case "in": return l;
                case "ft": return l / h;
                case "yd": return l / g;
                case "m": return l / f;
                case "mi": return l / e;
                case "Nmi": return l / d;
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _aq(a, b, c) {
            let d = 760;
            let e = 0.0075006168270417;
            let f = 0;
            switch (b) {
                case "Pa":
                case "p":
                    f = a * e;
                    break;
                case "atm":
                case "at":
                    f = a * d;
                    break;
                case "mmHg":
                    f = a;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            switch (c) {
                case "mmHg": return f;
                case "Pa":
                case "p": return f / e;
                case "atm":
                case "at": return f / d;
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _am(a, b, c) {
            let d = 4.4482216152605;
            let e = 1E-05;
            let f = 0;
            switch (b) {
                case "lbf":
                    f = a * d;
                    break;
                case "N":
                    f = a;
                    break;
                case "dyn":
                case "dy":
                    f = a * e;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            switch (c) {
                case "dyn":
                case "dy": return f / e;
                case "N": return f;
                case "lbf": return f / d;
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _al(a, b, c) {
            let d = 26845195376961.7;
            let e = 36000000000;
            let f = 10550558526.2;
            let g = 41868000;
            let h = 41840000;
            let i = 10000000;
            let j = 13558179.483314;
            let k = 1.60219000146921E-12;
            let l;
            switch (b) {
                case "HPh":
                case "hh":
                    l = a * d;
                    break;
                case "Wh":
                case "wh":
                    l = a * e;
                    break;
                case "BTU":
                case "btu":
                    l = a * f;
                    break;
                case "cal":
                    l = a * g;
                    break;
                case "c":
                    l = a * h;
                    break;
                case "J":
                    l = a * i;
                    break;
                case "flb":
                    l = a * j;
                    break;
                case "e":
                    l = a;
                    break;
                case "eV":
                case "ev":
                    l = a * k;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            switch (c) {
                case "eV":
                case "ev": return l / k;
                case "e": return l;
                case "flb": return l / j;
                case "J": return l / i;
                case "c": return l / h;
                case "cal": return l / g;
                case "BTU":
                case "btu": return l / f;
                case "Wh":
                case "wh": return l / e;
                case "HPh":
                case "hh": return l / d;
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _ap(a, b, c) {
            let d = 745.69987158227;
            let e;
            switch (b) {
                case "HP":
                case "h":
                    e = a * d;
                    break;
                case "W":
                case "w":
                    e = a;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            switch (c) {
                case "W":
                case "w": return e;
                case "HP":
                case "h": return e / d;
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _ao(a, b, c) {
            let d = 10000;
            let e;
            switch (b) {
                case "T":
                    e = a * d;
                    break;
                case "ga":
                    e = a;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            switch (c) {
                case "ga": return e;
                case "T": return e / d;
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _an(a, b, c) {
            let d = 768;
            let e = 202.884136211058;
            let f = 192;
            let g = 115.291192848466;
            let h = 96;
            let i = 48;
            let j = 6;
            let k = 3;
            let l;
            switch (b) {
                case "gal":
                    l = a * d;
                    break;
                case "l":
                case "lt":
                    l = a * e;
                    break;
                case "qt":
                    l = a * f;
                    break;
                case "uk_pt":
                    l = a * g;
                    break;
                case "pt":
                case "us_pt":
                    l = a * h;
                    break;
                case "cup":
                    l = a * i;
                    break;
                case "oz":
                    l = a * j;
                    break;
                case "tbs":
                    l = a * k;
                    break;
                case "tsp":
                    l = a;
                    break;
                default: throw new ArgumentException(1, "fromUnit");
            }
            switch (c) {
                case "tsp": return l;
                case "tbs": return l / k;
                case "oz": return l / j;
                case "cup": return l / i;
                case "pt":
                case "us_pt": return l / h;
                case "uk_pt": return l / g;
                case "qt": return l / f;
                case "l":
                case "lt": return l / e;
                case "gal": return l / d;
                default: throw new ArgumentException(1, "toUnit");
            }
        }
        static _ar(a, b, c) {
            b = UltraCalcFunctionConvert._au(b);
            c = UltraCalcFunctionConvert._au(c);
            if (stringCompare(b, c) == 0) {
                return a;
            }
            let d;
            switch (b) {
                case "C": switch (c) {
                    case "F": return ((a * 9) / 5) + 32;
                    case "K": return a + 273.15;
                    default: throw new ArgumentException(1, "toUnit");
                }
                case "F":
                    d = ((a - 32) / 9) * 5;
                    switch (c) {
                        case "C": return d;
                        case "K": return d + 273.15;
                        default: throw new ArgumentException(1, "toUnit");
                    }
                case "K":
                    d = (a - 273.15);
                    switch (c) {
                        case "C": return d;
                        case "F": return ((d * 9) / 5) + 32;
                        default: throw new ArgumentException(1, "toUnit");
                    }
                default: throw new ArgumentException(1, "fromUnit");
            }
        }
        static _au(a) {
            switch (a) {
                case "C":
                case "cel": return "C";
                case "F":
                case "fah": return "F";
                case "K":
                case "kel": return "K";
                default: throw new ArgumentException(1, "unit");
            }
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return (b == false);
        }
    }
    UltraCalcFunctionConvert.$t = /*@__PURE__*/ markType(UltraCalcFunctionConvert, 'UltraCalcFunctionConvert', BuiltInFunctionBase.$);
    return UltraCalcFunctionConvert;
})();
