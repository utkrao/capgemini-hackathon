/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ValueType, toNullable, typeCast, markStruct } from "igniteui-react-core";
import { ST_HexColorAuto } from "./ST_HexColorAuto";
import { ST_HexColorRGB } from "./ST_HexColorRGB";
import { DocCoreUtils } from "./DocCoreUtils";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ST_HexColor = /*@__PURE__*/ (() => {
    class ST_HexColor extends ValueType {
        constructor(a, ..._rest) {
            super();
            this.p = toNullable(ST_HexColorRGB.$, null);
            this.q = toNullable(ST_HexColorAuto.$, null);
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        this.p = toNullable(ST_HexColorRGB.$, c);
                        this.q = toNullable(ST_HexColorAuto.$, null);
                    }
                    break;
                case 2:
                    {
                        let c = _rest[0];
                        this.p = toNullable(ST_HexColorRGB.$, null);
                        this.q = toNullable(ST_HexColorAuto.$, c);
                    }
                    break;
            }
        }
        equals(a) {
            let b = toNullable(ST_HexColor.$, typeCast(ST_HexColor.$, a));
            if (ST_HexColor.m(b, toNullable(ST_HexColor.$, null))) {
                return false;
            }
            return ST_HexColor.j(this, b.getValueOrDefault());
        }
        getHashCode() {
            if (ST_HexColorRGB.h(this.p, toNullable(ST_HexColorRGB.$, null))) {
                return this.p.value.getHashCode();
            }
            if (ST_HexColorAuto.f(this.q, toNullable(ST_HexColorAuto.$, null))) {
                return this.q.value.getHashCode();
            }
            return 0;
        }
        static e(a) {
            let b = ST_HexColor.u(a);
            if (ST_HexColor.m(b, toNullable(ST_HexColor.$, null))) {
                return b.getValueOrDefault();
            }
            throw DocCoreUtils.n(ST_HexColor.$, a);
        }
        static u(a) {
            let b = ST_HexColorAuto.i(a);
            if (ST_HexColorAuto.f(b, toNullable(ST_HexColorAuto.$, null))) {
                return toNullable(ST_HexColor.$, ST_HexColor.a(b.getValueOrDefault()));
            }
            let c = ST_HexColorRGB.p(a);
            if (ST_HexColorRGB.h(c, toNullable(ST_HexColorRGB.$, null))) {
                return toNullable(ST_HexColor.$, ST_HexColor.b(c.getValueOrDefault()));
            }
            return toNullable(ST_HexColor.$, null);
        }
        toString() {
            if (ST_HexColorRGB.h(this.p, toNullable(ST_HexColorRGB.$, null))) {
                return this.p.getValueOrDefault().toString();
            }
            if (ST_HexColorAuto.f(this.q, toNullable(ST_HexColorAuto.$, null))) {
                return this.q.getValueOrDefault().toString();
            }
            return stringEmpty();
        }
        get h() {
            return ST_HexColorAuto.f(this.q, toNullable(ST_HexColorAuto.$, null));
        }
        get i() {
            return ST_HexColorRGB.h(this.p, toNullable(ST_HexColorRGB.$, null));
        }
        static j(a, b) {
            return ST_HexColorRGB.f(a.p, b.p) && ST_HexColorAuto.d(a.q, b.q);
        }
        static k(a, b) {
            if (!a.hasValue) {
                return !b.hasValue;
            }
            else if (!b.hasValue) {
                return false;
            }
            return ST_HexColor.j(a.value, b.value);
        }
        static l(a, b) {
            return !(ST_HexColor.j(a, b));
        }
        static m(a, b) {
            if (!a.hasValue) {
                return b.hasValue;
            }
            else if (!b.hasValue) {
                return true;
            }
            return ST_HexColor.l(a.value, b.value);
        }
        static b(a) {
            return new ST_HexColor(1, a);
        }
        static t(a) {
            if (!a.hasValue) {
                return toNullable(ST_HexColor.$, null);
            }
            return toNullable(ST_HexColor.$, ST_HexColor.b(a.value));
        }
        static f(a) {
            return a.p.value;
        }
        static r(a) {
            if (!a.hasValue) {
                return toNullable(ST_HexColorRGB.$, null);
            }
            return toNullable(ST_HexColorRGB.$, ST_HexColor.f(a.value));
        }
        static a(a) {
            return new ST_HexColor(2, a);
        }
        static s(a) {
            if (!a.hasValue) {
                return toNullable(ST_HexColor.$, null);
            }
            return toNullable(ST_HexColor.$, ST_HexColor.a(a.value));
        }
    }
    ST_HexColor.$t = /*@__PURE__*/ markStruct(ST_HexColor, 'ST_HexColor');
    return ST_HexColor;
})();
