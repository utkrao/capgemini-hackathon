/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { UltraCalcFunctionTwoMatrixFunction } from "./UltraCalcFunctionTwoMatrixFunction";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionSteyx = /*@__PURE__*/ (() => {
    class UltraCalcFunctionSteyx extends UltraCalcFunctionTwoMatrixFunction {
        evaluate(a, b) {
            let c;
            let d;
            let e;
            let f = UltraCalcFunctionTwoMatrixFunction._ao(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            if (c != null) {
                return new ExcelCalcValue(c);
            }
            let g;
            let h;
            let i;
            let j = UltraCalcFunctionTwoMatrixFunction._ar(d, e, g, h, i);
            g = j.p2;
            h = j.p3;
            i = j.p4;
            if (g < 3) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(2));
            }
            let k = h / g;
            let l = i / g;
            let m = UltraCalcFunctionTwoMatrixFunction._am(d, e, (n, o) => (n - k) * (o - l));
            let n = UltraCalcFunctionTwoMatrixFunction._an(d, (o) => Math.pow((o - k), 2));
            let o = UltraCalcFunctionTwoMatrixFunction._an(e, (p) => Math.pow((p - l), 2));
            if (o == 0) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(2));
            }
            let p = 1 / (g - 2);
            let q = n - ((m * m) / o);
            let r = Math.sqrt(p * q);
            return new ExcelCalcValue(r);
        }
        get_name() {
            return "steyx";
        }
        get name() {
            return this.get_name();
        }
    }
    UltraCalcFunctionSteyx.$t = /*@__PURE__*/ markType(UltraCalcFunctionSteyx, 'UltraCalcFunctionSteyx', UltraCalcFunctionTwoMatrixFunction.$);
    return UltraCalcFunctionSteyx;
})();
