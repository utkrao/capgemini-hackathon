/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, String_$type, markType } from "igniteui-react-core";
import { Regex } from "igniteui-react-core";
import { Uri } from "igniteui-react-core";
import { UriUtilities } from "./UriUtilities";
import { Package } from "./Package";
import { Convert } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { stringStartsWith, stringEmpty, stringReplace, stringIsNullOrEmpty, stringEndsWith } from "igniteui-react-core";
import { toUniversalTime, dateToStringFormat, toLocalTime } from "igniteui-react-core";
import { dateNow } from "igniteui-react-core";
/**
 * @hidden
 */
export let PackageUtilities = /*@__PURE__*/ (() => {
    class PackageUtilities extends Base {
        static j(a, b) {
            if (stringStartsWith(b, ".." + "/")) {
                return PackageUtilities.j(PackageUtilities.n(a), b.substr(3));
            }
            let c = a.length > 0 && a.charAt(a.length - 1) == "/";
            let d = b.length > 0 && b.charAt(0) == "/";
            if (d) {
                return b;
            }
            if (c != d) {
                return a + b;
            }
            if (c) {
                return a + b.substr(1);
            }
            return a + "/" + b;
        }
        static ag(a, b) {
            let c = a.toString();
            let d = b.toString();
            return UriUtilities.b(PackageUtilities.j(c, d));
        }
        static a(a, b) {
            return Package._d(a, b ? 3 : 2);
        }
        static k(a) {
            let b = toUniversalTime(a);
            return dateToStringFormat(b, "s") + "Z";
        }
        static m(a) {
            let b = PackageUtilities.n(a);
            let c = PackageUtilities.o(a);
            let d = PackageUtilities.j(b, "_rels");
            let e = c + ".rels";
            return PackageUtilities.j(d, e);
        }
        static n(a) {
            let b = a.lastIndexOf("/");
            if (b < 0) {
                return a;
            }
            return a.substr(0, b);
        }
        static ah(a) {
            return new Uri(1, PackageUtilities.n(a.toString()), 2);
        }
        static o(a) {
            let b = a.lastIndexOf("/");
            if (b < 0) {
                return a;
            }
            return a.substr(b + 1);
        }
        static e(a) {
            if (a == null || a.length != 3 || a.charAt(0) != '%') {
                PackageUtilities.al("The value passed to GetPercentEncodedValue was not expoected: " + a);
                return 0;
            }
            try {
                return Convert.toByte2(a.substr(1), 16);
            }
            catch (b) {
                PackageUtilities.al("The value passed to GetPercentEncodedValue was not expoected: " + a);
                return 0;
            }
        }
        static ai(a, b) {
            return PackageUtilities.aj(a, b, "/");
        }
        static aj(a, b, c) {
            let d = PackageUtilities.q(a.toString(), b.toString(), "/", false);
            return UriUtilities.b(d);
        }
        static p(a, b) {
            return PackageUtilities.q(a, b, "/", false);
        }
        static q(a, b, c, d) {
            let e = PackageUtilities.h(a, c);
            let f = PackageUtilities.h(b, c);
            for (let g = 0; g < e.count - 1 && g < f.count; g++) {
                if (e._inner[g] == f._inner[g]) {
                    e.removeAt(g);
                    f.removeAt(g);
                    g--;
                    continue;
                }
                else {
                    if (d) {
                        let h = PackageUtilities.w.g(b, stringEmpty());
                        return stringReplace(h, c, "/");
                    }
                    else {
                        for (let i = 0; i < e.count - 1; i++) {
                            f.insert(0, "..");
                        }
                    }
                    break;
                }
            }
            let j = new StringBuilder(0);
            for (let k of fromEnum(f)) {
                if (c != "/") {
                    j.l(stringReplace(k, c, "/"));
                }
                else {
                    j.l(k);
                }
                j.h("/");
            }
            j.y(j.c - 1, 1);
            return j.toString();
        }
        static g(a) {
            return PackageUtilities.h(a, "/");
        }
        static h(a, b) {
            if (stringIsNullOrEmpty(a)) {
                return new List$1(String_$type, 0);
            }
            return new List$1(String_$type, 1, a.split(b));
        }
        static ak(a) {
            let b = PackageUtilities.ah(a.sourceUri);
            let c = PackageUtilities.ag(b, a.targetUri);
            return c;
        }
        static b(a) {
            let b = PackageUtilities.g(a);
            if (b.count == 0) {
                return false;
            }
            if (b._inner[0].length != 0) {
                return false;
            }
            for (let c = 1; c < b.count; c++) {
                if (PackageUtilities.d(b._inner[c]) == false) {
                    return false;
                }
            }
            return true;
        }
        static c(a) {
            return PackageUtilities.b(a.toString());
        }
        static d(a) {
            if (stringIsNullOrEmpty(a)) {
                return false;
            }
            if (a.charAt(a.length - 1) == '.') {
                return false;
            }
            let b = PackageUtilities.ae.i(a);
            if (b.i == false || b.d != a.length) {
                return false;
            }
            let c = PackageUtilities.aa.i(a);
            while (c.i) {
                let d = PackageUtilities.e(c.g);
                let e = Convert.toChar(d);
                switch (e) {
                    case '\\':
                    case '/': return false;
                }
                let f = e.toString();
                if (PackageUtilities.ac.i(f).i) {
                    return false;
                }
                c = c.o();
            }
            return true;
        }
        static i(a) {
            if (stringEndsWith(a, "Z") == false) {
                PackageUtilities.al("The date format was not correct.");
                return dateNow();
            }
            a = a.substr(0, a.length - 1);
            let b;
            if (!((() => { let c = DocCoreUtils.g(a, "s", null, b); b = c.p3; return c.ret; })())) {
                if (!((() => { let c = DocCoreUtils.g(a, "o", null, b); b = c.p3; return c.ret; })())) {
                    PackageUtilities.al("Error occurred while parsing the date in W3CDTF format: " + a);
                    return dateNow();
                }
            }
            return toLocalTime(b);
        }
        static get aa() {
            if (PackageUtilities.z == null) {
                PackageUtilities.z = new Regex("%[0-9A-F]{2}", 8 | 1);
            }
            return PackageUtilities.z;
        }
        static get ac() {
            if (PackageUtilities.ab == null) {
                PackageUtilities.ab = new Regex("[\\-\\._~0-9A-Z]", 8 | 1);
            }
            return PackageUtilities.ab;
        }
        static get ae() {
            if (PackageUtilities.ad == null) {
                PackageUtilities.ad = new Regex("([:@\\-\\._~!$&'()*+,;=0-9A-Z]|(%[0-9A-F]{2}))*", 8 | 1);
            }
            return PackageUtilities.ad;
        }
        static get y() {
            if (PackageUtilities.x == null) {
                PackageUtilities.x = new Regex("[^.]", 8 | 1);
            }
            return PackageUtilities.x;
        }
        static get w() {
            if (PackageUtilities.v == null) {
                PackageUtilities.v = new Regex("\\w:", 8);
            }
            return PackageUtilities.v;
        }
        static al(a) {
            if (DocCoreUtils.f) {
                return;
            }
        }
    }
    PackageUtilities.$t = /*@__PURE__*/ markType(PackageUtilities, 'PackageUtilities');
    PackageUtilities.z = null;
    PackageUtilities.ab = null;
    PackageUtilities.ad = null;
    PackageUtilities.x = null;
    PackageUtilities.v = null;
    return PackageUtilities;
})();
