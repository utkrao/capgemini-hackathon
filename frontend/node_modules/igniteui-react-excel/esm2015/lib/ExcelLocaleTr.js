/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
export class ExcelLocaleTr {
    constructor() {
        this["DefaultTotalLabel"] = "Toplam";
        this["Error_AnchoredReference"] = "Bağlantısız bir referans olarak {0} 'a erişmeye çalışın";
        this["Error_ExplicitThis"] = "{0} - Açık Bu desteklenmez";
        this["Error_ExternalRange"] = "Aralık, Harici Referans içerir";
        this["Error_FormulaNotSupported"] = "{0} - Formülleri desteklemeyen bir referanstaki formüle erişme girişimi";
        this["Error_Internal"] = "{0} yönteminde dahili bir hata oluştu.";
        this["Error_InvalidFunction"] = "{1} konumunda geçersiz işlev '{0}'.";
        this["Error_InvalidFunctionArgCountTooFew"] = "{1} adresinde başvurulan '{0}' işlevi doğru sayıda bağımsız değişken içermiyor. İşlev, minimum {2} parametre gerektirir.";
        this["Error_InvalidFunctionArgCountTooMany"] = "{1} adresinde başvurulan '{0}' işlevi doğru sayıda bağımsız değişken içermiyor. Bağımsız değişken sayısı {2} parametreyi geçmemelidir.";
        this["Error_InvalidNumberSystemDigit"] = "{2} tabanlı sayı sistemi için '{1}' değerinde geçersiz '{0}' basamağıyla karşılaşıldı.";
        this["Error_InvalidOperand"] = "Geçersiz İşlenen";
        this["Error_InvalidOperatorArgCount"] = "'{0}' işlevi, {1} bağımsız değişkenlerini kabul etmelidir.";
        this["Error_InvalidReference"] = "Geçersiz veya mevcut olmayan referans";
        this["Error_Location"] = "satır {0} sütun {1}";
        this["Error_MethodNotSupported"] = "{0}, {1} 'yi desteklemiyor.";
        this["Error_NoCurrentRangeElement"] = "Geçerli Aralık Öğesi yok";
        this["Error_NullFunctionResult"] = "'{0}' değerlendirmesi boş bir değer döndürdü.";
        this["Error_NullOperand"] = "Boş işlenen";
        this["Error_ParseRef"] = "{0} konumunda bilinmeyen referans.";
        this["Error_RangeFromLast"] = "fromT.Last ayarlanmadı";
        this["Error_RangeFromNull"] = "RefRange: başlangıç boş";
        this["Error_RangeFromRefBase"] = "RefRange: başlangıç bir RefBase değil: {0}";
        this["Error_RangeLast"] = "RefRange Doğrulama: son demetler [{0}]! = [{1}]";
        this["Error_RangeNormalizeScope"] = "RefRange Normalleştirme: hatalı kapsam [{0}/{1}]";
        this["Error_RangeToNull"] = "RefRange: bitiş boş";
        this["Error_RangeToRefBase"] = "RefRange: bitiş bir RefBase değil: {0}";
        this["Error_RangeTuple"] = "RefRange Doğrulama: demetler [{0}] != [{1}]";
        this["Error_RangeValidateCount"] = "RefRange Doğrulama: başlangıç sayısı {0} != bitiş sayısı {1}";
        this["Error_ReadOnlyReference"] = "{0} - Salt okunur referansta değer belirleme girişimi";
        this["Error_ReferenceNotEumerable"] = "{0} numaralandırılabilir bir referans değil";
        this["Error_RefMalformed"] = "{0} - Hatalı Biçimlendirilmiş Referans {1}";
        this["Error_RP_ContainsBase"] = "RefParser.Contains - Boş Taban";
        this["Error_RP_ContainsTarget"] = "RefParser.Contains - Boş Hedef";
        this["Error_RP_EmptyElement"] = "Geçersiz referans {0}. {1} konumunda boş öğe ile karşılaşıldı.";
        this["Error_RP_EmptyReference"] = "Geçersiz referans {0}. Referans boş.";
        this["Error_RP_MalformedExtra"] = "RefParser Hatalı Biçimlendirilmiş Referans: [{1}] içinde birden çok [{0}] bulundu";
        this["Error_RP_MalformedUnexpected"] = "RefParser Hatalı Biçimlendirilmiş Referans: Beklenmeyen [{0}], [{1}] içinde bulundu";
        this["Error_RP_MergeRelativeBase"] = "RefParser.Merge: Taban Görecelidir";
        this["Error_RP_MissingCloseParenthesis"] = "Geçersiz referans {0}. Kapalı parantez eksik.";
        this["Error_RP_MissingEndQuotes"] = "Geçersiz referans {0}. Eksik kapatma tırnak işareti.";
        this["Error_RT_Expected"] = "RefTuple: [{1}] içinde [{0}] bekleniyor";
        this["Error_RT_InvalidScope"] = "Geçersiz kapsam: {0}.";
        this["Error_RT_InvalidScope_CharactersAfterClosingQuotes"] = "{0} konumunda {1} içinde çift tırnak kapatıldıktan sonra karşılaşılan karakterler.";
        this["Error_RT_InvalidTuple_CharactersAfterScopeEnd"] = "Geçersiz öğe {0}. Kapsamın bitiminden sonra karşılaşılan karakterler.";
        this["Error_RT_InvalidTuple_MissingCloseParenthesis"] = "Geçersiz öğe {0}. Kapalı parantez eksik.";
        this["Error_RT_InvalidTuple_MissingEndQuotes"] = "Geçersiz öğe {0}. Eksik kapatma tırnak işareti.";
        this["Error_RT_InvalidTuple_NamePortionEmpty"] = "Geçersiz öğe {0}. Öğe adı kısmı boş.";
        this["Error_RT_InvalidTuple_ScopeIndexLarge"] = "Geçersiz öğe {0}. {1} dizini geçersiz: {2}.";
        this["Error_RT_InvalidTuple_UnescapedCharacter"] = "{2} konumunda {1} içinde çıkış karaktersiz {0} karakteriyle karşılaşıldı.";
        this["Error_RT_NullRefName"] = "RefTuple: boş RefName";
        this["Error_RT_Unexpected"] = "RefTuple: [{1}] içinde beklenmeyen [{0}]";
        this["Error_ScopeAllNotLast"] = "{0} - Kapsam Tümü son öğede görünmelidir {1}";
        this["Error_UCErrorCode_Div"] = "Sıfıra böl";
        this["Error_UCErrorCode_Fail"] = "Başarısız";
        this["Error_UCErrorCode_NA"] = "Uygulanamaz";
        this["Error_UCErrorCode_Name"] = "Geçersiz ad";
        this["Error_UCErrorCode_Null"] = "Boş Değer";
        this["Error_UCErrorCode_Num"] = "İşlev veya formülde geçersiz sayısal değerler.";
        this["Error_UCErrorCode_Ok"] = "Başarılı";
        this["Error_UCErrorCode_Reference"] = "Geçersiz veya mevcut olmayan referans";
        this["Error_UCErrorCode_Unknown"] = "Geçersiz kod";
        this["Error_UCErrorCode_Value"] = "Yanlış bağımsız değişken veya işlenen türü.";
        this["Error_UnexpectedScope"] = "{0} - Üst Öğe için beklenmeyen kapsam {1}";
        this["Error_UnknownRange"] = "Bilinmeyen Aralık Türü";
        this["Error_UnknownRefType"] = "{0} - Bilinmeyen RefType {1}";
        this["Error_UnknownScope"] = "{0} - Bilinmeyen kapsam {1}";
        this["Error_UnresolvedExternal"] = "Çözümlenmemiş harici referans";
        this["Func_abs_Arg_0"] = "sayı";
        this["Func_abs_ArgDesc_0"] = "Mutlak değeri alınacak gerçek sayı.";
        this["Func_abs_Category"] = "Matematik";
        this["Func_abs_CategoryURL"] = "Matematik";
        this["Func_abs_Desc"] = "Bir sayının mutlak değerini verir. Bir sayının mutlak değeri, işareti olmayan sayıdır.";
        this["Func_acos_Arg_0"] = "sayı";
        this["Func_acos_ArgDesc_0"] = "-1 ile 1 arasında olması gereken açının kosinüsü.";
        this["Func_acos_Category"] = "Matematik";
        this["Func_acos_CategoryURL"] = "Matematik";
        this["Func_acos_Desc"] = "Bir sayının arkkosinüsünü veya ters kosinüsünü verir. Arkkosinüs, kosinüsü belirtilen sayı olan açıdır. Döndürülen açı, sıfır ile pi aralığında radyan cinsinden verilir. Sonucu radyandan dereceye dönüştürmek için 180/PI() ile çarpın.";
        this["Func_acosh_Arg_0"] = "sayı";
        this["Func_acosh_ArgDesc_0"] = "Ters hiperbolik kosinüsü bulmak için 1'den büyük gerçek sayı.";
        this["Func_acosh_Category"] = "Matematik";
        this["Func_acosh_CategoryURL"] = "Matematik";
        this["Func_acosh_Desc"] = "Verilen sayının ters hiperbolik kosinüsünü verir. Ters hiperbolik kosinüs, hiperbolik kosinüsü belirtilen sayı olan açıdır.";
        this["Func_and_Arg_0"] = "mantıksal {0}";
        this["Func_and_ArgDesc_0"] = "Mantıksal bir değer (doğru veya yanlış).";
        this["Func_and_Category"] = "Mantıklı";
        this["Func_and_CategoryURL"] = "Mantıklı";
        this["Func_and_Desc"] = "Tüm değerler doğruysa doğru veya bir veya daha fazla değer yanlışsa yanlış verir.";
        this["Func_asin_Arg_0"] = "sayı";
        this["Func_asin_ArgDesc_0"] = "-1 ile 1 radyan arasında olması gereken, elde edilecek açının sinüsü.";
        this["Func_asin_Category"] = "Matematik";
        this["Func_asin_CategoryURL"] = "Matematik";
        this["Func_asin_Desc"] = "Bir sayının ark sinüsünü veya ters sinüsünü verir. Arksinüs, sinüsü belirtilen sayı olan açıdır. Döndürülen açı radyan cinsinden -pi/2 ile pi/2 aralığında verilmiştir. Arksinüsü derece cinsinden ifade etmek için sonucu 180/PI() ile çarpın.";
        this["Func_asinh_Arg_0"] = "sayı";
        this["Func_asinh_ArgDesc_0"] = "Ters hiperbolik sinüsün bulunacağı gerçek sayı.";
        this["Func_asinh_Category"] = "Matematik";
        this["Func_asinh_CategoryURL"] = "Matematik";
        this["Func_asinh_Desc"] = "Verilen sayının ters hiperbolik sinüsünü verir. Ters hiperbolik sinüs, hiperbolik sinüsü belirtilen sayı olan açıdır.";
        this["Func_atan_Arg_0"] = "sayı";
        this["Func_atan_ArgDesc_0"] = "Alınacak açının tanjantı.";
        this["Func_atan_Category"] = "Matematik";
        this["Func_atan_CategoryURL"] = "Matematik";
        this["Func_atan_Desc"] = "Bir sayının arktanjantını veya ters tanjantını verir. Arktanjant, tanjantı belirtilen sayı olan açıdır. Döndürülen açı radyan cinsinden -pi/2 ile pi/2 aralığında verilmiştir. Arktanjantı derece cinsinden ifade etmek için sonucu 180/PI() ile çarpın.";
        this["Func_atan2_Arg_0"] = "x";
        this["Func_atan2_Arg_1"] = "y";
        this["Func_atan2_ArgDesc_0"] = "Noktanın x koordinatı.";
        this["Func_atan2_ArgDesc_1"] = "Noktanın y koordinatı.";
        this["Func_atan2_Category"] = "Matematik";
        this["Func_atan2_CategoryURL"] = "Matematik";
        this["Func_atan2_Desc"] = "Belirtilen x ve y koordinatlarının arktanjantını veya ters tanjantını verir. Arktanjant, x ekseninden orijini (0, 0) ve koordinatlı bir noktayı (x_num, y_num) içeren bir çizgiye olan açıdır. Açı, -pi hariç, -pi ve pi arasındaki radyan cinsinden verilir.";
        this["Func_atanh_Arg_0"] = "sayı";
        this["Func_atanh_ArgDesc_0"] = "Ters hiperbolik tanjantı elde etmek için -1 ile 1 arasında gerçek bir sayı.";
        this["Func_atanh_Category"] = "Matematik";
        this["Func_atanh_CategoryURL"] = "Matematik";
        this["Func_atanh_Desc"] = "Verilen sayının ters hiperbolik tanjantını verir. Ters hiperbolik tanjant, hiperbolik tanjantı belirtilen sayı olan açıdır.";
        this["Func_avedev_Arg_0"] = "sayı{0}";
        this["Func_avedev_ArgDesc_0"] = "Number1, number2, ... bir veya daha fazla sayısal değer veya sayısal değerlere başvuru.";
        this["Func_avedev_Category"] = "İstatistiksel";
        this["Func_avedev_CategoryURL"] = "İstatistiksel";
        this["Func_avedev_Desc"] = "Tüm sayısal değerlerin ortalamasından ortalama sapmayı verir.";
        this["Func_average_Arg_0"] = "sayı{0}";
        this["Func_average_ArgDesc_0"] = "Diğer bağımsız değişkenlerle ortalamanın bulunacağı sayı veya sayı aralığı.";
        this["Func_average_Category"] = "İstatistiksel";
        this["Func_average_CategoryURL"] = "İstatistiksel";
        this["Func_average_Desc"] = "Bir veya daha fazla değerin ortalamasını (aritmetik ortalama) verir.";
        this["Func_bin2dec_Arg_0"] = "Sayı";
        this["Func_bin2dec_ArgDesc_0"] = "İkili sayıyı temsil eden bir metin ifadesi.";
        this["Func_bin2dec_Category"] = "Mühendislik";
        this["Func_bin2dec_CategoryURL"] = "Mühendislik";
        this["Func_bin2dec_Desc"] = "İkili sayı sistemindeki bir sayının metin gösteriminin ondalık değerini verir.";
        this["Func_bin2hex_Arg_0"] = "Sayı";
        this["Func_bin2hex_Arg_1"] = "Yerler";
        this["Func_bin2hex_ArgDesc_0"] = "İkili sayıyı temsil eden bir metin ifadesi.";
        this["Func_bin2hex_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Bu belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılacaktır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_bin2hex_Category"] = "Mühendislik";
        this["Func_bin2hex_CategoryURL"] = "Mühendislik";
        this["Func_bin2hex_Desc"] = "İkili bir sayıyı temsil eden bir metin ifadesini, onaltılık sayı sisteminde aynı sayıyı temsil eden bir metin ifadesine dönüştürür.";
        this["Func_bin2oct_Arg_0"] = "Sayı";
        this["Func_bin2oct_Arg_1"] = "Yerler";
        this["Func_bin2oct_ArgDesc_0"] = "İkili sayıyı temsil eden bir metin ifadesi.";
        this["Func_bin2oct_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Bu belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılacaktır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_bin2oct_Category"] = "Mühendislik";
        this["Func_bin2oct_CategoryURL"] = "Mühendislik";
        this["Func_bin2oct_Desc"] = "İkili bir sayıyı temsil eden bir metin ifadesini, sekizlik sayı sisteminde aynı sayıyı temsil eden bir metin ifadesine dönüştürür.";
        this["Func_binomdist_Arg_0"] = "Sayı";
        this["Func_binomdist_Arg_1"] = "Denemeler";
        this["Func_binomdist_Arg_2"] = "Olasılık";
        this["Func_binomdist_Arg_3"] = "Kümülatif";
        this["Func_binomdist_ArgDesc_0"] = "Denemelerdeki başarı sayısı.";
        this["Func_binomdist_ArgDesc_1"] = "Bağımsız deneme sayısı.";
        this["Func_binomdist_ArgDesc_2"] = "Her denemede başarı olasılığı.";
        this["Func_binomdist_ArgDesc_3"] = "İşlevin biçimini belirleyen mantıksal bir değer. Doğruysa, işlev kümülatif dağılımı verecektir; bu, en fazla 'sayı' başarı olma olasılığıdır, aksi takdirde, 'sayı' başarılarının olma olasılığı olan olasılık kütlesini verecektir.";
        this["Func_binomdist_Category"] = "İstatistiksel";
        this["Func_binomdist_CategoryURL"] = "İstatistiksel";
        this["Func_binomdist_Desc"] = "Bir dizi öğe ve bu kümeden seçilen birkaç öğe verilen olası kombinasyonların sayısını (tekrarlarla birlikte) verir.";
        this["Func_CategoryURL_Template"] = "ms-help://INFRAGISTICS_HELP/NetAdvantagev{2}{3}/Win/WinElements/WinCalcManager_{0}_Functions.html#FUNC_{1}";
        this["Func_ceiling_Arg_0"] = "sayı";
        this["Func_ceiling_Arg_1"] = "önem";
        this["Func_ceiling_ArgDesc_0"] = "Yuvarlanacak sayı.";
        this["Func_ceiling_ArgDesc_1"] = "Yuvarlanacak katsayı. Atlanırsa, bunun bir olduğu varsayılır.";
        this["Func_ceiling_Category"] = "Matematik";
        this["Func_ceiling_CategoryURL"] = "Matematik";
        this["Func_ceiling_Desc"] = "Belirtilen sayıdan büyük veya ona eşit olan en küçük anlamlı katsayısını (varsayılan 1'dir) verir.";
        this["Func_char_Arg_0"] = "charCode";
        this["Func_char_ArgDesc_0"] = "Bir karaktere dönüştürülecek sayı.";
        this["Func_char_Category"] = "TextAndData";
        this["Func_char_CategoryURL"] = "Text_and_Data";
        this["Func_char_Desc"] = "Bilgisayarınız için karakter kümesinden kod numarasıyla belirtilen karakteri verir.";
        this["Func_choose_Arg_0"] = "IndexNum";
        this["Func_choose_Arg_1"] = "Value{0}";
        this["Func_choose_ArgDesc_0"] = "Kullanılacak değer için geri kalan bağımsız değişkenlere 1 tabanlı dizin.";
        this["Func_choose_ArgDesc_1"] = "IndexNum değerine bağlı olarak seçilebilecek bir değer.";
        this["Func_choose_Category"] = "LookupAndReference";
        this["Func_choose_CategoryURL"] = "Lookup_And_Reference";
        this["Func_choose_Desc"] = "İlk bağımsız değişkendeki sayıya göre bağımsız değişkenlerinde sağlanan değerlerden birini verir.";
        this["Func_code_Arg_0"] = "Metin";
        this["Func_code_ArgDesc_0"] = "İlk karakteri değerlendirilecek metin ifadesi.";
        this["Func_code_Category"] = "TextAndData";
        this["Func_code_CategoryURL"] = "Text_and_Data";
        this["Func_code_Desc"] = "Bilgisayarınız tarafından kullanılan karakter kümesini kullanarak bir metin ifadesindeki ilk karakter için sayısal bir kod verir.";
        this["Func_combin_Arg_0"] = "Sayı";
        this["Func_combin_Arg_1"] = "NumberChosen";
        this["Func_combin_ArgDesc_0"] = "Öğe sayısı.";
        this["Func_combin_ArgDesc_1"] = "Her kombinasyonda seçilen öğe sayısı.";
        this["Func_combin_Category"] = "Matematik";
        this["Func_combin_CategoryURL"] = "Matematik";
        this["Func_combin_Desc"] = "Bir dizi öğe ve bu kümeden seçilen bir dizi öğe verilen olası kombinasyonların sayısını verir.";
        this["Func_combina_Arg_0"] = "Sayı";
        this["Func_combina_Arg_1"] = "NumberChosen";
        this["Func_combina_ArgDesc_0"] = "Öğe sayısı.";
        this["Func_combina_ArgDesc_1"] = "Her kombinasyonda seçilen öğe sayısı.";
        this["Func_combina_Category"] = "Matematik";
        this["Func_combina_CategoryURL"] = "Matematik";
        this["Func_combina_Desc"] = "Bir dizi öğe ve bu kümeden seçilen birkaç öğe verilen olası kombinasyonların sayısını (tekrarlarla birlikte) verir.";
        this["Func_complex_Arg_0"] = "RealNumber";
        this["Func_complex_Arg_1"] = "ImaginaryNumber";
        this["Func_complex_Arg_2"] = "Sonek";
        this["Func_complex_ArgDesc_0"] = "Karmaşık sayının gerçek katsayısı.";
        this["Func_complex_ArgDesc_1"] = "Sayının sanal katsayısı.";
        this["Func_complex_ArgDesc_2"] = "Kullanılacak soneki belirtir. Kabul edilebilir değerler \"i\" veya \"j\" dir. Atlanırsa, \"i\" kullanılır. Son ekin büyük / küçük harfe duyarlı olduğunu unutmayın; büyük harf \"I\" ve \"J\" ye izin verilmez ve #VALUE hatasıyla sonuçlanır.";
        this["Func_complex_Category"] = "Mühendislik";
        this["Func_complex_CategoryURL"] = "Mühendislik";
        this["Func_complex_Desc"] = "Gerçek ve sanal bir sayıyı birleştirerek \"x + yi\" veya \"x + yj\" biçiminde bir metin ifadesi olarak temsil edilen karmaşık bir sayıyı verir.";
        this["Func_concatenate_Arg_0"] = "metin{0}";
        this["Func_concatenate_ArgDesc_0"] = "Tek bir metin ifadesinde birleştirilecek bir metin ifadesi veya metin ifadesi aralığı.";
        this["Func_concatenate_Category"] = "TextAndData";
        this["Func_concatenate_CategoryURL"] = "Text_and_Data";
        this["Func_concatenate_Desc"] = "Sabit azalan bakiye yöntemi kullanılarak, belirli bir dönem için bir varlığın amortismanını verir.";
        this["Func_convert_Arg_0"] = "Sayı";
        this["Func_convert_Arg_1"] = "FromUnit";
        this["Func_convert_Arg_2"] = "ToUnit";
        this["Func_convert_ArgDesc_0"] = "Dönüştürülecek değer.";
        this["Func_convert_ArgDesc_1"] = "Numaranın verildiği birim.\r\n\r\nAğırlık ve kütle birimleri: \" g \" = gram; \" sg \" = bilgi; \" lbm \" = pound kütle (avoirdupois); \" u \" = U (atomik kütle birimi); \" ozm \" = Ons kütlesi (avoirdupois)\r\nUzaklık birimleri: \" m \" = Metre; \" mi \" = Kara mili; \" Nmi \" = Deniz mili; \" inç \" = İnç; \" ft \" = Fit \" yd \" = Yard; \" ang \" = Angstrom; \" Pika \" = Pika (1/72 inç)\r\nZaman birimleri: \" yr \" = Yıl; \" gün \" = Gün; \" hr \" = Saat; \" mn \" = Dakika; \" sec \" = Saniye\r\nBasınç birimleri: \" Pa \" (veya \" p \") = Pascal; \" atm \" (veya \" at \") = Atmosfer; \" mmHg \" = mm Cıva\r\nKuvvet birimleri: \" N \" = Newton; \" dyn \" (veya \" dy \") = Dyne; \" lbf \" = Pound kuvvet\r\nEnerji birimleri: \" J \" = Jul, \" e \" = Erg; \" c \" = Termodinamik kalori; \" cal \" = BT kalori; \" eV \" (veya \" ev \") = Elektron volt; \" HPh \" (veya \" hh \") = Beygir gücü-saat; \" Wh \" (veya \" wh \") = Watt-saat; \" flb \" = Foot-pound; \" BTU \" (veya \" btu \") = BTU\r\nGüç birimleri: \" HP \" (veya \" h \") = Beygir gücü; \" W \" (veya \" w \") = Watt\r\nManyetizma birimler: \" T \" = Tesla; \" ga \" = Gauss\r\nSıcaklık birimleri: \" C \" (veya \" cel \") = Santigrat Derece; \" F \" (veya \" fah \") =  Fahrenhayt Derece \" K \" (veya \" kel \") = Kelvin\r\nSıvı ölçü birimleri: \" tsp \" = Çay kaşığı; \" tbs \" = Yemek kaşığı; \" oz \" = Sıvı ons; \" kupa \" = Kupa; \" pt \" (veya \" us_pt \") = ABD pint; \" uk_pt \" = İngiltere pint; \" qt \" = Quart; \" gal \" = Galon; \" l \" (veya \" lt \") = Litre\r\n\r\nHerhangi bir metrik birimin önüne aşağıdakilerden biri eklenebilir: ekza (\" E \") = 1E + 18; peta (\" P \") = 1E + 15; tera (\" T \") = 1E + 12; giga (\" G \") = 1E + 09; mega (\" M \") = 1E + 06; kilo (\" k \") = 1E + 03; hekta (\" h \") = 1E + 02; dekao (\" e \") = 1E + 01; deci (\" d \") = 1E-01; santi (\" c \") = 1E-02; mili (\" m \") = 1E-03; mikro (\" u \") = 1E-06; nano (\" n \") = 1E-09; piko (\" p \") = 1E-12; femto (\" f \") = 1E-15; atto (\" a \") = 1E-18\r\n    ";
        this["Func_convert_ArgDesc_2"] = "Dönüştürülen değerin döndürüleceği birimler.\r\n\r\nAğırlık ve kütle birimleri: \" g \" = gram; \" sg \" = bilgi; \" lbm \" = pound kütle (avoirdupois); \" u \" = U (atomik kütle birimi); \" ozm \" = Ons kütlesi (avoirdupois)\r\nUzaklık birimleri: \" m \" = Metre; \" mi \" = Kara mili; \" Nmi \" = Deniz mili; \" inç \" = İnç; \" ft \" = Fit; \" yd \" = Yard; \" ang \" = Angstrom; \" Pika \" = Pika (1/72 inç)\r\nZaman birimleri: \" yr \" = Yıl; \" gün \" = Gün; \" hr \" = Saat; \" mn \" = Dakika; \" sec \" = Saniye\r\nBasınç birimleri: \" Pa \" (veya \" p \") = Pascal; \" atm \" (veya \" at \") = Atmosfer; \" mmHg \" = mm Cıva\r\nKuvvet birimleri: \" N \" = Newton; \" dyn \" (veya \" dy \") = Dyne; \" lbf \" = Pound kuvvet\r\nEnerji birimleri: \" J \" = Jul; \" e \" = Erg; \" c \" = Termodinamik kalori; \" cal \" = BT kalori; \" eV \" (veya \" ev \") = Elektron volt; \" HPh \" (veya \" hh \") = Beygir gücü-saat; \" Wh \" (veya \" wh \") = Watt-saat; \" flb \" = Foot-pound; \" BTU \" (veya \" btu \") = BTU\r\nGüç birimleri: \" HP \" (veya \" h \") = Beygir gücü; \" W \" (veya \" w \") = Watt\r\nManyetizma birimler: \" T \" = Tesla; \" ga \" = Gauss\r\nSıcaklık birimleri: \" C \" (veya \" cel \") = Santigrat Derece; \" F \" (veya \" fah \") = Fahrenhayt Derece \" K \" (veya \" kel \") = Kelvin\r\nSıvı ölçü birimleri: \" tsp \" = Çay kaşığı; \" tbs \" = Yemek kaşığı; \" oz \" = Sıvı ons; \" kupa \" = Kupa; \" pt \" (veya \" us_pt \") = ABD pint; \" uk_pt \" = İngiltere pint; \" qt \" = Quart; \" gal \" = Galon; \" l \" (veya \" lt \") = Litre\r\n\r\nHerhangi bir metrik birimin önüne aşağıdakilerden biri eklenebilir: ekza (\" E \") = 1E + 18; peta (\" P \") = 1E + 15; tera (\" T \") = 1E + 12; giga (\" G \") = 1E + 09; mega (\" M \") = 1E + 06; kilo (\" k \") = 1E + 03; hekta (\" h \") = 1E + 02; dekao (\" e \") = 1E + 01; desi (\" d \") = 1E-01; santi (\" c \") = 1E-02; mili (\" m \") = 1E-03; mikro (\" u \") = 1E-06; nano (\" n \") = 1E-09; piko (\" p \") = 1E-12; femto (\" f \") = 1E-15; atto (\" a \") = 1E-18\r\n    ";
        this["Func_convert_Category"] = "Mühendislik";
        this["Func_convert_CategoryURL"] = "Mühendislik";
        this["Func_convert_Desc"] = "Bir değeri bir ölçüm sisteminden diğerine, örneğin metreye veya saatten saniyeye dönüştürür.";
        this["Func_cos_Arg_0"] = "sayı";
        this["Func_cos_ArgDesc_0"] = "Kosinüsü alınacak radyan cinsinden açı.";
        this["Func_cos_Category"] = "Matematik";
        this["Func_cos_CategoryURL"] = "Matematik";
        this["Func_cos_Desc"] = "Verilen açının kosinüsünü verir.";
        this["Func_cosh_Arg_0"] = "sayı";
        this["Func_cosh_ArgDesc_0"] = "Hiperbolik kosinüsü bulmak için gerçek sayı.";
        this["Func_cosh_Category"] = "Matematik";
        this["Func_cosh_CategoryURL"] = "Matematik";
        this["Func_cosh_Desc"] = "Bir sayının hiperbolik kosinüsünü verir.";
        this["Func_count_Arg_0"] = "değer{0}";
        this["Func_count_ArgDesc_0"] = "Sayılar içerebilecek bir referans veya referans aralığı.";
        this["Func_count_Category"] = "İstatistiksel";
        this["Func_count_CategoryURL"] = "İstatistiksel";
        this["Func_count_Desc"] = "Belirli bir tarihi temsil eden sıralı seri numarasını döndürür.";
        this["Func_counta_Arg_0"] = "değer{0}";
        this["Func_counta_ArgDesc_0"] = "Sayılar içerebilecek bir referans veya referans aralığı.";
        this["Func_counta_Category"] = "İstatistiksel";
        this["Func_counta_CategoryURL"] = "İstatistiksel";
        this["Func_counta_Desc"] = "Boş olmayan referansları sayar.";
        this["Func_critbinom_Arg_0"] = "Denemeler";
        this["Func_critbinom_Arg_1"] = "Olasılık";
        this["Func_critbinom_Arg_2"] = "Alfa";
        this["Func_critbinom_ArgDesc_0"] = "Bağımsız deneme sayısı.";
        this["Func_critbinom_ArgDesc_1"] = "Her denemede başarı olasılığı.";
        this["Func_critbinom_ArgDesc_2"] = "Ölçüt değeri.";
        this["Func_critbinom_Category"] = "İstatistiksel";
        this["Func_critbinom_CategoryURL"] = "İstatistiksel";
        this["Func_critbinom_Desc"] = "Kümülatif binom dağılımının bir ölçüt değerinden büyük veya ölçüt değerine eşit olduğu en küçük değeri verir.";
        this["Func_date_Arg_0"] = "yıl";
        this["Func_date_Arg_1"] = "ay";
        this["Func_date_Arg_2"] = "gün";
        this["Func_date_ArgDesc_0"] = "Yılı temsil eden sayı.";
        this["Func_date_ArgDesc_1"] = "Yılın ayını temsil eden sayı.";
        this["Func_date_ArgDesc_2"] = "Ayın gününü temsil eden sayı.";
        this["Func_date_Category"] = "DateAndTime";
        this["Func_date_CategoryURL"] = "Date_and_Time";
        this["Func_date_Desc"] = "Belirtilen tarih metninin tarih değerini verir.";
        this["Func_dateadd_Arg_0"] = "Aralık";
        this["Func_dateadd_Arg_1"] = "sayı";
        this["Func_dateadd_Arg_2"] = "tarih";
        this["Func_dateadd_ArgDesc_0"] = "Eklenecek zaman aralığını temsil eden bir metin ifadesi.\r\nd = Gün\r\ny = Yıl\r\nh = Saat\r\nn = Dakika\r\nm = Ay\r\nq = Çeyrek\r\ns = Saniye\r\nw = Hafta\r\nww = Takvim haftası\r\nyyyy = Yıl\r\n";
        this["Func_dateadd_ArgDesc_1"] = "Eklenecek aralık sayısı. Bu değer pozitif (gelecekte bir DateTime almak için) veya negatif (geçmişte bir DateTime almak için) olabilir. Aralık saat, dakika veya saniyeyi belirttiğinde kesirli bir bölüm içerebilir. Diğer Aralık değerleri için, Sayının herhangi bir kesirli bölümü göz ardı edilir.";
        this["Func_dateadd_ArgDesc_2"] = "Aralığın ekleneceği tarih.";
        this["Func_dateadd_Category"] = "DateAndTime";
        this["Func_dateadd_CategoryURL"] = "Date_and_Time";
        this["Func_dateadd_Desc"] = "Belirtilen aralığın eklendiği bir tarih verir.";
        this["Func_datediff_Arg_0"] = "Aralık";
        this["Func_datediff_Arg_1"] = "date1";
        this["Func_datediff_Arg_2"] = "date2";
        this["Func_datediff_ArgDesc_0"] = "Date1 ve date2 arasındaki fark birimi olarak kullanılacak zaman aralığını temsil eden bir metin ifadesi.\r\nd = Gün\r\ny = Yıl\r\nh = Saat\r\nn = Dakika\r\nm = Ay\r\nq = Çeyrek\r\ns = Saniye\r\nw = Hafta\r\nww = Takvim haftası\r\nyyyy = Yıl\r\n";
        this["Func_datediff_ArgDesc_1"] = "Fark hesaplamasında kullanılacak ilk tarih.";
        this["Func_datediff_ArgDesc_2"] = "Fark hesaplamasında kullanılacak ikinci tarih.";
        this["Func_datediff_Category"] = "DateAndTime";
        this["Func_datediff_CategoryURL"] = "Date_and_Time";
        this["Func_datediff_Desc"] = "İki DateTime değeri arasındaki aralıkların sayısını gösteren bir değer verir.";
        this["Func_datevalue_Arg_0"] = "date_text";
        this["Func_datevalue_ArgDesc_0"] = "Bir tarihi temsil eden bir metin ifadesi.";
        this["Func_datevalue_Category"] = "DateAndTime";
        this["Func_datevalue_CategoryURL"] = "Date_and_Time";
        this["Func_datevalue_Desc"] = "360 günlük bir yılı temel alarak iki tarih arasındaki günlerin sayısını verir.";
        this["Func_day_Arg_0"] = "Date_value";
        this["Func_day_ArgDesc_0"] = "Günün alınacağı tarih değeri.";
        this["Func_day_Category"] = "DateAndTime";
        this["Func_day_CategoryURL"] = "Date_and_Time";
        this["Func_day_Desc"] = "Tarih değeri için ayın gününü verir.";
        this["Func_days360_Arg_0"] = "start_date";
        this["Func_days360_Arg_1"] = "end_date";
        this["Func_days360_Arg_2"] = "yöntem";
        this["Func_days360_ArgDesc_0"] = "Gün aralığının başlangıç tarihi. Bu bitiş tarihinden sonraysa, işlev negatif bir sayı verir.";
        this["Func_days360_ArgDesc_1"] = "Gün aralığının bitiş tarihi. Bu başlangıç tarihinden önceyse, işlev negatif bir sayı verir.";
        this["Func_days360_ArgDesc_2"] = "Hesaplamada ABD (yanlış) veya Avrupa (doğru) yönteminin kullanılıp kullanılmayacağını belirten mantıksal bir değer.";
        this["Func_days360_Category"] = "DateAndTime";
        this["Func_days360_CategoryURL"] = "Date_and_Time";
        this["Func_days360_Desc"] = "Sabit azalan bakiye yöntemi kullanılarak, belirli bir dönem için bir varlığın amortismanını verir.";
        this["Func_db_Arg_0"] = "maliyet";
        this["Func_db_Arg_1"] = "kurtarma";
        this["Func_db_Arg_2"] = "hayat";
        this["Func_db_Arg_3"] = "dönem";
        this["Func_db_Arg_4"] = "ay";
        this["Func_db_ArgDesc_0"] = "Varlığın başlangıç maliyeti.";
        this["Func_db_ArgDesc_1"] = "Amortismanın sonundaki değer (bazen varlığın hurda değeri olarak adlandırılır).";
        this["Func_db_ArgDesc_2"] = "Varlığın amortismana tabi tutulduğu dönem sayısı (bazen varlığın yararlı ömrü olarak adlandırılır).";
        this["Func_db_ArgDesc_3"] = "Amortismanın hesaplanacağı dönem. Dönem, yaşamla aynı birimleri kullanmalıdır.";
        this["Func_db_ArgDesc_4"] = "İlk yıldaki ay sayısı. Ay atlanırsa, 12 olduğu varsayılır.";
        this["Func_db_Category"] = "Parasal";
        this["Func_db_CategoryURL"] = "Parasal";
        this["Func_db_Desc"] = "Sabit azalan bakiye yöntemi kullanılarak, belirli bir dönem için bir varlığın amortismanını verir.";
        this["Func_dbnull_Category"] = "Bilgi";
        this["Func_dbnull_CategoryURL"] = "Bilgi";
        this["Func_dbnull_Desc"] = "Varolmayan bir değeri temsil eden bir şey verir.";
        this["Func_ddb_Arg_0"] = "maliyet";
        this["Func_ddb_Arg_1"] = "kurtarma";
        this["Func_ddb_Arg_2"] = "hayat";
        this["Func_ddb_Arg_3"] = "dönem";
        this["Func_ddb_Arg_4"] = "faktör";
        this["Func_ddb_ArgDesc_0"] = "Varlığın başlangıç maliyeti.";
        this["Func_ddb_ArgDesc_1"] = "Amortismanın sonundaki değer (bazen varlığın hurda değeri olarak adlandırılır).";
        this["Func_ddb_ArgDesc_2"] = "Varlığın amortismana tabi tutulduğu dönem sayısı (bazen varlığın yararlı ömrü olarak adlandırılır).";
        this["Func_ddb_ArgDesc_3"] = "Amortismanın hesaplanacağı dönem. Dönem, yaşamla aynı birimleri kullanmalıdır.";
        this["Func_ddb_ArgDesc_4"] = "Bakiyenin düştüğü hız. Faktör atlanırsa, 2 olduğu varsayılır (çift azalan bakiye yöntemi).";
        this["Func_ddb_Category"] = "Parasal";
        this["Func_ddb_CategoryURL"] = "Parasal";
        this["Func_ddb_Desc"] = "Çift azalan bakiye yöntemini veya belirtilen başka bir yöntemi kullanarak, belirli bir dönem için bir varlığın amortismanını verir.";
        this["Func_dec2bin_Arg_0"] = "Sayı";
        this["Func_dec2bin_Arg_1"] = "Yerler";
        this["Func_dec2bin_ArgDesc_0"] = "Dönüştürülecek ondalık değer.";
        this["Func_dec2bin_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Basamak belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_dec2bin_Category"] = "Mühendislik";
        this["Func_dec2bin_CategoryURL"] = "Mühendislik";
        this["Func_dec2bin_Desc"] = "Belirtilen ondalık değeri ikili sayı olarak temsil eden bir metin ifadesi verir.";
        this["Func_dec2hex_Arg_0"] = "Sayı";
        this["Func_dec2hex_Arg_1"] = "Yerler";
        this["Func_dec2hex_ArgDesc_0"] = "Dönüştürülecek ondalık değer.";
        this["Func_dec2hex_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Basamak belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_dec2hex_Category"] = "Mühendislik";
        this["Func_dec2hex_CategoryURL"] = "Mühendislik";
        this["Func_dec2hex_Desc"] = "Belirtilen ondalık değeri onaltılık sayı olarak temsil eden bir metin ifadesi verir.";
        this["Func_dec2oct_Arg_0"] = "Sayı";
        this["Func_dec2oct_Arg_1"] = "Yerler";
        this["Func_dec2oct_ArgDesc_0"] = "Dönüştürülecek ondalık değer.";
        this["Func_dec2oct_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Basamak belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_dec2oct_Category"] = "Mühendislik";
        this["Func_dec2oct_CategoryURL"] = "Mühendislik";
        this["Func_dec2oct_Desc"] = "Belirtilen ondalık değeri sekizlik sayı olarak temsil eden bir metin ifadesi verir.";
        this["Func_degrees_Arg_0"] = "Radyan";
        this["Func_degrees_ArgDesc_0"] = "Dereceye dönüştürülecek radyan cinsinden bir değer.";
        this["Func_degrees_Category"] = "Matematik";
        this["Func_degrees_CategoryURL"] = "Matematik";
        this["Func_degrees_Desc"] = "Radyanı dereceye çevirir.";
        this["Func_delta_Arg_0"] = "Number1";
        this["Func_delta_Arg_1"] = "Number2";
        this["Func_delta_ArgDesc_0"] = "Karşılaştırılacak ilk sayı.";
        this["Func_delta_ArgDesc_1"] = "Karşılaştırılacak ikinci sayı. Belirtilmezse, sıfır olduğu varsayılacaktır.";
        this["Func_delta_Category"] = "Mühendislik";
        this["Func_delta_CategoryURL"] = "Mühendislik";
        this["Func_delta_Desc"] = "İki sayıyı karşılaştırır ve eşitse bir, değilse sıfır verir.";
        this["Func_dollarde_Arg_0"] = "FractionDollarAmount";
        this["Func_dollarde_Arg_1"] = "Kesir";
        this["Func_dollarde_ArgDesc_0"] = "Kesir olarak ifade edilen dolar tutarı.";
        this["Func_dollarde_ArgDesc_1"] = "Kesrin paydası olarak kullanılan değer. Bu değer bir tamsayı değilse, kısaltılacaktır.";
        this["Func_dollarde_Category"] = "Parasal";
        this["Func_dollarde_CategoryURL"] = "Parasal";
        this["Func_dollarde_Desc"] = "Kesir olarak ifade edilen bir dolar tutarını, ondalık olarak ifade edilen bir dolar tutarına dönüştürür.";
        this["Func_dollarfr_Arg_0"] = "DecimalDollarAmount";
        this["Func_dollarfr_Arg_1"] = "Kesir";
        this["Func_dollarfr_ArgDesc_0"] = "Ondalık sayı olarak ifade edilen dolar tutarı.";
        this["Func_dollarfr_ArgDesc_1"] = "Kesrin paydası olarak kullanılan değer. Bu değer bir tamsayı değilse, kısaltılacaktır.";
        this["Func_dollarfr_Category"] = "Parasal";
        this["Func_dollarfr_CategoryURL"] = "Parasal";
        this["Func_dollarfr_Desc"] = "Ondalık olarak ifade edilen bir dolar tutarını, kesir olarak ifade edilen dolar tutarına dönüştürür.";
        this["Func_edate_Arg_0"] = "tarih";
        this["Func_edate_Arg_1"] = "numberOfMonths";
        this["Func_edate_ArgDesc_0"] = "Başlangıç tarihi.";
        this["Func_edate_ArgDesc_1"] = "Tarihin kaydırılacağı ay sayısı. Pozitif sayı, başlangıç tarihinden sonraki tarih anlamına gelir. Negatif bir sayı, başlangıç tarihinden önceki bir tarihi belirtir.";
        this["Func_edate_Category"] = "DateAndTime";
        this["Func_edate_CategoryURL"] = "DateAndTime";
        this["Func_edate_Desc"] = "Başlangıç tarihinden belirtilen sayıda ay öncesi veya sonrası olan bir tarih verir.";
        this["Func_eomonth_Arg_0"] = "tarih";
        this["Func_eomonth_Arg_1"] = "numberOfMonths";
        this["Func_eomonth_ArgDesc_0"] = "Başlangıç tarihi.";
        this["Func_eomonth_ArgDesc_1"] = "Tarihin kaydırılacağı ay sayısı. Pozitif sayı, başlangıç tarihinden sonraki tarih anlamına gelir. Negatif bir sayı, başlangıç tarihinden önceki bir tarihi belirtir.";
        this["Func_eomonth_Category"] = "DateAndTime";
        this["Func_eomonth_CategoryURL"] = "DateAndTime";
        this["Func_eomonth_Desc"] = "Başlangıç tarihinden önce veya sonra belirtilen sayıda ay olan ayın sonunda bir tarih döndürür.";
        this["Func_errortype_Arg_0"] = "error_value";
        this["Func_errortype_ArgDesc_0"] = "Tanımlayıcı numarası bulunması gereken hata değeri.";
        this["Func_errortype_Category"] = "Bilgi";
        this["Func_errortype_CategoryURL"] = "Bilgi";
        this["Func_errortype_Desc"] = "Bir hata değerine karşılık gelen bir sayı verir.";
        this["Func_even_Arg_0"] = "sayı";
        this["Func_even_ArgDesc_0"] = "Yuvarlanacak değer.";
        this["Func_even_Category"] = "Matematik";
        this["Func_even_CategoryURL"] = "Matematik";
        this["Func_even_Desc"] = "Yanlış mantıksal değeri verir.";
        this["Func_exp_Arg_0"] = "sayı";
        this["Func_exp_ArgDesc_0"] = "E ile yükseltilecek üs uygulandı.";
        this["Func_exp_Category"] = "Matematik";
        this["Func_exp_CategoryURL"] = "Matematik";
        this["Func_exp_Desc"] = "Bir başka metin ifadesinin başlangıç konumunu büyük / küçük harf duyarlı olarak verir.";
        this["Func_fact_Arg_0"] = "Sayı";
        this["Func_fact_ArgDesc_0"] = "Faktöriyelin hesaplanacağı pozitif bir sayı.";
        this["Func_fact_Category"] = "Matematik";
        this["Func_fact_CategoryURL"] = "Matematik";
        this["Func_fact_Desc"] = "Bir sayının faktöriyelini verir.";
        this["Func_factdouble_Arg_0"] = "Sayı";
        this["Func_factdouble_ArgDesc_0"] = "Çift faktörlü hesaplanacak pozitif bir sayı.";
        this["Func_factdouble_Category"] = "Matematik";
        this["Func_factdouble_CategoryURL"] = "Matematik";
        this["Func_factdouble_Desc"] = "Bir sayının çift faktöriyelini verir.";
        this["Func_false_Category"] = "Mantıklı";
        this["Func_false_CategoryURL"] = "Mantıklı";
        this["Func_false_Desc"] = "Yanlış mantıksal değeri verir.";
        this["Func_find_Arg_0"] = "find_text";
        this["Func_find_Arg_1"] = "within_text";
        this["Func_find_Arg_2"] = "start_num";
        this["Func_find_ArgDesc_0"] = "Bulunacak metin.";
        this["Func_find_ArgDesc_1"] = "Bulunacak metni içeren metin.";
        this["Func_find_ArgDesc_2"] = "Aramanın başlatılacağı 1 tabanlı dizin karakteri. Atlanırsa, tek olduğu varsayılır.";
        this["Func_find_Category"] = "TextAndData";
        this["Func_find_CategoryURL"] = "Text_and_Data";
        this["Func_find_Desc"] = "Bir başka metin ifadesinin başlangıç konumunu büyük / küçük harf duyarlı olarak verir.";
        this["Func_fixed_Arg_0"] = "sayı";
        this["Func_fixed_Arg_1"] = "ondalık sayılar";
        this["Func_fixed_Arg_2"] = "no_commas";
        this["Func_fixed_ArgDesc_0"] = "Yuvarlanacak ve metne dönüştürülecek sayı.";
        this["Func_fixed_ArgDesc_1"] = "Dönüş değerinde ondalık ayırıcının sağındaki basamak sayısı. Bu değer negatifse, 'sayı' ondalık ayırıcının soluna yuvarlanır. Varsayılan değer 2'dir.";
        this["Func_fixed_ArgDesc_2"] = "Dönüş değerinde virgül olmaması gerekiyorsa doğrudur. Atlanırsa, yanlış olduğu varsayılır.";
        this["Func_fixed_Category"] = "TextAndData";
        this["Func_fixed_CategoryURL"] = "Text_and_Data";
        this["Func_fixed_Desc"] = "Bir sayıyı belirtilen ondalık sayıya yuvarlar ve sonucu virgül içeren veya içermeyen metin olarak verir.";
        this["Func_floor_Arg_0"] = "sayı";
        this["Func_floor_Arg_1"] = "önem";
        this["Func_floor_ArgDesc_0"] = "Yuvarlanacak sayı.";
        this["Func_floor_ArgDesc_1"] = "Yuvarlanacak katsayı. Atlanırsa, bunun bir olduğu varsayılır.";
        this["Func_floor_Category"] = "Matematik";
        this["Func_floor_CategoryURL"] = "Matematik";
        this["Func_floor_Desc"] = "Verilen sayıdan küçük veya ona eşit olan anlamlılığın en büyük katını (varsayılan 1'dir) verir.";
        this["Func_fv_Arg_0"] = "oran";
        this["Func_fv_Arg_1"] = "nper";
        this["Func_fv_Arg_2"] = "pmt";
        this["Func_fv_Arg_3"] = "pv";
        this["Func_fv_Arg_4"] = "type";
        this["Func_fv_ArgDesc_0"] = "Dönem başına faiz oranı.";
        this["Func_fv_ArgDesc_1"] = "Bir yıllık ödemedeki toplam ödeme dönemi sayısı.";
        this["Func_fv_ArgDesc_2"] = "Her dönemde yapılan ve yıllık ödemenin ömrü boyunca değişemeyecek ödeme.";
        this["Func_fv_ArgDesc_3"] = "Bugünkü değer veya gelecekteki bir dizi ödemenin şu anda değerinde olduğu toplu tutar. Yok sayılırsa, sıfır olduğu varsayılır.";
        this["Func_fv_ArgDesc_4"] = "Ödemelerin dönem sonunda mı (sıfır, varsayılan değer) yoksa başında (bir) mı olacağını gösteren sıfır veya bir sayısı.";
        this["Func_fv_Category"] = "Parasal";
        this["Func_fv_CategoryURL"] = "Parasal";
        this["Func_fv_Desc"] = "Dönemsel olarak bir yatırımın gelecekteki değerini verir.";
        this["Func_gcd_Arg_0"] = "sayı{0}";
        this["Func_gcd_ArgDesc_0"] = "Bir tamsayı değeri. Tam sayı olmayan bir değer kesilecek.";
        this["Func_gcd_Category"] = "Matematik";
        this["Func_gcd_CategoryURL"] = "Matematik";
        this["Func_gcd_Desc"] = "Bir veya daha fazla tam sayı değerinin en büyük ortak bölenini verir.";
        this["Func_gestep_Arg_0"] = "Number1";
        this["Func_gestep_Arg_1"] = "Adım";
        this["Func_gestep_ArgDesc_0"] = "Karşılaştırılacak ilk sayı.";
        this["Func_gestep_ArgDesc_1"] = "Karşılaştırılacak ikinci sayı. Belirtilmezse, sıfır olduğu varsayılacaktır.";
        this["Func_gestep_Category"] = "Mühendislik";
        this["Func_gestep_CategoryURL"] = "Mühendislik";
        this["Func_gestep_Desc"] = "İki sayıyı karşılaştırır ve ilk sayı ikinciden büyükse veya ona eşitse bir, değilse sıfır verir.";
        this["Func_hex2bin_Arg_0"] = "Sayı";
        this["Func_hex2bin_Arg_1"] = "Yerler";
        this["Func_hex2bin_ArgDesc_0"] = "Onaltılık bir sayıyı temsil eden bir metin ifadesi.";
        this["Func_hex2bin_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Bu belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılacaktır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_hex2bin_Category"] = "Mühendislik";
        this["Func_hex2bin_CategoryURL"] = "Mühendislik";
        this["Func_hex2bin_Desc"] = "Onaltılı bir sayıyı temsil eden bir metin ifadesini, ikili sayı sisteminde aynı sayıyı temsil eden bir metin ifadesine dönüştürür.";
        this["Func_hex2dec_Arg_0"] = "Sayı";
        this["Func_hex2dec_ArgDesc_0"] = "Onaltılık bir sayıyı temsil eden bir metin ifadesi.";
        this["Func_hex2dec_Category"] = "Mühendislik";
        this["Func_hex2dec_CategoryURL"] = "Mühendislik";
        this["Func_hex2dec_Desc"] = "Onaltılık sayı sistemindeki bir sayının metin gösteriminin ondalık değerini verir.";
        this["Func_hex2oct_Arg_0"] = "Sayı";
        this["Func_hex2oct_Arg_1"] = "Yerler";
        this["Func_hex2oct_ArgDesc_0"] = "Onaltılık bir sayıyı temsil eden bir metin ifadesi.";
        this["Func_hex2oct_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Bu belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılacaktır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_hex2oct_Category"] = "Mühendislik";
        this["Func_hex2oct_CategoryURL"] = "Mühendislik";
        this["Func_hex2oct_Desc"] = "Onaltılı bir sayıyı temsil eden bir metin ifadesini, sekizlik sayı sisteminde aynı sayıyı temsil eden bir metin ifadesine dönüştürür.";
        this["Func_hour_Arg_0"] = "Time_value";
        this["Func_hour_ArgDesc_0"] = "Saati alınacak zaman değeri.";
        this["Func_hour_Category"] = "DateAndTime";
        this["Func_hour_CategoryURL"] = "Date_and_Time";
        this["Func_hour_Desc"] = "Zaman değeri için saati verir.";
        this["Func_if_Arg_0"] = "logical_test";
        this["Func_if_Arg_1"] = "value_if_true";
        this["Func_if_Arg_2"] = "value_if_false";
        this["Func_if_ArgDesc_0"] = "Test edilecek koşul.";
        this["Func_if_ArgDesc_1"] = "Koşul doğru olarak değerlendirilirse sonuç.";
        this["Func_if_ArgDesc_2"] = "Koşul yanlış olarak değerlendirilirse sonuç. Atlanırsa, mantıksal değerin yanlış olduğu varsayılır.";
        this["Func_if_Category"] = "Mantıklı";
        this["Func_if_CategoryURL"] = "Mantıklı";
        this["Func_if_Desc"] = "Belirtilen koşul doğru olarak değerlendirilirse bir değer, yanlış olarak değerlendirilirse başka bir değer verir.";
        this["Func_iferror_Arg_0"] = "değer";
        this["Func_iferror_Arg_1"] = "value_if_error";
        this["Func_iferror_ArgDesc_0"] = "Hata olmadığında kullanılacak değer.";
        this["Func_iferror_ArgDesc_1"] = "Değer bağımsız değişkeni bir hataysa kullanılacak değer.";
        this["Func_iferror_Category"] = "Mantıklı";
        this["Func_iferror_CategoryURL"] = "Mantıklı";
        this["Func_iferror_Desc"] = "İlk değerin hata olup olmamasına bağlı olarak iki değerden birini verir.";
        this["Func_imabs_Arg_0"] = "ComplexNumber";
        this["Func_imabs_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imabs_Category"] = "Mühendislik";
        this["Func_imabs_CategoryURL"] = "Mühendislik";
        this["Func_imabs_Desc"] = "Karmaşık bir sayının mutlak değerini verir.";
        this["Func_imaginary_Arg_0"] = "ComplexNumber";
        this["Func_imaginary_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imaginary_Category"] = "Mühendislik";
        this["Func_imaginary_CategoryURL"] = "Mühendislik";
        this["Func_imaginary_Desc"] = "Karmaşık bir sayının sanal katsayısını verir.";
        this["Func_imargument_Arg_0"] = "ComplexNumber";
        this["Func_imargument_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imargument_Category"] = "Mühendislik";
        this["Func_imargument_CategoryURL"] = "Mühendislik";
        this["Func_imargument_Desc"] = "Radyan cinsinden ifade edilen bir açı olan teta bağımsız değişkenini verir.";
        this["Func_imconjugate_Arg_0"] = "ComplexNumber";
        this["Func_imconjugate_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imconjugate_Category"] = "Mühendislik";
        this["Func_imconjugate_CategoryURL"] = "Mühendislik";
        this["Func_imconjugate_Desc"] = "Karmaşık bir sayının eşleniğini verir.";
        this["Func_imcos_Arg_0"] = "ComplexNumber";
        this["Func_imcos_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imcos_Category"] = "Mühendislik";
        this["Func_imcos_CategoryURL"] = "Mühendislik";
        this["Func_imcos_Desc"] = "Karmaşık bir sayının kosinüsünü verir.";
        this["Func_imdiv_Arg_0"] = "Bölünen";
        this["Func_imdiv_Arg_1"] = "bölen";
        this["Func_imdiv_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imdiv_ArgDesc_1"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imdiv_Category"] = "Mühendislik";
        this["Func_imdiv_CategoryURL"] = "Mühendislik";
        this["Func_imdiv_Desc"] = "İki karmaşık sayının (Bölünen/Bölen) bölümünü verir.";
        this["Func_imexp_Arg_0"] = "ComplexNumber";
        this["Func_imexp_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imexp_Category"] = "Mühendislik";
        this["Func_imexp_CategoryURL"] = "Mühendislik";
        this["Func_imexp_Desc"] = "Karmaşık bir sayının üssünü verir.";
        this["Func_imln_Arg_0"] = "ComplexNumber";
        this["Func_imln_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imln_Category"] = "Mühendislik";
        this["Func_imln_CategoryURL"] = "Mühendislik";
        this["Func_imln_Desc"] = "Karmaşık bir sayının doğal logaritmasını verir.";
        this["Func_imlog10_Arg_0"] = "ComplexNumber";
        this["Func_imlog10_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imlog10_Category"] = "Mühendislik";
        this["Func_imlog10_CategoryURL"] = "Mühendislik";
        this["Func_imlog10_Desc"] = "Karmaşık bir sayının 10 tabanlı logaritmasını verir.";
        this["Func_imlog2_Arg_0"] = "ComplexNumber";
        this["Func_imlog2_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imlog2_Category"] = "Mühendislik";
        this["Func_imlog2_CategoryURL"] = "Mühendislik";
        this["Func_imlog2_Desc"] = "Karmaşık bir sayının 2 tabanındaki logaritmasını verir.";
        this["Func_impower_Arg_0"] = "ComplexNumber";
        this["Func_impower_Arg_1"] = "kuvvet";
        this["Func_impower_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_impower_ArgDesc_1"] = "ComplexNumber'ın yükseltileceği kuvvet.";
        this["Func_impower_Category"] = "Mühendislik";
        this["Func_impower_CategoryURL"] = "Mühendislik";
        this["Func_impower_Desc"] = "Belirtilen kuvvete yükseltilmiş karmaşık sayıyı verir.";
        this["Func_improduct_Arg_0"] = "ComplexNumber{0}";
        this["Func_improduct_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_improduct_Category"] = "Mühendislik";
        this["Func_improduct_CategoryURL"] = "Mühendislik";
        this["Func_improduct_Desc"] = "Bir veya daha fazla karmaşık sayının çarpımını verir.";
        this["Func_imreal_Arg_0"] = "ComplexNumber";
        this["Func_imreal_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imreal_Category"] = "Mühendislik";
        this["Func_imreal_CategoryURL"] = "Mühendislik";
        this["Func_imreal_Desc"] = "Karmaşık bir sayının gerçek katsayısını verir.";
        this["Func_imsin_Arg_0"] = "ComplexNumber";
        this["Func_imsin_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imsin_Category"] = "Mühendislik";
        this["Func_imsin_CategoryURL"] = "Mühendislik";
        this["Func_imsin_Desc"] = "Karmaşık bir sayının sinüsünü verir.";
        this["Func_imsqrt_Arg_0"] = "ComplexNumber";
        this["Func_imsqrt_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imsqrt_Category"] = "Mühendislik";
        this["Func_imsqrt_CategoryURL"] = "Mühendislik";
        this["Func_imsqrt_Desc"] = "Karmaşık bir sayının karekökünü verir.";
        this["Func_imsub_Arg_0"] = "ComplexNumber1";
        this["Func_imsub_Arg_1"] = "ComplexNumber2";
        this["Func_imsub_ArgDesc_0"] = "Karmaşık sayının, ComplexNumber2'nin çıkarılacağı \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imsub_ArgDesc_1"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi ve ComplexNumber1'den çıkarılacaktır.";
        this["Func_imsub_Category"] = "Mühendislik";
        this["Func_imsub_CategoryURL"] = "Mühendislik";
        this["Func_imsub_Desc"] = "İki karmaşık sayı arasındaki farkı verir.";
        this["Func_imsum_Arg_0"] = "ComplexNumber{0}";
        this["Func_imsum_ArgDesc_0"] = "Karmaşık bir sayının \"x + yi\" veya \"x + yj\" biçimindeki metin gösterimi.";
        this["Func_imsum_Category"] = "Mühendislik";
        this["Func_imsum_CategoryURL"] = "Mühendislik";
        this["Func_imsum_Desc"] = "Bir veya daha fazla karmaşık sayının toplamını verir.";
        this["Func_info_Arg_0"] = "Tür";
        this["Func_info_ArgDesc_0"] = "Döndürülecek bilgi türünü belirten bir metin ifadesi.\r\n\"directory\" = Geçerli klasörün tam yolu.\r\n\"osversion\" = Metin ifadesi olarak mevcut işletim sistemi sürümü.\r\n\"system\" = Mevcut işletim sistemi. Macintosh = \"mac\", Windows = \"pcdos\".\r\n    ";
        this["Func_info_Category"] = "Bilgi";
        this["Func_info_CategoryURL"] = "Bilgi";
        this["Func_info_Desc"] = "Mevcut işletim ortamı hakkında bilgi verir.";
        this["Func_int_Arg_0"] = "sayı";
        this["Func_int_ArgDesc_0"] = "Tam sayıya yuvarlanacak gerçek sayı.";
        this["Func_int_Category"] = "Matematik";
        this["Func_int_CategoryURL"] = "Matematik";
        this["Func_int_Desc"] = "Bir sayıyı en yakın tam sayıya aşağı yuvarlar.";
        this["Func_intrate_Arg_0"] = "yerleşme";
        this["Func_intrate_Arg_1"] = "olgunluk";
        this["Func_intrate_Arg_2"] = "yatırım";
        this["Func_intrate_Arg_3"] = "itfa";
        this["Func_intrate_Arg_4"] = "temel";
        this["Func_intrate_ArgDesc_0"] = "Menkul kıymetin takas tarihi.";
        this["Func_intrate_ArgDesc_1"] = "Menkul kıymetin vade tarihi.";
        this["Func_intrate_ArgDesc_2"] = "Menkul kıymete yatırılan miktar.";
        this["Func_intrate_ArgDesc_3"] = "Vade sonunda alınacak miktar.";
        this["Func_intrate_ArgDesc_4"] = "Kullanılacak gün sayısı temeli türü.\r\n0 veya atlanmış = US (NASD) 30/360,\r\n1 = Aktüel/aktüel,\r\n2 = Aktüel/360,\r\n3 = Aktüel/365,\r\n4 = Avrupa 30/360\r\n    ";
        this["Func_intrate_Category"] = "Parasal";
        this["Func_intrate_CategoryURL"] = "Parasal";
        this["Func_intrate_Desc"] = "Tam olarak yatırım yapılmış bir menkul kıymetin faiz oranını verir.";
        this["Func_ipmt_Arg_0"] = "oran";
        this["Func_ipmt_Arg_1"] = "başına";
        this["Func_ipmt_Arg_2"] = "nper";
        this["Func_ipmt_Arg_3"] = "pv";
        this["Func_ipmt_Arg_4"] = "fv";
        this["Func_ipmt_Arg_5"] = "type";
        this["Func_ipmt_ArgDesc_0"] = "Dönem başına faiz oranı.";
        this["Func_ipmt_ArgDesc_1"] = "Bir ile nper aralığında olması gereken nokta.";
        this["Func_ipmt_ArgDesc_2"] = "Bir yıllık ödemedeki toplam ödeme dönemi sayısı.";
        this["Func_ipmt_ArgDesc_3"] = "Bugünkü değer veya gelecekteki bir dizi ödemenin şimdi değerinde olduğu toplu tutar.";
        this["Func_ipmt_ArgDesc_4"] = "Gelecekteki değer veya son ödeme yapıldıktan sonra elde etmek istediğiniz nakit bakiyesi. Yok sayılırsa, sıfır olduğu varsayılır.";
        this["Func_ipmt_ArgDesc_5"] = "Ödemelerin dönem sonunda mı (sıfır, varsayılan değer) yoksa başında (bir) mı olacağını gösteren sıfır veya bir sayısı.";
        this["Func_ipmt_Category"] = "Parasal";
        this["Func_ipmt_CategoryURL"] = "Parasal";
        this["Func_ipmt_Desc"] = "Periyodik, sabit ödemeler ve sabit bir faiz oranı temelinde, bir yatırım için belirli bir dönemdeki faiz ödemesini verir.";
        this["Func_irr_Arg_0"] = "değerler";
        this["Func_irr_Arg_1"] = "tahmin";
        this["Func_irr_ArgDesc_0"] = "Düzenli aralıklarla ortaya çıkan ödeme (negatif değerler) ve gelir (pozitif değerler) değerlerinden oluşan bir koleksiyon.";
        this["Func_irr_ArgDesc_1"] = "Sonuca yakın tahmin ettiğiniz bir sayı. Varsayılan değer 0,1'dir (% 10).";
        this["Func_irr_Category"] = "Parasal";
        this["Func_irr_CategoryURL"] = "Parasal";
        this["Func_irr_Desc"] = "Bir dizi nakit akışı için iç getiri oranını verir.";
        this["Func_isblank_Arg_0"] = "değer";
        this["Func_isblank_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_isblank_Category"] = "Bilgi";
        this["Func_isblank_CategoryURL"] = "Bilgi";
        this["Func_isblank_Desc"] = "Değer boşsa doğru verir.";
        this["Func_isdbnull_Arg_0"] = "değer";
        this["Func_isdbnull_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_isdbnull_Category"] = "Bilgi";
        this["Func_isdbnull_CategoryURL"] = "Bilgi";
        this["Func_isdbnull_Desc"] = "Değer, var olmayan bir değeri temsil ediyorsa doğru verir.";
        this["Func_iserr_Arg_0"] = "değer";
        this["Func_iserr_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_iserr_Category"] = "Bilgi";
        this["Func_iserr_CategoryURL"] = "Bilgi";
        this["Func_iserr_Desc"] = "Değer, #N/A dışında herhangi bir hata değeriyse doğru verir.";
        this["Func_iserror_Arg_0"] = "değer";
        this["Func_iserror_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_iserror_Category"] = "Bilgi";
        this["Func_iserror_CategoryURL"] = "Bilgi";
        this["Func_iserror_Desc"] = "Değer herhangi bir hata değeriyse doğru verir.";
        this["Func_iseven_Arg_0"] = "değer";
        this["Func_iseven_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_iseven_Category"] = "Bilgi";
        this["Func_iseven_CategoryURL"] = "Bilgi";
        this["Func_iseven_Desc"] = "Değer çift sayı ise doğru, aksi takdirde yanlış verir.";
        this["Func_islogical_Arg_0"] = "değer";
        this["Func_islogical_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_islogical_Category"] = "Bilgi";
        this["Func_islogical_CategoryURL"] = "Bilgi";
        this["Func_islogical_Desc"] = "Değer mantıksal bir değer ise (doğru veya yanlış) doğru verir.";
        this["Func_isna_Arg_0"] = "değer";
        this["Func_isna_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_isna_Category"] = "Bilgi";
        this["Func_isna_CategoryURL"] = "Bilgi";
        this["Func_isna_Desc"] = "Değer #N/A (değer mevcut değil) hata değeriyse doğru verir.";
        this["Func_isnontext_Arg_0"] = "değer";
        this["Func_isnontext_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_isnontext_Category"] = "Bilgi";
        this["Func_isnontext_CategoryURL"] = "Bilgi";
        this["Func_isnontext_Desc"] = "Değer, metin olmayan herhangi bir öğeyse doğru verir.";
        this["Func_isnull_Arg_0"] = "değer";
        this["Func_isnull_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_isnull_Category"] = "Bilgi";
        this["Func_isnull_CategoryURL"] = "Bilgi";
        this["Func_isnull_Desc"] = "Değer mevcut değilse doğru verir.";
        this["Func_isnumber_Arg_0"] = "değer";
        this["Func_isnumber_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_isnumber_Category"] = "Bilgi";
        this["Func_isnumber_CategoryURL"] = "Bilgi";
        this["Func_isnumber_Desc"] = "Değer bir sayı ise doğru verir.";
        this["Func_isodd_Arg_0"] = "değer";
        this["Func_isodd_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_isodd_Category"] = "Bilgi";
        this["Func_isodd_CategoryURL"] = "Bilgi";
        this["Func_isodd_Desc"] = "Değer tek bir sayı ise doğru, aksi takdirde yanlış verir.";
        this["Func_isref_Arg_0"] = "değer";
        this["Func_isref_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_isref_Category"] = "Bilgi";
        this["Func_isref_CategoryURL"] = "Bilgi";
        this["Func_isref_Desc"] = "Değer bir başvuruysa doğru verir.";
        this["Func_istext_Arg_0"] = "değer";
        this["Func_istext_ArgDesc_0"] = "Test edilecek değer.";
        this["Func_istext_Category"] = "Bilgi";
        this["Func_istext_CategoryURL"] = "Bilgi";
        this["Func_istext_Desc"] = "Değer bir metin değeriyse doğru verir.";
        this["Func_lcm_Arg_0"] = "sayı{0}";
        this["Func_lcm_ArgDesc_0"] = "Bir tamsayı değeri. Tam sayı olmayan bir değer kesilecek.";
        this["Func_lcm_Category"] = "Matematik";
        this["Func_lcm_CategoryURL"] = "Matematik";
        this["Func_lcm_Desc"] = "Bir veya daha fazla tam sayı değerinin en küçük ortak katını verir.";
        this["Func_left_Arg_0"] = "Metin";
        this["Func_left_Arg_1"] = "num_chars";
        this["Func_left_ArgDesc_0"] = "Ayıklanacak karakterleri içeren metin ifadesi.";
        this["Func_left_ArgDesc_1"] = "Ayıklanacak karakter sayısı.";
        this["Func_left_Category"] = "TextAndData";
        this["Func_left_CategoryURL"] = "Text_and_Data";
        this["Func_left_Desc"] = "Bir metin ifadesindeki ilk karakteri veya karakterleri verir.";
        this["Func_len_Arg_0"] = "Metin";
        this["Func_len_ArgDesc_0"] = "Uzunluğu bulunacak metin ifadesi. Boşluklar karakter olarak sayılır.";
        this["Func_len_Category"] = "TextAndData";
        this["Func_len_CategoryURL"] = "Text_and_Data";
        this["Func_len_Desc"] = "Bir metin ifadesindeki karakter sayısını verir.";
        this["Func_ln_Arg_0"] = "sayı";
        this["Func_ln_ArgDesc_0"] = "Doğal logaritması elde edilecek pozitif gerçek sayı.";
        this["Func_ln_Category"] = "Matematik";
        this["Func_ln_CategoryURL"] = "Matematik";
        this["Func_ln_Desc"] = "Bir sayının doğal logaritmasını verir.";
        this["Func_log_Arg_0"] = "sayı";
        this["Func_log_Arg_1"] = "temel";
        this["Func_log_ArgDesc_0"] = "Logaritması alınacak pozitif gerçek sayı.";
        this["Func_log_ArgDesc_1"] = "Logaritmanın tabanı.";
        this["Func_log_Category"] = "Matematik";
        this["Func_log_CategoryURL"] = "Matematik";
        this["Func_log_Desc"] = "Bir sayının logaritmasını belirtilen tabana verir.";
        this["Func_log10_Arg_0"] = "sayı";
        this["Func_log10_ArgDesc_0"] = "10 tabanlı logaritması elde edilecek pozitif gerçek sayı.";
        this["Func_log10_Category"] = "Matematik";
        this["Func_log10_CategoryURL"] = "Matematik";
        this["Func_log10_Desc"] = "Bir sayının 10 tabanlı logaritmasını verir.";
        this["Func_lower_Arg_0"] = "Metin";
        this["Func_lower_ArgDesc_0"] = "Küçük harfe dönüştürülecek metin.";
        this["Func_lower_Category"] = "TextAndData";
        this["Func_lower_CategoryURL"] = "Text_and_Data";
        this["Func_lower_Desc"] = "Bir metin ifadesindeki tüm büyük harfleri küçük harfe dönüştürür.";
        this["Func_max_Arg_0"] = "sayı{0}";
        this["Func_max_ArgDesc_0"] = "Bir sayı veya sayı aralığı.";
        this["Func_max_Category"] = "İstatistiksel";
        this["Func_max_CategoryURL"] = "İstatistiksel";
        this["Func_max_Desc"] = "Bir sayı kümesindeki en büyük sayıyı verir.";
        this["Func_median_Arg_0"] = "sayı{0}";
        this["Func_median_ArgDesc_0"] = "Bir sayı veya sayı aralığı.";
        this["Func_median_Category"] = "İstatistiksel";
        this["Func_median_CategoryURL"] = "İstatistiksel";
        this["Func_median_Desc"] = "Bir sayı kümesinin medyanını verir. Ortanca, sayılar sıralandığında ortadaki sayıdır veya belirtilen sayıların çift sayısı varsa ortadaki iki sayının ortalamasıdır.";
        this["Func_mid_Arg_0"] = "Metin";
        this["Func_mid_Arg_1"] = "start_num";
        this["Func_mid_Arg_2"] = "num_chars";
        this["Func_mid_ArgDesc_0"] = "Ayıklanacak karakterleri içeren metin ifadesi.";
        this["Func_mid_ArgDesc_1"] = "Ayıklanacak ilk karakterin 1 tabanlı dizini.";
        this["Func_mid_ArgDesc_2"] = "Ayıklanacak karakter sayısı.";
        this["Func_mid_Category"] = "TextAndData";
        this["Func_mid_CategoryURL"] = "Text_and_Data";
        this["Func_mid_Desc"] = "Bir metin ifadesinden belirli sayıda karakteri verir.";
        this["Func_min_Arg_0"] = "sayı{0}";
        this["Func_min_ArgDesc_0"] = "Bir sayı veya sayı aralığı.";
        this["Func_min_Category"] = "İstatistiksel";
        this["Func_min_CategoryURL"] = "İstatistiksel";
        this["Func_min_Desc"] = "Bir sayı kümesindeki en küçük sayıyı verir.";
        this["Func_minute_Arg_0"] = "Time_value";
        this["Func_minute_ArgDesc_0"] = "Dakikası alınacak zaman değeri.";
        this["Func_minute_Category"] = "DateAndTime";
        this["Func_minute_CategoryURL"] = "Date_and_Time";
        this["Func_minute_Desc"] = "Zaman değeri için dakikayı verir.";
        this["Func_mod_Arg_0"] = "sayı";
        this["Func_mod_Arg_1"] = "bölen";
        this["Func_mod_ArgDesc_0"] = "Kalanı bulacak sayı.";
        this["Func_mod_ArgDesc_1"] = "Sayının bölüneceği değer.";
        this["Func_mod_Category"] = "Matematik";
        this["Func_mod_CategoryURL"] = "Matematik";
        this["Func_mod_Desc"] = "Bir sayı bölenle bölündükten sonra kalanı verir. Sonuç, bölenle aynı işarete sahiptir.";
        this["Func_month_Arg_0"] = "Date_value";
        this["Func_month_ArgDesc_0"] = "Ayı alınacak tarih değeri.";
        this["Func_month_Category"] = "DateAndTime";
        this["Func_month_CategoryURL"] = "Date_and_Time";
        this["Func_month_Desc"] = "Tarih değeri için ayı verir.";
        this["Func_mround_Arg_0"] = "Sayı";
        this["Func_mround_Arg_1"] = "Çoklu";
        this["Func_mround_ArgDesc_0"] = "Yuvarlanacak sayı.";
        this["Func_mround_ArgDesc_1"] = "Yuvarlanacak katları gösteren bir sayı.";
        this["Func_mround_Category"] = "Matematik";
        this["Func_mround_CategoryURL"] = "Matematik";
        this["Func_mround_Desc"] = "Bir sayıyı, başka bir sayının en yakın katına yuvarlar.";
        this["Func_multinomial_Arg_0"] = "sayı{0}";
        this["Func_multinomial_ArgDesc_0"] = "Multinomun alınacağı sayılardan biri.";
        this["Func_multinomial_Category"] = "Matematik";
        this["Func_multinomial_CategoryURL"] = "Matematik";
        this["Func_multinomial_Desc"] = "Bir sayı kümesinin çok terimliğini döndürür. Çok terimli, bir değerler toplamının faktöriyelinin faktöriyellerinin ürününe oranıdır.";
        this["Func_n_Arg_0"] = "Değer";
        this["Func_n_ArgDesc_0"] = "Sayıya dönüştürülecek değer. Aşağıdakiler kabul edilebilir değerlerdir:\r\nBir sayı - sayıyı verir.\r\nTarih - tarihi verir.\r\nDoğru - 1 değerini verir.\r\nYanlış - 0 değerini verir.\r\nBir hata değeri - hata değerini verir.\r\nDiğer herhangi bir değer - 0 verir.\r\n    ";
        this["Func_n_Category"] = "Bilgi";
        this["Func_n_CategoryURL"] = "Bilgi";
        this["Func_n_Desc"] = "Bir değeri sayıya dönüştürür.";
        this["Func_na_Category"] = "Bilgi";
        this["Func_na_CategoryURL"] = "Bilgi";
        this["Func_na_Desc"] = "#N/A (değer mevcut değil) hata değerini verir.";
        this["Func_networkdays_Arg_0"] = "startDate";
        this["Func_networkdays_Arg_1"] = "endDate";
        this["Func_networkdays_Arg_2"] = "Bayram";
        this["Func_networkdays_ArgDesc_0"] = "Başlanacak tarih.";
        this["Func_networkdays_ArgDesc_1"] = "Bitirilecek tarih.";
        this["Func_networkdays_ArgDesc_2"] = "Çalışma dışı günler olarak kabul edilecek tarihleri içeren bir veya daha fazla referans aralığı.";
        this["Func_networkdays_Category"] = "DateAndTime";
        this["Func_networkdays_CategoryURL"] = "DateAndTime";
        this["Func_networkdays_Desc"] = "Belirtilen tatiller hariç, belirtilen tarihler arasındaki tam iş günlerinin toplam sayısını döndürür.";
        this["Func_not_Arg_0"] = "Mantıklı";
        this["Func_not_ArgDesc_0"] = "Mantıksal bir değer (doğru veya yanlış).";
        this["Func_not_Category"] = "Mantıklı";
        this["Func_not_CategoryURL"] = "Mantıklı";
        this["Func_not_Desc"] = "Mantıksal bir değeri tersine çevirir (doğruyu yanlış ve yanlışı doğru olarak değiştirir).";
        this["Func_now_Category"] = "DateAndTime";
        this["Func_now_CategoryURL"] = "Date_and_Time";
        this["Func_now_Desc"] = "Geçerli tarih ve saati temsil eden bir değer verir.";
        this["Func_nper_Arg_0"] = "oran";
        this["Func_nper_Arg_1"] = "pmt";
        this["Func_nper_Arg_2"] = "pv";
        this["Func_nper_Arg_3"] = "fv";
        this["Func_nper_Arg_4"] = "type";
        this["Func_nper_ArgDesc_0"] = "Dönem başına faiz oranı.";
        this["Func_nper_ArgDesc_1"] = "Her dönemde yapılan ve yıllık ödemenin ömrü boyunca değişemeyecek ödeme.";
        this["Func_nper_ArgDesc_2"] = "Bugünkü değer veya gelecekteki bir dizi ödemenin şu anda değerinde olduğu toplu tutar.";
        this["Func_nper_ArgDesc_3"] = "Gelecekteki değer veya son ödeme yapıldıktan sonra elde etmek istediğiniz nakit bakiyesi.";
        this["Func_nper_ArgDesc_4"] = "Ödemelerin dönem sonunda mı (sıfır, varsayılan değer) yoksa başında (bir) mı olacağını gösteren sıfır veya bir sayısı.";
        this["Func_nper_Category"] = "Parasal";
        this["Func_nper_CategoryURL"] = "Parasal";
        this["Func_nper_Desc"] = "Dönemsel, sabit ödemeler ve sabit faiz oranına göre bir yatırımın dönem sayısını verir.";
        this["Func_npv_Arg_0"] = "oran";
        this["Func_npv_Arg_1"] = "değer{0}";
        this["Func_npv_ArgDesc_0"] = "Bir dönem boyunca iskonto oranı.";
        this["Func_npv_ArgDesc_1"] = "Bir ödeme (negatif değer) veya gelir (pozitif değer).";
        this["Func_npv_Category"] = "Parasal";
        this["Func_npv_CategoryURL"] = "Parasal";
        this["Func_npv_Desc"] = "Bir yatırımın bugünkü net değerini, bir iskonto oranı ve bir dizi gelecekteki ödemeyi (negatif değerler) ve geliri (pozitif değer) kullanarak hesaplar.";
        this["Func_null_Category"] = "Bilgi";
        this["Func_null_CategoryURL"] = "Bilgi";
        this["Func_null_Desc"] = "Varolmayan bir değer verir.";
        this["Func_oct2bin_Arg_0"] = "Sayı";
        this["Func_oct2bin_Arg_1"] = "Yerler";
        this["Func_oct2bin_ArgDesc_0"] = "Sekizlik bir sayıyı temsil eden bir metin ifadesi.";
        this["Func_oct2bin_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Bu belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılacaktır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_oct2bin_Category"] = "Mühendislik";
        this["Func_oct2bin_CategoryURL"] = "Mühendislik";
        this["Func_oct2bin_Desc"] = "Sekizli bir sayıyı temsil eden bir metin ifadesini, ikili sayı sisteminde aynı sayıyı temsil eden bir metin ifadesine dönüştürür.";
        this["Func_oct2dec_Arg_0"] = "Sayı";
        this["Func_oct2dec_ArgDesc_0"] = "Sekizlik bir sayıyı temsil eden bir metin ifadesi.";
        this["Func_oct2dec_Category"] = "Mühendislik";
        this["Func_oct2dec_CategoryURL"] = "Mühendislik";
        this["Func_oct2dec_Desc"] = "Sekizlik sayı sistemindeki bir sayının metin gösteriminin ondalık değerini verir.";
        this["Func_oct2hex_Arg_0"] = "Sayı";
        this["Func_oct2hex_Arg_1"] = "Yerler";
        this["Func_oct2hex_ArgDesc_0"] = "Sekizlik bir sayıyı temsil eden bir metin ifadesi.";
        this["Func_oct2hex_ArgDesc_1"] = "Değeri temsil etmede kullanılacak karakter sayısı. Bu belirtilmezse, değeri temsil etmek için gerekli olan maksimum karakter sayısı kullanılacaktır. Bu, baştaki sıfırları belirlemenizi sağlar.";
        this["Func_oct2hex_Category"] = "Mühendislik";
        this["Func_oct2hex_CategoryURL"] = "Mühendislik";
        this["Func_oct2hex_Desc"] = "Sekizli bir sayıyı temsil eden bir metin ifadesini, onaltılık sayı sisteminde aynı sayıyı temsil eden bir metin ifadesine dönüştürür.";
        this["Func_odd_Arg_0"] = "sayı";
        this["Func_odd_ArgDesc_0"] = "Yuvarlanacak değer.";
        this["Func_odd_Category"] = "Matematik";
        this["Func_odd_CategoryURL"] = "Matematik";
        this["Func_odd_Desc"] = "Pozitif bir sayıyı yukarı ve negatif bir sayıyı aşağı yönde en yakın tek tam sayıya yuvarlar.";
        this["Func_or_Arg_0"] = "mantıksal {0}";
        this["Func_or_ArgDesc_0"] = "Mantıksal bir değer (doğru veya yanlış).";
        this["Func_or_Category"] = "Mantıklı";
        this["Func_or_CategoryURL"] = "Mantıklı";
        this["Func_or_Desc"] = "Bir veya daha fazla değer doğruysa doğru verir; tüm değerler yanlışsa yanlış verir.";
        this["Func_pi_Category"] = "Matematik";
        this["Func_pi_CategoryURL"] = "Matematik";
        this["Func_pi_Desc"] = "3,14159265358979 olan sabit pi'yi verir.";
        this["Func_pmt_Arg_0"] = "oran";
        this["Func_pmt_Arg_1"] = "nper";
        this["Func_pmt_Arg_2"] = "pv";
        this["Func_pmt_Arg_3"] = "fv";
        this["Func_pmt_Arg_4"] = "type";
        this["Func_pmt_ArgDesc_0"] = "Kredinin faiz oranı.";
        this["Func_pmt_ArgDesc_1"] = "Kredinin toplam ödeme sayısı.";
        this["Func_pmt_ArgDesc_2"] = "Bugünkü değer veya gelecekteki bir dizi ödemenin şimdi değerinde olduğu toplam tutar; esas tutar olarak da bilinir.";
        this["Func_pmt_ArgDesc_3"] = "Gelecekteki değer veya son ödeme yapıldıktan sonra elde etmek istediğiniz nakit bakiyesi.";
        this["Func_pmt_ArgDesc_4"] = "Ödemelerin dönem sonunda mı (sıfır, varsayılan değer) yoksa başında (bir) mı olacağını gösteren sıfır veya bir sayısı.";
        this["Func_pmt_Category"] = "Parasal";
        this["Func_pmt_CategoryURL"] = "Parasal";
        this["Func_pmt_Desc"] = "Sabit ödemelere ve sabit bir faiz oranına dayalı olarak bir kredinin ödemesini hesaplar.";
        this["Func_power_Arg_0"] = "sayı";
        this["Func_power_Arg_1"] = "kuvvet";
        this["Func_power_ArgDesc_0"] = "Bir kuvvete yükseltilecek temel sayı.";
        this["Func_power_ArgDesc_1"] = "Taban sayısının yükseltildiği üs.";
        this["Func_power_Category"] = "Matematik";
        this["Func_power_CategoryURL"] = "Matematik";
        this["Func_power_Desc"] = "Bir kuvvete yükseltilmiş sayının sonucunu verir.";
        this["Func_ppmt_Arg_0"] = "oran";
        this["Func_ppmt_Arg_1"] = "başına";
        this["Func_ppmt_Arg_2"] = "nper";
        this["Func_ppmt_Arg_3"] = "pv";
        this["Func_ppmt_Arg_4"] = "fv";
        this["Func_ppmt_Arg_5"] = "type";
        this["Func_ppmt_ArgDesc_0"] = "Dönem başına faiz oranı.";
        this["Func_ppmt_ArgDesc_1"] = "Bir ile nper aralığında olması gereken nokta.";
        this["Func_ppmt_ArgDesc_2"] = "Bir yıllık ödemedeki toplam ödeme dönemi sayısı.";
        this["Func_ppmt_ArgDesc_3"] = "Bugünkü değer veya gelecekteki bir dizi ödemenin şimdi değerinde olduğu toplam tutar.";
        this["Func_ppmt_ArgDesc_4"] = "Gelecekteki değer veya son ödeme yapıldıktan sonra elde etmek istediğiniz nakit bakiyesi.";
        this["Func_ppmt_ArgDesc_5"] = "Ödemelerin dönem sonunda mı (sıfır, varsayılan değer) yoksa başında (bir) mı olacağını gösteren sıfır veya bir sayısı.";
        this["Func_ppmt_Category"] = "Parasal";
        this["Func_ppmt_CategoryURL"] = "Parasal";
        this["Func_ppmt_Desc"] = "Periyodik, sabit ödemeler ve sabit bir faiz oranı temelinde, bir yatırım için belirli bir dönemin anapara ödemesini verir.";
        this["Func_product_Arg_0"] = "sayı{0}";
        this["Func_product_ArgDesc_0"] = "Diğer sayılarla çarpılacak bir sayı.";
        this["Func_product_Category"] = "Matematik";
        this["Func_product_CategoryURL"] = "Matematik";
        this["Func_product_Desc"] = "Bağımsız değişken olarak verilen tüm sayıları çarpar ve çarpımı verir.";
        this["Func_pv_Arg_0"] = "oran";
        this["Func_pv_Arg_1"] = "nper";
        this["Func_pv_Arg_2"] = "pmt";
        this["Func_pv_Arg_3"] = "fv";
        this["Func_pv_Arg_4"] = "type";
        this["Func_pv_ArgDesc_0"] = "Dönem başına faiz oranı.";
        this["Func_pv_ArgDesc_1"] = "Bir yıllık ödemedeki toplam ödeme dönemi sayısı.";
        this["Func_pv_ArgDesc_2"] = "Her dönemde yapılan ve yıllık ödemenin ömrü boyunca değişemeyecek ödeme.";
        this["Func_pv_ArgDesc_3"] = "Gelecekteki değer veya son ödeme yapıldıktan sonra elde etmek istediğiniz nakit bakiyesi.";
        this["Func_pv_ArgDesc_4"] = "Ödemelerin dönem sonunda mı (sıfır, varsayılan değer) yoksa başında (bir) mı olacağını gösteren sıfır veya bir sayısı.";
        this["Func_pv_Category"] = "Parasal";
        this["Func_pv_CategoryURL"] = "Parasal";
        this["Func_pv_Desc"] = "Bir yatırımın bugünkü değerini verir.";
        this["Func_quotient_Arg_0"] = "pay";
        this["Func_quotient_Arg_1"] = "payda";
        this["Func_quotient_ArgDesc_0"] = "Bölme işleminin bölüneni.";
        this["Func_quotient_ArgDesc_1"] = "Bölme işleminin böleni.";
        this["Func_quotient_Category"] = "Matematik";
        this["Func_quotient_CategoryURL"] = "Matematik";
        this["Func_quotient_Desc"] = "Bir bölümün tam sayı kısmını verir. Bu, bölümün geri kalanını atacaktır.";
        this["Func_radians_Arg_0"] = "Derece";
        this["Func_radians_ArgDesc_0"] = "Radyana dönüştürülecek derece cinsinden bir değer.";
        this["Func_radians_Category"] = "Matematik";
        this["Func_radians_CategoryURL"] = "Matematik";
        this["Func_radians_Desc"] = "Dereceleri radyana dönüştürür.";
        this["Func_rand_Category"] = "Matematik";
        this["Func_rand_CategoryURL"] = "Matematik";
        this["Func_rand_Desc"] = "0'a eşit veya 0'dan büyük ve 1'den küçük, eşit olarak dağıtılmış rastgele bir sayı verir";
        this["Func_randbetween_Arg_0"] = "Alt";
        this["Func_randbetween_Arg_1"] = "Üst";
        this["Func_randbetween_ArgDesc_0"] = "Verilecek minimum değer.";
        this["Func_randbetween_ArgDesc_1"] = "Verilecek maksimum değer.";
        this["Func_randbetween_Category"] = "Matematik";
        this["Func_randbetween_CategoryURL"] = "Matematik";
        this["Func_randbetween_Desc"] = "Belirtilen iki sayı arasında sözde rasgele bir tamsayı üretir.";
        this["Func_rate_Arg_0"] = "NPer";
        this["Func_rate_Arg_1"] = "Pmt";
        this["Func_rate_Arg_2"] = "Pv";
        this["Func_rate_Arg_3"] = "Fv";
        this["Func_rate_Arg_4"] = "Tür";
        this["Func_rate_Arg_5"] = "Guess";
        this["Func_rate_ArgDesc_0"] = "Bir yıllık ödemedeki toplam ödeme dönemi sayısı.";
        this["Func_rate_ArgDesc_1"] = "Her dönem yapılan ödeme, yıllık ödemenin ömrü boyunca değişemez.";
        this["Func_rate_ArgDesc_2"] = "Bugünkü değer veya gelecekteki bir dizi ödemenin şimdi değerinde olduğu toplam tutar.";
        this["Func_rate_ArgDesc_3"] = "Gelecekteki değer veya son ödeme yapıldıktan sonra elde etmek istediğiniz nakit bakiyesi. Gd belirtilmezse, 0 olduğu varsayılır (örneğin, bir kredinin gelecekteki değeri 0'dır). Örneğin, 18 yıl içinde özel bir proje için 50.000 $ tasarruf etmek istiyorsanız, 50.000 $ gelecekteki değerdir. Daha sonra faiz oranı konusunda ihtiyatlı bir tahmin yapabilir ve her ay ne kadar tasarruf etmeniz gerektiğini belirleyebilirsiniz. Fv atlanırsa, pmt bağımsız değişkenini eklemeniz gerekir. Gd için varsayılan değer sıfırdır.";
        this["Func_rate_ArgDesc_4"] = "Ödemelerin dönem sonunda mı (sıfır, varsayılan değer) yoksa başında (bir) mı olacağını gösteren sıfır veya bir sayısı.";
        this["Func_rate_ArgDesc_5"] = "Sonuca yakın tahmin ettiğiniz bir sayı. Yok sayılırsa 0,1 (% 10) olduğu varsayılır.";
        this["Func_rate_Category"] = "Parasal";
        this["Func_rate_CategoryURL"] = "Parasal";
        this["Func_rate_Desc"] = "Yıllık gelirin dönem başına faiz oranını verir.";
        this["Func_replace_Arg_0"] = "Old_text";
        this["Func_replace_Arg_1"] = "Start_num";
        this["Func_replace_Arg_2"] = "Num_chars";
        this["Func_replace_Arg_3"] = "New_text";
        this["Func_replace_ArgDesc_0"] = "Bazı karakterlerin değiştirileceği metin ifadesi.";
        this["Func_replace_ArgDesc_1"] = "Old_text içindeki karakterin new_text ile değiştirilecek 1 tabanlı dizini.";
        this["Func_replace_ArgDesc_2"] = "Old_text içindeki new_text ile değiştirilecek karakter sayısı.";
        this["Func_replace_ArgDesc_3"] = "Old_text  içindeki karakterlerin yerini alacak metin.";
        this["Func_replace_Category"] = "TextAndData";
        this["Func_replace_CategoryURL"] = "Text_and_Data";
        this["Func_replace_Desc"] = "Metin ifadesinin bir bölümünü değiştirir.";
        this["Func_rept_Arg_0"] = "TextValue";
        this["Func_rept_Arg_1"] = "RepeatCount";
        this["Func_rept_ArgDesc_0"] = "Tekrarlanacak metin.";
        this["Func_rept_ArgDesc_1"] = "Metnin tekrarlanacağı pozitif sayı.";
        this["Func_rept_Category"] = "TextAndData";
        this["Func_rept_CategoryURL"] = "Text_and_Data";
        this["Func_rept_Desc"] = "Metni belirli bir sayıda yineler.";
        this["Func_right_Arg_0"] = "Metin";
        this["Func_right_Arg_1"] = "num_chars";
        this["Func_right_ArgDesc_0"] = "Ayıklanacak karakterleri içeren metin ifadesi.";
        this["Func_right_ArgDesc_1"] = "Ayıklanacak karakter sayısı.";
        this["Func_right_Category"] = "TextAndData";
        this["Func_right_CategoryURL"] = "Text_and_Data";
        this["Func_right_Desc"] = "Bir metin ifadesindeki son karakteri veya karakterleri verir.";
        this["Func_roman_Arg_0"] = "Sayı";
        this["Func_roman_Arg_1"] = "Form";
        this["Func_roman_ArgDesc_0"] = "Roma rakamlarına dönüştürülecek sayı.";
        this["Func_roman_ArgDesc_1"] = "Klasik roma rakamlarının mı yoksa daha kısa bir versiyonun mu kullanılacağını belirten bir sayı veya boole değeri.\r\n0 = (Varsayılan) Klasik. (499 = \" CDXCIX \")\r\n1 = Daha kısa. (499 = \" LDVLIV \")\r\n2 = Daha kısa. (499 = \" XDIX \")\r\n3 = Daha kısa. (499 = \" VDIV \")\r\n4 = Basitleştirilmiş. (499 = \" Kimlik \")\r\nDoğru = Klasik.\r\nYanlış = Basitleştirilmiş.\r\n    ";
        this["Func_roman_Category"] = "Matematik";
        this["Func_roman_CategoryURL"] = "Matematik";
        this["Func_roman_Desc"] = "Bir sayıyı metin ifadesi olarak bir Roma rakamına dönüştürür.";
        this["Func_round_Arg_0"] = "sayı";
        this["Func_round_Arg_1"] = "num_digits";
        this["Func_round_Arg_2"] = "round_Style";
        this["Func_round_ArgDesc_0"] = "Yuvarlanacak sayı.";
        this["Func_round_ArgDesc_1"] = "Sayının yuvarlanacağı basamak sayısı.";
        this["Func_round_ArgDesc_2"] = "Kullanılacak yuvarlama stilini belirten bir sayı.\r\n0 - Aritmetik Yuvarlama (varsayılan) - Yuvarlamadaki son önemli basamak 5 ise, sayı yukarı yuvarlanır.\r\n1 - Banker Yuvarlaması - Son önemli basamak 5 olduğunda, önceki basamağın yukarı veya aşağı yuvarlanıp yuvarlanmayacağını belirlemek için kullanılır. Rakam çift ise, sayı aşağı yuvarlanır. Tek ise sayı yukarı yuvarlanır.\r\n    ";
        this["Func_round_Category"] = "Matematik";
        this["Func_round_CategoryURL"] = "Matematik";
        this["Func_round_Desc"] = "Bir sayıyı belirtilen sayıda basamağa yuvarlar.";
        this["Func_rounddown_Arg_0"] = "Sayı";
        this["Func_rounddown_Arg_1"] = "Rakamlar";
        this["Func_rounddown_ArgDesc_0"] = "Aşağı yuvarlanacak sayı.";
        this["Func_rounddown_ArgDesc_1"] = "Yuvarlanacak ondalık basamak sayısı. Pozitif sayılar ondalık noktadan sonraki yerleri, negatif sayılar ise ondalık noktadan önceki yerleri belirtir.";
        this["Func_rounddown_Category"] = "Matematik";
        this["Func_rounddown_CategoryURL"] = "Matematik";
        this["Func_rounddown_Desc"] = "Bir sayıyı, belirtilen basamak sayısına aşağı yuvarlar.";
        this["Func_roundup_Arg_0"] = "Sayı";
        this["Func_roundup_Arg_1"] = "Rakamlar";
        this["Func_roundup_ArgDesc_0"] = "Yuvarlanacak sayı.";
        this["Func_roundup_ArgDesc_1"] = "Yuvarlanacak ondalık basamak sayısı. Pozitif sayılar ondalık noktadan sonraki yerleri, negatif sayılar ise ondalık noktadan önceki yerleri belirtir.";
        this["Func_roundup_Category"] = "Matematik";
        this["Func_roundup_CategoryURL"] = "Matematik";
        this["Func_roundup_Desc"] = "Bir sayıyı belirtilen basamak sayısına yuvarlar.";
        this["Func_search_Arg_0"] = "search_text";
        this["Func_search_Arg_1"] = "değer";
        this["Func_search_Arg_2"] = "start_index";
        this["Func_search_ArgDesc_0"] = "Değerde bulunacak metin.";
        this["Func_search_ArgDesc_1"] = "Search_text'in bulunacağı metin.";
        this["Func_search_ArgDesc_2"] = "Aramanın başlatılacağı 1 tabanlı dizin (atlanırsa, start_index 1'dir).";
        this["Func_search_Category"] = "TextAndData";
        this["Func_search_CategoryURL"] = "TextAndData";
        this["Func_search_Desc"] = "Büyük / küçük harfe duyarsız olarak arama yaparak, bir dizenin diğerinin içindeki 1 tabanlı dizinini verir.";
        this["Func_searchb_Arg_0"] = "search_text";
        this["Func_searchb_Arg_1"] = "değer";
        this["Func_searchb_Arg_2"] = "start_index";
        this["Func_searchb_ArgDesc_0"] = "Değerde bulunacak metin.";
        this["Func_searchb_ArgDesc_1"] = "Search_text'in bulunacağı metin.";
        this["Func_searchb_ArgDesc_2"] = "Aramanın başlatılacağı 1 tabanlı dizin (atlanırsa, start_index 1'dir).";
        this["Func_searchb_Category"] = "TextAndData";
        this["Func_searchb_CategoryURL"] = "TextAndData";
        this["Func_searchb_Desc"] = "Büyük / küçük harfe duyarsız olarak arama yaparak, bir dizenin diğerinin içindeki 1 tabanlı dizinini verir.";
        this["Func_second_Arg_0"] = "Time_value";
        this["Func_second_ArgDesc_0"] = "Saniyesi alınacak zaman değeri.";
        this["Func_second_Category"] = "DateAndTime";
        this["Func_second_CategoryURL"] = "Date_and_Time";
        this["Func_second_Desc"] = "Zaman değeri için saniyeyi verir.";
        this["Func_seriessum_Arg_0"] = "InputValue";
        this["Func_seriessum_Arg_1"] = "InitialPower";
        this["Func_seriessum_Arg_2"] = "Adım";
        this["Func_seriessum_Arg_3"] = "Katsayılar";
        this["Func_seriessum_ArgDesc_0"] = "Kuvvet serisinin giriş değeri.";
        this["Func_seriessum_ArgDesc_1"] = "InputValue değerinin yükseltileceği ilk kuvvet.";
        this["Func_seriessum_ArgDesc_2"] = "Serideki her terimin kuvvetini artırmak için kullanılacak adım.";
        this["Func_seriessum_ArgDesc_3"] = "InputValue'nun birbirini izleyen her gücünün çarpıldığı katsayılar kümesi.";
        this["Func_seriessum_Category"] = "Matematik";
        this["Func_seriessum_CategoryURL"] = "Matematik";
        this["Func_seriessum_Desc"] = "Kuvvet serilerinin toplamını verir.";
        this["Func_sign_Arg_0"] = "Sayı";
        this["Func_sign_ArgDesc_0"] = "İşareti verilecek sayı.";
        this["Func_sign_Category"] = "Matematik";
        this["Func_sign_CategoryURL"] = "Matematik";
        this["Func_sign_Desc"] = "Bir sayının işaretini verir (-1, 0 veya 1).";
        this["Func_sin_Arg_0"] = "sayı";
        this["Func_sin_ArgDesc_0"] = "Sinüsün alınacağı radyan cinsinden açı.";
        this["Func_sin_Category"] = "Matematik";
        this["Func_sin_CategoryURL"] = "Matematik";
        this["Func_sin_Desc"] = "Belirtilen açının sinüsünü verir.";
        this["Func_sinh_Arg_0"] = "sayı";
        this["Func_sinh_ArgDesc_0"] = "Hiperbolik sinüs alınacak gerçek sayı.";
        this["Func_sinh_Category"] = "Matematik";
        this["Func_sinh_CategoryURL"] = "Matematik";
        this["Func_sinh_Desc"] = "Bir sayının hiperbolik sinüsünü verir.";
        this["Func_sln_Arg_0"] = "maliyet";
        this["Func_sln_Arg_1"] = "kurtarma";
        this["Func_sln_Arg_2"] = "hayat";
        this["Func_sln_ArgDesc_0"] = "Varlığın başlangıç maliyeti.";
        this["Func_sln_ArgDesc_1"] = "Amortismanın sonundaki değer.";
        this["Func_sln_ArgDesc_2"] = "Varlığın amortismana tabi tutulduğu dönem sayısı.";
        this["Func_sln_Category"] = "Parasal";
        this["Func_sln_CategoryURL"] = "Parasal";
        this["Func_sln_Desc"] = "Bir varlığın bir döneme ilişkin doğrusal amortismanını verir.";
        this["Func_sqrt_Arg_0"] = "sayı";
        this["Func_sqrt_ArgDesc_0"] = "Karekök elde edilecek sayı.";
        this["Func_sqrt_Category"] = "Matematik";
        this["Func_sqrt_CategoryURL"] = "Matematik";
        this["Func_sqrt_Desc"] = "Bir sayının pozitif bir karekökünü verir.";
        this["Func_sqrtpi_Arg_0"] = "Sayı";
        this["Func_sqrtpi_ArgDesc_0"] = "Pi ile çarpılacak sayı.";
        this["Func_sqrtpi_Category"] = "Matematik";
        this["Func_sqrtpi_CategoryURL"] = "Matematik";
        this["Func_sqrtpi_Desc"] = "Belirtilen sayıyı pi ile çarpar ve sonucun karekökünü verir.";
        this["Func_stdev_Arg_0"] = "sayı{0}";
        this["Func_stdev_ArgDesc_0"] = "Bir popülasyonun bir örneğini belirten bir sayı veya sayı aralığı.";
        this["Func_stdev_Category"] = "İstatistiksel";
        this["Func_stdev_CategoryURL"] = "İstatistiksel";
        this["Func_stdev_Desc"] = "Bir popülasyon örneğinin standart sapmasını verir.";
        this["Func_subtotal_Arg_0"] = "FunctionNum";
        this["Func_subtotal_Arg_1"] = "Ref{0}";
        this["Func_subtotal_ArgDesc_0"] = "Hesaplanacak işlevi temsil eden bir sayı. Gizli değerleri yok saymak için değere 100 ekleyin.\r\n1 (veya 101) - ORTALAMA\r\n2 (veya 102) - SAYI\r\n4 (veya 104) - MAKS\r\n5 (veya 105) - MIN\r\n6 (veya 106) - ÜRÜN\r\n7 (veya 107) - STDSAPMA\r\n9 (veya 109) - TOPLA\r\n10 (veya 110) - VAR\r\n    ";
        this["Func_subtotal_ArgDesc_1"] = "Ara toplamı bulmak için bir veya daha fazla referans.";
        this["Func_subtotal_Category"] = "Matematik";
        this["Func_subtotal_CategoryURL"] = "Matematik";
        this["Func_subtotal_Desc"] = "Bir veya daha fazla referansta ara toplamı hesaplar.";
        this["Func_sum_Arg_0"] = "sayı{0}";
        this["Func_sum_ArgDesc_0"] = "Diğer numaralara eklenecek bir numara.";
        this["Func_sum_Category"] = "Matematik";
        this["Func_sum_CategoryURL"] = "Matematik";
        this["Func_sum_Desc"] = "Bağımsız değişken olarak verilen tüm sayıları toplar ve toplamı verir.";
        this["Func_syd_Arg_0"] = "maliyet";
        this["Func_syd_Arg_1"] = "kurtarma";
        this["Func_syd_Arg_2"] = "hayat";
        this["Func_syd_Arg_3"] = "başına";
        this["Func_syd_ArgDesc_0"] = "Varlığın başlangıç maliyeti.";
        this["Func_syd_ArgDesc_1"] = "Amortismanın sonundaki değer.";
        this["Func_syd_ArgDesc_2"] = "Varlığın amortismana tabi tutulduğu dönem sayısı.";
        this["Func_syd_ArgDesc_3"] = "Yaşamla aynı birimleri kullanması gereken dönem.";
        this["Func_syd_Category"] = "Parasal";
        this["Func_syd_CategoryURL"] = "Parasal";
        this["Func_syd_Desc"] = "Belirli bir dönem için bir varlığın yıllar toplamı basamak amortismanını verir.";
        this["Func_tan_Arg_0"] = "sayı";
        this["Func_tan_ArgDesc_0"] = "Tanjantın elde edileceği radyan cinsinden açı.";
        this["Func_tan_Category"] = "Matematik";
        this["Func_tan_CategoryURL"] = "Matematik";
        this["Func_tan_Desc"] = "Belirtilen açının tanjantını verir.";
        this["Func_tanh_Arg_0"] = "sayı";
        this["Func_tanh_ArgDesc_0"] = "Hiperbolik tanjantın elde edileceği radyan cinsinden açı.";
        this["Func_tanh_Category"] = "Matematik";
        this["Func_tanh_CategoryURL"] = "Matematik";
        this["Func_tanh_Desc"] = "Belirtilen açının hiperbolik tanjantını verir.";
        this["Func_text_Arg_0"] = "Değer";
        this["Func_text_Arg_1"] = "FormatText";
        this["Func_text_ArgDesc_0"] = "Biçimlendirilmesi gereken sayısal değer.";
        this["Func_text_ArgDesc_1"] = "Değerin biçimlendirileceği sayı biçimi.";
        this["Func_text_Category"] = "TextAndData";
        this["Func_text_CategoryURL"] = "Text_and_Data";
        this["Func_text_Desc"] = "Değeri, belirtilen biçime göre metne dönüştürür.";
        this["Func_time_Arg_0"] = "saat";
        this["Func_time_Arg_1"] = "dakika";
        this["Func_time_Arg_2"] = "saniye";
        this["Func_time_ArgDesc_0"] = "Zamanın saatini temsil eden bir sayı.";
        this["Func_time_ArgDesc_1"] = "Zamanın dakikasını temsil eden bir sayı.";
        this["Func_time_ArgDesc_2"] = "Zamanın saniyesini temsil eden bir sayı.";
        this["Func_time_Category"] = "DateAndTime";
        this["Func_time_CategoryURL"] = "Date_and_Time";
        this["Func_time_Desc"] = "Belirli bir zaman değerini temsil eden bir sayı verir.";
        this["Func_timevalue_Arg_0"] = "time_text";
        this["Func_timevalue_ArgDesc_0"] = "Bir zamanı temsil eden bir metin ifadesi.";
        this["Func_timevalue_Category"] = "DateAndTime";
        this["Func_timevalue_CategoryURL"] = "Date_and_Time";
        this["Func_timevalue_Desc"] = "Bir zamanı temsil eden bir metin ifadesini eşdeğer zaman değerine dönüştürür.";
        this["Func_today_Category"] = "DateAndTime";
        this["Func_today_CategoryURL"] = "Date_and_Time";
        this["Func_today_Desc"] = "Geçerli tarihi verir.";
        this["Func_trim_Arg_0"] = "Metin";
        this["Func_trim_ArgDesc_0"] = "Fazladan boşlukların kaldırılacağı metin.";
        this["Func_trim_Category"] = "TextAndData";
        this["Func_trim_CategoryURL"] = "Text_and_Data";
        this["Func_trim_Desc"] = "Doğru mantıksal değeri verir.";
        this["Func_true_Category"] = "Mantıklı";
        this["Func_true_CategoryURL"] = "Mantıklı";
        this["Func_true_Desc"] = "Doğru mantıksal değeri verir.";
        this["Func_trunc_Arg_0"] = "sayı";
        this["Func_trunc_Arg_1"] = "num_digits";
        this["Func_trunc_ArgDesc_0"] = "Kısaltılacak sayı.";
        this["Func_trunc_ArgDesc_1"] = "Kısaltmanın hassasiyetini belirten bir sayı. Varsayılan değer sıfırdır.";
        this["Func_trunc_Category"] = "Matematik";
        this["Func_trunc_CategoryURL"] = "Matematik";
        this["Func_trunc_Desc"] = "Sayının kesirli kısmını kaldırarak bir sayıyı tam sayı olacak şekilde kısaltır.";
        this["Func_type_Arg_0"] = "değer";
        this["Func_type_ArgDesc_0"] = "Türü alınacak değer.";
        this["Func_type_Category"] = "Bilgi";
        this["Func_type_CategoryURL"] = "Bilgi";
        this["Func_type_Desc"] = "Değerin türünü temsil eden bir sayı verir: sayı = 1; metin = 2; mantıksal değer (doğru veya yanlış) = 4; hata değeri = 16; dizi = 64.";
        this["Func_upper_Arg_0"] = "Metin";
        this["Func_upper_ArgDesc_0"] = "Büyük harfe dönüştürülecek metin.";
        this["Func_upper_Category"] = "TextAndData";
        this["Func_upper_CategoryURL"] = "Text_and_Data";
        this["Func_upper_Desc"] = "Bir metin ifadesindeki tüm küçük harfleri büyük harfe dönüştürür.";
        this["Func_value_Arg_0"] = "Metin";
        this["Func_value_ArgDesc_0"] = "Dönüştürülecek metin ifadesi.";
        this["Func_value_Category"] = "TextAndData";
        this["Func_value_CategoryURL"] = "Text_and_Data";
        this["Func_value_Desc"] = "Bir sayıyı temsil eden bir metin ifadesini sayıya dönüştürür.";
        this["Func_var_Arg_0"] = "sayı{0}";
        this["Func_var_ArgDesc_0"] = "Bir popülasyonun bir örneğini belirten bir sayı veya sayı aralığı.";
        this["Func_var_Category"] = "İstatistiksel";
        this["Func_var_CategoryURL"] = "İstatistiksel";
        this["Func_var_Desc"] = "Bir popülasyon örneğinin varyansını verir.";
        this["Func_weekday_Arg_0"] = "Tarih (değiştir | kaynağı değiştir)";
        this["Func_weekday_Arg_1"] = "ReturnType";
        this["Func_weekday_ArgDesc_0"] = "Gün numarasının bulunacağı tarih.";
        this["Func_weekday_ArgDesc_1"] = "Haftanın günleri için hangi numaralandırma şemasının kullanıldığını belirler.\r\n1 (varsayılan) = Pazar (1) ile Cumartesi (7) arası\r\n2 = Pazartesi (1) - Pazar (7)\r\n3 = Pazartesi (0) ile Pazar (6) arası\r\n    ";
        this["Func_weekday_Category"] = "DateAndTime";
        this["Func_weekday_CategoryURL"] = "DateAndTime";
        this["Func_weekday_Desc"] = "Belirtilen tarihin haftanın gününü temsil eden bir sayı verir.";
        this["Func_weeknum_Arg_0"] = "tarih";
        this["Func_weeknum_Arg_1"] = "returnType";
        this["Func_weeknum_ArgDesc_0"] = "Hafta numarasının bulunacağı tarih.";
        this["Func_weeknum_ArgDesc_1"] = "Haftanın hangi gün başlayacağını belirler.\r\n1 (varsayılan) = Pazar haftanın ilk günüdür.\r\n2 = Pazartesi, haftanın ilk günüdür.\r\n    ";
        this["Func_weeknum_Category"] = "DateAndTime";
        this["Func_weeknum_CategoryURL"] = "DateAndTime";
        this["Func_weeknum_Desc"] = "Belirtilen tarihin denk geldiği haftanın sayısını döndürür.";
        this["Func_workday_Arg_0"] = "startDate";
        this["Func_workday_Arg_1"] = "günler";
        this["Func_workday_Arg_2"] = "Bayram";
        this["Func_workday_ArgDesc_0"] = "Başlanacak tarih.";
        this["Func_workday_ArgDesc_1"] = "Başlangıç tarihinden mahsup edilecek iş günü sayısı.";
        this["Func_workday_ArgDesc_2"] = "Çalışma dışı günler olarak kabul edilecek tarihleri içeren bir veya daha fazla referans aralığı.";
        this["Func_workday_Category"] = "DateAndTime";
        this["Func_workday_CategoryURL"] = "DateAndTime";
        this["Func_workday_Desc"] = "Belirtilen tatiller hariç, belirtilen tarihten itibaren belirtilen sayıda gün olan bir iş gününü döndürür.";
        this["Func_year_Arg_0"] = "Date_value";
        this["Func_year_ArgDesc_0"] = "Yılı alınacak tarih değeri.";
        this["Func_year_Category"] = "DateAndTime";
        this["Func_year_CategoryURL"] = "Date_and_Time";
        this["Func_year_Desc"] = "Tarih değeri için yılı verir.";
        this["Func_yearfrac_Arg_0"] = "StartDate";
        this["Func_yearfrac_Arg_1"] = "EndDate";
        this["Func_yearfrac_Arg_2"] = "Basis";
        this["Func_yearfrac_ArgDesc_0"] = "Başlangıç tarihi, aralıktaki başlangıç tarihidir.";
        this["Func_yearfrac_ArgDesc_1"] = "Bitiş tarihi, aralıktaki bitiş tarihidir.";
        this["Func_yearfrac_ArgDesc_2"] = "\r\n      Temel, kullanılacak gün sayısının temelini belirler.\r\n0 (Varsayılan = ABD (NASD) 30/360\r\n1 = Aktüel/aktüel\r\n2 = Aktüel/360\r\n3 = Aktüel/365\r\n4 = Avrupa 30/360\r\n    ";
        this["Func_yearfrac_Category"] = "DateAndTime";
        this["Func_yearfrac_CategoryURL"] = "DateAndTime";
        this["Func_yearfrac_Desc"] = "Belirtilen başlangıç tarihi ile bitiş tarihi arasında belirtilen bir yılın bölümünü temsil eden bir kesir döndürür.";
        this["GenerateTableColumnName"] = "Sütun";
        this["GenerateTableName"] = "Tablo";
        this["LD_Chart_AxisDisplayUnits"] = "Yüzler: Yüzler, Binler: Binler, On Binler: x 10000, Yüz Binler x 100000, Milyonlar: Milyonlar, On Milyonlar: x 10000000, Yüz Milyonlar: x 100000000, Bin Milyonlar: Milyarlar, Milyon Milyonlar: Trilyonlar";
        this["LD_Fallback_ChartEx_Line1"] = "Bu grafik, Excel sürümünüzde mevcut değil.";
        this["LD_Fallback_ChartEx_Line2"] = "Bu şekli düzenlemek veya bu çalışma kitabını farklı bir dosya biçiminde kaydetmek, grafiği kalıcı olarak bozacaktır.";
        this["LE_AllMustHavGuidsIfAnyHasThem"] = "Var olan herhangi bir grubun Guid'i varsa GenerateGuidsForGroups false olarak ayarlanamaz.";
        this["LE_ArgumentException_AnchorCellFromOtherWorksheet"] = "Belirtilen hücre, şekil ile aynı çalışma sayfasında yok.";
        this["LE_ArgumentException_ArrayFormulaMustHaveSingleRegion"] = "Bir dizi formülü yalnızca bir hücre bölgesine uygulanabilir.";
        this["LE_ArgumentException_ArrayTooSmall"] = "Dizi, tüm değerleri kendisine kopyalayacak kadar büyük değil.";
        this["LE_ArgumentException_CannotAddStandardTableStyle"] = "CustomTableStyleCollection'a standart bir tablo stili eklenemez.";
        this["LE_ArgumentException_CannotApplyDVRuleToTotalCell"] = "Belirtilen başvurudaki bir veya daha fazla hücre, tablodaki toplam hücrelerdir ve uygulanmış bir veri doğrulama kuralı olamaz.";
        this["LE_ArgumentException_CannotCreateEmptyColorInfo"] = "Boş renk, WorkbookColorInfo örneği oluşturmak için kullanılamaz.";
        this["LE_ArgumentException_CellMustBeOnSameWorksheetAsReferencesCollection"] = "Hücre, referans koleksiyonuyla aynı çalışma sayfasından olmalıdır.";
        this["LE_ArgumentException_CellShiftedOffWorksheet"] = "Hücre silinmiş veya çalışma sayfasından kaydırılmıştır ve artık bir çalışma sayfası konumunu temsil etmemektedir.";
        this["LE_ArgumentException_CellsInTableFromOtherWorksheet"] = "Belirtilen bölge, veri tablosu ile aynı çalışma sayfasından değil.";
        this["LE_ArgumentException_CellValueStringLength"] = "Bir hücreye atanan dize değerlerinin uzunluğu {0} 'den büyük olamaz.";
        this["LE_ArgumentException_ColumnFormulaAlreadyAppliedToCell"] = "Formül zaten bir hücreye uygulandı. Sütun formülü olarak kullanmak için klonlayın.";
        this["LE_ArgumentException_ColumnFromDifferentWorksheet"] = "Sütun, bu koleksiyonla aynı çalışma sayfasına ait değil.";
        this["LE_ArgumentException_ColumnInputCellFromOtherWorksheet"] = "Belirtilen sütun giriş hücresi, veri tablosu ile aynı çalışma sayfasında mevcut değil.";
        this["LE_ArgumentException_ColumnNotInTable"] = "Sütun farklı bir tablodan.";
        this["LE_ArgumentException_ColumnRemovedFromWorksheet"] = "Sütun çalışma sayfasından kaldırıldı.";
        this["LE_ArgumentException_ColumnsToRepeatAtLeftOutsideRange"] = "Aralık, çalışma sayfasındaki kullanılabilir sütun aralığının dışında.";
        this["LE_ArgumentException_CommentTooLong"] = "Yorum uzunluğu 255 karakterden az olmalıdır.";
        this["LE_ArgumentException_CustomViewNameAlreadyExists"] = "\"{0}\" adında özel bir görünüm zaten var.";
        this["LE_ArgumentException_DefaultTableStyleNotInWorkbook"] = "Belirtilen tablo stili, CustomTableStyles veya StandardTableStyles koleksiyonlarında değil.";
        this["LE_ArgumentException_DisplayTextTooLong"] = "Köprü görüntü metni 256 karakterden az olmalıdır.";
        this["LE_ArgumentException_DuplicateDisplayValue"] = "Belirtilen görüntü değeri zaten koleksiyonda.";
        this["LE_ArgumentException_DuplicateFixedDateGroup"] = "Belirtilen FixedDateGroup koleksiyonda zaten var.";
        this["LE_ArgumentException_DuplicateTableStyle"] = "Belirtilen stil zaten bir CustomTableStyleCollection.";
        this["LE_ArgumentException_DuplicateTableStyleName_Existing"] = "Koleksiyondaki başka bir stille eşleşen belirtilen ad.";
        this["LE_ArgumentException_DuplicateTableStyleName_New"] = "Belirtilen stilin, koleksiyondaki başka bir stille eşleşen bir adı var.";
        this["LE_ArgumentException_DuplicateWorksheetProtectedRangeTitle"] = "'{0}' başlıklı bir aralık zaten var.";
        this["LE_ArgumentException_DV_ArrayFormulaCannotBeUsed"] = "ArrayFormula, {0} olarak uygulanamaz.";
        this["LE_ArgumentException_DV_CellFromOtherWorksheet"] = "Hücre, veri doğrulama kurallarının koleksiyonuyla aynı çalışma sayfasına ait değil.";
        this["LE_ArgumentException_DV_ConstraintFormulaMustBeNumberOrReference"] = "{0} bir sayıya, sayısal ifadeye veya tek bir hücreye başvuruya ayarlanmalıdır.";
        this["LE_ArgumentException_DV_FormulaCannotBeNull"] = "Veri doğrulama kuralı bir çalışma sayfasına uygulanırken {0} boş olarak ayarlanamaz.";
        this["LE_ArgumentException_DV_FormulaCannotFindNamedReference"] = "{0}, Çalışma Kitabında bulunmayan adlandırılmış bir başvuru içeriyor.";
        this["LE_ArgumentException_DV_FormulaCannotFindWorksheetReference"] = "{0}, Çalışma Kitabında bulunmayan bir çalışma sayfasında bir referans içerir.";
        this["LE_ArgumentException_DV_FormulaCannotReferenceOtherWorkbook"] = "{0}, harici bir Çalışma Kitabına referans içeremez.";
        this["LE_ArgumentException_DV_FormulaInvalidForWorkbookFormat"] = "{0}, {1} çalışma kitabı biçiminde geçerli olmayan hücrelere başvuruyor.";
        this["LE_ArgumentException_DV_InvalidAddress"] = "Belirtilen adres, geçerli bir hücre veya bölge adresi değil.";
        this["LE_ArgumentException_DV_InvalidExcelDate"] = "Belirtilen tarih Excel'de gösterilemez.";
        this["LE_ArgumentException_DV_InvalidFormula"] = "Veri doğrulama kuralında geçersiz formül kullanıldı.";
        this["LE_ArgumentException_DV_InvalidMessageLength"] = "{0}, {1} karakterden fazla olamaz.";
        this["LE_ArgumentException_DV_ListFormulaCannotHaveEmptyString"] = "ValuesFormula'daki dize sabiti boş bir dize olamaz.";
        this["LE_ArgumentException_DV_ListFormulaMustBeStringOrReference"] = "ValuesFormula bir dize sabitine veya aynı Çalışma Kitabındaki tek bir hücreye veya bölgeye başvuru olarak ayarlanmalıdır.";
        this["LE_ArgumentException_DV_ListFormulaReferenceMustBeOneDimensional"] = "ValuesFormula, birden çok satır ve sütuna sahip bir bölge referansı içerir. Bölge bir satır veya bir sütun içermelidir.";
        this["LE_ArgumentException_DV_LowerGreaterThanUpperContraint"] = "Alt sınırlamanın değeri, üst sınırlamadan küçük veya ona eşit olmalıdır.";
        this["LE_ArgumentException_DV_MustHaveOneAcceptedValue"] = "Kabul edilen bir değer olarak en az bir değer belirtilmelidir.";
        this["LE_ArgumentException_DV_ReferencesAlreadyContainDVs"] = "Belirtilen referanslar zaten bir veya daha fazla veri doğrulama kuralı içeriyor.";
        this["LE_ArgumentException_DV_ReferencesFromOtherWorksheet"] = "Referans koleksiyonu, veri doğrulama kurallarının koleksiyonuyla aynı çalışma sayfasına ait değil.";
        this["LE_ArgumentException_DV_RegionFromOtherWorksheet"] = "Bölge, veri doğrulama kurallarının koleksiyonuyla aynı çalışma sayfasına ait değil.";
        this["LE_ArgumentException_DV_RuleAppliedOnOtherWorksheet"] = "Veri doğrulama kuralı zaten başka bir çalışma sayfasına uygulandı.";
        this["LE_ArgumentException_DV_UpperLessThanLowerContraint"] = "Üst sınırlamanın değeri, alt sınırlamadan büyük veya ona eşit olmalıdır.";
        this["LE_ArgumentException_EditRangeAlreadyOwned"] = "Aralık zaten bir çalışma sayfasının AllowEditRanges içinde.";
        this["LE_ArgumentException_EditRangeHasRangeFromOtherWorksheet"] = "Düzenleme aralığı, AllowEditRanges'den farklı bir çalışma sayfasından bir aralığa sahiptir.";
        this["LE_ArgumentException_EmptyCustomList"] = "Listede en az bir dize bulunmalıdır.";
        this["LE_ArgumentException_EndIndexLessThanZero"] = "Aralığın sonu sıfırdan büyük veya sıfıra eşit olmalıdır.";
        this["LE_ArgumentException_FileDoesntContainsWorkbookStream"] = "Belirtilen akış veya dosya geçerli bir çalışma kitabı içermiyor.";
        this["LE_ArgumentException_FormulaReferencesInvalidCells"] = "Belirtilen formül, çalışma kitabının geçerli dosya biçiminde desteklenmeyen hücrelere başvuruyor.";
        this["LE_ArgumentException_HashSetFull"] = "Karma sette çok fazla öğe var.";
        this["LE_ArgumentException_HyperlinkAlreadyOwned"] = "Köprü zaten bir köprü koleksiyonuna ait.";
        this["LE_ArgumentException_HyperlinkSourceFromOtherWorksheet"] = "Köprü, farklı bir çalışma sayfasından bir kaynak hücreye veya bölgeye sahiptir.";
        this["LE_ArgumentException_HyperlinkTargetFromOtherWorkbook"] = "Hedef, köprünün sahibinden farklı bir çalışma kitabından.";
        this["LE_ArgumentException_InfiniteColumnWidth"] = "Sütun genişliği sonsuz olamaz.";
        this["LE_ArgumentException_Interval"] = "Aralık parametresi, DateInterval numaralandırmasındaki değerlerden biri olmalıdır";
        this["LE_ArgumentException_IntervalStr"] = "Aralık parametresi, DateInterval numaralandırmasındaki değerlerden birine dönüştürülemedi";
        this["LE_ArgumentException_InvalidCellAddress"] = "Belirtilen adres, geçerli bir hücre adresi değil.";
        this["LE_ArgumentException_InvalidCommentPositioningMode"] = "Yorum şekline yalnızca DontMoveOrSizeWithCells ve MoveAndSizeWithCells ShapePositioningModes uygulanabilir.";
        this["LE_ArgumentException_InvalidCustomFilterOperandNumber"] = "Değer sonsuz veya NaN olamaz.";
        this["LE_ArgumentException_InvalidCustomFilterOperator"] = "Karşılaştırma değeri bir dize olmadığında, karşılaştırma operatörü BeginsWith, DoesNotBeginWith, Contains, DoesNotContain, EndsWith veya DoesNotEndWith olamaz.";
        this["LE_ArgumentException_InvalidDatePeriodFilterValue"] = "Değer aralık dahilinde değil. Ay filtre türü için 1-12 olmalıdır. Çeyrek filtre türü için 1-4 olmalıdır.";
        this["LE_ArgumentException_InvalidDpi"] = "Belirtilen Dpi değeri geçersiz.";
        this["LE_ArgumentException_InvalidExcelDate"] = "Değer, Excel'de tarih olarak ifade edilemez.";
        this["LE_ArgumentException_InvalidFileFormat"] = "Geçersiz veya tanınmayan dosya biçimi.";
        this["LE_ArgumentException_InvalidFormula"] = "Belirtilen formül geçersizdi.";
        this["LE_ArgumentException_InvalidGradientStopColor"] = "Gradyan duraklarda otomatik ve sistem renkleri kullanılamaz.";
        this["LE_ArgumentException_InvalidNamedReferenceName"] = "Ad, geçerli bir adlandırılmış referans adı değil.";
        this["LE_ArgumentException_InvalidPaletteColor_EmptyOrSystem"] = "Palete boş veya sistem renkleri eklenemez.";
        this["LE_ArgumentException_InvalidPaletteColor_NonOpaque"] = "Palete yalnızca opak renkler eklenebilir.";
        this["LE_ArgumentException_InvalidReferencesString"] = "Referans değeri doğru biçimlendirilmemiş.";
        this["LE_ArgumentException_InvalidRegionAddress"] = "Belirtilen adres, geçerli bir bölge adresi değil.";
        this["LE_ArgumentException_InvalidRowOrColumnRange"] = "Geçersiz satır veya sütun aralığı.";
        this["LE_ArgumentException_InvalidSeriesValues"] = "Geçersiz seri değerleri. En az bir değer olmalı ve her değer bir dizge veya ikiye katlanabilen bir nesne olmalıdır.";
        this["LE_ArgumentException_InvalidTarget"] = "Köprü hedefi bir dize, WorksheetCell, WorksheetRegion veya NamedReference olmalıdır.";
        this["LE_ArgumentException_InvalidTopOrBottomFilterValue"] = "Değer 1 ile 500 arasında olmalıdır.";
        this["LE_ArgumentException_InvalidWorksheetName"] = "Çalışma sayfası adı aşağıdaki karakterlerden herhangi birini içeremez: : \\ /? * []";
        this["LE_ArgumentException_InvalidWorksheetNameStartingQuote"] = "Çalışma sayfası adı tek bir alıntıyla başlayamaz veya bitemez.";
        this["LE_ArgumentException_LessThanTwoGradientStops"] = "En az iki gradyan durağı belirtilmelidir.";
        this["LE_ArgumentException_NamedReferenceNameTooLong"] = "Adlandırılmış referansın adı 255 karakterden fazla olamaz.";
        this["LE_ArgumentException_NaNDefaultColumnWidth"] = "NaN, varsayılan sütun genişliği olarak kullanılamaz.";
        this["LE_ArgumentException_NewRegionOverlapsFilterArea"] = "Teklif, çalışma sayfanızdaki filtrelenmiş bir aralığı değiştirmeye çalışıyor ve tamamlanamıyor. Bu işlemi tamamlamak için sayfadaki Otomatik Filtrelerin kaldırılması gerekir.";
        this["LE_ArgumentException_NewTableRegionCannotMoveHeaders"] = "Yeni tablo bölgesi, üstbilgileri yeni bir satıra taşıyamaz.";
        this["LE_ArgumentException_NewTableRegionFromWrongWorksheet"] = "Belirtilen bölge, tablo ile aynı çalışma sayfasından değil.";
        this["LE_ArgumentException_NewTableRegionMustHaveDataRows"] = "Yeni tablo bölgesi en az bir veri satırı içermelidir.";
        this["LE_ArgumentException_NewTableRegionOverlapOld"] = "Yeni tablo bölgesi, önceki tablo bölgesi ile örtüşmelidir.";
        this["LE_ArgumentException_NewTableRegionOverlapsBlockingValue"] = "Tablo, çok hücreli dizi formülü veya veri tablosu içerdiği için belirtilen bölgeye göre yeniden boyutlandırılamaz.";
        this["LE_ArgumentException_NewTableRegionOverlapsMergedRegion"] = "Tablo, birleştirilmiş bir hücre içerdiğinden belirtilen bölgeye göre yeniden boyutlandırılamaz.";
        this["LE_ArgumentException_NewTableRegionOverlapsOtherTable"] = "Tablo, başka bir tablo içerdiği için belirtilen bölgeye göre yeniden boyutlandırılamaz.";
        this["LE_ArgumentException_NoRegionsInArray"] = "Belirtilen dizide bölge yok.";
        this["LE_ArgumentException_NotEnum"] = "'{0}' türü bir sıralama değil";
        this["LE_ArgumentException_NotSupportedCodePage"] = "Desteklenmeyen kod sayfası";
        this["LE_ArgumentException_NPer"] = "nPer 0 olamaz";
        this["LE_ArgumentException_NPerFunction"] = "NPer işlevi için yanlış parametre kombinasyonu";
        this["LE_ArgumentException_PA_PrintAreasCannotOverlap"] = "Belirtilen baskı alanı, mevcut baskı alanlarından biriyle çakışıyor.";
        this["LE_ArgumentException_ParentStyleFromOtherWorkbook"] = "Belirtilen stil, hücre biçimiyle aynı çalışma kitabından değil.";
        this["LE_ArgumentException_PB_CantInsertBreakAtIndex"] = "Bu koleksiyon, bir dizine öğe eklemeyi desteklemiyor.";
        this["LE_ArgumentException_PB_CantSetBreakAtIndex"] = "Bu koleksiyon, bir dizindeki öğelerin ayarlanmasını desteklemiyor.";
        this["LE_ArgumentException_PB_MustBeWithinPrintArea"] = "Sayfa sonu, baskı alanı içinde olmalıdır.";
        this["LE_ArgumentException_PB_PageBreakCantBeA1Cell"] = "Çalışma sayfasının sol üst kısmına sayfa sonu eklenemez.";
        this["LE_ArgumentException_PB_PageBreakCantBeBeforeLeftColumn"] = "Çalışma sayfasının soluna sayfa sonu eklenemez.";
        this["LE_ArgumentException_PB_PageBreakCantBeBeforeTopRow"] = "Çalışma sayfasının en üstüne sayfa sonu eklenemez.";
        this["LE_ArgumentException_PB_PageBreaksCannotAddExistingInstance"] = "Belirtilen örnek koleksiyonda zaten var.";
        this["LE_ArgumentException_PB_PageBreaksCannotOverlap"] = "Sayfa sonu, çalışma sayfasındaki diğer sayfa sonlarıyla çakışamaz.";
        this["LE_ArgumentException_PB_PrintAreaMustBeInPrintAreas"] = "Sayfa sonu, PrintAreas koleksiyonunda olmayan bir yazdırma alanında.";
        this["LE_ArgumentException_PB_PrintAreaMustBeOnSameWorksheet"] = "Sayfa sonu, sayfa sonları koleksiyonuyla aynı çalışma sayfasında olmayan bir yazdırma alanında.";
        this["LE_ArgumentException_Pmt"] = "Pmt 0 olamaz";
        this["LE_ArgumentException_PrintAreaShiftedOffWorksheet"] = "Sayfa sonu, çalışma sayfasından kaydırılmış ve artık geçerli bir hücre aralığını temsil etmeyen bir yazdırma alanındadır.";
        this["LE_ArgumentException_RangeFromOtherWorksheetThanProtectedRange"] = "Belirtilen aralık, düzenleme aralığından farklı bir çalışma sayfasındandır.";
        this["LE_ArgumentException_RegionMustBeOnSameWorksheet"] = "Bölge aynı çalışma sayfasından olmalıdır.";
        this["LE_ArgumentException_RegionMustBeOnSameWorksheetAsReferencesCollection"] = "Bölge, referans koleksiyonla aynı çalışma sayfasından olmalıdır.";
        this["LE_ArgumentException_RegionsFromMixedWorksheets"] = "Dizide belirtilen tüm bölgeler aynı çalışma sayfasından olmalıdır.";
        this["LE_ArgumentException_RegionShiftedOffWorksheet"] = "Bölge, çalışma sayfasından kaydırılmıştır ve artık geçerli bir hücre aralığını temsil etmemektedir.";
        this["LE_ArgumentException_RegionsShiftedOffWorksheet"] = "Belirtilen bir veya daha fazla bölge çalışma sayfasından kaydırıldı ve artık geçerli bir hücre aralığını temsil etmiyor.";
        this["LE_ArgumentException_RowFromDifferentWorksheet"] = "Satır, bu koleksiyonla aynı çalışma sayfasına ait değil.";
        this["LE_ArgumentException_RowInputCellFromOtherWorksheet"] = "Belirtilen satır giriş hücresi, veri tablosu ile aynı çalışma sayfasında mevcut değil.";
        this["LE_ArgumentException_RowRemovedFromWorksheet"] = "Satır çalışma sayfasından kaldırıldı.";
        this["LE_ArgumentException_SelectedWorksheetFromOtherWorkbook"] = "Çalışma sayfası, bu pencere seçenekleriyle ilişkili çalışma kitabına ait değil.";
        this["LE_ArgumentException_ShapeCannotBeAdded"] = "Belirtilen şekil, bir şekil koleksiyonuna eklenemez.";
        this["LE_ArgumentException_SourceFromOtherWorksheetThanHyperlink"] = "Belirtilen kaynak hücre veya bölge, köprüden farklı bir çalışma sayfasındandır.";
        this["LE_ArgumentException_StartIndexLessThanZero"] = "Aralığın başlangıcı sıfırdan büyük veya sıfıra eşit olmalıdır.";
        this["LE_ArgumentException_StyleNameAlreadyExists"] = "Çalışma kitabında \"{0}\" adında bir stil zaten var.";
        this["LE_ArgumentException_StyleNameTooLong"] = "Stil adı 255 karakterden fazla olamaz.";
        this["LE_ArgumentException_TableColumnRemovedFromTable"] = "Tablo sütunu tablodan kaldırıldı.";
        this["LE_ArgumentException_TableStyleFromOtherWorkbook"] = "Belirtilen WorksheetTableStyle, tabloyla aynı çalışma kitabına ait değil.";
        this["LE_ArgumentException_TargetTooLong"] = "Köprü hedef adresi 256 karakterden az olmalıdır.";
        this["LE_ArgumentException_TextLengthGreaterThanMax"] = "Bir şekil veya yorumdaki metnin uzunluğu {0} 'den fazla olamaz.";
        this["LE_ArgumentException_ToolTipTooLong"] = "Köprü aracı ipucu 256 karakterden az olmalıdır.";
        this["LE_ArgumentException_TopLeftWindowBounds"] = "Pencere sınırlarının sol ve üstü -32768 ile 32767 arasında olmalıdır.";
        this["LE_ArgumentException_WeekdayFirst"] = "WeekdayFirst parametresi FirstDayOfWeek.System ve FirstDayOfWeek.Saturday arasında olmalıdır";
        this["LE_ArgumentException_WidthHeightWindowBounds"] = "Pencere sınırlarının genişliği ve yüksekliği 0 ile 65535 arasında olmalıdır.";
        this["LE_ArgumentException_WorksheetNameAlreadyExists"] = "Çalışma kitabında \"{0}\" adında bir çalışma sayfası zaten var.";
        this["LE_ArgumentException_WorksheetNameTooLong"] = "Çalışma sayfası adı 1 ila 31 karakter uzunluğunda olmalıdır.";
        this["LE_ArgumentException_WorksheetProtectedRangeTitleTooLong"] = "Bir düzenleme aralığının başlığı 255 karakterden fazla olamaz.";
        this["LE_ArgumentException_WorksheetScopeFromOtherWorkbook"] = "Çalışma sayfası, bu koleksiyonla aynı çalışma kitabına ait değil.";
        this["LE_ArgumentNullException_AnchorCell"] = "Şekil bir çalışma sayfasında veya grupta mevcut olduğunda hücre boş olamaz.";
        this["LE_ArgumentNullException_CustomViewName"] = "Özel görünüm adı boş olamaz.";
        this["LE_ArgumentNullException_Encoder"] = "Görüntü kodlayıcı boş olamaz.";
        this["LE_ArgumentNullException_FindNamedReference"] = "Bulunacak ad boş veya değer atanmamış olamaz.";
        this["LE_ArgumentNullException_FormulaCantBeNull"] = "Adlandırılmış bir başvurunun formülü boş veya değer atanmamış olamaz.";
        this["LE_ArgumentNullException_HiddenColumn"] = "Koleksiyona boş sütun eklenemez.";
        this["LE_ArgumentNullException_HiddenRow"] = "Koleksiyona boş satır eklenemez.";
        this["LE_ArgumentNullException_Image"] = "Görüntü boş olamaz.";
        this["LE_ArgumentNullException_NamedReferenceNameCantBeNull"] = "Adlandırılmış bir referansın adı boş veya değer atanmamış olamaz.";
        this["LE_ArgumentNullException_SaveStream"] = "Çalışma kitabı boş bir akışa kaydedilemez.";
        this["LE_ArgumentNullException_SelectedWorksheet"] = "Çalışma kitabının geçerli bir seçilmiş çalışma sayfası olmalıdır.";
        this["LE_ArgumentNullException_Shape"] = "Koleksiyona boş bir şekil eklenemez.";
        this["LE_ArgumentNullException_SourceFont"] = "Kaynak yazı tipi boş olamaz.";
        this["LE_ArgumentNullException_SourceFormatting"] = "Kaynak biçimlendirmesi boş olamaz.";
        this["LE_ArgumentNullException_StyleName"] = "Stil adı boş olamaz.";
        this["LE_ArgumentNullException_UnformattedString"] = "Biçimlendirilmemiş dize boş olamaz.";
        this["LE_ArgumentNullException_Workbook"] = "Çalışma kitabı boş olamaz.";
        this["LE_ArgumentNullException_WorkbookRequiredToResolveThemeColor"] = "Temalı bir rengi çözmek için bir çalışma kitabı belirtilmelidir.";
        this["LE_ArgumentNullException_WorksheetName"] = "Çalışma sayfası adı boş olamaz.";
        this["LE_ArgumentNullException_WorksheetProtectedRangeTitleCantBeNull"] = "Bir düzenleme aralığının başlığı boş olamaz.";
        this["LE_ArgumentNullException_WorksheetScope"] = "Çalışma sayfası kapsamı boş olamaz.";
        this["LE_ArgumentOutOfRange_RelativeColumnIndex"] = "Göreli sütun dizini, belirtilen bölgenin dışında.";
        this["LE_ArgumentOutOfRange_RelativeRowIndex"] = "Göreli satır dizini, belirtilen bölgenin dışında.";
        this["LE_ArgumentOutOfRangeException_AnchorPosition"] = "Belirtilen konumdaki yüzdelerden biri 0'dan az.";
        this["LE_ArgumentOutOfRangeException_BadInsertIndex"] = "Belirtilen dizin sıfırdan büyük veya sıfıra eşit ve mevcut paragrafların sayısından küçük veya ona eşit olmalıdır.";
        this["LE_ArgumentOutOfRangeException_BadRemoveAtIndex"] = "Dizin, biçimlendirilmiş dizedeki sıfırdan büyük ve paragraf sayısından küçük olmalıdır.";
        this["LE_ArgumentOutOfRangeException_CollectionIndex"] = "Dizin aralık dışındaydı. Negatif olmamalı ve koleksiyonun boyutundan küçük olmalıdır.";
        this["LE_ArgumentOutOfRangeException_ColumnWidth"] = "Sütun genişliği 0 ile 65535 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_DefaultColumnWidth"] = "Varsayılan sütun genişliği 0 ile 65535 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_DefaultFontHeight"] = "Varsayılan yazı tipi yüksekliği 20 ile 8180 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_DefaultRowHeight"] = "Varsayılan satır yüksekliği -1 ile 8192 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_DuplicateItemSorted"] = "Belirtilen öğeye zaten uygulanan bir sıralama koşulu var.";
        this["LE_ArgumentOutOfRangeException_FirstVisibleTabIndex"] = "İlk görünür sekme dizini sıfırdan büyük veya sıfıra eşit olmalıdır.";
        this["LE_ArgumentOutOfRangeException_FontHeight"] = "Yazı tipi yüksekliği 20 ile 8180 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_GroupAddedToSelf"] = "Bir grup kendi şekil koleksiyonuna eklenemez.";
        this["LE_ArgumentOutOfRangeException_Indent"] = "Girinti düzeyi 0 ile 250 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_IndexNegative"] = "Dizin negatif olmamalıdır.";
        this["LE_ArgumentOutOfRangeException_InvalidCollectionIndex"] = "Belirtilen dizin koleksiyonda geçerli değil.";
        this["LE_ArgumentOutOfRangeException_InvalidColorInfoTint"] = "Renk tonu değeri -1,0 ile 1,0 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_InvalidColumnCount"] = "{0}, mevcut biçimde geçerli bir sütun sayısı değil. Değer, {1} ile {2} arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_InvalidColumnIndex"] = "{0}, mevcut biçimde geçerli bir sütun dizini değil. Değer, {1} ile {2} arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_InvalidGradientStopOffset"] = "Gradyan durma ofseti 0,0 ile 1,0 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_InvalidRelativeRectangleValueForGradient"] = "Dikdörtgen gradyanın iç dikdörtgeni için değerler 0,0 ile 1,0 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_InvalidRemoveAtIndex_SortConditions"] = "Sıralama koşulunun kaldırılacağı dizin aralık dışında.";
        this["LE_ArgumentOutOfRangeException_InvalidRowCount"] = "{0}, mevcut biçimde geçerli bir satır sayısı değil. Değer, {1} ile {2} arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_InvalidRowIndex"] = "{0}, mevcut biçimde geçerli bir satır dizini değil. Değer, {1} ile {2} arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_InvalidTableStyleAreaStripeExtent"] = "{0} 1 ile 9 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_LeftPaneWidth"] = "Belirtilen bölme genişliği, geçerli {0} ve {1} aralığının dışında.";
        this["LE_ArgumentOutOfRangeException_LengthMustBePositive"] = "Uzunluk birden büyük veya ona eşit olmalıdır.";
        this["LE_ArgumentOutOfRangeException_MagnificationLevel"] = "Görünüm büyütme seviyeleri 10 ile 400 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_Margins"] = "Kenar boşlukları 0 ile 100 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_MaxPagesHorizontally"] = "Yatay olarak maksimum sayfa sayısı 0 ile 32767 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_MaxPagesVertically"] = "Dikey olarak maksimum sayfa sayısı 0 ile 32767 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_MaxRecursionIterations"] = "Maksimum tekrar yinelemeleri 1 ile 32767 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_MaxSortConditions"] = "Koleksiyonda {0} adetten fazla sıralama koşulu olamaz.";
        this["LE_ArgumentOutOfRangeException_NegativeStartIndex"] = "Başlangıç dizini negatif olamaz.";
        this["LE_ArgumentOutOfRangeException_NumberOfCopies"] = "Kopya sayısı 1 ile 65535 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_Per"] = "değer başına 0 ile nPer + 1 arasında olmalıdır";
        this["LE_ArgumentOutOfRangeException_Rate"] = "Oran -1'den büyük olmalıdır";
        this["LE_ArgumentOutOfRangeException_Resolution"] = "Çözünürlük 0 ile 65535 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_RowHeight"] = "Satır yüksekliği 0 ile 8192 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_ScalingFactor"] = "Ölçeklendirme faktörü 10 ile 400 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_StartPageNumber"] = "Başlangıç sayfa numarası -32765 ile 32767 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_TabBarWidth"] = "Sekme çubuğu genişliği 0 ile 1000 arasında olmalıdır.";
        this["LE_ArgumentOutOfRangeException_TopPaneHeight"] = "Belirtilen bölme yüksekliği, geçerli {0} ve {1} aralığının dışında.";
        this["LE_AutoColorNotAllowed"] = "Renk 'Otomatik' olamaz.";
        this["LE_Axis_MajorMinorUnit"] = "MajorUnit parametresinin değeri, minorUnit parametresinin değerinden büyük olmalıdır.";
        this["LE_Axis_NoCrossAxis"] = "CrossAxis özelliği bir Axis nesnesinde ayarlanmışsa, hepsinde ayarlanması gerekir. Grafiğinizin yalnızca iki ekseni varsa, geçiş ekseni otomatik olarak belirlenebilir, ancak yalnızca CrossAxis özelliği tüm Axis nesnelerinde ayarlanmadan bırakılırsa.";
        this["LE_Biff8SerializerNotLoaded"] = "{0} biçimi, yüklenmemiş bir serileştirici gerektirir, JavaScript'te bu, infragistics.excel_serialization_biff8.js dosyasında bulunur";
        this["LE_CategoryAxisBinning_BinWidthAndNumberOfBins"] = "'BinWidth' ve 'numberOfBins' parametreleri birbirini dışlar. Her ikisi de belirtilmemiş olabilir, ancak biri belirtilmişse diğeri olmamalıdır.";
        this["LE_ChartGradientFill_EmptyStops"] = "En az bir gradyan durağı içermelidir.";
        this["LE_ChartObject_DifferentChart"] = "Atanan nesne örneği farklı bir grafikle ilişkilendirilir ve bu örneğe atanamaz.";
        this["LE_ColumnsToRepeatAtLeftAreOutsideAvailableRange"] = "Yazdırma seçeneklerinin solda yinelenen ve yeni biçimdeki mevcut sütun aralığının dışında kalan sütunları vardır.";
        this["LE_ComboChartGroupCollection_DoesNotExist"] = "Belirtilen ComboChartGroup bu koleksiyonda mevcut değil.";
        this["LE_FillPercentInvalid"] = "{0} değeri, {1} özelliği için geçerli bir değer değil.";
        this["LE_FormatLimitError_Indent"] = "Girinti, geçerli biçim tarafından sağlanan maksimum {0} değerini aşıyor.";
        this["LE_FormatLimitError_MacroWorkbook"] = "Çalışma kitabında VBA kodu var ve makro özellikli bir çalışma kitabı olarak kaydedilemez.";
        this["LE_FormatLimitError_MaxColumnIndex"] = "{0} sütun dizini, belirtilen biçim tarafından desteklenen maksimum {1} değerinden daha büyük.";
        this["LE_FormatLimitError_MaxRowIndex"] = "{0} satır dizini, bu biçimin {1} desteklediği maksimum değeri aşıyor.";
        this["LE_FormulaParseException_ArrayContainsConstants"] = "Bir dizi yalnızca sabit ifadeler içerebilir.";
        this["LE_FormulaParseException_ArrayHasEmptyFirstRow"] = "Formüldeki sabit bir dizinin ilk satırında hiç öğe yok.";
        this["LE_FormulaParseException_ArrayHasMisalignedRows"] = "Formüldeki sabit bir dizide yanlış hizalanmış satırlar var. Bir dizideki her satır aynı sayıda sütuna sahip olmalıdır.";
        this["LE_FormulaParseException_CellReferenceAfterWorkbookName"] = "Harici bir çalışma kitabı başvurusunun ardından hücre başvurusu değil, adlandırılmış bir başvuru gelmelidir.";
        this["LE_FormulaParseException_ExtraExpressions"] = "Formülün sonundan sonra fazladan ifadeler vardır.";
        this["LE_FormulaParseException_FunctionMissingClosingParen"] = "Formüldeki bir işlevin kapatma parantezi yoktur.";
        this["LE_FormulaParseException_FunctionNestingTooDeep"] = "Formüldeki bir işlev, diğer işlevlerin içinde çok derin bir şekilde yuvalanmıştır.";
        this["LE_FormulaParseException_IncorrectNumberOfArguments"] = "Formüldeki bir işleve doğru sayıda bağımsız değişken verilmemiştir.";
        this["LE_FormulaParseException_InvalidArguments"] = "Formüldeki bir işleç veya işlevde geçersiz bağımsız değişkenler var.";
        this["LE_FormulaParseException_InvalidConditionalFormatFormula"] = "Koşullu biçim formülü, birleşimler veya kesişimler, dizi sabitleri veya yapılandırılmış tablo başvuruları gibi başvuru işleçlerini kullanamaz.";
        this["LE_FormulaParseException_InvalidErrorValue"] = "Belirtilen hata türü geçerli değil. Şu değerlerden biri olmalıdır: \"#NULL!\", \"#DIV/0!\", \"#VALUE!\", \"#REF!\", \"#NAME?\", \"#NUM!\", Veya \"#N/A\".";
        this["LE_FormulaParseException_InvalidFileNameInBrackets"] = "Köşeli parantezler arasındaki dosya adı geçersizdi.";
        this["LE_FormulaParseException_InvalidStructuredTableReference"] = "Yapılandırılmış tablo referansı yanlış.";
        this["LE_FormulaParseException_InvalidWorkbookName"] = "Tırnak içindeki çalışma kitabı referansı geçerli bir çalışma kitabı dosya adı değil.";
        this["LE_FormulaParseException_InvalidWorksheetName"] = "Çalışma sayfası adı geçersiz.";
        this["LE_FormulaParseException_MacroFunctionNotAllowed"] = "'{0}' işlevleri yalnızca adlandırılmış bir referansta geçerlidir.";
        this["LE_FormulaParseException_Message_PortionWithError"] = "Hatalı kısım: {0}";
        this["LE_FormulaParseException_MissingArgumentAfterBinary"] = "Formüldeki bir ikili operatörün arkasında bir işlenen eksik.";
        this["LE_FormulaParseException_MissingArgumentAfterParen"] = "Açık bir parantezin ardından gelen ifade yoktur.";
        this["LE_FormulaParseException_MissingArgumentAfterUnary"] = "Formüldeki tekli bir operatörün ardından geçerli bir ifade gelmedi.";
        this["LE_FormulaParseException_MissingArgumentBeforeBinary"] = "Formüldeki bir ikili operatörün önünde bir işlenen eksik.";
        this["LE_FormulaParseException_NamedReferenceRefsNeedSheetName"] = "Adlandırılmış bir başvuru formülündeki tüm hücre başvuruları, çalışma sayfasını tanımlamalıdır.";
        this["LE_FormulaParseException_NoElementAfterArraySerapator"] = "Formülde öğe ayırıcıdan sonra dizi öğesi yoktur.";
        this["LE_FormulaParseException_NoEqualsSign"] = "Formül eşittir işaretiyle başlamalıdır.";
        this["LE_FormulaParseException_NoExclamationAfterWorkbookName"] = "Çalışma kitabı başvurusunun ardından bir ünlem işareti gelmelidir.";
        this["LE_FormulaParseException_NoExclamationAfterWorksheetName"] = "Çalışma sayfası başvurusunun ardından bir ünlem işareti gelmelidir.";
        this["LE_FormulaParseException_NoExpressions"] = "Formülün, eşittir işaretinden sonra geçerli bir ifadesi yoktur.";
        this["LE_FormulaParseException_NoFileNameAfterBracket"] = "Açık köşeli parantezden sonra geçerli bir dosya adı bekleniyordu.";
        this["LE_FormulaParseException_NoValidTermAfterWorkbookName"] = "Harici bir çalışma kitabı referansının ardından adlandırılmış bir referans gelmelidir.";
        this["LE_FormulaParseException_NoValidTermAfterWorksheetName"] = "Çalışma sayfası başvurusunun ardından bir hücre veya adlandırılmış başvuru gelmelidir.";
        this["LE_FormulaParseException_NoWorksheetAfterWorkbookName"] = "Köşeli parantez içindeki bir çalışma kitabı dosya adından sonra bir çalışma sayfası adı gelmelidir.";
        this["LE_FormulaParseException_StringConstantLengthTooLong"] = "Belirtilen formül, {0} karakterden uzun bir dize içeremez.";
        this["LE_FormulaParseException_TooLong"] = "Bir formülün maksimum uzunluğu, belirtilen çalışma kitabı biçimi için {0} 'yi aşamaz.";
        this["LE_FormulaParseException_UnknownFunction"] = "Formüldeki bir işlevin geçerli bir işlev adı yoktur.";
        this["LE_FormulaParseException_UnmatchedOpenBracket"] = "Formüldeki sabit bir dizinin kapanış ayracı yoktur.";
        this["LE_FormulaParseException_UnmatchedOpenParen"] = "Formüldeki açık bir parantez, eşleşen bir kapatma parantezine sahip değildir.";
        this["LE_FormulaParseException_UnmatchedOpenSquareBracket"] = "Çalışma kitabı dosya adından sonra kapanış köşeli parantez bekleniyordu.";
        this["LE_FormulaParseException_WorkbookNameMissingEndQuote"] = "Çalışma kitabı başvurusunun bitiş tırnağı yok.";
        this["LE_FormulaParseException_WorksheetRangeMissingEndingName"] = "Çalışma sayfası aralığı ikinci bir çalışma sayfası adı belirtmez.";
        this["LE_GradientStop_InvalidPosition"] = "0 ile 1 arasında bir sayı belirtmelidir.";
        this["LE_IconSetInvalid"] = "'IconSetNoIcon', IconSet özelliği için geçerli bir ayar değil.";
        this["LE_IndexOutOfRangeException_ArrayBounds"] = "Dizin, dizinin sınırlarının dışındaydı.";
        this["LE_InvalidEnumArgumentException_DefaultPatternCannotBeUsed"] = "Varsayılan FillPatternStyle, CellFillPattern oluşturmak için kullanılamaz.";
        this["LE_InvalidLineWeight"] = "LineWeight 0'dan küçük veya 1584'ten büyük olmamalıdır.";
        this["LE_InvalidOperationException_AnchorCommentBeforeApplyingToCell"] = "Yorumun hem TopLeftCornerCell hem de BottomRightCornerCell kümesine sahip olması veya bir hücreye uygulanmadan önce her ikisinin de boş olması gerekir.";
        this["LE_InvalidOperationException_AnchorShapeBeforeAddingToCollection"] = "Bir çalışma sayfasına veya gruba eklenmeden önce şeklin hem TopLeftCornerCell hem de BottomRightCornerCell ayarlanmış olması gerekir.";
        this["LE_InvalidOperationException_ArrayFormulaAlreadyApplied"] = "Dizi formülü zaten bir hücre aralığına uygulanmıştır. Önce mevcut hücre aralığını temizleyin.";
        this["LE_InvalidOperationException_ArrayFormulaAppliedInTable"] = "Dizi formülleri, tablonun bulunduğu bir alana uygulanamaz.";
        this["LE_InvalidOperationException_ArrayFormulaInMergedCell"] = "Dizi formülleri, birleştirilmiş hücrelerde geçerli değildir.";
        this["LE_InvalidOperationException_BottomRightAnchorFromOtherWorksheet"] = "Şekli bu koleksiyona eklemek, onu BottomRightCornerCell'den farklı bir çalışma sayfasına yerleştirir.";
        this["LE_InvalidOperationException_BuiltInStyleNameCannotBeChanged"] = "Yerleşik bir stilin adı değiştirilemez.";
        this["LE_InvalidOperationException_CannotAddColorsToPaletteDirectly"] = "WorkbookColorPalette'e renkler eklenemez. Belirli bir dizinde bir renk ayarlamak için dizinleyiciyi kullanın.";
        this["LE_InvalidOperationException_CannotAddParagraphDirectly"] = "Paragraflar doğrudan eklenemez.";
        this["LE_InvalidOperationException_CannotAddTableDirectly"] = "WorksheetTable örnekleri doğrudan koleksiyona eklenemez. Ekle yöntemini kullanın.";
        this["LE_InvalidOperationException_CannotAddTableToRemovedWorksheet"] = "Sahip olduğu çalışma kitabından kaldırılmış bir çalışma sayfasına tablolar eklenemez.";
        this["LE_InvalidOperationException_CannotApplyFilterWhileHeaderRowIsHidden"] = "Tablo başlık satırı gizlendiğinde filtre uygulanamaz.";
        this["LE_InvalidOperationException_CannotApplyFilterWhileUIIsHidden"] = "Filtre kullanıcı arayüzü gizliyken filtre uygulanamaz.";
        this["LE_InvalidOperationException_CannotInsertTableRow_LossOfData"] = "Verileri çalışma sayfasının altından kaydıracağından {0} eklenemez.";
        this["LE_InvalidOperationException_CannotInsertTableRow_LossOfObject"] = "Bir şekli veya yorumu çalışma sayfasının altından kaydıracağından {0} eklenemez.";
        this["LE_InvalidOperationException_CannotInsertTableRow_SplitBlockingValue"] = "Bir dizi formülündeki veya veri tablosundaki hücreleri kaydıracağından, {0} eklenemez.";
        this["LE_InvalidOperationException_CannotInsertTableRow_SplitMergedRegion"] = "Birleştirilmiş bir bölgedeki hücreleri kaydıracağından, {0} eklenemez.";
        this["LE_InvalidOperationException_CannotInsertTableRow_SplitTable"] = "Başka bir tablodaki hücreleri kaydıracağından {0} eklenemez.";
        this["LE_InvalidOperationException_CannotInsertTableRow_TableOnBottomOfWorksheet"] = "Tablo, çalışma sayfasının altında olduğu için {0} eklenemez.";
        this["LE_InvalidOperationException_CannotModifyKeysCollection"] = "Anahtar koleksiyonu değiştirilemez.";
        this["LE_InvalidOperationException_CannotModifyStandardTableStyle"] = "Standart tablo stilleri değiştirilemez.";
        this["LE_InvalidOperationException_CannotModifyValuesCollection"] = "Değerler koleksiyonu değiştirilemez.";
        this["LE_InvalidOperationException_CannotMoveDisconnectedWorksheet"] = "Çalışma sayfası bir çalışma kitabına ait olmadığı için taşınamaz.";
        this["LE_InvalidOperationException_CannotRemoveColorsToPaletteDirectly"] = "Renkler, Çalışma Kitabı Renk Paletinden kaldırılamaz. Tüm özel renkleri temizlemek için Sıfırla yöntemini kullanın.";
        this["LE_InvalidOperationException_CannotRemoveNormalStyle"] = "Normal stil kaldırılamaz.";
        this["LE_InvalidOperationException_CannotSetParentStyleOnStyle"] = "Stil, başka bir stile ait bir formatta ayarlanamaz.";
        this["LE_InvalidOperationException_CannotShift_LossOfData"] = "Veriler sayfa dışına kaldırılamaz.";
        this["LE_InvalidOperationException_CannotShift_LossOfObject"] = "Nesneler sayfa dışına kaydırılamaz.";
        this["LE_InvalidOperationException_CannotShift_SplitBlockingValue"] = "Bir dizi formülünde veya veri tablosunda kaydırılamaz.";
        this["LE_InvalidOperationException_CannotShift_SplitMergedRegion"] = "Birleştirilmiş bir bölgede kaydırılamaz.";
        this["LE_InvalidOperationException_CannotShift_SplitTable"] = "Tabloda kayma yapılamaz.";
        this["LE_InvalidOperationException_CantAddChartInChart"] = "Başka bir grafiğin Şekiller koleksiyonuna grafik eklenemez.";
        this["LE_InvalidOperationException_CantAddCustomView"] = "Özel görünümler doğrudan koleksiyona eklenemez.";
        this["LE_InvalidOperationException_CantAddDataTable"] = "Veri tabloları doğrudan eklenemez.";
        this["LE_InvalidOperationException_CantAddMergedRegion"] = "Birleştirilmiş hücre bölgeleri doğrudan eklenemez.";
        this["LE_InvalidOperationException_CantAddNamedReference"] = "Adlandırılmış referanslar doğrudan eklenemez.";
        this["LE_InvalidOperationException_CantAddWorksheet"] = "Çalışma sayfaları doğrudan bu koleksiyona eklenemez.";
        this["LE_InvalidOperationException_CantApplyRemovedCustomView"] = "Çalışma kitabının özel görünüm koleksiyonundan kaldırılmışsa özel görünüm uygulanamaz.";
        this["LE_InvalidOperationException_CantChangeArrayFormula"] = "Bir dizi formülünün hücreleri değiştirilemez.";
        this["LE_InvalidOperationException_CantChangeDataTable"] = "Bir veri tablosunun iç hücreleri değiştirilemez.";
        this["LE_InvalidOperationException_CantModifyCollection"] = "Koleksiyon değiştirilemez.";
        this["LE_InvalidOperationException_CantOverlapArrayFormula"] = "Birleştirilmiş bir hücre bölgesi, bir dizi formülü bölgesiyle çakışamaz.";
        this["LE_InvalidOperationException_CantOverlapDataTableInterior"] = "Birleştirilmiş bir hücre bölgesi, bu hücrelerin en üst satırının veya en soldaki sütununun dışına taşıyorsa, veri tablosundaki hücrelerle çakışamaz.";
        this["LE_InvalidOperationException_CantSaveEditRangeWithoutRange"] = "Çalışma sayfalarının AllowEditRanges en az bir aralığa sahip olmalıdır.";
        this["LE_InvalidOperationException_CantSaveWithNoVisibleWorksheets"] = "Çalışma kitabındaki en az bir çalışma sayfası görünür olmalıdır.";
        this["LE_InvalidOperationException_CantSaveWithNoWorksheets"] = "Çalışma sayfası olmayan bir çalışma kitabı kaydedilemez";
        this["LE_InvalidOperationException_CantSetCircularityErrorDirectly"] = "Dairesellik hata değeri, hücrelere doğrudan uygulanamaz.";
        this["LE_InvalidOperationException_CantSetDataTableDirectly"] = "Veri tabloları bir hücredeki değer olarak ayarlanamaz.";
        this["LE_InvalidOperationException_CantSetFormulaDirectly"] = "Formüller doğrudan bir hücre üzerinde ayarlanamaz, bunun yerine ApplyFormula yöntemini veya formül örneğinin ApplyTo yöntemlerinden birini kullanın.";
        this["LE_InvalidOperationException_CellsInTableMinSize"] = "Bir veri tablosundaki hücre bölgesi, her boyutta en az iki hücreye sahip olmalıdır.";
        this["LE_InvalidOperationException_ChartNotSupported"] = "WorksheetChart değişiklikleri bu formatta desteklenmez.";
        this["LE_InvalidOperationException_ClearUnknownShapeData"] = "Bu şekle ilişkin tüm veriler bilinmiyor, bunun yerine şekli koleksiyonundan kaldırın.";
        this["LE_InvalidOperationException_CollectionLongerThanMaxValue"] = "Koleksiyon, belirtilen maksimum değerin izin verdiğinden daha fazla girdi içeriyor.";
        this["LE_InvalidOperationException_CollectionModifiedWhileEnumerating"] = "Koleksiyon numaralandırılırken değiştirildi.";
        this["LE_InvalidOperationException_CurrentTableRowAddressNeedsOriginCell"] = "Yapılandırılmış bir tablo referansını geçerli satırı kullanarak ayrıştırmak için bir başlangıç hücresi belirtilmelidir.";
        this["LE_InvalidOperationException_CustomViewNoVisibleWorksheets"] = "\"{0}\" adlı özel görünümde en az bir çalışma sayfası görünür olmalıdır.";
        this["LE_InvalidOperationException_DataTableAppliedInTable"] = "Veri tablosu, tablonun bulunduğu bir alanda olamaz.";
        this["LE_InvalidOperationException_DataTableFormulaCannotBeApplied"] = "Bir veri tablosu formülü doğrudan hücrelere uygulanamaz.";
        this["LE_InvalidOperationException_DataTableInMergedCell"] = "Bir veri tablosunun iç hücreleri, birleştirilmiş bir hücre bölgesinin parçası olamaz.";
        this["LE_InvalidOperationException_DataTableRemoved"] = "Veri tablosu çalışma sayfasından kaldırıldıktan sonra satır ve sütun giriş hücreleri ayarlanamaz.";
        this["LE_InvalidOperationException_DeprecatedFillColorSetWithGradientFill"] = "Hücre üzerinde bir gradyan ayarlanırken dolgu deseni rengi ayarlanamaz.";
        this["LE_InvalidOperationException_EncryptedWorkbooksNotSupported"] = "Yüklenmekte olan çalışma kitabı şifrelenmiştir. Şifrelenmiş çalışma kitapları desteklenmez.";
        this["LE_InvalidOperationException_ExtensionDoesntMatchCurrentFormat"] = "Dosyanın kaydedileceği dosya adı, çalışma kitabının geçerli biçimiyle eşleşmeyen bir uzantıya sahip.";
        this["LE_InvalidOperationException_FixedValuesFilterMustAcceptAValue"] = "Hiçbir değere izin vermeyen bir FixedValuesFilter olamaz.";
        this["LE_InvalidOperationException_FormattedStringAlreadyOwned"] = "Biçimlendirilmiş dize zaten başka bir hücrenin veya yorumun değeridir. Önce klonlayın ve klonu yeni hücreye veya şekle uygulayın.";
        this["LE_InvalidOperationException_FormattedStringNotOwned"] = "Biçimlendirilmiş dize veya metin bir hücreye veya şekle uygulanmadığında yazı tipi özelliklerine erişilemez.";
        this["LE_InvalidOperationException_FormattedTextAlreadyOwned"] = "Biçimlendirilmiş dize zaten başka bir şeklin değeridir. Önce klonlayın ve klonu yeni hücreye veya şekle uygulayın.";
        this["LE_InvalidOperationException_FormulaAlreadyOwned"] = "Formül zaten başka bir hücreye uygulandı.";
        this["LE_InvalidOperationException_FormulaReferencesInvalidCells"] = "Formül, çalışma kitabının geçerli dosya biçiminde desteklenmeyen hücrelere başvuruyor.";
        this["LE_InvalidOperationException_GetBoundsBeforeAnchorsSet"] = "Bağlantı hücreleri ayarlanmadan önce şeklin sınırları yoktur.";
        this["LE_InvalidOperationException_HiddenWorksheetCannotBeSelected"] = "Gizli bir çalışma sayfası seçilemez.";
        this["LE_InvalidOperationException_HyperlinkSealed"] = "Köprü değiştirilemez.";
        this["LE_InvalidOperationException_ImageDisposed"] = "Bir Çalışma Sayfası Görüntüsünün bir Görüntüsü elden çıkarıldı veya geçersiz.";
        this["LE_InvalidOperationException_InputCellsBothNull"] = "Sütun girişi ve satır giriş hücrelerinin her ikisi de boş olamaz.";
        this["LE_InvalidOperationException_InputCellsInTable"] = "Giriş hücreleri, veri tablosu hücreleri içinde olamaz.";
        this["LE_InvalidOperationException_InputCellsSame"] = "Sütun girişi ve satır giriş hücreleri aynı hücre olamaz.";
        this["LE_InvalidOperationException_InvalidCharacterRange"] = "Yazı tipinin kapsadığı karakter aralığı, biçimlendirilmiş dizede artık mevcut değildir.";
        this["LE_InvalidOperationException_InvalidFormatOptionsInWholeTableArea"] = "Belirtilen FormatOptions biçim değeri WholeTable tablo alanında geçersiz.";
        this["LE_InvalidOperationException_InvalidFormatString"] = "Belirtilen biçim dizesi geçersiz.";
        this["LE_InvalidOperationException_InvalidFormatString_GetTextCall"] = "Hücrenin biçim dizesi geçersiz. FormatString ayarlandığında bununla ilgili bildirim almak için Workbook.ValidateFormatStrings öğesini True olarak ayarlayın.";
        this["LE_InvalidOperationException_InvalidForWorkbookFormat"] = "Formül, belirtilen format için geçerli değil.";
        this["LE_InvalidOperationException_InvalidHeaderCellColumnAreaFormatProperty"] = "Üst sınır değerleri HeaderCell tablo sütun alanı biçiminde ayarlanamaz.";
        this["LE_InvalidOperationException_InvalidHeaderRowAreaFormatProperty"] = "Üst sınır değerleri HeaderRow tablo alanı biçiminde ayarlanamaz.";
        this["LE_InvalidOperationException_InvalidTableStyleAreaFontProperty"] = "{0} yazı tipi değeri tablo stili alanlarında ayarlanamaz.";
        this["LE_InvalidOperationException_InvalidTableStyleAreaFormatOptions"] = "Belirtilen FormatOptions biçim değeri tablo stili alanlarında geçersiz.";
        this["LE_InvalidOperationException_InvalidTableStyleAreaFormatProperty"] = "{0} biçim değeri, tablo stili alanlarında ayarlanamaz.";
        this["LE_InvalidOperationException_InvalidTotalsCellColumnAreaFormatProperty"] = "Alt sınır değerleri TotalCell tablo sütun alanı biçiminde ayarlanamaz.";
        this["LE_InvalidOperationException_InvalidTotalsRowAreaFormatProperty"] = "TotalsRow tablo alanı biçiminde alt sınır değerleri ayarlanamaz.";
        this["LE_InvalidOperationException_InvalidWholeTableAreaFormatProperty"] = "WholeTable tablo alanı biçiminde yalnızca kenar kenarlığı değerleri ayarlanabilir.";
        this["LE_InvalidOperationException_LastColumnBeforeFirst"] = "Bölgedeki son sütun, ilk sütundan büyük veya ona eşit olmalıdır.";
        this["LE_InvalidOperationException_LastRowBeforeFirst"] = "Bölgedeki son satır, ilk satırdan daha büyük olmalıdır.";
        this["LE_InvalidOperationException_MaxCellFormats"] = "Excel dosyasındaki maksimum farklı hücre biçimi sayısı: {0}";
        this["LE_InvalidOperationException_MaxColors"] = "Excel çalışma kitabındaki maksimum renk sayısı: {0}";
        this["LE_InvalidOperationException_MaxColumns"] = "Geçerli biçime sahip bir excel çalışma sayfasındaki maksimum sütun sayısı: {0}";
        this["LE_InvalidOperationException_MaxFonts"] = "Bir çalışma kitabındaki yazı tipi sayısı en fazla {0} olabilir.";
        this["LE_InvalidOperationException_MaxFormattedStrings"] = "Bir çalışma kitabındaki benzersiz dizelerin sayısı en fazla {0} olabilir.";
        this["LE_InvalidOperationException_MaxRows"] = "Geçerli biçime sahip bir excel çalışma sayfasındaki maksimum satır sayısı: {0}";
        this["LE_InvalidOperationException_MergedCellCrossesDataTableLeftColumn"] = "Veri tablosu için belirtilen en soldaki hücre sütunu, bu hücrelerin alanının dışına uzanan birleştirilmiş bir hücre bölgesi içerir.";
        this["LE_InvalidOperationException_MergedCellCrossesDataTableTopLeftCell"] = "Veri tablosu için belirtilen hücrelerin sol üst hücresi, bu hücrelerin alanının dışına uzanan birleştirilmiş bir hücrenin parçasıdır.";
        this["LE_InvalidOperationException_MergedCellCrossesDataTableTopRow"] = "Veri tablosu için belirtilen üst hücre satırı, bu hücrelerin alanının dışına uzanan birleştirilmiş bir hücre bölgesi içerir.";
        this["LE_InvalidOperationException_MergedCellsAppliedInTable"] = "Bir tablo içindeki hücreler birleştirilemez.";
        this["LE_InvalidOperationException_NamedReferenceNameAlreadyExists"] = "\"{0}\" adı, çalışma kitabında aynı kapsamdaki bir tablo veya adlandırılmış başvuru tarafından kullanılıyor.";
        this["LE_InvalidOperationException_NoRegionHasBeenSpecified"] = "Bölge belirtilmedi.";
        this["LE_InvalidOperationException_NoWorksheetContextToSetShapeBounds"] = "Bu Add aşırı yüklemesi, şekiller koleksiyonu bir Çalışma Sayfasıyla ilişkilendirilmediğinde çağrılamaz. Bir Çalışma Sayfası örneğini alan Add aşırı yükünü çağırın.";
        this["LE_InvalidOperationException_OverlappingTable"] = "Belirtilen bölgede başka bir tablo var.";
        this["LE_InvalidOperationException_ReadOnlyFont"] = "Yazı tipi nesnesi salt okunurdur ve değiştirilemez.";
        this["LE_InvalidOperationException_ReadOnlyFormat"] = "Biçim nesnesi salt okunurdur ve değiştirilemez.";
        this["LE_InvalidOperationException_RelativeR1C1AddressNeedsOriginCell"] = "Göreli bir R1C1 adresini ayrıştırmak için bir başlangıç hücresi belirtilmelidir.";
        this["LE_InvalidOperationException_ResizedTableMustBeOnWorksheet"] = "Tablonun yeniden boyutlandırılması için bir çalışma sayfasında olması gerekir.";
        this["LE_InvalidOperationException_ResolvedFormatCannotBeModified"] = "Çözülen hücre biçimi salt okunurdur ve değiştirilemez.";
        this["LE_InvalidOperationException_ShapeCantChangeOrientation"] = "Bu şekil döndürülemez veya çevrilemez.";
        this["LE_InvalidOperationException_ShapeFillSolidIsImmutable"] = "ShapeFillSolid değişmezdir. Bunun yerine yeni bir ShapeFillSolid oluşturun.";
        this["LE_InvalidOperationException_ShapeInAnotherCollection"] = "Şekil başka bir çalışma sayfasında veya şekil grubunda zaten var.";
        this["LE_InvalidOperationException_ShapeOutlineSolidIsImmutable"] = "ShapeOutlineSolid değişmezdir. Bunun yerine yeni bir ShapeOutlineSolid oluşturun.";
        this["LE_InvalidOperationException_ShowFilterUIWhileHeaderRowHidden"] = "Başlık satırı gizlendiğinde filtre kullanıcı arayüzü gösterilemez.";
        this["LE_InvalidOperationException_SystemColorsAccessedFromWrongThread"] = "Arka plan iş parçacığından SystemColors'a erişilemez.";
        this["LE_InvalidOperationException_TableReferenceMustBeUsedFromInsideTable"] = "Formül, yalnızca bir tablonun içinden kullanılabilen yapılandırılmış bir tablo başvurusuna sahiptir.";
        this["LE_InvalidOperationException_TableReferenceToMissingTable"] = "Formül, var olmayan bir tabloya başvuruyor.";
        this["LE_InvalidOperationException_TableReferenceToMissingTableColumn"] = "Formül, var olmayan bir tablo sütununa referans içeriyor.";
        this["LE_InvalidOperationException_TopLeftAnchorFromOtherWorksheet"] = "Şekli bu koleksiyona eklemek, onu TopLeftCornerCell'den farklı bir çalışma sayfasına yerleştirir.";
        this["LE_InvalidOperationException_TotalsRowCannotBeShownInLastRow"] = "Tablo çalışma sayfasındaki son satırı işgal ettiğinde toplamlar satırı gösterilemez.";
        this["LE_InvalidOperationException_UnknownBIFFFormat"] = "Çalışma kitabı dosyası bilinmeyen bir BIFF biçimindeydi.";
        this["LE_InvalidOperationException_UnsupportedBIFFFormat"] = "Çalışma kitabı dosyası, desteklenmeyen bir biçim olan {0} olarak kaydedildi.";
        this["LE_InvalidOperationException_WorkbookDataViolatesFormatLimits"] = "Çalışma kitabı, belirtilen biçimin dayattığı sınırları aşacak veriler içeriyor.";
        this["LE_InvalidRegion"] = "Geçersiz bölge adresi.";
        this["LE_InvalidValueType"] = "{0}, ValueType özelliği için geçerli bir değer değil.";
        this["LE_LocationNotSingleRowOrColumn"] = "Hücrelerin tümü aynı sütun veya satırda olmadığı için konum başvurusu geçerli değil. Hepsi tek bir sütun veya satırda bulunan hücreleri seçin.";
        this["LE_LocationOrDataAreaInvalid"] = "Konum veya veri aralığı için referans geçerli değil.";
        this["LE_LocationWorksheetMismatch"] = "Konum bu çalışma sayfasından olmalıdır.";
        this["LE_NotSingleTargetFormula"] = "Yalnızca tek hedef formülleri destekleyebilir.";
        this["LE_NotSupportedException_CellType"] = "{0}, desteklenen bir hücre değeri türü değil.";
        this["LE_NotSupportedException_NoPackageFactory"] = "packageFactory boş olamaz. Excel2007 çalışma kitabı biçiminden yüklerken ve Infragistics2.Documents.Excel derlemesini kullanırken, verilerin paketlenmesini işlemek için bir IPackageFactory sağlamanız gerekir. DotNet Framework 3.0 veya üstünü kullanıyorsanız, bunun yerine Infragistics3.Documents.Excel derlemesini kullanın ve paketleme WindowsBase sınıfı tarafından işlenecektir.";
        this["LE_OpenPackagingNonConformanceException_ContainsDublinCoreRefinements"] = "IPackagePart temel özellikler ilişkisidir ve Dublin Core öğelerinde 'dcterms: created' ve 'dcterms: modifiye' dışında iyileştirmeler içerir.";
        this["LE_OpenPackagingNonConformanceException_ContainsXmlLanguageAttribute"] = "IPackagePart, temel özellikler ilişkisidir ve 'xml: lang' özelliğini içeren öğeleri içerir.";
        this["LE_OpenPackagingNonConformanceException_CorePropertiesRelationshipAlreadyProcessed"] = "IPackagePart, temel özellikler ilişkisidir, ancak ilişkili IP paketi için zaten işlenmiştir.";
        this["LE_OpenPackagingNonConformanceException_DuplicatePartName"] = "Aynı ada sahip bir IPackagePart zaten bu IP paketine aittir. Bir IP paketi aynı ada sahip parçalar içeremez. Yinelenen değerlerin kontrolünün büyük / küçük harfe duyarlı olmadığını unutmayın.";
        this["LE_OpenPackagingNonConformanceException_UsesMarkupCompatibilityNamespace"] = "IPackagePart, temel özellikler ilişkisidir ve Biçimlendirme Uyumluluğu Ad Alanını kullanır.";
        this["LE_OpenPackagingNonConformanceException_XmlContainsDocumentTypeDefinition"] = "Bir IPackagePart, bir DTD (Belge Türü Tanımı) bildirimi içeriyordu. Açık Paketleme Sözleşmesi kuralları, XML içeriğinin DTD bildirimleriyle kullanılmasını yasaklar.";
        this["LE_OpenPackagingNonConformanceException_XsiTypeAttributeInvalid"] = "IPackagePart temel özellikler ilişkisidir ve 'xsi: type' özniteliğini içeren veya 'xsi: type' özniteliği için gerekli olan ve bu özniteliği içermeyen öğeleri içeren öğeleri içerir.";
        this["LE_OpenXmlSerializerNotLoaded"] = "{0} biçimi, yüklenmemiş bir serileştirici gerektirir, JavaScript'te bu, infragistics.excel_serialization_openxml.js dosyasında bulunur";
        this["LE_PercentageValueOutOfRange"] = "Yüzde değeri {0}, 0 ile 100 arasında olmalıdır.";
        this["LE_PercentileValueOutOfRange"] = "Yüzdelik değer {0}, 0 ile 100 arasında olmalıdır.";
        this["LE_PercentRangeInvalid"] = "{0}, {1} değerinden küçük olmalıdır.";
        this["LE_RowsToRepeatAtTopAreOutsideAvailableRange"] = "Yazdırma seçeneklerinde, üstte yinelenen ve yeni biçimdeki kullanılabilir satır aralığının dışında kalan satırlar bulunur.";
        this["LE_Serialization_NoPrimaryCategoryAxis"] = "{0}' grafik türü, bir birincil kategori ekseni gerektirir. Grafiğin AxisCollection'ına bir birincil kategori ekseni ekleyin.";
        this["LE_Serialization_NoPrimaryValueAxis"] = "{0}' grafik türü, bir birincil değer ekseni gerektirir. Grafiğin AxisCollection'ına bir birincil değer ekseni ekleyin.";
        this["LE_Series_ChartType_ChartEx"] = "{0}, bir '{1}' grafiğindeki bir dizi ChartType için geçersiz.";
        this["LE_Series_ChartType_InvalidForComboChart"] = "'{0}' grafik türü, bir karma grafik içinde kullanım için geçerli değil.";
        this["LE_Series_ChartType_NonCombo"] = "Bu serinin grafik türü, üst grafiğin türüne ('{0}') göre belirlenir ve ayarlanamaz. Bunun yerine üst grafiğin ChartType özelliğini '{1}' olarak ayarlayın.";
        this["LE_Series_Explosion_OutOfRange"] = "Explosion özelliği, 0 ila 400 aralığındaki değerleri destekler.";
        this["LE_Series_InvalidAxisGroup"] = "AxisGroup özelliği '{0}' olarak ayarlanamaz çünkü aynı eksende '{1}' tipi bir dizi var ve bu tip '{2}' tipiyle aynı ekseni paylaşamaz.";
        this["LE_Series_InvalidSeriesTypeForComboChart"] = "Bir dizi '{0}' türü, birleşik grafikte kullanılamaz.";
        this["LE_Series_NoPrimaryAxis"] = "Birincil eksende en az bir seri çizilmelidir. AxisGroup özelliğini en az bir Seri için 'Birincil' olarak değiştirin.";
        this["LE_Series_OwningSeries_NotClusteredColumn"] = "OwningSeries özelliği yalnızca bir Pareto grafiğinde kümelenmiş bir sütun serisine ayarlanabilir.";
        this["LE_Series_OwningSeries_NotParetoLine"] = "OwningSeries özelliği yalnızca bir Pareto grafiğindeki bir çizgi serisi için ayarlanabilir.";
        this["LE_Series_OwningSeries_Same"] = "OwningSeries kendisine başvuramaz.";
        this["LE_Series_SeriesType_ChartEx"] = "SeriesType değeri '{0}', bir '{1}' grafiği için geçersiz.";
        this["LE_Series_SeriesType_NonCombo"] = "Type özelliği yalnızca birleşik grafikler için geçerlidir ve '{0}' türündeki bir grafik için ayarlanamaz.";
        this["LE_SetValue_Formula"] = "'{0}' değer türü yalnızca formüller için geçerlidir. Bunun yerine SetFormula yöntemini kullanın.";
        this["LE_SetValue_NonNumeric"] = "Değer parametresi, '{0}' değer türü için geçerli değil. Yalnızca bir değer türü alan aşırı yüklemeyi kullanın.";
        this["LE_SetValue_Numeric"] = "Değer parametresi, '{0}' değer türü için belirtilmelidir. Hem değeri hem de değer türünü alan aşırı yüklemeyi kullanın.";
        this["LE_WorksheetChart_ChartType_ChartEx_CannotTransition"] = "ChartType özelliği '{0}' iken '{1}' olarak değiştirilemez.";
        this["LE_WorksheetChart_ChartType_ComboChart_From"] = "Birleşik grafiğin ChartType özelliği '{0}' olarak değiştirilemez.";
        this["LE_WorksheetChart_ChartType_ComboChart_To"] = "{0} türündeki bir grafik \"Combo\" olarak değiştirilemez. AddChart yöntemi kullanılarak yeni bir birleşik grafik oluşturulabilir, ancak mevcut bir grafiği birleşik grafiğe dönüştürmek desteklenmez.";
        this["LE_WorksheetChart_ComboChart_NotEnoughSeries"] = "Birleşik grafik en az 2 seri gerektirir. Grafiğin SeriesCollection'a daha fazla öğe ekleyin.";
        this["LE_WorksheetChart_MissingRequiredAxis_StockCharts"] = "Bir '{0}' grafiği, bir birincil kategori ekseni, bir birincil değer ekseni, bir ikincil kategori ekseni ve bir ikincil değer ekseni gerektirir.";
        this["LE_WorksheetChart_NotEnoughSeries"] = "Bir '{0}' grafiği minimum {1} serisi gerektirir. Bu grafik türünü kullanmak için SeriesCollection'a daha fazla öğe eklemelisiniz.";
        this["LE_WorksheetChart_Save_Series"] = "Bir '{0}' grafiği en az bir dizi içermelidir. Çalışma kitabını kaydetmeyi denemeden önce grafiğe daha fazla dizi ekleyin.";
        this["LE_WorksheetChart_Save_Series_Pareto"] = "Bir 'Pareto' grafiği, bir 'ColumnClustered' serisi ve bir 'Pareto' serisi içermelidir. Çalışma kitabını kaydetmeye çalışmadan önce uygun seriyi grafiğe ekleyin.";
        this["LE_WorksheetChart_SetComboChartSourceData_InvalidChartTypes"] = "Belirtilen grafik türlerinden biri veya daha fazlası, birleşik grafik içinde kullanım için geçerli değil: {0}";
        this["LE_WorksheetChart_SetComboChartSourceData_NotAComboChart"] = "SetComboChartSourceData, geçerli grafik türü '{0}' olduğundan çağrılamıyor. ChartType'ı 'Combo' olarak değiştirin.";
        this["LE_WorksheetChart_SetComboChartSourceData_SeriesChartTypesNotSupported"] = "SeriesChartTypes parametresi bir '{0}' grafiği için boş olmalıdır.";
        this["LE_WorksheetChart_SetSourceData_NotEnoughSeries"] = "Birleşik grafikler minimum 2 seri gerektirir. 'DataRange' parametresini, en az 2 seri ile sonuçlanacak bir aralıkla değiştirin.";
        this["LE_WorksheetChart_SetSourceData_TooManyAxes"] = "Belirtilen grafik türleri kombinasyonu, izin verilen maksimum eksen sayısından fazlasını gerektirir.";
        this["LE_WorksheetChart_StockChartNotSupported"] = "'{0}' grafik türünün düzenlenmesi şu anda desteklenmiyor.";
        this["LE_WorksheetChart_UnknownChartNotSupported"] = "Bu grafik mevcut bir çalışma sayfasından yüklendi, ancak ChartType belirlenemedi. Bilinmeyen grafik türlerinin düzenlenmesi şu anda desteklenmemektedir.";
        this["LER_ArgumentOutOfRangeException_OutlineLevel"] = "Anahat seviyesi 0 ile 7 arasında olmalıdır.";
        this["LER_Exception_KeyNotFound"] = "Anahtar bulunamadı.";
        this["LER_Exception_MergedRegionsOverlap"] = "Birleştirilmiş hücre bölgeleri çakışamaz.";
        this["TableHeaderRowDescription"] = "üst bilgi satırı";
        this["TableInsertRowDescription"] = "satır ekle";
        this["TableTotalsRowDescription"] = "toplamlar satırı";
        this["Value_UCErrorCode_Div"] = "#DIV/0!";
        this["Value_UCErrorCode_Fail"] = "#FAIL";
        this["Value_UCErrorCode_NA"] = "#N/A";
        this["Value_UCErrorCode_Name"] = "#NAME?";
        this["Value_UCErrorCode_Null"] = "#NULL!";
        this["Value_UCErrorCode_Num"] = "#NUM!";
        this["Value_UCErrorCode_Ok"] = "#OK";
        this["Value_UCErrorCode_Reference"] = "#REF!";
        this["Value_UCErrorCode_Unknown"] = "#N/A";
        this["Value_UCErrorCode_Value"] = "#VALUE!";
        this["WorkbookColorInfo_Automatic_Description"] = "Otomatik";
        this["WorkbookColorInfo_Description"] = "Renk Bilgisi: {0}";
        this["WorkbookColorInfo_WithTint_Description"] = "Renk Bilgisi: {0}, Renk Tonu: {1}";
        this["WorksheetShapeSerialization_GroupName"] = "Grup";
        this["WorksheetShapeSerialization_ImageName"] = "Resim";
        this["WorksheetShapeSerialization_ShapeName"] = "Şekil";
    }
}
