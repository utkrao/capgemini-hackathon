/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_SphereCoords } from "./CT_SphereCoords";
import { ST_LightRigType_$type } from "./ST_LightRigType";
import { ST_LightRigDirection_$type } from "./ST_LightRigDirection";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
/**
 * @hidden
 */
export let CT_LightRig = /*@__PURE__*/ (() => {
    class CT_LightRig extends Base {
        constructor() {
            super();
            this.b = null;
            this.f = 0;
            this.d = 0;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        static h(a, b, c) {
            b = 0;
            c = 0;
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "rig":
                        b = XmlNamespaceDefinitionBase.b(ST_LightRigType_$type, d.d);
                        break;
                    case "dir":
                        c = XmlNamespaceDefinitionBase.b(ST_LightRigDirection_$type, d.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static i(a, b, c, d) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            f = "dir";
            e = XmlNamespaceDefinitionBase.p(ST_LightRigDirection_$type, c);
            a.ad.h(f, e);
            f = "rig";
            e = XmlNamespaceDefinitionBase.p(ST_LightRigType_$type, d);
            a.ad.h(f, e);
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 1370:
                    this.a = typeCast(CT_SphereCoords.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_LightRig.$t = /*@__PURE__*/ markType(CT_LightRig, 'CT_LightRig', Base.$, [ISupportSetProperty_$type]);
    return CT_LightRig;
})();
