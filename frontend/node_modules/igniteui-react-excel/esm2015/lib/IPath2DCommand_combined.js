/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Type, Base, markType } from "igniteui-react-core";
import { ISaveToXLSX_$type } from "./ISaveToXLSX";
import { ST_AdjCoordinate } from "./ST_AdjCoordinate";
import { ST_AdjAngle } from "./ST_AdjAngle";
import { DrawingMLMain } from "./DrawingMLMain";
/**
 * @hidden
 */
export let IPath2DCommand_$type = /*@__PURE__*/ new Type(null, 'IPath2DCommand');
/**
 * @hidden
 */
export let CT_Path2DArcTo = /*@__PURE__*/ (() => {
    class CT_Path2DArcTo extends Base {
        constructor() {
            super(...arguments);
            this.d = new ST_AdjCoordinate();
            this.c = new ST_AdjCoordinate();
            this.a = new ST_AdjAngle();
            this.b = new ST_AdjAngle();
        }
        _accept$2$i($tArg, $tResult, a, b = Type.getDefaultValue($tArg)) {
            return a._visitCT_Path2DArcTo$i(this, b);
        }
        get elementName() {
            return DrawingMLMain.bg;
        }
        saveX(a, b, c, d) {
            CT_Path2DArcTo.e(a, c, this);
        }
        static e(a, b, c) {
            let d = a.ad;
            d.p(b, null);
            let e = null;
            let f = null;
            f = "hR";
            e = ST_AdjCoordinate.f(c.c);
            a.ad.h(f, e);
            f = "stAng";
            e = ST_AdjAngle.f(c.a);
            a.ad.h(f, e);
            f = "swAng";
            e = ST_AdjAngle.f(c.b);
            a.ad.h(f, e);
            f = "wR";
            e = ST_AdjCoordinate.f(c.d);
            a.ad.h(f, e);
            d.k();
        }
    }
    CT_Path2DArcTo.$t = /*@__PURE__*/ markType(CT_Path2DArcTo, 'CT_Path2DArcTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DArcTo;
})();
/**
 * @hidden
 */
export let CT_Path2DClose = /*@__PURE__*/ (() => {
    class CT_Path2DClose extends Base {
        _accept$2$i($tArg, $tResult, a, b = Type.getDefaultValue($tArg)) {
            return a._visitCT_Path2DClose$i(this, b);
        }
        get elementName() {
            return DrawingMLMain.cj;
        }
        saveX(a, b, c, d) {
            b.o(c);
            b.k();
        }
    }
    CT_Path2DClose.$t = /*@__PURE__*/ markType(CT_Path2DClose, 'CT_Path2DClose', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DClose;
})();
/**
 * @hidden
 */
export let CT_Path2DCubicBezierTo = /*@__PURE__*/ (() => {
    class CT_Path2DCubicBezierTo extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
            this.c = null;
        }
        _accept$2$i($tArg, $tResult, a, b = Type.getDefaultValue($tArg)) {
            return a._visitCT_Path2DCubicBezierTo$i(this, b);
        }
        get elementName() {
            return DrawingMLMain.cw;
        }
        saveX(a, b, c, d) {
            b.o(c);
            if (this.a != null) {
                this.a.c(a, DrawingMLMain.ht);
            }
            if (this.b != null) {
                this.b.c(a, DrawingMLMain.ht);
            }
            if (this.c != null) {
                this.c.c(a, DrawingMLMain.ht);
            }
            b.k();
        }
    }
    CT_Path2DCubicBezierTo.$t = /*@__PURE__*/ markType(CT_Path2DCubicBezierTo, 'CT_Path2DCubicBezierTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DCubicBezierTo;
})();
/**
 * @hidden
 */
export let CT_Path2DLineTo = /*@__PURE__*/ (() => {
    class CT_Path2DLineTo extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
        _accept$2$i($tArg, $tResult, a, b = Type.getDefaultValue($tArg)) {
            return a._visitCT_Path2DLineTo$i(this, b);
        }
        get elementName() {
            return DrawingMLMain.f1;
        }
        saveX(a, b, c, d) {
            b.o(c);
            if (this.a != null) {
                this.a.c(a, DrawingMLMain.ht);
            }
            b.k();
        }
    }
    CT_Path2DLineTo.$t = /*@__PURE__*/ markType(CT_Path2DLineTo, 'CT_Path2DLineTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DLineTo;
})();
/**
 * @hidden
 */
export let CT_Path2DMoveTo = /*@__PURE__*/ (() => {
    class CT_Path2DMoveTo extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
        _accept$2$i($tArg, $tResult, a, b = Type.getDefaultValue($tArg)) {
            return a._visitCT_Path2DMoveTo$i(this, b);
        }
        get elementName() {
            return DrawingMLMain.gn;
        }
        saveX(a, b, c, d) {
            b.o(c);
            if (this.a != null) {
                this.a.c(a, DrawingMLMain.ht);
            }
            b.k();
        }
    }
    CT_Path2DMoveTo.$t = /*@__PURE__*/ markType(CT_Path2DMoveTo, 'CT_Path2DMoveTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DMoveTo;
})();
/**
 * @hidden
 */
export let CT_Path2DQuadBezierTo = /*@__PURE__*/ (() => {
    class CT_Path2DQuadBezierTo extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
            this.b = null;
        }
        _accept$2$i($tArg, $tResult, a, b = Type.getDefaultValue($tArg)) {
            return a._visitCT_Path2DQuadBezierTo$i(this, b);
        }
        get elementName() {
            return DrawingMLMain.hu;
        }
        saveX(a, b, c, d) {
            b.o(c);
            if (this.a != null) {
                this.a.c(a, DrawingMLMain.ht);
            }
            if (this.b != null) {
                this.b.c(a, DrawingMLMain.ht);
            }
            b.k();
        }
    }
    CT_Path2DQuadBezierTo.$t = /*@__PURE__*/ markType(CT_Path2DQuadBezierTo, 'CT_Path2DQuadBezierTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DQuadBezierTo;
})();
/**
 * @hidden
 */
export let IPath2DCommandVisitor$2_$type = /*@__PURE__*/ new Type(null, 'IPath2DCommandVisitor$2');
