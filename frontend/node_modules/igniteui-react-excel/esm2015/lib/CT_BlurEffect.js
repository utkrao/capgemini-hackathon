/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { parseInt64_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_BlurEffect = /*@__PURE__*/ (() => {
    class CT_BlurEffect extends Base {
        constructor() {
            super();
            this.f = toNullable(Number_$type, null);
            this.d = toNullable(Boolean_$type, null);
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        static h(a, b, c) {
            b = toNullable(Number_$type, null);
            c = toNullable(Boolean_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "rad":
                        b = toNullable(Number_$type, parseInt64_1(d.d, CultureInfo.invariantCulture));
                        break;
                    case "grow":
                        c = toNullable(Boolean_$type, ST_OnOff.e(d.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static i(a, b, c = toNullable(Boolean_$type, null), d = toNullable(Number_$type, null)) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "grow";
                e = ST_OnOff.g(c.value);
                a.ad.h(f, e);
            }
            if (d.hasValue) {
                f = "rad";
                e = d.value.toString();
                a.ad.h(f, e);
            }
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_BlurEffect.$t = /*@__PURE__*/ markType(CT_BlurEffect, 'CT_BlurEffect');
    return CT_BlurEffect;
})();
