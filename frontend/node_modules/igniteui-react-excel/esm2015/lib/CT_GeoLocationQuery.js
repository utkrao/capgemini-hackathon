/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_EntityType_$type } from "./ST_EntityType";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
/**
 * @hidden
 */
export let CT_GeoLocationQuery = /*@__PURE__*/ (() => {
    class CT_GeoLocationQuery extends Base {
        constructor() {
            super(...arguments);
            this.h = null;
            this.d = null;
            this.f = null;
            this.j = null;
            this.b = 0;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        static l(a, b, c, d, e, f) {
            b = null;
            c = null;
            d = null;
            e = null;
            f = 0;
            for (let g of fromEnum(a.ab.u)) {
                switch (g.a.e(a.d)) {
                    case "countryRegion":
                        b = g.d;
                        break;
                    case "adminDistrict1":
                        c = g.d;
                        break;
                    case "adminDistrict2":
                        d = g.d;
                        break;
                    case "postalCode":
                        e = g.d;
                        break;
                    case "entityType":
                        f = XmlNamespaceDefinitionBase.b(ST_EntityType_$type, g.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        static m(a, b, c, d, e, f, g) {
            a.ad.p(b, "cx");
            let h = null;
            let i = null;
            if (c != null) {
                i = "adminDistrict1";
                h = c;
                a.ad.h(i, h);
            }
            if (d != null) {
                i = "adminDistrict2";
                h = d;
                a.ad.h(i, h);
            }
            if (e != null) {
                i = "countryRegion";
                h = e;
                a.ad.h(i, h);
            }
            if (f != null) {
                i = "postalCode";
                h = f;
                a.ad.h(i, h);
            }
            i = "entityType";
            h = XmlNamespaceDefinitionBase.p(ST_EntityType_$type, g);
            a.ad.h(i, h);
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_GeoLocationQuery.$t = /*@__PURE__*/ markType(CT_GeoLocationQuery, 'CT_GeoLocationQuery');
    return CT_GeoLocationQuery;
})();
