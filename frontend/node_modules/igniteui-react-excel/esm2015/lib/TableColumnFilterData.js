/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { RelativeIndex } from "./RelativeIndex";
/**
 * @hidden
 */
export let TableColumnFilterData = /*@__PURE__*/ (() => {
    class TableColumnFilterData extends Base {
        constructor(a, ..._rest) {
            super();
            this.f = null;
            this.b = null;
            this.a = null;
            this.c = null;
            this.d = false;
            this.e = false;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = [c, d.filter];
                        {
                            let g = e[0];
                            let h = e[1];
                            this.b = new RelativeIndex(g);
                            this.a = h;
                            if (this.a == null) {
                                this.e = false;
                                return;
                            }
                            let i;
                            let j;
                            this.e = ((() => { let k = this.a._g(i, j); i = k.p0; j = k.p1; return k.ret; })());
                            this.d = i;
                            this.f = j;
                        }
                        this.c = d;
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        this.b = new RelativeIndex(c);
                        this.a = d;
                        if (this.a == null) {
                            this.e = false;
                            return;
                        }
                        let e;
                        let f;
                        this.e = ((() => { let g = this.a._g(e, f); e = g.p0; f = g.p1; return g.ret; })());
                        this.d = e;
                        this.f = f;
                    }
                    break;
            }
        }
    }
    TableColumnFilterData.$t = /*@__PURE__*/ markType(TableColumnFilterData, 'TableColumnFilterData');
    return TableColumnFilterData;
})();
