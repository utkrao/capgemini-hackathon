/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, markType } from "igniteui-react-core";
import { IWorkbookOwner_$type } from "./IWorkbookOwner";
import { WeakReference } from "igniteui-react-core";
import { ExcelUtils } from "./ExcelUtils";
/**
 * @hidden
 */
export let WeakWorkbookOwner = /*@__PURE__*/ (() => {
    class WeakWorkbookOwner extends Base {
        constructor(a) {
            super();
            this.b = null;
            this.b = new WeakReference(a);
        }
        get a() {
            return typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
        }
        get isUndoEnabled() {
            let a = typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
            return a != null && a.isUndoEnabled;
        }
        onCellValueChange(a, b) {
            let c = typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
            if (c != null) {
                c.onCellValueChange(a, b);
            }
        }
        _onChange$2$i($tContext, $tValue, a, b, c, d, e) {
            let f = ExcelUtils.dy(this.b);
            if (f != null) {
                f._onChange$2$i($tContext, $tValue, a, b, c, d, e);
            }
        }
        onConditionalFormatChange(a) {
            let b = typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
            if (b != null) {
                b.onConditionalFormatChange(a);
            }
        }
        onCustomViewApplied(a) {
            let b = typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
            if (b != null) {
                b.onCustomViewApplied(a);
            }
        }
        onSheetRemoving(a) {
            let b = typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
            if (b != null) {
                b.onSheetRemoving(a);
            }
        }
        onTransactionalChangeBegin(a, b) {
            let c = typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
            return c != null ? c.onTransactionalChangeBegin(a, b) : null;
        }
        onTransactionalChangeEnd(a) {
            let b = typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
            if (b != null) {
                b.onTransactionalChangeEnd(a);
            }
        }
        onTransactionalChangeRollback(a) {
            let b = typeCast(IWorkbookOwner_$type, ExcelUtils.dy(this.b));
            if (b != null) {
                b.onTransactionalChangeRollback(a);
            }
        }
    }
    WeakWorkbookOwner.$t = /*@__PURE__*/ markType(WeakWorkbookOwner, 'WeakWorkbookOwner', Base.$, [IWorkbookOwner_$type]);
    return WeakWorkbookOwner;
})();
