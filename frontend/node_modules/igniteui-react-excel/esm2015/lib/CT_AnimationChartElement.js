/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_ChartBuildStep_$type } from "./ST_ChartBuildStep";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_AnimationChartElement = /*@__PURE__*/ (() => {
    class CT_AnimationChartElement extends Base {
        constructor() {
            super();
            this.h = toNullable(Number_$type, null);
            this.f = toNullable(Number_$type, null);
            this.b = 0;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        static j(a, b, c, d) {
            b = toNullable(Number_$type, null);
            c = toNullable(Number_$type, null);
            d = 0;
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "seriesIdx":
                        b = toNullable(Number_$type, parseInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "categoryIdx":
                        c = toNullable(Number_$type, parseInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "bldStep":
                        d = XmlNamespaceDefinitionBase.b(ST_ChartBuildStep_$type, e.d);
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static k(a, b, c, d, e) {
            a.ad.p(b, "a");
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "categoryIdx";
                f = c.value.toString();
                a.ad.h(g, f);
            }
            if (d.hasValue) {
                g = "seriesIdx";
                f = d.value.toString();
                a.ad.h(g, f);
            }
            g = "bldStep";
            f = XmlNamespaceDefinitionBase.p(ST_ChartBuildStep_$type, e);
            a.ad.h(g, f);
            ;
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_AnimationChartElement.$t = /*@__PURE__*/ markType(CT_AnimationChartElement, 'CT_AnimationChartElement');
    return CT_AnimationChartElement;
})();
