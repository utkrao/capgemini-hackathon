/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { List$1 } from "igniteui-react-core";
import { CT_GeoLocationQueryResult } from "./CT_GeoLocationQueryResult";
import { CT_GeoDataEntityQueryResult } from "./CT_GeoDataEntityQueryResult";
import { CT_GeoDataPointToEntityQueryResult } from "./CT_GeoDataPointToEntityQueryResult";
import { CT_GeoChildEntitiesQueryResult } from "./CT_GeoChildEntitiesQueryResult";
/**
 * @hidden
 */
export let CT_Clear = /*@__PURE__*/ (() => {
    class CT_Clear extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.c = null;
            this.a = null;
            this.a = new List$1(CT_GeoChildEntitiesQueryResult.$, 0);
            this.b = new List$1(CT_GeoDataEntityQueryResult.$, 0);
            this.c = new List$1(CT_GeoDataPointToEntityQueryResult.$, 0);
            this.d = new List$1(CT_GeoLocationQueryResult.$, 0);
        }
        setProperty(a, b) {
            switch (a) {
                case 718:
                    this.d.add(typeCast(CT_GeoLocationQueryResult.$, b));
                    break;
                case 709:
                    this.b.add(typeCast(CT_GeoDataEntityQueryResult.$, b));
                    break;
                case 713:
                    this.c.add(typeCast(CT_GeoDataPointToEntityQueryResult.$, b));
                    break;
                case 704:
                    this.a.add(typeCast(CT_GeoChildEntitiesQueryResult.$, b));
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Clear.$t = /*@__PURE__*/ markType(CT_Clear, 'CT_Clear', Base.$, [ISupportSetProperty_$type]);
    return CT_Clear;
})();
