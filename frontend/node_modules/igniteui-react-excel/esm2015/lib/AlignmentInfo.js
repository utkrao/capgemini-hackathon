/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Number_$type, callStaticConstructors, typeCast, markType } from "igniteui-react-core";
import { Convert } from "igniteui-react-core";
import { XlsxUtilities } from "./XlsxUtilities";
import { nullableEquals, nullableNotEquals } from "igniteui-react-core";
import { intSToU } from "igniteui-react-core";
/**
 * @hidden
 */
export let AlignmentInfo = /*@__PURE__*/ (() => {
    class AlignmentInfo extends Base {
        constructor(a, ..._rest) {
            super();
            this.b = 0;
            this.aa = toNullable(Number_$type, null);
            this.p = false;
            this.ac = toNullable(Number_$type, null);
            this.ae = toNullable(Number_$type, null);
            this.r = false;
            this.ag = toNullable(Number_$type, null);
            this.h = 2;
            this.t = false;
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        let h = _rest[5];
                        let i = _rest[6];
                        let j = _rest[7];
                        let k = _rest[8];
                        this.b = c;
                        this.aa = d;
                        this.p = e;
                        this.ac = f;
                        this.ae = g;
                        this.r = (nullableEquals(i, true));
                        this.ag = h;
                        this.h = j;
                        this.t = (nullableEquals(k, true));
                    }
                    break;
            }
        }
        static staticInit() {
            AlignmentInfo.f = new AlignmentInfo(0);
        }
        equals(a) {
            return AlignmentInfo.n(this, typeCast(AlignmentInfo.$, a));
        }
        getHashCode() {
            let a = 0;
            a ^= this.b;
            a ^= this.aa.value << 1;
            a ^= Convert.toInt321(this.p) << 2;
            a ^= this.ac.value << 3;
            a ^= this.ae.value << 4;
            a ^= Convert.toInt321(this.r) << 5;
            a ^= this.ag.value << 6;
            a ^= this.h << 7;
            a ^= Convert.toInt321(this.t) << 8;
            return a;
        }
        get c() {
            return this.b;
        }
        set c(a) {
            this.b = a;
        }
        get ab() {
            return this.aa;
        }
        set ab(a) {
            this.aa = a;
        }
        get q() {
            return this.p;
        }
        set q(a) {
            this.p = a;
        }
        get ad() {
            return this.ac;
        }
        set ad(a) {
            this.ac = a;
        }
        get af() {
            return this.ae;
        }
        set af(a) {
            this.ae = a;
        }
        get s() {
            return this.r;
        }
        set s(a) {
            this.r = a;
        }
        get ah() {
            return this.ag;
        }
        set ah(a) {
            this.ag = a;
        }
        get i() {
            return this.h;
        }
        set i(a) {
            this.h = a;
        }
        get u() {
            return this.t;
        }
        set u(a) {
            this.t = a;
        }
        get o() {
            return (this.b == 0 && nullableEquals(this.aa, null) && this.p == false && nullableEquals(this.ac, null) && nullableEquals(this.ae, null) && this.r == false && nullableEquals(this.ag, null) && this.h == 2 && this.t == false);
        }
        ai(a, b = true) {
            a._b6 = this.q;
            if (b || a._a4 != this.c) {
                a.alignment = this.c;
            }
            let c = this.ah.getValueOrDefault1(0);
            if (b || a._cw != c) {
                a.rotation = c;
            }
            let d = XlsxUtilities.a8(this.u);
            if (b || nullableNotEquals(a._c7, d)) {
                a._wrapText$i = d;
            }
            if (b || a._a9 != this.i) {
                a.verticalAlignment = this.i;
            }
            let e = this.ab.getValueOrDefault1(0);
            if (b || a._ct != e) {
                a.indent = e;
            }
            let f = XlsxUtilities.a8(this.s);
            if (b || nullableNotEquals(a._c6, f)) {
                a._shrinkToFit$i = f;
            }
        }
        static d(a) {
            return AlignmentInfo.e(a, false);
        }
        static e(a, b) {
            let c = a._b6;
            let d = a._a4;
            let e = toNullable(Number_$type, intSToU(a._ct));
            let f = toNullable(Number_$type, intSToU(a._cw));
            let g = a._c6;
            let h = a._a9;
            let i = a._c7;
            if (b == false && c == false && d == 0 && nullableEquals(e, 0) && nullableEquals(f, 0) && nullableEquals(g, false) && nullableEquals(i, false) && h == 2) {
                return null;
            }
            return new AlignmentInfo(1, d, e, c, toNullable(Number_$type, 0), toNullable(Number_$type, 0), f, g, h, i);
        }
        static n(a, b) {
            if (Base.referenceEquals(a, null) && Base.referenceEquals(b, null)) {
                return true;
            }
            if (Base.referenceEquals(a, null) || Base.referenceEquals(b, null)) {
                return false;
            }
            return (a.b == b.b && nullableEquals(a.aa, b.aa) && a.p == b.p && nullableEquals(a.ac, b.ac) && nullableEquals(a.ae, b.ae) && a.r == b.r && nullableEquals(a.ag, b.ag) && a.h == b.h && a.t == b.t);
        }
    }
    AlignmentInfo.$t = /*@__PURE__*/ markType(AlignmentInfo, 'AlignmentInfo');
    AlignmentInfo.f = null;
    return AlignmentInfo;
})();
(function (v) { callStaticConstructors(); })(true);
