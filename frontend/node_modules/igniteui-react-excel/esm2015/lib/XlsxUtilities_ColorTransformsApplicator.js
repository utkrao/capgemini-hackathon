/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { IEG_ColorTransformVisitor$2_$type } from "./IEG_ColorTransformVisitor$2";
import { Color } from "igniteui-react-core";
import { ST_Percentage } from "./ST_Percentage";
import { ST_FixedPercentage } from "./ST_FixedPercentage";
import { Convert } from "igniteui-react-core";
import { ST_PositivePercentage } from "./ST_PositivePercentage";
import { ST_PositiveFixedPercentage } from "./ST_PositiveFixedPercentage";
import { ExcelUtils } from "./ExcelUtils";
import { MathUtilities } from "./MathUtilities";
import { truncate } from "igniteui-react-core";
/**
 * @hidden
 */
export let XlsxUtilities_ColorTransformsApplicator = /*@__PURE__*/ (() => {
    class XlsxUtilities_ColorTransformsApplicator extends Base {
        constructor() {
            super();
        }
        _visitColorTransform_Alpha$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 0, () => (ST_PositiveFixedPercentage.m(a.a) / 100) * 255);
        }
        _visitColorTransform_AlphaMod$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 0, () => Convert.toInt32((ST_PositivePercentage.m(a.a) / 100) * b.l));
        }
        _visitColorTransform_AlphaOff$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 0, () => b.l + Convert.toInt32((ST_FixedPercentage.m(a.a) / 100) * 255));
        }
        _visitColorTransform_Blue$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 3, () => (ST_Percentage.l(a.a) / 100) * 255);
        }
        _visitColorTransform_BlueMod$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 3, () => Convert.toInt32((ST_Percentage.l(a.a) / 100) * b.m));
        }
        _visitColorTransform_BlueOff$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 3, () => b.m + Convert.toInt32((ST_Percentage.l(a.a) / 100) * 255));
        }
        _visitColorTransform_Comp$i(a, b) {
            return Color.u(b.l, (255 - b.o), (255 - b.n), (255 - b.m));
        }
        _visitColorTransform_Gray$i(a, b) {
            let c = truncate(((b.o * 0.3) + (b.n * 0.59) + (b.m * 0.11)));
            return Color.u(255, c, c, c);
        }
        _visitColorTransform_Green$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 2, () => (ST_Percentage.l(a.a) / 100) * 255);
        }
        _visitColorTransform_GreenMod$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 2, () => Convert.toInt32((ST_Percentage.l(a.a) / 100) * b.n));
        }
        _visitColorTransform_GreenOff$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 2, () => b.n + Convert.toInt32((ST_Percentage.l(a.a) / 100) * 255));
        }
        _visitColorTransform_Hue$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 0, (c) => 240 * (a.a.q() / 360));
        }
        _visitColorTransform_HueMod$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 0, (c) => c * (ST_PositivePercentage.m(a.a) / 100));
        }
        _visitColorTransform_HueOff$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 0, (c) => c + 240 * (a.a.n() / 360));
        }
        _visitColorTransform_Inv$i(a, b) {
            return Color.u(b.l, (255 - b.o), (255 - b.n), (255 - b.m));
        }
        _visitColorTransform_Lum$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 2, (c) => 240 * (ST_Percentage.l(a.a) / 100));
        }
        _visitColorTransform_LumMod$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 2, (c) => c * (ST_Percentage.l(a.a) / 100));
        }
        _visitColorTransform_LumOff$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 2, (c) => c + (240 * (ST_Percentage.l(a.a) / 100)));
        }
        _visitColorTransform_Red$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 1, () => (ST_Percentage.l(a.a) / 100) * 255);
        }
        _visitColorTransform_RedMod$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 1, () => Convert.toInt32((ST_Percentage.l(a.a) / 100) * b.o));
        }
        _visitColorTransform_RedOff$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.c(b, 1, () => b.o + Convert.toInt32((ST_Percentage.l(a.a) / 100) * 255));
        }
        _visitColorTransform_Sat$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 1, (c) => 240 * (ST_Percentage.l(a.a) / 100));
        }
        _visitColorTransform_SatMod$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 1, (c) => c * (ST_Percentage.l(a.a) / 100));
        }
        _visitColorTransform_SatOff$i(a, b) {
            return XlsxUtilities_ColorTransformsApplicator.b(b, 1, (c) => c + (240 * (ST_Percentage.l(a.a) / 100)));
        }
        _visitColorTransform_Shade$i(a, b) {
            try {
                b = ExcelUtils.gv(b, ST_PositiveFixedPercentage.m(a.a) / 100);
            }
            catch (c) {
            }
            return b;
        }
        _visitColorTransform_Tint$i(a, b) {
            try {
                b = ExcelUtils.gw(b, 1 - (ST_PositiveFixedPercentage.m(a.a) / 100));
            }
            catch (c) {
            }
            return b;
        }
        static c(a, b, c) {
            try {
                let d = truncate(Math.max(0, Math.min(MathUtilities.f(c()), 255)));
                switch (b) {
                    default:
                    case 0: return Color.u(d, a.o, a.n, a.m);
                    case 1: return Color.u(a.l, d, a.n, a.m);
                    case 2: return Color.u(a.l, a.o, d, a.m);
                    case 3: return Color.u(a.l, a.o, a.n, d);
                }
            }
            catch (e) {
                return a;
            }
        }
        static b(a, b, c) {
            try {
                let d, e, f;
                let g = ExcelUtils.fa(a, d, f, e);
                d = g.p1;
                f = g.p2;
                e = g.p3;
                let h;
                switch (b) {
                    default:
                    case 0:
                        h = d;
                        break;
                    case 1:
                        h = e;
                        break;
                    case 2:
                        h = f;
                        break;
                }
                let i = truncate(Math.max(0, Math.min(MathUtilities.f(c(h)), 240)));
                switch (b) {
                    default:
                    case 0: return ExcelUtils.g0(i, f, e);
                    case 2: return ExcelUtils.g0(d, i, e);
                    case 1: return ExcelUtils.g0(d, f, i);
                }
            }
            catch (j) {
                return a;
            }
        }
    }
    XlsxUtilities_ColorTransformsApplicator.$t = /*@__PURE__*/ markType(XlsxUtilities_ColorTransformsApplicator, 'XlsxUtilities_ColorTransformsApplicator', Base.$, [/*@__PURE__*/ IEG_ColorTransformVisitor$2_$type.specialize(Color.$, Color.$)]);
    XlsxUtilities_ColorTransformsApplicator.a = /*@__PURE__*/ new XlsxUtilities_ColorTransformsApplicator();
    return XlsxUtilities_ColorTransformsApplicator;
})();
