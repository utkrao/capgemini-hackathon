/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_ObjectType_$type } from "./ST_ObjectType";
import { ST_Checked_$type } from "./ST_Checked";
import { ST_DropStyle_$type } from "./ST_DropStyle";
import { ST_SelType_$type } from "./ST_SelType";
import { ST_TextHAlign_$type } from "./ST_TextHAlign";
import { ST_TextVAlign_$type } from "./ST_TextVAlign";
import { ST_EditValidation_$type } from "./ST_EditValidation";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { CultureInfo } from "igniteui-react-core";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_FormControlPr = /*@__PURE__*/ (() => {
    class CT_FormControlPr extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = null;
            this.ay = toNullable(ST_ObjectType_$type, null);
            this.s = toNullable(ST_Checked_$type, null);
            this.u = toNullable(Boolean_$type, null);
            this.w = toNullable(Number_$type, null);
            this.y = toNullable(ST_DropStyle_$type, null);
            this.aa = toNullable(Number_$type, null);
            this.ae = toNullable(Boolean_$type, null);
            this.bi = null;
            this.bk = null;
            this.bm = null;
            this.bo = null;
            this.ag = toNullable(Boolean_$type, null);
            this.ai = toNullable(Number_$type, null);
            this.ak = toNullable(Boolean_$type, null);
            this.am = toNullable(Boolean_$type, null);
            this.ao = toNullable(Number_$type, null);
            this.aq = toNullable(Number_$type, null);
            this.bq = null;
            this.aw = toNullable(Boolean_$type, null);
            this.av = toNullable(Boolean_$type, null);
            this.a0 = toNullable(Number_$type, null);
            this.a4 = toNullable(Number_$type, null);
            this.a6 = toNullable(ST_SelType_$type, null);
            this.a8 = toNullable(ST_TextHAlign_$type, null);
            this.ba = toNullable(ST_TextVAlign_$type, null);
            this.bc = toNullable(Number_$type, null);
            this.bg = toNullable(Number_$type, null);
            this.ac = toNullable(ST_EditValidation_$type, null);
            this.as = toNullable(Boolean_$type, null);
            this.be = toNullable(Boolean_$type, null);
            this.a2 = toNullable(Boolean_$type, null);
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get ax() {
            return this.ay;
        }
        set ax(a) {
            this.ay = a;
        }
        get r() {
            return this.s;
        }
        set r(a) {
            this.s = a;
        }
        get t() {
            return this.u;
        }
        set t(a) {
            this.u = a;
        }
        get v() {
            return this.w;
        }
        set v(a) {
            this.w = a;
        }
        get x() {
            return this.y;
        }
        set x(a) {
            this.y = a;
        }
        get z() {
            return this.aa;
        }
        set z(a) {
            this.aa = a;
        }
        get ad() {
            return this.ae;
        }
        set ad(a) {
            this.ae = a;
        }
        get bh() {
            return this.bi;
        }
        set bh(a) {
            this.bi = a;
        }
        get bj() {
            return this.bk;
        }
        set bj(a) {
            this.bk = a;
        }
        get bl() {
            return this.bm;
        }
        set bl(a) {
            this.bm = a;
        }
        get bn() {
            return this.bo;
        }
        set bn(a) {
            this.bo = a;
        }
        get af() {
            return this.ag;
        }
        set af(a) {
            this.ag = a;
        }
        get ah() {
            return this.ai;
        }
        set ah(a) {
            this.ai = a;
        }
        get aj() {
            return this.ak;
        }
        set aj(a) {
            this.ak = a;
        }
        get al() {
            return this.am;
        }
        set al(a) {
            this.am = a;
        }
        get an() {
            return this.ao;
        }
        set an(a) {
            this.ao = a;
        }
        get ap() {
            return this.aq;
        }
        set ap(a) {
            this.aq = a;
        }
        get bp() {
            return this.bq;
        }
        set bp(a) {
            this.bq = a;
        }
        get at() {
            return this.aw;
        }
        set at(a) {
            this.aw = a;
        }
        get au() {
            return this.av;
        }
        set au(a) {
            this.av = a;
        }
        get az() {
            return this.a0;
        }
        set az(a) {
            this.a0 = a;
        }
        get a3() {
            return this.a4;
        }
        set a3(a) {
            this.a4 = a;
        }
        get a5() {
            return this.a6;
        }
        set a5(a) {
            this.a6 = a;
        }
        get a7() {
            return this.a8;
        }
        set a7(a) {
            this.a8 = a;
        }
        get a9() {
            return this.ba;
        }
        set a9(a) {
            this.ba = a;
        }
        get bb() {
            return this.bc;
        }
        set bb(a) {
            this.bc = a;
        }
        get bf() {
            return this.bg;
        }
        set bf(a) {
            this.bg = a;
        }
        get ab() {
            return this.ac;
        }
        set ab(a) {
            this.ac = a;
        }
        get ar() {
            return this.as;
        }
        set ar(a) {
            this.as = a;
        }
        get bd() {
            return this.be;
        }
        set bd(a) {
            this.be = a;
        }
        get a1() {
            return this.a2;
        }
        set a1(a) {
            this.a2 = a;
        }
        static bv(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af) {
            b = toNullable(ST_ObjectType_$type, null);
            c = toNullable(ST_Checked_$type, null);
            d = toNullable(Boolean_$type, null);
            e = toNullable(Number_$type, null);
            f = toNullable(ST_DropStyle_$type, null);
            g = toNullable(Number_$type, null);
            h = toNullable(Boolean_$type, null);
            i = null;
            j = null;
            k = null;
            l = null;
            m = toNullable(Boolean_$type, null);
            n = toNullable(Number_$type, null);
            o = toNullable(Boolean_$type, null);
            p = toNullable(Boolean_$type, null);
            q = toNullable(Number_$type, null);
            r = toNullable(Number_$type, null);
            s = null;
            t = toNullable(Boolean_$type, null);
            u = toNullable(Boolean_$type, null);
            v = toNullable(Number_$type, null);
            w = toNullable(Number_$type, null);
            x = toNullable(ST_SelType_$type, null);
            y = toNullable(ST_TextHAlign_$type, null);
            z = toNullable(ST_TextVAlign_$type, null);
            aa = toNullable(Number_$type, null);
            ab = toNullable(Number_$type, null);
            ac = toNullable(ST_EditValidation_$type, null);
            ad = toNullable(Boolean_$type, null);
            ae = toNullable(Boolean_$type, null);
            af = toNullable(Boolean_$type, null);
            for (let ag of fromEnum(a.ab.u)) {
                switch (ag.a.e(a.d)) {
                    case "objectType":
                        b = toNullable(ST_ObjectType_$type, XmlNamespaceDefinitionBase.b(ST_ObjectType_$type, ag.d));
                        break;
                    case "checked":
                        c = toNullable(ST_Checked_$type, XmlNamespaceDefinitionBase.b(ST_Checked_$type, ag.d));
                        break;
                    case "colored":
                        d = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "dropLines":
                        e = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "dropStyle":
                        f = toNullable(ST_DropStyle_$type, XmlNamespaceDefinitionBase.b(ST_DropStyle_$type, ag.d));
                        break;
                    case "dx":
                        g = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "firstButton":
                        h = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "fmlaGroup":
                        i = ag.d;
                        break;
                    case "fmlaLink":
                        j = ag.d;
                        break;
                    case "fmlaRange":
                        k = ag.d;
                        break;
                    case "fmlaTxbx":
                        l = ag.d;
                        break;
                    case "horiz":
                        m = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "inc":
                        n = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "justLastX":
                        o = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "lockText":
                        p = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "max":
                        q = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "min":
                        r = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "multiSel":
                        s = ag.d;
                        break;
                    case "noThreeD":
                        t = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "noThreeD2":
                        u = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "page":
                        v = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "sel":
                        w = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "seltype":
                        x = toNullable(ST_SelType_$type, XmlNamespaceDefinitionBase.b(ST_SelType_$type, ag.d));
                        break;
                    case "textHAlign":
                        y = toNullable(ST_TextHAlign_$type, XmlNamespaceDefinitionBase.b(ST_TextHAlign_$type, ag.d));
                        break;
                    case "textVAlign":
                        z = toNullable(ST_TextVAlign_$type, XmlNamespaceDefinitionBase.b(ST_TextVAlign_$type, ag.d));
                        break;
                    case "val":
                        aa = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "widthMin":
                        ab = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "editVal":
                        ac = toNullable(ST_EditValidation_$type, XmlNamespaceDefinitionBase.b(ST_EditValidation_$type, ag.d));
                        break;
                    case "multiLine":
                        ad = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "verticalBar":
                        ae = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "passwordEdit":
                        af = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k,
                p11: l,
                p12: m,
                p13: n,
                p14: o,
                p15: p,
                p16: q,
                p17: r,
                p18: s,
                p19: t,
                p20: u,
                p21: v,
                p22: w,
                p23: x,
                p24: y,
                p25: z,
                p26: aa,
                p27: ab,
                p28: ac,
                p29: ad,
                p30: ae,
                p31: af
            };
        }
        static bw(a, b, c = toNullable(ST_Checked_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(Number_$type, null), f = toNullable(ST_DropStyle_$type, null), g = toNullable(Number_$type, null), h = toNullable(ST_EditValidation_$type, null), i = toNullable(Boolean_$type, null), j = null, k = null, l = null, m = null, n = toNullable(Boolean_$type, null), o = toNullable(Number_$type, null), p = toNullable(Boolean_$type, null), q = toNullable(Boolean_$type, null), r = toNullable(Number_$type, null), s = toNullable(Number_$type, null), t = toNullable(Boolean_$type, null), u = null, v = toNullable(Boolean_$type, null), w = toNullable(Boolean_$type, null), x = toNullable(ST_ObjectType_$type, null), y = toNullable(Number_$type, null), z = toNullable(Boolean_$type, null), aa = toNullable(Number_$type, null), ab = toNullable(ST_SelType_$type, null), ac = toNullable(ST_TextHAlign_$type, null), ad = toNullable(ST_TextVAlign_$type, null), ae = toNullable(Number_$type, null), af = toNullable(Boolean_$type, null), ag = toNullable(Number_$type, null)) {
            a.ad.p(b, null);
            let ah = null;
            let ai = null;
            if (c.hasValue) {
                ai = "checked";
                ah = XmlNamespaceDefinitionBase.p(ST_Checked_$type, c.value);
                a.ad.h(ai, ah);
            }
            if (d.hasValue) {
                ai = "colored";
                ah = ST_OnOff.g(d.value);
                a.ad.h(ai, ah);
            }
            if (e.hasValue) {
                ai = "dropLines";
                ah = e.value.toString();
                a.ad.h(ai, ah);
            }
            if (f.hasValue) {
                ai = "dropStyle";
                ah = XmlNamespaceDefinitionBase.p(ST_DropStyle_$type, f.value);
                a.ad.h(ai, ah);
            }
            if (g.hasValue) {
                ai = "dx";
                ah = g.value.toString();
                a.ad.h(ai, ah);
            }
            if (h.hasValue) {
                ai = "editVal";
                ah = XmlNamespaceDefinitionBase.p(ST_EditValidation_$type, h.value);
                a.ad.h(ai, ah);
            }
            if (i.hasValue) {
                ai = "firstButton";
                ah = ST_OnOff.g(i.value);
                a.ad.h(ai, ah);
            }
            if (j != null) {
                ai = "fmlaGroup";
                ah = j;
                a.ad.h(ai, ah);
            }
            if (k != null) {
                ai = "fmlaLink";
                ah = k;
                a.ad.h(ai, ah);
            }
            if (l != null) {
                ai = "fmlaRange";
                ah = l;
                a.ad.h(ai, ah);
            }
            if (m != null) {
                ai = "fmlaTxbx";
                ah = m;
                a.ad.h(ai, ah);
            }
            if (n.hasValue) {
                ai = "horiz";
                ah = ST_OnOff.g(n.value);
                a.ad.h(ai, ah);
            }
            if (o.hasValue) {
                ai = "inc";
                ah = o.value.toString();
                a.ad.h(ai, ah);
            }
            if (p.hasValue) {
                ai = "justLastX";
                ah = ST_OnOff.g(p.value);
                a.ad.h(ai, ah);
            }
            if (q.hasValue) {
                ai = "lockText";
                ah = ST_OnOff.g(q.value);
                a.ad.h(ai, ah);
            }
            if (r.hasValue) {
                ai = "max";
                ah = r.value.toString();
                a.ad.h(ai, ah);
            }
            if (s.hasValue) {
                ai = "min";
                ah = s.value.toString();
                a.ad.h(ai, ah);
            }
            if (t.hasValue) {
                ai = "multiLine";
                ah = ST_OnOff.g(t.value);
                a.ad.h(ai, ah);
            }
            if (u != null) {
                ai = "multiSel";
                ah = u;
                a.ad.h(ai, ah);
            }
            if (v.hasValue) {
                ai = "noThreeD";
                ah = ST_OnOff.g(v.value);
                a.ad.h(ai, ah);
            }
            if (w.hasValue) {
                ai = "noThreeD2";
                ah = ST_OnOff.g(w.value);
                a.ad.h(ai, ah);
            }
            if (x.hasValue) {
                ai = "objectType";
                ah = XmlNamespaceDefinitionBase.p(ST_ObjectType_$type, x.value);
                a.ad.h(ai, ah);
            }
            if (y.hasValue) {
                ai = "page";
                ah = y.value.toString();
                a.ad.h(ai, ah);
            }
            if (z.hasValue) {
                ai = "passwordEdit";
                ah = ST_OnOff.g(z.value);
                a.ad.h(ai, ah);
            }
            if (aa.hasValue) {
                ai = "sel";
                ah = aa.value.toString();
                a.ad.h(ai, ah);
            }
            if (ab.hasValue) {
                ai = "seltype";
                ah = XmlNamespaceDefinitionBase.p(ST_SelType_$type, ab.value);
                a.ad.h(ai, ah);
            }
            if (ac.hasValue) {
                ai = "textHAlign";
                ah = XmlNamespaceDefinitionBase.p(ST_TextHAlign_$type, ac.value);
                a.ad.h(ai, ah);
            }
            if (ad.hasValue) {
                ai = "textVAlign";
                ah = XmlNamespaceDefinitionBase.p(ST_TextVAlign_$type, ad.value);
                a.ad.h(ai, ah);
            }
            if (ae.hasValue) {
                ai = "val";
                ah = ae.value.toString();
                a.ad.h(ai, ah);
            }
            if (af.hasValue) {
                ai = "verticalBar";
                ah = ST_OnOff.g(af.value);
                a.ad.h(ai, ah);
            }
            if (ag.hasValue) {
                ai = "widthMin";
                ah = ag.value.toString();
                a.ad.h(ai, ah);
            }
            ;
        }
    }
    CT_FormControlPr.$t = /*@__PURE__*/ markType(CT_FormControlPr, 'CT_FormControlPr');
    return CT_FormControlPr;
})();
