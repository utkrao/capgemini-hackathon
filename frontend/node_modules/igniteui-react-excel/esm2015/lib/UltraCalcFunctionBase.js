/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { StringBuilder } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
import { stringCreateFromChar } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionBase = /*@__PURE__*/ (() => {
    class UltraCalcFunctionBase extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = null;
            if (b == 3) {
                c = a.pop();
            }
            let d = a.pop();
            let e = a.pop();
            if (e.isError) {
                return new ExcelCalcValue(e.toErrorValue());
            }
            if (d.isError) {
                return new ExcelCalcValue(d.toErrorValue());
            }
            if (c != null && c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let f = e._toInt641();
            let g = d._toInt641();
            let h = c == null ? 1 : c._toInt();
            if (f < 0 || f >= 0x1FFFFFFFFFFFFE) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            if (g < 2 || g > 36) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            if (h < 0 || h > 255) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            let i = new StringBuilder(0);
            let j = g;
            while (f > 0) {
                let k = f % j;
                f -= k;
                let l;
                if (k < 10) {
                    l = String.fromCharCode((48 + k));
                }
                else {
                    l = String.fromCharCode((55 + k));
                }
                i.w(0, l);
                f = truncate(Math.floor(f / j));
            }
            if (i.c < h) {
                i.x(0, stringCreateFromChar('0', h - i.c));
            }
            return new ExcelCalcValue(i.toString());
        }
        get_maxArgs() {
            return 3;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        get_minArgs() {
            return 2;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_name() {
            return "base";
        }
        get name() {
            return this.get_name();
        }
    }
    UltraCalcFunctionBase.$t = /*@__PURE__*/ markType(UltraCalcFunctionBase, 'UltraCalcFunctionBase', BuiltInFunctionBase.$);
    return UltraCalcFunctionBase;
})();
