/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_CfvoType_$type } from "./ST_CfvoType";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_Cfvo_SML2009 = /*@__PURE__*/ (() => {
    class CT_Cfvo_SML2009 extends Base {
        constructor() {
            super();
            this.i = null;
            this.b = null;
            this.d = 0;
            this.g = toNullable(Boolean_$type, null);
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        static j(a, b, c) {
            b = 0;
            c = toNullable(Boolean_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "type":
                        b = XmlNamespaceDefinitionBase.b(ST_CfvoType_$type, d.d);
                        break;
                    case "gte":
                        c = toNullable(Boolean_$type, ST_OnOff.e(d.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static k(a, b, c, d) {
            a.ad.p(b, null);
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "gte";
                e = ST_OnOff.g(c.value);
                a.ad.h(f, e);
            }
            f = "type";
            e = XmlNamespaceDefinitionBase.p(ST_CfvoType_$type, d);
            a.ad.h(f, e);
            ;
        }
    }
    CT_Cfvo_SML2009.$t = /*@__PURE__*/ markType(CT_Cfvo_SML2009, 'CT_Cfvo_SML2009');
    return CT_Cfvo_SML2009;
})();
