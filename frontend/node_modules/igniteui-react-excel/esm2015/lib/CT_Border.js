/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_BorderPr } from "./CT_BorderPr";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
export let CT_Border = /*@__PURE__*/ (() => {
    class CT_Border extends Base {
        constructor() {
            super();
            this.d = null;
            this.e = null;
            this.f = null;
            this.a = null;
            this.b = null;
            this.g = null;
            this.c = null;
            this.j = toNullable(Boolean_$type, null);
            this.i = toNullable(Boolean_$type, null);
            this.k = toNullable(Boolean_$type, null);
        }
        static m(a, b, c, d) {
            b = toNullable(Boolean_$type, null);
            c = toNullable(Boolean_$type, null);
            d = toNullable(Boolean_$type, null);
            for (let e of fromEnum(a.ab.u)) {
                switch (e.a.e(a.d)) {
                    case "diagonalUp":
                        b = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    case "diagonalDown":
                        c = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    case "outline":
                        d = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d
            };
        }
        static n(a, b, c = toNullable(Boolean_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(Boolean_$type, null)) {
            a.ad.p(b, null);
            let f = null;
            let g = null;
            if (c.hasValue) {
                g = "diagonalDown";
                f = ST_OnOff.g(c.value);
                a.ad.h(g, f);
            }
            if (d.hasValue) {
                g = "diagonalUp";
                f = ST_OnOff.g(d.value);
                a.ad.h(g, f);
            }
            if (e.hasValue) {
                g = "outline";
                f = ST_OnOff.g(e.value);
                a.ad.h(g, f);
            }
        }
        setProperty(a, b) {
            switch (a) {
                case 887:
                    this.d = typeCast(CT_BorderPr.$, b);
                    break;
                case 1363:
                    this.e = typeCast(CT_BorderPr.$, b);
                    break;
                case 1754:
                    this.f = typeCast(CT_BorderPr.$, b);
                    break;
                case 160:
                    this.a = typeCast(CT_BorderPr.$, b);
                    break;
                case 476:
                    this.b = typeCast(CT_BorderPr.$, b);
                    break;
                case 1838:
                    this.g = typeCast(CT_BorderPr.$, b);
                    break;
                case 795:
                    this.c = typeCast(CT_BorderPr.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Border.$t = /*@__PURE__*/ markType(CT_Border, 'CT_Border', Base.$, [ISupportSetProperty_$type]);
    return CT_Border;
})();
