/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Type, typeCastObjTo$t, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IgnoreChildrenMarker } from "./IgnoreChildrenMarker";
/**
 * @hidden
 */
export let ContextStack = /*@__PURE__*/ (() => {
    class ContextStack extends Base {
        constructor() {
            super();
            this.d = null;
            this.b = false;
            this.d = new List$1(Base.$, 0);
        }
        i(a) {
            while (this.e > a) {
                this.h();
            }
        }
        j(a, b) {
            while (this.e > a && this.f != b) {
                this.h();
            }
        }
        a($t) {
            let a = $t;
            let b = a == Base.$;
            for (let c = this.d.count - 1; c >= 0; c--) {
                let d = this.d._inner[c];
                if (d == null) {
                    if (b) {
                        return Type.getDefaultValue($t);
                    }
                    continue;
                }
                if (a.isInstanceOfType(d)) {
                    return typeCastObjTo$t($t, d);
                }
            }
            return Type.getDefaultValue($t);
        }
        m(a, b) {
            let c = this.d.k(a);
            if (c < 0) {
                return;
            }
            this.d._inner[c] = b;
        }
        h() {
            let a = this.f;
            this.d.removeAt(this.d.count - 1);
            if (this.b && Base.referenceEquals(a, IgnoreChildrenMarker.a)) {
                this.b = this.a(IgnoreChildrenMarker.$) != null;
            }
            return a;
        }
        k(a) {
            this.d.add1(a);
            if (this.b == false && Base.referenceEquals(a, IgnoreChildrenMarker.a)) {
                this.b = true;
            }
        }
        g(a) {
            for (let b = this.d.count - 1; b >= 0; b--) {
                let c = this.d._inner[b];
                if (c == null) {
                    continue;
                }
                if (a(c)) {
                    return c;
                }
            }
            return null;
        }
        l(a) {
            if (this.d == null || this.d.count == 0) {
                return;
            }
            for (let b = this.d.count - 1; b >= 0; b -= 1) {
                let c = this.d._inner[b];
                if (Base.referenceEquals(a, c)) {
                    this.d.removeAt(b);
                    break;
                }
            }
        }
        get e() {
            return this.d.count;
        }
        get f() {
            if (this.d.count == 0) {
                return null;
            }
            return this.d._inner[this.d.count - 1];
        }
        get c() {
            return this.b;
        }
    }
    ContextStack.$t = /*@__PURE__*/ markType(ContextStack, 'ContextStack');
    return ContextStack;
})();
