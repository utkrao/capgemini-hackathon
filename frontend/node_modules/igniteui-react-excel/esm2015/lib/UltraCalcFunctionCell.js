/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { RefBase } from "./RefBase";
import { typeCast, String_$type, markType } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { CellAddress } from "./CellAddress";
import { WorksheetCell } from "./WorksheetCell";
import { GetFormulaStringInfo } from "./GetFormulaStringInfo";
import { MathUtilities } from "./MathUtilities";
import { FormattedString } from "./FormattedString";
import { nullableEquals } from "igniteui-react-core";
import { stringStartsWith, stringEndsWith, stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionCell = /*@__PURE__*/ (() => {
    class UltraCalcFunctionCell extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = null;
            if (b == 2) {
                c = a.pop();
            }
            let d = a.pop();
            if (d.isError) {
                return new ExcelCalcValue(d.toErrorValue());
            }
            let e = d.toString().toLowerCase();
            let f = null;
            let g;
            let h;
            let i, j;
            if (c == null) {
                let k = a._r._u;
                if (k.b == null || k.b.workbook == null) {
                    k.e();
                }
                if (k.b == null || k.b.workbook == null) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
                h = k.b;
                j = k.c;
                i = k.d;
                g = a._r._bb.i(h.index);
            }
            else {
                f = typeCast(RefBase.$, c.toReference());
                if (f == null) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
                g = f._q;
                h = f._u;
                j = f._ao;
                i = f._as;
            }
            let l = h != null ? h._rows$i._aj(i) : null;
            let m;
            switch (e) {
                case "address":
                    {
                        let n = CellAddress.u(i, j, h._o, false, false, -1, -1, false, h._c);
                        if (WorksheetCell.l_op_Equality(a.owningCell, null) || h != a.owningCell.worksheet) {
                            let o = g.o(GetFormulaStringInfo.a, true);
                            if (stringStartsWith(o, "'") && stringEndsWith(o, "'!")) {
                                o = o.substr(1, o.length - 3);
                                let p = o.indexOf("[");
                                if (p > 0) {
                                    o = o.substr(p);
                                }
                                o += "!";
                            }
                            n = o + n;
                        }
                        m = n;
                        break;
                    }
                case "col":
                    {
                        m = j + 1;
                        break;
                    }
                case "contents":
                case "type":
                    {
                        m = UltraCalcFunctionCell._ak(c, f, g, j, l, false);
                        if (e == "type") {
                            if (m == null) {
                                m = "b";
                            }
                            else {
                                let q = typeCast(String_$type, m);
                                if (q != null) {
                                    m = "l";
                                }
                                else {
                                    m = "v";
                                }
                            }
                        }
                        break;
                    }
                case "filename":
                    {
                        if (!g.j && stringIsNullOrEmpty(g.e.x)) {
                            m = "";
                        }
                        else {
                            let r = g.o(GetFormulaStringInfo.a, true);
                            if (r != null && r.length > 0) {
                                if (r.charAt(r.length - 1) == '!') {
                                    r = r.substr(0, r.length - 1);
                                }
                                if (stringStartsWith(r, "'") && stringEndsWith(r, "'")) {
                                    r = r.substr(1, r.length - 2);
                                }
                            }
                            m = r;
                        }
                        break;
                    }
                case "color":
                case "format":
                case "parentheses":
                case "prefix":
                case "protect":
                    {
                        if (g.j) {
                            m = new ExcelCalcErrorValue(3);
                        }
                        else {
                            let s = h._b4(l, j);
                            switch (e) {
                                case "color":
                                    {
                                        let t = s._cs;
                                        let u = h.workbook._b2.a(t);
                                        let v = u.c(1);
                                        m = v != null && !stringIsNullOrEmpty(v.color) ? 1 : 0;
                                        break;
                                    }
                                case "parentheses":
                                    {
                                        let w = s._cs;
                                        let x = h.workbook._b2.a(w);
                                        let y = x.c(0);
                                        m = y != null && y.hasParentheses && !y.hasVerbatimString ? 1 : 0;
                                        break;
                                    }
                                case "prefix":
                                    m = UltraCalcFunctionCell._ak(c, f, g, j, l, true);
                                    if (typeof m === 'string') {
                                        switch (s._a4) {
                                            case 1:
                                            case 7:
                                            case 5:
                                            case 0:
                                                m = "'";
                                                break;
                                            case 2:
                                            case 6:
                                                m = "^";
                                                break;
                                            case 3:
                                                m = "'";
                                                break;
                                            case 4:
                                                m = "\\";
                                                break;
                                            default:
                                                m = "";
                                                break;
                                        }
                                    }
                                    else {
                                        m = "";
                                    }
                                    break;
                                case "protect":
                                    m = nullableEquals(s._c5, false) ? 0 : 1;
                                    break;
                                default:
                                case "format":
                                    {
                                        let z = s._cs;
                                        let aa = h.workbook._b2.a(z);
                                        m = aa.ah();
                                        break;
                                    }
                            }
                        }
                        break;
                    }
                case "row":
                    {
                        m = i + 1;
                        break;
                    }
                case "width":
                    {
                        if (g.j) {
                            m = new ExcelCalcErrorValue(3);
                        }
                        else {
                            let ab = h._fp(j, false);
                            m = MathUtilities.f(h._fn(ab));
                        }
                        break;
                    }
                default:
                    m = new ExcelCalcErrorValue(1);
                    break;
            }
            return new ExcelCalcValue(m);
        }
        static _ak(a, b, c, d, e, f) {
            let g;
            if (e == null) {
                if (a != null && c.j) {
                    if (b.value != null) {
                        g = b.value.value;
                    }
                    else {
                        g = null;
                    }
                }
                else {
                    g = null;
                }
            }
            else {
                if (!e._bt(d)) {
                    g = null;
                }
                else {
                    if (f) {
                        let h = e.getCellFormula(d);
                        if (h != null) {
                            return h;
                        }
                    }
                    let i = null;
                    if (b == null) {
                        b = e._as(d);
                        if (b._af && b._formula != null) {
                            i = b._formula.evaluateCore(e.worksheet.workbook);
                        }
                    }
                    if (i == null) {
                        i = new ExcelCalcValue(b);
                    }
                    let j = i._bj(false, false);
                    if (typeCast(FormattedString.$, j) !== null) {
                        g = j.unformattedString;
                    }
                    else {
                        g = j;
                    }
                }
            }
            return g;
        }
        get_name() {
            return "cell";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 1;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 2;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
    }
    UltraCalcFunctionCell.$t = /*@__PURE__*/ markType(UltraCalcFunctionCell, 'UltraCalcFunctionCell', BuiltInFunctionBase.$);
    return UltraCalcFunctionCell;
})();
