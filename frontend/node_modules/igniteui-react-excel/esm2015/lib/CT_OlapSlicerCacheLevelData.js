/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, fromEnum, markType } from "igniteui-react-core";
import { ST_OlapSlicerCacheSortOrder_$type } from "./ST_OlapSlicerCacheSortOrder";
import { ST_SlicerCacheCrossFilter_$type } from "./ST_SlicerCacheCrossFilter";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_OlapSlicerCacheLevelData = /*@__PURE__*/ (() => {
    class CT_OlapSlicerCacheLevelData extends Base {
        constructor() {
            super();
            this.d = null;
            this.l = null;
            this.j = null;
            this.n = 0;
            this.h = toNullable(ST_OlapSlicerCacheSortOrder_$type, null);
            this.f = toNullable(ST_SlicerCacheCrossFilter_$type, null);
        }
        get c() {
            return this.d;
        }
        set c(a) {
            this.d = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get m() {
            return this.n;
        }
        set m(a) {
            this.n = a;
        }
        get g() {
            return this.h;
        }
        set g(a) {
            this.h = a;
        }
        get e() {
            return this.f;
        }
        set e(a) {
            this.f = a;
        }
        static o(a, b, c, d, e, f) {
            b = null;
            c = null;
            d = 0;
            e = toNullable(ST_OlapSlicerCacheSortOrder_$type, null);
            f = toNullable(ST_SlicerCacheCrossFilter_$type, null);
            for (let g of fromEnum(a.ab.u)) {
                switch (g.a.e(a.d)) {
                    case "uniqueName":
                        b = g.d;
                        break;
                    case "sourceCaption":
                        c = g.d;
                        break;
                    case "count":
                        d = parseUInt32_1(g.d, CultureInfo.invariantCulture);
                        break;
                    case "sortOrder":
                        e = toNullable(ST_OlapSlicerCacheSortOrder_$type, XmlNamespaceDefinitionBase.b(ST_OlapSlicerCacheSortOrder_$type, g.d));
                        break;
                    case "crossFilter":
                        f = toNullable(ST_SlicerCacheCrossFilter_$type, XmlNamespaceDefinitionBase.b(ST_SlicerCacheCrossFilter_$type, g.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        static p(a, b, c, d, e, f, g) {
            a.ad.p(b, null);
            let h = null;
            let i = null;
            if (c.hasValue) {
                i = "crossFilter";
                h = XmlNamespaceDefinitionBase.p(ST_SlicerCacheCrossFilter_$type, c.value);
                a.ad.h(i, h);
            }
            if (d.hasValue) {
                i = "sortOrder";
                h = XmlNamespaceDefinitionBase.p(ST_OlapSlicerCacheSortOrder_$type, d.value);
                a.ad.h(i, h);
            }
            if (e != null) {
                i = "sourceCaption";
                h = e;
                a.ad.h(i, h);
            }
            i = "count";
            h = f.toString();
            a.ad.h(i, h);
            if (g != null) {
                i = "uniqueName";
                h = g;
                a.ad.h(i, h);
            }
            ;
        }
    }
    CT_OlapSlicerCacheLevelData.$t = /*@__PURE__*/ markType(CT_OlapSlicerCacheLevelData, 'CT_OlapSlicerCacheLevelData');
    return CT_OlapSlicerCacheLevelData;
})();
