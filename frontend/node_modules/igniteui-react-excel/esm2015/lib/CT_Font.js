/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_FontName } from "./CT_FontName";
import { CT_IntProperty } from "./CT_IntProperty";
import { CT_BooleanProperty } from "./CT_BooleanProperty";
import { ColorInfo } from "./ColorInfo";
import { CT_FontSize } from "./CT_FontSize";
import { CT_UnderlineProperty } from "./CT_UnderlineProperty";
import { CT_VerticalAlignFontProperty } from "./CT_VerticalAlignFontProperty";
import { CT_FontScheme_SML } from "./CT_FontScheme_SML";
/**
 * @hidden
 */
export let CT_Font = /*@__PURE__*/ (() => {
    class CT_Font extends Base {
        constructor() {
            super();
            this.i = null;
            this.l = null;
            this.m = null;
            this.b = null;
            this.e = null;
            this.h = null;
            this.f = null;
            this.g = null;
            this.c = null;
            this.d = null;
            this.a = null;
            this.k = null;
            this.n = null;
            this.o = null;
            this.j = null;
        }
        setProperty(a, b) {
            switch (a) {
                case 1045:
                    this.i = typeCast(CT_FontName.$, b);
                    break;
                case 260:
                    this.l = typeCast(CT_IntProperty.$, b);
                    break;
                case 617:
                    this.m = typeCast(CT_IntProperty.$, b);
                    break;
                case 86:
                    this.b = typeCast(CT_BooleanProperty.$, b);
                    break;
                case 808:
                    this.e = typeCast(CT_BooleanProperty.$, b);
                    break;
                case 1610:
                    this.h = typeCast(CT_BooleanProperty.$, b);
                    break;
                case 1143:
                    this.f = typeCast(CT_BooleanProperty.$, b);
                    break;
                case 1460:
                    this.g = typeCast(CT_BooleanProperty.$, b);
                    break;
                case 332:
                    this.c = typeCast(CT_BooleanProperty.$, b);
                    break;
                case 600:
                    this.d = typeCast(CT_BooleanProperty.$, b);
                    break;
                case 302:
                    this.a = typeCast(ColorInfo.$, b);
                    break;
                case 1653:
                    this.k = typeCast(CT_FontSize.$, b);
                    break;
                case 1789:
                    this.n = typeCast(CT_UnderlineProperty.$, b);
                    break;
                case 1836:
                    this.o = typeCast(CT_VerticalAlignFontProperty.$, b);
                    break;
                case 1428:
                    this.j = typeCast(CT_FontScheme_SML.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_Font.$t = /*@__PURE__*/ markType(CT_Font, 'CT_Font', Base.$, [ISupportSetProperty_$type]);
    return CT_Font;
})();
