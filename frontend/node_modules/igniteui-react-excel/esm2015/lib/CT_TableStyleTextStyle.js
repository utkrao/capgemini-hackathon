/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_OfficeArtExtensionList } from "./CT_OfficeArtExtensionList";
import { ST_OnOffStyleType_$type } from "./ST_OnOffStyleType";
import { EG_ThemeableFontStyles } from "./EG_ThemeableFontStyles";
import { EG_ColorChoice_DML } from "./EG_ColorChoice_DML";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
/**
 * @hidden
 */
export let CT_TableStyleTextStyle = /*@__PURE__*/ (() => {
    class CT_TableStyleTextStyle extends Base {
        constructor() {
            super();
            this.b = null;
            this.j = toNullable(ST_OnOffStyleType_$type, null);
            this.l = toNullable(ST_OnOffStyleType_$type, null);
            this.e = null;
            this.c = null;
        }
        get a() {
            return this.b;
        }
        set a(a) {
            this.b = a;
        }
        get i() {
            return this.j;
        }
        set i(a) {
            this.j = a;
        }
        get k() {
            return this.l;
        }
        set k(a) {
            this.l = a;
        }
        get f() {
            if (this.e == null) {
                this.e = new EG_ThemeableFontStyles();
            }
            return this.e;
        }
        get d() {
            if (this.c == null) {
                this.c = new EG_ColorChoice_DML();
            }
            return this.c;
        }
        static n(a, b, c) {
            b = toNullable(ST_OnOffStyleType_$type, null);
            c = toNullable(ST_OnOffStyleType_$type, null);
            for (let d of fromEnum(a.ab.u)) {
                switch (d.a.e(a.d)) {
                    case "b":
                        b = toNullable(ST_OnOffStyleType_$type, XmlNamespaceDefinitionBase.b(ST_OnOffStyleType_$type, d.d));
                        break;
                    case "i":
                        c = toNullable(ST_OnOffStyleType_$type, XmlNamespaceDefinitionBase.b(ST_OnOffStyleType_$type, d.d));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c
            };
        }
        static o(a, b, c = toNullable(ST_OnOffStyleType_$type, null), d = toNullable(ST_OnOffStyleType_$type, null)) {
            a.ad.p(b, "a");
            let e = null;
            let f = null;
            if (c.hasValue) {
                f = "b";
                e = XmlNamespaceDefinitionBase.p(ST_OnOffStyleType_$type, c.value);
                a.ad.h(f, e);
            }
            if (d.hasValue) {
                f = "i";
                e = XmlNamespaceDefinitionBase.p(ST_OnOffStyleType_$type, d.value);
                a.ad.h(f, e);
            }
            ;
        }
        setProperty(a, b) {
            switch (a) {
                case 601:
                    this.a = typeCast(CT_OfficeArtExtensionList.$, b);
                    break;
                default:
                    if (this.f.c(a)) {
                        this.f.e(a, b);
                        return;
                    }
                    else if (this.d.g(a)) {
                        this.d.i(a, b);
                        return;
                    }
                    break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_TableStyleTextStyle.$t = /*@__PURE__*/ markType(CT_TableStyleTextStyle, 'CT_TableStyleTextStyle', Base.$, [ISupportSetProperty_$type]);
    return CT_TableStyleTextStyle;
})();
