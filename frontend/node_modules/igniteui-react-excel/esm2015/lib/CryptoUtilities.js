/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { Convert } from "igniteui-react-core";
import { Encoding } from "igniteui-react-core";
import { BitConverter } from "igniteui-react-core";
import { intSToU } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let CryptoUtilities = /*@__PURE__*/ (() => {
    class CryptoUtilities extends Base {
        static d($t, a, b) {
            for (let c = 0; c < a.length; c++) {
                a[c] = b;
            }
        }
        static c(a) {
            return Convert.toBase64String(a);
        }
        static a(a) {
            let b = a.readUInt32();
            let c = a.readBytes(b);
            while (b % 4 != 0) {
                a.readByte();
                b++;
            }
            return Encoding.unicode.getString1(c, 0, c.length);
        }
        static g(a, b) {
            let c = Encoding.unicode.getBytes1(a);
            b.w(intSToU(c.length));
            b.h(c);
            for (let d = c.length; d % 4 != 0; d++) {
                b.m(0);
            }
        }
        static b(a) {
            let b = a.readUInt32();
            if (b == 0) {
                return null;
            }
            if (b == 4) {
                return stringEmpty();
            }
            let c = a.readBytes(b);
            while (b % 4 != 0) {
                a.readByte();
                b++;
            }
            return Encoding.uTF8.getString(c);
        }
        static h(a, b) {
            if (a == null) {
                b.w(intSToU(0));
                return;
            }
            if (a.length == 0) {
                b.w(intSToU(4));
                return;
            }
            let c = Encoding.uTF8.getBytes1(a);
            b.w(intSToU(c.length));
            b.h(c);
            for (let d = c.length; d % 4 != 0; d++) {
                b.m(0);
            }
        }
        static e(a, b) {
            a.write(BitConverter.h(b), 0, 2);
        }
        static f(a, b) {
            a.write(BitConverter.i(b), 0, 4);
        }
    }
    CryptoUtilities.$t = /*@__PURE__*/ markType(CryptoUtilities, 'CryptoUtilities');
    return CryptoUtilities;
})();
