/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionMid = /*@__PURE__*/ (() => {
    class UltraCalcFunctionMid extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = 0;
            if (b > 2) {
                let d = a.pop();
                if (d.isError) {
                    return new ExcelCalcValue(d.toErrorValue());
                }
                c = d._toInt321();
                if (c < 0) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
            }
            let e = 1;
            if (b > 1) {
                let f = a.pop();
                if (f.isError) {
                    return new ExcelCalcValue(f.toErrorValue());
                }
                e = f._toInt321();
                if (c < 1) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
            }
            let g = a.pop();
            if (g.isError) {
                return new ExcelCalcValue(g.toErrorValue());
            }
            let h = g.toString();
            if (e > h.length) {
                return new ExcelCalcValue(stringEmpty());
            }
            else if (e + c - 1 > h.length) {
                return new ExcelCalcValue(h.substr(e - 1));
            }
            else {
                return new ExcelCalcValue(h.substr(e - 1, c));
            }
        }
        get_name() {
            return "mid";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 1;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 3;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return true;
        }
    }
    UltraCalcFunctionMid.$t = /*@__PURE__*/ markType(UltraCalcFunctionMid, 'UltraCalcFunctionMid', BuiltInFunctionBase.$);
    return UltraCalcFunctionMid;
})();
