/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ValueType, toNullable, typeCast, markStruct } from "igniteui-react-core";
import { ST_Angle } from "./ST_Angle";
import { DocCoreUtils } from "./DocCoreUtils";
/**
 * @hidden
 */
export let ST_PositiveFixedAngle = /*@__PURE__*/ (() => {
    class ST_PositiveFixedAngle extends ValueType {
        constructor(a, ..._rest) {
            super();
            this.a = new ST_Angle();
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0: break;
                case 1:
                    {
                        let c = _rest[0];
                        DocCoreUtils.aw(ST_PositiveFixedAngle.$, c.n(), "value", 0, 21600000);
                        this.a = c;
                    }
                    break;
            }
        }
        equals(a) {
            let b = toNullable(ST_PositiveFixedAngle.$, typeCast(ST_PositiveFixedAngle.$, a));
            if (ST_PositiveFixedAngle.k(b, toNullable(ST_PositiveFixedAngle.$, null))) {
                return false;
            }
            return ST_PositiveFixedAngle.h(this, b.getValueOrDefault());
        }
        getHashCode() {
            return this.a.getHashCode();
        }
        toString() {
            return this.a.toString();
        }
        static d(a) {
            return ST_PositiveFixedAngle.e(ST_Angle.a(a));
        }
        q() {
            return this.a.n();
        }
        static g(a) {
            let b = ST_PositiveFixedAngle.p(a);
            if (ST_PositiveFixedAngle.k(b, toNullable(ST_PositiveFixedAngle.$, null))) {
                return b.getValueOrDefault();
            }
            throw DocCoreUtils.n(ST_PositiveFixedAngle.$, a);
        }
        static p(a) {
            return ST_PositiveFixedAngle.o(ST_Angle.m(a));
        }
        static h(a, b) {
            return ST_Angle.c(a.a, b.a);
        }
        static i(a, b) {
            if (!a.hasValue) {
                return !b.hasValue;
            }
            else if (!b.hasValue) {
                return false;
            }
            return ST_PositiveFixedAngle.h(a.value, b.value);
        }
        static j(a, b) {
            return !(ST_PositiveFixedAngle.h(a, b));
        }
        static k(a, b) {
            if (!a.hasValue) {
                return b.hasValue;
            }
            else if (!b.hasValue) {
                return true;
            }
            return ST_PositiveFixedAngle.j(a.value, b.value);
        }
        static e(a) {
            return new ST_PositiveFixedAngle(1, a);
        }
        static o(a) {
            if (!a.hasValue) {
                return toNullable(ST_PositiveFixedAngle.$, null);
            }
            return toNullable(ST_PositiveFixedAngle.$, ST_PositiveFixedAngle.e(a.value));
        }
        static b(a) {
            return a.a;
        }
        static n(a) {
            if (!a.hasValue) {
                return toNullable(ST_Angle.$, null);
            }
            return toNullable(ST_Angle.$, ST_PositiveFixedAngle.b(a.value));
        }
    }
    ST_PositiveFixedAngle.$t = /*@__PURE__*/ markStruct(ST_PositiveFixedAngle, 'ST_PositiveFixedAngle');
    return ST_PositiveFixedAngle;
})();
