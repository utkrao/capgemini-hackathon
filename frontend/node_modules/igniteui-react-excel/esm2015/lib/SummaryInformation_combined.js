/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { InformationBase } from "./InformationBase";
import { Base, markType, String_$type, Date_$type, Number_$type, getInstanceType } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
/**
 * @hidden
 */
export let SummaryInformation = /*@__PURE__*/ (() => {
    class SummaryInformation extends InformationBase {
        constructor() {
            super(...arguments);
            this.s = null;
        }
        get_f() {
            return "f29f85e04ff91068ab9108002b27b3d9";
        }
        get f() {
            return this.get_f();
        }
        get t() {
            if (this.s == null) {
                this.s = new SummaryInformation_SummaryInformationProperties(this);
            }
            return this.s;
        }
    }
    SummaryInformation.$t = /*@__PURE__*/ markType(SummaryInformation, 'SummaryInformation', InformationBase.$);
    return SummaryInformation;
})();
/**
 * @hidden
 */
export let SummaryInformation_SummaryInformationProperties = /*@__PURE__*/ (() => {
    class SummaryInformation_SummaryInformationProperties extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        static b(a, b) {
            if (1 == a) {
                return false;
            }
            switch (a) {
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 18: return b == String_$type;
                case 10:
                case 11:
                case 12:
                case 13: return b == Date_$type;
                case 14:
                case 15:
                case 16:
                case 19: return b == Number_$type;
                case 17: return false;
                default: return true;
            }
        }
        item(a, b) {
            if (arguments.length === 2) {
                let c = a;
                if (DocCoreUtils.e(b)) {
                    if (this.a.b.containsKey(c)) {
                        this.a.b.removeItem(c);
                    }
                }
                else {
                    if (SummaryInformation_SummaryInformationProperties.b(a, getInstanceType(b)) == false) {
                        return;
                    }
                    if (this.a.b.containsKey(c)) {
                        this.a.b.item(c, b);
                    }
                    else {
                        this.a.b.addItem(c, b);
                    }
                }
                return b;
            }
            else {
                let b = a;
                if (this.a.b.containsKey(b) == false) {
                    return null;
                }
                return this.a.b.item(b);
            }
        }
    }
    SummaryInformation_SummaryInformationProperties.$t = /*@__PURE__*/ markType(SummaryInformation_SummaryInformationProperties, 'SummaryInformation_SummaryInformationProperties');
    return SummaryInformation_SummaryInformationProperties;
})();
