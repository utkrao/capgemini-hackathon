/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, toNullable, Number_$type, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { List$1 } from "igniteui-react-core";
import { CT_ColorScale } from "./CT_ColorScale";
import { CT_DataBar } from "./CT_DataBar";
import { CT_IconSet } from "./CT_IconSet";
import { CT_ExtensionList } from "./CT_ExtensionList";
import { ST_CfType_$type } from "./ST_CfType";
import { ST_ConditionalFormattingOperator_$type } from "./ST_ConditionalFormattingOperator";
import { ST_TimePeriod_$type } from "./ST_TimePeriod";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { CultureInfo } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { parseUInt32_1, parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_CfRule = /*@__PURE__*/ (() => {
    class CT_CfRule extends Base {
        constructor() {
            super();
            this.k = null;
            this.b = null;
            this.c = null;
            this.d = null;
            this.a = null;
            this.e = 0;
            this.o = toNullable(Number_$type, null);
            this.l = 0;
            this.u = toNullable(Boolean_$type, null);
            this.m = toNullable(Boolean_$type, null);
            this.r = toNullable(Boolean_$type, null);
            this.n = toNullable(Boolean_$type, null);
            this.q = toNullable(ST_ConditionalFormattingOperator_$type, null);
            this.w = null;
            this.v = toNullable(ST_TimePeriod_$type, null);
            this.s = toNullable(Number_$type, null);
            this.t = toNullable(Number_$type, null);
            this.p = toNullable(Boolean_$type, null);
            this.k = new List$1(String_$type, 0);
        }
        static y(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
            b = 0;
            c = toNullable(Number_$type, null);
            d = 0;
            e = toNullable(Boolean_$type, null);
            f = toNullable(Boolean_$type, null);
            g = toNullable(Boolean_$type, null);
            h = toNullable(Boolean_$type, null);
            i = toNullable(ST_ConditionalFormattingOperator_$type, null);
            j = null;
            k = toNullable(ST_TimePeriod_$type, null);
            l = toNullable(Number_$type, null);
            m = toNullable(Number_$type, null);
            n = toNullable(Boolean_$type, null);
            for (let o of fromEnum(a.ab.u)) {
                switch (o.a.e(a.d)) {
                    case "type":
                        b = XmlNamespaceDefinitionBase.b(ST_CfType_$type, o.d);
                        break;
                    case "dxfId":
                        c = toNullable(Number_$type, parseUInt32_1(o.d, CultureInfo.invariantCulture));
                        break;
                    case "priority":
                        d = parseInt32_1(o.d, CultureInfo.invariantCulture);
                        break;
                    case "stopIfTrue":
                        e = toNullable(Boolean_$type, ST_OnOff.e(o.d));
                        break;
                    case "aboveAverage":
                        f = toNullable(Boolean_$type, ST_OnOff.e(o.d));
                        break;
                    case "percent":
                        g = toNullable(Boolean_$type, ST_OnOff.e(o.d));
                        break;
                    case "bottom":
                        h = toNullable(Boolean_$type, ST_OnOff.e(o.d));
                        break;
                    case "operator":
                        i = toNullable(ST_ConditionalFormattingOperator_$type, XmlNamespaceDefinitionBase.b(ST_ConditionalFormattingOperator_$type, o.d));
                        break;
                    case "text":
                        j = o.d;
                        break;
                    case "timePeriod":
                        k = toNullable(ST_TimePeriod_$type, XmlNamespaceDefinitionBase.b(ST_TimePeriod_$type, o.d));
                        break;
                    case "rank":
                        l = toNullable(Number_$type, parseUInt32_1(o.d, CultureInfo.invariantCulture));
                        break;
                    case "stdDev":
                        m = toNullable(Number_$type, parseInt32_1(o.d, CultureInfo.invariantCulture));
                        break;
                    case "equalAverage":
                        n = toNullable(Boolean_$type, ST_OnOff.e(o.d));
                        break;
                    default: break;
                }
            }
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f,
                p6: g,
                p7: h,
                p8: i,
                p9: j,
                p10: k,
                p11: l,
                p12: m,
                p13: n
            };
        }
        static z(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
            a.ad.p(b, null);
            let p = null;
            let q = null;
            if (c.hasValue) {
                q = "operator";
                p = XmlNamespaceDefinitionBase.p(ST_ConditionalFormattingOperator_$type, c.value);
                a.ad.h(q, p);
            }
            if (d.hasValue) {
                q = "aboveAverage";
                p = ST_OnOff.g(d.value);
                a.ad.h(q, p);
            }
            if (e.hasValue) {
                q = "bottom";
                p = ST_OnOff.g(e.value);
                a.ad.h(q, p);
            }
            if (f.hasValue) {
                q = "dxfId";
                p = f.value.toString();
                a.ad.h(q, p);
            }
            if (g.hasValue) {
                q = "equalAverage";
                p = ST_OnOff.g(g.value);
                a.ad.h(q, p);
            }
            if (h.hasValue) {
                q = "percent";
                p = ST_OnOff.g(h.value);
                a.ad.h(q, p);
            }
            if (i.hasValue) {
                q = "rank";
                p = i.value.toString();
                a.ad.h(q, p);
            }
            if (j.hasValue) {
                q = "stdDev";
                p = j.value.toString();
                a.ad.h(q, p);
            }
            if (k.hasValue) {
                q = "stopIfTrue";
                p = ST_OnOff.g(k.value);
                a.ad.h(q, p);
            }
            if (l != null) {
                q = "text";
                p = l;
                a.ad.h(q, p);
            }
            if (m.hasValue) {
                q = "timePeriod";
                p = XmlNamespaceDefinitionBase.p(ST_TimePeriod_$type, m.value);
                a.ad.h(q, p);
            }
            q = "priority";
            p = n.toString();
            a.ad.h(q, p);
            q = "type";
            p = XmlNamespaceDefinitionBase.p(ST_CfType_$type, o);
            a.ad.h(q, p);
        }
        setProperty(a, b) {
            switch (a) {
                case 677:
                    this.k.add(typeCast(String_$type, b));
                    break;
                case 310:
                    this.b = typeCast(CT_ColorScale.$, b);
                    break;
                case 411:
                    this.c = typeCast(CT_DataBar.$, b);
                    break;
                case 815:
                    this.d = typeCast(CT_IconSet.$, b);
                    break;
                case 601:
                    this.a = typeCast(CT_ExtensionList.$, b);
                    break;
                default: break;
            }
        }
        toString() {
            let a = getInstanceType(this);
            return a != null ? a.typeName : super.toString();
        }
    }
    CT_CfRule.$t = /*@__PURE__*/ markType(CT_CfRule, 'CT_CfRule', Base.$, [ISupportSetProperty_$type]);
    return CT_CfRule;
})();
