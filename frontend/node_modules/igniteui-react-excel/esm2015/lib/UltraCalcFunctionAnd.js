/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionAnd = /*@__PURE__*/ (() => {
    class UltraCalcFunctionAnd extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = true;
            let d = false;
            let e = this._getArguments(a, b, true);
            for (let g = 0; g < e.length; g++) {
                let f = e[g];
                if (f.isError) {
                    return new ExcelCalcValue(f.toErrorValue());
                }
                try {
                    if (!f._toBoolean1()) {
                        c = false;
                    }
                    d = true;
                }
                catch (h) {
                }
            }
            if (d) {
                return new ExcelCalcValue(c);
            }
            return new ExcelCalcValue(new ExcelCalcErrorValue(1));
        }
        canParameterBeEnumerable(a) {
            return true;
        }
        get_name() {
            return "and";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 1;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 0x7FFFFFFF;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
        doesParameterAllowIntermediateResultArray(a, b) {
            return (b == false);
        }
    }
    UltraCalcFunctionAnd.$t = /*@__PURE__*/ markType(UltraCalcFunctionAnd, 'UltraCalcFunctionAnd', BuiltInFunctionBase.$);
    return UltraCalcFunctionAnd;
})();
