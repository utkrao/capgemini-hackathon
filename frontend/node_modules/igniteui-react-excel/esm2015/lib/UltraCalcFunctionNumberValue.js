/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { MathUtilities } from "./MathUtilities";
import { stringIsNullOrEmpty, stringIsNullOrWhiteSpace } from "igniteui-react-core";
import { isInfinity } from "igniteui-react-core";
/**
 * @hidden
 */
export let UltraCalcFunctionNumberValue = /*@__PURE__*/ (() => {
    class UltraCalcFunctionNumberValue extends BuiltInFunctionBase {
        evaluate(a, b) {
            let c = null;
            let d = null;
            if (b == 3) {
                c = a.pop();
            }
            if (b >= 2) {
                d = a.pop();
            }
            let e = a.pop();
            if (e.isError) {
                return new ExcelCalcValue(e.toErrorValue());
            }
            if (d != null && d.isError) {
                return new ExcelCalcValue(d.toErrorValue());
            }
            if (c != null && c.isError) {
                return new ExcelCalcValue(c.toErrorValue());
            }
            let f = e.toString();
            let g = d == null ? a._w.numberFormat.numberDecimalSeparator : d.toString();
            let h = c == null ? a._w.numberFormat.numberGroupSeparator : c.toString();
            if (stringIsNullOrEmpty(h) || stringIsNullOrEmpty(g)) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            let i = h.charAt(0);
            let j = g.charAt(0);
            if (j == i) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            if (stringIsNullOrWhiteSpace(f)) {
                return new ExcelCalcValue(0);
            }
            let k = false;
            let l = "";
            let m = "";
            let n = 0;
            let o = false;
            let p = 0;
            for (let q = 0; q < f.length; q++) {
                let r = f.charAt(q);
                if (/\s/i.test(r)) {
                }
                else if (r == j) {
                    if (k || n > 0) {
                        o = true;
                    }
                    k = true;
                }
                else if (r == i) {
                    if (k) {
                        o = true;
                    }
                }
                else if (r == '%') {
                    n++;
                }
                else if ('0'.charCodeAt(0) <= r.charCodeAt(0) && r.charCodeAt(0) <= '9'.charCodeAt(0)) {
                    if (n > 0) {
                        o = true;
                    }
                    else {
                        let s = r;
                        if (p == 15) {
                            s = '0';
                        }
                        else if (p > 0 || s != '0') {
                            p++;
                        }
                        if (k) {
                            m += s;
                        }
                        else {
                            l += s;
                        }
                    }
                }
                else {
                    if (!e.isBoolean) {
                        let t;
                        if (((() => { let u = e._toDouble1(t); t = u.p0; return u.ret; })())) {
                            if (isInfinity(t)) {
                                o = true;
                            }
                            else {
                                return new ExcelCalcValue(t);
                            }
                        }
                    }
                    o = true;
                }
                if (o) {
                    break;
                }
            }
            if (o) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            let u = l.length > 0 ? parseFloat(l) : 0;
            if (m.length > 0) {
                u += parseFloat(m) / Math.pow(10, m.length);
            }
            if (n > 0) {
                u /= Math.pow(10, n * 2);
            }
            return new ExcelCalcValue(MathUtilities.i(u));
        }
        get_name() {
            return "numbervalue";
        }
        get name() {
            return this.get_name();
        }
        get_minArgs() {
            return 1;
        }
        get minArgs() {
            return this.get_minArgs();
        }
        get_maxArgs() {
            return 3;
        }
        get maxArgs() {
            return this.get_maxArgs();
        }
    }
    UltraCalcFunctionNumberValue.$t = /*@__PURE__*/ markType(UltraCalcFunctionNumberValue, 'UltraCalcFunctionNumberValue', BuiltInFunctionBase.$);
    return UltraCalcFunctionNumberValue;
})();
