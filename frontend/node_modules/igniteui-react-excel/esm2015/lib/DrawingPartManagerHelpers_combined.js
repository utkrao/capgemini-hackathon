/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, toNullable, String_$type, Number_$type, Boolean_$type, Array_$type, runOn, markType } from "igniteui-react-core";
import { XmlPartManagerBase } from "./XmlPartManagerBase";
import { EG_ColorChoice } from "./EG_ColorChoice";
import { CT_Color } from "./CT_Color";
import { CT_SolidFillProperties } from "./CT_SolidFillProperties";
import { CT_StyleMatrixReference } from "./CT_StyleMatrixReference";
import { CT_FontReference } from "./CT_FontReference";
import { CT_LineProperties } from "./CT_LineProperties";
import { CT_ShapePropertiesBase } from "./CT_ShapePropertiesBase";
import { CT_TextCharacterProperties } from "./CT_TextCharacterProperties";
import { CT_PresetGeometry2D } from "./CT_PresetGeometry2D";
import { CT_GeomGuideList } from "./CT_GeomGuideList";
import { ST_PositiveFixedPercentage } from "./ST_PositiveFixedPercentage";
import { DrawingMLMain } from "./DrawingMLMain";
import { ColorTransform_Alpha } from "./ColorTransform_Alpha";
import { ST_PositivePercentage } from "./ST_PositivePercentage";
import { ColorTransform_AlphaMod } from "./ColorTransform_AlphaMod";
import { ST_FixedPercentage } from "./ST_FixedPercentage";
import { ColorTransform_AlphaOff } from "./ColorTransform_AlphaOff";
import { CT_BlipFillProperties } from "./CT_BlipFillProperties";
import { ST_BlipCompression_$type } from "./ST_BlipCompression";
import { CT_Blip } from "./CT_Blip";
import { CT_Picture } from "./CT_Picture";
import { ST_Percentage } from "./ST_Percentage";
import { ColorTransform_Blue } from "./ColorTransform_Blue";
import { ColorTransform_BlueMod } from "./ColorTransform_BlueMod";
import { ColorTransform_BlueOff } from "./ColorTransform_BlueOff";
import { CT_TextBody } from "./CT_TextBody";
import { CT_TextBodyProperties } from "./CT_TextBodyProperties";
import { CT_GraphicalObjectData } from "./CT_GraphicalObjectData";
import { DrawingMLChart } from "./DrawingMLChart";
import { CT_RelId } from "./CT_RelId";
import { Tuple } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { DrawingMLChart2014 } from "./DrawingMLChart2014";
import { CT_GroupTransform2D } from "./CT_GroupTransform2D";
import { ST_PositiveCoordinate } from "./ST_PositiveCoordinate";
import { CT_PositiveSize2D } from "./CT_PositiveSize2D";
import { ST_Coordinate } from "./ST_Coordinate";
import { CT_Point2D } from "./CT_Point2D";
import { CT_ConnectorNonVisual } from "./CT_ConnectorNonVisual";
import { CT_NonVisualConnectorProperties } from "./CT_NonVisualConnectorProperties";
import { CT_GraphicalObjectFrameNonVisual } from "./CT_GraphicalObjectFrameNonVisual";
import { CT_NonVisualGraphicFrameProperties } from "./CT_NonVisualGraphicFrameProperties";
import { CT_GroupShapeNonVisual } from "./CT_GroupShapeNonVisual";
import { CT_NonVisualGroupDrawingShapeProps } from "./CT_NonVisualGroupDrawingShapeProps";
import { CT_PictureNonVisual } from "./CT_PictureNonVisual";
import { CT_NonVisualPictureProperties } from "./CT_NonVisualPictureProperties";
import { CT_NonVisualBase } from "./CT_NonVisualBase";
import { ST_DrawingElementId } from "./ST_DrawingElementId";
import { CT_NonVisualDrawingProps } from "./CT_NonVisualDrawingProps";
import { CT_ShapeNonVisual } from "./CT_ShapeNonVisual";
import { CT_NonVisualDrawingShapeProps } from "./CT_NonVisualDrawingShapeProps";
import { IShapesOwner_$type } from "./IShapesOwner";
import { CT_Connector } from "./CT_Connector";
import { ColorTransform_Comp } from "./ColorTransform_Comp";
import { CT_TextFont } from "./CT_TextFont";
import { CT_ConnectorLocking } from "./CT_ConnectorLocking";
import { CT_ShapeStyle } from "./CT_ShapeStyle";
import { CT_Connection } from "./CT_Connection";
import { CT_Transform2D } from "./CT_Transform2D";
import { IgnoreChildrenMarker } from "./IgnoreChildrenMarker";
import { CT_StretchInfoProperties } from "./CT_StretchInfoProperties";
import { CT_RelativeRect } from "./CT_RelativeRect";
import { CT_TextParagraph } from "./CT_TextParagraph";
import { CT_RegularTextRun } from "./CT_RegularTextRun";
import { CT_GeomGuide } from "./CT_GeomGuide";
import { CT_GraphicalObjectFrame } from "./CT_GraphicalObjectFrame";
import { CT_GraphicalObject } from "./CT_GraphicalObject";
import { AttributeValue } from "./AttributeValue";
import { Enumerable } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { ColorTransform_Gray } from "./ColorTransform_Gray";
import { ColorTransform_Green } from "./ColorTransform_Green";
import { ColorTransform_GreenMod } from "./ColorTransform_GreenMod";
import { ColorTransform_GreenOff } from "./ColorTransform_GreenOff";
import { CT_GroupFillProperties } from "./CT_GroupFillProperties";
import { CT_GroupShape } from "./CT_GroupShape";
import { CT_GroupLocking } from "./CT_GroupLocking";
import { CT_GroupShapeProperties } from "./CT_GroupShapeProperties";
import { CT_LineEndProperties } from "./CT_LineEndProperties";
import { ST_PositiveFixedAngle } from "./ST_PositiveFixedAngle";
import { ColorTransform_Hue } from "./ColorTransform_Hue";
import { ColorTransform_HueMod } from "./ColorTransform_HueMod";
import { ST_Angle } from "./ST_Angle";
import { ColorTransform_HueOff } from "./ColorTransform_HueOff";
import { ColorTransform_Inv } from "./ColorTransform_Inv";
import { CT_ShapeProperties } from "./CT_ShapeProperties";
import { CT_TextListStyle } from "./CT_TextListStyle";
import { CT_TextParagraphProperties } from "./CT_TextParagraphProperties";
import { ST_TextFontSize } from "./ST_TextFontSize";
import { ColorTransform_Lum } from "./ColorTransform_Lum";
import { ColorTransform_LumMod } from "./ColorTransform_LumMod";
import { ColorTransform_LumOff } from "./ColorTransform_LumOff";
import { CT_NoFillProperties } from "./CT_NoFillProperties";
import { CT_Shape } from "./CT_Shape";
import { CT_PictureLocking } from "./CT_PictureLocking";
import { CT_PresetColor_Core } from "./CT_PresetColor_Core";
import { ColorTransform_Red } from "./ColorTransform_Red";
import { ColorTransform_RedMod } from "./ColorTransform_RedMod";
import { ColorTransform_RedOff } from "./ColorTransform_RedOff";
import { ColorTransform_Sat } from "./ColorTransform_Sat";
import { ColorTransform_SatMod } from "./ColorTransform_SatMod";
import { ColorTransform_SatOff } from "./ColorTransform_SatOff";
import { CT_SchemeColor } from "./CT_SchemeColor";
import { ColorTransform_Shade } from "./ColorTransform_Shade";
import { Drawing2010Slicer } from "./Drawing2010Slicer";
import { CT_Slicer } from "./CT_Slicer";
import { CT_ShapeLocking } from "./CT_ShapeLocking";
import { ICT_ShapePropertiesOwner_$type } from "./ICT_ShapePropertiesOwner";
import { ST_HexColorRGB } from "./ST_HexColorRGB";
import { CT_SRgbColor } from "./CT_SRgbColor";
import { ICT_ShapeStyleOwner_$type } from "./ICT_ShapeStyleOwner";
import { CT_SysColor } from "./CT_SysColor";
import { ColorTransform_Tint } from "./ColorTransform_Tint";
import { IGraphicalObjectContent_$type } from "./IGraphicalObjectContent";
import { AlternateContentChoice } from "./AlternateContentChoice";
import { IGOfficeExtensions } from "./IGOfficeExtensions";
import { nullableEquals } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
import { IEG_ColorChoiceVisitor$2_$type } from "./IEG_ColorChoiceVisitor$2";
import { IEG_ColorTransformVisitor$2_$type } from "./IEG_ColorTransformVisitor$2";
import { IEG_FillModePropertiesVisitor$2_$type } from "./IEG_FillModePropertiesVisitor$2";
import { IEG_FillPropertiesVisitor$2_$type } from "./IEG_FillPropertiesVisitor$2";
import { IEG_GeometryVisitor$2_$type } from "./IEG_GeometryVisitor$2";
import { IEG_LineDashPropertiesVisitor$2_$type } from "./IEG_LineDashPropertiesVisitor$2";
import { IEG_LineFillPropertiesVisitor$2_$type } from "./IEG_LineFillPropertiesVisitor$2";
import { IEG_LineJoinPropertiesVisitor$2_$type } from "./IEG_LineJoinPropertiesVisitor$2";
import { IEG_TextRunVisitor$2_$type } from "./IEG_TextRunVisitor$2";
import { IGraphicalObjectContentVisitor$2_$type } from "./IGraphicalObjectContentVisitor$2";
/**
 * @hidden
 */
export let DrawingPartManagerHelpers = /*@__PURE__*/ (() => {
    class DrawingPartManagerHelpers extends Base {
        static a(a, b) {
            let c = a.s.a(CT_Color.$);
            if (c != null) {
                c.a = b;
                return;
            }
            let d = a.s.a(CT_SolidFillProperties.$);
            if (d != null) {
                d.a = b;
                return;
            }
            let e = a.s.a(CT_StyleMatrixReference.$);
            if (e != null) {
                e.a = b;
                return;
            }
            let f = a.s.a(CT_FontReference.$);
            if (f != null) {
                f.a = b;
                return;
            }
        }
        static b($t, a, b) {
            let c = typeCast(CT_LineProperties.$, a.s.f);
            if (c != null) {
                c.i = b;
                return;
            }
            let d = typeCast(CT_ShapePropertiesBase.$, a.s.f);
            if (d != null) {
                d.a = b;
                return;
            }
            let e = typeCast(CT_TextCharacterProperties.$, a.s.f);
            if (e != null) {
                e.y = b;
                return;
            }
        }
        static c($t, a, b) {
            let c = typeCast(CT_ShapePropertiesBase.$, a.s.f);
            if (c != null) {
                c.a = b;
                return;
            }
        }
        static g(a) {
            let b = a.s.a(CT_PresetGeometry2D.$);
            if (b == null) {
                return;
            }
            let c = new CT_GeomGuideList();
            b.a = c;
            a.s.k(c);
        }
        static d(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_PositiveFixedPercentage();
            let d = DrawingMLMain.kh(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Alpha();
                $ret.a = c;
                return $ret;
            })()));
        }
        static e(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_PositivePercentage();
            let d = DrawingMLMain.ki(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_AlphaMod();
                $ret.a = c;
                return $ret;
            })()));
        }
        static f(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_FixedPercentage();
            let d = DrawingMLMain.kj(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_AlphaOff();
                $ret.a = c;
                return $ret;
            })()));
        }
        static h(a) {
            let b = a.s.a(CT_BlipFillProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f = DrawingMLMain.kl(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_Blip();
                $ret.d = c;
                $ret.e = d;
                $ret.c = toNullable(ST_BlipCompression_$type, e.value);
                return $ret;
            })());
            b.d = g;
            a.s.k(g);
        }
        static i(a) {
            let b = a.s.a(CT_Picture.$);
            if (b != null) {
                let c;
                let d;
                let e = a.d._t.b5(a, c, d);
                c = e.p1;
                d = e.p2;
                let f = ((() => {
                    let $ret = new CT_BlipFillProperties();
                    $ret.b = c;
                    $ret.c = d;
                    return $ret;
                })());
                b.a = f;
                a.s.k(f);
                return;
            }
            else {
                let g;
                let h;
                let i = DrawingMLMain.km(a, g, h);
                g = i.p1;
                h = i.p2;
                let j = ((() => {
                    let $ret = new CT_BlipFillProperties();
                    $ret.b = g;
                    $ret.c = h;
                    return $ret;
                })());
                DrawingPartManagerHelpers.c(CT_BlipFillProperties.$, a, j);
                a.s.k(j);
            }
        }
        static r(a) {
        }
        static s(a) {
            let b = a.s.a(CT_BlipFillProperties.$);
            if (b == null) {
                return;
            }
            let c = b.d;
            if (c == null) {
                return;
            }
            let d = new CT_Color();
            c.a = d;
            a.s.k(d);
        }
        static t(a) {
            let b = a.s.a(CT_BlipFillProperties.$);
            if (b == null) {
                return;
            }
            let c = b.d;
            if (c == null) {
                return;
            }
            let d = new CT_Color();
            c.b = d;
            a.s.k(d);
        }
        static j(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.kn(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Blue();
                $ret.a = c;
                return $ret;
            })()));
        }
        static k(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.ko(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_BlueMod();
                $ret.a = c;
                return $ret;
            })()));
        }
        static l(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.kp(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_BlueOff();
                $ret.a = c;
                return $ret;
            })()));
        }
        static m(a) {
            let b = a.s.a(CT_TextBody.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v = DrawingMLMain.kq(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u);
            c = v.p1;
            d = v.p2;
            e = v.p3;
            f = v.p4;
            g = v.p5;
            h = v.p6;
            i = v.p7;
            j = v.p8;
            k = v.p9;
            l = v.p10;
            m = v.p11;
            n = v.p12;
            o = v.p13;
            p = v.p14;
            q = v.p15;
            r = v.p16;
            s = v.p17;
            t = v.p18;
            u = v.p19;
            b.a = ((() => {
                let $ret = new CT_TextBodyProperties();
                $ret.n = c;
                $ret.l = d;
                $ret.q = e;
                $ret.p = f;
                $ret.t = g;
                $ret.r = h;
                $ret.j = i;
                $ret.s = j;
                $ret.m = k;
                $ret.f = l;
                $ret.k = m;
                $ret.o = n;
                $ret.a = o;
                $ret.i = p;
                $ret.d = q;
                $ret.e = r;
                $ret.h = s;
                $ret.c = t;
                $ret.g = u;
                return $ret;
            })());
            a.s.k(b.a);
        }
        static n(a) {
            let b = a.s.a(CT_GraphicalObjectData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLChart.gy(a, c);
            c = d.p1;
            let e = DrawingMLChart.bf;
            if (b.c == DrawingMLChart2014.ar) {
                e = DrawingMLChart2014.aq;
            }
            b.b.add(Tuple.a(String_$type, Base.$, e, ((() => {
                let $ret = new CT_RelId();
                $ret.a = c;
                return $ret;
            })())));
        }
        static o(a) {
            let b = a.s.a(CT_GraphicalObjectData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLChart2014.au(a, c);
            c = d.p1;
            b.b.add(Tuple.a(String_$type, Base.$, DrawingMLChart2014.aq, ((() => {
                let $ret = new CT_RelId();
                $ret.a = c;
                return $ret;
            })())));
        }
        static p(a) {
            let b = a.s.a(CT_GroupTransform2D.$);
            if (b == null) {
                return;
            }
            let c = new ST_PositiveCoordinate();
            let d = new ST_PositiveCoordinate();
            let e = DrawingMLMain.kr(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_PositiveSize2D();
                $ret.a = c;
                $ret.b = d;
                return $ret;
            })());
            b.m = f;
            a.s.k(f);
        }
        static q(a) {
            let b = a.s.a(CT_GroupTransform2D.$);
            if (b == null) {
                return;
            }
            let c = new ST_Coordinate();
            let d = new ST_Coordinate();
            let e = DrawingMLMain.ks(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_Point2D();
                $ret.a = c;
                $ret.b = d;
                return $ret;
            })());
            b.l = f;
            a.s.k(f);
        }
        static u(a) {
            let b = a.s.a(CT_ConnectorNonVisual.$);
            if (b == null) {
                return;
            }
            let c = new CT_NonVisualConnectorProperties();
            b.b = c;
            a.s.k(c);
        }
        static v(a) {
            let b = a.s.a(CT_GraphicalObjectFrameNonVisual.$);
            if (b == null) {
                return;
            }
            let c = new CT_NonVisualGraphicFrameProperties();
            b.b = c;
            a.s.k(c);
        }
        static w(a) {
            let b = a.s.a(CT_GroupShapeNonVisual.$);
            if (b == null) {
                return;
            }
            let c = new CT_NonVisualGroupDrawingShapeProps();
            b.b = c;
            a.s.k(c);
        }
        static x(a) {
            let b = a.s.a(CT_PictureNonVisual.$);
            if (b == null) {
                return;
            }
            let c;
            let d = a.d._t.b9(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_NonVisualPictureProperties();
                $ret.b = c;
                return $ret;
            })());
            b.b = e;
            a.s.k(e);
        }
        static y(a) {
            let b = a.s.a(CT_NonVisualBase.$);
            if (b == null) {
                return;
            }
            let c = new ST_DrawingElementId();
            let d;
            let e;
            let f;
            let g;
            let h = a.d._t.ca(a, c, d, e, f, g);
            c = h.p1;
            d = h.p2;
            e = h.p3;
            f = h.p4;
            g = h.p5;
            let i = ((() => {
                let $ret = new CT_NonVisualDrawingProps();
                $ret.c = c;
                $ret.f = d;
                $ret.e = e;
                $ret.d = f;
                $ret.g = g;
                return $ret;
            })());
            b.a = i;
            a.s.k(i);
        }
        static z(a) {
            let b = a.s.a(CT_ShapeNonVisual.$);
            if (b == null) {
                return;
            }
            let c;
            let d = a.d._t.cb(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_NonVisualDrawingShapeProps();
                $ret.b = c;
                return $ret;
            })());
            b.b = e;
            a.s.k(e);
        }
        static ac(a) {
            let b = a.s.a(IShapesOwner_$type);
            let c;
            let d;
            let e = a.d._t.cd(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_Connector();
                $ret.c = c;
                $ret.b = d;
                return $ret;
            })());
            if (b != null) {
                b.addShape(a.d, f);
            }
            a.s.k(f);
        }
        static aa(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            b.b.add(new ColorTransform_Comp());
        }
        static ab(a) {
            let b = a.s.a(CT_TextCharacterProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = DrawingMLMain.kv(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = ((() => {
                let $ret = new CT_TextFont();
                $ret.d = c;
                $ret.a = d;
                $ret.c = e;
                $ret.b = f;
                return $ret;
            })());
            b.a = h;
            a.s.k(h);
        }
        static ad(a) {
            let b = a.s.a(CT_NonVisualConnectorProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m = a.d._t.ce(a, c, d, e, f, g, h, i, j, k, l);
            c = m.p1;
            d = m.p2;
            e = m.p3;
            f = m.p4;
            g = m.p5;
            h = m.p6;
            i = m.p7;
            j = m.p8;
            k = m.p9;
            l = m.p10;
            let n = ((() => {
                let $ret = new CT_ConnectorLocking();
                $ret.f = c;
                $ret.j = d;
                $ret.i = e;
                $ret.c = f;
                $ret.g = g;
                $ret.h = h;
                $ret.e = i;
                $ret.a = j;
                $ret.b = k;
                $ret.d = l;
                return $ret;
            })());
            b.c = n;
            a.s.k(n);
        }
        static af(a) {
            let b = a.s.a(CT_TextCharacterProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = DrawingMLMain.le(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = ((() => {
                let $ret = new CT_TextFont();
                $ret.d = c;
                $ret.a = d;
                $ret.c = e;
                $ret.b = toNullable(Number_$type, f);
                return $ret;
            })());
            b.b = h;
            a.s.k(h);
        }
        static ag(a) {
            let b = a.s.a(CT_ShapeStyle.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLMain.lf(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_StyleMatrixReference();
                $ret.b = c;
                return $ret;
            })());
            b.b = e;
            a.s.k(e);
        }
        static ah(a) {
            let b = a.s.a(CT_NonVisualConnectorProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = a.d._t.cf(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_Connection();
                $ret.a = c;
                $ret.b = d;
                return $ret;
            })());
            b.a = f;
            a.s.k(f);
        }
        static ai(a) {
            let b = a.s.a(CT_Transform2D.$);
            if (b == null) {
                return;
            }
            let c = new ST_PositiveCoordinate();
            let d = new ST_PositiveCoordinate();
            let e = DrawingMLMain.lg(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_PositiveSize2D();
                $ret.a = c;
                $ret.b = d;
                return $ret;
            })());
            b.b = f;
            a.s.k(f);
        }
        static aj(a) {
            a.s.k(IgnoreChildrenMarker.a);
        }
        static ak(a) {
            let b = a.s.a(CT_StretchInfoProperties.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = new ST_Percentage();
            let e = new ST_Percentage();
            let f = new ST_Percentage();
            let g = DrawingMLMain.lk(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = ((() => {
                let $ret = new CT_RelativeRect();
                $ret.b = c;
                $ret.d = d;
                $ret.c = e;
                $ret.a = f;
                return $ret;
            })());
            b.a = h;
            a.s.k(h);
        }
        static al(a) {
            let b = a.s.a(CT_ShapeStyle.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLMain.ll(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_StyleMatrixReference();
                $ret.b = c;
                return $ret;
            })());
            b.c = e;
            a.s.k(e);
        }
        static am(a) {
            let b = a.s.a(CT_TextParagraph.$);
            if (b == null) {
                return;
            }
            let c = new CT_RegularTextRun();
            b.c.add(c);
            a.s.k(c);
        }
        static an(a) {
            let b = a.s.a(CT_ShapeStyle.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLMain.lo(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_FontReference();
                $ret.b = c;
                return $ret;
            })());
            b.a = e;
            a.s.k(e);
        }
        static ao(a) {
            let b = a.s.a(CT_GeomGuideList.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = DrawingMLMain.lq(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_GeomGuide();
                $ret.b = c;
                $ret.a = d;
                return $ret;
            })());
            b.b.add(f);
            a.s.k(f);
        }
        static aq(a) {
            let b = a.s.a(CT_GraphicalObjectFrame.$);
            let c = new CT_GraphicalObject();
            if (b != null) {
                b.a = c;
            }
            a.s.k(c);
        }
        static ap(a) {
            let b = a.s.a(CT_GraphicalObject.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLMain.lr(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_GraphicalObjectData();
                $ret.c = c;
                return $ret;
            })());
            b.a = e;
            a.s.k(e);
        }
        static ar(a) {
            let b = a.s.a(IShapesOwner_$type);
            let c;
            let d;
            let e = a.d._t.cg(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_GraphicalObjectFrame();
                $ret.e = c;
                $ret.d = d;
                return $ret;
            })());
            if (b != null) {
                b.addShape(a.d, f);
            }
            a.s.k(f);
        }
        static as(a) {
            let b = Enumerable.ag(AttributeValue.$, a.ab.u, (c) => c.a.e(a.d) == IGOfficeExtensions.aq);
            if (b.d == null || ST_OnOff.e(b.d) == false) {
                a.d._bj();
            }
        }
        static at(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            b.b.add(new ColorTransform_Gray());
        }
        static au(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.lv(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Green();
                $ret.a = c;
                return $ret;
            })()));
        }
        static av(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.lw(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_GreenMod();
                $ret.a = c;
                return $ret;
            })()));
        }
        static aw(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.lx(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_GreenOff();
                $ret.a = c;
                return $ret;
            })()));
        }
        static ax(a) {
            let b = new CT_GroupFillProperties();
            DrawingPartManagerHelpers.c(CT_GroupFillProperties.$, a, b);
            a.s.k(b);
        }
        static ay(a) {
            let b = a.s.a(IShapesOwner_$type);
            let c = new CT_GroupShape();
            if (b != null) {
                b.addShape(a.d, c);
            }
            a.s.k(c);
        }
        static az(a) {
            let b = a.s.a(CT_NonVisualGroupDrawingShapeProps.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j = a.d._t.ci(a, c, d, e, f, g, h, i);
            c = j.p1;
            d = j.p2;
            e = j.p3;
            f = j.p4;
            g = j.p5;
            h = j.p6;
            i = j.p7;
            let k = ((() => {
                let $ret = new CT_GroupLocking();
                $ret.b = c;
                $ret.g = d;
                $ret.f = e;
                $ret.e = f;
                $ret.a = g;
                $ret.c = h;
                $ret.d = i;
                return $ret;
            })());
            b.a = k;
            a.s.k(k);
        }
        static a0(a) {
            let b = a.s.a(CT_GroupShape.$);
            if (b == null) {
                return;
            }
            let c;
            let d = a.d._t.cj(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_GroupShapeProperties();
                $ret.b = c;
                return $ret;
            })());
            b.b = e;
            a.s.k(e);
        }
        static a1(a) {
            let b = a.s.a(CT_LineProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f = DrawingMLMain.lz(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_LineEndProperties();
                $ret.b = c;
                $ret.c = d;
                $ret.a = e;
                return $ret;
            })());
            b.a = g;
            a.s.k(g);
        }
        static a2(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_PositiveFixedAngle();
            let d = DrawingMLMain.l2(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Hue();
                $ret.a = c;
                return $ret;
            })()));
        }
        static a3(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_PositivePercentage();
            let d = DrawingMLMain.l3(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_HueMod();
                $ret.a = c;
                return $ret;
            })()));
        }
        static a4(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Angle();
            let d = DrawingMLMain.l4(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_HueOff();
                $ret.a = c;
                return $ret;
            })()));
        }
        static a5(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            b.b.add(new ColorTransform_Inv());
        }
        static a6(a) {
            let b = a.s.a(CT_TextCharacterProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g = DrawingMLMain.l6(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = ((() => {
                let $ret = new CT_TextFont();
                $ret.d = c;
                $ret.a = d;
                $ret.c = e;
                $ret.b = toNullable(Number_$type, f);
                return $ret;
            })());
            b.c = h;
            a.s.k(h);
        }
        static a7(a) {
            let b = a.s.a(CT_ShapeProperties.$);
            let c = b == null ? a.s.a(CT_TextCharacterProperties.$) : null;
            if (b == null && c == null) {
                return;
            }
            let d;
            let e;
            let f;
            let g;
            let h = DrawingMLMain.l7(a, d, e, f, g);
            d = h.p1;
            e = h.p2;
            f = h.p3;
            g = h.p4;
            let i = ((() => {
                let $ret = new CT_LineProperties();
                $ret.h = d;
                $ret.f = e;
                $ret.g = f;
                $ret.e = g;
                return $ret;
            })());
            if (b != null) {
                b.c = i;
            }
            else {
                c.w = i;
            }
            a.s.k(i);
        }
        static a8(a) {
            let b = a.s.a(CT_ShapeStyle.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLMain.l8(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_StyleMatrixReference();
                $ret.b = c;
                return $ret;
            })());
            b.d = e;
            a.s.k(e);
        }
        static a9(a) {
            let b = a.s.a(CT_TextBody.$);
            if (b == null) {
                return;
            }
            let c = new CT_TextListStyle();
            b.b = c;
            a.s.k(c);
        }
        static bd(a) {
            let b = a.s.a(CT_TextListStyle.$);
            if (b == null) {
                return;
            }
            let c = CT_TextParagraphProperties.b(a);
            b.b = c;
            a.s.k(c);
        }
        static ae(a) {
            let b = a.s.a(CT_TextParagraphProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v = DrawingMLMain.mt(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, DrawingMLMain.c6);
            c = v.p1;
            d = v.p2;
            e = v.p3;
            f = v.p4;
            g = v.p5;
            h = v.p6;
            i = v.p7;
            j = v.p8;
            k = v.p9;
            l = v.p10;
            m = v.p11;
            n = v.p12;
            o = v.p13;
            p = v.p14;
            q = v.p15;
            r = v.p16;
            s = v.p17;
            t = v.p18;
            u = v.p19;
            let w = ((() => {
                let $ret = new CT_TextCharacterProperties();
                $ret.k = c;
                $ret.v = d;
                $ret.t = e;
                $ret.r = ST_TextFontSize.g(f);
                $ret.d = g;
                $ret.i = h;
                $ret.s = i;
                $ret.q = j;
                $ret.j = k;
                $ret.f = l;
                $ret.p = m;
                $ret.m = n;
                $ret.e = o;
                $ret.l = p;
                $ret.g = q;
                $ret.h = r;
                $ret.n = s;
                $ret.o = t;
                $ret.u = u;
                return $ret;
            })());
            b.a = w;
            a.s.k(w);
        }
        static ba(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.mc(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Lum();
                $ret.a = c;
                return $ret;
            })()));
        }
        static bb(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.md(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_LumMod();
                $ret.a = c;
                return $ret;
            })()));
        }
        static bc(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.me(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_LumOff();
                $ret.a = c;
                return $ret;
            })()));
        }
        static be(a) {
            let b = new CT_NoFillProperties();
            DrawingPartManagerHelpers.b(CT_NoFillProperties.$, a, b);
            a.s.k(b);
        }
        static bf(a) {
            let b = a.s.a(CT_Connector.$);
            if (b == null) {
                return;
            }
            let c = new CT_ConnectorNonVisual();
            b.a = c;
            a.s.k(c);
        }
        static bg(a) {
            let b = a.s.a(CT_GraphicalObjectFrame.$);
            if (b == null) {
                return;
            }
            let c = new CT_GraphicalObjectFrameNonVisual();
            b.b = c;
            a.s.k(c);
        }
        static bh(a) {
            let b = a.s.a(CT_GroupShape.$);
            if (b == null) {
                return;
            }
            let c = new CT_GroupShapeNonVisual();
            b.a = c;
            a.s.k(c);
        }
        static bi(a) {
            let b = a.s.a(CT_Picture.$);
            if (b == null) {
                return;
            }
            let c = new CT_PictureNonVisual();
            b.b = c;
            a.s.k(c);
        }
        static bj(a) {
            let b = a.s.a(CT_Shape.$);
            if (b == null) {
                return;
            }
            let c = new CT_ShapeNonVisual();
            b.a = c;
            a.s.k(c);
        }
        static bk(a) {
            let b = a.s.a(CT_Transform2D.$);
            if (b == null) {
                return;
            }
            let c = new ST_Coordinate();
            let d = new ST_Coordinate();
            let e = DrawingMLMain.mj(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_Point2D();
                $ret.a = c;
                $ret.b = d;
                return $ret;
            })());
            b.a = f;
            a.s.k(f);
        }
        static bl(a) {
            let b = a.s.a(CT_TextBody.$);
            if (b == null) {
                return;
            }
            let c = new CT_TextParagraph();
            b.d.add(c);
            a.s.k(c);
        }
        static bm(a) {
            let b = a.s.a(IShapesOwner_$type);
            let c;
            let d;
            let e = a.d._t.cp(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_Picture();
                $ret.d = c;
                $ret.c = d;
                return $ret;
            })());
            if (b != null) {
                b.addShape(a.d, f);
            }
            a.s.k(f);
        }
        static bn(a) {
            let b = a.s.a(CT_NonVisualPictureProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n = DrawingMLMain.ml(a, c, d, e, f, g, h, i, j, k, l, m);
            c = n.p1;
            d = n.p2;
            e = n.p3;
            f = n.p4;
            g = n.p5;
            h = n.p6;
            i = n.p7;
            j = n.p8;
            k = n.p9;
            l = n.p10;
            m = n.p11;
            let o = ((() => {
                let $ret = new CT_PictureLocking();
                $ret.g = c;
                $ret.k = d;
                $ret.j = e;
                $ret.c = f;
                $ret.h = g;
                $ret.i = h;
                $ret.f = i;
                $ret.a = j;
                $ret.b = k;
                $ret.d = l;
                $ret.e = m;
                return $ret;
            })());
            b.a = o;
            a.s.k(o);
        }
        static bo(a) {
            let b = a.s.a(CT_TextParagraph.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n = DrawingMLMain.mm(a, c, d, e, f, g, h, i, j, k, l, m);
            c = n.p1;
            d = n.p2;
            e = n.p3;
            f = n.p4;
            g = n.p5;
            h = n.p6;
            i = n.p7;
            j = n.p8;
            k = n.p9;
            l = n.p10;
            m = n.p11;
            let o = ((() => {
                let $ret = new CT_TextParagraphProperties();
                $ret.k = c;
                $ret.l = d;
                $ret.j = e;
                $ret.h = f;
                $ret.c = g;
                $ret.d = h;
                $ret.m = i;
                $ret.e = j;
                $ret.f = k;
                $ret.i = l;
                $ret.g = m;
                return $ret;
            })());
            b.a = o;
            a.s.k(o);
        }
        static bp(a) {
            let b;
            let c = DrawingMLMain.mn(a, b);
            b = c.p1;
            let d = ((() => {
                let $ret = new CT_PresetColor_Core();
                $ret.c = b;
                return $ret;
            })());
            a.s.k(d);
            DrawingPartManagerHelpers.a(a, d);
        }
        static bq(a) {
            let b = a.s.a(CT_ShapeProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLMain.mo(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_PresetGeometry2D();
                $ret.b = c;
                return $ret;
            })());
            b.e = e;
            a.s.k(e);
        }
        static br(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.mp(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Red();
                $ret.a = c;
                return $ret;
            })()));
        }
        static bs(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.mq(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_RedMod();
                $ret.a = c;
                return $ret;
            })()));
        }
        static bt(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.mr(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_RedOff();
                $ret.a = c;
                return $ret;
            })()));
        }
        static bu(a) {
            let b = a.s.a(CT_TextParagraph.$);
            if (b == null) {
                return;
            }
            let c = new CT_RegularTextRun();
            b.c.add(c);
            a.s.k(c);
        }
        static bv(a) {
            let b = a.s.a(CT_RegularTextRun.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n;
            let o;
            let p;
            let q;
            let r;
            let s;
            let t;
            let u;
            let v = DrawingMLMain.mt(a, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u);
            c = v.p1;
            d = v.p2;
            e = v.p3;
            f = v.p4;
            g = v.p5;
            h = v.p6;
            i = v.p7;
            j = v.p8;
            k = v.p9;
            l = v.p10;
            m = v.p11;
            n = v.p12;
            o = v.p13;
            p = v.p14;
            q = v.p15;
            r = v.p16;
            s = v.p17;
            t = v.p18;
            u = v.p19;
            let w = ((() => {
                let $ret = new CT_TextCharacterProperties();
                $ret.k = c;
                $ret.v = d;
                $ret.t = e;
                $ret.r = ST_TextFontSize.g(f);
                $ret.d = g;
                $ret.i = h;
                $ret.s = i;
                $ret.q = j;
                $ret.j = k;
                $ret.f = l;
                $ret.p = m;
                $ret.m = n;
                $ret.e = o;
                $ret.l = p;
                $ret.g = q;
                $ret.h = r;
                $ret.n = s;
                $ret.o = t;
                $ret.u = u;
                return $ret;
            })());
            b.a = w;
            a.s.k(w);
        }
        static bw(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.mu(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Sat();
                $ret.a = c;
                return $ret;
            })()));
        }
        static bx(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.mv(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_SatMod();
                $ret.a = c;
                return $ret;
            })()));
        }
        static by(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = DrawingMLMain.mw(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_SatOff();
                $ret.a = c;
                return $ret;
            })()));
        }
        static bz(a) {
            let b;
            let c = DrawingMLMain.mx(a, b);
            b = c.p1;
            let d = ((() => {
                let $ret = new CT_SchemeColor();
                $ret.c = b;
                return $ret;
            })());
            a.s.k(d);
            DrawingPartManagerHelpers.a(a, d);
        }
        static b0(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_PositiveFixedPercentage();
            let d = DrawingMLMain.my(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Shade();
                $ret.a = c;
                return $ret;
            })()));
        }
        static b1(a) {
            let b = a.s.a(CT_GraphicalObjectData.$);
            if (b == null) {
                return;
            }
            let c;
            let d = Drawing2010Slicer.au(a, c);
            c = d.p1;
            b.b.add(Tuple.a(String_$type, Base.$, Drawing2010Slicer.at, ((() => {
                let $ret = new CT_Slicer();
                $ret.a = c;
                return $ret;
            })())));
        }
        static b2(a) {
            let b = new CT_SolidFillProperties();
            DrawingPartManagerHelpers.b(CT_SolidFillProperties.$, a, b);
            a.s.k(b);
        }
        static b3(a) {
            let b = a.s.a(IShapesOwner_$type);
            let c;
            let d;
            let e;
            let f;
            let g = a.d._t.cq(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = ((() => {
                let $ret = new CT_Shape();
                $ret.e = c;
                $ret.f = d;
                $ret.c = e;
                $ret.d = f;
                return $ret;
            })());
            if (b != null) {
                b.addShape(a.d, h);
            }
            a.s.k(h);
        }
        static b4(a) {
            let b = a.s.a(CT_NonVisualDrawingShapeProps.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f;
            let g;
            let h;
            let i;
            let j;
            let k;
            let l;
            let m;
            let n = DrawingMLMain.m0(a, c, d, e, f, g, h, i, j, k, l, m);
            c = n.p1;
            d = n.p2;
            e = n.p3;
            f = n.p4;
            g = n.p5;
            h = n.p6;
            i = n.p7;
            j = n.p8;
            k = n.p9;
            l = n.p10;
            m = n.p11;
            let o = ((() => {
                let $ret = new CT_ShapeLocking();
                $ret.f = c;
                $ret.j = d;
                $ret.i = e;
                $ret.c = f;
                $ret.g = g;
                $ret.h = h;
                $ret.e = i;
                $ret.a = j;
                $ret.b = k;
                $ret.d = l;
                $ret.k = m;
                return $ret;
            })());
            b.a = o;
            a.s.k(o);
        }
        static b5(a) {
            let b = a.s.a(ICT_ShapePropertiesOwner_$type);
            if (b == null) {
                return;
            }
            let c;
            let d = a.d._t.cr(a, c);
            c = d.p1;
            let e = ((() => {
                let $ret = new CT_ShapeProperties();
                $ret.b = c;
                return $ret;
            })());
            b.spPr = e;
            a.s.k(e);
        }
        static b6(a) {
            let b = a.s.a(CT_BlipFillProperties.$);
            if (b == null) {
                return;
            }
            let c = new ST_Percentage();
            let d = new ST_Percentage();
            let e = new ST_Percentage();
            let f = new ST_Percentage();
            let g = DrawingMLMain.m1(a, c, d, e, f);
            c = g.p1;
            d = g.p2;
            e = g.p3;
            f = g.p4;
            let h = ((() => {
                let $ret = new CT_RelativeRect();
                $ret.b = c;
                $ret.d = d;
                $ret.c = e;
                $ret.a = f;
                return $ret;
            })());
            b.a = h;
            a.s.k(h);
        }
        static b7(a) {
            let b = new ST_HexColorRGB();
            let c = DrawingMLMain.m2(a, b);
            b = c.p1;
            let d = ((() => {
                let $ret = new CT_SRgbColor();
                $ret.c = b;
                return $ret;
            })());
            a.s.k(d);
            DrawingPartManagerHelpers.a(a, d);
        }
        static b8(a) {
            let b = a.s.a(CT_NonVisualConnectorProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e = a.d._t.cs(a, c, d);
            c = e.p1;
            d = e.p2;
            let f = ((() => {
                let $ret = new CT_Connection();
                $ret.a = c;
                $ret.b = d;
                return $ret;
            })());
            b.b = f;
            a.s.k(f);
        }
        static b9(a) {
            let b = a.s.a(CT_BlipFillProperties.$);
            if (b == null) {
                return;
            }
            let c = new CT_StretchInfoProperties();
            b.e = c;
            a.s.k(c);
        }
        static ca(a) {
            let b = a.s.a(ICT_ShapeStyleOwner_$type);
            if (b == null) {
                return;
            }
            let c = new CT_ShapeStyle();
            b.style = c;
            a.s.k(c);
        }
        static cb(a) {
            let b;
            let c = new ST_HexColorRGB();
            let d = DrawingMLMain.m4(a, b, c);
            b = d.p1;
            c = d.p2;
            let e = ((() => {
                let $ret = new CT_SysColor();
                $ret.d = b;
                $ret.c = c;
                return $ret;
            })());
            a.s.k(e);
            DrawingPartManagerHelpers.a(a, e);
        }
        static cc(a) {
            let b = a.s.a(CT_LineProperties.$);
            if (b == null) {
                return;
            }
            let c;
            let d;
            let e;
            let f = DrawingMLMain.m5(a, c, d, e);
            c = f.p1;
            d = f.p2;
            e = f.p3;
            let g = ((() => {
                let $ret = new CT_LineEndProperties();
                $ret.b = c;
                $ret.c = d;
                $ret.a = e;
                return $ret;
            })());
            b.b = g;
            a.s.k(g);
        }
        static cd(a) {
            let b = a.s.a(CT_RegularTextRun.$);
            if (b == null) {
                return;
            }
            let c;
            let d = DrawingMLMain.m6(a, c);
            c = d.p1;
            b.b = c != null ? c : stringEmpty();
        }
        static ce(a) {
            let b = a.s.a(EG_ColorChoice.$);
            if (b == null) {
                return;
            }
            let c = new ST_PositiveFixedPercentage();
            let d = DrawingMLMain.na(a, c);
            c = d.p1;
            b.b.add(((() => {
                let $ret = new ColorTransform_Tint();
                $ret.a = c;
                return $ret;
            })()));
        }
        static cf(a) {
            let b = a.s.a(CT_Shape.$);
            if (b == null) {
                return;
            }
            let c = new CT_TextBody();
            b.b = c;
            a.s.k(c);
        }
        static cg(a) {
            let b = new ST_Angle();
            let c;
            let d;
            let e = a.s.a(CT_GraphicalObjectFrame.$);
            if (e != null) {
                let f = a.d._t.cv(a, b, c, d);
                b = f.p1;
                c = f.p2;
                d = f.p3;
                let g = ((() => {
                    let $ret = new CT_Transform2D();
                    $ret.j = toNullable(ST_Angle.$, b);
                    $ret.i = toNullable(Boolean_$type, c);
                    $ret.k = toNullable(Boolean_$type, d);
                    return $ret;
                })());
                e.c = g;
                a.s.k(g);
                return;
            }
            let h = DrawingMLMain.nb(a, b, c, d);
            b = h.p1;
            c = h.p2;
            d = h.p3;
            let i = a.s.a(CT_ShapeProperties.$);
            if (i != null) {
                let j = ((() => {
                    let $ret = new CT_Transform2D();
                    $ret.j = toNullable(ST_Angle.$, b);
                    $ret.i = toNullable(Boolean_$type, c);
                    $ret.k = toNullable(Boolean_$type, d);
                    return $ret;
                })());
                i.d = j;
                a.s.k(j);
                return;
            }
            let k = a.s.a(CT_GroupShapeProperties.$);
            if (k != null) {
                let l = ((() => {
                    let $ret = new CT_GroupTransform2D();
                    $ret.j = toNullable(ST_Angle.$, b);
                    $ret.i = toNullable(Boolean_$type, c);
                    $ret.k = toNullable(Boolean_$type, d);
                    return $ret;
                })());
                k.c = l;
                a.s.k(l);
                return;
            }
        }
        static ch(a) {
            a.az(DrawingMLMain.a2, DrawingPartManagerHelpers.d);
            a.az(DrawingMLMain.a7, DrawingPartManagerHelpers.e);
            a.az(DrawingMLMain.a9, DrawingPartManagerHelpers.f);
            a.az(DrawingMLMain.bh, DrawingPartManagerHelpers.g);
            a.az(DrawingMLMain.bt, DrawingPartManagerHelpers.h);
            a.az(DrawingMLMain.ck, DrawingPartManagerHelpers.r);
            a.az(DrawingMLMain.cl, DrawingPartManagerHelpers.s);
            a.az(DrawingMLMain.co, DrawingPartManagerHelpers.t);
            a.az(DrawingMLMain.bu, DrawingPartManagerHelpers.i);
            a.az(DrawingMLMain.bv, DrawingPartManagerHelpers.j);
            a.az(DrawingMLMain.bw, DrawingPartManagerHelpers.k);
            a.az(DrawingMLMain.bx, DrawingPartManagerHelpers.l);
            a.az(DrawingMLMain.b0, DrawingPartManagerHelpers.m);
            a.az(DrawingMLMain.ch, DrawingPartManagerHelpers.p);
            a.az(DrawingMLMain.ci, DrawingPartManagerHelpers.q);
            a.az(DrawingMLMain.cq, DrawingPartManagerHelpers.aa);
            a.az(DrawingMLMain.cu, DrawingPartManagerHelpers.ab);
            a.az(DrawingMLMain.c6, DrawingPartManagerHelpers.ae);
            a.az(DrawingMLMain.df, DrawingPartManagerHelpers.af);
            a.az(DrawingMLMain.dk, DrawingPartManagerHelpers.ag);
            a.az(DrawingMLMain.dr, DrawingPartManagerHelpers.ai);
            a.az(DrawingMLMain.ds, DrawingPartManagerHelpers.aj);
            a.az(DrawingMLMain.dz, DrawingPartManagerHelpers.ak);
            a.az(DrawingMLMain.d0, DrawingPartManagerHelpers.al);
            a.az(DrawingMLMain.d4, DrawingPartManagerHelpers.am);
            a.az(DrawingMLMain.ec, DrawingPartManagerHelpers.an);
            a.az(DrawingMLMain.eh, DrawingPartManagerHelpers.ao);
            a.az(DrawingMLMain.el, DrawingPartManagerHelpers.aq);
            a.az(DrawingMLMain.em, DrawingPartManagerHelpers.ap);
            a.az(DrawingMLMain.en, DrawingPartManagerHelpers.as);
            a.az(DrawingMLMain.eo, DrawingPartManagerHelpers.at);
            a.az(DrawingMLMain.eq, DrawingPartManagerHelpers.au);
            a.az(DrawingMLMain.er, DrawingPartManagerHelpers.av);
            a.az(DrawingMLMain.es, DrawingPartManagerHelpers.aw);
            a.az(DrawingMLMain.et, DrawingPartManagerHelpers.ax);
            a.az(DrawingMLMain.ex, DrawingPartManagerHelpers.a1);
            a.az(DrawingMLMain.e9, DrawingPartManagerHelpers.a2);
            a.az(DrawingMLMain.fa, DrawingPartManagerHelpers.a3);
            a.az(DrawingMLMain.fb, DrawingPartManagerHelpers.a4);
            a.az(DrawingMLMain.fh, DrawingPartManagerHelpers.a5);
            a.az(DrawingMLMain.fr, DrawingPartManagerHelpers.a6);
            a.az(DrawingMLMain.fx, DrawingPartManagerHelpers.a7);
            a.az(DrawingMLMain.fy, DrawingPartManagerHelpers.a8);
            a.az(DrawingMLMain.f2, DrawingPartManagerHelpers.a9);
            a.az(DrawingMLMain.f5, DrawingPartManagerHelpers.ba);
            a.az(DrawingMLMain.f6, DrawingPartManagerHelpers.bb);
            a.az(DrawingMLMain.f7, DrawingPartManagerHelpers.bc);
            a.az(DrawingMLMain.f9, DrawingPartManagerHelpers.bd);
            a.az(DrawingMLMain.gz, DrawingPartManagerHelpers.be);
            a.az(DrawingMLMain.hc, DrawingPartManagerHelpers.bk);
            a.az(DrawingMLMain.he, DrawingPartManagerHelpers.bl);
            a.az(DrawingMLMain.hj, DrawingPartManagerHelpers.bn);
            a.az(DrawingMLMain.hm, DrawingPartManagerHelpers.bo);
            a.az(DrawingMLMain.ho, DrawingPartManagerHelpers.bp);
            a.az(DrawingMLMain.hq, DrawingPartManagerHelpers.bq);
            a.az(DrawingMLMain.hv, DrawingPartManagerHelpers.bu);
            a.az(DrawingMLMain.hy, DrawingPartManagerHelpers.br);
            a.az(DrawingMLMain.hz, DrawingPartManagerHelpers.bs);
            a.az(DrawingMLMain.h0, DrawingPartManagerHelpers.bt);
            a.az(DrawingMLMain.h8, DrawingPartManagerHelpers.bv);
            a.az(DrawingMLMain.ib, DrawingPartManagerHelpers.bw);
            a.az(DrawingMLMain.ic, DrawingPartManagerHelpers.bx);
            a.az(DrawingMLMain.id, DrawingPartManagerHelpers.by);
            a.az(DrawingMLMain.ig, DrawingPartManagerHelpers.bz);
            a.az(DrawingMLMain.ij, DrawingPartManagerHelpers.b0);
            a.az(DrawingMLMain.ip, DrawingPartManagerHelpers.b2);
            a.az(DrawingMLMain.iz, DrawingPartManagerHelpers.b4);
            a.az(DrawingMLMain.i0, DrawingPartManagerHelpers.b6);
            a.az(DrawingMLMain.i1, DrawingPartManagerHelpers.b7);
            a.az(DrawingMLMain.i3, DrawingPartManagerHelpers.b9);
            a.az(DrawingMLMain.i9, DrawingPartManagerHelpers.cb);
            a.az(DrawingMLMain.jb, DrawingPartManagerHelpers.cd);
            a.az(DrawingMLMain.jf, DrawingPartManagerHelpers.cc);
            a.az(DrawingMLMain.jn, DrawingPartManagerHelpers.ce);
            a.az(DrawingMLMain.j9, DrawingPartManagerHelpers.cg);
            a.az(DrawingMLChart.bf, DrawingPartManagerHelpers.n);
            a.az(DrawingMLChart2014.aq, DrawingPartManagerHelpers.o);
            a.az(Drawing2010Slicer.at, DrawingPartManagerHelpers.b1);
            let b = a.d._t;
            if (b != null) {
                a.az(b.ao, DrawingPartManagerHelpers.i);
                a.az(b.aq, DrawingPartManagerHelpers.u);
                a.az(b.ar, DrawingPartManagerHelpers.v);
                a.az(b.as, DrawingPartManagerHelpers.w);
                a.az(b.at, DrawingPartManagerHelpers.x);
                a.az(b.au, DrawingPartManagerHelpers.y);
                a.az(b.av, DrawingPartManagerHelpers.z);
                a.az(b.aw, DrawingPartManagerHelpers.ac);
                a.az(b.ax, DrawingPartManagerHelpers.ad);
                a.az(b.az, DrawingPartManagerHelpers.ah);
                a.az(b.a4, DrawingPartManagerHelpers.ar);
                a.az(b.a5, DrawingPartManagerHelpers.ay);
                a.az(b.a6, DrawingPartManagerHelpers.az);
                a.az(b.a7, DrawingPartManagerHelpers.a0);
                a.az(b.bo, DrawingPartManagerHelpers.bf);
                a.az(b.bp, DrawingPartManagerHelpers.bg);
                a.az(b.bq, DrawingPartManagerHelpers.bh);
                a.az(b.br, DrawingPartManagerHelpers.bi);
                a.az(b.bs, DrawingPartManagerHelpers.bj);
                a.az(b.bt, DrawingPartManagerHelpers.bm);
                a.az(b.bx, DrawingPartManagerHelpers.b3);
                a.az(b.by, DrawingPartManagerHelpers.b5);
                a.az(b.bz, DrawingPartManagerHelpers.b8);
                a.az(b.b0, DrawingPartManagerHelpers.ca);
                a.az(b.b2, DrawingPartManagerHelpers.cf);
                a.az(b.b4, DrawingPartManagerHelpers.cg);
            }
        }
        static ci(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.ni(a, b.a);
            a.ad.k();
        }
        static cj(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.nj(a, b.a);
            a.ad.k();
        }
        static ck(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.nk(a, b.a);
            a.ad.k();
        }
        static cl(a, b) {
            if (b == null) {
                return;
            }
            a.ad.g(Enumerable.o(Tuple$2.$.specialize(Array_$type, IGraphicalObjectContent_$type), AlternateContentChoice.$, b.b, (c) => new AlternateContentChoice(1, c.c, () => c.d._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a))), b.a == null ? null : () => b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a));
        }
        static cm(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.nl(a);
            b.b.q((c) => DrawingPartManagerHelpers.df(a, c));
            a.ad.k();
        }
        static cn(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.nm(a, b.d, b.e, b.c);
            if (b.a != null || b.b != null) {
                a.ad.o(DrawingMLMain.ck);
                if (b.a != null && b.a.a != null) {
                    a.ad.o(DrawingMLMain.cl);
                    b.a.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
                    a.ad.k();
                }
                if (b.b != null && b.b.a != null) {
                    a.ad.o(DrawingMLMain.co);
                    b.b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
                    a.ad.k();
                }
                a.ad.k();
            }
            a.ad.k();
        }
        static co(a, b, c = false) {
            if (b == null) {
                return;
            }
            if (c) {
                a.d._t.cw(a, nullableEquals(b.b, 0) ? toNullable(Number_$type, null) : b.b, nullableEquals(b.c, false) ? toNullable(Boolean_$type, null) : b.c);
            }
            else {
                DrawingMLMain.nn(a, nullableEquals(b.b, 0) ? toNullable(Number_$type, null) : b.b, nullableEquals(b.c, false) ? toNullable(Boolean_$type, null) : b.c);
            }
            DrawingPartManagerHelpers.cn(a, b.d);
            DrawingPartManagerHelpers.ew(a, b.a);
            if (b.e != null) {
                b.e._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            a.ad.k();
        }
        static cp(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.no(a, b.a);
            a.ad.k();
        }
        static cq(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.np(a, b.a);
            a.ad.k();
        }
        static cr(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.nq(a, b.a);
            a.ad.k();
        }
        static cs(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.nr(a, b.n, b.l, b.q, b.p, b.t, b.r, b.j, b.s, b.m, b.f, b.k, b.o, b.a, b.i, b.d, b.e, b.h, b.c, b.g);
            a.ad.k();
        }
        static ct(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.ns(a, b.a, b.b);
            a.ad.k();
        }
        static cu(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.nt(a, b.a, b.b);
            a.ad.k();
        }
        static cv(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.cx(a);
            DrawingPartManagerHelpers.c7(a, b.c);
            DrawingPartManagerHelpers.ey(a, b.b);
            DrawingPartManagerHelpers.da(a, b.a);
            a.ad.k();
        }
        static cw(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.cy(a);
            DrawingPartManagerHelpers.dl(a, b.a);
            a.ad.k();
        }
        static cx(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.cz(a);
            DrawingPartManagerHelpers.ds(a, b.a);
            a.ad.k();
        }
        static cy(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c0(a, b.b);
            DrawingPartManagerHelpers.ee(a, b.a);
            a.ad.k();
        }
        static cz(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c1(a, b.c, b.f, b.e, b.d, b.g);
            a.ad.k();
        }
        static c0(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c2(a, b.b);
            DrawingPartManagerHelpers.eu(a, b.a);
            a.ad.k();
        }
        static c1(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.nv(a);
            a.ad.k();
        }
        static c2(a, b) {
            if (b == null) {
                return;
            }
            let c = b.b.hasValue ? b.b.value : 1;
            DrawingMLMain.nw(a, b.d, b.a, b.c, c);
            a.ad.k();
        }
        static c3(a, b, c) {
            if (b == null) {
                return;
            }
            c(a, b.b, b.c, b.a);
            a.ad.k();
        }
        static c4(a, b, c) {
            if (b == null) {
                return;
            }
            c(a, b.b, b.d, b.c, b.a);
            a.ad.k();
        }
        static c5(a, b) {
            if (b == null) {
                return;
            }
            a.ad.n(b.g);
        }
        static c6(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c4(a);
            DrawingPartManagerHelpers.d6(a, b.a);
            DrawingPartManagerHelpers.ev(a, b.spPr);
            DrawingPartManagerHelpers.e0(a, b.style);
            a.ad.k();
        }
        static c7(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c5(a, b.f, b.j, b.i, b.c, b.g, b.h, b.e, b.a, b.b, b.d);
            a.ad.k();
        }
        static c8(a, b) {
            if (b == null) {
                return;
            }
            let c = b.b.hasValue ? b.b.value : 1;
            DrawingMLMain.of(a, b.d, b.a, b.c, c);
            a.ad.k();
        }
        static c9(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.og(a, b.b);
            if (b.a != null) {
                b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            a.ad.k();
        }
        static da(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c6(a, b.a, b.b);
            a.ad.k();
        }
        static db(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.oh(a, b.a, b.b);
            a.ad.k();
        }
        static dc(a, b) {
            DrawingPartManagerHelpers.c4(a, b, DrawingMLMain.ol);
        }
        static dd(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.om(a, b.b);
            if (b.a != null) {
                b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            a.ad.k();
        }
        static de(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.op(a, b.b);
            if (b.a != null) {
                b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            a.ad.k();
        }
        static df(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.or(a, b.b, b.a);
            a.ad.k();
        }
        static dh(a, b) {
            let c = typeCast(IGraphicalObjectContent_$type, b.d);
            if (c != null) {
                c._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
                return;
            }
            let d = typeCast(CT_RelId.$, b.d);
            if (d != null) {
                switch (b.c) {
                    case DrawingMLChart.bf:
                        DrawingMLChart.gz(a, d.a);
                        a.ad.k();
                        break;
                    case DrawingMLChart2014.aq:
                        DrawingMLChart2014.av(a, d.a);
                        a.ad.k();
                        break;
                    default: break;
                }
                return;
            }
            let e = typeCast(CT_Slicer.$, b.d);
            if (e != null) {
                switch (b.c) {
                    case Drawing2010Slicer.at:
                        Drawing2010Slicer.av(a, e.a);
                        a.ad.k();
                        break;
                    default: break;
                }
                return;
            }
        }
        static di(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.os(a, b.c);
            b.b.q((c) => DrawingPartManagerHelpers.dh(a, c));
            a.ad.k();
        }
        static dj(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.ot(a);
            DrawingPartManagerHelpers.di(a, b.a);
            a.ad.k();
        }
        static dk(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c7(a, b.e, b.d);
            DrawingPartManagerHelpers.d7(a, b.b);
            DrawingPartManagerHelpers.e6(a, b.c, runOn(a.d._t, a.d._t.dn));
            DrawingPartManagerHelpers.dj(a, b.a);
            a.ad.k();
        }
        static dl(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.ou(a, b.c, b.b, b.f, b.a, b.d, b.e);
            a.ad.k();
        }
        static dm(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.ov(a);
            a.ad.k();
        }
        static dn(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.ow(a, b.a);
            a.ad.k();
        }
        static dp(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.ox(a, b.a);
            a.ad.k();
        }
        static dq(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.oy(a, b.a);
            a.ad.k();
        }
        static dr(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c8(a);
            DrawingPartManagerHelpers.d8(a, b.a);
            DrawingPartManagerHelpers.dt(a, b.b);
            b.d.q((c) => c._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a));
            a.ad.k();
        }
        static ds(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.c9(a, b.b, b.g, b.f, b.e, b.a, b.c, b.d);
            a.ad.k();
        }
        static dt(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.da(a, b.b);
            DrawingPartManagerHelpers.e5(a, b.c);
            if (b.a != null) {
                b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            a.ad.k();
        }
        static du(a, b) {
            DrawingPartManagerHelpers.c3(a, b, DrawingMLMain.o0);
        }
        static dv(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.o3(a, b.a);
            a.ad.k();
        }
        static dw(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.o4(a, b.a);
            a.ad.k();
        }
        static dx(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.o5(a, b.a);
            a.ad.k();
        }
        static dy(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.o6(a);
            a.ad.k();
        }
        static dz(a, b) {
            if (b == null) {
                return;
            }
            let c = b.b.hasValue ? b.b.value : 1;
            DrawingMLMain.o7(a, b.d, b.a, b.c, c);
            a.ad.k();
        }
        static d0(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.o8(a, b.h, b.f, b.g, b.e);
            if (b.i != null) {
                b.i._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            if (b.c != null) {
                b.c._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            if (b.d != null) {
                b.d._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            DrawingPartManagerHelpers.du(a, b.a);
            DrawingPartManagerHelpers.e2(a, b.b);
            a.ad.k();
        }
        static d1(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.o9(a, b.b);
            if (b.a != null) {
                b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            a.ad.k();
        }
        static d2(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pd(a, b.a);
            a.ad.k();
        }
        static d3(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pe(a, b.a);
            a.ad.k();
        }
        static d4(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pf(a, b.a);
            a.ad.k();
        }
        static d5(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pi(a);
            a.ad.k();
        }
        static d6(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.dc(a);
            DrawingPartManagerHelpers.cz(a, b.a);
            DrawingPartManagerHelpers.cv(a, b.b);
            a.ad.k();
        }
        static d7(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.dd(a);
            DrawingPartManagerHelpers.cz(a, b.a);
            DrawingPartManagerHelpers.cw(a, b.b);
            a.ad.k();
        }
        static d8(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.de(a);
            DrawingPartManagerHelpers.cz(a, b.a);
            DrawingPartManagerHelpers.cx(a, b.b);
            a.ad.k();
        }
        static d9(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.df(a);
            DrawingPartManagerHelpers.cz(a, b.a);
            DrawingPartManagerHelpers.cy(a, b.b);
            a.ad.k();
        }
        static ea(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.dg(a);
            DrawingPartManagerHelpers.cz(a, b.a);
            DrawingPartManagerHelpers.c0(a, b.b);
            a.ad.k();
        }
        static eb(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pk(a, b.a, b.b);
            a.ad.k();
        }
        static ec(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pl(a);
            DrawingPartManagerHelpers.ef(a, b.a);
            b.c.q((c) => c._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a));
            a.ad.k();
        }
        static ed(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.dh(a);
            DrawingPartManagerHelpers.d9(a, b.b);
            DrawingPartManagerHelpers.co(a, b.a, true);
            DrawingPartManagerHelpers.ev(a, b.spPr);
            a.ad.k();
        }
        static ee(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pm(a, b.g, b.k, b.j, b.c, b.h, b.i, b.f, b.a, b.b, b.d, b.e);
            a.ad.k();
        }
        static ef(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pn(a, b.k, b.l, b.j, b.h, b.c, b.d, b.m, b.e, b.f, b.i, b.g);
            a.ad.k();
        }
        static eg(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.po(a, b.c);
            b.b.q((c) => c._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a));
            a.ad.k();
        }
        static eh(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pp(a, b.b);
            DrawingPartManagerHelpers.cm(a, b.a);
            a.ad.k();
        }
        static ei(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pq(a, b.a);
            a.ad.k();
        }
        static ej(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pr(a, b.a);
            a.ad.k();
        }
        static ek(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.ps(a, b.a);
            a.ad.k();
        }
        static el(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pt(a);
            DrawingPartManagerHelpers.em(a, b.a);
            DrawingMLMain.p7(a, b.b);
            a.ad.k();
            a.ad.k();
        }
        static em(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pu(a, b.k, b.v, b.t, ST_TextFontSize.h(b.r), b.d, b.i, b.s, b.q, b.j, b.f, b.p, b.m, b.e, b.l, b.g, b.h, b.n, b.o, b.u);
            DrawingPartManagerHelpers.d0(a, b.w);
            if (b.y != null) {
                b.y._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            DrawingPartManagerHelpers.dz(a, b.c);
            DrawingPartManagerHelpers.c8(a, b.b);
            DrawingPartManagerHelpers.c2(a, b.a);
            a.ad.k();
        }
        static en(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pv(a, b.a);
            a.ad.k();
        }
        static eo(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pw(a, b.a);
            a.ad.k();
        }
        static ep(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.px(a, b.a);
            a.ad.k();
        }
        static eq(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.py(a, b.c);
            b.b.q((c) => c._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a));
            a.ad.k();
        }
        static dg(a, b) {
            if (b == null) {
                return;
            }
            b._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
        }
        static es(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.p0(a);
            if (b.a != null) {
                b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            a.ad.k();
        }
        static et(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.di(a);
            DrawingPartManagerHelpers.ea(a, b.a);
            DrawingPartManagerHelpers.ev(a, b.spPr);
            DrawingPartManagerHelpers.e0(a, b.style);
            DrawingPartManagerHelpers.e4(a, b.b);
            a.ad.k();
        }
        static eu(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.p1(a, b.f, b.j, b.i, b.c, b.g, b.h, b.e, b.a, b.b, b.d, b.k);
            a.ad.k();
        }
        static ev(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.dj(a, b.b);
            DrawingPartManagerHelpers.e6(a, b.d, DrawingMLMain.qc);
            if (b.e != null) {
                b.e._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            if (b.a != null) {
                b.a._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a);
            }
            DrawingPartManagerHelpers.d0(a, b.c);
            a.ad.k();
        }
        static ew(a, b) {
            DrawingPartManagerHelpers.c4(a, b, DrawingMLMain.p2);
        }
        static er(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.pz(a, b.a);
            a.ad.k();
        }
        static ex(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.p3(a, b.c);
            b.b.q((c) => c._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a));
            a.ad.k();
        }
        static ey(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.dk(a, b.a, b.b);
            a.ad.k();
        }
        static ez(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.p4(a);
            DrawingPartManagerHelpers.dc(a, b.a);
            a.ad.k();
        }
        static e0(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.dl(a);
            DrawingPartManagerHelpers.d1(a, b.d);
            DrawingPartManagerHelpers.dd(a, b.c);
            DrawingPartManagerHelpers.c9(a, b.b);
            DrawingPartManagerHelpers.de(a, b.a);
            a.ad.k();
        }
        static e1(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.p5(a, b.d, b.c);
            b.b.q((c) => c._accept$2$i(XmlPartManagerBase.$, Boolean_$type, DrawingPartManagerHelpers_DrawingSerializationHelper.a, a));
            a.ad.k();
        }
        static e2(a, b) {
            DrawingPartManagerHelpers.c3(a, b, DrawingMLMain.p6);
        }
        static e3(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.qb(a, b.a);
            a.ad.k();
        }
        static e4(a, b) {
            if (b == null) {
                return;
            }
            a.d._t.dm(a);
            DrawingPartManagerHelpers.cs(a, b.a);
            b.d.q((c) => DrawingPartManagerHelpers.ec(a, c));
            a.ad.k();
        }
        static e6(a, b, c) {
            if (b == null) {
                return;
            }
            c(a, b.d(), b.g(), b.h());
            DrawingPartManagerHelpers.eb(a, b.a);
            DrawingPartManagerHelpers.db(a, b.b);
            a.ad.k();
        }
        static e5(a, b) {
            if (b == null) {
                return;
            }
            DrawingMLMain.qc(a, b.d(), b.g(), b.h());
            DrawingPartManagerHelpers.eb(a, b.a);
            DrawingPartManagerHelpers.db(a, b.b);
            DrawingPartManagerHelpers.cu(a, b.l);
            DrawingPartManagerHelpers.ct(a, b.m);
            a.ad.k();
        }
    }
    DrawingPartManagerHelpers.$t = /*@__PURE__*/ markType(DrawingPartManagerHelpers, 'DrawingPartManagerHelpers');
    return DrawingPartManagerHelpers;
})();
/**
 * @hidden
 */
export let DrawingPartManagerHelpers_DrawingSerializationHelper = /*@__PURE__*/ (() => {
    class DrawingPartManagerHelpers_DrawingSerializationHelper extends Base {
        constructor() {
            super();
        }
        _visitCT_SchemeColor$i(a, b) {
            DrawingPartManagerHelpers.eq(b, a);
            return true;
        }
        _visitCT_SRgbColor$i(a, b) {
            DrawingPartManagerHelpers.ex(b, a);
            return true;
        }
        _visitCT_SysColor$i(a, b) {
            DrawingPartManagerHelpers.e1(b, a);
            return true;
        }
        _visitCT_PresetColor$i(a, b) {
            DrawingPartManagerHelpers.eg(b, a);
            return true;
        }
        _visitColorTransform_Alpha$i(a, b) {
            DrawingPartManagerHelpers.ci(b, a);
            return false;
        }
        _visitColorTransform_AlphaMod$i(a, b) {
            DrawingPartManagerHelpers.cj(b, a);
            return false;
        }
        _visitColorTransform_AlphaOff$i(a, b) {
            DrawingPartManagerHelpers.ck(b, a);
            return false;
        }
        _visitColorTransform_Blue$i(a, b) {
            DrawingPartManagerHelpers.cp(b, a);
            return false;
        }
        _visitColorTransform_BlueMod$i(a, b) {
            DrawingPartManagerHelpers.cq(b, a);
            return false;
        }
        _visitColorTransform_BlueOff$i(a, b) {
            DrawingPartManagerHelpers.cr(b, a);
            return false;
        }
        _visitColorTransform_Comp$i(a, b) {
            DrawingPartManagerHelpers.c1(b, a);
            return false;
        }
        _visitColorTransform_Gray$i(a, b) {
            DrawingPartManagerHelpers.dm(b, a);
            return false;
        }
        _visitColorTransform_Green$i(a, b) {
            DrawingPartManagerHelpers.dn(b, a);
            return false;
        }
        _visitColorTransform_GreenMod$i(a, b) {
            DrawingPartManagerHelpers.dp(b, a);
            return false;
        }
        _visitColorTransform_GreenOff$i(a, b) {
            DrawingPartManagerHelpers.dq(b, a);
            return false;
        }
        _visitColorTransform_Hue$i(a, b) {
            DrawingPartManagerHelpers.dv(b, a);
            return false;
        }
        _visitColorTransform_HueMod$i(a, b) {
            DrawingPartManagerHelpers.dw(b, a);
            return false;
        }
        _visitColorTransform_HueOff$i(a, b) {
            DrawingPartManagerHelpers.dx(b, a);
            return false;
        }
        _visitColorTransform_Inv$i(a, b) {
            DrawingPartManagerHelpers.dy(b, a);
            return false;
        }
        _visitColorTransform_Lum$i(a, b) {
            DrawingPartManagerHelpers.d2(b, a);
            return false;
        }
        _visitColorTransform_LumMod$i(a, b) {
            DrawingPartManagerHelpers.d3(b, a);
            return false;
        }
        _visitColorTransform_LumOff$i(a, b) {
            DrawingPartManagerHelpers.d4(b, a);
            return false;
        }
        _visitColorTransform_Red$i(a, b) {
            DrawingPartManagerHelpers.ei(b, a);
            return false;
        }
        _visitColorTransform_RedMod$i(a, b) {
            DrawingPartManagerHelpers.ej(b, a);
            return false;
        }
        _visitColorTransform_RedOff$i(a, b) {
            DrawingPartManagerHelpers.ek(b, a);
            return false;
        }
        _visitColorTransform_Sat$i(a, b) {
            DrawingPartManagerHelpers.en(b, a);
            return false;
        }
        _visitColorTransform_SatMod$i(a, b) {
            DrawingPartManagerHelpers.eo(b, a);
            return false;
        }
        _visitColorTransform_SatOff$i(a, b) {
            DrawingPartManagerHelpers.ep(b, a);
            return false;
        }
        _visitColorTransform_Shade$i(a, b) {
            DrawingPartManagerHelpers.er(b, a);
            return false;
        }
        _visitColorTransform_Tint$i(a, b) {
            DrawingPartManagerHelpers.e3(b, a);
            return false;
        }
        _visitCT_StretchInfoProperties$i(a, b) {
            DrawingPartManagerHelpers.ez(b, a);
            return true;
        }
        _visitCT_TileInfoProperties$i(a, b) {
            return true;
        }
        _visitCT_BlipFillProperties$i(a, b) {
            DrawingPartManagerHelpers.co(b, a);
            return true;
        }
        _visitCT_GroupFillProperties$i(a, b) {
            return true;
        }
        _visitCT_NoFillProperties$i(a, b) {
            DrawingPartManagerHelpers.d5(b, a);
            return true;
        }
        _visitCT_SolidFillProperties$i(a, b) {
            DrawingPartManagerHelpers.es(b, a);
            return true;
        }
        _visitCT_PresetGeometry2D$i(a, b) {
            DrawingPartManagerHelpers.eh(b, a);
            return true;
        }
        _visitCT_CustomGeometry2D$i(a, b) {
            DrawingPartManagerHelpers.c5(b, a);
            return true;
        }
        _visitCT_DashStopList$i(a, b) {
            return true;
        }
        _visitCT_PresetLineDashProperties$i(a, b) {
            return true;
        }
        _visitCT_NoFillProperties1$i(a, b) {
            DrawingPartManagerHelpers.d5(b, a);
            return true;
        }
        _visitCT_SolidFillProperties1$i(a, b) {
            DrawingPartManagerHelpers.es(b, a);
            return true;
        }
        _visitCT_LineJoinBevel$i(a, b) {
            return true;
        }
        _visitCT_LineJoinMiterProperties$i(a, b) {
            return true;
        }
        _visitCT_LineJoinRound$i(a, b) {
            return true;
        }
        _visitCT_RegularTextRun$i(a, b) {
            DrawingPartManagerHelpers.el(b, a);
            return true;
        }
        _visitAlternateGraphicalObjectContent$i(a, b) {
            DrawingPartManagerHelpers.cl(b, a);
            return true;
        }
        _visitCT_Connector$i(a, b) {
            DrawingPartManagerHelpers.c6(b, a);
            return true;
        }
        _visitCT_GraphicalObjectFrame$i(a, b) {
            DrawingPartManagerHelpers.dk(b, a);
            return true;
        }
        _visitCT_GroupShape$i(a, b) {
            DrawingPartManagerHelpers.dr(b, a);
            return true;
        }
        _visitCT_Picture$i(a, b) {
            DrawingPartManagerHelpers.ed(b, a);
            return true;
        }
        _visitCT_Shape$i(a, b) {
            DrawingPartManagerHelpers.et(b, a);
            return true;
        }
    }
    DrawingPartManagerHelpers_DrawingSerializationHelper.$t = /*@__PURE__*/ markType(DrawingPartManagerHelpers_DrawingSerializationHelper, 'DrawingPartManagerHelpers_DrawingSerializationHelper', Base.$, [/*@__PURE__*/ IEG_ColorChoiceVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IEG_ColorTransformVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IEG_FillModePropertiesVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IEG_FillPropertiesVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IEG_GeometryVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IEG_LineDashPropertiesVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IEG_LineFillPropertiesVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IEG_LineJoinPropertiesVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IEG_TextRunVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type), /*@__PURE__*/ IGraphicalObjectContentVisitor$2_$type.specialize(XmlPartManagerBase.$, Boolean_$type)]);
    DrawingPartManagerHelpers_DrawingSerializationHelper.a = /*@__PURE__*/ new DrawingPartManagerHelpers_DrawingSerializationHelper();
    return DrawingPartManagerHelpers_DrawingSerializationHelper;
})();
