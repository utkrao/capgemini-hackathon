/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Stream, markType } from "igniteui-react-core";
import { Buffer } from "igniteui-react-core";
/**
 * @hidden
 */
export let SeekableBufferedStream = /*@__PURE__*/ (() => {
    class SeekableBufferedStream extends Stream {
        constructor(a) {
            super();
            this._w = null;
            this._u = 0;
            this._v = 0;
            this._o = null;
            this._r = 0;
            this._s = 0;
            this._p = false;
            this._q = 0;
            this._w = a;
            this._o = new Array(10240);
            this._u = a.length;
            this._v = a.position;
        }
        get_canRead() {
            return this._w.canRead;
        }
        get canRead() {
            return this.get_canRead();
        }
        get_canSeek() {
            return this._w.canSeek;
        }
        get canSeek() {
            return this.get_canSeek();
        }
        get_canWrite() {
            return this._w.canWrite;
        }
        get canWrite() {
            return this.get_canWrite();
        }
        disposeCore(a) {
            try {
                if (a) {
                    this.flush();
                }
            }
            finally {
                super.disposeCore(a);
            }
        }
        flush() {
            if (this._p) {
                this._p = false;
                if (this._q > 0) {
                    this._w.seek(-this._q, 1);
                }
                this._w.write(this._o, 0, this._r);
            }
            this._w.position = this._v;
            this._s = 0;
            this._r = 0;
            this._q = 0;
        }
        get_length() {
            return this._u;
        }
        get length() {
            return this.get_length();
        }
        get_position() {
            return this._v;
        }
        set_position(a) {
            if (this._v != a) {
                this.seek(a - this._v, 1);
            }
        }
        get position() {
            return this.get_position();
        }
        set position(a) {
            this.set_position(a);
        }
        read(a, b, c) {
            if (c == 0) {
                return 0;
            }
            let d = c - (this._r - this._s);
            if (d > 0) {
                if (this._r + d <= 10240) {
                    if (this._q != this._r) {
                        this._w.seek(this._r - this._q, 1);
                    }
                    let e = this._w.read(this._o, this._r, 10240 - this._r);
                    this._r += e;
                    this._q = this._r;
                    d -= e;
                }
                else {
                    this.flush();
                    if (c <= 10240) {
                        this._r = this._w.read(this._o, 0, 10240);
                        this._q = this._r;
                        d = c - this._r;
                    }
                    else {
                        let f = this._w.read(a, b, c);
                        this._v += f;
                        return f;
                    }
                }
            }
            if (d < 0) {
                d = 0;
            }
            let g = c - d;
            Buffer.c(this._o, this._s, a, b, g);
            this._s += g;
            this._v += g;
            return g;
        }
        seek(a, b) {
            if (b != 1) {
                switch (b) {
                    case 0:
                        this.position = a;
                        break;
                    case 2:
                        this.position = this._u + a;
                        break;
                    default: break;
                }
                return this._v;
            }
            if (a == 0) {
                return this._v;
            }
            this._v += a;
            if (-2147483648 <= a && a <= 0x7FFFFFFF) {
                this._s += a;
                if (this._s >= 0) {
                    if (this._s <= this._r) {
                        return this._v;
                    }
                    if (this._s <= 10240) {
                        if (this._w.length - this._w.position <= this._r - this._q) {
                            return this._v;
                        }
                        if (this._q != this._r) {
                            this._w.seek(this._r - this._q, 1);
                        }
                        let c = this._w.read(this._o, this._r, 10240 - this._r);
                        this._r += c;
                        this._q = this._r;
                        return this._v;
                    }
                }
            }
            this.flush();
            return this._v;
        }
        setLength(a) {
            this.flush();
            this._w.setLength(a);
            this._u = this._w.length;
            this._v = this._w.position;
        }
        write(a, b, c) {
            if (c == 0) {
                return;
            }
            let d = c - (this._r - this._s);
            if (d > 0) {
                if (10240 < this._r + d) {
                    this.flush();
                    if (10240 < c) {
                        this._w.write(a, b, c);
                        this._v += c;
                        if (this._u < this._v) {
                            this._u = this._v;
                        }
                        return;
                    }
                }
            }
            this._p = true;
            Buffer.c(a, b, this._o, this._s, c);
            this._s += c;
            this._v += c;
            if (this._r < this._s) {
                this._r = this._s;
            }
            if (this._u < this._v) {
                this._u = this._v;
            }
        }
    }
    SeekableBufferedStream.$t = /*@__PURE__*/ markType(SeekableBufferedStream, 'SeekableBufferedStream', Stream.$);
    return SeekableBufferedStream;
})();
