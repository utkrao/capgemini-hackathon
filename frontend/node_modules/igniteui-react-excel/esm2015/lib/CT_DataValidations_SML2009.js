/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Boolean_$type, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { CultureInfo } from "igniteui-react-core";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let CT_DataValidations_SML2009 = /*@__PURE__*/ (() => {
    class CT_DataValidations_SML2009 extends Base {
        constructor() {
            super();
            this.c = null;
            this.g = toNullable(Boolean_$type, null);
            this.i = toNullable(Number_$type, null);
            this.k = toNullable(Number_$type, null);
            this.e = toNullable(Number_$type, null);
        }
        get b() {
            return this.c;
        }
        set b(a) {
            this.c = a;
        }
        get f() {
            return this.g;
        }
        set f(a) {
            this.g = a;
        }
        get h() {
            return this.i;
        }
        set h(a) {
            this.i = a;
        }
        get j() {
            return this.k;
        }
        set j(a) {
            this.k = a;
        }
        get d() {
            return this.e;
        }
        set d(a) {
            this.e = a;
        }
        static l(a, b, c, d, e) {
            b = toNullable(Boolean_$type, null);
            c = toNullable(Number_$type, null);
            d = toNullable(Number_$type, null);
            e = toNullable(Number_$type, null);
            for (let f of fromEnum(a.ab.u)) {
                switch (f.a.e(a.d)) {
                    case "disablePrompts":
                        b = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    case "xWindow":
                        c = toNullable(Number_$type, parseUInt32_1(f.d, CultureInfo.invariantCulture));
                        break;
                    case "yWindow":
                        d = toNullable(Number_$type, parseUInt32_1(f.d, CultureInfo.invariantCulture));
                        break;
                    case "count":
                        e = toNullable(Number_$type, parseUInt32_1(f.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
            ;
            return {
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        static m(a, b, c = toNullable(Number_$type, null), d = toNullable(Boolean_$type, null), e = toNullable(Number_$type, null), f = toNullable(Number_$type, null)) {
            a.ad.p(b, null);
            let g = null;
            let h = null;
            if (c.hasValue) {
                h = "count";
                g = c.value.toString();
                a.ad.h(h, g);
            }
            if (d.hasValue) {
                h = "disablePrompts";
                g = ST_OnOff.g(d.value);
                a.ad.h(h, g);
            }
            if (e.hasValue) {
                h = "xWindow";
                g = e.value.toString();
                a.ad.h(h, g);
            }
            if (f.hasValue) {
                h = "yWindow";
                g = f.value.toString();
                a.ad.h(h, g);
            }
            ;
        }
    }
    CT_DataValidations_SML2009.$t = /*@__PURE__*/ markType(CT_DataValidations_SML2009, 'CT_DataValidations_SML2009');
    return CT_DataValidations_SML2009;
})();
