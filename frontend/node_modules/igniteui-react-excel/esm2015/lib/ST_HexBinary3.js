/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { tryParseInt32_1, intToString1 } from "igniteui-react-core";
/**
 * @hidden
 */
export let ST_HexBinary3 = /*@__PURE__*/ (() => {
    class ST_HexBinary3 extends Base {
        constructor(a, b, c) {
            super();
            this.d = 0;
            this.c = 0;
            this.b = 0;
            this.d = a;
            this.c = b;
            this.b = c;
        }
        static a(a) {
            if (stringIsNullOrEmpty(a)) {
                return null;
            }
            if (a.length != 6) {
                return null;
            }
            let b, c, d;
            if (((() => { let e = tryParseInt32_1(a.substr(0, 2), b); b = e.p1; return e.ret; })()) && ((() => { let e = tryParseInt32_1(a.substr(2, 2), c); c = e.p1; return e.ret; })()) && ((() => { let e = tryParseInt32_1(a.substr(4, 2), d); d = e.p1; return e.ret; })())) {
                return new ST_HexBinary3(b, c, d);
            }
            else {
            }
            return null;
        }
        f() {
            let a = new StringBuilder(1, 6);
            a.l(intToString1(this.d, "X"));
            a.l(intToString1(this.c, "X"));
            a.l(intToString1(this.b, "X"));
            return a.toString();
        }
        toString() {
            return this.f();
        }
    }
    ST_HexBinary3.$t = /*@__PURE__*/ markType(ST_HexBinary3, 'ST_HexBinary3');
    return ST_HexBinary3;
})();
