import { Stream, SeekOrigin, Nullable$1, Type } from "igniteui-react-core";
import { IBiffRecordStream } from "./IBiffRecordStream";
import { List$1 } from "igniteui-react-core";
import { BiffRecordStream_RecordBlockInfo } from "./BiffRecordStream_RecordBlockInfo";
import { WorkbookLoadManager } from "./WorkbookLoadManager";
import { WorkbookSaveManager } from "./WorkbookSaveManager";
import { InPlaceTransform } from "./InPlaceTransform";
import { BinaryReader } from "igniteui-react-core";
import { LengthType } from "./LengthType";
import { WorkbookColorInfo } from "./WorkbookColorInfo";
import { ColorableItem } from "./ColorableItem";
import { CellFillGradient } from "./CellFillGradient";
import { MemoryStream } from "igniteui-react-core";
import { StringElement } from "./StringElement";
import { BiffRecordStream_FormattedStringInfo } from "./BiffRecordStream_FormattedStringInfo";
import { FormattedStringElement } from "./FormattedStringElement";
import { WorkItem } from "./WorkItem";
import { CellAddress } from "./CellAddress";
import { CellAddressRange } from "./CellAddressRange";
import { Rect } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class BiffRecordStream extends Stream implements IBiffRecordStream {
    static $t: Type;
    private _aj;
    private _bi;
    private _bm;
    private _bl;
    private _a4;
    private _a7;
    private _am;
    private _aw;
    private _ah;
    private _a8;
    private _au;
    private _at;
    private _w;
    private _ap;
    private _o;
    private _ai;
    private readonly _q;
    constructor(a: number, b: InPlaceTransform);
    constructor(a: number, b: WorkbookLoadManager, c: Stream, d: BinaryReader, e: InPlaceTransform);
    constructor(a: number, b: WorkbookSaveManager, c: Stream, d: number, e: InPlaceTransform);
    constructor(a: number, ..._rest: any[]);
    get parentStreamRaw(): IBiffRecordStream;
    set parentStreamRaw(a: IBiffRecordStream);
    writeByte(a: number): void;
    writeByteArray(a: number[]): void;
    writeDouble(a: number): void;
    writeString(a: string, b: LengthType): void;
    protected get_canRead(): boolean;
    get canRead(): boolean;
    protected get_canSeek(): boolean;
    get canSeek(): boolean;
    protected get_canWrite(): boolean;
    get canWrite(): boolean;
    protected disposeCore(a: boolean): void;
    protected get_length(): number;
    get length(): number;
    flush(): void;
    protected get_position(): number;
    protected set_position(a: number): void;
    get position(): number;
    set position(a: number);
    read(a: number[], b: number, c: number): number;
    seek(a: number, b: SeekOrigin): number;
    setLength(a: number): void;
    write(a: number[], b: number, c: number): void;
    protected abstract _x(a: Stream, b: number): BiffRecordStream;
    protected abstract _a0(): number;
    protected abstract _ba(a: BinaryReader): number;
    protected abstract _bb(a: BinaryReader): number;
    protected abstract _cu(a: Stream, b: number, c: boolean): void;
    protected abstract _cv(a: Stream, b: number): void;
    abstract writeFullColorExt(a: WorkbookColorInfo, b: ColorableItem): void;
    abstract writeXFExtGradient(a: CellFillGradient): void;
    _addSubStream(a: IBiffRecordStream): void;
    _appendNextRecordIfType(a: number): boolean;
    _capCurrentBlock(): void;
    _getDataSize(a: number, b: LengthType, c: string): number;
    _getStartOfRecord(): number;
    readByteFromBuffer(a: number[], b: number): {
        ret: number;
        p0?: number[];
        p1?: number;
    };
    _readBytes(a: number): number[];
    readBytesFromBuffer(a: number, b: number[], c: number): {
        ret: number[];
        p1?: number[];
        p2?: number;
    };
    _readDouble(): number;
    readDoubleFromBuffer(a: number[], b: number): {
        ret: number;
        p0?: number[];
        p1?: number;
    };
    _readFormattedString(a: LengthType): StringElement;
    _readFormattedString1(a: number): StringElement;
    _tryReadFormattedString(a: number, b: StringElement): {
        ret: boolean;
        p1: StringElement;
    };
    _readFormattedStringBlock(a: number, b: List$1<StringElement>): WorkItem;
    readFormattedStringFromBuffer(a: LengthType, b: number[], c: number): {
        ret: StringElement;
        p1?: number[];
        p2?: number;
    };
    _readFormattedStringFromBuffer1(a: number, b: number[], c: number): {
        ret: StringElement;
        p1?: number[];
        p2?: number;
    };
    _readFormulaCellAddressFromBuffer(a: number[], b: number): {
        ret: CellAddress;
        p0?: number[];
        p1?: number;
    };
    _readFormulaCellAddressRangeFromBuffer(a: number[], b: number): {
        ret: CellAddressRange;
        p0?: number[];
        p1?: number;
    };
    _ao(a: number[], b: number): {
        ret: List$1<CellAddressRange>;
        p0?: number[];
        p1?: number;
    };
    _readInt16(): number;
    _readInt32(): number;
    _readInt16FromBuffer(a: number[], b: number): {
        ret: number;
        p0?: number[];
        p1?: number;
    };
    _readInt32FromBuffer(a: number[], b: number): {
        ret: number;
        p0?: number[];
        p1?: number;
    };
    _readNextBlockType(): Nullable$1<number>;
    _readNullTerminatedUnicodeString(): string;
    _writeNullTerminatedUnicodeString(a: string): void;
    _readRect(): Rect;
    _readUInt16(): number;
    _readUInt16FromBuffer(a: number[], b: number): {
        ret: number;
        p0?: number[];
        p1?: number;
    };
    _readUInt32(): number;
    _readUInt32FromBuffer(a: number[], b: number): {
        ret: number;
        p0?: number[];
        p1?: number;
    };
    _syncWorkbookStreamPosition(): void;
    _write9(a: number): void;
    _write2(a: number[]): void;
    _write10(a: number): void;
    _write12(a: number): void;
    _write11(a: number): void;
    _write17(a: number): void;
    _write18(a: number): void;
    _write19(a: number): void;
    _write14(a: string): void;
    _write15(a: string, b: LengthType): void;
    _write16(a: string, b: LengthType, c: boolean): void;
    _write3(a: CellAddress): void;
    _write4(a: CellAddressRange): void;
    _write1(a: List$1<CellAddressRange>, b?: boolean): number;
    _write5(a: StringElement): void;
    _write8(a: StringElement, b: boolean): void;
    _write6(a: StringElement, b: LengthType): void;
    _write7(a: StringElement, b: LengthType, c: boolean): void;
    _write13(a: MemoryStream): void;
    _writeEMURect(a: Rect): void;
    protected _bw(): void;
    protected _af(a: number): boolean;
    private _ay;
    protected _aa(a: number, b: number): BiffRecordStream_RecordBlockInfo;
    protected _b3(a: BiffRecordStream, b: Stream, c: number): void;
    protected _z(a: number): BiffRecordStream_FormattedStringInfo;
    protected _ak(a: number, b: number): boolean;
    protected _bh(a: number[], b: number, c: number): number;
    protected _ct(a: number): void;
    private _bv;
    private _bx;
    private _by;
    private static _t;
    private static _b0;
    private _b1;
    private _a3;
    private _b2;
    private _b4;
    private _b5;
    private _y;
    private _b6;
    _readFormattingRunsFromBuffer(a: FormattedStringElement, b: number, c: number[], d: number): {
        p2?: number[];
        p3?: number;
    };
    private _bc;
    private _b8;
    private _b9;
    private _cx;
    private _cy;
    private _cz;
    protected abstract _ax(): number;
    protected abstract _bj(): number;
    protected abstract _a1(): number;
    protected abstract _a2(): number;
    protected get _an(): List$1<BiffRecordStream_RecordBlockInfo>;
    get _bytesAvailableInCurrentBlock(): number;
    get endUnderlyingStreamPosition(): number;
    private _loadManager_1;
    get _loadManager(): WorkbookLoadManager;
    set _loadManager(a: WorkbookLoadManager);
    get _nextBlockTypeInternal(): number;
    set _nextBlockTypeInternal(a: number);
    protected get _bn(): Stream;
    get _positionInCurrentBlock(): number;
    get _bf(): number;
    private _saveManager;
    get saveManager(): WorkbookSaveManager;
    set saveManager(a: WorkbookSaveManager);
    get _transform(): InPlaceTransform;
}
