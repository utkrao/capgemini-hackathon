import { Base, Nullable$1, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { CT_ColorScale } from "./CT_ColorScale";
import { CT_DataBar } from "./CT_DataBar";
import { CT_IconSet } from "./CT_IconSet";
import { CT_Dxf } from "./CT_Dxf";
import { CT_ExtensionList } from "./CT_ExtensionList";
import { ST_CfType } from "./ST_CfType";
import { ST_ConditionalFormattingOperator } from "./ST_ConditionalFormattingOperator";
import { ST_TimePeriod } from "./ST_TimePeriod";
import { XmlPartManagerBase } from "./XmlPartManagerBase";
/**
 * @hidden
 */
export declare class CT_CfRule_SML2009 extends Base {
    static $t: Type;
    private r;
    private d;
    private f;
    private j;
    private h;
    private b;
    private ap;
    private af;
    private al;
    private t;
    private ad;
    private x;
    private ab;
    private at;
    private an;
    private ah;
    private aj;
    private z;
    private v;
    private ar;
    constructor();
    get q(): List$1<string>;
    set q(a: List$1<string>);
    get c(): CT_ColorScale;
    set c(a: CT_ColorScale);
    get e(): CT_DataBar;
    set e(a: CT_DataBar);
    get i(): CT_IconSet;
    set i(a: CT_IconSet);
    get g(): CT_Dxf;
    set g(a: CT_Dxf);
    get a(): CT_ExtensionList;
    set a(a: CT_ExtensionList);
    get ao(): Nullable$1<ST_CfType>;
    set ao(a: Nullable$1<ST_CfType>);
    get ae(): Nullable$1<number>;
    set ae(a: Nullable$1<number>);
    get ak(): Nullable$1<boolean>;
    set ak(a: Nullable$1<boolean>);
    get s(): Nullable$1<boolean>;
    set s(a: Nullable$1<boolean>);
    get ac(): Nullable$1<boolean>;
    set ac(a: Nullable$1<boolean>);
    get w(): Nullable$1<boolean>;
    set w(a: Nullable$1<boolean>);
    get aa(): Nullable$1<ST_ConditionalFormattingOperator>;
    set aa(a: Nullable$1<ST_ConditionalFormattingOperator>);
    get as(): string;
    set as(a: string);
    get am(): Nullable$1<ST_TimePeriod>;
    set am(a: Nullable$1<ST_TimePeriod>);
    get ag(): Nullable$1<number>;
    set ag(a: Nullable$1<number>);
    get ai(): Nullable$1<number>;
    set ai(a: Nullable$1<number>);
    get y(): Nullable$1<boolean>;
    set y(a: Nullable$1<boolean>);
    get u(): Nullable$1<boolean>;
    set u(a: Nullable$1<boolean>);
    get aq(): string;
    set aq(a: string);
    static au(a: XmlPartManagerBase, b: Nullable$1<ST_CfType>, c: Nullable$1<number>, d: Nullable$1<boolean>, e: Nullable$1<boolean>, f: Nullable$1<boolean>, g: Nullable$1<boolean>, h: Nullable$1<ST_ConditionalFormattingOperator>, i: string, j: Nullable$1<ST_TimePeriod>, k: Nullable$1<number>, l: Nullable$1<number>, m: Nullable$1<boolean>, n: Nullable$1<boolean>, o: string): {
        p1: Nullable$1<ST_CfType>;
        p2: Nullable$1<number>;
        p3: Nullable$1<boolean>;
        p4: Nullable$1<boolean>;
        p5: Nullable$1<boolean>;
        p6: Nullable$1<boolean>;
        p7: Nullable$1<ST_ConditionalFormattingOperator>;
        p8: string;
        p9: Nullable$1<ST_TimePeriod>;
        p10: Nullable$1<number>;
        p11: Nullable$1<number>;
        p12: Nullable$1<boolean>;
        p13: Nullable$1<boolean>;
        p14: string;
    };
    static av(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_ConditionalFormattingOperator>, d?: Nullable$1<boolean>, e?: Nullable$1<boolean>, f?: Nullable$1<boolean>, g?: Nullable$1<boolean>, h?: string, i?: Nullable$1<boolean>, j?: Nullable$1<number>, k?: Nullable$1<number>, l?: Nullable$1<number>, m?: Nullable$1<boolean>, n?: string, o?: Nullable$1<ST_TimePeriod>, p?: Nullable$1<ST_CfType>): void;
}
