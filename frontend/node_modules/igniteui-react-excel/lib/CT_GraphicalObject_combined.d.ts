import { Base, Type } from "igniteui-react-core";
import { OfficeDocumentManager } from "./OfficeDocumentManager";
import { List$1 } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ICT_ShapePropertiesOwner } from "./ICT_ShapePropertiesOwner";
import { ICT_ShapeStyleOwner } from "./ICT_ShapeStyleOwner";
import { CT_ConnectorNonVisual } from "./CT_ConnectorNonVisual";
import { CT_ShapeProperties } from "./CT_ShapeProperties";
import { CT_ShapeStyle } from "./CT_ShapeStyle";
import { CT_GraphicalObjectFrameNonVisual } from "./CT_GraphicalObjectFrameNonVisual";
import { CT_Transform2D } from "./CT_Transform2D";
import { CT_GroupShapeProperties } from "./CT_GroupShapeProperties";
import { CT_GroupShapeNonVisual } from "./CT_GroupShapeNonVisual";
import { CT_BlipFillProperties } from "./CT_BlipFillProperties";
import { CT_PictureNonVisual } from "./CT_PictureNonVisual";
import { CT_ShapeNonVisual } from "./CT_ShapeNonVisual";
import { CT_TextBody } from "./CT_TextBody";
/**
 * @hidden
 */
export declare class CT_GraphicalObject extends Base {
    static $t: Type;
    a: CT_GraphicalObjectData;
}
/**
 * @hidden
 */
export interface IGraphicalObjectContent {
    _accept$2$i<TArg, TResult>($tArg: Type, $tResult: Type, a: IGraphicalObjectContentVisitor$2<TArg, TResult>, b: TArg): TResult;
    getStrictElementName(a: OfficeDocumentManager): string;
}
/**
 * @hidden
 */
export declare let IGraphicalObjectContent_$type: Type;
/**
 * @hidden
 */
export declare class AlternateGraphicalObjectContent extends Base implements IGraphicalObjectContent {
    static $t: Type;
    b: List$1<Tuple$2<XmlNamespaceDefinitionBase[], IGraphicalObjectContent>>;
    a: IGraphicalObjectContent;
    _accept$2$i<TArg, TResult>($tArg: Type, $tResult: Type, a: IGraphicalObjectContentVisitor$2<TArg, TResult>, b: TArg): TResult;
    getStrictElementName(a: OfficeDocumentManager): string;
}
/**
 * @hidden
 */
export declare class CT_Connector extends Base implements IGraphicalObjectContent, ICT_ShapePropertiesOwner, ICT_ShapeStyleOwner {
    static $t: Type;
    b: boolean;
    c: string;
    a: CT_ConnectorNonVisual;
    private _spPr;
    get spPr(): CT_ShapeProperties;
    set spPr(a: CT_ShapeProperties);
    private _style;
    get style(): CT_ShapeStyle;
    set style(a: CT_ShapeStyle);
    _accept$2$i<TArg, TResult>($tArg: Type, $tResult: Type, a: IGraphicalObjectContentVisitor$2<TArg, TResult>, b: TArg): TResult;
    getStrictElementName(a: OfficeDocumentManager): string;
}
/**
 * @hidden
 */
export interface IShapesOwner {
    addShape(a: OfficeDocumentManager, b: IGraphicalObjectContent): void;
}
/**
 * @hidden
 */
export declare let IShapesOwner_$type: Type;
/**
 * @hidden
 */
export declare class CT_GraphicalObjectData extends Base implements IShapesOwner {
    static $t: Type;
    private a;
    get b(): List$1<Tuple$2<string, any>>;
    set b(a: List$1<Tuple$2<string, any>>);
    c: string;
    addShape(a: OfficeDocumentManager, b: IGraphicalObjectContent): void;
}
/**
 * @hidden
 */
export declare class CT_GraphicalObjectFrame extends Base implements IGraphicalObjectContent {
    static $t: Type;
    d: boolean;
    a: CT_GraphicalObject;
    e: string;
    b: CT_GraphicalObjectFrameNonVisual;
    c: CT_Transform2D;
    _accept$2$i<TArg, TResult>($tArg: Type, $tResult: Type, a: IGraphicalObjectContentVisitor$2<TArg, TResult>, b: TArg): TResult;
    getStrictElementName(a: OfficeDocumentManager): string;
}
/**
 * @hidden
 */
export declare class CT_GroupShape extends Base implements IGraphicalObjectContent, IShapesOwner {
    static $t: Type;
    b: CT_GroupShapeProperties;
    a: CT_GroupShapeNonVisual;
    private c;
    get d(): List$1<IGraphicalObjectContent>;
    _accept$2$i<TArg, TResult>($tArg: Type, $tResult: Type, a: IGraphicalObjectContentVisitor$2<TArg, TResult>, b: TArg): TResult;
    getStrictElementName(a: OfficeDocumentManager): string;
    addShape(a: OfficeDocumentManager, b: IGraphicalObjectContent): void;
}
/**
 * @hidden
 */
export declare class CT_Picture extends Base implements IGraphicalObjectContent, ICT_ShapePropertiesOwner {
    static $t: Type;
    a: CT_BlipFillProperties;
    c: boolean;
    d: string;
    b: CT_PictureNonVisual;
    private _spPr;
    get spPr(): CT_ShapeProperties;
    set spPr(a: CT_ShapeProperties);
    _accept$2$i<TArg, TResult>($tArg: Type, $tResult: Type, a: IGraphicalObjectContentVisitor$2<TArg, TResult>, b: TArg): TResult;
    getStrictElementName(a: OfficeDocumentManager): string;
}
/**
 * @hidden
 */
export declare class CT_Shape extends Base implements IGraphicalObjectContent, ICT_ShapePropertiesOwner, ICT_ShapeStyleOwner {
    static $t: Type;
    c: boolean;
    d: boolean;
    e: string;
    f: string;
    a: CT_ShapeNonVisual;
    private _spPr;
    get spPr(): CT_ShapeProperties;
    set spPr(a: CT_ShapeProperties);
    private _style;
    get style(): CT_ShapeStyle;
    set style(a: CT_ShapeStyle);
    b: CT_TextBody;
    _accept$2$i<TArg, TResult>($tArg: Type, $tResult: Type, a: IGraphicalObjectContentVisitor$2<TArg, TResult>, b: TArg): TResult;
    getStrictElementName(a: OfficeDocumentManager): string;
}
/**
 * @hidden
 */
export interface IGraphicalObjectContentVisitor$2<TArg, TResult> {
    _visitAlternateGraphicalObjectContent$i(a: AlternateGraphicalObjectContent, b: TArg): TResult;
    _visitCT_Connector$i(a: CT_Connector, b: TArg): TResult;
    _visitCT_GraphicalObjectFrame$i(a: CT_GraphicalObjectFrame, b: TArg): TResult;
    _visitCT_GroupShape$i(a: CT_GroupShape, b: TArg): TResult;
    _visitCT_Picture$i(a: CT_Picture, b: TArg): TResult;
    _visitCT_Shape$i(a: CT_Shape, b: TArg): TResult;
}
/**
 * @hidden
 */
export declare let IGraphicalObjectContentVisitor$2_$type: Type;
