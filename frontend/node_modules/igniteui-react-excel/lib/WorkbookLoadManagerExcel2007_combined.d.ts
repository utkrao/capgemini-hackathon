import { ExcelDocumentManager } from "./ExcelDocumentManager";
import { WorkbookLoadManagerExcel2007_FontCollection } from "./WorkbookLoadManagerExcel2007_FontCollection";
import { Workbook } from "./Workbook";
import { IPackageFactory } from "./IPackageFactory";
import { Stream, Nullable$1, Base, Type, ValueType, IList$1, IEnumerable$1, IList } from "igniteui-react-core";
import { ST_ConformanceClass } from "./ST_ConformanceClass";
import { Excel2007ChartData } from "./Excel2007ChartData";
import { HashSet$1 } from "igniteui-react-core";
import { WorkItem } from "./WorkItem";
import { WorkItem$1 } from "./WorkItem$1";
import { Tuple$2 } from "igniteui-react-core";
import { Uri } from "igniteui-react-core";
import { ExcelImage } from "./ExcelImage";
import { ImageFormat } from "./ImageFormat";
import { ImageData } from "./ImageData";
import { WorkbookFormat } from "./WorkbookFormat";
import { List$1 } from "igniteui-react-core";
import { BorderInfo } from "./BorderInfo";
import { StyleInfo } from "./StyleInfo";
import { FillInfo } from "./FillInfo";
import { WorksheetCellFormatOptions } from "./WorksheetCellFormatOptions";
import { ProtectionInfo } from "./ProtectionInfo";
import { AlignmentInfo } from "./AlignmentInfo";
import { WorksheetCellFormatData } from "./WorksheetCellFormatData";
import { WorkbookStyle } from "./WorkbookStyle";
import { IWorkbookFontDefaultsResolver } from "./IWorkbookFontDefaultsResolver";
import { WorkbookFontData } from "./WorkbookFontData";
import { Dictionary$2 } from "igniteui-react-core";
import { IWorkbookFont } from "./IWorkbookFont";
import { XmlPartManagerBase } from "./XmlPartManagerBase";
import { PartManagerBase } from "./PartManagerBase";
import { WorksheetShape } from "./WorksheetShape";
import { EG_Anchor } from "./EG_Anchor";
import { ColorInfo } from "./ColorInfo";
import { ST_UnsignedIntHex } from "./ST_UnsignedIntHex";
import { WorkbookColorInfo } from "./WorkbookColorInfo";
import { NamedReference } from "./NamedReference";
import { SingleTargetFormula } from "./SingleTargetFormula";
import { WorkbookLoadManagerExcel2007_NamedReferenceInfo } from "./WorkbookLoadManagerExcel2007_NamedReferenceInfo";
import { Formula } from "./Formula";
import { WorkbookReferenceBase } from "./WorkbookReferenceBase";
import { CT_PositiveSize2D } from "./CT_PositiveSize2D";
import { CT_Point2D } from "./CT_Point2D";
import { StringElement } from "./StringElement";
import { ST_CellType } from "./ST_CellType";
import { WorkbookLoadManager } from "./WorkbookLoadManager";
import { FormattedString } from "./FormattedString";
import { ColorableItem } from "./ColorableItem";
import { XmlWriteManager } from "./XmlWriteManager";
import { Worksheet } from "./Worksheet";
import { WorkbookSaveManager } from "./WorkbookSaveManager";
import { Sheet } from "./Sheet";
import { CellReferenceMode } from "./CellReferenceMode";
import { FontUnderlineStyle } from "./FontUnderlineStyle";
import { TablePartManager } from "./TablePartManager";
import { WorksheetRegion } from "./WorksheetRegion";
import { ST_IconSetType } from "./ST_IconSetType";
import { WorksheetTableStyle } from "./WorksheetTableStyle";
import { Filter } from "./Filter";
import { IDictionary$2 } from "igniteui-react-core";
import { ConditionBase } from "./ConditionBase";
import { ConditionalFormatCollection } from "./ConditionalFormatCollection";
import { DxfInfo } from "./DxfInfo";
import { CfRuleInfo_ResolvedValues } from "./CfRuleInfo_ResolvedValues";
import { ST_CfType } from "./ST_CfType";
import { ST_ConditionalFormattingOperator } from "./ST_ConditionalFormattingOperator";
import { ST_TimePeriod } from "./ST_TimePeriod";
import { CfvoWrapper } from "./CfvoWrapper";
import { IconCriterionWrapper } from "./IconCriterionWrapper";
import { IconSetConditionalFormat } from "./IconSetConditionalFormat";
import { IconCriterion } from "./IconCriterion";
import { IconSetCriterionCollection } from "./IconSetCriterionCollection";
import { ST_DataBarDirection } from "./ST_DataBarDirection";
import { ST_DataBarAxisPosition } from "./ST_DataBarAxisPosition";
import { CommentsPartManager } from "./CommentsPartManager";
import { WorksheetSerializationCache } from "./WorksheetSerializationCache";
import { OperatorConditionalFormat } from "./OperatorConditionalFormat";
import { FormulaConditionalFormat } from "./FormulaConditionalFormat";
import { ColorScaleConditionalFormat } from "./ColorScaleConditionalFormat";
import { DataBarConditionalFormat } from "./DataBarConditionalFormat";
import { ConditionValue } from "./ConditionValue";
import { CT_SparklineGroup } from "./CT_SparklineGroup";
import { ST_SparklineType } from "./ST_SparklineType";
import { ST_DispBlanksAs } from "./ST_DispBlanksAs";
import { ST_SparklineAxisMinMax } from "./ST_SparklineAxisMinMax";
import { CT_Sparkline } from "./CT_Sparkline";
import { SparklineGroup } from "./SparklineGroup";
import { Sparkline } from "./Sparkline";
import { SparklineDisplayBlanksAs } from "./SparklineDisplayBlanksAs";
import { SparklineType } from "./SparklineType";
import { SparklineAxisMinMax } from "./SparklineAxisMinMax";
import { WorksheetPartManager } from "./WorksheetPartManager";
import { UnknownElementAction } from "./UnknownElementAction";
import { UnknownStructure } from "./UnknownStructure";
import { UnknownElementCache } from "./UnknownElementCache";
import { WorksheetShapeCollection } from "./WorksheetShapeCollection";
import { OverwriteRoundTripDataResult } from "./OverwriteRoundTripDataResult";
import { Stack$1 } from "igniteui-react-core";
import { BorderStyleInfo } from "./BorderStyleInfo";
import { UnknownShape } from "./UnknownShape";
import { PrintOptionsBase } from "./PrintOptionsBase";
import { SheetSerializationCache } from "./SheetSerializationCache";
import { WorksheetChart } from "./WorksheetChart";
import { ST_BorderStyle } from "./ST_BorderStyle";
import { ActiveXPartManager } from "./ActiveXPartManager";
import { ExcelStylesPartManager } from "./ExcelStylesPartManager";
import { PatternFillInfo } from "./PatternFillInfo";
import { GradientFillInfo } from "./GradientFillInfo";
import { SerializationNumberFormatInfo } from "./SerializationNumberFormatInfo";
import { StopInfo } from "./StopInfo";
import { WorkbookBuiltInStyle } from "./WorkbookBuiltInStyle";
import { IPackage } from "./IPackage";
import { WorkbookLoadOptions } from "./WorkbookLoadOptions";
import { CT_Transform2D } from "./CT_Transform2D";
import { WorkbookPartManagerBase } from "./WorkbookPartManagerBase";
import { WorkbookSaveOptions } from "./WorkbookSaveOptions";
import { DisplayUnit } from "./DisplayUnit";
import { ISupportSetProperty } from "./ISupportSetProperty";
import { ElementPropertyIds } from "./ElementPropertyIds";
import { CT_CommonTypeBase } from "./CT_CommonTypeBase";
import { CT_X } from "./CT_X";
import { ElementNamespaceContext } from "./ElementNamespaceContext";
import { CT_PositiveFixedPercentage } from "./CT_PositiveFixedPercentage";
import { CT_PositivePercentage } from "./CT_PositivePercentage";
import { CT_FixedPercentage } from "./CT_FixedPercentage";
import { CT_Percentage } from "./CT_Percentage";
import { CT_ComplementTransform } from "./CT_ComplementTransform";
import { CT_GammaTransform } from "./CT_GammaTransform";
import { CT_GrayscaleTransform } from "./CT_GrayscaleTransform";
import { CT_PositiveFixedAngle } from "./CT_PositiveFixedAngle";
import { CT_Angle } from "./CT_Angle";
import { CT_InverseTransform } from "./CT_InverseTransform";
import { CT_InverseGammaTransform } from "./CT_InverseGammaTransform";
import { CT_StretchInfoProperties } from "./CT_StretchInfoProperties";
import { CT_RelativeRect } from "./CT_RelativeRect";
import { ST_PathShadeType } from "./ST_PathShadeType";
import { ST_PositiveFixedPercentage } from "./ST_PositiveFixedPercentage";
import { ST_EffectContainerType } from "./ST_EffectContainerType";
import { ST_TileFlipMode } from "./ST_TileFlipMode";
import { CT_AlphaBiLevelEffect } from "./CT_AlphaBiLevelEffect";
import { CT_AlphaCeilingEffect } from "./CT_AlphaCeilingEffect";
import { CT_AlphaFloorEffect } from "./CT_AlphaFloorEffect";
import { CT_AlphaModulateFixedEffect } from "./CT_AlphaModulateFixedEffect";
import { CT_AlphaReplaceEffect } from "./CT_AlphaReplaceEffect";
import { CT_BiLevelEffect } from "./CT_BiLevelEffect";
import { CT_BlurEffect } from "./CT_BlurEffect";
import { ST_BlendMode } from "./ST_BlendMode";
import { CT_GrayscaleEffect } from "./CT_GrayscaleEffect";
import { CT_HSLEffect } from "./CT_HSLEffect";
import { ST_RectAlignment } from "./ST_RectAlignment";
import { ST_PresetShadowVal } from "./ST_PresetShadowVal";
import { CT_ReflectionEffect } from "./CT_ReflectionEffect";
import { CT_SoftEdgesEffect } from "./CT_SoftEdgesEffect";
import { CT_Camera } from "./CT_Camera";
import { CT_LightRig } from "./CT_LightRig";
import { CT_Point3D } from "./CT_Point3D";
import { CT_Vector3D } from "./CT_Vector3D";
import { CT_SphereCoords } from "./CT_SphereCoords";
import { CT_Bevel } from "./CT_Bevel";
import { CT_LineJoinBevel } from "./CT_LineJoinBevel";
import { CT_DashStopList } from "./CT_DashStopList";
import { CT_LineEndProperties } from "./CT_LineEndProperties";
import { CT_LinePropertiesBase } from "./CT_LinePropertiesBase";
import { CT_LineJoinMiterProperties } from "./CT_LineJoinMiterProperties";
import { CT_PresetLineDashProperties } from "./CT_PresetLineDashProperties";
import { CT_LineJoinRound } from "./CT_LineJoinRound";
import { CT_DashStop } from "./CT_DashStop";
import { ISaveToXLSX } from "./ISaveToXLSX";
import { CT_BackgroundFillStyleList } from "./CT_BackgroundFillStyleList";
import { CT_FillStyleList } from "./CT_FillStyleList";
import { ST_TextVertOverflowType } from "./ST_TextVertOverflowType";
import { ST_TextHorzOverflowType } from "./ST_TextHorzOverflowType";
import { ST_TextVerticalType } from "./ST_TextVerticalType";
import { ST_TextWrappingType } from "./ST_TextWrappingType";
import { ST_TextAnchoringType } from "./ST_TextAnchoringType";
import { ST_StyleReferenceModifierList } from "./ST_StyleReferenceModifierList";
import { ST_StyleEntryModifierList } from "./ST_StyleEntryModifierList";
import { ST_FontCollectionIndex } from "./ST_FontCollectionIndex";
import { ST_PresetMaterialType } from "./ST_PresetMaterialType";
import { XmlElement } from "igniteui-react-core";
import { ST_PresetPatternVal } from "./ST_PresetPatternVal";
import { ST_BlackWhiteMode } from "./ST_BlackWhiteMode";
import { ST_ColorSchemeIndex } from "./ST_ColorSchemeIndex";
import { CT_PresetTextShape } from "./CT_PresetTextShape";
import { CT_TextSpacingPercent } from "./CT_TextSpacingPercent";
import { CT_TextSpacingPoint } from "./CT_TextSpacingPoint";
import { CT_NoFillProperties } from "./CT_NoFillProperties";
import { CT_GroupFillProperties } from "./CT_GroupFillProperties";
import { CT_AlphaOutsetEffect } from "./CT_AlphaOutsetEffect";
import { CT_EffectReference } from "./CT_EffectReference";
import { CT_LuminanceEffect } from "./CT_LuminanceEffect";
import { CT_RelativeOffsetEffect } from "./CT_RelativeOffsetEffect";
import { CT_TintEffect } from "./CT_TintEffect";
import { CT_TransformEffect } from "./CT_TransformEffect";
import { CT_CustomGeometry2D } from "./CT_CustomGeometry2D";
import { CT_PresetGeometry2D } from "./CT_PresetGeometry2D";
import { CT_TextNoAutofit } from "./CT_TextNoAutofit";
import { CT_TextNormalAutofit } from "./CT_TextNormalAutofit";
import { CT_TextShapeAutofit } from "./CT_TextShapeAutofit";
import { CT_FlatText } from "./CT_FlatText";
import { CT_TileInfoProperties } from "./CT_TileInfoProperties";
import { WorkbookColorTransform } from "./WorkbookColorTransform";
import { ST_Percentage } from "./ST_Percentage";
import { CT_TextUnderlineLineFollowText } from "./CT_TextUnderlineLineFollowText";
import { CT_TextUnderlineFillFollowText } from "./CT_TextUnderlineFillFollowText";
import { CT_TextBulletColorFollowText } from "./CT_TextBulletColorFollowText";
import { CT_TextBulletSizeFollowText } from "./CT_TextBulletSizeFollowText";
import { CT_TextBulletSizePercent } from "./CT_TextBulletSizePercent";
import { CT_TextBulletSizePoint } from "./CT_TextBulletSizePoint";
import { CT_TextBulletTypefaceFollowText } from "./CT_TextBulletTypefaceFollowText";
import { CT_TextFont } from "./CT_TextFont";
import { CT_TextNoBullet } from "./CT_TextNoBullet";
import { CT_TextAutonumberBullet } from "./CT_TextAutonumberBullet";
import { CT_TextCharBullet } from "./CT_TextCharBullet";
import { CT_BlipFillPropertiesBase } from "./CT_BlipFillPropertiesBase";
import { CT_TextCharacterPropertiesBase } from "./CT_TextCharacterPropertiesBase";
import { CT_Hyperlink } from "./CT_Hyperlink";
import { ST_TextFontSize } from "./ST_TextFontSize";
import { ST_TextUnderlineType } from "./ST_TextUnderlineType";
import { ST_TextStrikeType } from "./ST_TextStrikeType";
import { ST_TextCapsType } from "./ST_TextCapsType";
import { ST_TextPoint } from "./ST_TextPoint";
import { CT_Blip } from "./CT_Blip";
import { ST_BlipCompression } from "./ST_BlipCompression";
import { ST_HexColorRGB } from "./ST_HexColorRGB";
import { ST_SystemColorVal } from "./ST_SystemColorVal";
import { ST_SchemeColorVal } from "./ST_SchemeColorVal";
import { ST_PresetColorVal } from "./ST_PresetColorVal";
import { CT_TextParagraphProperties } from "./CT_TextParagraphProperties";
import { CT_TextTabStop } from "./CT_TextTabStop";
import { ST_TextAlignType } from "./ST_TextAlignType";
import { ST_Coordinate32 } from "./ST_Coordinate32";
import { ST_TextFontAlignType } from "./ST_TextFontAlignType";
import { CT_TextTabStopList } from "./CT_TextTabStopList";
import { CT_StyleMatrixReference } from "./CT_StyleMatrixReference";
import { CT_EmbeddedWAVAudioFile } from "./CT_EmbeddedWAVAudioFile";
import { ST_PresetLineDashVal } from "./ST_PresetLineDashVal";
import { CT_GeomRect } from "./CT_GeomRect";
import { CT_ConnectionSite } from "./CT_ConnectionSite";
import { CT_AdjPoint2D } from "./CT_AdjPoint2D";
import { CT_GeomGuide } from "./CT_GeomGuide";
import { CT_Path2D } from "./CT_Path2D";
import { CT_PolarAdjustHandle } from "./CT_PolarAdjustHandle";
import { CT_XYAdjustHandle } from "./CT_XYAdjustHandle";
import { CT_Path2DArcTo } from "./CT_Path2DArcTo";
import { CT_GeomGuideList } from "./CT_GeomGuideList";
import { CT_AdjustHandleList } from "./CT_AdjustHandleList";
import { CT_ConnectionSiteList } from "./CT_ConnectionSiteList";
import { CT_Path2DList } from "./CT_Path2DList";
import { CT_BarDir } from "./CT_BarDir";
import { CT_BarGrouping } from "./CT_BarGrouping";
import { CT_NumFmt_Chart } from "./CT_NumFmt_Chart";
import { CT_DLblPos } from "./CT_DLblPos";
import { CT_AxPos } from "./CT_AxPos";
import { CT_TickMark } from "./CT_TickMark";
import { CT_TickLblPos } from "./CT_TickLblPos";
import { CT_Crosses } from "./CT_Crosses";
import { CT_Grouping } from "./CT_Grouping";
import { CT_TextLanguageID } from "./CT_TextLanguageID";
import { CT_Style } from "./CT_Style";
import { CT_PrintSettings } from "./CT_PrintSettings";
import { CT_RelId } from "./CT_RelId";
import { CT_LegendPos } from "./CT_LegendPos";
import { CT_LayoutTarget } from "./CT_LayoutTarget";
import { CT_LayoutMode } from "./CT_LayoutMode";
import { AxisType } from "./AxisType";
import { ST_TimeUnit } from "./ST_TimeUnit";
import { ST_LblAlgn } from "./ST_LblAlgn";
import { CategoryType } from "./CategoryType";
import { CT_Skip } from "./CT_Skip";
import { CT_LogBase } from "./CT_LogBase";
import { CT_Orientation } from "./CT_Orientation";
import { IProvideXValuesData } from "./IProvideXValuesData";
import { CT_StrVal } from "./CT_StrVal";
import { CT_LblOffset } from "./CT_LblOffset";
import { CT_TimeUnit } from "./CT_TimeUnit";
import { CT_AxisUnit } from "./CT_AxisUnit";
import { CT_LblAlgn } from "./CT_LblAlgn";
import { CT_BuiltInUnit } from "./CT_BuiltInUnit";
import { CT_CrossBetween } from "./CT_CrossBetween";
import { SeriesType } from "./SeriesType";
import { SeriesValues } from "./SeriesValues";
import { ChartType } from "./ChartType";
import { CT_MarkerStyle } from "./CT_MarkerStyle";
import { CT_MarkerSize } from "./CT_MarkerSize";
import { CT_PictureFormat } from "./CT_PictureFormat";
import { CT_PictureStackUnit } from "./CT_PictureStackUnit";
import { CT_TrendlineType } from "./CT_TrendlineType";
import { CT_Order } from "./CT_Order";
import { CT_Period } from "./CT_Period";
import { CT_ErrDir } from "./CT_ErrDir";
import { CT_ErrBarType } from "./CT_ErrBarType";
import { CT_ErrValType } from "./CT_ErrValType";
import { CT_NumVal } from "./CT_NumVal";
import { ST_Shape } from "./ST_Shape";
import { CT_GapAmount } from "./CT_GapAmount";
import { CT_BubbleScale } from "./CT_BubbleScale";
import { CT_SizeRepresents } from "./CT_SizeRepresents";
import { IChart3D } from "./IChart3D";
import { CT_OfPieType } from "./CT_OfPieType";
import { CT_SplitType } from "./CT_SplitType";
import { CT_SecondPieSize } from "./CT_SecondPieSize";
import { CT_Shape_Chart } from "./CT_Shape_Chart";
import { ST_BarGrouping } from "./ST_BarGrouping";
import { ST_BarDir } from "./ST_BarDir";
import { CT_Overlap } from "./CT_Overlap";
import { CT_FirstSliceAng } from "./CT_FirstSliceAng";
import { CT_HoleSize } from "./CT_HoleSize";
import { CT_ScatterStyle } from "./CT_ScatterStyle";
import { ST_MarkerStyle } from "./ST_MarkerStyle";
import { CT_RadarStyle } from "./CT_RadarStyle";
import { ST_Grouping } from "./ST_Grouping";
import { CT_RotX } from "./CT_RotX";
import { CT_HPercent } from "./CT_HPercent";
import { CT_RotY } from "./CT_RotY";
import { CT_DepthPercent } from "./CT_DepthPercent";
import { CT_Perspective } from "./CT_Perspective";
import { CT_DispBlanksAs } from "./CT_DispBlanksAs";
import { CT_Lvl } from "./CT_Lvl";
import { IFormattedStringOwner } from "./IFormattedStringOwner";
import { ErrorBars } from "./ErrorBars";
import { ST_ErrBarType } from "./ST_ErrBarType";
import { ST_ErrValType } from "./ST_ErrValType";
import { FormattedStringFont } from "./FormattedStringFont";
import { ChartGradientFill } from "./ChartGradientFill";
import { GradientType } from "./GradientType";
import { ChartSolidFill } from "./ChartSolidFill";
import { ChartEmptyFill } from "./ChartEmptyFill";
import { ChartFillBase } from "./ChartFillBase";
import { ST_BuiltInUnit } from "./ST_BuiltInUnit";
import { SeriesChartTypeGroup } from "./SeriesChartTypeGroup";
import { ChartGridLines } from "./ChartGridLines";
import { GridLineType } from "./GridLineType";
import { IChartObject } from "./IChartObject";
import { ChartTickLines } from "./ChartTickLines";
import { SeriesValuesBase } from "./SeriesValuesBase";
import { XValues } from "./XValues";
import { SeriesName } from "./SeriesName";
import { Legend } from "./Legend";
import { SeriesCollection } from "./SeriesCollection";
import { ElementPosition } from "./ElementPosition";
import { ST_LegendPos } from "./ST_LegendPos";
import { ChartBorder } from "./ChartBorder";
import { LegendEntry } from "./LegendEntry";
import { IWorkbookProvider } from "./IWorkbookProvider";
import { LegendPosition } from "./LegendPosition";
import { AxisPosition } from "./AxisPosition";
import { ST_AxPos } from "./ST_AxPos";
import { Axis } from "./Axis";
import { VerticalTitleAlignment } from "./VerticalTitleAlignment";
import { BorderLineStyle } from "./BorderLineStyle";
import { LineStyle } from "./LineStyle";
import { TextDirection } from "./TextDirection";
import { TextHorizontalOverflow } from "./TextHorizontalOverflow";
import { TextVerticalOverflow } from "./TextVerticalOverflow";
import { TimeUnit } from "./TimeUnit";
import { ST_Crosses } from "./ST_Crosses";
import { AxisCrosses } from "./AxisCrosses";
import { TickMark } from "./TickMark";
import { ST_TickMark } from "./ST_TickMark";
import { TickLabelPosition } from "./TickLabelPosition";
import { ST_TickLblPos } from "./ST_TickLblPos";
import { TickLabelAlignment } from "./TickLabelAlignment";
import { ChartLineBase } from "./ChartLineBase";
import { BarShape } from "./BarShape";
import { ErrorBarDirection } from "./ErrorBarDirection";
import { ErrorValueType } from "./ErrorValueType";
import { MarkerStyle } from "./MarkerStyle";
import { PictureType } from "./PictureType";
import { ST_PictureFormat } from "./ST_PictureFormat";
import { ChartLine } from "./ChartLine";
import { DisplayBlanksAs } from "./DisplayBlanksAs";
import { ReadingOrder } from "./ReadingOrder";
import { ST_TrendlineType } from "./ST_TrendlineType";
import { TrendlineType } from "./TrendlineType";
import { ST_DLblPos } from "./ST_DLblPos";
import { DataLabelPosition } from "./DataLabelPosition";
import { AxisGroup } from "./AxisGroup";
import { IComparer$1 } from "igniteui-react-core";
import { CT_PrintSettingsEx } from "./CT_PrintSettingsEx";
import { Series } from "./Series";
import { ST_SidePos } from "./ST_SidePos";
import { ST_PosAlign } from "./ST_PosAlign";
import { ST_TickMarksType } from "./ST_TickMarksType";
import { CT_TextData } from "./CT_TextData";
import { ST_AxisUnit } from "./ST_AxisUnit";
import { CT_CategoryAxisScaling } from "./CT_CategoryAxisScaling";
import { CT_ValueAxisScaling } from "./CT_ValueAxisScaling";
import { CT_NumberFormat } from "./CT_NumberFormat";
import { ST_IntervalClosedSide } from "./ST_IntervalClosedSide";
import { ST_DoubleOrAutomatic } from "./ST_DoubleOrAutomatic";
import { CT_ParentLabelLayout } from "./CT_ParentLabelLayout";
import { CT_RegionLabelLayout } from "./CT_RegionLabelLayout";
import { CT_SeriesElementVisibilities } from "./CT_SeriesElementVisibilities";
import { CT_Aggregation } from "./CT_Aggregation";
import { CT_Geography } from "./CT_Geography";
import { CT_Statistics } from "./CT_Statistics";
import { CT_Subtotals } from "./CT_Subtotals";
import { CT_DataLabelVisibilities } from "./CT_DataLabelVisibilities";
import { ST_DataLabelPos } from "./ST_DataLabelPos";
import { CT_DataLabelHidden } from "./CT_DataLabelHidden";
import { CT_ValueColorPositions } from "./CT_ValueColorPositions";
import { CT_DataId } from "./CT_DataId";
import { ST_SeriesLayout } from "./ST_SeriesLayout";
import { CT_NumericDimension } from "./CT_NumericDimension";
import { CT_StringDimension } from "./CT_StringDimension";
import { CT_Formula } from "./CT_Formula";
import { CT_StringValue } from "./CT_StringValue";
import { CT_NumericValue } from "./CT_NumericValue";
import { CT_NumericLevel } from "./CT_NumericLevel";
import { CT_ValueColorEndPosition } from "./CT_ValueColorEndPosition";
import { CT_ValueColorMiddlePosition } from "./CT_ValueColorMiddlePosition";
import { CT_ExtremeValueColorPosition } from "./CT_ExtremeValueColorPosition";
import { CT_NumberColorPosition } from "./CT_NumberColorPosition";
import { CT_PercentageColorPosition } from "./CT_PercentageColorPosition";
import { CT_GeoCache } from "./CT_GeoCache";
import { CT_Clear } from "./CT_Clear";
import { CT_GeoLocationQueryResults } from "./CT_GeoLocationQueryResults";
import { CT_GeoDataEntityQueryResults } from "./CT_GeoDataEntityQueryResults";
import { CT_GeoDataPointToEntityQueryResults } from "./CT_GeoDataPointToEntityQueryResults";
import { CT_GeoChildEntitiesQueryResults } from "./CT_GeoChildEntitiesQueryResults";
import { CT_GeoLocationQueryResult } from "./CT_GeoLocationQueryResult";
import { CT_GeoLocationQuery } from "./CT_GeoLocationQuery";
import { CT_GeoLocations } from "./CT_GeoLocations";
import { CT_GeoLocation } from "./CT_GeoLocation";
import { CT_Address } from "./CT_Address";
import { CT_GeoDataEntityQueryResult } from "./CT_GeoDataEntityQueryResult";
import { CT_GeoDataEntityQuery } from "./CT_GeoDataEntityQuery";
import { CT_GeoData } from "./CT_GeoData";
import { CT_GeoPolygons } from "./CT_GeoPolygons";
import { CT_GeoPolygon } from "./CT_GeoPolygon";
import { CT_Copyrights } from "./CT_Copyrights";
import { CT_GeoDataPointToEntityQueryResult } from "./CT_GeoDataPointToEntityQueryResult";
import { CT_GeoDataPointQuery } from "./CT_GeoDataPointQuery";
import { CT_GeoDataPointToEntityQuery } from "./CT_GeoDataPointToEntityQuery";
import { CT_GeoChildEntitiesQueryResult } from "./CT_GeoChildEntitiesQueryResult";
import { CT_GeoChildEntitiesQuery } from "./CT_GeoChildEntitiesQuery";
import { ST_EntityType } from "./ST_EntityType";
import { CT_GeoChildEntities } from "./CT_GeoChildEntities";
import { CT_GeoHierarchyEntity } from "./CT_GeoHierarchyEntity";
import { CT_GeoChildTypes } from "./CT_GeoChildTypes";
import { CT_HeaderFooter } from "./CT_HeaderFooter";
import { CT_PageMargins } from "./CT_PageMargins";
import { CT_PageSetup } from "./CT_PageSetup";
import { CT_StringLevel } from "./CT_StringLevel";
import { ParentLabelLayout } from "./ParentLabelLayout";
import { ST_ParentLabelLayout } from "./ST_ParentLabelLayout";
import { ChartTitle } from "./ChartTitle";
import { DisplayUnitLabel } from "./DisplayUnitLabel";
import { GeographicMapProjection } from "./GeographicMapProjection";
import { ST_GeoProjectionType } from "./ST_GeoProjectionType";
import { GeographicMappingArea } from "./GeographicMappingArea";
import { ST_GeoMappingLevel } from "./ST_GeoMappingLevel";
import { GeographicMapLabels } from "./GeographicMapLabels";
import { ST_RegionLabelLayout } from "./ST_RegionLabelLayout";
import { CT_MarkerLayout } from "./CT_MarkerLayout";
import { ST_StyleColorVal } from "./ST_StyleColorVal";
import { ST_StyleEntryModifierEnum } from "./ST_StyleEntryModifierEnum";
import { ST_ColorStyleMethod } from "./ST_ColorStyleMethod";
import { ChartDeserializationCache } from "./ChartDeserializationCache";
import { CategoryAxisBinning } from "./CategoryAxisBinning";
import { BoxAndWhiskerSettings } from "./BoxAndWhiskerSettings";
import { SeriesGroup } from "./SeriesGroup";
import { Wall } from "./Wall";
import { ChartSeriesLines } from "./ChartSeriesLines";
import { ChartHighLowLines } from "./ChartHighLowLines";
import { ChartDropLines } from "./ChartDropLines";
import { UpDownBars } from "./UpDownBars";
import { SeriesDataLabels } from "./SeriesDataLabels";
import { DataPoint } from "./DataPoint";
import { Trendline } from "./Trendline";
import { TrendlineLabel } from "./TrendlineLabel";
import { ChartLabelBase } from "./ChartLabelBase";
import { DataLabel } from "./DataLabel";
import { UpDownBar } from "./UpDownBar";
import { GeographicMapSettings } from "./GeographicMapSettings";
import { WallType } from "./WallType";
import { ConditionX14Wrapper } from "./ConditionX14Wrapper";
import { ChartExPartManager } from "./ChartExPartManager";
import { ChartsheetPartManager } from "./ChartsheetPartManager";
import { Chartsheet } from "./Chartsheet";
import { ActiveXBinaryPartManager } from "./ActiveXBinaryPartManager";
import { ChartColorStylePartManager } from "./ChartColorStylePartManager";
import { ChartPartManager } from "./ChartPartManager";
import { ChartStylePartManager } from "./ChartStylePartManager";
import { ConnectionsPartManager } from "./ConnectionsPartManager";
import { CorePropertiesPartManager } from "./CorePropertiesPartManager";
import { CtrlPropPartManager } from "./CtrlPropPartManager";
import { CustomXmlItemPartManager } from "./CustomXmlItemPartManager";
import { CustomXmlItemPropsPartManager } from "./CustomXmlItemPropsPartManager";
import { DrawingPartManager } from "./DrawingPartManager";
import { CT_Connector } from "./CT_Connector";
import { ST_DrawingElementId } from "./ST_DrawingElementId";
import { CT_NonVisualBase } from "./CT_NonVisualBase";
import { ShapeFill } from "./ShapeFill";
import { IEG_FillProperties } from "./IEG_FillProperties";
import { CT_LineProperties } from "./CT_LineProperties";
import { CT_GraphicalObjectFrame } from "./CT_GraphicalObjectFrame";
import { CT_GroupShape } from "./CT_GroupShape";
import { CT_Picture } from "./CT_Picture";
import { CT_BlipFillProperties } from "./CT_BlipFillProperties";
import { CT_Shape } from "./CT_Shape";
import { CT_SolidFillProperties } from "./CT_SolidFillProperties";
import { FormattedTextParagraph } from "./FormattedTextParagraph";
import { FormattedTextRun } from "./FormattedTextRun";
import { CT_RegularTextRun } from "./CT_RegularTextRun";
import { CT_TextCharacterProperties } from "./CT_TextCharacterProperties";
import { AlternateGraphicalObjectContent } from "./AlternateGraphicalObjectContent";
import { ObjectModelDrawingPartManager_ShapeLoadContext } from "./ObjectModelDrawingPartManager_ShapeLoadContext";
import { IGraphicalObjectContentVisitor$2 } from "./IGraphicalObjectContentVisitor$2";
import { ShapeFillSolid } from "./ShapeFillSolid";
import { ShapeOutlineSolid } from "./ShapeOutlineSolid";
import { IEG_TextRunVisitor$2 } from "./IEG_TextRunVisitor$2";
import { IEG_FillPropertiesVisitor$2 } from "./IEG_FillPropertiesVisitor$2";
import { ShapeFillImage } from "./ShapeFillImage";
import { IShapeFillVisitor$2 } from "./IShapeFillVisitor$2";
import { ShapeFillNoFill } from "./ShapeFillNoFill";
import { IShapeOutlineVisitor$2 } from "./IShapeOutlineVisitor$2";
import { ShapeOutlineNoOutline } from "./ShapeOutlineNoOutline";
import { ExtendedPropertiesPartManager } from "./ExtendedPropertiesPartManager";
import { ExternalLinkPartManager } from "./ExternalLinkPartManager";
import { PivotCacheDefinitionPartManager } from "./PivotCacheDefinitionPartManager";
import { PivotCacheRecordsPartManager } from "./PivotCacheRecordsPartManager";
import { PivotTablePartManager } from "./PivotTablePartManager";
import { SharedStringsPartManager } from "./SharedStringsPartManager";
import { SlicerCachePartManager } from "./SlicerCachePartManager";
import { SlicerPartManager } from "./SlicerPartManager";
import { ThemeManagerPartManager } from "./ThemeManagerPartManager";
import { ThemePartManager } from "./ThemePartManager";
import { XmlReader } from "igniteui-react-core";
import { VbaProjectPartManager } from "./VbaProjectPartManager";
import { VmlDrawingPartManager } from "./VmlDrawingPartManager";
/**
 * @hidden
 */
export declare abstract class ExcelWorkbookDocumentManager extends ExcelDocumentManager {
    static $t: Type;
    private readonly _bx;
    constructor(a: Workbook, b: WorkbookLoadManagerExcel2007_FontCollection, c: WorkbookLoadManagerExcel2007_FontCollection, d: IPackageFactory, e: Stream, f: boolean, g: Nullable$1<ST_ConformanceClass>);
    get _bv(): WorkbookLoadManagerExcel2007_FontCollection;
    get _bw(): WorkbookLoadManagerExcel2007_FontCollection;
    get _by(): Workbook;
    _bu: ThemePartInfo;
}
/**
 * @hidden
 */
export declare class ObjectModelExcelDocumentManager extends ExcelWorkbookDocumentManager {
    static $t: Type;
    private readonly _b6;
    private readonly _b8;
    constructor(a: number, b: WorkbookLoadManagerExcel2007, c: IPackageFactory, d: Stream, e?: Nullable$1<ST_ConformanceClass>);
    constructor(a: number, b: WorkbookSaveManagerExcel2007, c: IPackageFactory, d: Stream, e: Nullable$1<ST_ConformanceClass>);
    constructor(a: number, ..._rest: any[]);
    _bh(): void;
    protected _o(): WorkItem;
    protected _s(): WorkItem;
    _b0(a: ExcelImage, b: ImageFormat, c?: string): WorkItem$1<Tuple$2<Uri, string>>;
    _bz(a: ImageData, b?: string): WorkItem$1<Tuple$2<Uri, string>>;
    _cd(): string;
    _b4(): DeserializedChartInfo;
    private _b1;
    private _b5;
    private _b2;
    get _b7(): WorkbookLoadManagerExcel2007;
    get _b9(): WorkbookSaveManagerExcel2007;
    _b3: Excel2007ChartData;
    _ca: HashSet$1<string>;
}
/**
 * @hidden
 */
export declare class ThemePartInfo extends Base {
    static $t: Type;
    a: WorkbookLoadManagerExcel2007_FontCollection;
    b: WorkbookLoadManagerExcel2007_FontCollection;
    c: CT_StyleMatrix;
}
/**
 * @hidden
 */
export declare class WorkbookSerializationDataExcel2007 extends ValueType {
    static $t: Type;
    constructor(a: number, b: ObjectModelExcelDocumentManager);
    constructor();
    constructor(a: number, ..._rest: any[]);
    readonly b: List$1<BorderInfo>;
    readonly c: List$1<StyleInfo>;
    readonly d: List$1<FormatInfo>;
    readonly e: List$1<FormatInfo>;
    readonly a: ObjectModelExcelDocumentManager;
    readonly f: List$1<FillInfo>;
}
/**
 * @hidden
 */
export declare class FormatInfo extends Base {
    static $t: Type;
    private h;
    private n;
    private q;
    private s;
    private u;
    private j;
    private l;
    private w;
    private c;
    private a;
    private f;
    get i(): WorksheetCellFormatOptions;
    set i(a: WorksheetCellFormatOptions);
    get o(): Nullable$1<number>;
    set o(a: Nullable$1<number>);
    get r(): Nullable$1<number>;
    set r(a: Nullable$1<number>);
    get t(): Nullable$1<number>;
    set t(a: Nullable$1<number>);
    get v(): Nullable$1<number>;
    set v(a: Nullable$1<number>);
    get k(): boolean;
    set k(a: boolean);
    get m(): boolean;
    set m(a: boolean);
    get p(): Nullable$1<number>;
    set p(a: Nullable$1<number>);
    get d(): ProtectionInfo;
    set d(a: ProtectionInfo);
    get b(): AlignmentInfo;
    set b(a: AlignmentInfo);
    get g(): WorksheetCellFormatData;
    set g(a: WorksheetCellFormatData);
    e(a: WorkbookLoadManagerExcel2007, b: boolean, c: boolean): WorksheetCellFormatData;
}
/**
 * @hidden
 */
export declare class ObjectModelCommonPartHelpers extends Base {
    static $t: Type;
    static e(a: string, b: string): string;
    private static b;
    private static f;
    private static g;
    private static h;
    private static i;
    private static j;
    private static k;
    private static l;
    static c(a: XmlPartManagerBase, b: (partManager: XmlPartManagerBase, autoValue: Nullable$1<boolean>, indexedValue: Nullable$1<number>, rgbValue: Nullable$1<ST_UnsignedIntHex>, themeValue: Nullable$1<number>, tintValue: number) => {
        p1: Nullable$1<boolean>;
        p2: Nullable$1<number>;
        p3: Nullable$1<ST_UnsignedIntHex>;
        p4: Nullable$1<number>;
        p5: number;
    }): WorkbookColorInfo;
    static a(a: XmlPartManagerBase, b: (partManager: XmlPartManagerBase, autoValue: Nullable$1<boolean>, indexedValue: Nullable$1<number>, rgbValue: Nullable$1<ST_UnsignedIntHex>, themeValue: Nullable$1<number>, tintValue: number) => {
        p1: Nullable$1<boolean>;
        p2: Nullable$1<number>;
        p3: Nullable$1<ST_UnsignedIntHex>;
        p4: Nullable$1<number>;
        p5: number;
    }): ColorInfo;
    private static m;
    private static n;
    private static o;
    private static p;
    private static q;
    private static r;
    private static s;
    private static t;
    private static u;
    private static v;
    private static w;
    private static x;
    private static y;
    private static z;
    private static aa;
    private static ac;
    private static ad;
    private static ae;
    private static af;
    private static ag;
    private static ah;
    static d(a: XmlPartManagerBase, b: number): any;
    private static ai;
    private static ab;
    static aj(a: XmlPartManagerBase): void;
    static ak(a: XmlPartManagerBase, b: string, c: (partManager: XmlPartManagerBase, valValue: string) => {
        p1: string;
    }): void;
    static al(a: XmlPartManagerBase): void;
    static am(a: XmlPartManagerBase): void;
    static ao(a: XmlPartManagerBase, b: WorkbookColorInfo, c: ColorableItem, d: (arg1: XmlPartManagerBase, arg2: Nullable$1<boolean>, arg3: Nullable$1<number>, arg4: Nullable$1<ST_UnsignedIntHex>, arg5: Nullable$1<number>, arg6: number) => void): void;
    static an(a: XmlPartManagerBase, b: ColorInfo, c: (arg1: XmlPartManagerBase, arg2: Nullable$1<boolean>, arg3: Nullable$1<number>, arg4: Nullable$1<ST_UnsignedIntHex>, arg5: Nullable$1<number>, arg6: number) => void): void;
    private static ap;
    static aq(a: XmlPartManagerBase, b: WorkbookReferenceBase): void;
    static as(a: XmlPartManagerBase, b: IWorkbookFont): void;
    static ar(a: XmlPartManagerBase, b: IWorkbookFont): void;
    private static at;
    static au(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: StringElement, d: (arg1: XmlPartManagerBase) => void): void;
    private static av;
    static aw(a: XmlPartManagerBase, b: IWorkbookFont): void;
}
/**
 * @hidden
 */
export declare class ObjectModelTablePartManager extends TablePartManager {
    static $t: Type;
    static readonly ba: ObjectModelTablePartManager;
    constructor();
    protected u(a: any): WorkItem;
    private static bb;
    private static bc;
    private static bd;
    private static be;
    static bf(a: XmlPartManagerBase): void;
    static bg(a: XmlPartManagerBase): void;
    static bh(a: XmlPartManagerBase): void;
    static bi(a: XmlPartManagerBase): void;
    static bj(a: XmlPartManagerBase): void;
    static bk(a: XmlPartManagerBase): void;
    static bn(a: XmlPartManagerBase): void;
    static bl(a: XmlPartManagerBase): void;
    static bm(a: XmlPartManagerBase): void;
    static bo(a: XmlPartManagerBase): void;
    static bp(a: XmlPartManagerBase): void;
    private static bq;
    private static br;
    private static bu;
    private static bv;
    private static bs;
    private static bt;
    private static bw;
    static bx(a: XmlPartManagerBase): void;
    private static by;
    private static a7;
    private static bz;
    private static b0;
    private b1;
    static b6(a: XmlPartManagerBase, b: ObjectModelExcelDocumentManager, c: WorkbookSaveManagerExcel2007, d: Filter): void;
    private static b2;
    private static b3;
    private static b4;
    private static b5;
    private static b7;
    private static b8;
    private b9;
    private ca;
    private cb;
    private static cc;
    get a8(): ObjectModelExcelDocumentManager;
    private static a9;
}
/**
 * @hidden
 */
export declare class ConditionalFormatInfo extends Base {
    static $t: Type;
    private g;
    private i;
    constructor(a: Worksheet, b: WorkbookLoadManagerExcel2007);
    get h(): IDictionary$2<string, CfRuleInfo>;
    c: WorkbookLoadManagerExcel2007;
    d: Worksheet;
    get a(): CellReferenceMode;
    o(): void;
    m(): void;
    j: List$1<WorksheetRegion>;
    b: CfRuleInfo;
    k: List$1<CfRuleInfo>;
    get l(): List$1<CfRuleInfo>;
    f: boolean;
    static e(a: ConditionalFormatInfo): boolean;
    static n(a: ConditionalFormatInfo, b: List$1<string>): void;
}
/**
 * @hidden
 */
export declare class CfRuleInfo extends Base {
    static $t: Type;
    private d;
    private w;
    private x;
    private v;
    private i;
    private f;
    q: boolean;
    h: DxfInfo;
    s: boolean;
    aa: List$1<WorksheetRegion>;
    ap(a: ConditionalFormatInfo): void;
    r: boolean;
    c: CfRuleInfo;
    aq(a: CfRuleInfo): void;
    get e(): CfRuleInfo_ResolvedValues;
    get ad(): number;
    get u(): boolean;
    al: Nullable$1<ST_CfType>;
    ae: Nullable$1<number>;
    ag: Nullable$1<number>;
    aj: Nullable$1<boolean>;
    k: boolean;
    t: boolean;
    n: boolean;
    af: Nullable$1<ST_ConditionalFormattingOperator>;
    ao: string;
    ak: Nullable$1<ST_TimePeriod>;
    ah: Nullable$1<number>;
    ai: Nullable$1<number>;
    p: boolean;
    an: string;
    get j(): IconSetWrapper;
    get g(): DatabarWrapper;
    get z(): List$1<string>;
    get ab(): List$1<CfvoWrapper>;
    get y(): List$1<ColorInfo>;
    am: string;
    static b(a: ConditionalFormatInfo, b: XmlPartManagerBase): CfRuleInfo;
    static a(a: XmlPartManagerBase, b: ConditionalFormatInfo, c?: boolean, d?: string): CfRuleInfo;
    static l(a: CfRuleInfo): boolean;
    static m(a: CfRuleInfo): boolean;
}
/**
 * @hidden
 */
export declare class IconSetWrapper extends Base {
    static $t: Type;
    private g;
    m: Nullable$1<ST_IconSetType>;
    j: Nullable$1<boolean>;
    k: Nullable$1<boolean>;
    l: Nullable$1<boolean>;
    i: Nullable$1<boolean>;
    get h(): List$1<IconCriterionWrapper>;
    static a(a: CfRuleInfo): IconSetWrapper;
    n(a: CfRuleInfo, b: IconSetConditionalFormat): void;
}
/**
 * @hidden
 */
export declare class DatabarWrapper extends Base {
    static $t: Type;
    w: Nullable$1<number>;
    v: Nullable$1<number>;
    z: Nullable$1<boolean>;
    t: Nullable$1<boolean>;
    u: Nullable$1<boolean>;
    s: Nullable$1<ST_DataBarDirection>;
    y: Nullable$1<boolean>;
    x: Nullable$1<boolean>;
    r: Nullable$1<ST_DataBarAxisPosition>;
    a: ColorInfo;
    b: ColorInfo;
    c: ColorInfo;
    e: ColorInfo;
    d: ColorInfo;
    static f(a: CfRuleInfo): DatabarWrapper;
}
/**
 * @hidden
 */
export declare class ObjectModelCommentsPartManager extends CommentsPartManager {
    static $t: Type;
    static readonly a9: ObjectModelCommentsPartManager;
    constructor();
    protected t(): WorkItem$1<any>;
    protected u(a: any): WorkItem;
    private static ba;
    private static bb;
    private static bc;
    private static bd;
    private static be;
    private static bf;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ConditionFactory_XLSX extends Base {
    static $t: Type;
    static d(a: ConditionalFormatInfo, b: CfRuleInfo): ConditionBase;
    private static m;
    private static i;
    private static n;
    private static a;
    private static p;
    private static g;
    private static b;
    private static k;
    private static h;
    private static l;
    private static o;
    private static f;
    private static c;
    private static j;
    private static e;
    private static t;
    private static u;
    static q(a: string, b: ConditionalFormatInfo, c: ConditionBase): SingleTargetFormula;
    static r(a: string): string;
    private static s;
}
/**
 * @hidden
 */
export declare class ConditionValueExtensions extends Base {
    static $t: Type;
    static a(a: ConditionValue, b: CfvoWrapper, c: Worksheet): void;
    static b(a: ConditionValue, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: Worksheet, f: boolean, g?: Nullable$1<boolean>): void;
}
/**
 * @hidden
 */
export declare class ColorInfoExtensions extends Base {
    static $t: Type;
    static a(a: ColorInfo, b: ConditionalFormatInfo): WorkbookColorInfo;
    static d(a: WorkbookColorInfo, b: XmlPartManagerBase, c: XmlWriteManager, d: Worksheet, e: string): void;
    private static c;
    private static b;
}
/**
 * @hidden
 */
export declare class IconCriterionExtensions extends Base {
    static $t: Type;
    static a(a: IconCriterion, b: IconCriterionWrapper, c: CfvoWrapper): void;
}
/**
 * @hidden
 */
export declare class IconSetCriterionCollectionExtensions extends Base {
    static $t: Type;
    static a(a: IconSetCriterionCollection, b: IList$1<CfvoWrapper>, c: Worksheet): void;
}
/**
 * @hidden
 */
export declare class SparklinesDeserializer extends Base {
    static $t: Type;
    private d;
    private h;
    private c;
    constructor(a: Worksheet);
    private get e();
    get i(): List$1<CT_SparklineGroup>;
    private static a;
    private static b;
    static z(a: ObjectModelWorksheetPartManager): void;
    static v(a: XmlPartManagerBase): void;
    static w(a: XmlPartManagerBase): void;
    static u(a: XmlPartManagerBase): void;
    static m(a: XmlPartManagerBase, b: string): void;
    static k(a: XmlPartManagerBase): void;
    static l(a: XmlPartManagerBase): void;
    static n(a: XmlPartManagerBase): void;
    static o(a: XmlPartManagerBase): void;
    static p(a: XmlPartManagerBase): void;
    static q(a: XmlPartManagerBase): void;
    static r(a: XmlPartManagerBase): void;
    static s(a: XmlPartManagerBase): void;
    static x(a: XmlPartManagerBase): void;
    static y(a: XmlPartManagerBase): void;
    static t(a: XmlPartManagerBase): void;
    static f(a: XmlPartManagerBase): boolean;
    static g(a: XmlPartManagerBase): boolean;
    private j;
}
/**
 * @hidden
 */
export declare class SparklineExtensions extends Base {
    static $t: Type;
    static h(a: SparklineGroup, b: CT_SparklineGroup, c: Worksheet, d: WorkbookLoadManagerExcel2007): void;
    static g(a: Sparkline, b: CT_Sparkline, c: Worksheet, d: List$1<WorkbookReferenceBase>): void;
    static e(a: ST_DispBlanksAs): SparklineDisplayBlanksAs;
    static c(a: SparklineDisplayBlanksAs): ST_DispBlanksAs;
    static f(a: ST_SparklineType): SparklineType;
    static b(a: SparklineType): ST_SparklineType;
    static d(a: ST_SparklineAxisMinMax): SparklineAxisMinMax;
    static a(a: SparklineAxisMinMax): ST_SparklineAxisMinMax;
}
/**
 * @hidden
 */
export declare class ObjectModelWorksheetPartManager extends WorksheetPartManager {
    static $t: Type;
    static readonly bj: ObjectModelWorksheetPartManager;
    private bt;
    private bv;
    private bk;
    private bu;
    private bs;
    private br;
    private bl;
    private bw;
    private bo;
    private bn;
    bf: ConditionalFormatInfo;
    constructor();
    z(a: string): UnknownElementAction;
    protected t(): WorkItem$1<any>;
    aw(a: UnknownStructure): void;
    protected u(a: any): WorkItem;
    ai(a: string): boolean;
    y(a: UnknownElementCache, b: Stack$1<UnknownElementCache>): OverwriteRoundTripDataResult;
    private b5;
    private static b1;
    private static b2;
    private b4;
    private static by;
    private bp;
    private static b7;
    private static b8;
    private static ce;
    private static cf;
    private static cp;
    private static cr;
    private cq;
    private static cw;
    private static c1;
    private static cy;
    private static cx;
    private static cz;
    private static c0;
    private static ci;
    private static ck;
    private static ch;
    private static cj;
    private static cm;
    private static co;
    private static cl;
    private static cn;
    private static cu;
    static cs(a: XmlPartManagerBase): void;
    private static be;
    private static dq;
    static d7(a: XmlPartManagerBase): void;
    static d6(a: XmlPartManagerBase): void;
    private static d8;
    private static cg;
    private static cv;
    static c9(a: XmlPartManagerBase): void;
    static da(a: XmlPartManagerBase): void;
    static ds(a: XmlPartManagerBase): void;
    static cb(a: XmlPartManagerBase): void;
    static b9(a: XmlPartManagerBase): void;
    static ek(a: XmlPartManagerBase): void;
    static ej(a: XmlPartManagerBase): void;
    static ct(a: XmlPartManagerBase): void;
    static d9(a: XmlPartManagerBase): void;
    private static dj;
    private static dk;
    private static b6;
    private static cc;
    private static cd;
    private static dt;
    private static ev;
    private static d1;
    private static ca;
    private static dr;
    private static el;
    private static e2;
    private static dv;
    private static d0;
    private static c2;
    private static c3;
    private static c4;
    private static c5;
    private static c7;
    private c6;
    private static c8;
    private static dc;
    private db;
    private static de;
    private dd;
    private static df;
    private static dg;
    private static di;
    private dh;
    private static dl;
    private static dm;
    private static dn;
    private static dp;
    private static du;
    private static dx;
    private static dw;
    private static dz;
    private static dy;
    static d2(a: XmlPartManagerBase): void;
    private static d4;
    private d3;
    private static d5;
    private static ea;
    private static eb;
    private static ed;
    private ec;
    private static ef;
    private ee;
    private static eh;
    private eg;
    private static ei;
    static em(a: XmlPartManagerBase): void;
    static en(a: XmlPartManagerBase): void;
    private static ep;
    private eo;
    static eq(a: XmlPartManagerBase): void;
    static er(a: XmlPartManagerBase): void;
    private static et;
    private es;
    private static eu;
    private static ex;
    private ew;
    private static ey;
    private static e0;
    private ez;
    private static e1;
    private static e5;
    private e4;
    private static e3;
    private static e6;
    private static e7;
    private static e8;
    private static fa;
    private e9;
    private static fc;
    private fb;
    private static fe;
    private fd;
    private static fg;
    private ff;
    private static fi;
    private fh;
    private static fj;
    private static fl;
    private fk;
    private static fm;
    private static fn;
    private static fo;
    private static fp;
    private static fr;
    private fq;
    private static ft;
    private fs;
    private static fu;
    private static fv;
    private static fx;
    private fw;
    private static fz;
    private fy;
    private static bz;
    f0(a: Worksheet, b: WorksheetSerializationCache): void;
    static f1(a: WorksheetShapeCollection, b: List$1<UnknownShape>, c: List$1<WorksheetShape>): void;
    private f2;
    private f3;
    private f4;
    private f5;
    private f6;
    private f7;
    private f8;
    private a7;
    private a8;
    private f9;
    private ga;
    private gb;
    private gc;
    private gd;
    private ge;
    static gf(v: XmlPartManagerBase, w: string): void;
    private gg;
    private a9;
    private ba;
    private gh;
    static gi(v: XmlPartManagerBase, w: PrintOptionsBase): void;
    private gj;
    private gk;
    static gl(v: XmlPartManagerBase, w: string): void;
    static gm(v: XmlPartManagerBase, w: string): void;
    private gn;
    private go;
    private gp;
    static gq(v: XmlPartManagerBase, w: PrintOptionsBase): void;
    static gr(v: XmlPartManagerBase, w: PrintOptionsBase): void;
    private gs;
    private gt;
    static gu(v: XmlPartManagerBase, w: WorkbookSaveManagerExcel2007, x: SheetSerializationCache): void;
    private gv;
    private gw;
    private gx;
    private bx;
    private gy;
    private gz;
    private g0;
    private bb;
    private g1;
    private g2;
    private g3;
    private g4;
    private g5;
    private g6;
    private bc;
    private g7;
    private g8;
    private g9;
    private static bq;
    private bd;
    private static bg;
    get bh(): ObjectModelExcelDocumentManager;
    private static bi;
    get bm(): Worksheet;
}
/**
 * @hidden
 */
export declare class ObjectModelStylesPartManager extends ExcelStylesPartManager {
    static $t: Type;
    static readonly a9: ObjectModelStylesPartManager;
    constructor();
    protected u(a: any): WorkItem;
    static ba(a: XmlPartManagerBase): void;
    static bb(a: XmlPartManagerBase): void;
    static bc(a: XmlPartManagerBase): void;
    private static bd;
    static be(a: XmlPartManagerBase, b: (partManager: XmlPartManagerBase, style: ST_BorderStyle) => {
        p1: ST_BorderStyle;
    }, c: (arg1: BorderInfo) => BorderStyleInfo, d?: Nullable$1<ST_ConformanceClass>): void;
    private static bf;
    private static bg;
    private static bh;
    private static bi;
    private static bj;
    private static bk;
    private static bl;
    private static bm;
    static bn(a: XmlPartManagerBase): void;
    static bo(a: XmlPartManagerBase): void;
    private static bp;
    static bq(a: XmlPartManagerBase): void;
    private static br;
    static bs(a: XmlPartManagerBase): void;
    private static bt;
    private static bu;
    static bv(a: XmlPartManagerBase): void;
    private static bw;
    static bx(a: XmlPartManagerBase): void;
    static by(a: XmlPartManagerBase): void;
    private static bz;
    private static b0;
    private static b1;
    private static b2;
    private static b3;
    private static b4;
    private static b5;
    private static b6;
    private static b7;
    private static b8;
    private static b9;
    private ca;
    static cb(a: XmlPartManagerBase, b: AlignmentInfo): void;
    private cc;
    static cd(a: XmlPartManagerBase, b: ColorInfo): void;
    private ce;
    static cf(a: XmlPartManagerBase, b: BorderInfo): void;
    private cg;
    private ch;
    static ci(a: XmlPartManagerBase, b: BorderStyleInfo, c: (arg1: XmlPartManagerBase, arg2: ST_BorderStyle) => void): void;
    private cj;
    static ck(a: XmlPartManagerBase, b: BorderStyleInfo): void;
    private cl;
    private cm;
    private cn;
    private co;
    private cp;
    private cq;
    static cr(a: XmlPartManagerBase, b: BorderStyleInfo): void;
    private cs;
    static ct(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: WorksheetCellFormatData, d: string): void;
    private cu;
    private cv;
    static cw(a: XmlPartManagerBase, b: BorderStyleInfo): void;
    private cx;
    static cy(a: XmlPartManagerBase, b: ColorInfo): void;
    private cz;
    static c0(a: XmlPartManagerBase, b: FillInfo): void;
    private c1;
    private c2;
    private c3;
    static c4(a: XmlPartManagerBase, b: GradientFillInfo): void;
    private c5;
    private c6;
    private c7;
    static c8(a: XmlPartManagerBase, b: SerializationNumberFormatInfo, c: boolean): void;
    private c9;
    private da;
    static db(a: XmlPartManagerBase, b: PatternFillInfo): void;
    private dc;
    static dd(a: XmlPartManagerBase, b: ProtectionInfo): void;
    private de;
    private df;
    static dg(a: XmlPartManagerBase, b: BorderStyleInfo): void;
    private dh;
    static di(a: XmlPartManagerBase, b: StopInfo): void;
    private dj;
    private dk;
    private dl;
    private dm;
    private dn;
    static dp(a: XmlPartManagerBase, b: BorderStyleInfo): void;
    private dq;
    private dr;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ExcelThemeDocumentManager extends ExcelWorkbookDocumentManager {
    static $t: Type;
    constructor(a: Workbook, b: WorkbookLoadManagerExcel2007_FontCollection, c: WorkbookLoadManagerExcel2007_FontCollection, d: IPackageFactory, e: Stream, f: boolean, g: Nullable$1<ST_ConformanceClass>);
    _bh(): void;
    protected _s(): WorkItem;
}
/**
 * @hidden
 */
export declare class WorkbookLoadManagerExcel2007 extends WorkbookLoadManager {
    static $t: Type;
    private _an;
    private readonly _a8;
    private readonly _ax;
    private readonly _ay;
    private readonly _aj;
    private readonly _ak;
    private readonly _a9;
    private readonly _ba;
    private readonly _az;
    private readonly _a0;
    readonly _a1: Dictionary$2<WorksheetShape, CT_Transform2D>;
    private readonly _a3;
    private readonly _a2;
    readonly _au: boolean;
    static staticInit(): void;
    constructor(a: Workbook, b: Stream, c: WorkbookLoadOptions, d: Nullable$1<ST_ConformanceClass>, e: IPackageFactory);
    protected disposeCore(a: boolean): void;
    _r(): WorksheetCellFormatData;
    protected _p(): WorkItem;
    _z(): void;
    _bo(a: Sheet, b: string): void;
    _bp(a: Sheet, b: WorksheetShape): void;
    _at(a: WorksheetShape): EG_Anchor;
    _aq(a: WorksheetShape): CT_Transform2D;
    _ao(a: string): Sheet;
    _ap(a: string): Worksheet;
    static _bs(a: string): {
        p0?: string;
    };
    _bu(a: WorksheetShape, b: EG_Anchor): void;
    _bv(a: WorksheetShape, b: CT_Transform2D): void;
    static _aw(a: UnknownElementCache, b: ObjectModelExcelDocumentManager, c: WorksheetCellFormatData): {
        ret: boolean;
        p2: WorksheetCellFormatData;
    };
    static _bl(a: IPackage): Nullable$1<WorkbookFormat>;
    static _bq(a: List$1<WorkbookBuiltInStyle>): void;
    static _af(a: List$1<WorksheetTableStyle>): WorkItem;
    static _ah(a: Workbook, b: Stream, c: WorkbookLoadOptions, d: IPackageFactory): WorkItem;
    private static _ag;
    private static _bm;
    private static _bj;
    private static _ar;
    private static _bn;
    private static _bk;
    private static _as;
    private _br;
    private _bt;
    get _bb(): List$1<BorderInfo>;
    get _bc(): List$1<StyleInfo>;
    get _bd(): List$1<FormatInfo>;
    get _be(): List$1<FormatInfo>;
    get _ai(): ObjectModelExcelDocumentManager;
    get _bf(): List$1<FillInfo>;
    get _bg(): List$1<ColorInfo>;
    _av: boolean;
    get _a4(): Dictionary$2<string, number[]>;
    get _a5(): Dictionary$2<number, UnknownShape>;
    get _al(): WorkbookLoadManagerExcel2007_FontCollection;
    get _am(): WorkbookLoadManagerExcel2007_FontCollection;
    get _bh(): List$1<WorkbookLoadManagerExcel2007_NamedReferenceInfo>;
    get _bi(): List$1<WorkbookReferenceBase>;
    get _a6(): Dictionary$2<string, List$1<WorksheetShape>>;
    get _a7(): Dictionary$2<number, WorkbookStyle>;
}
/**
 * @hidden
 */
export declare class WorkbookLoadManagerExcel2007_PresetTableStylesPartManager extends ObjectModelStylesPartManager {
    static $t: Type;
    private readonly ds;
    constructor(a: List$1<WorksheetTableStyle>);
    z(a: string): UnknownElementAction;
    protected t(): WorkItem$1<any>;
}
/**
 * @hidden
 */
export declare class WorkbookSaveManagerExcel2007 extends WorkbookSaveManager {
    static $t: Type;
    private readonly _cd;
    private _cc;
    private readonly _cf;
    private readonly _cg;
    private _cw;
    private readonly _cl;
    private readonly _ci;
    _ce: Dictionary$2<Worksheet, ConditionalFormattingSerializer>;
    _cj: Dictionary$2<Worksheet, SparklinesSerializer>;
    private _ch;
    static staticInit(): void;
    constructor(a: Workbook, b: Stream, c: WorkbookSaveOptions, d: ST_ConformanceClass);
    protected disposeCore(a: boolean): void;
    _a8(a: WorksheetCellFormatData): number;
    _a9(a: WorkbookStyle): number;
    _bm(): void;
    _bt(): void;
    protected get__ai(): boolean;
    protected get _ai(): boolean;
    protected _b6(a: WorksheetShape): {
        p0?: WorksheetShape;
    };
    protected _p(): WorkItem;
    protected _bn(a: Worksheet): void;
    protected _bo(a: Worksheet): void;
    static _c0(a: any, b: ST_CellType, c: string): {
        p1: ST_CellType;
        p2: string;
    };
    _cu(a: DisplayUnit): string;
    _cv(a: Formula): string;
    _cx(a: Worksheet, b: Formula, c: boolean, d: WorksheetRegion): {
        ret: number;
        p2: boolean;
        p3: WorksheetRegion;
    };
    _b8(a: WorksheetShapeCollection, b: Dictionary$2<ExcelImage, string>): WorkItem;
    private _cs;
    private _ct;
    private _cy;
    private _cz;
    static _b9(a: Workbook, b: Stream, c: WorkbookSaveOptions): WorkItem;
    private static _ca;
    get _cm(): List$1<BorderInfo>;
    get _cn(): List$1<StyleInfo>;
    get _co(): List$1<FormatInfo>;
    get _cp(): List$1<FormatInfo>;
    get _cb(): ObjectModelExcelDocumentManager;
    get _ck(): Dictionary$2<WorkbookReferenceBase, number>;
    get _cq(): List$1<FillInfo>;
    get _cr(): List$1<SerializationNumberFormatInfo>;
}
/**
 * @hidden
 */
export declare class CT_Extension extends Base {
    static $t: Type;
    b: string;
    static c(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static e(a: XmlPartManagerBase, b: string, c: string): void;
    toString(): string;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: Type): void;
}
/**
 * @hidden
 */
export declare class CT_ExtensionList extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    constructor();
    get e(): List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    static d(a: CT_ExtensionList): List$1<CT_Extension>;
    static a(a: List$1<CT_Extension>): CT_ExtensionList;
}
/**
 * @hidden
 */
export declare class CT_Boolean extends CT_CommonTypeBase implements ISupportSetProperty {
    static $t: Type;
    constructor(a: ElementNamespaceContext);
    m: Nullable$1<boolean>;
    get k(): boolean;
    l: List$1<CT_X>;
    j: boolean;
    i: boolean;
    f: boolean;
    n: string;
    o: number;
    static d(a: XmlPartManagerBase, b: ElementNamespaceContext): CT_Boolean;
    private static p;
    static r(a: XmlPartManagerBase, b: string, c: string, d: CT_Boolean): void;
    static s(a: XmlPartManagerBase, b: string, c: string, d: ElementNamespaceContext, e: string, f: number, g: boolean, h: boolean, i: boolean, j: boolean): void;
    q(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string, e: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    static g(a: CT_Boolean): boolean;
    static b(a: boolean): CT_Boolean;
}
/**
 * @hidden
 */
export declare class CT_UnsignedInt extends Base {
    static $t: Type;
    g: number;
    static c(a: XmlPartManagerBase, b?: boolean): CT_UnsignedInt;
    private static h;
    static j(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    i(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string, e: string): void;
    toString(): string;
    static e(a: CT_UnsignedInt): number;
    static a(a: number): CT_UnsignedInt;
}
/**
 * @hidden
 */
export declare class CT_Double extends Base {
    static $t: Type;
    f: number;
    static c(a: XmlPartManagerBase): CT_Double;
    private static h;
    static j(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    i(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string, e?: string): void;
    toString(): string;
    static d(a: CT_Double): number;
    static a(a: number): CT_Double;
}
/**
 * @hidden
 */
export declare class SerializationUtils extends Base {
    static $t: Type;
    static x(a: XmlPartManagerBase, b?: boolean): void;
    static ac(a: XmlPartManagerBase, b?: boolean): void;
    static ae(a: XmlPartManagerBase, b?: boolean): void;
    static am(a: XmlPartManagerBase, b?: boolean): void;
    static an(a: XmlPartManagerBase, b?: boolean): void;
    static ao(a: XmlPartManagerBase, b?: boolean): void;
    static av(a: XmlPartManagerBase, b?: boolean): void;
    static a7(a: XmlPartManagerBase, b?: boolean): void;
    static ba(a: XmlPartManagerBase, b?: boolean): void;
    static bc(a: XmlPartManagerBase, b?: boolean): void;
    static bd(a: XmlPartManagerBase, b?: boolean): void;
    static be(a: XmlPartManagerBase, b?: boolean): void;
    static bk(a: XmlPartManagerBase, b?: boolean): void;
    static bl(a: XmlPartManagerBase, b?: boolean): void;
    static bm(a: XmlPartManagerBase, b?: boolean): void;
    static bo(a: XmlPartManagerBase, b?: boolean): void;
    static bp(a: XmlPartManagerBase, b?: boolean): void;
    static bs(a: XmlPartManagerBase, b?: boolean): void;
    static bt(a: XmlPartManagerBase, b?: boolean): void;
    static bu(a: XmlPartManagerBase, b?: boolean): void;
    static b2(a: XmlPartManagerBase, b?: boolean): void;
    static b3(a: XmlPartManagerBase, b?: boolean): void;
    static b4(a: XmlPartManagerBase, b?: boolean): void;
    static b8(a: XmlPartManagerBase, b?: boolean): void;
    static b9(a: XmlPartManagerBase, b?: boolean): void;
    static ca(a: XmlPartManagerBase, b?: boolean): void;
    static ce(a: XmlPartManagerBase, b?: boolean): void;
    static cl(a: XmlPartManagerBase, b?: boolean): void;
    static as(a: XmlPartManagerBase): void;
    static au(a: XmlPartManagerBase): void;
    static a5(a: XmlPartManagerBase): void;
    static br(a: XmlPartManagerBase): void;
    static by(a: XmlPartManagerBase): void;
    static ck(a: XmlPartManagerBase): void;
    static bf(a: XmlPartManagerBase): void;
    static a6(a: XmlPartManagerBase): void;
    static ak(a: XmlPartManagerBase): void;
    static a2(a: XmlPartManagerBase): void;
    static a0(a: XmlPartManagerBase): void;
    static a9(a: XmlPartManagerBase): void;
    static cb(a: XmlPartManagerBase): void;
    static cg(a: XmlPartManagerBase): void;
    static a8(a: XmlPartManagerBase): void;
    static y(a: XmlPartManagerBase, b?: Type[]): void;
    static z(a: XmlPartManagerBase, b?: Type[]): void;
    static aa(a: XmlPartManagerBase, b?: Type[]): void;
    static ab(a: XmlPartManagerBase, b?: Type[]): void;
    static ad(a: XmlPartManagerBase, b?: Type[]): void;
    static af(a: XmlPartManagerBase, b?: Type[]): void;
    static al(a: XmlPartManagerBase, b?: Type[]): void;
    static ap(a: XmlPartManagerBase, b?: Type[]): void;
    static ar(a: XmlPartManagerBase, b?: Type[]): void;
    static at(a: XmlPartManagerBase, b?: Type[]): void;
    static az(a: XmlPartManagerBase, b?: Type[]): void;
    static a4(a: XmlPartManagerBase, b?: Type[]): void;
    static bb(a: XmlPartManagerBase, b?: Type[]): void;
    static bi(a: XmlPartManagerBase, b?: Type[]): void;
    static bn(a: XmlPartManagerBase): void;
    static bx(a: XmlPartManagerBase): void;
    static b1(a: XmlPartManagerBase): void;
    static b5(a: XmlPartManagerBase): void;
    static cf(a: XmlPartManagerBase): void;
    static aq(a: XmlPartManagerBase): void;
    static bq(a: XmlPartManagerBase): void;
    static ag(a: XmlPartManagerBase): void;
    static bw(a: XmlPartManagerBase): void;
    static cm(a: XmlPartManagerBase): void;
    static b6(a: XmlPartManagerBase): void;
    static ai(a: XmlPartManagerBase): void;
    static aj(a: XmlPartManagerBase): void;
    static aw(a: XmlPartManagerBase): void;
    static a1(a: XmlPartManagerBase): void;
    static bj(a: XmlPartManagerBase): void;
    static bz(a: XmlPartManagerBase): void;
    static cc(a: XmlPartManagerBase): void;
    static cd(a: XmlPartManagerBase): void;
    static ch(a: XmlPartManagerBase): void;
    static ci(a: XmlPartManagerBase): void;
    static ah(a: XmlPartManagerBase): void;
    static ax(a: XmlPartManagerBase): void;
    static bh(a: XmlPartManagerBase): void;
    static bv(a: XmlPartManagerBase): void;
    static b0(a: XmlPartManagerBase): void;
    static b7(a: XmlPartManagerBase): void;
    static cj(a: XmlPartManagerBase): void;
    static ay(a: XmlPartManagerBase): void;
    static bg(a: XmlPartManagerBase): void;
    static a3<T extends ISaveToXLSX>($t: Type, a: XmlPartManagerBase, b: T, c: ElementPropertyIds): void;
    static m<T>($t: Type, a: T, b: List$1<T>): List$1<T>;
    static h<T>($t: Type, a: List$1<T>): T;
    static i<T>($t: Type, a: XmlPartManagerBase, b?: boolean): T;
    static j(a: XmlPartManagerBase, b: Type[], c?: boolean): ISupportSetProperty;
    static a(a: ObjectModelChartStylePartManager, b: string): ColorInfo;
    static f(a: XmlPartManagerBase): CT_TextBodyProperties_DML;
    static d(a: XmlPartManagerBase): CT_StyleReference;
    static c(a: XmlPartManagerBase): CT_StyleEntry;
    static b(a: XmlPartManagerBase): CT_FontReference_ChartStyle;
    static e(a: XmlPartManagerBase): CT_Shape3D;
    static g(a: XmlPartManagerBase): CT_Vector3D;
    static w(a: Type[]): void;
    static k(a: XmlPartManagerBase): ST_ConformanceClass;
    static t(a: Uri): string;
    static s(a: string): string;
    static v(a: string): string;
    static o(a: number): number;
    static n(a: number): number;
    static p(a: number): number;
    static u(a: string): string;
    static l(a: string): boolean;
    static q(a: CT_Boolean): Nullable$1<boolean>;
    static r(a: Nullable$1<boolean>): Nullable$1<boolean>;
}
/**
 * @hidden
 */
export declare class CT_EffectStyleItem extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    private e;
    constructor();
    get a(): CT_Scene3D;
    set a(a: CT_Scene3D);
    get c(): CT_Shape3D;
    set c(a: CT_Shape3D);
    get f(): EG_EffectProperties;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_EffectStyleList extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    constructor();
    get c(): List$1<CT_EffectStyleItem>;
    set c(a: List$1<CT_EffectStyleItem>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    static e(a: CT_EffectStyleList): List$1<CT_EffectStyleItem>;
    static a(a: List$1<CT_EffectStyleItem>): CT_EffectStyleList;
}
/**
 * @hidden
 */
export declare class CT_OfficeArtExtension extends Base {
    static $t: Type;
    private h;
    private c;
    get g(): XmlElement;
    set g(a: XmlElement);
    get b(): string;
    set b(a: string);
    static d(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static f(a: XmlPartManagerBase, b: string, c: string): void;
    toString(): string;
    e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class CT_OfficeArtExtensionList extends Base implements ISupportSetProperty {
    static $t: Type;
    private a;
    constructor();
    get b(): EG_OfficeArtExtensionList;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class CT_Color_DML extends Base implements ISupportSetProperty {
    static $t: Type;
    private a;
    constructor();
    get b(): EG_ColorChoice_DML;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class CT_Scene3D extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private f;
    private b;
    private h;
    constructor();
    get c(): CT_Camera;
    set c(a: CT_Camera);
    get e(): CT_LightRig;
    set e(a: CT_LightRig);
    get a(): CT_Backdrop;
    set a(a: CT_Backdrop);
    get g(): CT_OfficeArtExtensionList;
    set g(a: CT_OfficeArtExtensionList);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Backdrop extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private f;
    private h;
    private b;
    constructor();
    get c(): CT_Point3D;
    set c(a: CT_Point3D);
    get e(): CT_Vector3D;
    set e(a: CT_Vector3D);
    get g(): CT_Vector3D;
    set g(a: CT_Vector3D);
    get a(): CT_OfficeArtExtensionList;
    set a(a: CT_OfficeArtExtensionList);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Shape3D extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private b;
    private h;
    private f;
    private j;
    private w;
    private s;
    private q;
    private u;
    constructor();
    get c(): CT_Bevel;
    set c(a: CT_Bevel);
    get a(): CT_Bevel;
    set a(a: CT_Bevel);
    get g(): CT_Color_DML;
    set g(a: CT_Color_DML);
    get e(): CT_Color_DML;
    set e(a: CT_Color_DML);
    get i(): CT_OfficeArtExtensionList;
    set i(a: CT_OfficeArtExtensionList);
    get v(): Nullable$1<number>;
    set v(a: Nullable$1<number>);
    get r(): Nullable$1<number>;
    set r(a: Nullable$1<number>);
    get p(): Nullable$1<number>;
    set p(a: Nullable$1<number>);
    get t(): Nullable$1<ST_PresetMaterialType>;
    set t(a: Nullable$1<ST_PresetMaterialType>);
    static k(a: XmlPartManagerBase): CT_Shape3D;
    static y(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>, d: Nullable$1<number>, e: Nullable$1<ST_PresetMaterialType>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
        p4: Nullable$1<ST_PresetMaterialType>;
    };
    static z(a: XmlPartManagerBase, b: string, c?: Nullable$1<number>, d?: Nullable$1<number>, e?: Nullable$1<ST_PresetMaterialType>, f?: Nullable$1<number>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_FillOverlayEffect extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private a;
    constructor();
    get c(): ST_BlendMode;
    set c(a: ST_BlendMode);
    get b(): EG_FillProperties;
    static f(a: XmlPartManagerBase, b: ST_BlendMode): {
        p1: ST_BlendMode;
    };
    static h(a: XmlPartManagerBase, b: string, c: ST_BlendMode): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    g(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class CT_SolidColorFillProperties extends Base implements ISupportSetProperty, ISaveToXLSX {
    static $t: Type;
    private a;
    constructor();
    get b(): EG_ColorChoice_DML;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    save1(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    get elementName(): string;
    saveX(a: XmlPartManagerBase, b: XmlWriteManager, c: string, d: any): void;
}
/**
 * @hidden
 */
export declare class CT_GradientFillProperties extends Base implements ISupportSetProperty, ISaveToXLSX {
    static $t: Type;
    private f;
    private d;
    private h;
    private j;
    private a;
    constructor();
    get e(): List$1<CT_GradientStop>;
    set e(a: List$1<CT_GradientStop>);
    get c(): CT_RelativeRect;
    set c(a: CT_RelativeRect);
    get g(): Nullable$1<ST_TileFlipMode>;
    set g(a: Nullable$1<ST_TileFlipMode>);
    get i(): Nullable$1<boolean>;
    set i(a: Nullable$1<boolean>);
    get b(): EG_ShadeProperties;
    static l(a: XmlPartManagerBase, b: Nullable$1<ST_TileFlipMode>, c: Nullable$1<boolean>): {
        p1: Nullable$1<ST_TileFlipMode>;
        p2: Nullable$1<boolean>;
    };
    static n(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_TileFlipMode>, d?: Nullable$1<boolean>): void;
    toString(): string;
    save1(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    get elementName(): string;
    saveX(a: XmlPartManagerBase, b: XmlWriteManager, c: string, d: any): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_LinearShadeProperties extends Base {
    static $t: Type;
    private b;
    private d;
    get a(): Nullable$1<number>;
    set a(a: Nullable$1<number>);
    get c(): Nullable$1<boolean>;
    set c(a: Nullable$1<boolean>);
    static f(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<boolean>;
    };
    static h(a: XmlPartManagerBase, b: string, c?: Nullable$1<number>, d?: Nullable$1<boolean>): void;
    toString(): string;
    g(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class CT_PathShadeProperties extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    constructor();
    get a(): CT_RelativeRect;
    set a(a: CT_RelativeRect);
    get c(): Nullable$1<ST_PathShadeType>;
    set c(a: Nullable$1<ST_PathShadeType>);
    static f(a: XmlPartManagerBase, b: Nullable$1<ST_PathShadeType>): {
        p1: Nullable$1<ST_PathShadeType>;
    };
    static h(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_PathShadeType>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    g(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class CT_PatternFillProperties extends Base implements ISupportSetProperty, ISaveToXLSX {
    static $t: Type;
    private d;
    private b;
    private f;
    constructor();
    get c(): CT_Color_DML;
    set c(a: CT_Color_DML);
    get a(): CT_Color_DML;
    set a(a: CT_Color_DML);
    get e(): Nullable$1<ST_PresetPatternVal>;
    set e(a: Nullable$1<ST_PresetPatternVal>);
    static h(a: XmlPartManagerBase, b: Nullable$1<ST_PresetPatternVal>): {
        p1: Nullable$1<ST_PresetPatternVal>;
    };
    static j(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_PresetPatternVal>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    get elementName(): string;
    saveX(a: XmlPartManagerBase, b: XmlWriteManager, c: string, d: any): void;
    save1(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class CT_FillEffect extends Base implements ISupportSetProperty {
    static $t: Type;
    private a;
    constructor();
    get b(): EG_FillProperties;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ColorChangeEffect extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    private g;
    constructor();
    get a(): CT_Color_DML;
    set a(a: CT_Color_DML);
    get c(): CT_Color_DML;
    set c(a: CT_Color_DML);
    get f(): Nullable$1<boolean>;
    set f(a: Nullable$1<boolean>);
    static i(a: XmlPartManagerBase, b: Nullable$1<boolean>): {
        p1: Nullable$1<boolean>;
    };
    static j(a: XmlPartManagerBase, b: string, c?: Nullable$1<boolean>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_BlendEffect extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    constructor();
    get a(): CT_EffectContainer;
    set a(a: CT_EffectContainer);
    get c(): ST_BlendMode;
    set c(a: ST_BlendMode);
    static f(a: XmlPartManagerBase, b: ST_BlendMode): {
        p1: ST_BlendMode;
    };
    static g(a: XmlPartManagerBase, b: string, c: ST_BlendMode): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_EffectContainer extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private h;
    private j;
    private b;
    constructor();
    get e(): List$1<any>;
    set e(a: List$1<any>);
    get g(): Nullable$1<ST_EffectContainerType>;
    set g(a: Nullable$1<ST_EffectContainerType>);
    get i(): string;
    set i(a: string);
    get c(): EG_Effect;
    static a(a: XmlPartManagerBase): CT_EffectContainer;
    static l(a: XmlPartManagerBase, b: Nullable$1<ST_EffectContainerType>, c: string): {
        p1: Nullable$1<ST_EffectContainerType>;
        p2: string;
    };
    static m(a: XmlPartManagerBase, b: string, c?: string, d?: Nullable$1<ST_EffectContainerType>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_AlphaModulateEffect extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): CT_EffectContainer;
    set a(a: CT_EffectContainer);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_GradientStopList extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    constructor();
    get c(): List$1<CT_GradientStop>;
    set c(a: List$1<CT_GradientStop>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    static e(a: CT_GradientStopList): List$1<CT_GradientStop>;
    static a(a: List$1<CT_GradientStop>): CT_GradientStopList;
}
/**
 * @hidden
 */
export declare class CT_FillProperties extends Base implements ISupportSetProperty {
    static $t: Type;
    private a;
    constructor();
    get b(): EG_FillProperties;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_EffectList extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    private f;
    private h;
    private j;
    private l;
    private n;
    private p;
    constructor();
    get a(): CT_BlurEffect;
    set a(a: CT_BlurEffect);
    get c(): CT_FillOverlayEffect;
    set c(a: CT_FillOverlayEffect);
    get e(): CT_GlowEffect;
    set e(a: CT_GlowEffect);
    get g(): CT_InnerShadowEffect;
    set g(a: CT_InnerShadowEffect);
    get i(): CT_OuterShadowEffect;
    set i(a: CT_OuterShadowEffect);
    get k(): CT_PresetShadowEffect;
    set k(a: CT_PresetShadowEffect);
    get m(): CT_ReflectionEffect;
    set m(a: CT_ReflectionEffect);
    get o(): CT_SoftEdgesEffect;
    set o(a: CT_SoftEdgesEffect);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_EffectProperties extends Base implements ISupportSetProperty {
    static $t: Type;
    private a;
    constructor();
    get b(): EG_EffectProperties;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ShapeProperties_DML extends Base implements ISupportSetProperty {
    static $t: Type;
    private p;
    private b;
    private f;
    private h;
    private d;
    private r;
    private m;
    private k;
    private i;
    constructor();
    get o(): CT_Transform2D;
    set o(a: CT_Transform2D);
    get a(): CT_LineProperties_DML;
    set a(a: CT_LineProperties_DML);
    get e(): CT_Scene3D;
    set e(a: CT_Scene3D);
    get g(): CT_Shape3D;
    set g(a: CT_Shape3D);
    get c(): CT_OfficeArtExtensionList;
    set c(a: CT_OfficeArtExtensionList);
    get q(): Nullable$1<ST_BlackWhiteMode>;
    set q(a: Nullable$1<ST_BlackWhiteMode>);
    get n(): EG_Geometry;
    get l(): EG_FillProperties;
    get j(): EG_EffectProperties;
    static t(a: XmlPartManagerBase, b: Nullable$1<ST_BlackWhiteMode>): {
        p1: Nullable$1<ST_BlackWhiteMode>;
    };
    static u(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_BlackWhiteMode>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_StyleMatrixReference_DML extends Base implements ISupportSetProperty {
    static $t: Type;
    private e;
    private a;
    constructor();
    get d(): number;
    set d(a: number);
    get b(): EG_ColorChoice_DML;
    static f(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static g(a: XmlPartManagerBase, b: string, c: number): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ColorMapping extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    private q;
    private y;
    private s;
    private aa;
    private e;
    private g;
    private i;
    private k;
    private m;
    private o;
    private w;
    private u;
    constructor();
    get b(): CT_OfficeArtExtensionList;
    set b(a: CT_OfficeArtExtensionList);
    get p(): ST_ColorSchemeIndex;
    set p(a: ST_ColorSchemeIndex);
    get x(): ST_ColorSchemeIndex;
    set x(a: ST_ColorSchemeIndex);
    get r(): ST_ColorSchemeIndex;
    set r(a: ST_ColorSchemeIndex);
    get z(): ST_ColorSchemeIndex;
    set z(a: ST_ColorSchemeIndex);
    get d(): ST_ColorSchemeIndex;
    set d(a: ST_ColorSchemeIndex);
    get f(): ST_ColorSchemeIndex;
    set f(a: ST_ColorSchemeIndex);
    get h(): ST_ColorSchemeIndex;
    set h(a: ST_ColorSchemeIndex);
    get j(): ST_ColorSchemeIndex;
    set j(a: ST_ColorSchemeIndex);
    get l(): ST_ColorSchemeIndex;
    set l(a: ST_ColorSchemeIndex);
    get n(): ST_ColorSchemeIndex;
    set n(a: ST_ColorSchemeIndex);
    get v(): ST_ColorSchemeIndex;
    set v(a: ST_ColorSchemeIndex);
    get t(): ST_ColorSchemeIndex;
    set t(a: ST_ColorSchemeIndex);
    static a(a: XmlPartManagerBase): CT_ColorMapping;
    static ac(a: XmlPartManagerBase, b: ST_ColorSchemeIndex, c: ST_ColorSchemeIndex, d: ST_ColorSchemeIndex, e: ST_ColorSchemeIndex, f: ST_ColorSchemeIndex, g: ST_ColorSchemeIndex, h: ST_ColorSchemeIndex, i: ST_ColorSchemeIndex, j: ST_ColorSchemeIndex, k: ST_ColorSchemeIndex, l: ST_ColorSchemeIndex, m: ST_ColorSchemeIndex): {
        p1: ST_ColorSchemeIndex;
        p2: ST_ColorSchemeIndex;
        p3: ST_ColorSchemeIndex;
        p4: ST_ColorSchemeIndex;
        p5: ST_ColorSchemeIndex;
        p6: ST_ColorSchemeIndex;
        p7: ST_ColorSchemeIndex;
        p8: ST_ColorSchemeIndex;
        p9: ST_ColorSchemeIndex;
        p10: ST_ColorSchemeIndex;
        p11: ST_ColorSchemeIndex;
        p12: ST_ColorSchemeIndex;
    };
    static ad(a: XmlPartManagerBase, b: string, c: ST_ColorSchemeIndex, d: ST_ColorSchemeIndex, e: ST_ColorSchemeIndex, f: ST_ColorSchemeIndex, g: ST_ColorSchemeIndex, h: ST_ColorSchemeIndex, i: ST_ColorSchemeIndex, j: ST_ColorSchemeIndex, k: ST_ColorSchemeIndex, l: ST_ColorSchemeIndex, m: ST_ColorSchemeIndex, n: ST_ColorSchemeIndex): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TextListStyle_DML extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private f;
    private h;
    private j;
    private l;
    private n;
    private p;
    private r;
    private t;
    private v;
    private b;
    constructor();
    get c(): CT_TextParagraphProperties_DML;
    set c(a: CT_TextParagraphProperties_DML);
    get e(): CT_TextParagraphProperties_DML;
    set e(a: CT_TextParagraphProperties_DML);
    get g(): CT_TextParagraphProperties_DML;
    set g(a: CT_TextParagraphProperties_DML);
    get i(): CT_TextParagraphProperties_DML;
    set i(a: CT_TextParagraphProperties_DML);
    get k(): CT_TextParagraphProperties_DML;
    set k(a: CT_TextParagraphProperties_DML);
    get m(): CT_TextParagraphProperties_DML;
    set m(a: CT_TextParagraphProperties_DML);
    get o(): CT_TextParagraphProperties_DML;
    set o(a: CT_TextParagraphProperties_DML);
    get q(): CT_TextParagraphProperties_DML;
    set q(a: CT_TextParagraphProperties_DML);
    get s(): CT_TextParagraphProperties_DML;
    set s(a: CT_TextParagraphProperties_DML);
    get u(): CT_TextParagraphProperties_DML;
    set u(a: CT_TextParagraphProperties_DML);
    get a(): CT_OfficeArtExtensionList;
    set a(a: CT_OfficeArtExtensionList);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TextBodyProperties_DML extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private f;
    private b;
    private ag;
    private am;
    private au;
    private y;
    private as;
    private aw;
    private aa;
    private ao;
    private ae;
    private q;
    private ac;
    private ak;
    private ai;
    private w;
    private o;
    private n;
    private u;
    private aq;
    private s;
    private i;
    private g;
    constructor();
    get c(): CT_PresetTextShape;
    set c(a: CT_PresetTextShape);
    get e(): CT_Scene3D;
    set e(a: CT_Scene3D);
    get a(): CT_OfficeArtExtensionList;
    set a(a: CT_OfficeArtExtensionList);
    get af(): Nullable$1<number>;
    set af(a: Nullable$1<number>);
    get al(): Nullable$1<boolean>;
    set al(a: Nullable$1<boolean>);
    get at(): Nullable$1<ST_TextVertOverflowType>;
    set at(a: Nullable$1<ST_TextVertOverflowType>);
    get x(): Nullable$1<ST_TextHorzOverflowType>;
    set x(a: Nullable$1<ST_TextHorzOverflowType>);
    get ar(): Nullable$1<ST_TextVerticalType>;
    set ar(a: Nullable$1<ST_TextVerticalType>);
    get av(): Nullable$1<ST_TextWrappingType>;
    set av(a: Nullable$1<ST_TextWrappingType>);
    get z(): Nullable$1<number>;
    set z(a: Nullable$1<number>);
    get an(): Nullable$1<number>;
    set an(a: Nullable$1<number>);
    get ad(): Nullable$1<number>;
    set ad(a: Nullable$1<number>);
    get p(): Nullable$1<number>;
    set p(a: Nullable$1<number>);
    get ab(): Nullable$1<number>;
    set ab(a: Nullable$1<number>);
    get aj(): Nullable$1<number>;
    set aj(a: Nullable$1<number>);
    get ah(): Nullable$1<boolean>;
    set ah(a: Nullable$1<boolean>);
    get v(): Nullable$1<boolean>;
    set v(a: Nullable$1<boolean>);
    get l(): Nullable$1<ST_TextAnchoringType>;
    set l(a: Nullable$1<ST_TextAnchoringType>);
    get m(): Nullable$1<boolean>;
    set m(a: Nullable$1<boolean>);
    get t(): Nullable$1<boolean>;
    set t(a: Nullable$1<boolean>);
    get ap(): Nullable$1<boolean>;
    set ap(a: Nullable$1<boolean>);
    get r(): Nullable$1<boolean>;
    set r(a: Nullable$1<boolean>);
    get j(): EG_TextAutofit;
    get h(): EG_Text3D;
    static ay(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<boolean>, d: Nullable$1<ST_TextVertOverflowType>, e: Nullable$1<ST_TextHorzOverflowType>, f: Nullable$1<ST_TextVerticalType>, g: Nullable$1<ST_TextWrappingType>, h: Nullable$1<number>, i: Nullable$1<number>, j: Nullable$1<number>, k: Nullable$1<number>, l: Nullable$1<number>, m: Nullable$1<number>, n: Nullable$1<boolean>, o: Nullable$1<boolean>, p: Nullable$1<ST_TextAnchoringType>, q: Nullable$1<boolean>, r: Nullable$1<boolean>, s: Nullable$1<boolean>, t: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<boolean>;
        p3: Nullable$1<ST_TextVertOverflowType>;
        p4: Nullable$1<ST_TextHorzOverflowType>;
        p5: Nullable$1<ST_TextVerticalType>;
        p6: Nullable$1<ST_TextWrappingType>;
        p7: Nullable$1<number>;
        p8: Nullable$1<number>;
        p9: Nullable$1<number>;
        p10: Nullable$1<number>;
        p11: Nullable$1<number>;
        p12: Nullable$1<number>;
        p13: Nullable$1<boolean>;
        p14: Nullable$1<boolean>;
        p15: Nullable$1<ST_TextAnchoringType>;
        p16: Nullable$1<boolean>;
        p17: Nullable$1<boolean>;
        p18: Nullable$1<boolean>;
        p19: Nullable$1<boolean>;
    };
    static az(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_TextAnchoringType>, d?: Nullable$1<boolean>, e?: Nullable$1<number>, f?: Nullable$1<boolean>, g?: Nullable$1<boolean>, h?: Nullable$1<boolean>, i?: Nullable$1<ST_TextHorzOverflowType>, j?: Nullable$1<number>, k?: Nullable$1<number>, l?: Nullable$1<number>, m?: Nullable$1<number>, n?: Nullable$1<boolean>, o?: Nullable$1<number>, p?: Nullable$1<boolean>, q?: Nullable$1<number>, r?: Nullable$1<boolean>, s?: Nullable$1<ST_TextVerticalType>, t?: Nullable$1<ST_TextVertOverflowType>, u?: Nullable$1<ST_TextWrappingType>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TextBlipBullet extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): CT_Blip_DML;
    set a(a: CT_Blip_DML);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TextUnderlineFillGroupWrapper extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private a;
    get item(): any;
    set item(a: any);
    get b(): EG_FillProperties;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TextLineBreak extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): CT_TextCharacterProperties_DML;
    set a(a: CT_TextCharacterProperties_DML);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TextSpacing extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    get item(): any;
    set item(a: any);
    toString(): string;
    a: CT_TextSpacingPercent;
    b: CT_TextSpacingPoint;
    setProperty(a: ElementPropertyIds, b: any): void;
    f(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class CT_TextField extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    private h;
    private f;
    private k;
    constructor();
    get a(): CT_TextCharacterProperties_DML;
    set a(a: CT_TextCharacterProperties_DML);
    get c(): CT_TextParagraphProperties_DML;
    set c(a: CT_TextParagraphProperties_DML);
    get g(): string;
    set g(a: string);
    get e(): string;
    set e(a: string);
    get j(): string;
    set j(a: string);
    static l(a: XmlPartManagerBase, b: string, c: string): {
        p1: string;
        p2: string;
    };
    static m(a: XmlPartManagerBase, b: string, c: string, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_RegularTextRun_DML extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    constructor();
    get a(): CT_TextCharacterProperties_DML;
    set a(a: CT_TextCharacterProperties_DML);
    get c(): string;
    set c(a: string);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class EG_EffectProperties extends Base {
    static $t: Type;
    a: CT_EffectContainer;
    b: CT_EffectList;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    e(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_OfficeArtExtensionList extends Base {
    static $t: Type;
    constructor();
    b: List$1<CT_OfficeArtExtension>;
    c(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    d(a: ElementPropertyIds, b: any): void;
    a(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_FillPropertiesBase extends Base {
    static $t: Type;
    a: CT_GradientFillProperties;
    d: CT_NoFillProperties;
    b: CT_PatternFillProperties;
    c: CT_SolidColorFillProperties;
    h(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    j(a: ElementPropertyIds, b: any): void;
    f(a: ElementPropertyIds): boolean;
    protected get_e(): boolean;
    get e(): boolean;
    i(): void;
    g(): void;
}
/**
 * @hidden
 */
export declare class EG_FillProperties extends EG_FillPropertiesBase {
    static $t: Type;
    k: CT_BlipFillProperties_DML;
    l: CT_GroupFillProperties;
    h(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    j(a: ElementPropertyIds, b: any): void;
    f(a: ElementPropertyIds): boolean;
    protected get_e(): boolean;
    g(): void;
}
/**
 * @hidden
 */
export declare class EG_ShadeProperties extends Base {
    static $t: Type;
    a: CT_LinearShadeProperties;
    b: CT_PathShadeProperties;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    e(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_Effect extends Base {
    static $t: Type;
    a: CT_AlphaBiLevelEffect;
    b: CT_AlphaCeilingEffect;
    c: CT_AlphaFloorEffect;
    d: CT_AlphaInverseEffect;
    e: CT_AlphaModulateEffect;
    f: CT_AlphaModulateFixedEffect;
    g: CT_AlphaOutsetEffect;
    h: CT_AlphaReplaceEffect;
    i: CT_BiLevelEffect;
    j: CT_BlendEffect;
    k: CT_BlurEffect;
    l: CT_ColorChangeEffect;
    m: CT_ColorReplaceEffect;
    o: CT_EffectContainer;
    n: CT_DuotoneEffect;
    p: CT_EffectReference;
    q: CT_FillEffect;
    r: CT_FillOverlayEffect;
    s: CT_GlowEffect;
    t: CT_GrayscaleEffect;
    u: CT_HSLEffect;
    v: CT_InnerShadowEffect;
    w: CT_LuminanceEffect;
    x: CT_OuterShadowEffect;
    y: CT_PresetShadowEffect;
    z: CT_ReflectionEffect;
    aa: CT_RelativeOffsetEffect;
    ab: CT_SoftEdgesEffect;
    ac: CT_TintEffect;
    ad: CT_TransformEffect;
    af(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    ag(a: ElementPropertyIds, b: any): void;
    ae(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_Geometry extends Base {
    static $t: Type;
    a: CT_CustomGeometry2D;
    b: CT_PresetGeometry2D;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    e(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_ColorChoice_DML extends Base {
    static $t: Type;
    constructor();
    a: CT_HslColor;
    b: CT_PresetColor;
    c: CT_SchemeColor_DML;
    d: CT_ScRgbColor;
    e: CT_SRgbColor_DML;
    f: CT_SystemColor;
    h(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    i(a: ElementPropertyIds, b: any): void;
    g(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_TextAutofit extends Base {
    static $t: Type;
    a: CT_TextNoAutofit;
    b: CT_TextNormalAutofit;
    c: CT_TextShapeAutofit;
    e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    f(a: ElementPropertyIds, b: any): void;
    d(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_Text3D extends Base {
    static $t: Type;
    a: CT_FlatText;
    b: CT_Shape3D;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    e(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_FillModeProperties extends Base {
    static $t: Type;
    constructor();
    a: CT_StretchInfoProperties;
    b: CT_TileInfoProperties;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    e(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_ColorTransform extends Base {
    static $t: Type;
    constructor();
    y: CT_PositiveFixedPercentage;
    ab: CT_PositivePercentage;
    f: CT_FixedPercentage;
    i: CT_Percentage;
    j: CT_Percentage;
    k: CT_Percentage;
    e: CT_ComplementTransform;
    a: CT_GammaTransform;
    g: CT_GrayscaleTransform;
    l: CT_Percentage;
    m: CT_Percentage;
    n: CT_Percentage;
    x: CT_PositiveFixedAngle;
    ac: CT_PositivePercentage;
    d: CT_Angle;
    h: CT_InverseTransform;
    b: CT_InverseGammaTransform;
    o: CT_Percentage;
    p: CT_Percentage;
    q: CT_Percentage;
    r: CT_Percentage;
    s: CT_Percentage;
    t: CT_Percentage;
    u: CT_Percentage;
    v: CT_Percentage;
    w: CT_Percentage;
    z: CT_PositiveFixedPercentage;
    aa: CT_PositiveFixedPercentage;
    af(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    ag(a: ElementPropertyIds, b: any): void;
    ad(a: ElementPropertyIds): boolean;
    c(): WorkbookColorTransform;
    ae(a: WorkbookColorTransform): void;
}
/**
 * @hidden
 */
export declare class EG_LineFillProperties extends EG_FillPropertiesBase {
    static $t: Type;
    constructor();
    h(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    j(a: ElementPropertyIds, b: any): void;
    f(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_LineDashProperties extends Base {
    static $t: Type;
    constructor();
    a: CT_DashStopList;
    b: CT_PresetLineDashProperties;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    e(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_LineJoinProperties extends Base {
    static $t: Type;
    constructor();
    a: CT_LineJoinBevel;
    b: CT_LineJoinMiterProperties;
    c: CT_LineJoinRound;
    e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    f(a: ElementPropertyIds, b: any): void;
    d(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_TextUnderlineLine extends Base {
    static $t: Type;
    constructor();
    a: CT_LineProperties_DML;
    b: CT_TextUnderlineLineFollowText;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    e(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_TextUnderlineFill extends Base {
    static $t: Type;
    constructor();
    b: CT_TextUnderlineFillGroupWrapper;
    a: CT_TextUnderlineFillFollowText;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    e(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_TextBulletColor extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    b: CT_TextBulletColorFollowText;
    a: CT_Color_DML;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_TextBulletSize extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: CT_TextBulletSizeFollowText;
    b: CT_TextBulletSizePercent;
    c: CT_TextBulletSizePoint;
    e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    d(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_TextBulletTypeface extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: CT_TextBulletTypefaceFollowText;
    b: CT_TextFont;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_TextBullet extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    d: CT_TextNoBullet;
    a: CT_TextAutonumberBullet;
    c: CT_TextCharBullet;
    b: CT_TextBlipBullet;
    f(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    e(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_TextRun extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: CT_RegularTextRun_DML;
    c: CT_TextLineBreak;
    b: CT_TextField;
    e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    d(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class CT_BlipFillProperties_DML extends CT_BlipFillPropertiesBase implements ISaveToXLSX, ISupportSetProperty {
    static $t: Type;
    private f;
    d: CT_Blip_DML;
    get g(): EG_FillModeProperties;
    setProperty(a: ElementPropertyIds, b: any): void;
    static e(a: XmlPartManagerBase): CT_BlipFillProperties_DML;
    static i(a: XmlPartManagerBase, b: string, c?: Nullable$1<number>, d?: Nullable$1<boolean>): void;
    save1(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    get elementName(): string;
    saveX(a: XmlPartManagerBase, b: XmlWriteManager, c: string, d: any): void;
}
/**
 * @hidden
 */
export declare class CT_TextCharacterProperties_DML extends CT_TextCharacterPropertiesBase implements ISupportSetProperty {
    static $t: Type;
    private ac;
    private aa;
    private ag;
    private ae;
    constructor();
    get ad(): EG_FillProperties;
    get ab(): EG_EffectProperties;
    get ah(): EG_TextUnderlineLine;
    get af(): EG_TextUnderlineFill;
    x: CT_LineProperties_DML;
    w: CT_Color_DML;
    ak: CT_TextFont;
    ai: CT_Hyperlink;
    aj: CT_Hyperlink;
    y: CT_OfficeArtExtensionList;
    static z(a: XmlPartManagerBase, b: string): CT_TextCharacterProperties_DML;
    static ap(a: XmlPartManagerBase, b: string, c: Nullable$1<boolean>, d: string, e: string, f: Nullable$1<ST_TextFontSize>, g: Nullable$1<boolean>, h: Nullable$1<boolean>, i: Nullable$1<ST_TextUnderlineType>, j: Nullable$1<ST_TextStrikeType>, k: Nullable$1<number>, l: Nullable$1<ST_TextCapsType>, m: Nullable$1<ST_TextPoint>, n: Nullable$1<boolean>, o: Nullable$1<ST_Percentage>, p: Nullable$1<boolean>, q: Nullable$1<boolean>, r: Nullable$1<boolean>, s: Nullable$1<boolean>, t: Nullable$1<number>, u: string): {
        p2: Nullable$1<boolean>;
        p3: string;
        p4: string;
        p5: Nullable$1<ST_TextFontSize>;
        p6: Nullable$1<boolean>;
        p7: Nullable$1<boolean>;
        p8: Nullable$1<ST_TextUnderlineType>;
        p9: Nullable$1<ST_TextStrikeType>;
        p10: Nullable$1<number>;
        p11: Nullable$1<ST_TextCapsType>;
        p12: Nullable$1<ST_TextPoint>;
        p13: Nullable$1<boolean>;
        p14: Nullable$1<ST_Percentage>;
        p15: Nullable$1<boolean>;
        p16: Nullable$1<boolean>;
        p17: Nullable$1<boolean>;
        p18: Nullable$1<boolean>;
        p19: Nullable$1<number>;
        p20: string;
    };
    static ar(a: XmlPartManagerBase, b: string, c?: string, d?: Nullable$1<boolean>, e?: Nullable$1<ST_Percentage>, f?: string, g?: Nullable$1<ST_TextCapsType>, h?: Nullable$1<boolean>, i?: Nullable$1<boolean>, j?: Nullable$1<boolean>, k?: Nullable$1<number>, l?: Nullable$1<boolean>, m?: string, n?: Nullable$1<boolean>, o?: Nullable$1<boolean>, p?: Nullable$1<boolean>, q?: Nullable$1<number>, r?: Nullable$1<ST_TextPoint>, s?: Nullable$1<ST_TextStrikeType>, t?: Nullable$1<number>, u?: Nullable$1<ST_TextUnderlineType>): void;
    aq(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_Blip_DML extends CT_Blip implements ISupportSetProperty {
    static $t: Type;
    constructor();
    f: CT_AlphaBiLevelEffect;
    g: CT_AlphaCeilingEffect;
    h: CT_AlphaFloorEffect;
    i: CT_AlphaInverseEffect;
    j: CT_AlphaModulateEffect;
    k: CT_AlphaModulateFixedEffect;
    l: CT_AlphaReplaceEffect;
    m: CT_BiLevelEffect;
    o: CT_BlurEffect;
    p: CT_ColorChangeEffect;
    q: CT_ColorReplaceEffect;
    r: CT_DuotoneEffect;
    w: CT_OfficeArtExtensionList;
    s: CT_FillOverlayEffect;
    t: CT_GrayscaleEffect;
    u: CT_HSLEffect;
    v: CT_LuminanceEffect;
    x: CT_TintEffect;
    setProperty(a: ElementPropertyIds, b: any): void;
    static n(a: XmlPartManagerBase): CT_Blip_DML;
    static z(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_BlipCompression>): void;
}
/**
 * @hidden
 */
export declare class CT_LineStyleList extends Base {
    static $t: Type;
    constructor();
    a: List$1<CT_LineProperties_DML>;
}
/**
 * @hidden
 */
export declare class CT_LineProperties_DML extends CT_LinePropertiesBase implements ISupportSetProperty {
    static $t: Type;
    private m;
    private k;
    private o;
    get n(): EG_LineFillProperties;
    get l(): EG_LineDashProperties;
    get p(): EG_LineJoinProperties;
    q: Nullable$1<number>;
    j: CT_OfficeArtExtensionList;
    static i(a: XmlPartManagerBase): CT_LineProperties_DML;
    private static s;
    r(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare abstract class CT_DMLColorBase extends Base {
    static $t: Type;
    constructor();
    private a;
    get b(): EG_ColorTransform;
    abstract d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_SRgbColor_DML extends CT_DMLColorBase implements ISupportSetProperty {
    static $t: Type;
    f: ST_HexColorRGB;
    static e(a: XmlPartManagerBase): CT_SRgbColor_DML;
    private static g;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_ScRgbColor extends CT_DMLColorBase implements ISupportSetProperty {
    static $t: Type;
    h: number;
    g: number;
    f: number;
    static e(a: XmlPartManagerBase): CT_ScRgbColor;
    private static i;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_HslColor extends CT_DMLColorBase implements ISupportSetProperty {
    static $t: Type;
    f: number;
    h: number;
    g: number;
    static e(a: XmlPartManagerBase): CT_HslColor;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    private static i;
}
/**
 * @hidden
 */
export declare class CT_SystemColor extends CT_DMLColorBase implements ISupportSetProperty {
    static $t: Type;
    f: ST_SystemColorVal;
    g: Nullable$1<ST_HexColorRGB>;
    static e(a: XmlPartManagerBase): CT_SystemColor;
    private static h;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_SchemeColor_DML extends CT_DMLColorBase implements ISupportSetProperty {
    static $t: Type;
    g: ST_SchemeColorVal;
    static f(a: XmlPartManagerBase): CT_SchemeColor_DML;
    static h(a: XmlPartManagerBase, b: ST_SchemeColorVal): void;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    static e(a: ST_SchemeColorVal, b?: Nullable$1<number>, c?: Nullable$1<number>): CT_SchemeColor_DML;
}
/**
 * @hidden
 */
export declare class CT_PresetColor extends CT_DMLColorBase implements ISupportSetProperty {
    static $t: Type;
    f: ST_PresetColorVal;
    static e(a: XmlPartManagerBase): CT_PresetColor;
    static g(a: XmlPartManagerBase, b: ST_PresetColorVal): void;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_StyleMatrix extends Base {
    static $t: Type;
    constructor();
    c: CT_FillStyleList;
    d: CT_LineStyleList;
    b: CT_EffectStyleList;
    a: CT_BackgroundFillStyleList;
    e: string;
    static g(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static h(a: XmlPartManagerBase, b: string, c?: string): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ColorEffectBase extends Base {
    static $t: Type;
    private a;
    get b(): EG_ColorChoice_DML;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_PresetShadowEffect extends CT_ColorEffectBase implements ISupportSetProperty {
    static $t: Type;
    private e;
    private k;
    private i;
    constructor();
    get d(): ST_PresetShadowVal;
    set d(a: ST_PresetShadowVal);
    get j(): Nullable$1<number>;
    set j(a: Nullable$1<number>);
    get h(): Nullable$1<number>;
    set h(a: Nullable$1<number>);
    m(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    static l(a: XmlPartManagerBase, b: ST_PresetShadowVal, c: Nullable$1<number>, d: Nullable$1<number>): {
        p1: ST_PresetShadowVal;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
    };
    static n(a: XmlPartManagerBase, b: string, c: Nullable$1<number>, d: Nullable$1<number>, e: ST_PresetShadowVal): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_OuterShadowEffect extends CT_ColorEffectBase implements ISupportSetProperty {
    static $t: Type;
    private q;
    private u;
    private s;
    private ac;
    private ae;
    private w;
    private y;
    private o;
    private aa;
    constructor();
    get p(): Nullable$1<number>;
    set p(a: Nullable$1<number>);
    get t(): Nullable$1<number>;
    set t(a: Nullable$1<number>);
    get r(): Nullable$1<number>;
    set r(a: Nullable$1<number>);
    get ab(): Nullable$1<number>;
    set ab(a: Nullable$1<number>);
    get ad(): Nullable$1<number>;
    set ad(a: Nullable$1<number>);
    get v(): Nullable$1<number>;
    set v(a: Nullable$1<number>);
    get x(): Nullable$1<number>;
    set x(a: Nullable$1<number>);
    get n(): Nullable$1<ST_RectAlignment>;
    set n(a: Nullable$1<ST_RectAlignment>);
    get z(): Nullable$1<boolean>;
    set z(a: Nullable$1<boolean>);
    ag(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    static d(a: XmlPartManagerBase): CT_OuterShadowEffect;
    static af(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>, d: Nullable$1<number>, e: Nullable$1<number>, f: Nullable$1<number>, g: Nullable$1<number>, h: Nullable$1<number>, i: Nullable$1<ST_RectAlignment>, j: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
        p5: Nullable$1<number>;
        p6: Nullable$1<number>;
        p7: Nullable$1<number>;
        p8: Nullable$1<ST_RectAlignment>;
        p9: Nullable$1<boolean>;
    };
    static ah(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_RectAlignment>, d?: Nullable$1<number>, e?: Nullable$1<number>, f?: Nullable$1<number>, g?: Nullable$1<number>, h?: Nullable$1<number>, i?: Nullable$1<boolean>, j?: Nullable$1<number>, k?: Nullable$1<number>): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_InnerShadowEffect extends CT_ColorEffectBase implements ISupportSetProperty {
    static $t: Type;
    private h;
    private l;
    private j;
    constructor();
    get g(): Nullable$1<number>;
    set g(a: Nullable$1<number>);
    get k(): Nullable$1<number>;
    set k(a: Nullable$1<number>);
    get i(): Nullable$1<number>;
    set i(a: Nullable$1<number>);
    n(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    static m(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>, d: Nullable$1<number>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
    };
    static o(a: XmlPartManagerBase, b: string, c?: Nullable$1<number>, d?: Nullable$1<number>, e?: Nullable$1<number>): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_GlowEffect extends CT_ColorEffectBase implements ISupportSetProperty {
    static $t: Type;
    private f;
    constructor();
    get e(): Nullable$1<number>;
    set e(a: Nullable$1<number>);
    h(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    static g(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static i(a: XmlPartManagerBase, b: string, c?: Nullable$1<number>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_GradientStop extends CT_ColorEffectBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    d: ST_PositiveFixedPercentage;
    f(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    static e(a: XmlPartManagerBase, b: ST_PositiveFixedPercentage): {
        p1: ST_PositiveFixedPercentage;
    };
    static g(a: XmlPartManagerBase, b: string, c: ST_PositiveFixedPercentage): void;
}
/**
 * @hidden
 */
export declare class CT_DuotoneEffect extends CT_ColorEffectBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_ColorReplaceEffect extends CT_ColorEffectBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_AlphaInverseEffect extends CT_ColorEffectBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_TextParagraphProperties_DML extends CT_TextParagraphProperties implements ISupportSetProperty {
    static $t: Type;
    private u;
    private w;
    private y;
    private s;
    constructor();
    p: CT_TextSpacing;
    r: CT_TextSpacing;
    q: CT_TextSpacing;
    aa: List$1<CT_TextTabStop>;
    n: CT_OfficeArtExtensionList;
    get v(): EG_TextBulletColor;
    get x(): EG_TextBulletSize;
    get z(): EG_TextBulletTypeface;
    get t(): EG_TextBullet;
    static o(a: XmlPartManagerBase): CT_TextParagraphProperties_DML;
    private static ab;
    static ad(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_TextAlignType>, d?: Nullable$1<ST_Coordinate32>, e?: Nullable$1<boolean>, f?: Nullable$1<ST_TextFontAlignType>, g?: Nullable$1<boolean>, h?: Nullable$1<number>, i?: Nullable$1<boolean>, j?: Nullable$1<number>, k?: Nullable$1<number>, l?: Nullable$1<number>, m?: Nullable$1<boolean>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    ac(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TextParagraph_DML extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private b;
    private e;
    constructor();
    get c(): CT_TextParagraphProperties_DML;
    set c(a: CT_TextParagraphProperties_DML);
    get a(): CT_TextCharacterProperties_DML;
    set a(a: CT_TextCharacterProperties_DML);
    get f(): List$1<EG_TextRun>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TextBody_DML extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    a: CT_TextBodyProperties_DML;
    b: CT_TextListStyle_DML;
    get d(): List$1<CT_TextParagraph_DML>;
    e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class DMLUtils extends Base {
    static $t: Type;
    static q(a: XmlPartManagerBase): CT_PositivePercentage;
    static ar(a: XmlPartManagerBase, b: CT_PositivePercentage, c: string): void;
    static av(a: XmlPartManagerBase, b: CT_StyleMatrixReference, c: string): void;
    static p(a: XmlPartManagerBase): CT_PositiveFixedPercentage;
    static aq(a: XmlPartManagerBase, b: CT_PositiveFixedPercentage, c: string): void;
    static f(a: XmlPartManagerBase): CT_FixedPercentage;
    static af(a: XmlPartManagerBase, b: CT_FixedPercentage, c: string): void;
    static l(a: XmlPartManagerBase): CT_Percentage;
    static am(a: XmlPartManagerBase, b: CT_Percentage, c: string): void;
    static o(a: XmlPartManagerBase): CT_PositiveFixedAngle;
    static ap(a: XmlPartManagerBase, b: CT_PositiveFixedAngle, c: string): void;
    static b(a: XmlPartManagerBase): CT_Angle;
    static ab(a: XmlPartManagerBase, b: CT_Angle, c: string): void;
    static v(a: XmlPartManagerBase, b: string): CT_TextFont;
    static h(a: XmlPartManagerBase, b: string): CT_Hyperlink;
    static u(a: XmlPartManagerBase): CT_RelativeRect;
    static w(a: XmlPartManagerBase): CT_TileInfoProperties;
    static e(a: XmlPartManagerBase): CT_EmbeddedWAVAudioFile;
    static i(a: XmlPartManagerBase): CT_LineEndProperties;
    static j(a: XmlPartManagerBase): CT_LineJoinMiterProperties;
    static t(a: XmlPartManagerBase): CT_PresetLineDashProperties;
    static d(a: XmlPartManagerBase): CT_DashStop;
    static s(a: XmlPartManagerBase): CT_PresetGeometry2D;
    static x(a: XmlPartManagerBase): CT_Transform2D;
    static g(a: XmlPartManagerBase): CT_GeomRect;
    static c(a: XmlPartManagerBase): CT_ConnectionSite;
    static a(a: XmlPartManagerBase): CT_AdjPoint2D;
    static m(a: XmlPartManagerBase): CT_Point2D;
    static r(a: XmlPartManagerBase): CT_PositiveSize2D;
    static aa(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: CT_Color_DML, d: string): void;
    static au(a: XmlPartManagerBase, b: CT_RelativeRect, c: string): void;
    static ax(a: XmlPartManagerBase, b: CT_TileInfoProperties, c: string): void;
    static aj(a: XmlPartManagerBase, b: CT_LineEndProperties, c: string): void;
    static ak(a: XmlPartManagerBase, b: CT_LineJoinMiterProperties, c: string): void;
    static at(a: XmlPartManagerBase, b: CT_PresetLineDashProperties, c: string): void;
    static ad(a: XmlPartManagerBase, b: CT_DashStop, c: string): void;
    static aw(a: XmlPartManagerBase, b: string, c: CT_TextFont): void;
    static ai(a: XmlPartManagerBase, b: string, c: CT_Hyperlink): void;
    static ae(a: XmlPartManagerBase, b: string, c: CT_EmbeddedWAVAudioFile): void;
    static ay(a: XmlPartManagerBase, b: string, c: CT_Transform2D): void;
    static ag(a: XmlPartManagerBase, b: string, c: CT_GeomGuide): void;
    static as(a: XmlPartManagerBase, b: string, c: CT_PresetGeometry2D): void;
    static al(a: XmlPartManagerBase, b: string, c: CT_Path2D): void;
    static ah(a: XmlPartManagerBase, b: CT_GeomRect, c: string): void;
    static ao(a: XmlPartManagerBase, b: CT_PolarAdjustHandle, c: string): void;
    static az(a: XmlPartManagerBase, b: CT_XYAdjustHandle, c: string): void;
    static ac(a: XmlPartManagerBase, b: CT_ConnectionSite, c: string): void;
    static an(a: XmlPartManagerBase, b: CT_Point2D, c: string): void;
    static y(a: XmlPartManagerBase): CT_XYAdjustHandle;
    static n(a: XmlPartManagerBase): CT_PolarAdjustHandle;
    static k(a: XmlPartManagerBase): CT_Path2DArcTo;
}
/**
 * @hidden
 */
export declare class DMLExtensions extends Base {
    static $t: Type;
    static cu(a: CT_StretchInfoProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cw(a: CT_TileInfoProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ct(a: CT_RelativeRect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static n(a: CT_Blip_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static d(a: CT_AlphaInverseEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static e(a: CT_AlphaModulateEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static f(a: CT_AlphaModulateFixedEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static h(a: CT_AlphaReplaceEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static l(a: CT_BiLevelEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static a(a: CT_AlphaBiLevelEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static b(a: CT_AlphaCeilingEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static p(a: CT_BlurEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static s(a: CT_ColorChangeEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static a9(a: CT_StyleMatrix, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static j(a: CT_BackgroundFillStyleList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aa(a: CT_EffectStyleList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ae(a: CT_FillStyleList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aq(a: CT_LineStyleList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static o(a: CT_BlipFillProperties_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cb(a: CT_GroupFillProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ci(a: CT_NoFillProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aw(a: CT_PatternFillProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a7(a: CT_SolidColorFillProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c(a: CT_AlphaFloorEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static t(a: CT_ColorReplaceEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static u(a: CT_DuotoneEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static at(a: CT_OfficeArtExtensionList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ac(a: CT_FillOverlayEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ak(a: CT_GrayscaleEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static al(a: CT_HSLEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ar(a: CT_LuminanceEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bu(a: CT_TintEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cp(a: CT_PositiveFixedPercentage, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b6(a: CT_FixedPercentage, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cl(a: CT_Percentage, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bz(a: CT_ComplementTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ag(a: CT_GammaTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ca(a: CT_GrayscaleTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static co(a: CT_PositiveFixedAngle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cq(a: CT_PositivePercentage, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static by(a: CT_Angle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cd(a: CT_InverseTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static an(a: CT_InverseGammaTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static v(a: CT_EffectContainer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static g(a: CT_AlphaOutsetEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static m(a: CT_BlendEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static y(a: CT_EffectReference, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ab(a: CT_FillEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ah(a: CT_GlowEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static am(a: CT_InnerShadowEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static au(a: CT_OuterShadowEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ay(a: CT_PresetShadowEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a0(a: CT_ReflectionEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a2(a: CT_RelativeOffsetEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a6(a: CT_SoftEdgesEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bv(a: CT_TransformEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static r(a: CT_Color_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static as(a: CT_OfficeArtExtension, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aj(a: CT_GradientStopList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ap(a: CT_LinearShadeProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static av(a: CT_PathShadeProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ai(a: CT_GradientStop, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static z(a: CT_EffectStyleItem, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static w(a: CT_EffectList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a3(a: CT_Scene3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a4(a: CT_Shape3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static i(a: CT_Backdrop, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static q(a: CT_Camera, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ao(a: CT_LightRig, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ax(a: CT_Point3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bw(a: CT_Vector3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a8(a: CT_SphereCoords, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static k(a: CT_Bevel, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cf(a: CT_LineJoinBevel, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b4(a: CT_DashStopList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ce(a: CT_LineEndProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cg(a: CT_LineJoinMiterProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cs(a: CT_PresetLineDashProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ch(a: CT_LineJoinRound, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b3(a: CT_DashStop, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static br(a: CT_TextUnderlineFillFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bt(a: CT_TextUnderlineLineFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bs(a: CT_TextUnderlineFillGroupWrapper, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cv(a: CT_TextFont, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cc(a: CT_Hyperlink, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b5(a: CT_EmbeddedWAVAudioFile, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ad(a: CT_FillProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ba(a: CT_StyleMatrixReference_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static x(a: CT_EffectProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static be(a: CT_TextBulletColorFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bf(a: CT_TextBulletSizeFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bg(a: CT_TextBulletSizePercent, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bh(a: CT_TextBulletSizePoint, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bi(a: CT_TextBulletTypefaceFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bm(a: CT_TextNoBullet, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bb(a: CT_TextAutonumberBullet, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bj(a: CT_TextCharBullet, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bc(a: CT_TextBlipBullet, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bk(a: CT_TextListStyle_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bd(a: CT_TextBodyProperties_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bq(a: CT_TextTabStop, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bo(a: CT_TextParagraph_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cx(a: CT_Transform2D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a5(a: CT_ShapeProperties_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static af(a: CT_FlatText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bl(a: CT_TextNoAutofit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bn(a: CT_TextNormalAutofit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static az(a: CT_PresetTextShape, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bp(a: CT_TextShapeAutofit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b8(a: CT_GeomGuideList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b7(a: CT_GeomGuide, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b2(a: CT_CustomGeometry2D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cr(a: CT_PresetGeometry2D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bx(a: CT_AdjustHandleList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b1(a: CT_ConnectionSiteList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ck(a: CT_Path2DList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cj(a: CT_Path2D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b9(a: CT_GeomRect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cn(a: CT_PolarAdjustHandle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cy(a: CT_XYAdjustHandle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b0(a: CT_ConnectionSite, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cm(a: CT_Point2D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a1(a: CT_RegularTextRun_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cz(a: string, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string, f: string): void;
}
/**
 * @hidden
 */
export declare class CT_SeriesDataLabelsRange extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private b;
    constructor();
    get c(): string;
    set c(a: string);
    get a(): CT_StrData;
    set a(a: CT_StrData);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class EG_BarChartShared extends Base {
    static $t: Type;
    constructor();
    b: CT_BarDir;
    c: CT_BarGrouping;
    a: CT_Boolean;
    f: List$1<CT_BarSer>;
    d: CT_DLbls;
    g(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    h(a: ElementPropertyIds, b: any): void;
    e(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_PieChartShared extends Base {
    static $t: Type;
    constructor();
    a: CT_Boolean;
    d: List$1<CT_PieSer>;
    b: CT_DLbls;
    e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    f(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_DLblShared extends Base {
    static $t: Type;
    constructor();
    h: CT_NumFmt_Chart;
    i: CT_ShapeProperties_DML;
    j: CT_TextBody_DML;
    g: CT_DLblPos;
    c: CT_Boolean;
    f: CT_Boolean;
    b: CT_Boolean;
    e: CT_Boolean;
    d: CT_Boolean;
    a: CT_Boolean;
    l: string;
    n(a: ElementPropertyIds, b: any): void;
    k(a: ElementPropertyIds): boolean;
    m(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class Group_DLbl extends Base {
    static $t: Type;
    private c;
    constructor();
    a: CT_Layout;
    b: CT_Tx;
    get d(): EG_DLblShared;
    g(a: ElementPropertyIds, b: any): void;
    e(a: ElementPropertyIds): boolean;
    f(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
}
/**
 * @hidden
 */
export declare class Group_DLbls extends Base {
    static $t: Type;
    private c;
    constructor();
    a: CT_Boolean;
    b: CT_ChartLines;
    get d(): EG_DLblShared;
    f(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    g(a: ElementPropertyIds, b: any): void;
    e(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_LegendEntryData extends Base {
    static $t: Type;
    constructor();
    a: CT_TextBody_DML;
    c(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    d(a: ElementPropertyIds, b: any): void;
    b(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_AxShared extends Base {
    static $t: Type;
    constructor();
    c: CT_UnsignedInt;
    j: CT_Scaling;
    a: CT_Boolean;
    e: CT_AxPos;
    f: CT_ChartLines;
    g: CT_ChartLines;
    n: CT_Title;
    i: CT_NumFmt_Chart;
    l: CT_TickMark;
    m: CT_TickMark;
    k: CT_TickLblPos;
    o: CT_ShapeProperties_DML;
    p: CT_TextBody_DML;
    d: CT_UnsignedInt;
    h: CT_Crosses;
    b: CT_Double;
    r(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    s(a: ElementPropertyIds, b: any): void;
    q(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_SerShared extends Base {
    static $t: Type;
    constructor();
    a: CT_UnsignedInt;
    b: CT_UnsignedInt;
    c: CT_SerTx;
    d: CT_ShapeProperties_DML;
    f(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    g(a: ElementPropertyIds, b: any): void;
    e(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_AreaChartShared extends Base {
    static $t: Type;
    constructor();
    d: CT_Grouping;
    a: CT_Boolean;
    f: List$1<CT_AreaSer>;
    c: CT_DLbls;
    b: CT_ChartLines;
    g(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    h(a: ElementPropertyIds, b: any): void;
    e(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_SurfaceChartShared extends Base {
    static $t: Type;
    constructor();
    a: CT_Boolean;
    d: List$1<CT_SurfaceSer>;
    b: CT_BandFmts;
    e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    f(a: ElementPropertyIds, b: any): void;
    c(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class EG_LineChartShared extends Base {
    static $t: Type;
    constructor();
    d: CT_Grouping;
    a: CT_Boolean;
    f: List$1<CT_LineSer>;
    c: CT_DLbls;
    b: CT_ChartLines;
    g(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    h(a: ElementPropertyIds, b: any): void;
    e(a: ElementPropertyIds): boolean;
}
/**
 * @hidden
 */
export declare class CT_ChartSpace extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    private s;
    private e;
    private q;
    private u;
    private k;
    private o;
    private g;
    private w;
    private y;
    private i;
    private m;
    private aa;
    private ac;
    constructor();
    get b(): CT_Boolean;
    set b(a: CT_Boolean);
    get r(): CT_TextLanguageID;
    set r(a: CT_TextLanguageID);
    get d(): CT_Boolean;
    set d(a: CT_Boolean);
    get p(): CT_Style;
    set p(a: CT_Style);
    get t(): CT_ColorMapping;
    set t(a: CT_ColorMapping);
    get j(): CT_PivotSource;
    set j(a: CT_PivotSource);
    get n(): CT_Protection;
    set n(a: CT_Protection);
    get f(): CT_Chart;
    set f(a: CT_Chart);
    get v(): CT_ShapeProperties_DML;
    set v(a: CT_ShapeProperties_DML);
    get x(): CT_TextBody_DML;
    set x(a: CT_TextBody_DML);
    get h(): CT_ExternalData;
    set h(a: CT_ExternalData);
    get l(): CT_PrintSettings;
    set l(a: CT_PrintSettings);
    get z(): CT_RelId;
    set z(a: CT_RelId);
    get ab(): List$1<CT_Extension>;
    set ab(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    a: Excel2007ChartData;
}
/**
 * @hidden
 */
export declare class CT_ExternalData extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    constructor();
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get c(): string;
    set c(a: string);
    static f(a: XmlPartManagerBase, b: Nullable$1<boolean>, c: string): {
        p1: Nullable$1<boolean>;
        p2: string;
    };
    static g(a: XmlPartManagerBase, b: string, c: string): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_LegendEntry extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    private i;
    private g;
    private d;
    constructor();
    get b(): CT_UnsignedInt;
    set b(a: CT_UnsignedInt);
    get item(): any;
    set item(a: any);
    get f(): List$1<CT_Extension>;
    set f(a: List$1<CT_Extension>);
    get e(): EG_LegendEntryData;
    toString(): string;
    a: CT_Boolean;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_Legend extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private n;
    private d;
    private b;
    private h;
    private j;
    private l;
    constructor();
    get e(): CT_LegendPos;
    set e(a: CT_LegendPos);
    get m(): List$1<CT_LegendEntry>;
    set m(a: List$1<CT_LegendEntry>);
    get c(): CT_Layout;
    set c(a: CT_Layout);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get g(): CT_ShapeProperties_DML;
    set g(a: CT_ShapeProperties_DML);
    get i(): CT_TextBody_DML;
    set i(a: CT_TextBody_DML);
    get k(): List$1<CT_Extension>;
    set k(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Layout extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    constructor();
    get a(): CT_ManualLayout;
    set a(a: CT_ManualLayout);
    get c(): List$1<CT_Extension>;
    set c(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ManualLayout extends Base implements ISupportSetProperty {
    static $t: Type;
    private r;
    private n;
    private p;
    private l;
    private j;
    private f;
    private h;
    private d;
    private b;
    private t;
    constructor();
    get q(): CT_LayoutTarget;
    set q(a: CT_LayoutTarget);
    get m(): CT_LayoutMode;
    set m(a: CT_LayoutMode);
    get o(): CT_LayoutMode;
    set o(a: CT_LayoutMode);
    get k(): CT_LayoutMode;
    set k(a: CT_LayoutMode);
    get i(): CT_LayoutMode;
    set i(a: CT_LayoutMode);
    get e(): CT_Double;
    set e(a: CT_Double);
    get g(): CT_Double;
    set g(a: CT_Double);
    get c(): CT_Double;
    set c(a: CT_Double);
    get a(): CT_Double;
    set a(a: CT_Double);
    get s(): List$1<CT_Extension>;
    set s(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_DTable extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private h;
    private f;
    private d;
    private j;
    private l;
    private n;
    constructor();
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get g(): CT_Boolean;
    set g(a: CT_Boolean);
    get e(): CT_Boolean;
    set e(a: CT_Boolean);
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get i(): CT_ShapeProperties_DML;
    set i(a: CT_ShapeProperties_DML);
    get k(): CT_TextBody_DML;
    set k(a: CT_TextBody_DML);
    get m(): List$1<CT_Extension>;
    set m(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export interface IAxis {
    readonly axisType: AxisType;
    readonly id: number;
    readonly crossAxId: number;
    readonly sharedProps: EG_AxShared;
    readonly axisCrossesBetween: boolean;
    readonly baseUnit: Tuple$2<Nullable$1<ST_TimeUnit>, boolean>;
    readonly dispUnits: CT_DispUnits;
    readonly tickLabelAlignment: ST_LblAlgn | null;
    readonly _tickLabelAlignment$i: Nullable$1<ST_LblAlgn>;
    readonly tickLabelMultiLevel: boolean | null;
    readonly _tickLabelMultiLevel$i: Nullable$1<boolean>;
    readonly tickMarkSkipValue: number | null;
    readonly _tickMarkSkipValue$i: Nullable$1<number>;
    readonly tickLabelSkip: number | null;
    readonly _tickLabelSkip$i: Nullable$1<number>;
    readonly tickLabelOffset: number | null;
    readonly _tickLabelOffset$i: Nullable$1<number>;
    readonly categoryType: CategoryType | null;
    readonly _categoryType$i: Nullable$1<CategoryType>;
    save(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    tryGetMajorMinorUnit(major: number | null, minor: number | null): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    _tryGetMajorMinorUnit$i(a: Nullable$1<number>, b: Nullable$1<number>): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    tryGetMajorMinorTimeUnit(major: ST_TimeUnit | null, minor: ST_TimeUnit | null): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
    _tryGetMajorMinorTimeUnit$i(a: Nullable$1<ST_TimeUnit>, b: Nullable$1<ST_TimeUnit>): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
}
/**
 * @hidden
 */
export declare let IAxis_$type: Type;
/**
 * @hidden
 */
export declare class CT_SerAx extends Base implements ISupportSetProperty, IAxis {
    static $t: Type;
    private j;
    private b;
    private d;
    private h;
    private e;
    constructor();
    get item(): any;
    set item(a: any);
    get a(): CT_Skip;
    set a(a: CT_Skip);
    get c(): CT_Skip;
    set c(a: CT_Skip);
    get g(): List$1<CT_Extension>;
    set g(a: List$1<CT_Extension>);
    get f(): EG_AxShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    get axisType(): AxisType;
    get id(): number;
    get crossAxId(): number;
    get sharedProps(): EG_AxShared;
    get axisCrossesBetween(): boolean;
    get baseUnit(): Tuple$2<Nullable$1<ST_TimeUnit>, boolean>;
    get dispUnits(): CT_DispUnits;
    get tickLabelAlignment(): ST_LblAlgn | null;
    get _tickLabelAlignment$i(): Nullable$1<ST_LblAlgn>;
    get tickLabelMultiLevel(): boolean | null;
    get _tickLabelMultiLevel$i(): Nullable$1<boolean>;
    get tickLabelSkip(): number | null;
    get _tickLabelSkip$i(): Nullable$1<number>;
    get tickMarkSkipValue(): number | null;
    get _tickMarkSkipValue$i(): Nullable$1<number>;
    get tickLabelOffset(): number | null;
    get _tickLabelOffset$i(): Nullable$1<number>;
    get categoryType(): CategoryType | null;
    get _categoryType$i(): Nullable$1<CategoryType>;
    save(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    tryGetMajorMinorUnit(major: number | null, minor: number | null): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    _tryGetMajorMinorUnit$i(a: Nullable$1<number>, b: Nullable$1<number>): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    tryGetMajorMinorTimeUnit(major: ST_TimeUnit | null, minor: ST_TimeUnit | null): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
    _tryGetMajorMinorTimeUnit$i(a: Nullable$1<ST_TimeUnit>, b: Nullable$1<ST_TimeUnit>): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
}
/**
 * @hidden
 */
export declare class CT_Scaling extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private h;
    private b;
    private d;
    private j;
    constructor();
    get e(): CT_LogBase;
    set e(a: CT_LogBase);
    get g(): CT_Orientation;
    set g(a: CT_Orientation);
    get a(): CT_Double;
    set a(a: CT_Double);
    get c(): CT_Double;
    set c(a: CT_Double);
    get i(): List$1<CT_Extension>;
    set i(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ChartLines extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): CT_ShapeProperties_DML;
    set a(a: CT_ShapeProperties_DML);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Title extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private d;
    private b;
    private h;
    private j;
    private l;
    constructor();
    get e(): CT_Tx;
    set e(a: CT_Tx);
    get c(): CT_Layout;
    set c(a: CT_Layout);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get g(): CT_ShapeProperties_DML;
    set g(a: CT_ShapeProperties_DML);
    get i(): CT_TextBody_DML;
    set i(a: CT_TextBody_DML);
    get k(): List$1<CT_Extension>;
    set k(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Tx extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    get item(): any;
    set item(a: any);
    toString(): string;
    a: CT_StrRef;
    b: CT_TextBody_DML;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_StrRef extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private b;
    private d;
    constructor();
    get e(): string;
    set e(a: string);
    get a(): CT_StrData;
    set a(a: CT_StrData);
    get c(): List$1<CT_Extension>;
    set c(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_StrData extends Base implements ISupportSetProperty, IProvideXValuesData {
    static $t: Type;
    private c;
    private g;
    private e;
    constructor();
    get b(): CT_UnsignedInt;
    set b(a: CT_UnsignedInt);
    get f(): List$1<CT_StrVal>;
    set f(a: List$1<CT_StrVal>);
    get d(): List$1<CT_Extension>;
    set d(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    static a(a: IProvideXValuesData, b: CT_UnsignedInt, c: IList): any[];
    getIndexAndValue(a: any, b: number, c: any): {
        p1: number;
        p2: any;
    };
    getValues(): any[];
}
/**
 * @hidden
 */
export declare class CT_DateAx extends Base implements ISupportSetProperty, IAxis {
    static $t: Type;
    private t;
    private b;
    private h;
    private j;
    private d;
    private l;
    private f;
    private n;
    private r;
    private o;
    constructor();
    get item(): any;
    set item(a: any);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get g(): CT_LblOffset;
    set g(a: CT_LblOffset);
    get i(): CT_TimeUnit;
    set i(a: CT_TimeUnit);
    get c(): CT_AxisUnit;
    set c(a: CT_AxisUnit);
    get k(): CT_TimeUnit;
    set k(a: CT_TimeUnit);
    get e(): CT_AxisUnit;
    set e(a: CT_AxisUnit);
    get m(): CT_TimeUnit;
    set m(a: CT_TimeUnit);
    get q(): List$1<CT_Extension>;
    set q(a: List$1<CT_Extension>);
    get p(): EG_AxShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    get axisType(): AxisType;
    get id(): number;
    get crossAxId(): number;
    get sharedProps(): EG_AxShared;
    get axisCrossesBetween(): boolean;
    get baseUnit(): Tuple$2<Nullable$1<ST_TimeUnit>, boolean>;
    get dispUnits(): CT_DispUnits;
    get tickLabelAlignment(): ST_LblAlgn | null;
    get _tickLabelAlignment$i(): Nullable$1<ST_LblAlgn>;
    get tickLabelMultiLevel(): boolean | null;
    get _tickLabelMultiLevel$i(): Nullable$1<boolean>;
    get tickLabelSkip(): number | null;
    get _tickLabelSkip$i(): Nullable$1<number>;
    get tickMarkSkipValue(): number | null;
    get _tickMarkSkipValue$i(): Nullable$1<number>;
    get tickLabelOffset(): number | null;
    get _tickLabelOffset$i(): Nullable$1<number>;
    get categoryType(): CategoryType | null;
    get _categoryType$i(): Nullable$1<CategoryType>;
    save(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    tryGetMajorMinorUnit(major: number | null, minor: number | null): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    _tryGetMajorMinorUnit$i(a: Nullable$1<number>, b: Nullable$1<number>): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    tryGetMajorMinorTimeUnit(major: ST_TimeUnit | null, minor: ST_TimeUnit | null): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
    _tryGetMajorMinorTimeUnit$i(a: Nullable$1<ST_TimeUnit>, b: Nullable$1<ST_TimeUnit>): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
}
/**
 * @hidden
 */
export declare class CT_CatAx extends Base implements ISupportSetProperty, IAxis {
    static $t: Type;
    private r;
    private b;
    private f;
    private h;
    private j;
    private l;
    private d;
    private p;
    private m;
    constructor();
    get item(): any;
    set item(a: any);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get e(): CT_LblAlgn;
    set e(a: CT_LblAlgn);
    get g(): CT_LblOffset;
    set g(a: CT_LblOffset);
    get i(): CT_Skip;
    set i(a: CT_Skip);
    get k(): CT_Skip;
    set k(a: CT_Skip);
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get o(): List$1<CT_Extension>;
    set o(a: List$1<CT_Extension>);
    get n(): EG_AxShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    get axisType(): AxisType;
    get id(): number;
    get crossAxId(): number;
    get sharedProps(): EG_AxShared;
    get axisCrossesBetween(): boolean;
    get baseUnit(): Tuple$2<Nullable$1<ST_TimeUnit>, boolean>;
    get dispUnits(): CT_DispUnits;
    get tickLabelAlignment(): ST_LblAlgn | null;
    get _tickLabelAlignment$i(): Nullable$1<ST_LblAlgn>;
    get tickLabelMultiLevel(): boolean | null;
    get _tickLabelMultiLevel$i(): Nullable$1<boolean>;
    get tickLabelSkip(): number | null;
    get _tickLabelSkip$i(): Nullable$1<number>;
    get tickMarkSkipValue(): number | null;
    get _tickMarkSkipValue$i(): Nullable$1<number>;
    get tickLabelOffset(): number | null;
    get _tickLabelOffset$i(): Nullable$1<number>;
    get categoryType(): CategoryType | null;
    get _categoryType$i(): Nullable$1<CategoryType>;
    save(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    tryGetMajorMinorUnit(major: number | null, minor: number | null): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    _tryGetMajorMinorUnit$i(a: Nullable$1<number>, b: Nullable$1<number>): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    tryGetMajorMinorTimeUnit(major: ST_TimeUnit | null, minor: ST_TimeUnit | null): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
    _tryGetMajorMinorTimeUnit$i(a: Nullable$1<ST_TimeUnit>, b: Nullable$1<ST_TimeUnit>): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
}
/**
 * @hidden
 */
export declare class CT_DispUnitsLbl extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    private f;
    private h;
    constructor();
    get a(): CT_Layout;
    set a(a: CT_Layout);
    get c(): CT_Tx;
    set c(a: CT_Tx);
    get e(): CT_ShapeProperties_DML;
    set e(a: CT_ShapeProperties_DML);
    get g(): CT_TextBody_DML;
    set g(a: CT_TextBody_DML);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_DispUnits extends Base implements ISupportSetProperty {
    static $t: Type;
    private h;
    private d;
    private f;
    constructor();
    get item(): any;
    set item(a: any);
    get c(): CT_DispUnitsLbl;
    set c(a: CT_DispUnitsLbl);
    get e(): List$1<CT_Extension>;
    set e(a: List$1<CT_Extension>);
    toString(): string;
    a: CT_Double;
    b: CT_BuiltInUnit;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_ValAx extends Base implements ISupportSetProperty, IAxis {
    static $t: Type;
    private n;
    private f;
    private b;
    private d;
    private h;
    private l;
    private i;
    constructor();
    get item(): any;
    set item(a: any);
    get e(): CT_CrossBetween;
    set e(a: CT_CrossBetween);
    get a(): CT_AxisUnit;
    set a(a: CT_AxisUnit);
    get c(): CT_AxisUnit;
    set c(a: CT_AxisUnit);
    get dispUnits(): CT_DispUnits;
    set dispUnits(a: CT_DispUnits);
    get k(): List$1<CT_Extension>;
    set k(a: List$1<CT_Extension>);
    get j(): EG_AxShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    get axisType(): AxisType;
    get id(): number;
    get crossAxId(): number;
    get sharedProps(): EG_AxShared;
    get axisCrossesBetween(): boolean;
    get baseUnit(): Tuple$2<Nullable$1<ST_TimeUnit>, boolean>;
    get tickLabelAlignment(): ST_LblAlgn | null;
    get _tickLabelAlignment$i(): Nullable$1<ST_LblAlgn>;
    get tickLabelMultiLevel(): boolean | null;
    get _tickLabelMultiLevel$i(): Nullable$1<boolean>;
    get tickLabelSkip(): number | null;
    get _tickLabelSkip$i(): Nullable$1<number>;
    get tickMarkSkipValue(): number | null;
    get _tickMarkSkipValue$i(): Nullable$1<number>;
    get tickLabelOffset(): number | null;
    get _tickLabelOffset$i(): Nullable$1<number>;
    get categoryType(): CategoryType | null;
    get _categoryType$i(): Nullable$1<CategoryType>;
    save(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    tryGetMajorMinorUnit(major: number | null, minor: number | null): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    _tryGetMajorMinorUnit$i(a: Nullable$1<number>, b: Nullable$1<number>): {
        ret: boolean;
        p0: Nullable$1<number>;
        p1: Nullable$1<number>;
    };
    tryGetMajorMinorTimeUnit(major: ST_TimeUnit | null, minor: ST_TimeUnit | null): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
    _tryGetMajorMinorTimeUnit$i(a: Nullable$1<ST_TimeUnit>, b: Nullable$1<ST_TimeUnit>): {
        ret: boolean;
        p0: Nullable$1<ST_TimeUnit>;
        p1: Nullable$1<ST_TimeUnit>;
    };
}
/**
 * @hidden
 */
export interface ISeries {
    readonly index: number;
    readonly chart: IChart;
    readonly seriesType: SeriesType;
    readonly sharedProps: EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    readonly cT_ErrBars: CT_ErrBars;
    readonly invertIfNegativeValue: boolean;
    readonly cT_NumDataSource: CT_NumDataSource;
    readonly cT_AxDataSource: CT_AxDataSource;
    readonly cT_Marker: CT_Marker_Chart;
    readonly cT_PictureOptions: CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    readonly isExplicitlyNoFill: boolean;
    readonly isBubble3D: boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare let ISeries_$type: Type;
/**
 * @hidden
 */
export declare class CT_BubbleSer extends Base implements ISupportSetProperty, ISeries {
    static $t: Type;
    private d;
    private q;
    private h;
    private w;
    private s;
    private f;
    private l;
    private j;
    private b;
    private u;
    private m;
    constructor();
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get p(): List$1<CT_DPt>;
    set p(a: List$1<CT_DPt>);
    get g(): CT_DLbls;
    set g(a: CT_DLbls);
    get v(): List$1<CT_Trendline>;
    set v(a: List$1<CT_Trendline>);
    get r(): List$1<CT_ErrBars>;
    set r(a: List$1<CT_ErrBars>);
    get e(): CT_AxDataSource;
    set e(a: CT_AxDataSource);
    get k(): CT_NumDataSource;
    set k(a: CT_NumDataSource);
    get i(): CT_NumDataSource;
    set i(a: CT_NumDataSource);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get t(): List$1<CT_Extension>;
    set t(a: List$1<CT_Extension>);
    get n(): EG_SerShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    o: IChart;
    get chart(): IChart;
    get seriesType(): SeriesType;
    get sharedProps(): EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    get cT_ErrBars(): CT_ErrBars;
    get invertIfNegativeValue(): boolean;
    get cT_NumDataSource(): CT_NumDataSource;
    get cT_AxDataSource(): CT_AxDataSource;
    get cT_Marker(): CT_Marker_Chart;
    get cT_PictureOptions(): CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    get index(): number;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    get isExplicitlyNoFill(): boolean;
    get isBubble3D(): boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare class CT_SerTx extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    get item(): any;
    set item(a: any);
    toString(): string;
    a: CT_StrRef;
    e: string;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_DPt extends Base implements ISupportSetProperty {
    static $t: Type;
    private h;
    private d;
    private j;
    private b;
    private f;
    private n;
    private l;
    private p;
    constructor();
    get g(): CT_UnsignedInt;
    set g(a: CT_UnsignedInt);
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get i(): CT_Marker_Chart;
    set i(a: CT_Marker_Chart);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get e(): CT_UnsignedInt;
    set e(a: CT_UnsignedInt);
    get m(): CT_ShapeProperties_DML;
    set m(a: CT_ShapeProperties_DML);
    get k(): CT_PictureOptions;
    set k(a: CT_PictureOptions);
    get o(): List$1<CT_Extension>;
    set o(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Marker_Chart extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private b;
    private f;
    private i;
    constructor();
    get c(): CT_MarkerStyle;
    set c(a: CT_MarkerStyle);
    get a(): CT_MarkerSize;
    set a(a: CT_MarkerSize);
    get e(): CT_ShapeProperties_DML;
    set e(a: CT_ShapeProperties_DML);
    get h(): List$1<CT_Extension>;
    set h(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    j: Nullable$1<boolean>;
    static g(a: XmlPartManagerBase, b: boolean): {
        ret: boolean;
        p1: boolean;
    };
    static l(a: XmlPartManagerBase, b: string, c: boolean): void;
}
/**
 * @hidden
 */
export declare class CT_PictureOptions extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    private f;
    private b;
    private h;
    private j;
    constructor();
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get e(): CT_Boolean;
    set e(a: CT_Boolean);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get g(): CT_PictureFormat;
    set g(a: CT_PictureFormat);
    get i(): CT_PictureStackUnit;
    set i(a: CT_PictureStackUnit);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Trendline extends Base implements ISupportSetProperty {
    static $t: Type;
    private x;
    private t;
    private r;
    private l;
    private n;
    private h;
    private f;
    private j;
    private d;
    private b;
    private p;
    private v;
    constructor();
    get w(): string;
    set w(a: string);
    get s(): CT_ShapeProperties_DML;
    set s(a: CT_ShapeProperties_DML);
    get q(): CT_TrendlineType;
    set q(a: CT_TrendlineType);
    get k(): CT_Order;
    set k(a: CT_Order);
    get m(): CT_Period;
    set m(a: CT_Period);
    get g(): CT_Double;
    set g(a: CT_Double);
    get e(): CT_Double;
    set e(a: CT_Double);
    get i(): CT_Double;
    set i(a: CT_Double);
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get o(): CT_TrendlineLbl;
    set o(a: CT_TrendlineLbl);
    get u(): List$1<CT_Extension>;
    set u(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TrendlineLbl extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private f;
    private d;
    private h;
    private j;
    private l;
    constructor();
    get a(): CT_Layout;
    set a(a: CT_Layout);
    get e(): CT_Tx;
    set e(a: CT_Tx);
    get c(): CT_NumFmt_Chart;
    set c(a: CT_NumFmt_Chart);
    get g(): CT_ShapeProperties_DML;
    set g(a: CT_ShapeProperties_DML);
    get i(): CT_TextBody_DML;
    set i(a: CT_TextBody_DML);
    get k(): List$1<CT_Extension>;
    set k(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ErrBars extends Base implements ISupportSetProperty {
    static $t: Type;
    private h;
    private f;
    private j;
    private b;
    private n;
    private l;
    private d;
    private p;
    private r;
    constructor();
    get g(): CT_ErrDir;
    set g(a: CT_ErrDir);
    get e(): CT_ErrBarType;
    set e(a: CT_ErrBarType);
    get i(): CT_ErrValType;
    set i(a: CT_ErrValType);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get m(): CT_NumDataSource;
    set m(a: CT_NumDataSource);
    get k(): CT_NumDataSource;
    set k(a: CT_NumDataSource);
    get c(): CT_Double;
    set c(a: CT_Double);
    get o(): CT_ShapeProperties_DML;
    set o(a: CT_ShapeProperties_DML);
    get q(): List$1<CT_Extension>;
    set q(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_NumDataSource extends Base implements ISupportSetProperty {
    static $t: Type;
    private d;
    get item(): any;
    set item(a: any);
    toString(): string;
    b: CT_NumRef;
    a: CT_NumData;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_NumData extends Base implements ISupportSetProperty, IProvideXValuesData {
    static $t: Type;
    private h;
    private b;
    private f;
    private d;
    constructor();
    get g(): string;
    set g(a: string);
    get a(): CT_UnsignedInt;
    set a(a: CT_UnsignedInt);
    get e(): List$1<CT_NumVal>;
    set e(a: List$1<CT_NumVal>);
    get c(): List$1<CT_Extension>;
    set c(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getIndexAndValue(a: any, b: number, c: any): {
        p1: number;
        p2: any;
    };
    getValues(): any[];
}
/**
 * @hidden
 */
export declare class CT_NumRef extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private b;
    private d;
    constructor();
    get e(): string;
    set e(a: string);
    get a(): CT_NumData;
    set a(a: CT_NumData);
    get c(): List$1<CT_Extension>;
    set c(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_AxDataSource extends Base implements ISupportSetProperty {
    static $t: Type;
    private g;
    get item(): any;
    set item(a: any);
    toString(): string;
    a: CT_MultiLvlStrRef;
    c: CT_NumRef;
    b: CT_NumData;
    e: CT_StrRef;
    d: CT_StrData;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_MultiLvlStrRef extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private b;
    private d;
    constructor();
    get e(): string;
    set e(a: string);
    get a(): CT_MultiLvlStrData;
    set a(a: CT_MultiLvlStrData);
    get c(): List$1<CT_Extension>;
    set c(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export interface IChart {
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    readonly seriesType: SeriesType;
    readonly sT_Shape: ST_Shape | null;
    readonly _sT_Shape$i: Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    readonly axisIds: List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare let IChart_$type: Type;
/**
 * @hidden
 */
export declare class CT_BubbleChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private f;
    private r;
    private j;
    private b;
    private h;
    private d;
    private l;
    private n;
    private p;
    constructor();
    get e(): CT_Boolean;
    set e(a: CT_Boolean);
    get q(): List$1<CT_BubbleSer>;
    set q(a: List$1<CT_BubbleSer>);
    get i(): CT_DLbls;
    set i(a: CT_DLbls);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get g(): CT_BubbleScale;
    set g(a: CT_BubbleScale);
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get k(): CT_SizeRepresents;
    set k(a: CT_SizeRepresents);
    get m(): List$1<CT_UnsignedInt>;
    set m(a: List$1<CT_UnsignedInt>);
    get o(): List$1<CT_Extension>;
    set o(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_Surface3DChart extends Base implements ISupportSetProperty, IChart, IChart3D {
    static $t: Type;
    private d;
    private f;
    private a;
    constructor();
    get c(): List$1<CT_UnsignedInt>;
    set c(a: List$1<CT_UnsignedInt>);
    get e(): List$1<CT_Extension>;
    set e(a: List$1<CT_Extension>);
    get b(): EG_SurfaceChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_SurfaceSer extends Base implements ISupportSetProperty, ISeries {
    static $t: Type;
    private b;
    private d;
    private i;
    private e;
    constructor();
    get a(): CT_AxDataSource;
    set a(a: CT_AxDataSource);
    get c(): CT_NumDataSource;
    set c(a: CT_NumDataSource);
    get h(): List$1<CT_Extension>;
    set h(a: List$1<CT_Extension>);
    get f(): EG_SerShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    g: IChart;
    get chart(): IChart;
    get seriesType(): SeriesType;
    get sharedProps(): EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    get cT_ErrBars(): CT_ErrBars;
    get invertIfNegativeValue(): boolean;
    get cT_NumDataSource(): CT_NumDataSource;
    get cT_AxDataSource(): CT_AxDataSource;
    get cT_Marker(): CT_Marker_Chart;
    get cT_PictureOptions(): CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    get index(): number;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    get isExplicitlyNoFill(): boolean;
    get isBubble3D(): boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare class CT_BandFmt extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    constructor();
    get a(): CT_UnsignedInt;
    set a(a: CT_UnsignedInt);
    get c(): CT_ShapeProperties_DML;
    set c(a: CT_ShapeProperties_DML);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_SurfaceChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private d;
    private f;
    private a;
    constructor();
    get c(): List$1<CT_UnsignedInt>;
    set c(a: List$1<CT_UnsignedInt>);
    get e(): List$1<CT_Extension>;
    set e(a: List$1<CT_Extension>);
    get b(): EG_SurfaceChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_OfPieChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private f;
    private d;
    private j;
    private b;
    private n;
    private h;
    private r;
    private p;
    private k;
    constructor();
    get e(): CT_OfPieType;
    set e(a: CT_OfPieType);
    get c(): CT_GapAmount;
    set c(a: CT_GapAmount);
    get i(): CT_SplitType;
    set i(a: CT_SplitType);
    get a(): CT_Double;
    set a(a: CT_Double);
    get m(): List$1<CT_UnsignedInt>;
    set m(a: List$1<CT_UnsignedInt>);
    get g(): CT_SecondPieSize;
    set g(a: CT_SecondPieSize);
    get q(): List$1<CT_ChartLines>;
    set q(a: List$1<CT_ChartLines>);
    get o(): List$1<CT_Extension>;
    set o(a: List$1<CT_Extension>);
    get l(): EG_PieChartShared;
    toString(): string;
    setProperty(a: ElementPropertyIds, b: any): void;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_PieSer extends Base implements ISupportSetProperty, ISeries {
    static $t: Type;
    private b;
    private m;
    private f;
    private d;
    private h;
    private o;
    private i;
    constructor();
    get a(): CT_UnsignedInt;
    set a(a: CT_UnsignedInt);
    get l(): List$1<CT_DPt>;
    set l(a: List$1<CT_DPt>);
    get e(): CT_DLbls;
    set e(a: CT_DLbls);
    get c(): CT_AxDataSource;
    set c(a: CT_AxDataSource);
    get g(): CT_NumDataSource;
    set g(a: CT_NumDataSource);
    get n(): List$1<CT_Extension>;
    set n(a: List$1<CT_Extension>);
    get j(): EG_SerShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    k: IChart;
    get chart(): IChart;
    get seriesType(): SeriesType;
    get sharedProps(): EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    get cT_ErrBars(): CT_ErrBars;
    get invertIfNegativeValue(): boolean;
    get cT_NumDataSource(): CT_NumDataSource;
    get cT_AxDataSource(): CT_AxDataSource;
    get cT_Marker(): CT_Marker_Chart;
    get cT_PictureOptions(): CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    get index(): number;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    get isExplicitlyNoFill(): boolean;
    get isBubble3D(): boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare class CT_Bar3DChart extends Base implements ISupportSetProperty, IChart, IChart3D {
    static $t: Type;
    private d;
    private b;
    private f;
    private j;
    private l;
    private g;
    constructor();
    get c(): CT_GapAmount;
    set c(a: CT_GapAmount);
    get a(): CT_GapAmount;
    set a(a: CT_GapAmount);
    get e(): CT_Shape_Chart;
    set e(a: CT_Shape_Chart);
    get i(): List$1<CT_UnsignedInt>;
    set i(a: List$1<CT_UnsignedInt>);
    get k(): List$1<CT_Extension>;
    set k(a: List$1<CT_Extension>);
    get h(): EG_BarChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_BarSer extends Base implements ISupportSetProperty, ISeries {
    static $t: Type;
    private b;
    private l;
    private s;
    private f;
    private w;
    private h;
    private d;
    private j;
    private n;
    private u;
    private o;
    constructor();
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get k(): CT_PictureOptions;
    set k(a: CT_PictureOptions);
    get r(): List$1<CT_DPt>;
    set r(a: List$1<CT_DPt>);
    get e(): CT_DLbls;
    set e(a: CT_DLbls);
    get v(): List$1<CT_Trendline>;
    set v(a: List$1<CT_Trendline>);
    get g(): CT_ErrBars;
    set g(a: CT_ErrBars);
    get c(): CT_AxDataSource;
    set c(a: CT_AxDataSource);
    get i(): CT_NumDataSource;
    set i(a: CT_NumDataSource);
    get m(): CT_Shape_Chart;
    set m(a: CT_Shape_Chart);
    get t(): List$1<CT_Extension>;
    set t(a: List$1<CT_Extension>);
    get p(): EG_SerShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    q: IChart;
    get chart(): IChart;
    get seriesType(): SeriesType;
    get sharedProps(): EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    get cT_ErrBars(): CT_ErrBars;
    get invertIfNegativeValue(): boolean;
    get cT_NumDataSource(): CT_NumDataSource;
    get cT_AxDataSource(): CT_AxDataSource;
    get cT_Marker(): CT_Marker_Chart;
    get cT_PictureOptions(): CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    get index(): number;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    get isExplicitlyNoFill(): boolean;
    get isBubble3D(): boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare class CT_BarChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private b;
    private d;
    private l;
    private h;
    private j;
    private e;
    constructor();
    get a(): CT_GapAmount;
    set a(a: CT_GapAmount);
    get c(): CT_Overlap;
    set c(a: CT_Overlap);
    get k(): List$1<CT_ChartLines>;
    set k(a: List$1<CT_ChartLines>);
    get g(): List$1<CT_UnsignedInt>;
    set g(a: List$1<CT_UnsignedInt>);
    get i(): List$1<CT_Extension>;
    set i(a: List$1<CT_Extension>);
    get f(): EG_BarChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_DoughnutChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private b;
    private d;
    private h;
    private e;
    constructor();
    get a(): CT_FirstSliceAng;
    set a(a: CT_FirstSliceAng);
    get c(): CT_HoleSize;
    set c(a: CT_HoleSize);
    get g(): List$1<CT_Extension>;
    set g(a: List$1<CT_Extension>);
    get f(): EG_PieChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_Pie3DChart extends Base implements ISupportSetProperty, IChart, IChart3D {
    static $t: Type;
    private d;
    private a;
    constructor();
    get c(): List$1<CT_Extension>;
    set c(a: List$1<CT_Extension>);
    get b(): EG_PieChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_PieChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private b;
    private f;
    private c;
    constructor();
    get a(): CT_FirstSliceAng;
    set a(a: CT_FirstSliceAng);
    get e(): List$1<CT_Extension>;
    set e(a: List$1<CT_Extension>);
    get d(): EG_PieChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_ScatterSer extends Base implements ISupportSetProperty, ISeries {
    static $t: Type;
    private h;
    private o;
    private f;
    private u;
    private q;
    private d;
    private j;
    private b;
    private s;
    private k;
    constructor();
    get g(): CT_Marker_Chart;
    set g(a: CT_Marker_Chart);
    get n(): List$1<CT_DPt>;
    set n(a: List$1<CT_DPt>);
    get e(): CT_DLbls;
    set e(a: CT_DLbls);
    get t(): List$1<CT_Trendline>;
    set t(a: List$1<CT_Trendline>);
    get p(): List$1<CT_ErrBars>;
    set p(a: List$1<CT_ErrBars>);
    get c(): CT_AxDataSource;
    set c(a: CT_AxDataSource);
    get i(): CT_NumDataSource;
    set i(a: CT_NumDataSource);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get r(): List$1<CT_Extension>;
    set r(a: List$1<CT_Extension>);
    get l(): EG_SerShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    m: IChart;
    get chart(): IChart;
    get seriesType(): SeriesType;
    get sharedProps(): EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    get cT_ErrBars(): CT_ErrBars;
    get invertIfNegativeValue(): boolean;
    get cT_NumDataSource(): CT_NumDataSource;
    get cT_AxDataSource(): CT_AxDataSource;
    get cT_Marker(): CT_Marker_Chart;
    get cT_PictureOptions(): CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    get index(): number;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    get isExplicitlyNoFill(): boolean;
    get isBubble3D(): boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare class CT_ScatterChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private f;
    private b;
    private l;
    private d;
    private h;
    private j;
    constructor();
    get e(): CT_ScatterStyle;
    set e(a: CT_ScatterStyle);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get k(): List$1<CT_ScatterSer>;
    set k(a: List$1<CT_ScatterSer>);
    get c(): CT_DLbls;
    set c(a: CT_DLbls);
    get g(): List$1<CT_UnsignedInt>;
    set g(a: List$1<CT_UnsignedInt>);
    get i(): List$1<CT_Extension>;
    set i(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_RadarSer extends Base implements ISupportSetProperty, ISeries {
    static $t: Type;
    private f;
    private m;
    private d;
    private b;
    private h;
    private o;
    private i;
    constructor();
    get e(): CT_Marker_Chart;
    set e(a: CT_Marker_Chart);
    get l(): List$1<CT_DPt>;
    set l(a: List$1<CT_DPt>);
    get c(): CT_DLbls;
    set c(a: CT_DLbls);
    get a(): CT_AxDataSource;
    set a(a: CT_AxDataSource);
    get g(): CT_NumDataSource;
    set g(a: CT_NumDataSource);
    get n(): List$1<CT_Extension>;
    set n(a: List$1<CT_Extension>);
    get j(): EG_SerShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    k: IChart;
    get chart(): IChart;
    get seriesType(): SeriesType;
    get sharedProps(): EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    get cT_ErrBars(): CT_ErrBars;
    get invertIfNegativeValue(): boolean;
    get cT_NumDataSource(): CT_NumDataSource;
    get cT_AxDataSource(): CT_AxDataSource;
    get cT_Marker(): CT_Marker_Chart;
    get cT_PictureOptions(): CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    get index(): number;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    get isExplicitlyNoFill(): boolean;
    get isBubble3D(): boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare class CT_RadarChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private f;
    private b;
    private l;
    private d;
    private h;
    private j;
    constructor();
    get e(): CT_RadarStyle;
    set e(a: CT_RadarStyle);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get k(): List$1<CT_RadarSer>;
    set k(a: List$1<CT_RadarSer>);
    get c(): CT_DLbls;
    set c(a: CT_DLbls);
    get g(): List$1<CT_UnsignedInt>;
    set g(a: List$1<CT_UnsignedInt>);
    get i(): List$1<CT_Extension>;
    set i(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_StockChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private n;
    private f;
    private b;
    private d;
    private h;
    private j;
    private l;
    constructor();
    get m(): List$1<CT_LineSer>;
    set m(a: List$1<CT_LineSer>);
    get e(): CT_DLbls;
    set e(a: CT_DLbls);
    get a(): CT_ChartLines;
    set a(a: CT_ChartLines);
    get c(): CT_ChartLines;
    set c(a: CT_ChartLines);
    get g(): CT_UpDownBars;
    set g(a: CT_UpDownBars);
    get i(): List$1<CT_UnsignedInt>;
    set i(a: List$1<CT_UnsignedInt>);
    get k(): List$1<CT_Extension>;
    set k(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_LineSer extends Base implements ISupportSetProperty, ISeries {
    static $t: Type;
    private j;
    private q;
    private f;
    private u;
    private h;
    private d;
    private l;
    private b;
    private s;
    private m;
    constructor();
    get i(): CT_Marker_Chart;
    set i(a: CT_Marker_Chart);
    get p(): List$1<CT_DPt>;
    set p(a: List$1<CT_DPt>);
    get e(): CT_DLbls;
    set e(a: CT_DLbls);
    get t(): List$1<CT_Trendline>;
    set t(a: List$1<CT_Trendline>);
    get g(): CT_ErrBars;
    set g(a: CT_ErrBars);
    get c(): CT_AxDataSource;
    set c(a: CT_AxDataSource);
    get k(): CT_NumDataSource;
    set k(a: CT_NumDataSource);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get r(): List$1<CT_Extension>;
    set r(a: List$1<CT_Extension>);
    get n(): EG_SerShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    o: IChart;
    get chart(): IChart;
    get seriesType(): SeriesType;
    get sharedProps(): EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    get cT_ErrBars(): CT_ErrBars;
    get invertIfNegativeValue(): boolean;
    get cT_NumDataSource(): CT_NumDataSource;
    get cT_AxDataSource(): CT_AxDataSource;
    get cT_Marker(): CT_Marker_Chart;
    get cT_PictureOptions(): CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    get index(): number;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    get isExplicitlyNoFill(): boolean;
    get isBubble3D(): boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare class CT_UpDownBars extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private f;
    private d;
    private h;
    constructor();
    get a(): CT_GapAmount;
    set a(a: CT_GapAmount);
    get e(): CT_UpDownBar;
    set e(a: CT_UpDownBar);
    get c(): CT_UpDownBar;
    set c(a: CT_UpDownBar);
    get g(): List$1<CT_Extension>;
    set g(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_UpDownBar extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): CT_ShapeProperties_DML;
    set a(a: CT_ShapeProperties_DML);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Line3DChart extends Base implements ISupportSetProperty, IChart, IChart3D {
    static $t: Type;
    private b;
    private f;
    private h;
    private c;
    constructor();
    get a(): CT_GapAmount;
    set a(a: CT_GapAmount);
    get e(): List$1<CT_UnsignedInt>;
    set e(a: List$1<CT_UnsignedInt>);
    get g(): List$1<CT_Extension>;
    set g(a: List$1<CT_Extension>);
    get d(): EG_LineChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_LineChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private d;
    private h;
    private f;
    private b;
    private l;
    private n;
    private i;
    constructor();
    get c(): CT_ChartLines;
    set c(a: CT_ChartLines);
    get g(): CT_UpDownBars;
    set g(a: CT_UpDownBars);
    get e(): CT_Marker_Chart;
    set e(a: CT_Marker_Chart);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get k(): List$1<CT_UnsignedInt>;
    set k(a: List$1<CT_UnsignedInt>);
    get m(): List$1<CT_Extension>;
    set m(a: List$1<CT_Extension>);
    get j(): EG_LineChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    o: Nullable$1<boolean>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_Area3DChart extends Base implements ISupportSetProperty, IChart, IChart3D {
    static $t: Type;
    private b;
    private f;
    private h;
    private c;
    constructor();
    get a(): CT_GapAmount;
    set a(a: CT_GapAmount);
    get e(): List$1<CT_UnsignedInt>;
    set e(a: List$1<CT_UnsignedInt>);
    get g(): List$1<CT_Extension>;
    set g(a: List$1<CT_Extension>);
    get d(): EG_AreaChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_AreaSer extends Base implements ISupportSetProperty, ISeries {
    static $t: Type;
    private h;
    private m;
    private d;
    private s;
    private o;
    private b;
    private f;
    private q;
    private i;
    constructor();
    get g(): CT_PictureOptions;
    set g(a: CT_PictureOptions);
    get l(): List$1<CT_DPt>;
    set l(a: List$1<CT_DPt>);
    get c(): CT_DLbls;
    set c(a: CT_DLbls);
    get r(): List$1<CT_Trendline>;
    set r(a: List$1<CT_Trendline>);
    get n(): List$1<CT_ErrBars>;
    set n(a: List$1<CT_ErrBars>);
    get a(): CT_AxDataSource;
    set a(a: CT_AxDataSource);
    get e(): CT_NumDataSource;
    set e(a: CT_NumDataSource);
    get p(): List$1<CT_Extension>;
    set p(a: List$1<CT_Extension>);
    get j(): EG_SerShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    k: IChart;
    get chart(): IChart;
    get seriesType(): SeriesType;
    get sharedProps(): EG_SerShared;
    getBubbleSizes(a: Sheet, b: WorkbookLoadManagerExcel2007): SeriesValues;
    get cT_ErrBars(): CT_ErrBars;
    get invertIfNegativeValue(): boolean;
    get cT_NumDataSource(): CT_NumDataSource;
    get cT_AxDataSource(): CT_AxDataSource;
    get cT_Marker(): CT_Marker_Chart;
    get cT_PictureOptions(): CT_PictureOptions;
    getExplosion(): CT_UnsignedInt;
    getSmooth(): CT_Boolean;
    get index(): number;
    getTrendlines(): List$1<CT_Trendline>;
    getDLbls(a: CT_Extension_DataLabelsRange): {
        ret: CT_DLbls;
        p0: CT_Extension_DataLabelsRange;
    };
    getDataPoints(): List$1<CT_DPt>;
    get isExplicitlyNoFill(): boolean;
    get isBubble3D(): boolean;
    getSeriesChartType(a: ChartType, b: SeriesType): ChartType;
}
/**
 * @hidden
 */
export declare class CT_AreaChart extends Base implements ISupportSetProperty, IChart {
    static $t: Type;
    private d;
    private f;
    private a;
    constructor();
    get c(): List$1<CT_UnsignedInt>;
    set c(a: List$1<CT_UnsignedInt>);
    get e(): List$1<CT_Extension>;
    set e(a: List$1<CT_Extension>);
    get b(): EG_AreaChartShared;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    getChartType(a: CT_ChartSpace, b: ISeries): ChartType;
    get seriesType(): SeriesType;
    get sT_Shape(): ST_Shape | null;
    get _sT_Shape$i(): Nullable$1<ST_Shape>;
    getSeries(): List$1<ISeries>;
    getHoleSize(): number | null;
    _getHoleSize$i(): Nullable$1<number>;
    getFirstSliceAngle(): number | null;
    _getFirstSliceAngle$i(): Nullable$1<number>;
    getSerLines(): CT_ChartLines;
    getOverlap(): number | null;
    _getOverlap$i(): Nullable$1<number>;
    getVaryColors(): boolean | null;
    _getVaryColors$i(): Nullable$1<boolean>;
    getGap(a: CT_GapAmount, b: CT_GapAmount): {
        p0: CT_GapAmount;
        p1: CT_GapAmount;
    };
    get axisIds(): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class CT_Surface extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private f;
    private d;
    private h;
    constructor();
    get a(): CT_UnsignedInt;
    set a(a: CT_UnsignedInt);
    get e(): CT_ShapeProperties_DML;
    set e(a: CT_ShapeProperties_DML);
    get c(): CT_PictureOptions;
    set c(a: CT_PictureOptions);
    get g(): List$1<CT_Extension>;
    set g(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_View3D extends Base implements ISupportSetProperty {
    static $t: Type;
    private j;
    private f;
    private l;
    private d;
    private b;
    private h;
    private n;
    constructor();
    get i(): CT_RotX;
    set i(a: CT_RotX);
    get e(): CT_HPercent;
    set e(a: CT_HPercent);
    get k(): CT_RotY;
    set k(a: CT_RotY);
    get c(): CT_DepthPercent;
    set c(a: CT_DepthPercent);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get g(): CT_Perspective;
    set g(a: CT_Perspective);
    get m(): List$1<CT_Extension>;
    set m(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_PivotFmt extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private h;
    private j;
    private f;
    private d;
    private l;
    constructor();
    get a(): CT_UnsignedInt;
    set a(a: CT_UnsignedInt);
    get g(): CT_ShapeProperties_DML;
    set g(a: CT_ShapeProperties_DML);
    get i(): CT_TextBody_DML;
    set i(a: CT_TextBody_DML);
    get e(): CT_Marker_Chart;
    set e(a: CT_Marker_Chart);
    get c(): CT_DLbl;
    set c(a: CT_DLbl);
    get k(): List$1<CT_Extension>;
    set k(a: List$1<CT_Extension>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Chart extends Base implements ISupportSetProperty {
    static $t: Type;
    private t;
    private b;
    private z;
    private v;
    private p;
    private r;
    private n;
    private l;
    private j;
    private d;
    private h;
    private f;
    private x;
    constructor();
    get s(): CT_Title;
    set s(a: CT_Title);
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get y(): List$1<CT_PivotFmt>;
    set y(a: List$1<CT_PivotFmt>);
    get u(): CT_View3D;
    set u(a: CT_View3D);
    get o(): CT_Surface;
    set o(a: CT_Surface);
    get q(): CT_Surface;
    set q(a: CT_Surface);
    get m(): CT_Surface;
    set m(a: CT_Surface);
    get k(): CT_PlotArea;
    set k(a: CT_PlotArea);
    get i(): CT_Legend;
    set i(a: CT_Legend);
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get g(): CT_DispBlanksAs;
    set g(a: CT_DispBlanksAs);
    get e(): CT_Boolean;
    set e(a: CT_Boolean);
    get w(): List$1<CT_Extension>;
    set w(a: List$1<CT_Extension>);
    toString(): string;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_Protection extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private d;
    private f;
    private h;
    private j;
    constructor();
    get a(): CT_Boolean;
    set a(a: CT_Boolean);
    get c(): CT_Boolean;
    set c(a: CT_Boolean);
    get e(): CT_Boolean;
    set e(a: CT_Boolean);
    get g(): CT_Boolean;
    set g(a: CT_Boolean);
    get i(): CT_Boolean;
    set i(a: CT_Boolean);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_PivotSource extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private b;
    private d;
    constructor();
    get e(): string;
    set e(a: string);
    get a(): CT_UnsignedInt;
    set a(a: CT_UnsignedInt);
    get c(): List$1<CT_Extension>;
    set c(a: List$1<CT_Extension>);
    toString(): string;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_CustSplit extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): List$1<CT_UnsignedInt>;
    set a(a: List$1<CT_UnsignedInt>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_BandFmts extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): List$1<CT_BandFmt>;
    set a(a: List$1<CT_BandFmt>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_PivotFmts extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    constructor();
    get e(): List$1<CT_PivotFmt>;
    set e(a: List$1<CT_PivotFmt>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    static c(a: CT_PivotFmts): List$1<CT_PivotFmt>;
    static a(a: List$1<CT_PivotFmt>): CT_PivotFmts;
}
/**
 * @hidden
 */
export declare class CT_DLbls extends Base implements ISupportSetProperty {
    static $t: Type;
    private g;
    private d;
    constructor();
    a: CT_Boolean;
    get f(): List$1<CT_DLbl>;
    b: CT_ExtensionList;
    get e(): Group_DLbls;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    static c(a: CT_ExtensionList): CT_Extension_DataLabels;
}
/**
 * @hidden
 */
export declare class CT_DLbl extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    constructor();
    b: CT_UnsignedInt;
    a: CT_Boolean;
    e: List$1<CT_Extension>;
    get d(): Group_DLbl;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_PlotArea extends Base implements ISupportSetProperty {
    static $t: Type;
    private ag;
    private ai;
    l: CT_Layout;
    c: CT_AreaChart;
    b: CT_Area3DChart;
    n: CT_LineChart;
    m: CT_Line3DChart;
    ac: CT_StockChart;
    u: CT_RadarChart;
    y: CT_ScatterChart;
    s: CT_PieChart;
    r: CT_Pie3DChart;
    i: CT_DoughnutChart;
    f: CT_BarChart;
    e: CT_Bar3DChart;
    p: CT_OfPieChart;
    ae: CT_SurfaceChart;
    ad: CT_Surface3DChart;
    h: CT_BubbleChart;
    d: CT_AreaChart;
    o: CT_LineChart;
    v: CT_RadarChart;
    w: CT_RadarChart;
    x: CT_RadarChart;
    z: CT_ScatterChart;
    aa: CT_ScatterChart;
    ab: CT_ScatterChart;
    g: CT_BarChart;
    t: CT_PieChart;
    j: CT_DoughnutChart;
    q: CT_OfPieChart;
    get ah(): List$1<IAxis>;
    get aj(): List$1<IChart>;
    k: CT_DTable;
    af: CT_ShapeProperties_DML;
    a: CT_ExtensionList;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_MultiLvlStrData extends Base implements ISupportSetProperty {
    static $t: Type;
    b: CT_UnsignedInt;
    private c;
    get d(): List$1<CT_Lvl>;
    a: CT_ExtensionList;
    setProperty(a: ElementPropertyIds, b: any): void;
}
/**
 * @hidden
 */
export declare class CT_Extension_DataLabels extends CT_Extension implements ISupportSetProperty {
    static $t: Type;
    static i(a: string): CT_Extension_DataLabels;
    setProperty(a: ElementPropertyIds, b: any): void;
    g: CT_Boolean;
    f: CT_Boolean;
    h: CT_ChartLines;
    l: CT_ShapeProperties_DML;
    k: CT_Tx;
    j: CT_Layout;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: Type): void;
}
/**
 * @hidden
 */
export declare class CT_Extension_DataLabelsRange extends CT_Extension implements ISupportSetProperty {
    static $t: Type;
    static g(a: string): CT_Extension_DataLabelsRange;
    setProperty(a: ElementPropertyIds, b: any): void;
    h: CT_SeriesDataLabelsRange;
    static f(a: CT_ExtensionList): CT_Extension_DataLabelsRange;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: Type): void;
}
/**
 * @hidden
 */
export declare class DMLChartUtils extends Base {
    static $t: Type;
    static ak(a: XmlPartManagerBase): CT_RelId;
    static t(a: CT_Tx, b: IFormattedStringOwner): FormattedString;
    static u(a: CT_TextBody_DML, b: IFormattedStringOwner): FormattedString;
    static k(a: CT_ErrBars, b: Sheet): ErrorBars;
    static af(a: CT_SolidColorFillProperties): WorkbookColorInfo;
    static ai(a: EG_ColorChoice_DML): WorkbookColorInfo;
    private static aj;
    static ab(a: CT_HslColor): WorkbookColorInfo;
    static ac(a: CT_PresetColor): WorkbookColorInfo;
    static ad(a: CT_SchemeColor_DML): WorkbookColorInfo;
    static ae(a: CT_ScRgbColor): WorkbookColorInfo;
    static ag(a: CT_SRgbColor_DML): WorkbookColorInfo;
    static ah(a: CT_SystemColor): WorkbookColorInfo;
    static a6(a: FormattedStringFont, b: CT_TextCharacterProperties_DML): void;
    static a5(a: IWorkbookFont, b: CT_TextCharacterProperties_DML): void;
    static az(a: CT_TextCharacterProperties_DML): string;
    static a3(a: CT_TextCharacterPropertiesBase): string;
    static e(a: CT_GradientFillProperties): ChartGradientFill;
    static h(a: CT_SolidColorFillProperties): ChartSolidFill;
    static b(a: CT_NoFillProperties): ChartEmptyFill;
    static d(a: EG_LineFillProperties): ChartFillBase;
    static c(a: EG_FillProperties): ChartFillBase;
    static j(a: CT_DispUnits, b: Nullable$1<number>): {
        ret: DisplayUnit;
        p1: Nullable$1<number>;
    };
    static aw(a: DisplayUnit): Nullable$1<ST_BuiltInUnit>;
    static aa(a: ChartType): ST_Grouping;
    static v(a: ChartType): CT_RadarStyle;
    static w(a: SeriesChartTypeGroup): CT_RadarStyle;
    static x(a: ChartType): CT_ScatterStyle;
    static y(a: SeriesChartTypeGroup): CT_ScatterStyle;
    static f(a: CT_ChartLines, b: GridLineType, c: IChartObject): ChartGridLines;
    static g(a: CT_ShapeProperties_DML, b: GridLineType, c: IChartObject, d?: boolean): ChartGridLines;
    static i(a: CT_LineProperties_DML): ChartTickLines;
    static p(a: CT_NumRef, b: Sheet, c: WorkbookLoadManagerExcel2007, d: boolean): SeriesValuesBase;
    static s(a: CT_StrRef, b: Sheet, c: WorkbookLoadManagerExcel2007): XValues;
    static q(a: CT_MultiLvlStrRef, b: Sheet, c: WorkbookLoadManagerExcel2007): XValues;
    static r(a: CT_StrData, b: Sheet, c: WorkbookLoadManagerExcel2007): XValues;
    static o(a: CT_NumData, b: Sheet, c: WorkbookLoadManagerExcel2007, d: boolean): SeriesValuesBase;
    static aq<T extends ISeries>($t: Type, a: List$1<T>): List$1<ISeries>;
    static n(a: CT_SerTx, b: Sheet, c: WorkbookLoadManagerExcel2007): SeriesName;
    static z(a: SeriesName, b: Sheet, c: WorkbookSaveManagerExcel2007): CT_SerTx;
    static l(a: CT_Legend, b: SeriesCollection, c: Sheet): Legend;
    static a7(a: Legend, b: CT_TextBody_DML, c: Sheet): void;
    static m(a: CT_LegendEntry, b: Sheet): LegendEntry;
    static a8(a: CT_Layout, b: ElementPosition, c: number, d: number, e: number, f: number, g: Nullable$1<boolean>): {
        p1: ElementPosition;
        p2: number;
        p3: number;
        p4: number;
        p5: number;
        p6: Nullable$1<boolean>;
    };
    private static a9;
    static a4(a: WorkbookColorInfo, b: IWorkbookProvider, c: CT_SchemeColor_DML, d: CT_SystemColor, e: CT_SRgbColor_DML): {
        p2: CT_SchemeColor_DML;
        p3: CT_SystemColor;
        p4: CT_SRgbColor_DML;
    };
    static ao(a: EG_SerShared): boolean;
    static ap(a: CT_LineProperties_DML): boolean;
    static al(a: IChart): boolean;
    static an(a: IChart): boolean;
    private static am;
    static au(a: ISeries): Nullable$1<ST_MarkerStyle>;
    static a<T>($t: Type, a: HashSet$1<T>): T[];
    static av(a: EG_SerShared): Nullable$1<boolean>;
}
/**
 * @hidden
 */
export declare class DMLChartExtensions extends Base {
    static $t: Type;
    static b(a: ST_AxPos): AxisPosition;
    static av(a: AxisPosition, b: Axis): Nullable$1<ST_AxPos>;
    private static aa;
    static y(a: ST_TextAnchoringType): VerticalTitleAlignment;
    static aq(a: VerticalTitleAlignment): ST_TextAnchoringType;
    static z(a: ST_TextUnderlineType): FontUnderlineStyle;
    static a1(a: FontUnderlineStyle): Nullable$1<ST_TextUnderlineType>;
    static k(a: ST_PathShadeType): GradientType;
    static a0(a: GradientType): Nullable$1<ST_PathShadeType>;
    static ay(a: BorderLineStyle): Nullable$1<ST_PresetLineDashVal>;
    static e(a: ST_PresetLineDashVal): BorderLineStyle;
    static n(a: ST_PresetLineDashVal): LineStyle;
    static az(a: LineStyle): Nullable$1<ST_PresetLineDashVal>;
    static m(a: BorderLineStyle): LineStyle;
    static d(a: LineStyle): BorderLineStyle;
    static q(a: ST_TextVerticalType): TextDirection;
    static as(a: TextDirection): ST_TextVerticalType;
    static r(a: ST_TextHorzOverflowType): TextHorizontalOverflow;
    static ar(a: TextHorizontalOverflow): ST_TextHorzOverflowType;
    static s(a: ST_TextVertOverflowType): TextVerticalOverflow;
    static at(a: TextVerticalOverflow): ST_TextVertOverflowType;
    static w(a: ST_TimeUnit): TimeUnit;
    static al(a: TimeUnit): ST_TimeUnit;
    static aw(a: AxisCrosses): Nullable$1<ST_Crosses>;
    static a(a: ST_Crosses): AxisCrosses;
    static v(a: ST_TickMark): TickMark;
    static ak(a: TickMark): ST_TickMark;
    static u(a: ST_TickLblPos): TickLabelPosition;
    static aj(a: TickLabelPosition): ST_TickLblPos;
    static t(a: ST_LblAlgn): TickLabelAlignment;
    static ag(a: TickLabelAlignment): ST_LblAlgn;
    static a8(a: ChartTickLines, b: CT_LineProperties_DML): void;
    static a5(a: ChartGridLines, b: CT_LineProperties_DML): void;
    static c(a: ST_Shape): BarShape;
    static ai(a: BarShape): ST_Shape;
    static i(a: ST_ErrBarType): ErrorBarDirection;
    static ae(a: ErrorBarDirection): ST_ErrBarType;
    static j(a: ST_ErrValType): ErrorValueType;
    static af(a: ErrorValueType): ST_ErrValType;
    static o(a: ST_MarkerStyle): MarkerStyle;
    static ap(a: MarkerStyle): ST_MarkerStyle;
    static p(a: ST_PictureFormat): PictureType;
    static ah(a: PictureType): ST_PictureFormat;
    static l(a: ST_LegendPos): LegendPosition;
    static ax(a: LegendPosition): Nullable$1<ST_LegendPos>;
    static ab(a: ChartType): ST_BarDir;
    static ac(a: ChartType): ST_BarGrouping;
    static a7(a: ChartLineBase, b: CT_LineProperties_DML, c: Sheet): void;
    private static a3;
    static a6(a: ChartLine, b: CT_LineProperties_DML, c: Sheet): void;
    static a4(a: ChartBorder, b: CT_LineProperties_DML, c: Sheet): void;
    static h(a: ST_DispBlanksAs): DisplayBlanksAs;
    static ao(a: DisplayBlanksAs): ST_DispBlanksAs;
    static an(a: WorkbookColorInfo, b: Sheet): CT_SolidColorFillProperties;
    static ba(a: EG_FillProperties, b: WorkbookColorInfo, c: Sheet): void;
    static a9(a: EG_ColorChoice_DML, b: WorkbookColorInfo, c: Sheet): void;
    static a2(a: ReadingOrder): Nullable$1<boolean>;
    static am(a: TrendlineType): ST_TrendlineType;
    static x(a: ST_TrendlineType): TrendlineType;
    static ad(a: DataLabelPosition): ST_DLblPos;
    static g(a: ST_DLblPos): DataLabelPosition;
    static f(a: DataLabelPosition, b: ChartType): DataLabelPosition;
    static au(a: IWorkbookFont): boolean;
    static b1(a: CT_LblAlgn, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b2(a: CT_LblOffset, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cu(a: CT_Skip, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bn(a: CT_DispUnits, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bl(a: CT_CrossBetween, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static be(a: CT_AxisUnit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bj(a: CT_BuiltInUnit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bi(a: CT_BarSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b3(a: CT_LineSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cn(a: CT_PieSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bc(a: CT_AreaSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cy(a: CT_SurfaceSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cq(a: CT_ScatterSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bs(a: CT_DPt, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cl(a: CT_PictureOptions, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static by(a: CT_Layout, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b6(a: CT_ManualLayout, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b0(a: CT_LayoutTarget, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bz(a: CT_LayoutMode, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c6(a: CT_Tx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cw(a: CT_StrRef, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cv(a: CT_StrData, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cx(a: CT_StrVal, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bo(a: CT_DispUnitsLbl, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cp(a: CT_ScatterChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cr(a: CT_ScatterStyle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cs(a: CT_SerTx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static br(a: CT_DLbls, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c3(a: CT_Trendline, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ch(a: CT_Order, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bt(a: CT_ErrBars, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bd(a: CT_AxDataSource, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cd(a: CT_NumDataSource, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ct(a: CT_Shape_Chart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e9(a: CT_CustomGeometry2D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dk(a: CT_BlipFillProperties_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d7(a: CT_PatternFillProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dt(a: CT_EffectList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ds(a: CT_EffectContainer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ed(a: CT_Scene3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ee(a: CT_Shape3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d5(a: CT_OfficeArtExtensionList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static fb(a: CT_GeomGuideList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e8(a: CT_ComplementTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static fd(a: CT_InverseTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static fc(a: CT_GrayscaleTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dy(a: CT_GammaTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d3(a: CT_InverseGammaTransform, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dj(a: CT_Blip_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c8(a: CT_AlphaBiLevelEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c9(a: CT_AlphaCeilingEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static da(a: CT_AlphaFloorEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static db(a: CT_AlphaInverseEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dc(a: CT_AlphaModulateFixedEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static de(a: CT_AlphaReplaceEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dh(a: CT_BiLevelEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dl(a: CT_BlurEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dp(a: CT_ColorChangeEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dq(a: CT_ColorReplaceEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dr(a: CT_DuotoneEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dw(a: CT_FillOverlayEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d0(a: CT_GrayscaleEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d1(a: CT_HSLEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static du(a: CT_EffectReference, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dd(a: CT_AlphaOutsetEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static di(a: CT_BlendEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dv(a: CT_FillEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dz(a: CT_GlowEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d2(a: CT_InnerShadowEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d6(a: CT_OuterShadowEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d9(a: CT_PresetShadowEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static eb(a: CT_ReflectionEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ec(a: CT_RelativeOffsetEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ef(a: CT_SoftEdgesEffect, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static fa(a: CT_DashStopList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ff(a: CT_LineJoinRound, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static fe(a: CT_LineJoinBevel, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dm(a: CT_Camera, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d4(a: CT_LightRig, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static df(a: CT_Backdrop, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static eg(a: CT_SphereCoords, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d8(a: CT_Point3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e7(a: CT_Vector3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dg(a: CT_Bevel, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dn(a: CT_Color_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ck(a: CT_PictureFormat, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cm(a: CT_PictureStackUnit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b7(a: CT_Marker_Chart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b9(a: CT_MarkerStyle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b8(a: CT_MarkerSize, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bp(a: CT_DLbl, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ce(a: CT_NumFmt_Chart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ej(a: CT_TextBody_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bq(a: CT_DLblPos, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bk(a: CT_ChartLines, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static es(a: CT_TextListStyle_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ew(a: CT_TextParagraph_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ea(a: CT_PresetTextShape, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static et(a: CT_TextNoAutofit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ev(a: CT_TextNormalAutofit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ey(a: CT_TextShapeAutofit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static dx(a: CT_FlatText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ez(a: CT_TextSpacing, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ek(a: CT_TextBulletColorFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static el(a: CT_TextBulletSizeFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static em(a: CT_TextBulletSizePercent, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static en(a: CT_TextBulletSizePoint, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static eo(a: CT_TextBulletTypefaceFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static eu(a: CT_TextNoBullet, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static eh(a: CT_TextAutonumberBullet, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ep(a: CT_TextCharBullet, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ei(a: CT_TextBlipBullet, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e3(a: CT_TextTabStopList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e0(a: CT_TextSpacingPercent, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e1(a: CT_TextSpacingPoint, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e2(a: CT_TextTabStop, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e6(a: CT_TextUnderlineLineFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e4(a: CT_TextUnderlineFillFollowText, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e5(a: CT_TextUnderlineFillGroupWrapper, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ex(a: CT_TextParagraphProperties_DML, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static er(a: CT_TextLineBreak, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static eq(a: CT_TextField, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c5(a: CT_TrendlineType, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cj(a: CT_Period, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c4(a: CT_TrendlineLbl, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bv(a: CT_ErrDir, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bu(a: CT_ErrBarType, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bw(a: CT_ErrValType, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cf(a: CT_NumRef, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cg(a: CT_NumVal, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cc(a: CT_NumData, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cb(a: CT_MultiLvlStrRef, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ca(a: CT_MultiLvlStrData, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b5(a: CT_Lvl, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static co(a: CT_Scaling, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b4(a: CT_LogBase, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ci(a: CT_Orientation, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bf(a: CT_AxPos, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c2(a: CT_Title, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c0(a: CT_TickMark, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cz(a: CT_TickLblPos, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bm(a: CT_Crosses, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bx(a: CT_Grouping, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bh(a: CT_BandFmts, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bg(a: CT_BandFmt, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c1(a: CT_TimeUnit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bb(a: CT_ExtensionList, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static fg(a: List$1<CT_Extension>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static c7(a: CT_SeriesDataLabelsRange, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
}
/**
 * @hidden
 */
export declare class ISeriesSortComparer extends Base implements IComparer$1<ISeries> {
    static $t: Type;
    compare(a: ISeries, b: ISeries): number;
}
/**
 * @hidden
 */
export declare class CT_ChartSpaceEx extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    private e;
    private i;
    private g;
    constructor();
    l: Dictionary$2<string, NamedReference>;
    a: Excel2007ChartData;
    get b(): CT_ChartData;
    set b(a: CT_ChartData);
    get d(): CT_ChartEx;
    set d(a: CT_ChartEx);
    j: CT_ShapeProperties_DML;
    k: CT_TextBody_DML;
    get h(): CT_ColorMapping;
    set h(a: CT_ColorMapping);
    n: List$1<CT_FormatOverride>;
    get f(): CT_PrintSettingsEx;
    set f(a: CT_PrintSettingsEx);
    m: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ChartData extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: CT_ExternalDataEx;
    c: List$1<CT_Data>;
    b: Dictionary$2<Series, CT_Data>;
    d: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ExternalDataEx extends CT_ExternalData {
    static $t: Type;
}
/**
 * @hidden
 */
export declare class CT_FormatOverride extends Base implements ISupportSetProperty {
    static $t: Type;
    private e;
    constructor();
    a: CT_ShapeProperties_DML;
    b: List$1<CT_Extension>;
    get d(): number;
    set d(a: number);
    static f(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static g(a: XmlPartManagerBase, b: string, c: number): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_LegendEx extends Base implements ISupportSetProperty {
    static $t: Type;
    private m;
    private i;
    private k;
    constructor();
    d: CT_ShapeProperties_DML;
    e: CT_TextBody_DML;
    g: List$1<CT_Extension>;
    get l(): Nullable$1<ST_SidePos>;
    set l(a: Nullable$1<ST_SidePos>);
    get h(): Nullable$1<ST_PosAlign>;
    set h(a: Nullable$1<ST_PosAlign>);
    get j(): Nullable$1<boolean>;
    set j(a: Nullable$1<boolean>);
    static a(a: XmlPartManagerBase): CT_LegendEx;
    static o(a: XmlPartManagerBase, b: Nullable$1<ST_SidePos>, c: Nullable$1<ST_PosAlign>, d: Nullable$1<boolean>): {
        p1: Nullable$1<ST_SidePos>;
        p2: Nullable$1<ST_PosAlign>;
        p3: Nullable$1<boolean>;
    };
    static p(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_PosAlign>, d?: Nullable$1<boolean>, e?: Nullable$1<ST_SidePos>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TickLabels extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_TickMarks extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    constructor();
    a: List$1<CT_Extension>;
    get b(): Nullable$1<ST_TickMarksType>;
    set b(a: Nullable$1<ST_TickMarksType>);
    static e(a: XmlPartManagerBase, b: Nullable$1<ST_TickMarksType>): {
        p1: Nullable$1<ST_TickMarksType>;
    };
    static f(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_TickMarksType>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Gridlines extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: CT_ShapeProperties_DML;
    b: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_AxisUnitsLabel extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: CT_Text;
    b: CT_ShapeProperties_DML;
    c: CT_TextBody_DML;
    d: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Text extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    a: CT_TextData;
    b: CT_TextBody_DML;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_AxisUnits extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private e;
    constructor();
    get a(): CT_AxisUnitsLabel;
    set a(a: CT_AxisUnitsLabel);
    c: List$1<CT_Extension>;
    get d(): Nullable$1<ST_AxisUnit>;
    set d(a: Nullable$1<ST_AxisUnit>);
    static g(a: XmlPartManagerBase, b: Nullable$1<ST_AxisUnit>): {
        p1: Nullable$1<ST_AxisUnit>;
    };
    static h(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_AxisUnit>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class ChartExTitleBase extends Base {
    static $t: Type;
    constructor();
    a: CT_Text;
    b: CT_ShapeProperties_DML;
    c: CT_TextBody_DML;
    e: List$1<CT_Extension>;
    d(a: ElementPropertyIds, b: any): boolean;
}
/**
 * @hidden
 */
export declare class CT_AxisTitle extends ChartExTitleBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Axis extends Base implements ISupportSetProperty {
    static $t: Type;
    private y;
    private b;
    private d;
    private g;
    private i;
    private o;
    private q;
    private m;
    private k;
    private ab;
    private x;
    constructor();
    e: CT_CategoryAxisScaling;
    r: CT_ValueAxisScaling;
    get a(): CT_AxisTitle;
    set a(a: CT_AxisTitle);
    get c(): CT_AxisUnits;
    set c(a: CT_AxisUnits);
    get f(): CT_Gridlines;
    set f(a: CT_Gridlines);
    get h(): CT_Gridlines;
    set h(a: CT_Gridlines);
    get n(): CT_TickMarks;
    set n(a: CT_TickMarks);
    get p(): CT_TickMarks;
    set p(a: CT_TickMarks);
    get l(): CT_TickLabels;
    set l(a: CT_TickLabels);
    get j(): CT_NumberFormat;
    set j(a: CT_NumberFormat);
    s: CT_ShapeProperties_DML;
    t: CT_TextBody_DML;
    v: List$1<CT_Extension>;
    get aa(): number;
    set aa(a: number);
    get w(): Nullable$1<boolean>;
    set w(a: Nullable$1<boolean>);
    static ac(a: XmlPartManagerBase, b: number, c: Nullable$1<boolean>): {
        p1: number;
        p2: Nullable$1<boolean>;
    };
    static ad(a: XmlPartManagerBase, b: string, c: Nullable$1<boolean>, d: number): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Binning extends Base implements ISupportSetProperty {
    static $t: Type;
    private j;
    private i;
    private g;
    private e;
    a: CT_Double;
    b: CT_UnsignedInt;
    get h(): Nullable$1<ST_IntervalClosedSide>;
    set h(a: Nullable$1<ST_IntervalClosedSide>);
    get f(): ST_DoubleOrAutomatic;
    set f(a: ST_DoubleOrAutomatic);
    get d(): ST_DoubleOrAutomatic;
    set d(a: ST_DoubleOrAutomatic);
    static c(a: XmlPartManagerBase): CT_Binning;
    static l(a: XmlPartManagerBase, b: Nullable$1<ST_IntervalClosedSide>, c: ST_DoubleOrAutomatic, d: ST_DoubleOrAutomatic): {
        p1: Nullable$1<ST_IntervalClosedSide>;
        p2: ST_DoubleOrAutomatic;
        p3: ST_DoubleOrAutomatic;
    };
    static m(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static n(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static o(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_IntervalClosedSide>, d?: ST_DoubleOrAutomatic, e?: ST_DoubleOrAutomatic): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_SeriesLayoutProperties extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private h;
    private j;
    private d;
    private l;
    constructor();
    get e(): CT_ParentLabelLayout;
    set e(a: CT_ParentLabelLayout);
    get g(): CT_RegionLabelLayout;
    set g(a: CT_RegionLabelLayout);
    get i(): CT_SeriesElementVisibilities;
    set i(a: CT_SeriesElementVisibilities);
    a: CT_Aggregation;
    b: CT_Binning;
    get c(): CT_Geography;
    set c(a: CT_Geography);
    get k(): CT_Statistics;
    set k(a: CT_Statistics);
    m: CT_Subtotals;
    n: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class ChartExDataLabelBase extends Base {
    static $t: Type;
    constructor();
    b: CT_NumberFormat;
    c: CT_ShapeProperties_DML;
    d: CT_TextBody_DML;
    a: CT_DataLabelVisibilities;
    h: string;
    f: List$1<CT_Extension>;
    g: Nullable$1<ST_DataLabelPos>;
    e(a: ElementPropertyIds, b: any): boolean;
}
/**
 * @hidden
 */
export declare class CT_DataLabels extends ChartExDataLabelBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    i: List$1<CT_DataLabel>;
    j: List$1<CT_DataLabelHidden>;
    static k(a: XmlPartManagerBase, b: Nullable$1<ST_DataLabelPos>): {
        p1: Nullable$1<ST_DataLabelPos>;
    };
    static l(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_DataLabelPos>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_DataLabel extends ChartExDataLabelBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    i: number;
    static j(a: XmlPartManagerBase, b: number, c: Nullable$1<ST_DataLabelPos>): {
        p1: number;
        p2: Nullable$1<ST_DataLabelPos>;
    };
    static k(a: XmlPartManagerBase, b: string, c: Nullable$1<ST_DataLabelPos>, d: number): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_DataPoint extends Base implements ISupportSetProperty {
    static $t: Type;
    private e;
    constructor();
    a: CT_ShapeProperties_DML;
    b: List$1<CT_Extension>;
    get d(): number;
    set d(a: number);
    static f(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static g(a: XmlPartManagerBase, b: string, c: number): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ValueColors extends Base implements ISupportSetProperty {
    static $t: Type;
    private f;
    private d;
    private b;
    constructor();
    get e(): CT_SolidColorFillProperties;
    set e(a: CT_SolidColorFillProperties);
    get c(): CT_SolidColorFillProperties;
    set c(a: CT_SolidColorFillProperties);
    get a(): CT_SolidColorFillProperties;
    set a(a: CT_SolidColorFillProperties);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Series extends Base implements ISupportSetProperty {
    static $t: Type;
    private h;
    private l;
    private j;
    private b;
    private f;
    private n;
    private x;
    private z;
    private ac;
    private v;
    constructor();
    t: number;
    get g(): CT_Text;
    set g(a: CT_Text);
    o: CT_ShapeProperties_DML;
    get k(): CT_ValueColors;
    set k(a: CT_ValueColors);
    get i(): CT_ValueColorPositions;
    set i(a: CT_ValueColorPositions);
    r: List$1<CT_DataPoint>;
    c: CT_DataLabels;
    get a(): CT_DataId;
    set a(a: CT_DataId);
    get e(): CT_SeriesLayoutProperties;
    set e(a: CT_SeriesLayoutProperties);
    q: List$1<ST_AxisId>;
    s: List$1<CT_Extension>;
    get m(): ST_SeriesLayout;
    set m(a: ST_SeriesLayout);
    get w(): Nullable$1<boolean>;
    set w(a: Nullable$1<boolean>);
    get y(): Nullable$1<number>;
    set y(a: Nullable$1<number>);
    get ab(): string;
    set ab(a: string);
    get u(): Nullable$1<number>;
    set u(a: Nullable$1<number>);
    static d(a: XmlPartManagerBase): CT_Series;
    static ad(a: XmlPartManagerBase, b: ST_SeriesLayout, c: Nullable$1<boolean>, d: Nullable$1<number>, e: string, f: Nullable$1<number>): {
        p1: ST_SeriesLayout;
        p2: Nullable$1<boolean>;
        p3: Nullable$1<number>;
        p4: string;
        p5: Nullable$1<number>;
    };
    static ae(a: XmlPartManagerBase, b: string, c: Nullable$1<number>, d: Nullable$1<boolean>, e: Nullable$1<number>, f: string, g: ST_SeriesLayout): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_PlotSurface extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: CT_ShapeProperties_DML;
    b: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_PlotAreaRegion extends Base implements ISupportSetProperty {
    static $t: Type;
    constructor();
    a: CT_PlotSurface;
    c: List$1<CT_Series>;
    b: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_PlotAreaEx extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): CT_PlotAreaRegion;
    set a(a: CT_PlotAreaRegion);
    d: List$1<CT_Axis>;
    c: CT_ShapeProperties_DML;
    e: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ChartTitle extends ChartExTitleBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    l: Nullable$1<ST_SidePos>;
    j: Nullable$1<ST_PosAlign>;
    k: Nullable$1<boolean>;
    static f(a: XmlPartManagerBase): CT_ChartTitle;
    static m(a: XmlPartManagerBase, b: Nullable$1<ST_SidePos>, c: Nullable$1<ST_PosAlign>, d: Nullable$1<boolean>): {
        p1: Nullable$1<ST_SidePos>;
        p2: Nullable$1<ST_PosAlign>;
        p3: Nullable$1<boolean>;
    };
    static n(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_PosAlign>, d?: Nullable$1<boolean>, e?: Nullable$1<ST_SidePos>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ChartEx extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private f;
    private d;
    constructor();
    get a(): CT_ChartTitle;
    set a(a: CT_ChartTitle);
    get e(): CT_PlotAreaEx;
    set e(a: CT_PlotAreaEx);
    get c(): CT_LegendEx;
    set c(a: CT_LegendEx);
    g: List$1<CT_Extension>;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_Data extends Base implements ISupportSetProperty {
    static $t: Type;
    private g;
    constructor();
    d: List$1<CT_Extension>;
    get f(): number;
    set f(a: number);
    a: CT_NumericDimension;
    b: CT_StringDimension;
    c: CT_StringDimension;
    static h(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static i(a: XmlPartManagerBase, b: string, c: number): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_FormatOverrides extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    constructor();
    get a(): List$1<CT_FormatOverride>;
    set a(a: List$1<CT_FormatOverride>);
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class ST_AxisId extends ValueType {
    static $t: Type;
    constructor();
    h: number;
    static c(a: XmlPartManagerBase): ST_AxisId;
    private static i;
    static k(a: XmlPartManagerBase, b: number, c?: boolean): void;
    j(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: string): void;
    toString(): string;
    static f(a: ST_AxisId): number;
    static e(a: Nullable$1<ST_AxisId>): Nullable$1<number>;
    static a(a: number): ST_AxisId;
    static d(a: Nullable$1<number>): Nullable$1<ST_AxisId>;
}
/**
 * @hidden
 */
export declare class ChartExExtensions extends Base {
    static $t: Type;
    static ag(a: CT_ChartSpaceEx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ae(a: CT_ChartData, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static af(a: CT_ChartEx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static au(a: CT_FormatOverrides, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static by(a: CT_PrintSettingsEx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ar(a: CT_ExternalDataEx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ak(a: CT_Data, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bo(a: CT_NumericDimension, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b4(a: CT_StringDimension, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static av(a: CT_Formula, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b6(a: CT_StringValue, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bq(a: CT_NumericValue, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bp(a: CT_NumericLevel, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ah(a: CT_ChartTitle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bv(a: CT_PlotAreaEx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bl(a: CT_LegendEx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b8(a: CT_Text, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b9(a: CT_TextData, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bw(a: CT_PlotAreaRegion, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static y(a: CT_Axis, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static z(a: CT_AxisTitle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bx(a: CT_PlotSurface, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b0(a: CT_Series, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cg(a: CT_ValueColors, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cf(a: CT_ValueColorPositions, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aq(a: CT_DataPoint, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ao(a: CT_DataLabels, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static al(a: CT_DataId, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b2(a: CT_SeriesLayoutProperties, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b1(a: CT_SeriesElementVisibilities, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cd(a: CT_ValueColorEndPosition, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ce(a: CT_ValueColorMiddlePosition, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static as(a: CT_ExtremeValueColorPosition, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bm(a: CT_NumberColorPosition, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bu(a: CT_PercentageColorPosition, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bn(a: CT_NumberFormat, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ap(a: CT_DataLabelVisibilities, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cw(a: string, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static am(a: CT_DataLabel, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static an(a: CT_DataLabelHidden, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bt(a: CT_ParentLabelLayout, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bz(a: CT_RegionLabelLayout, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static x(a: CT_Aggregation, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ac(a: CT_Binning, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ba(a: CT_Geography, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b3(a: CT_Statistics, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b7(a: CT_Subtotals, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aw(a: CT_GeoCache, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ai(a: CT_Clear, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bf(a: CT_GeoLocationQueryResults, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a5(a: CT_GeoDataEntityQueryResults, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a9(a: CT_GeoDataPointToEntityQueryResults, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a0(a: CT_GeoChildEntitiesQueryResults, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static be(a: CT_GeoLocationQueryResult, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bd(a: CT_GeoLocationQuery, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bg(a: CT_GeoLocations, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bc(a: CT_GeoLocation, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static w(a: CT_Address, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a4(a: CT_GeoDataEntityQueryResult, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a3(a: CT_GeoDataEntityQuery, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a2(a: CT_GeoData, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bi(a: CT_GeoPolygons, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static aj(a: CT_Copyrights, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bh(a: CT_GeoPolygon, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a8(a: CT_GeoDataPointToEntityQueryResult, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a6(a: CT_GeoDataPointQuery, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a7(a: CT_GeoDataPointToEntityQuery, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static az(a: CT_GeoChildEntitiesQueryResult, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ay(a: CT_GeoChildEntitiesQuery, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ax(a: CT_GeoChildEntities, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a1(a: CT_GeoChildTypes, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ch(a: ST_EntityType, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bb(a: CT_GeoHierarchyEntity, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ad(a: CT_CategoryAxisScaling, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cc(a: CT_ValueAxisScaling, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aa(a: CT_AxisUnits, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bj(a: CT_Gridlines, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cb(a: CT_TickMarks, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ca(a: CT_TickLabels, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ab(a: CT_AxisUnitsLabel, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static at(a: CT_FormatOverride, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bk(a: CT_HeaderFooter, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static br(a: CT_PageMargins, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static bs(a: CT_PageSetup, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static v(a: CT_Extension, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b5(a: CT_StringLevel, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ci(a: CT_ColorMapping, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static cs(a: List$1<CT_FormatOverride>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static ct(a: List$1<CT_Extension>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e?: string): void;
    static cj(a: List$1<CT_Data>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static ck(a: List$1<CT_NumericLevel>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static cl(a: List$1<CT_StringLevel>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static cm(a: List$1<ST_AxisId>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static cn(a: List$1<CT_GeoLocationQueryResult>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static co(a: List$1<CT_GeoDataEntityQueryResult>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static cp(a: List$1<CT_GeoDataPointToEntityQueryResult>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static cq(a: List$1<CT_GeoChildEntitiesQueryResult>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static cu(a: List$1<CT_GeoHierarchyEntity>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string, f: string): void;
    static cr(a: List$1<CT_GeoPolygon>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static cv(a: List$1<string>, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string, f: string, g: string): void;
    static a(a: ST_DataLabelPos): DataLabelPosition;
    static k(a: DataLabelPosition): ST_DataLabelPos;
    static f(a: ST_SidePos, b: ST_PosAlign): LegendPosition;
    static s(a: LegendPosition): Tuple$2<ST_SidePos, ST_PosAlign>;
    static h(a: ST_TickMarksType): TickMark;
    static q(a: TickMark): ST_TickMarksType;
    static b(a: ST_AxisUnit): DisplayUnit;
    static i(a: CT_Text): CT_Tx;
    static g(a: ST_ParentLabelLayout): ParentLabelLayout;
    static n(a: ParentLabelLayout): ST_ParentLabelLayout;
    static p(a: ChartType): ST_SeriesLayout;
    static u(a: List$1<CT_Axis>, b: WorksheetChart, c: Sheet, d: WorkbookSaveManagerExcel2007): void;
    static t(a: CT_Axis, b: Axis, c: WorksheetChart, d: Sheet, e: WorkbookSaveManagerExcel2007): void;
    private static j;
    static r(a: DisplayUnit): Nullable$1<ST_AxisUnit>;
    static e(a: ST_GeoProjectionType): GeographicMapProjection;
    static m(a: GeographicMapProjection): ST_GeoProjectionType;
    static d(a: ST_GeoMappingLevel): GeographicMappingArea;
    static l(a: GeographicMappingArea): ST_GeoMappingLevel;
    static c(a: ST_RegionLabelLayout): GeographicMapLabels;
    static o(a: GeographicMapLabels): ST_RegionLabelLayout;
}
/**
 * @hidden
 */
export declare class CT_StyleReference extends Base implements ISupportSetProperty {
    static $t: Type;
    private b;
    private i;
    private d;
    private e;
    constructor();
    get a(): CT_StyleColor;
    set a(a: CT_StyleColor);
    get h(): number;
    set h(a: number);
    get c(): ST_StyleReferenceModifierList;
    set c(a: ST_StyleReferenceModifierList);
    get f(): EG_ColorChoice_DML;
    static j(a: XmlPartManagerBase, b: number, c: ST_StyleReferenceModifierList): {
        p1: number;
        p2: ST_StyleReferenceModifierList;
    };
    static k(a: XmlPartManagerBase, b: string, c: ST_StyleReferenceModifierList, d: number): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_FontReference_ChartStyle extends Base implements ISupportSetProperty {
    static $t: Type;
    private c;
    private i;
    private e;
    private f;
    constructor();
    get b(): CT_StyleColor;
    set b(a: CT_StyleColor);
    get h(): ST_FontCollectionIndex;
    set h(a: ST_FontCollectionIndex);
    get d(): ST_StyleReferenceModifierList;
    set d(a: ST_StyleReferenceModifierList);
    get g(): EG_ColorChoice_DML;
    static k(a: XmlPartManagerBase, b: ST_FontCollectionIndex, c: ST_StyleReferenceModifierList): {
        p1: ST_FontCollectionIndex;
        p2: ST_StyleReferenceModifierList;
    };
    static l(a: XmlPartManagerBase, b: string, c: ST_StyleReferenceModifierList, d: ST_FontCollectionIndex): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    static a(a: ST_FontCollectionIndex, b: ST_SchemeColorVal, c?: Nullable$1<number>, d?: Nullable$1<number>): CT_FontReference_ChartStyle;
}
/**
 * @hidden
 */
export declare class CT_StyleEntry extends Base implements ISupportSetProperty {
    static $t: Type;
    private j;
    private f;
    private x;
    private e;
    private d;
    private b;
    private p;
    private t;
    private r;
    private n;
    constructor();
    get k(): ST_StyleEntryModifierList;
    set k(a: ST_StyleEntryModifierList);
    get i(): CT_StyleReference;
    set i(a: CT_StyleReference);
    get y(): number;
    set y(a: number);
    get h(): CT_StyleReference;
    set h(a: CT_StyleReference);
    get g(): CT_StyleReference;
    set g(a: CT_StyleReference);
    get c(): CT_FontReference_ChartStyle;
    set c(a: CT_FontReference_ChartStyle);
    get q(): CT_ShapeProperties_DML;
    set q(a: CT_ShapeProperties_DML);
    get u(): CT_TextCharacterProperties_DML;
    set u(a: CT_TextCharacterProperties_DML);
    get s(): CT_TextBodyProperties_DML;
    set s(a: CT_TextBodyProperties_DML);
    get o(): CT_OfficeArtExtensionList;
    set o(a: CT_OfficeArtExtensionList);
    static ab(a: XmlPartManagerBase, b: ST_StyleEntryModifierList): {
        p1: ST_StyleEntryModifierList;
    };
    static ac(a: XmlPartManagerBase, b: string, c?: ST_StyleEntryModifierList): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    w: ISaveToXLSX;
    v: ISaveToXLSX;
    l: CT_EffectStyleItem;
    m: CT_LineProperties_DML;
    private a;
    aa(a: ThemePartInfo): void;
}
/**
 * @hidden
 */
export declare class CT_ChartStyle extends Base implements ISupportSetProperty {
    static $t: Type;
    private bi;
    private e;
    private f;
    private g;
    private h;
    private i;
    private j;
    private k;
    private l;
    private m;
    private c;
    private n;
    private o;
    private p;
    private q;
    private r;
    private s;
    private t;
    private u;
    private v;
    private w;
    private x;
    private y;
    private z;
    private aa;
    private ab;
    private ac;
    private ad;
    private ae;
    private af;
    private ag;
    private ah;
    private be;
    constructor();
    get bj(): Nullable$1<number>;
    set bj(a: Nullable$1<number>);
    get ai(): CT_StyleEntry;
    set ai(a: CT_StyleEntry);
    get aj(): CT_StyleEntry;
    set aj(a: CT_StyleEntry);
    get ak(): CT_StyleEntry;
    set ak(a: CT_StyleEntry);
    get al(): CT_StyleEntry;
    set al(a: CT_StyleEntry);
    get am(): CT_StyleEntry;
    set am(a: CT_StyleEntry);
    get an(): CT_StyleEntry;
    set an(a: CT_StyleEntry);
    get ao(): CT_StyleEntry;
    set ao(a: CT_StyleEntry);
    get ap(): CT_StyleEntry;
    set ap(a: CT_StyleEntry);
    get aq(): CT_StyleEntry;
    set aq(a: CT_StyleEntry);
    get d(): CT_MarkerLayout;
    set d(a: CT_MarkerLayout);
    get ar(): CT_StyleEntry;
    set ar(a: CT_StyleEntry);
    get as(): CT_StyleEntry;
    set as(a: CT_StyleEntry);
    get at(): CT_StyleEntry;
    set at(a: CT_StyleEntry);
    get au(): CT_StyleEntry;
    set au(a: CT_StyleEntry);
    get av(): CT_StyleEntry;
    set av(a: CT_StyleEntry);
    get aw(): CT_StyleEntry;
    set aw(a: CT_StyleEntry);
    get ax(): CT_StyleEntry;
    set ax(a: CT_StyleEntry);
    get ay(): CT_StyleEntry;
    set ay(a: CT_StyleEntry);
    get az(): CT_StyleEntry;
    set az(a: CT_StyleEntry);
    get a0(): CT_StyleEntry;
    set a0(a: CT_StyleEntry);
    get a1(): CT_StyleEntry;
    set a1(a: CT_StyleEntry);
    get a2(): CT_StyleEntry;
    set a2(a: CT_StyleEntry);
    get a3(): CT_StyleEntry;
    set a3(a: CT_StyleEntry);
    get a4(): CT_StyleEntry;
    set a4(a: CT_StyleEntry);
    get a5(): CT_StyleEntry;
    set a5(a: CT_StyleEntry);
    get a6(): CT_StyleEntry;
    set a6(a: CT_StyleEntry);
    get a7(): CT_StyleEntry;
    set a7(a: CT_StyleEntry);
    get a8(): CT_StyleEntry;
    set a8(a: CT_StyleEntry);
    get a9(): CT_StyleEntry;
    set a9(a: CT_StyleEntry);
    get ba(): CT_StyleEntry;
    set ba(a: CT_StyleEntry);
    get bb(): CT_StyleEntry;
    set bb(a: CT_StyleEntry);
    get bf(): CT_OfficeArtExtensionList;
    set bf(a: CT_OfficeArtExtensionList);
    static bl(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static bn(a: XmlPartManagerBase, b: string, c?: Nullable$1<number>): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
    get a(): CT_StyleEntry[];
    static b(): CT_ChartStyle;
    static bc(): ST_StyleEntryModifierList;
    static bd(a: ST_StyleEntryModifierEnum[]): ST_StyleEntryModifierList;
    static bg(a: ST_SchemeColorVal, b?: Nullable$1<number>, c?: Nullable$1<number>): CT_ShapeProperties_DML;
    static bh(a: ST_SchemeColorVal, b?: Nullable$1<number>, c?: Nullable$1<number>): CT_SolidColorFillProperties;
    bm(a: ChartType): void;
}
/**
 * @hidden
 */
export declare class CT_ColorStyleVariation extends CT_DMLColorBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_StyleColor extends CT_DMLColorBase implements ISupportSetProperty {
    static $t: Type;
    constructor();
    f: ST_StyleColorVal;
    static e(a: XmlPartManagerBase): CT_StyleColor;
    d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    setProperty(a: ElementPropertyIds, b: any): void;
    toString(): string;
}
/**
 * @hidden
 */
export declare class CT_ColorStyle extends Base {
    static $t: Type;
    constructor();
    d: List$1<CT_DMLColorBase>;
    e: List$1<CT_ColorStyleVariation>;
    c: CT_OfficeArtExtensionList;
    b: ST_ColorStyleMethod;
    f: Nullable$1<number>;
    static h(a: XmlPartManagerBase, b: ST_ColorStyleMethod, c: Nullable$1<number>): {
        p1: ST_ColorStyleMethod;
        p2: Nullable$1<number>;
    };
    static i(a: XmlPartManagerBase, b: string, c: Nullable$1<number>, d: ST_ColorStyleMethod): void;
    static a(): CT_ColorStyle;
    toString(): string;
}
/**
 * @hidden
 */
export declare class ChartStyleExtensions extends Base {
    static $t: Type;
    static b(a: CT_ColorStyle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c(a: CT_ColorStyleVariation, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a(a: CT_ChartStyle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static f(a: CT_StyleEntry, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e(a: CT_MarkerLayout, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static g(a: CT_StyleReference, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d(a: CT_FontReference_ChartStyle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
}
/**
 * @hidden
 */
export declare class ChartDeserializer extends Base {
    static $t: Type;
    static lm(a: ObjectModelChartPartManager): void;
    static by(a: XmlPartManagerBase): void;
    static bx(a: XmlPartManagerBase): void;
    static bz(a: XmlPartManagerBase): void;
    static cn(a: XmlPartManagerBase): void;
    static e9(a: XmlPartManagerBase): void;
    static io(a: XmlPartManagerBase): void;
    static ka(a: XmlPartManagerBase): void;
    static b3(a: XmlPartManagerBase): void;
    static hq(a: XmlPartManagerBase): void;
    static hx(a: XmlPartManagerBase): void;
    static bv(a: XmlPartManagerBase): void;
    static j2(a: XmlPartManagerBase): void;
    static kw(a: XmlPartManagerBase): void;
    static dm(a: XmlPartManagerBase): void;
    static hw(a: XmlPartManagerBase): void;
    static k5(a: XmlPartManagerBase): void;
    static dn(a: XmlPartManagerBase): void;
    static dp(a: XmlPartManagerBase): void;
    static dl(a: XmlPartManagerBase): void;
    static gq(a: XmlPartManagerBase): void;
    static d4(a: XmlPartManagerBase): void;
    static bw(a: XmlPartManagerBase): void;
    static cl(a: XmlPartManagerBase): void;
    static d6(a: XmlPartManagerBase): void;
    static i1(a: XmlPartManagerBase): void;
    static k4(a: XmlPartManagerBase): void;
    static kr(a: XmlPartManagerBase): void;
    static ak(a: XmlPartManagerBase): void;
    static hp(a: XmlPartManagerBase): void;
    static la(a: XmlPartManagerBase): void;
    static d3(a: XmlPartManagerBase): void;
    static jn(a: XmlPartManagerBase): void;
    static aq(a: XmlPartManagerBase): void;
    static hr(a: XmlPartManagerBase): void;
    static fj(a: XmlPartManagerBase): void;
    static hs(a: XmlPartManagerBase): void;
    static ct(a: XmlPartManagerBase): void;
    static jb(a: XmlPartManagerBase): void;
    static kv(a: XmlPartManagerBase): void;
    private static n;
    private static k;
    static fb(a: XmlPartManagerBase): void;
    static ha(a: XmlPartManagerBase): void;
    static j9(a: XmlPartManagerBase): void;
    static ii(a: XmlPartManagerBase): void;
    static dr(a: XmlPartManagerBase): void;
    static j6(a: XmlPartManagerBase): void;
    static h5(a: XmlPartManagerBase): void;
    static h3(a: XmlPartManagerBase): void;
    private static l;
    private static g;
    static k6(a: XmlPartManagerBase): void;
    static ba(a: XmlPartManagerBase): void;
    static fu(a: XmlPartManagerBase): void;
    static hb(a: XmlPartManagerBase): void;
    static h2(a: XmlPartManagerBase): void;
    static gr(a: XmlPartManagerBase): void;
    static gw(a: XmlPartManagerBase): void;
    static jv(a: XmlPartManagerBase): void;
    static iw(a: XmlPartManagerBase): void;
    static ju(a: XmlPartManagerBase): void;
    static d1(a: XmlPartManagerBase): void;
    static am(a: XmlPartManagerBase): void;
    static eb(a: XmlPartManagerBase): void;
    static bs(a: XmlPartManagerBase): void;
    static fm(a: XmlPartManagerBase): void;
    static ap(a: XmlPartManagerBase): void;
    static ij(a: XmlPartManagerBase): void;
    static ac(a: XmlPartManagerBase): void;
    static gv(a: XmlPartManagerBase): void;
    static k1(a: XmlPartManagerBase): void;
    static a0(a: XmlPartManagerBase): void;
    static az(a: XmlPartManagerBase): void;
    static dq(a: XmlPartManagerBase): void;
    static b8(a: XmlPartManagerBase): void;
    static iy(a: XmlPartManagerBase): void;
    static j4(a: XmlPartManagerBase): void;
    static ez(a: XmlPartManagerBase): void;
    static kf(a: XmlPartManagerBase): void;
    static ix(a: XmlPartManagerBase): void;
    static hy(a: XmlPartManagerBase): void;
    static kq(a: XmlPartManagerBase): void;
    static i6(a: XmlPartManagerBase): void;
    static b6(a: XmlPartManagerBase): void;
    static e6(a: XmlPartManagerBase): void;
    static ef(a: XmlPartManagerBase): void;
    static s(a: XmlPartManagerBase): void;
    static z(a: XmlPartManagerBase): void;
    static x(a: XmlPartManagerBase): void;
    static e0(a: XmlPartManagerBase): void;
    static e2(a: XmlPartManagerBase): void;
    static e1(a: XmlPartManagerBase): void;
    static iq(a: XmlPartManagerBase): void;
    static is(a: XmlPartManagerBase): void;
    static ir(a: XmlPartManagerBase): void;
    static fv(a: XmlPartManagerBase): void;
    static fx(a: XmlPartManagerBase): void;
    static fw(a: XmlPartManagerBase): void;
    static ic(a: XmlPartManagerBase): void;
    static ie(a: XmlPartManagerBase): void;
    static id(a: XmlPartManagerBase): void;
    static eh(a: XmlPartManagerBase): void;
    static ej(a: XmlPartManagerBase): void;
    static ei(a: XmlPartManagerBase): void;
    static a6(a: XmlPartManagerBase): void;
    static a8(a: XmlPartManagerBase): void;
    static a7(a: XmlPartManagerBase): void;
    static d8(a: XmlPartManagerBase): void;
    static e8(a: XmlPartManagerBase): void;
    static cp(a: XmlPartManagerBase): void;
    static fz(a: XmlPartManagerBase): void;
    static f0(a: XmlPartManagerBase): void;
    static f1(a: XmlPartManagerBase): void;
    static f2(a: XmlPartManagerBase): void;
    static f3(a: XmlPartManagerBase): void;
    static f4(a: XmlPartManagerBase): void;
    static f5(a: XmlPartManagerBase): void;
    static f6(a: XmlPartManagerBase): void;
    static f7(a: XmlPartManagerBase): void;
    static fr(a: XmlPartManagerBase): void;
    static jx(a: XmlPartManagerBase): void;
    static jw(a: XmlPartManagerBase): void;
    static bk(a: XmlPartManagerBase): void;
    static bj(a: XmlPartManagerBase): void;
    static br(a: XmlPartManagerBase): void;
    static bp(a: XmlPartManagerBase): void;
    static bq(a: XmlPartManagerBase): void;
    static bm(a: XmlPartManagerBase): void;
    static bl(a: XmlPartManagerBase): void;
    static bo(a: XmlPartManagerBase): void;
    static bc(a: XmlPartManagerBase): void;
    static bi(a: XmlPartManagerBase): void;
    static bh(a: XmlPartManagerBase): void;
    static ki(a: XmlPartManagerBase): void;
    static cq(a: XmlPartManagerBase): void;
    static jy(a: XmlPartManagerBase): void;
    static jz(a: XmlPartManagerBase): void;
    static a4(a: XmlPartManagerBase): void;
    static t(a: XmlPartManagerBase): void;
    static u(a: XmlPartManagerBase): void;
    static v(a: XmlPartManagerBase): void;
    static w(a: XmlPartManagerBase): void;
    static y(a: XmlPartManagerBase): void;
    static ab(a: XmlPartManagerBase): void;
    static a2(a: XmlPartManagerBase): void;
    static a9(a: XmlPartManagerBase): void;
    static b1(a: XmlPartManagerBase): void;
    static b4(a: XmlPartManagerBase): void;
    static c7(a: XmlPartManagerBase): void;
    static dv(a: XmlPartManagerBase): void;
    static eg(a: XmlPartManagerBase): void;
    static ey(a: XmlPartManagerBase): void;
    static b7(a: XmlPartManagerBase): void;
    static c9(a: XmlPartManagerBase): void;
    static aa(a: XmlPartManagerBase): void;
    static a3(a: XmlPartManagerBase): void;
    static du(a: XmlPartManagerBase): void;
    static ed(a: XmlPartManagerBase): void;
    static e4(a: XmlPartManagerBase): void;
    static g8(a: XmlPartManagerBase): void;
    static h1(a: XmlPartManagerBase): void;
    static ig(a: XmlPartManagerBase): void;
    static ih(a: XmlPartManagerBase): void;
    static js(a: XmlPartManagerBase): void;
    static lf(a: XmlPartManagerBase): void;
    static gt(a: XmlPartManagerBase): void;
    static jt(a: XmlPartManagerBase): void;
    static ee(a: XmlPartManagerBase): void;
    static a5(a: XmlPartManagerBase): void;
    static hg(a: XmlPartManagerBase): void;
    static el(a: XmlPartManagerBase): void;
    static en(a: XmlPartManagerBase): void;
    static fn(a: XmlPartManagerBase): void;
    static he(a: XmlPartManagerBase): void;
    static kp(a: XmlPartManagerBase): void;
    static em(a: XmlPartManagerBase): void;
    static dx(a: XmlPartManagerBase): void;
    static j3(a: XmlPartManagerBase): void;
    static ko(a: XmlPartManagerBase): void;
    static j7(a: XmlPartManagerBase): void;
    static dw(a: XmlPartManagerBase): void;
    static dt(a: XmlPartManagerBase): void;
    static a1(a: XmlPartManagerBase): void;
    static b2(a: XmlPartManagerBase): void;
    static b5(a: XmlPartManagerBase): void;
    static kh(a: XmlPartManagerBase): void;
    static fq(a: XmlPartManagerBase): void;
    static db(a: XmlPartManagerBase): void;
    static da(a: XmlPartManagerBase): void;
    static er(a: XmlPartManagerBase): void;
    static k0(a: XmlPartManagerBase): void;
    static kz(a: XmlPartManagerBase): void;
    static ky(a: XmlPartManagerBase): void;
    static kx(a: XmlPartManagerBase): void;
    static fa(a: XmlPartManagerBase): void;
    static c8(a: XmlPartManagerBase): void;
    static cd(a: XmlPartManagerBase): void;
    static kd(a: XmlPartManagerBase): void;
    static et(a: XmlPartManagerBase): void;
    static eu(a: XmlPartManagerBase): void;
    static hz(a: XmlPartManagerBase): void;
    static cf(a: XmlPartManagerBase): void;
    static im(a: XmlPartManagerBase): void;
    static ay(a: XmlPartManagerBase): void;
    static gm(a: XmlPartManagerBase): void;
    static ep(a: XmlPartManagerBase): void;
    static kj(a: XmlPartManagerBase): void;
    static c5(a: XmlPartManagerBase): void;
    static jr(a: XmlPartManagerBase): void;
    static hv(a: XmlPartManagerBase): void;
    static h7(a: XmlPartManagerBase): void;
    static bb(a: XmlPartManagerBase): void;
    static d2(a: XmlPartManagerBase): void;
    static dc(a: XmlPartManagerBase): void;
    static ip(a: XmlPartManagerBase): void;
    static kg(a: XmlPartManagerBase): void;
    static gd(a: XmlPartManagerBase): void;
    static fd(a: XmlPartManagerBase): void;
    static lg(a: XmlPartManagerBase): void;
    static lj(a: XmlPartManagerBase): void;
    static ld(a: XmlPartManagerBase): void;
    static ev(a: XmlPartManagerBase): void;
    static le(a: XmlPartManagerBase): void;
    static li(a: XmlPartManagerBase): void;
    static lb(a: XmlPartManagerBase): void;
    static eo(a: XmlPartManagerBase): void;
    static ho(a: XmlPartManagerBase): void;
    static e3(a: XmlPartManagerBase): void;
    static ge(a: XmlPartManagerBase): void;
    static cy(a: XmlPartManagerBase): void;
    static ke(a: XmlPartManagerBase): void;
    static jo(a: XmlPartManagerBase): void;
    static cr(a: XmlPartManagerBase): void;
    static gy(a: XmlPartManagerBase): void;
    static cz(a: XmlPartManagerBase): void;
    static jg(a: XmlPartManagerBase): void;
    static jl(a: XmlPartManagerBase): void;
    static i9(a: XmlPartManagerBase): void;
    static jk(a: XmlPartManagerBase): void;
    static jj(a: XmlPartManagerBase): void;
    static i8(a: XmlPartManagerBase): void;
    static i2(a: XmlPartManagerBase): void;
    static ik(a: XmlPartManagerBase): void;
    static ex(a: XmlPartManagerBase): void;
    static il(a: XmlPartManagerBase): void;
    static cs(a: XmlPartManagerBase): void;
    static ia(a: XmlPartManagerBase): void;
    static hi(a: XmlPartManagerBase): void;
    static kk(a: XmlPartManagerBase): void;
    static hk(a: XmlPartManagerBase): void;
    static ae(a: XmlPartManagerBase): void;
    static af(a: XmlPartManagerBase): void;
    static ad(a: XmlPartManagerBase): void;
    static hj(a: XmlPartManagerBase): void;
    static hl(a: XmlPartManagerBase): void;
    static ai(a: XmlPartManagerBase): void;
    static ah(a: XmlPartManagerBase): void;
    static fp(a: XmlPartManagerBase): void;
    static fo(a: XmlPartManagerBase): void;
    static j5(a: XmlPartManagerBase): void;
    static h8(a: XmlPartManagerBase): void;
    static iu(a: XmlPartManagerBase): void;
    static hn(a: XmlPartManagerBase): void;
    static hm(a: XmlPartManagerBase): void;
    static c1(a: XmlPartManagerBase): void;
    static av(a: XmlPartManagerBase): void;
    static au(a: XmlPartManagerBase): void;
    static g4(a: XmlPartManagerBase): void;
    static kc(a: XmlPartManagerBase): void;
    static kb(a: XmlPartManagerBase): void;
    static be(a: XmlPartManagerBase): void;
    static k8(a: XmlPartManagerBase): void;
    static bu(a: XmlPartManagerBase): void;
    static co(a: XmlPartManagerBase): void;
    static i4(a: XmlPartManagerBase): void;
    static c6(a: XmlPartManagerBase): void;
    static ek(a: XmlPartManagerBase): void;
    static k9(a: XmlPartManagerBase): void;
    static i3(a: XmlPartManagerBase): void;
    private static c;
    private static d;
    private static e;
    private static f;
    private static h;
    private static i;
    private static j;
    private static m;
    static c0(a: XmlPartManagerBase): void;
    static c4(a: XmlPartManagerBase): void;
    static an(a: XmlPartManagerBase): void;
    static g6(a: XmlPartManagerBase): void;
    static c3(a: XmlPartManagerBase): void;
    static ks(a: XmlPartManagerBase): void;
    static dd(a: XmlPartManagerBase): void;
    static bt(a: XmlPartManagerBase): void;
    static k7(a: XmlPartManagerBase): void;
    static e7(a: XmlPartManagerBase): void;
    static bd(a: XmlPartManagerBase): void;
    static dj(a: XmlPartManagerBase): void;
    static ku(a: XmlPartManagerBase): void;
    static hh(a: XmlPartManagerBase): void;
    static d7(a: XmlPartManagerBase): void;
    static ar(a: XmlPartManagerBase): void;
    static e5(a: XmlPartManagerBase): void;
    static cv(a: XmlPartManagerBase): void;
    static cu(a: XmlPartManagerBase): void;
    static kt(a: XmlPartManagerBase): void;
    static df(a: XmlPartManagerBase): void;
    static de(a: XmlPartManagerBase): void;
    static dg(a: XmlPartManagerBase): void;
    static gs(a: XmlPartManagerBase): void;
    static ht(a: XmlPartManagerBase): void;
    static gl(a: XmlPartManagerBase): void;
    static g0(a: XmlPartManagerBase): void;
    static gz(a: XmlPartManagerBase): void;
    static gx(a: XmlPartManagerBase): void;
    static d5(a: XmlPartManagerBase): void;
    static gp(a: XmlPartManagerBase): void;
    static j8(a: XmlPartManagerBase): void;
    static go(a: XmlPartManagerBase): void;
    static fy(a: XmlPartManagerBase): void;
    static je(a: XmlPartManagerBase): void;
    static fg(a: XmlPartManagerBase): void;
    static d9(a: XmlPartManagerBase): void;
    static es(a: XmlPartManagerBase): void;
    static k3(a: XmlPartManagerBase): void;
    static jq(a: XmlPartManagerBase): void;
    static ea(a: XmlPartManagerBase): void;
    static k2(a: XmlPartManagerBase): void;
    static c2(a: XmlPartManagerBase): void;
    static h9(a: XmlPartManagerBase): void;
    static iv(a: XmlPartManagerBase): void;
    static lh(a: XmlPartManagerBase): void;
    static lk(a: XmlPartManagerBase): void;
    static d0(a: XmlPartManagerBase): void;
    static ew(a: XmlPartManagerBase): void;
    static aw(a: XmlPartManagerBase): void;
    static g9(a: XmlPartManagerBase): void;
    static i5(a: XmlPartManagerBase): void;
    static i7(a: XmlPartManagerBase): void;
    static g5(a: XmlPartManagerBase): void;
    static j1(a: XmlPartManagerBase): void;
    static j0(a: XmlPartManagerBase): void;
    static ch(a: XmlPartManagerBase): void;
    static i0(a: XmlPartManagerBase): void;
    static iz(a: XmlPartManagerBase): void;
    static lc(a: XmlPartManagerBase): void;
    static at(a: XmlPartManagerBase): void;
    static as(a: XmlPartManagerBase): void;
    static bf(a: XmlPartManagerBase): void;
    static jh(a: XmlPartManagerBase): void;
    static jp(a: XmlPartManagerBase): void;
    static bg(a: XmlPartManagerBase): void;
    static it(a: XmlPartManagerBase): void;
    static ao(a: XmlPartManagerBase): void;
    static f9(a: XmlPartManagerBase): void;
    static gh(a: XmlPartManagerBase): void;
    static ga(a: XmlPartManagerBase): void;
    static gi(a: XmlPartManagerBase): void;
    static kl(a: XmlPartManagerBase): void;
    static b9(a: XmlPartManagerBase): void;
    static cb(a: XmlPartManagerBase): void;
    static cc(a: XmlPartManagerBase): void;
    static ca(a: XmlPartManagerBase): void;
    static gc(a: XmlPartManagerBase): void;
    static gk(a: XmlPartManagerBase): void;
    static cw(a: XmlPartManagerBase): void;
    static ft(a: XmlPartManagerBase): void;
    static g7(a: XmlPartManagerBase): void;
    static gf(a: XmlPartManagerBase): void;
    static gg(a: XmlPartManagerBase): void;
    static ci(a: XmlPartManagerBase): void;
    static bn(a: XmlPartManagerBase): void;
    static cx(a: XmlPartManagerBase): void;
    static aj(a: XmlPartManagerBase): void;
    static fe(a: XmlPartManagerBase): void;
    static ff(a: XmlPartManagerBase): void;
    static km(a: XmlPartManagerBase): void;
    static kn(a: XmlPartManagerBase): void;
    static gu(a: XmlPartManagerBase): void;
    static ax(a: XmlPartManagerBase): void;
    static gb(a: XmlPartManagerBase): void;
    static gj(a: XmlPartManagerBase): void;
    static jc(a: XmlPartManagerBase): void;
    static jm(a: XmlPartManagerBase): void;
    static ji(a: XmlPartManagerBase): void;
    static jd(a: XmlPartManagerBase): void;
    static fl(a: XmlPartManagerBase): void;
    static fk(a: XmlPartManagerBase): void;
    static cg(a: XmlPartManagerBase): void;
    static h0(a: XmlPartManagerBase): void;
    static g3(a: XmlPartManagerBase): void;
    static ec(a: XmlPartManagerBase): void;
    static p(a: XmlPartManagerBase): void;
    static ck(a: XmlPartManagerBase): void;
    static ib(a: XmlPartManagerBase): void;
    static hf(a: XmlPartManagerBase): void;
    static r(a: XmlPartManagerBase): void;
    static q(a: XmlPartManagerBase): void;
    static hu(a: XmlPartManagerBase): void;
    static cj(a: XmlPartManagerBase): void;
    static b0(a: XmlPartManagerBase): void;
    static gn(a: XmlPartManagerBase): void;
    static fs(a: XmlPartManagerBase): void;
    static ag(a: XmlPartManagerBase): void;
    static h6(a: XmlPartManagerBase): void;
    static ce(a: XmlPartManagerBase): void;
    static h4(a: XmlPartManagerBase): void;
    static al(a: XmlPartManagerBase): void;
    static eq(a: XmlPartManagerBase): void;
    static hc(a: XmlPartManagerBase): void;
    static hd(a: XmlPartManagerBase): void;
    static fi(a: XmlPartManagerBase): void;
    static g2(a: XmlPartManagerBase): void;
    static g1(a: XmlPartManagerBase): void;
    static di(a: XmlPartManagerBase): void;
    static dh(a: XmlPartManagerBase): void;
    static dz(a: XmlPartManagerBase): void;
    static dy(a: XmlPartManagerBase): void;
    static dk(a: XmlPartManagerBase): void;
    static jf(a: XmlPartManagerBase): void;
    static ja(a: XmlPartManagerBase): void;
    static fh(a: XmlPartManagerBase): void;
    static fc(a: XmlPartManagerBase): void;
    static cm(a: XmlPartManagerBase): void;
    static ds(a: XmlPartManagerBase): void;
    b: Workbook;
    o: string;
    private static a;
    private static ll;
    static f8(a: XmlPartManagerBase, b: ElementPropertyIds): void;
}
/**
 * @hidden
 */
export declare class ChartExDeserializer extends Base {
    static $t: Type;
    constructor(a: ObjectModelChartExPartManager);
    static h1(a: ObjectModelChartExPartManager): void;
    static bb(a: XmlPartManagerBase): void;
    static bc(a: XmlPartManagerBase): void;
    static ba(a: XmlPartManagerBase): void;
    static a9(a: XmlPartManagerBase): void;
    static g1(a: XmlPartManagerBase): void;
    static hl(a: XmlPartManagerBase): void;
    static bh(a: XmlPartManagerBase): void;
    static cv(a: XmlPartManagerBase): void;
    static fy(a: XmlPartManagerBase): void;
    static cg(a: XmlPartManagerBase): void;
    static cf(a: XmlPartManagerBase): void;
    static bv(a: XmlPartManagerBase): void;
    static ff(a: XmlPartManagerBase): void;
    static g5(a: XmlPartManagerBase): void;
    static ck(a: XmlPartManagerBase): void;
    static e9(a: XmlPartManagerBase): void;
    static en(a: XmlPartManagerBase): void;
    static f4(a: XmlPartManagerBase): void;
    static hi(a: XmlPartManagerBase): void;
    static ft(a: XmlPartManagerBase): void;
    static ed(a: XmlPartManagerBase): void;
    static hj(a: XmlPartManagerBase): void;
    static hk(a: XmlPartManagerBase): void;
    static gf(a: XmlPartManagerBase): void;
    static ht(a: XmlPartManagerBase): void;
    static au(a: XmlPartManagerBase): void;
    static ej(a: XmlPartManagerBase): void;
    static fl(a: XmlPartManagerBase): void;
    static f3(a: XmlPartManagerBase): void;
    static fa(a: XmlPartManagerBase): void;
    static fd(a: XmlPartManagerBase): void;
    static gw(a: XmlPartManagerBase): void;
    static gm(a: XmlPartManagerBase): void;
    static gv(a: XmlPartManagerBase): void;
    static cs(a: XmlPartManagerBase): void;
    static ch(a: XmlPartManagerBase): void;
    static ab(a: XmlPartManagerBase): void;
    static cx(a: XmlPartManagerBase): void;
    static a7(a: XmlPartManagerBase): void;
    static ee(a: XmlPartManagerBase): void;
    static ae(a: XmlPartManagerBase): void;
    static gg(a: XmlPartManagerBase): void;
    static z(a: XmlPartManagerBase): void;
    static fc(a: XmlPartManagerBase): void;
    static hs(a: XmlPartManagerBase): void;
    static ah(a: XmlPartManagerBase): void;
    static ag(a: XmlPartManagerBase): void;
    static cj(a: XmlPartManagerBase): void;
    static bm(a: XmlPartManagerBase): void;
    static go(a: XmlPartManagerBase): void;
    static g3(a: XmlPartManagerBase): void;
    static d3(a: XmlPartManagerBase): void;
    static g9(a: XmlPartManagerBase): void;
    static gn(a: XmlPartManagerBase): void;
    static fz(a: XmlPartManagerBase): void;
    static hh(a: XmlPartManagerBase): void;
    static gr(a: XmlPartManagerBase): void;
    static bk(a: XmlPartManagerBase): void;
    static d9(a: XmlPartManagerBase): void;
    static dp(a: XmlPartManagerBase): void;
    static p(a: XmlPartManagerBase): void;
    static w(a: XmlPartManagerBase): void;
    static u(a: XmlPartManagerBase): void;
    static d4(a: XmlPartManagerBase): void;
    static d6(a: XmlPartManagerBase): void;
    static d5(a: XmlPartManagerBase): void;
    static gj(a: XmlPartManagerBase): void;
    static gl(a: XmlPartManagerBase): void;
    static gk(a: XmlPartManagerBase): void;
    static ek(a: XmlPartManagerBase): void;
    static em(a: XmlPartManagerBase): void;
    static el(a: XmlPartManagerBase): void;
    static f9(a: XmlPartManagerBase): void;
    static gb(a: XmlPartManagerBase): void;
    static ga(a: XmlPartManagerBase): void;
    static dr(a: XmlPartManagerBase): void;
    static dt(a: XmlPartManagerBase): void;
    static ds(a: XmlPartManagerBase): void;
    static aq(a: XmlPartManagerBase): void;
    static as(a: XmlPartManagerBase): void;
    static ar(a: XmlPartManagerBase): void;
    static cw(a: XmlPartManagerBase): void;
    static ea(a: XmlPartManagerBase): void;
    static ce(a: XmlPartManagerBase): void;
    static b1(a: XmlPartManagerBase): void;
    static eo(a: XmlPartManagerBase): void;
    static ep(a: XmlPartManagerBase): void;
    static eq(a: XmlPartManagerBase): void;
    static er(a: XmlPartManagerBase): void;
    static es(a: XmlPartManagerBase): void;
    static et(a: XmlPartManagerBase): void;
    static eu(a: XmlPartManagerBase): void;
    static ev(a: XmlPartManagerBase): void;
    static ew(a: XmlPartManagerBase): void;
    static eh(a: XmlPartManagerBase): void;
    static gy(a: XmlPartManagerBase): void;
    static gx(a: XmlPartManagerBase): void;
    static a0(a: XmlPartManagerBase): void;
    static az(a: XmlPartManagerBase): void;
    static a6(a: XmlPartManagerBase): void;
    static a4(a: XmlPartManagerBase): void;
    static a5(a: XmlPartManagerBase): void;
    static a2(a: XmlPartManagerBase): void;
    static a1(a: XmlPartManagerBase): void;
    static a3(a: XmlPartManagerBase): void;
    static aw(a: XmlPartManagerBase): void;
    static ay(a: XmlPartManagerBase): void;
    static ax(a: XmlPartManagerBase): void;
    static hc(a: XmlPartManagerBase): void;
    static b2(a: XmlPartManagerBase): void;
    static gz(a: XmlPartManagerBase): void;
    static g0(a: XmlPartManagerBase): void;
    static ao(a: XmlPartManagerBase): void;
    static q(a: XmlPartManagerBase): void;
    static r(a: XmlPartManagerBase): void;
    static s(a: XmlPartManagerBase): void;
    static t(a: XmlPartManagerBase): void;
    static v(a: XmlPartManagerBase): void;
    static y(a: XmlPartManagerBase): void;
    static aj(a: XmlPartManagerBase): void;
    static at(a: XmlPartManagerBase): void;
    static bf(a: XmlPartManagerBase): void;
    static bi(a: XmlPartManagerBase): void;
    static b4(a: XmlPartManagerBase): void;
    static cn(a: XmlPartManagerBase): void;
    static dq(a: XmlPartManagerBase): void;
    static d2(a: XmlPartManagerBase): void;
    static bl(a: XmlPartManagerBase): void;
    static b6(a: XmlPartManagerBase): void;
    static x(a: XmlPartManagerBase): void;
    static an(a: XmlPartManagerBase): void;
    static cm(a: XmlPartManagerBase): void;
    static dm(a: XmlPartManagerBase): void;
    static d8(a: XmlPartManagerBase): void;
    static fk(a: XmlPartManagerBase): void;
    static f2(a: XmlPartManagerBase): void;
    static gc(a: XmlPartManagerBase): void;
    static ge(a: XmlPartManagerBase): void;
    static gt(a: XmlPartManagerBase): void;
    static hy(a: XmlPartManagerBase): void;
    static fb(a: XmlPartManagerBase): void;
    static gu(a: XmlPartManagerBase): void;
    static dn(a: XmlPartManagerBase): void;
    static ap(a: XmlPartManagerBase): void;
    static fr(a: XmlPartManagerBase): void;
    static du(a: XmlPartManagerBase): void;
    static dw(a: XmlPartManagerBase): void;
    static ef(a: XmlPartManagerBase): void;
    static fp(a: XmlPartManagerBase): void;
    static hg(a: XmlPartManagerBase): void;
    static dv(a: XmlPartManagerBase): void;
    static cp(a: XmlPartManagerBase): void;
    static g2(a: XmlPartManagerBase): void;
    static hf(a: XmlPartManagerBase): void;
    static g6(a: XmlPartManagerBase): void;
    static co(a: XmlPartManagerBase): void;
    static cl(a: XmlPartManagerBase): void;
    static ai(a: XmlPartManagerBase): void;
    static bg(a: XmlPartManagerBase): void;
    static bj(a: XmlPartManagerBase): void;
    static hb(a: XmlPartManagerBase): void;
    static eg(a: XmlPartManagerBase): void;
    static b8(a: XmlPartManagerBase): void;
    static b7(a: XmlPartManagerBase): void;
    static dz(a: XmlPartManagerBase): void;
    static hp(a: XmlPartManagerBase): void;
    static ho(a: XmlPartManagerBase): void;
    static hn(a: XmlPartManagerBase): void;
    static hm(a: XmlPartManagerBase): void;
    static eb(a: XmlPartManagerBase): void;
    static b5(a: XmlPartManagerBase): void;
    static bp(a: XmlPartManagerBase): void;
    static g8(a: XmlPartManagerBase): void;
    static d0(a: XmlPartManagerBase): void;
    static d1(a: XmlPartManagerBase): void;
    static f0(a: XmlPartManagerBase): void;
    static br(a: XmlPartManagerBase): void;
    static gh(a: XmlPartManagerBase): void;
    static af(a: XmlPartManagerBase): void;
    static e7(a: XmlPartManagerBase): void;
    static dx(a: XmlPartManagerBase): void;
    static hd(a: XmlPartManagerBase): void;
    static b3(a: XmlPartManagerBase): void;
    static gs(a: XmlPartManagerBase): void;
    static fx(a: XmlPartManagerBase): void;
    static f7(a: XmlPartManagerBase): void;
    static av(a: XmlPartManagerBase): void;
    static ct(a: XmlPartManagerBase): void;
    static b9(a: XmlPartManagerBase): void;
    static gi(a: XmlPartManagerBase): void;
    static ha(a: XmlPartManagerBase): void;
    static fu(a: XmlPartManagerBase): void;
    static ac(a: XmlPartManagerBase): void;
    static fv(a: XmlPartManagerBase): void;
    static gq(a: XmlPartManagerBase): void;
    static hw(a: XmlPartManagerBase): void;
    static hv(a: XmlPartManagerBase): void;
    static b0(a: XmlPartManagerBase): void;
    static bz(a: XmlPartManagerBase): void;
    static bw(a: XmlPartManagerBase): void;
    static ec(a: XmlPartManagerBase): void;
    static ad(a: XmlPartManagerBase): void;
    static e4(a: XmlPartManagerBase): void;
    static e2(a: XmlPartManagerBase): void;
    static e0(a: XmlPartManagerBase): void;
    static e3(a: XmlPartManagerBase): void;
    static e1(a: XmlPartManagerBase): void;
    static ez(a: XmlPartManagerBase): void;
    static ci(a: XmlPartManagerBase): void;
    static fe(a: XmlPartManagerBase): void;
    static fs(a: XmlPartManagerBase): void;
    static fg(a: XmlPartManagerBase): void;
    static hx(a: XmlPartManagerBase): void;
    static gp(a: XmlPartManagerBase): void;
    static bx(a: XmlPartManagerBase): void;
    static by(a: XmlPartManagerBase): void;
    static fo(a: XmlPartManagerBase): void;
    static gd(a: XmlPartManagerBase): void;
    static l(a: XmlPartManagerBase): void;
    static al(a: XmlPartManagerBase): void;
    static dd(a: XmlPartManagerBase): void;
    static g4(a: XmlPartManagerBase): void;
    static g7(a: XmlPartManagerBase): void;
    static am(a: XmlPartManagerBase): void;
    static ak(a: XmlPartManagerBase): void;
    static cz(a: XmlPartManagerBase): void;
    static bd(a: XmlPartManagerBase): void;
    static di(a: XmlPartManagerBase): void;
    static c8(a: XmlPartManagerBase): void;
    static dc(a: XmlPartManagerBase): void;
    static c3(a: XmlPartManagerBase): void;
    static dh(a: XmlPartManagerBase): void;
    static dg(a: XmlPartManagerBase): void;
    static dj(a: XmlPartManagerBase): void;
    static df(a: XmlPartManagerBase): void;
    static k(a: XmlPartManagerBase): void;
    static c7(a: XmlPartManagerBase): void;
    static c6(a: XmlPartManagerBase): void;
    static c5(a: XmlPartManagerBase): void;
    static dl(a: XmlPartManagerBase): void;
    static bo(a: XmlPartManagerBase): void;
    static dk(a: XmlPartManagerBase): void;
    static bn(a: XmlPartManagerBase): void;
    static db(a: XmlPartManagerBase): void;
    static c9(a: XmlPartManagerBase): void;
    static da(a: XmlPartManagerBase): void;
    static c2(a: XmlPartManagerBase): void;
    static c1(a: XmlPartManagerBase): void;
    static c0(a: XmlPartManagerBase): void;
    static c4(a: XmlPartManagerBase): void;
    static ca(a: XmlPartManagerBase): void;
    static de(a: XmlPartManagerBase): void;
    static d7(a: XmlPartManagerBase): void;
    static a8(a: XmlPartManagerBase): void;
    static hu(a: XmlPartManagerBase): void;
    static hq(a: XmlPartManagerBase): void;
    static ex(a: XmlPartManagerBase): void;
    static e5(a: XmlPartManagerBase): void;
    static ey(a: XmlPartManagerBase): void;
    static e6(a: XmlPartManagerBase): void;
    static he(a: XmlPartManagerBase): void;
    static hr(a: XmlPartManagerBase): void;
    static bs(a: XmlPartManagerBase): void;
    static f1(a: XmlPartManagerBase): void;
    static fj(a: XmlPartManagerBase): void;
    static cy(a: XmlPartManagerBase): void;
    static m(a: XmlPartManagerBase): void;
    static bu(a: XmlPartManagerBase): void;
    static f8(a: XmlPartManagerBase): void;
    static fq(a: XmlPartManagerBase): void;
    static o(a: XmlPartManagerBase): void;
    static n(a: XmlPartManagerBase): void;
    static fw(a: XmlPartManagerBase): void;
    static bt(a: XmlPartManagerBase): void;
    static be(a: XmlPartManagerBase): void;
    static e8(a: XmlPartManagerBase): void;
    static ei(a: XmlPartManagerBase): void;
    static aa(a: XmlPartManagerBase): void;
    static f6(a: XmlPartManagerBase): void;
    static bq(a: XmlPartManagerBase): void;
    static f5(a: XmlPartManagerBase): void;
    static cu(a: XmlPartManagerBase): void;
    static dy(a: XmlPartManagerBase): void;
    static fm(a: XmlPartManagerBase): void;
    static fn(a: XmlPartManagerBase): void;
    static fi(a: XmlPartManagerBase): void;
    static fh(a: XmlPartManagerBase): void;
    static cc(a: XmlPartManagerBase): void;
    static cb(a: XmlPartManagerBase): void;
    static cr(a: XmlPartManagerBase): void;
    static cq(a: XmlPartManagerBase): void;
    static cd(a: XmlPartManagerBase): void;
    d: Workbook;
    h: string;
    private static c;
    private static h0;
    private static f;
    private static i;
    private static g;
    private static hz;
    static e(a: ChartType): boolean;
    static b(a: CT_Binning): CategoryAxisBinning;
    static a(a: CT_SeriesLayoutProperties): BoxAndWhiskerSettings;
    static j(a: Series): void;
}
/**
 * @hidden
 */
export declare class ChartSerializer extends Base {
    static $t: Type;
    constructor(a: Sheet);
    bc: Sheet;
    bx(a: WorksheetChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    static by(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: Sheet, e: string, f: ElementPosition, g: number, h: number, i: number, j: number, k?: boolean): void;
    private static bz;
    private static bm;
    private static bn;
    private static bg;
    private static be;
    private static bl;
    private static bo;
    private static bv;
    private static bw;
    private static bp;
    private static as;
    private static y;
    private static o;
    private static q;
    private static r;
    private static p;
    private static n;
    private static s;
    private static a1;
    private static a0;
    private static bq;
    private static br;
    private static j;
    private static i;
    private static h;
    private static z;
    private static ak;
    private static aa;
    private static c;
    private static b;
    private static ap;
    private static al;
    private static aj;
    private static v;
    private static an;
    private static l;
    private static au;
    private static at;
    private static ar;
    private static bu;
    private static b0;
    private static bf;
    private static bi;
    static k(a: WorksheetChart, b: Series, c: number, d: boolean, e: WorkbookSaveManagerExcel2007): CT_BarSer;
    static ab(a: WorksheetChart, b: Series, c: number, d: WorkbookSaveManagerExcel2007): CT_LineSer;
    static d(a: WorksheetChart, b: Series, c: number, d: WorkbookSaveManagerExcel2007): CT_AreaSer;
    static am(a: WorksheetChart, b: Series, c: number, d: WorkbookSaveManagerExcel2007): CT_PieSer;
    static aq(a: WorksheetChart, b: Series, c: Series, d: number, e: WorkbookSaveManagerExcel2007, f?: boolean): CT_ScatterSer;
    static ao(a: WorksheetChart, b: Series, c: number, d: WorkbookSaveManagerExcel2007): CT_RadarSer;
    private static m;
    private static av;
    private static bh;
    private static g;
    private static bt;
    private static bs;
    static a(a: IChartObject, b: number): ChartSolidFill;
    private static w;
    private static e;
    private static f;
    private static ad;
    private static ae;
    private static af;
    static ai(a: any[]): CT_NumRef;
    static a6(a: Sheet, b: ChartSolidFill): CT_SolidColorFillProperties;
    static a2(a: Sheet, b: ChartGradientFill): CT_GradientFillProperties;
    static bd(a: Sheet, b: ChartEmptyFill): CT_NoFillProperties;
    static x(a: Sheet, b: ElementPosition, c: number, d: number, e: Nullable$1<number>, f: Nullable$1<number>, g?: boolean, h?: boolean): CT_Layout;
    private static ba;
    static a9(a: Sheet, b: number, c: Nullable$1<TextHorizontalOverflow>, d: Nullable$1<TextVerticalOverflow>, e: TextDirection, f: boolean, g: Nullable$1<VerticalTitleAlignment>): CT_TextBodyProperties_DML;
    static ay(a: Sheet, b: CT_TextBodyProperties_DML, c: IWorkbookFont, d: ChartFillBase, e: FormattedString, f: ReadingOrder, g: SingleTargetFormula): CT_Tx;
    static a7(a: CT_TextBodyProperties_DML, b: IWorkbookFont, c: FormattedString, d: ReadingOrder, e: Sheet, f?: ChartFillBase, g?: boolean): CT_TextBody_DML;
    static a8(a: Sheet, b: CT_TextBodyProperties_DML, c: IWorkbookFont, d: ChartFillBase, e: ReadingOrder): CT_TextBody_DML;
    static bb(a: Sheet, b: IWorkbookFont, c: ReadingOrder): CT_TextParagraphProperties_DML;
    static a3(a: Sheet, b: ChartBorder): CT_LineProperties_DML;
    static a4(a: Sheet, b: ChartLineBase, c: Nullable$1<BorderLineStyle>): CT_LineProperties_DML;
    static a5(a: Sheet, b: ChartFillBase, c: ChartLineBase, d: Nullable$1<BorderLineStyle>): CT_ShapeProperties_DML;
    static aw(a: Sheet, b: ChartTitle): CT_Title;
    static ax(a: Sheet, b: Trendline): CT_Trendline;
    static bj(a: Sheet, b: Series): List$1<CT_Trendline>;
    static u(a: Sheet, b: Series): CT_DLbls;
    static t(a: DataLabel, b: Series, c: number, d: Sheet): CT_DLbl;
    static ac(a: Sheet, b: MarkerStyle, c: Nullable$1<number>, d: ChartFillBase, e: ChartBorder, f: Nullable$1<ChartType>): CT_Marker_Chart;
    static ag(a: ChartLabelBase): CT_NumFmt_Chart;
    static ah(a: string, b: boolean, c?: boolean): CT_NumFmt_Chart;
    static az(a: UpDownBars, b: Sheet): CT_UpDownBars;
    static bk(a: List$1<Axis>, b?: Nullable$1<AxisGroup>, c?: boolean): List$1<CT_UnsignedInt>;
}
/**
 * @hidden
 */
export declare class ChartExSerializer extends Base {
    static $t: Type;
    constructor(a: Sheet);
    k: Sheet;
    p(a: WorksheetChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager): void;
    private static l;
    private static h;
    private static q;
    private static m;
    private static g;
    private static d;
    private static e;
    private static i;
    private static c;
    static a(a: ChartTitle, b: Sheet): CT_AxisTitle;
    private static o;
    private static n;
    private static b;
    private static j;
    static f(a: Legend, b: Sheet): CT_LegendEx;
    private static r;
}
/**
 * @hidden
 */
export declare class ComboChartSerializer extends Base {
    static $t: Type;
    static e(a: SeriesCollection): IEnumerable$1<SeriesGroup>;
    static g(a: WorksheetChart, b: Sheet, c: List$1<Axis>, d: CT_PlotArea, e: SeriesGroup, f: WorkbookSaveManagerExcel2007): void;
    private static d;
    private static c;
    static a(a: ChartType): ChartType;
    private static f;
    static b(a: SeriesChartTypeGroup): SeriesType;
}
/**
 * @hidden
 */
export declare class ChartSerializerExtensions extends Base {
    static $t: Type;
    static a(a: EG_DLblShared, b: DataLabel, c: Series, d: Sheet): void;
    static a6(a: CT_PictureOptions, b: Series): void;
    static a5(a: CT_PictureOptions, b: Series): void;
    static a4(a: CT_PictureOptions, b: DataPoint): void;
    static a3<T extends EG_FillPropertiesBase>($t: Type, a: T, b: ChartFillBase, c: Sheet): void;
    static s(a: CT_Layout, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aa(a: CT_ManualLayout, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static t(a: CT_LayoutMode, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static u(a: CT_LayoutTarget, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ax(a: CT_TextLanguageID, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static k(a: CT_ChartSpace, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string, f?: boolean): void;
    static i(a: CT_Chart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static m(a: CT_DispBlanksAs, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static v(a: CT_Legend, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static w(a: CT_LegendEntry, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static x(a: CT_LegendPos, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static at(a: CT_Surface, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static af(a: CT_PictureFormat, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ag(a: CT_PictureStackUnit, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aj(a: CT_PlotArea, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static e(a: CT_BarChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static z(a: CT_LineChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static c(a: CT_AreaChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ai(a: CT_PieChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static n(a: CT_DoughnutChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static q(a: CT_HoleSize, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static o(a: CT_FirstSliceAng, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static j(a: CT_ChartLines, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static p(a: CT_GapAmount, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ad(a: CT_Overlap, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ay(a: CT_Title, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static az(a: CT_Tx, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a2(a: CT_View3D, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static an(a: CT_RotX, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static r(a: CT_HPercent, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ao(a: CT_RotY, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static l(a: CT_DepthPercent, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ae(a: CT_Perspective, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ak(a: CT_RadarChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static am(a: CT_RadarStyle, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static al(a: CT_RadarSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static f(a: CT_BubbleChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static h(a: CT_BubbleSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static g(a: CT_BubbleScale, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aq(a: CT_SizeRepresents, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static av(a: CT_SurfaceChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static aw(a: CT_SurfaceSer, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static d(a: CT_Bar3DChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static y(a: CT_Line3DChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ah(a: CT_Pie3DChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static au(a: CT_Surface3DChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ab(a: CT_OfPieChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ac(a: CT_OfPieType, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ar(a: CT_SplitType, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static b(a: CT_Area3DChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static ap(a: CT_SecondPieSize, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static as(a: CT_StockChart, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a1(a: CT_UpDownBars, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
    static a0(a: CT_UpDownBar, b: XmlPartManagerBase, c: WorkbookSaveManagerExcel2007, d: XmlWriteManager, e: string): void;
}
/**
 * @hidden
 */
export declare class WorksheetChartExtensions extends Base {
    static $t: Type;
    static aq(a: WorksheetChart, b: CT_ChartSpace, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static ap(a: Wall, b: CT_Surface, c: WallType, d: Sheet): void;
    static aa(a: ChartTitle, b: CT_Title, c: CT_Chart, d: IAxis, e: Sheet, f: WorkbookLoadManagerExcel2007): void;
    static ag(a: DisplayUnitLabel, b: CT_DispUnitsLbl, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static ah(a: DisplayUnitLabel, b: CT_ShapeProperties_DML, c: CT_Tx, d: CT_TextBody_DML, e: CT_Layout, f: Sheet, g: WorkbookLoadManagerExcel2007): void;
    static z(a: ChartSeriesLines, b: CT_ChartLines, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static al(a: Trendline, b: CT_Trendline, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static am(a: TrendlineLabel, b: CT_Trendline, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static ab(a: DataLabel, b: CT_DLbl, c: CT_Extension_DataLabels, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    static ac(a: DataLabel, b: CT_DLbls, c: CT_Extension_DataLabels, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    static ad(a: DataLabel, b: EG_DLblShared, c: CT_Tx, d: CT_Extension_DataLabels, e: Sheet, f: WorkbookLoadManagerExcel2007): void;
    static af(a: DataPoint, b: Series, c: CT_DPt, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    static y(a: ChartLineBase, b: CT_ChartLines, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static w(a: ChartDropLines, b: CT_ChartLines, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static x(a: ChartHighLowLines, b: CT_ChartLines, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static ao(a: UpDownBars, b: CT_UpDownBars, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static an(a: UpDownBar, b: CT_UpDownBar, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static ar(a: WorksheetChart, b: CT_ChartSpaceEx, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static aj(a: Series, b: WorksheetChart, c: CT_Series, d: CT_ChartSpaceEx, e: Sheet, f: WorkbookLoadManagerExcel2007, g: Dictionary$2<number, CT_Data>, h: Dictionary$2<number, Axis>, i: Dictionary$2<number, CT_Series>): void;
    static ai(a: Legend, b: CT_LegendEx, c: WorksheetChart, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    static ak(a: SeriesDataLabels, b: ChartExDataLabelBase, c: CT_SeriesLayoutProperties, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    static ae(a: DataLabel, b: ChartExDataLabelBase, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static au(a: DataLabel, b: CT_DataLabelVisibilities, c: Sheet, d: WorkbookLoadManagerExcel2007): void;
    static v(a: Axis, b: CT_Axis, c: CT_ChartSpaceEx, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    static as(a: Axis, b: CT_CategoryAxisScaling, c: CT_ValueAxisScaling, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    static c(a: ChartExTitleBase, b: CT_ChartSpaceEx, c: Sheet, d: WorkbookLoadManagerExcel2007): ChartTitle;
    static ax(a: Axis, b: CT_AxisTitle, c: CT_ChartSpaceEx, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    static ay(a: WorksheetChart, b: CT_ChartTitle, c: CT_ChartSpaceEx, d: Sheet, e: WorkbookLoadManagerExcel2007): void;
    private static h;
    static e(a: CT_ChartSpaceEx, b: List$1<CT_Series>): ChartType;
    static f(a: ST_SeriesLayout): ChartType;
    static i(a: CT_Geography, b: CT_ValueColors, c: CT_ValueColorPositions, d: CT_RegionLabelLayout, e: Sheet): GeographicMapSettings;
    private static aw;
    static l(a: CT_NumFmt_Chart, b: string, c: boolean): {
        ret: boolean;
        p1: string;
        p2: boolean;
    };
    private static az;
    private static m;
    static o(a: List$1<IChart>, b?: boolean): List$1<ISeries>;
    static n(a: CT_PlotArea): List$1<IChart>;
    private static t;
    private static r;
    private static s;
    static at(a: Axis, b: CT_TextBody_DML, c: Workbook, d: boolean): void;
    private static av;
    private static u;
    private static g;
    static p(a: CT_Marker_Chart, b: Sheet, c: ChartFillBase, d: ChartBorder, e: Nullable$1<number>, f: Nullable$1<MarkerStyle>): {
        p2: ChartFillBase;
        p3: ChartBorder;
        p4: Nullable$1<number>;
        p5: Nullable$1<MarkerStyle>;
    };
    private static d;
    private static b;
    private static a;
    private static j;
    private static k;
    static q(a: CT_TextBodyProperties_DML, b: number, c: TextDirection): {
        p1: number;
        p2: TextDirection;
    };
}
/**
 * @hidden
 */
export declare class DeserializedChartInfo extends Base {
    static $t: Type;
    constructor();
    c: Dictionary$2<string, CT_ChartSpace>;
    d: Dictionary$2<string, CT_ChartSpaceEx>;
    f: Dictionary$2<string, CT_ChartStyle>;
    b: CT_StyleMatrix;
    e: Dictionary$2<string, CT_ColorStyle>;
    g: number;
    static a(a: ChartDeserializationCache): DeserializedChartInfo;
}
/**
 * @hidden
 */
export declare class ConditionalFormattingSerializer extends Base {
    static $t: Type;
    private static o;
    private p;
    private s;
    static a(a: Worksheet): ConditionalFormattingSerializer;
    constructor(a: Worksheet);
    m: Worksheet;
    get n(): boolean;
    w(a: WorkbookSaveManagerExcel2007, b: ConditionalFormatCollection): void;
    x(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    y(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d?: boolean): void;
    private l;
    private i;
    private g;
    private b;
    private j;
    private k;
    private f;
    private d;
    private e;
    private h;
    private c;
    static z(a: XmlPartManagerBase, b: XmlWriteManager, c: Worksheet, d: WorkbookColorInfo, e: string): void;
    private aa;
    static ae(a: XmlPartManagerBase, b: XmlWriteManager, c: string): void;
    private static q;
    private static r;
    private t;
    private static v;
    static u(a: number): string;
    static ab(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: Formula): void;
    static ac(a: XmlPartManagerBase, b: XmlWriteManager, c: number): void;
    static ad(a: XmlPartManagerBase, b: XmlWriteManager, c: string): void;
}
/**
 * @hidden
 */
export declare class X14Serializer extends Base {
    static $t: Type;
    static f(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: ConditionX14Wrapper): void;
    static a(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: ColorScaleConditionalFormat, e: string): void;
    static b(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: DataBarConditionalFormat, e: string, f: boolean): void;
    static d(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: IconSetConditionalFormat, e: string): void;
    static e(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: OperatorConditionalFormat, e: string): void;
    static c(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager, d: FormulaConditionalFormat, e: string): void;
}
/**
 * @hidden
 */
export declare class FormatSchemeDeserializer extends Base {
    static $t: Type;
    c: CT_StyleMatrix;
    static cp(a: ObjectModelThemePartManager): void;
    static a0(a: XmlPartManagerBase): void;
    static a1(a: XmlPartManagerBase): void;
    static v(a: XmlPartManagerBase): void;
    static ar(a: XmlPartManagerBase): void;
    static ay(a: XmlPartManagerBase): void;
    static bp(a: XmlPartManagerBase): void;
    static y(a: XmlPartManagerBase): void;
    static a4(a: XmlPartManagerBase): void;
    static ba(a: XmlPartManagerBase): void;
    static bu(a: XmlPartManagerBase): void;
    static by(a: XmlPartManagerBase): void;
    static cg(a: XmlPartManagerBase): void;
    static x(a: XmlPartManagerBase): void;
    static ci(a: XmlPartManagerBase): void;
    static cj(a: XmlPartManagerBase): void;
    static cl(a: XmlPartManagerBase): void;
    static h(a: XmlPartManagerBase): void;
    static i(a: XmlPartManagerBase): void;
    static j(a: XmlPartManagerBase): void;
    static k(a: XmlPartManagerBase): void;
    static l(a: XmlPartManagerBase): void;
    static m(a: XmlPartManagerBase): void;
    static o(a: XmlPartManagerBase): void;
    static w(a: XmlPartManagerBase): void;
    static ac(a: XmlPartManagerBase): void;
    static ae(a: XmlPartManagerBase): void;
    static ag(a: XmlPartManagerBase): void;
    static an(a: XmlPartManagerBase): void;
    static at(a: XmlPartManagerBase): void;
    static aw(a: XmlPartManagerBase): void;
    static a6(a: XmlPartManagerBase): void;
    static be(a: XmlPartManagerBase): void;
    static bq(a: XmlPartManagerBase): void;
    static cn(a: XmlPartManagerBase): void;
    static bf(a: XmlPartManagerBase): void;
    static bz(a: XmlPartManagerBase): void;
    static cc(a: XmlPartManagerBase): void;
    static cd(a: XmlPartManagerBase): void;
    static e(a: XmlPartManagerBase): boolean;
    static f(a: XmlPartManagerBase): boolean;
    static g(a: XmlPartManagerBase): void;
    static n(a: XmlPartManagerBase): void;
    static z(a: XmlPartManagerBase): void;
    static aa(a: XmlPartManagerBase): void;
    static ab(a: XmlPartManagerBase): void;
    static ai(a: XmlPartManagerBase): void;
    static a2(a: XmlPartManagerBase): void;
    static a5(a: XmlPartManagerBase): void;
    static a7(a: XmlPartManagerBase): void;
    static a8(a: XmlPartManagerBase): void;
    static a9(a: XmlPartManagerBase): void;
    static bg(a: XmlPartManagerBase): void;
    static bh(a: XmlPartManagerBase): void;
    static bi(a: XmlPartManagerBase): void;
    static bk(a: XmlPartManagerBase): void;
    static bl(a: XmlPartManagerBase): void;
    static br(a: XmlPartManagerBase): void;
    static bs(a: XmlPartManagerBase): void;
    static b2(a: XmlPartManagerBase): void;
    static b3(a: XmlPartManagerBase): void;
    static b4(a: XmlPartManagerBase): void;
    static b8(a: XmlPartManagerBase): void;
    static b9(a: XmlPartManagerBase): void;
    static ca(a: XmlPartManagerBase): void;
    static ce(a: XmlPartManagerBase): void;
    static aj(a: XmlPartManagerBase): void;
    static af(a: XmlPartManagerBase): void;
    static ah(a: XmlPartManagerBase): void;
    static as(a: XmlPartManagerBase): void;
    static ax(a: XmlPartManagerBase): void;
    static bc(a: XmlPartManagerBase): void;
    static bn(a: XmlPartManagerBase): void;
    static bx(a: XmlPartManagerBase): void;
    static cm(a: XmlPartManagerBase): void;
    static bb(a: XmlPartManagerBase): void;
    static az(a: XmlPartManagerBase): void;
    static u(a: XmlPartManagerBase): void;
    static av(a: XmlPartManagerBase): void;
    static aq(a: XmlPartManagerBase): void;
    static ao(a: XmlPartManagerBase): void;
    static ap(a: XmlPartManagerBase): void;
    static cb(a: XmlPartManagerBase): void;
    static ch(a: XmlPartManagerBase): void;
    static a3(a: XmlPartManagerBase): void;
    static bj(a: XmlPartManagerBase): void;
    static bw(a: XmlPartManagerBase): void;
    static b1(a: XmlPartManagerBase): void;
    static b5(a: XmlPartManagerBase): void;
    static cf(a: XmlPartManagerBase): void;
    static q(a: XmlPartManagerBase): void;
    static ad(a: XmlPartManagerBase): void;
    static bm(a: XmlPartManagerBase): void;
    static p(a: XmlPartManagerBase): void;
    static bv(a: XmlPartManagerBase): void;
    static co(a: XmlPartManagerBase): void;
    static b6(a: XmlPartManagerBase): void;
    static s(a: XmlPartManagerBase): void;
    static t(a: XmlPartManagerBase): void;
    static ak(a: XmlPartManagerBase): void;
    static au(a: XmlPartManagerBase): void;
    static bo(a: XmlPartManagerBase): void;
    static r(a: XmlPartManagerBase): void;
    static al(a: XmlPartManagerBase): void;
    static bd(a: XmlPartManagerBase): void;
    static bt(a: XmlPartManagerBase): void;
    static b0(a: XmlPartManagerBase): void;
    static b7(a: XmlPartManagerBase): void;
    static ck(a: XmlPartManagerBase): void;
    static am(a: XmlPartManagerBase): void;
    static d(a: XmlPartManagerBase): boolean;
    private static b;
    private static a;
}
/**
 * @hidden
 */
export declare class SparklinesSerializer extends Base {
    static $t: Type;
    private a;
    constructor(a: Worksheet);
    b(a: XmlPartManagerBase, b: WorkbookSaveManagerExcel2007, c: XmlWriteManager): void;
    static c(a: XmlPartManagerBase): void;
    static d(a: XmlPartManagerBase, b: string): void;
}
/**
 * @hidden
 */
export declare class ObjectModelChartExPartManager extends ChartExPartManager {
    static $t: Type;
    private bb;
    private bd;
    private bg;
    static readonly ba: ObjectModelChartExPartManager;
    constructor();
    protected u(a: any): WorkItem;
    protected t(): WorkItem$1<any>;
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    get bc(): CT_ChartStyle;
    get be(): CT_ColorStyle;
    get a8(): ObjectModelExcelDocumentManager;
    private static a9;
    bf: CT_ChartSpaceEx;
}
/**
 * @hidden
 */
export declare class ObjectModelChartsheetPartManager extends ChartsheetPartManager {
    static $t: Type;
    static readonly bb: ObjectModelChartsheetPartManager;
    private bd;
    private bc;
    private be;
    private a8;
    constructor();
    protected t(): WorkItem$1<any>;
    protected u(a: any): WorkItem;
    ai(a: string): boolean;
    get a9(): ObjectModelExcelDocumentManager;
    private static ba;
    private static bg;
    private bf;
    private static bi;
    private bh;
    private static bk;
    private bj;
    private static bl;
    private static bn;
    private bm;
    private static bp;
    private bo;
    private static br;
    private bq;
    private static bv;
    private bu;
    private static bw;
    private static bt;
    private bs;
    private static by;
    private bx;
    bz(a: Chartsheet, b: SheetSerializationCache): void;
    private a7;
    private b2;
    private b0;
    private b1;
    private b3;
    private b4;
    private b5;
    private b6;
    private b7;
}
/**
 * @hidden
 */
export declare class ObjectModelActiveXBinaryPartManager extends ActiveXBinaryPartManager {
    static $t: Type;
    static readonly x: ObjectModelActiveXBinaryPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    get v(): ObjectModelExcelDocumentManager;
    private static w;
}
/**
 * @hidden
 */
export declare class ObjectModelActiveXPartManager extends ActiveXPartManager {
    static $t: Type;
    static readonly x: ObjectModelActiveXPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    get v(): ObjectModelExcelDocumentManager;
    private static w;
}
/**
 * @hidden
 */
export declare class ObjectModelChartColorStylePartManager extends ChartColorStylePartManager {
    static $t: Type;
    static readonly a9: ObjectModelChartColorStylePartManager;
    constructor();
    protected get_aj(): boolean;
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    protected u(a: any): WorkItem;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ObjectModelChartPartManager extends ChartPartManager {
    static $t: Type;
    static readonly bb: ObjectModelChartPartManager;
    constructor();
    protected u(a: any): WorkItem;
    protected t(): WorkItem$1<any>;
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    get a9(): ObjectModelExcelDocumentManager;
    private static ba;
    bc: CT_ChartStyle;
    bd: CT_ColorStyle;
    static a8(a: Stream, b: ObjectModelExcelDocumentManager, c: number[]): {
        ret: Excel2007ChartData;
        p2: number[];
    };
}
/**
 * @hidden
 */
export declare class ObjectModelChartStylePartManager extends ChartStylePartManager {
    static $t: Type;
    static readonly a9: ObjectModelChartStylePartManager;
    constructor();
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
    a(): WorkItem$1<any>;
    protected u(a: any): WorkItem;
    b(a: any): WorkItem;
    protected get_aj(): boolean;
}
/**
 * @hidden
 */
export declare class ObjectModelConnectionsPartManager extends ConnectionsPartManager {
    static $t: Type;
    static readonly a9: ObjectModelConnectionsPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    protected u(a: any): WorkItem;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ObjectModelCorePropertiesPartManager extends CorePropertiesPartManager {
    static $t: Type;
    static readonly a9: ObjectModelCorePropertiesPartManager;
    constructor();
    protected u(a: any): WorkItem;
    private static ba;
    private static bb;
    private static bc;
    private static bd;
    private static be;
    private static bf;
    private static bg;
    private static bh;
    private static bi;
    private static bj;
    private static bk;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ObjectModelCtrlPropPartManager extends CtrlPropPartManager {
    static $t: Type;
    static readonly x: ObjectModelCtrlPropPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    get v(): ObjectModelExcelDocumentManager;
    private static w;
}
/**
 * @hidden
 */
export declare class ObjectModelCustomXmlItemPartManager extends CustomXmlItemPartManager {
    static $t: Type;
    static readonly x: ObjectModelCustomXmlItemPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    get v(): ObjectModelExcelDocumentManager;
    private static w;
}
/**
 * @hidden
 */
export declare class ObjectModelCustomXmlItemPropsPartManager extends CustomXmlItemPropsPartManager {
    static $t: Type;
    static readonly x: ObjectModelCustomXmlItemPropsPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    get v(): ObjectModelExcelDocumentManager;
    private static w;
}
/**
 * @hidden
 */
export declare class ObjectModelDrawingPartManager extends DrawingPartManager {
    static $t: Type;
    static readonly bg: ObjectModelDrawingPartManager;
    private bu;
    private bi;
    private br;
    private bq;
    private bh;
    constructor();
    z(a: string): UnknownElementAction;
    protected p(): void;
    protected t(): WorkItem$1<any>;
    ax(a: string, b: string): void;
    protected u(a: any): WorkItem;
    private bz;
    private by;
    private bj;
    private a7;
    private static bx;
    private bp;
    private a8;
    private bk;
    private bl;
    static bn(a: WorkbookColorInfo): CT_SolidFillProperties;
    private bo;
    private static bm;
    private a9;
    private ba;
    private static b0;
    private b1;
    private static b2;
    private static b3;
    private static b4;
    private static b5;
    private b6;
    private static b7;
    private b8;
    private bb;
    private b9;
    private ca;
    private cb;
    private cc;
    private cd;
    private bc;
    private ce;
    private cf;
    private cg;
    private ch;
    private ci;
    private bd;
    private cj;
    private ck;
    get be(): ObjectModelExcelDocumentManager;
    private static bf;
}
/**
 * @hidden
 */
export declare class ObjectModelDrawingPartManager_ShapeLoader extends Base implements IGraphicalObjectContentVisitor$2<ObjectModelDrawingPartManager_ShapeLoadContext, WorksheetShape> {
    static $t: Type;
    readonly d: WorkbookLoadManagerExcel2007;
    private readonly b;
    private readonly c;
    constructor(a: ObjectModelDrawingPartManager);
    _visitAlternateGraphicalObjectContent$i(a: AlternateGraphicalObjectContent, b: ObjectModelDrawingPartManager_ShapeLoadContext): WorksheetShape;
    _visitCT_Connector$i(a: CT_Connector, b: ObjectModelDrawingPartManager_ShapeLoadContext): WorksheetShape;
    _visitCT_GraphicalObjectFrame$i(a: CT_GraphicalObjectFrame, b: ObjectModelDrawingPartManager_ShapeLoadContext): WorksheetShape;
    _visitCT_GroupShape$i(a: CT_GroupShape, b: ObjectModelDrawingPartManager_ShapeLoadContext): WorksheetShape;
    _visitCT_Picture$i(a: CT_Picture, b: ObjectModelDrawingPartManager_ShapeLoadContext): WorksheetShape;
    _visitCT_Shape$i(a: CT_Shape, b: ObjectModelDrawingPartManager_ShapeLoadContext): WorksheetShape;
    private j;
    private k;
    private l;
    private a;
    static g(a: CT_NonVisualBase): boolean;
    static h(a: CT_NonVisualBase): Nullable$1<ST_DrawingElementId>;
    static i(a: CT_NonVisualBase): string;
    private f;
    private e;
}
/**
 * @hidden
 */
export declare class ObjectModelDrawingPartManager_ShapeLoader_RunCreator extends Base implements IEG_TextRunVisitor$2<FormattedTextParagraph, FormattedTextRun> {
    static $t: Type;
    private readonly a;
    private readonly c;
    private readonly b;
    constructor(a: ObjectModelDrawingPartManager, b: WorkbookColorInfo);
    _visitCT_RegularTextRun$i(a: CT_RegularTextRun, b: FormattedTextParagraph): FormattedTextRun;
}
/**
 * @hidden
 */
export declare class ObjectModelDrawingPartManager_ShapeLoader_ShapeFillCreator extends Base implements IEG_FillPropertiesVisitor$2<Workbook, ShapeFill> {
    static $t: Type;
    private readonly a;
    constructor(a: ObjectModelDrawingPartManager_ShapeLoader);
    _visitCT_BlipFillProperties$i(a: CT_BlipFillProperties, b: Workbook): ShapeFill;
    _visitCT_GroupFillProperties$i(a: CT_GroupFillProperties, b: Workbook): ShapeFill;
    _visitCT_NoFillProperties$i(a: CT_NoFillProperties, b: Workbook): ShapeFill;
    _visitCT_SolidFillProperties$i(a: CT_SolidFillProperties, b: Workbook): ShapeFill;
}
/**
 * @hidden
 */
export declare class IEG_ShapeFillVisitor extends Base implements IShapeFillVisitor$2<ObjectModelExcelDocumentManager, IEG_FillProperties> {
    static $t: Type;
    static readonly a: IEG_ShapeFillVisitor;
    _visitImage$i(a: ShapeFillImage, b: ObjectModelExcelDocumentManager): IEG_FillProperties;
    _visitNoFill$i(a: ShapeFillNoFill, b: ObjectModelExcelDocumentManager): IEG_FillProperties;
    _visitSolid$i(a: ShapeFillSolid, b: ObjectModelExcelDocumentManager): IEG_FillProperties;
}
/**
 * @hidden
 */
export declare class CT_ShapeOutlineVisitor extends Base implements IShapeOutlineVisitor$2<ObjectModelExcelDocumentManager, CT_LineProperties> {
    static $t: Type;
    static readonly a: CT_ShapeOutlineVisitor;
    private static b;
    visitNoOutline(outline: ShapeOutlineNoOutline, argument: ObjectModelExcelDocumentManager): CT_LineProperties;
    _visitNoOutline$i(a: ShapeOutlineNoOutline, b: ObjectModelExcelDocumentManager): CT_LineProperties;
    visitSolid(outline: ShapeOutlineSolid, argument: ObjectModelExcelDocumentManager): CT_LineProperties;
    _visitSolid$i(a: ShapeOutlineSolid, b: ObjectModelExcelDocumentManager): CT_LineProperties;
}
/**
 * @hidden
 */
export declare class DefRprFontResolver extends Base implements IWorkbookFontDefaultsResolver {
    static $t: Type;
    private a;
    private d;
    private b;
    constructor(a: CT_TextCharacterProperties, b: Workbook);
    resolveDefaults(a: WorkbookFontData): void;
    private static c;
}
/**
 * @hidden
 */
export declare class ObjectModelExtendedPropertiesPartManager extends ExtendedPropertiesPartManager {
    static $t: Type;
    static readonly a9: ObjectModelExtendedPropertiesPartManager;
    constructor();
    protected u(a: any): WorkItem;
    private static bi;
    private static bh;
    private static bj;
    private static bk;
    private static bl;
    private static bm;
    private static bn;
    private static bo;
    private static bp;
    private static bq;
    private static br;
    private static bs;
    private static bt;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ObjectModelExternalLinkPartManager extends ExternalLinkPartManager {
    static $t: Type;
    static readonly a9: ObjectModelExternalLinkPartManager;
    private ba;
    constructor();
    protected u(a: any): WorkItem;
    private static bb;
    private static bc;
    private static bd;
    private static be;
    private static bf;
    private static bg;
    private static bk;
    private static bh;
    private static bi;
    private static bj;
    private static bl;
    private static bm;
    private static bn;
    private static bo;
    private static bp;
    private bq;
    private br;
    private bs;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare abstract class ObjectModelWorkbookPartManagerBase extends WorkbookPartManagerBase {
    static $t: Type;
    private bh;
    constructor();
    j(): Dictionary$2<PartManagerBase, number>;
    protected t(): WorkItem$1<any>;
    protected u(a: any): WorkItem;
    i(a: PartManagerBase): boolean;
    ai(a: string): boolean;
    private static bi;
    private static bj;
    private static bk;
    private static bl;
    private static bm;
    private static bn;
    private static bo;
    private static bp;
    private static bq;
    private static br;
    private static bt;
    private static bs;
    private static bu;
    private static bv;
    private static bw;
    private static bx;
    private static by;
    private static bz;
    private static b0;
    private static b1;
    private b2;
    private ba;
    private bb;
    private bc;
    private b3;
    private b4;
    private b5;
    private b6;
    private bd;
    private be;
    private b7;
    get bf(): ObjectModelExcelDocumentManager;
    private static bg;
}
/**
 * @hidden
 */
export declare class ObjectModelMacroEnabledTemplatePartManager extends ObjectModelWorkbookPartManagerBase {
    static $t: Type;
    static readonly b8: ObjectModelMacroEnabledTemplatePartManager;
    constructor();
    protected get_m(): string;
    get m(): string;
}
/**
 * @hidden
 */
export declare class ObjectModelMacroEnabledWorkbookPartManager extends ObjectModelWorkbookPartManagerBase {
    static $t: Type;
    static readonly b8: ObjectModelMacroEnabledWorkbookPartManager;
    constructor();
    protected get_m(): string;
    get m(): string;
}
/**
 * @hidden
 */
export declare class ObjectModelPivotCacheDefinitionPartManager extends PivotCacheDefinitionPartManager {
    static $t: Type;
    static readonly a9: ObjectModelPivotCacheDefinitionPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    protected u(a: any): WorkItem;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ObjectModelPivotCacheRecordsPartManager extends PivotCacheRecordsPartManager {
    static $t: Type;
    static readonly a9: ObjectModelPivotCacheRecordsPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    protected u(a: any): WorkItem;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ObjectModelPivotTablePartManager extends PivotTablePartManager {
    static $t: Type;
    static readonly ba: ObjectModelPivotTablePartManager;
    constructor();
    z(a: string): UnknownElementAction;
    aw(a: UnknownStructure): void;
    protected u(a: any): WorkItem;
    y(a: UnknownElementCache, b: Stack$1<UnknownElementCache>): OverwriteRoundTripDataResult;
    private a7;
    private bb;
    private bc;
    get a8(): ObjectModelExcelDocumentManager;
    private static a9;
}
/**
 * @hidden
 */
export declare class ObjectModelSharedStringsPartManager extends SharedStringsPartManager {
    static $t: Type;
    static readonly a9: ObjectModelSharedStringsPartManager;
    constructor();
    protected u(a: any): WorkItem;
    private static ba;
    private static bb;
    private static bc;
    private bd;
    get a7(): ObjectModelExcelDocumentManager;
    private static a8;
}
/**
 * @hidden
 */
export declare class ObjectModelSlicerCachePartManager extends SlicerCachePartManager {
    static $t: Type;
    static readonly a8: ObjectModelSlicerCachePartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    protected u(a: any): WorkItem;
    get a6(): ObjectModelExcelDocumentManager;
    private static a7;
}
/**
 * @hidden
 */
export declare class ObjectModelSlicerPartManager extends SlicerPartManager {
    static $t: Type;
    static readonly a8: ObjectModelSlicerPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    protected u(a: any): WorkItem;
    get a6(): ObjectModelExcelDocumentManager;
    private static a7;
}
/**
 * @hidden
 */
export declare class ObjectModelTemplatePartManager extends ObjectModelWorkbookPartManagerBase {
    static $t: Type;
    static readonly b8: ObjectModelTemplatePartManager;
    constructor();
    protected get_m(): string;
    get m(): string;
}
/**
 * @hidden
 */
export declare class ObjectModelThemeManagerPartManager extends ThemeManagerPartManager {
    static $t: Type;
    static readonly a7: ObjectModelThemeManagerPartManager;
    constructor();
    aw(a: UnknownStructure): void;
    protected u(a: any): WorkItem;
    private static a8;
}
/**
 * @hidden
 */
export declare class ObjectModelThemePartManager extends ThemePartManager {
    static $t: Type;
    static readonly bc: ObjectModelThemePartManager;
    static readonly bd: ObjectModelThemePartManager;
    constructor(a: boolean);
    protected a1(): XmlReader;
    private static bf;
    private static be;
    b(a: any): WorkItem;
    private b2;
    protected u(a: any): WorkItem;
    private static bg;
    private static bh;
    private static bi;
    private static bj;
    private static bk;
    private static bl;
    private static bm;
    private static bn;
    private static bo;
    private static bp;
    private static bq;
    private static br;
    private static bs;
    private static bt;
    private static bu;
    private static bv;
    private static bw;
    private static bx;
    private static by;
    private static bz;
    private static b0;
    private static b1;
    get ba(): ExcelWorkbookDocumentManager;
    private static bb;
}
/**
 * @hidden
 */
export declare class ObjectModelVbaProjectPartManager extends VbaProjectPartManager {
    static $t: Type;
    static readonly x: ObjectModelVbaProjectPartManager;
    constructor();
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    get v(): ObjectModelExcelDocumentManager;
    private static w;
}
/**
 * @hidden
 */
export declare class ObjectModelVmlDrawingPartManager extends VmlDrawingPartManager {
    static $t: Type;
    static readonly bb: ObjectModelVmlDrawingPartManager;
    constructor();
    z(a: string): UnknownElementAction;
    a(): WorkItem$1<any>;
    aw(a: UnknownStructure): void;
    protected u(a: any): WorkItem;
    protected get_aj(): boolean;
    private static bc;
    private static bd;
    private static be;
    private static bf;
    private static bg;
    private static bh;
    private static bi;
    private static bj;
    private static bk;
    private static bl;
    private static bm;
    private static bn;
    private static bo;
    private static bp;
    private static bq;
    private static br;
    private static bs;
    private static bt;
    private static bu;
    private static bv;
    private static bw;
    private static bx;
    private static by;
    private static bz;
    private static b0;
    private static b1;
    private static b2;
    private static b3;
    private static b4;
    private static b5;
    private static b6;
    private static b7;
    private static b8;
    private static b9;
    private static ca;
    private static cb;
    private static cc;
    private static cd;
    private static ce;
    private static cf;
    private static cg;
    private static ch;
    private static ci;
    private cj;
    private ck;
    private cl;
    private cm;
    private cn;
    private co;
    private cp;
    private cq;
    private cr;
    private cs;
    private ct;
    private cu;
    private cv;
    private cw;
    private cx;
    private cy;
    private cz;
    private c0;
    private c1;
    private c2;
    private c4;
    private c5;
    private c3;
    private c6;
    private c7;
    private c8;
    private c9;
    private da;
    private db;
    private dc;
    private dd;
    private de;
    private df;
    private dg;
    private dh;
    private di;
    private dj;
    private dk;
    private dl;
    private dm;
    private dn;
    private dp;
    get a9(): ObjectModelExcelDocumentManager;
    private static ba;
}
/**
 * @hidden
 */
export declare class ObjectModelWorkbookPartManager extends ObjectModelWorkbookPartManagerBase {
    static $t: Type;
    static readonly b8: ObjectModelWorkbookPartManager;
    constructor();
    protected get_m(): string;
    get m(): string;
}
