import { Base, IEnumerable$1, Type, ValueType, IDisposable, Nullable$1, Stream } from "igniteui-react-core";
import { IPackagePart } from "./IPackagePart";
import { OfficeApplication } from "./OfficeApplication";
import { ST_ConformanceClass } from "./ST_ConformanceClass";
import { Stack$1 } from "igniteui-react-core";
import { IPackage } from "./IPackage";
import { IPackageFactory } from "./IPackageFactory";
import { WorkItem } from "./WorkItem";
import { HashSet$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { WorkItem$1 } from "./WorkItem$1";
import { Uri } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { IPackageRelationship } from "./IPackageRelationship";
import { List$1 } from "igniteui-react-core";
import { RoundTripControlData } from "./RoundTripControlData";
import { XmlReader } from "igniteui-react-core";
import { XmlReadManager_AlternateContentStatus } from "./XmlReadManager_AlternateContentStatus";
import { UnknownElementAction } from "./UnknownElementAction";
import { ContextStack } from "./ContextStack";
import { XmlWriter } from "igniteui-react-core";
import { OverwriteRoundTripDataResult } from "./OverwriteRoundTripDataResult";
import { ImageFormat } from "./ImageFormat";
import { ST_FillMethod } from "./ST_FillMethod";
import { XmlNamespaceDefinitionBase_PreserveSpaceMode } from "./XmlNamespaceDefinitionBase_PreserveSpaceMode";
import { ST_Angle } from "./ST_Angle";
import { ST_FixedPercentage } from "./ST_FixedPercentage";
import { ST_LineEndType } from "./ST_LineEndType";
import { ST_LineEndWidth } from "./ST_LineEndWidth";
import { ST_LineEndLength } from "./ST_LineEndLength";
import { ST_DrawingElementId } from "./ST_DrawingElementId";
import { ST_Percentage } from "./ST_Percentage";
import { ST_Coordinate } from "./ST_Coordinate";
import { ST_PositiveFixedAngle } from "./ST_PositiveFixedAngle";
import { ST_PositiveFixedPercentage } from "./ST_PositiveFixedPercentage";
import { ST_PositivePercentage } from "./ST_PositivePercentage";
import { ST_PositiveCoordinate } from "./ST_PositiveCoordinate";
import { ST_Panose } from "./ST_Panose";
import { ST_BlipCompression } from "./ST_BlipCompression";
import { ST_TextVertOverflowType } from "./ST_TextVertOverflowType";
import { ST_TextHorzOverflowType } from "./ST_TextHorzOverflowType";
import { ST_TextVerticalType } from "./ST_TextVerticalType";
import { ST_TextWrappingType } from "./ST_TextWrappingType";
import { ST_Coordinate32 } from "./ST_Coordinate32";
import { ST_TextAnchoringType } from "./ST_TextAnchoringType";
import { ST_FontCollectionIndex } from "./ST_FontCollectionIndex";
import { ST_LineWidth } from "./ST_LineWidth";
import { ST_LineCap } from "./ST_LineCap";
import { ST_CompoundLine } from "./ST_CompoundLine";
import { ST_PenAlignment } from "./ST_PenAlignment";
import { ST_TextMargin } from "./ST_TextMargin";
import { ST_TextIndentLevelType } from "./ST_TextIndentLevelType";
import { ST_TextIndent } from "./ST_TextIndent";
import { ST_TextAlignType } from "./ST_TextAlignType";
import { ST_TextFontAlignType } from "./ST_TextFontAlignType";
import { ST_PresetColorVal } from "./ST_PresetColorVal";
import { ST_ShapeType } from "./ST_ShapeType";
import { ST_TextFontSize } from "./ST_TextFontSize";
import { ST_TextUnderlineType } from "./ST_TextUnderlineType";
import { ST_TextStrikeType } from "./ST_TextStrikeType";
import { ST_TextCapsType } from "./ST_TextCapsType";
import { ST_TextPoint } from "./ST_TextPoint";
import { ST_SchemeColorVal } from "./ST_SchemeColorVal";
import { ST_HexColorRGB } from "./ST_HexColorRGB";
import { ST_SystemColorVal } from "./ST_SystemColorVal";
import { ST_BlackWhiteMode } from "./ST_BlackWhiteMode";
import { ST_VectorBaseType } from "./ST_VectorBaseType";
import { CT_Vector } from "./CT_Vector";
import { ST_Ext } from "./ST_Ext";
import { ST_FillType } from "./ST_FillType";
import { ST_ImageAspect } from "./ST_ImageAspect";
import { ST_ConnectType } from "./ST_ConnectType";
import { ST_ShadowType } from "./ST_ShadowType";
import { ST_HrAlign } from "./ST_HrAlign";
import { ST_InsetMode } from "./ST_InsetMode";
import { ST_ConnectorType } from "./ST_ConnectorType";
import { ST_BWMode } from "./ST_BWMode";
import { ST_StrokeLineStyle } from "./ST_StrokeLineStyle";
import { ST_StrokeJoinStyle } from "./ST_StrokeJoinStyle";
import { ST_StrokeEndCap } from "./ST_StrokeEndCap";
import { ST_StrokeArrowType } from "./ST_StrokeArrowType";
import { ST_StrokeArrowWidth } from "./ST_StrokeArrowWidth";
import { ST_StrokeArrowLength } from "./ST_StrokeArrowLength";
/**
 * @hidden
 */
export declare class AlternateContentChoice extends Base {
    static $t: Type;
    a: () => void;
    b: IEnumerable$1<XmlNamespaceDefinitionBase>;
    constructor(a: number, b: XmlNamespaceDefinitionBase, c: () => void);
    constructor(a: number, b: IEnumerable$1<XmlNamespaceDefinitionBase>, c: () => void);
    constructor(a: number, ..._rest: any[]);
}
/**
 * @hidden
 */
export declare class AttributeValue extends ValueType {
    static $t: Type;
    constructor(a: number, b: string, c: string, d: string, e: string);
    constructor(a: number, b: QualifiedNameInfo, c: string);
    constructor();
    constructor(a: number, ..._rest: any[]);
    a: QualifiedNameInfo;
    d: string;
    toString(): string;
    e(a: string, b: string, c: string, d: string): void;
    get b(): boolean;
    get c(): boolean;
}
/**
 * @hidden
 */
export declare class ElementLoadCallbacks extends ValueType {
    static $t: Type;
    constructor(a: number, b: (arg1: XmlPartManagerBase) => void, c: (arg1: XmlPartManagerBase) => void);
    constructor();
    constructor(a: number, ..._rest: any[]);
    readonly b: (arg1: XmlPartManagerBase) => void;
    readonly a: (arg1: XmlPartManagerBase) => void;
    get c(): boolean;
}
/**
 * @hidden
 */
export declare abstract class OfficeDocumentManager extends Base implements IDisposable {
    static $t: Type;
    private static readonly _a9;
    private static readonly _a8;
    private _c;
    private _ap;
    private readonly _ab;
    private readonly _aj;
    private _al;
    private readonly _ag;
    private readonly _am;
    private readonly _aq;
    private readonly _ah;
    private readonly _ai;
    private _y;
    private _a;
    private readonly _ao;
    _h: RoundTripControlData;
    _i: RoundTripControlData;
    readonly _m: WorkItem;
    constructor(a: IPackageFactory, b: Stream, c: boolean, d: Nullable$1<ST_ConformanceClass>);
    dispose(): void;
    _a0(a: Uri, b: PartManagerBase): string;
    _a1(a: Uri, b: string): string;
    _az(a: Uri, b: string): string;
    _ay(a: string, b: string): string;
    _j(a: PartManagerBase, b?: any, c?: string): WorkItem$1<Tuple$2<Uri, string>>;
    private _k;
    _l(a: string, b: string, c?: any, d?: string): WorkItem$1<Tuple$2<Uri, string>>;
    _a5(): string;
    _u(a: string): XmlNamespaceDefinitionBase;
    _e(a: Uri): IPackagePart;
    _ar(a: IPackagePart): any;
    _as(a: IPackageRelationship): any;
    _bd(a: any): Uri;
    _au(a: string): any;
    _bc<TData>($tData: Type, a: PartManagerBase): Tuple$2<string, TData>;
    _g(a: string): IPackageRelationship;
    _f(a: any): IPackageRelationship;
    _a7(a: ST_ConformanceClass, b: string): string;
    _bh(): void;
    _ad(a: string): boolean;
    _n(): WorkItem;
    _bj(): void;
    private _ax;
    private _av;
    private _aw;
    _bb(a: string): string;
    _r(): WorkItem;
    _bn(a: ST_ConformanceClass): void;
    protected disposeCore(a: boolean): void;
    protected abstract _aa(): ST_ConformanceClass;
    protected _o(): WorkItem;
    protected _bi(a: IPackagePart): void;
    protected _bk(a: XmlNamespaceDefinitionBase): void;
    protected _bl(a: PartManagerBase, b?: boolean): void;
    protected abstract _s(): WorkItem;
    private _a2;
    private _be;
    static _a3(a: number): string;
    private _ak;
    _a4(): string;
    private _a6;
    private _at;
    private _w;
    private _x;
    private _ae;
    private _p;
    private _q;
    private _bm;
    get _d(): IPackagePart;
    abstract get _v(): OfficeApplication;
    get _z(): ST_ConformanceClass;
    get _ac(): boolean;
    _af: boolean;
    get _an(): Stack$1<IPackagePart>;
    abstract get _t(): DrawingNamespaceDefinitionBase;
    get _b(): IPackage;
}
/**
 * @hidden
 */
export declare class QualifiedNameInfo extends ValueType {
    static $t: Type;
    constructor(a: number, b: string, c: string, d: string);
    constructor();
    constructor(a: number, ..._rest: any[]);
    static readonly a: QualifiedNameInfo;
    h: string;
    g: string;
    f: string;
    toString(): string;
    private static d;
    e(a: OfficeDocumentManager): string;
    i(a: string, b: string, c: string): void;
    b(a: OfficeDocumentManager): QualifiedNameInfo;
    get c(): boolean;
}
/**
 * @hidden
 */
export declare class UnknownElementCache extends Base {
    static $t: Type;
    private h;
    private i;
    private readonly a;
    private m;
    private o;
    constructor(a: QualifiedNameInfo, b: string);
    l(a: string, b: OfficeDocumentManager): Nullable$1<AttributeValue>;
    c(a: string, b: OfficeDocumentManager): UnknownElementCache;
    f(a: string, b: OfficeDocumentManager): IEnumerable$1<UnknownElementCache>;
    private _g;
    g(a: string, b: OfficeDocumentManager): IEnumerable$1<UnknownElementCache>;
    get j(): List$1<AttributeValue>;
    get d(): boolean;
    get k(): List$1<UnknownElementCache>;
    get e(): boolean;
    get b(): QualifiedNameInfo;
    get n(): any;
    set n(a: any);
    get p(): string;
    set p(a: string);
}
/**
 * @hidden
 */
export declare class UnknownStructure extends Base {
    static $t: Type;
    private readonly a;
    constructor(a: UnknownElementCache);
    get b(): UnknownElementCache;
}
/**
 * @hidden
 */
export declare class XmlReadManager extends Base {
    static $t: Type;
    readonly u: List$1<AttributeValue>;
    ab: number;
    k: QualifiedNameInfo;
    ad: string;
    private readonly v;
    private z;
    private m;
    private b;
    private readonly i;
    readonly j: XmlPartManagerBase;
    private readonly ao;
    private aa;
    private w;
    private x;
    private readonly a;
    private y;
    constructor(a: XmlPartManagerBase, b: XmlReader);
    q(a: string): boolean;
    r(a: string): boolean;
    d(): WorkItem;
    private f;
    private e;
    ae(a: string): string;
    aj(): void;
    an(): void;
    private ah;
    private c;
    private o;
    private p;
    private ai;
    private t;
    private l;
    private ak;
    private al;
    private am;
    ag(a: string): string;
    private g;
    private h;
    get n(): UnknownElementCache;
    get s(): boolean;
    get af(): string;
}
/**
 * @hidden
 */
export declare class XmlReadManager_ElementContext extends ValueType {
    static $t: Type;
    constructor(a: number, b: XmlReadManager);
    constructor();
    constructor(a: number, ..._rest: any[]);
    readonly e: number;
    readonly f: any;
    private c;
    b: boolean;
    a(a: string): boolean;
    get d(): HashSet$1<string>;
}
/**
 * @hidden
 */
export declare class XmlReadManager_LoadChildContext extends ValueType {
    static $t: Type;
    constructor();
    h: number;
    c: XmlReadManager_AlternateContentStatus;
    b: QualifiedNameInfo;
    a: ElementLoadCallbacks;
    g: boolean;
    f: boolean;
    e: boolean;
    d: boolean;
}
/**
 * @hidden
 */
export declare class XmlReadManager_LoadFastContext extends ValueType {
    static $t: Type;
    constructor();
    c: number;
    b: QualifiedNameInfo;
    a: ElementLoadCallbacks;
}
/**
 * @hidden
 */
export declare class XmlWriteManager extends Base {
    static $t: Type;
    private readonly a;
    private readonly c;
    private readonly b;
    private readonly w;
    constructor(a: XmlPartManagerBase, b: XmlWriter);
    d(a: XmlNamespaceDefinitionBase): string;
    private e;
    private f;
    g(a: IEnumerable$1<AlternateContentChoice>, b?: () => void, c?: boolean): void;
    h(a: string, b: string): void;
    i(a: string, b: string, c: string, d: string): void;
    j(a: string, b: string): void;
    k(): void;
    o(a: string): void;
    p(a: string, b: string): void;
    q(a: string, b: string, c: string): void;
    r(a: string): void;
    l(a: XmlNamespaceDefinitionBase, b?: boolean): void;
    private m;
    n(a: string): void;
    t(a: UnknownStructure): void;
    private s;
    u(a: string): void;
    v(a: string, b: string, c: string): void;
}
/**
 * @hidden
 */
export declare abstract class PartManagerBase extends Base {
    static $t: Type;
    private c;
    private k;
    constructor();
    abstract a(): WorkItem$1<any>;
    abstract b(a: any): WorkItem;
    e(a: OfficeDocumentManager, b: Stream): PartManagerBase;
    j(): Dictionary$2<PartManagerBase, number>;
    abstract n(a: OfficeApplication): string;
    f(a: IPackagePart, b: IPackageRelationship): PartManagerBase;
    abstract o(a: ST_ConformanceClass): string;
    protected p(): void;
    q(): void;
    i(a: PartManagerBase): boolean;
    abstract get m(): string;
    get d(): OfficeDocumentManager;
    abstract get g(): boolean;
    protected get_h(): boolean;
    get h(): boolean;
    get l(): Stream;
    set l(a: Stream);
}
/**
 * @hidden
 */
export declare abstract class ImagePartManagerBase extends PartManagerBase {
    static $t: Type;
    private static readonly x;
    private static readonly w;
    n(a: OfficeApplication): string;
    o(a: ST_ConformanceClass): string;
    protected get_g(): boolean;
    get g(): boolean;
    a(): WorkItem$1<any>;
    protected get_h(): boolean;
    b(a: any): WorkItem;
    abstract get s(): string;
    abstract get t(): string;
    abstract get u(): string;
    abstract r(a: string): ImageFormat;
    static v(a: ST_ConformanceClass): string;
}
/**
 * @hidden
 */
export declare abstract class XmlPartManagerBase extends PartManagerBase {
    static $t: Type;
    private r;
    private am;
    private al;
    private aa;
    private ac;
    constructor();
    protected p(): void;
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    at(): void;
    au(): void;
    as(a: string): void;
    w(a: QualifiedNameInfo): ElementLoadCallbacks;
    private readonly v;
    x(a: string): ElementLoadCallbacks;
    z(a: string): UnknownElementAction;
    av(a: UnknownElementCache): void;
    aw(a: UnknownStructure): void;
    ax(a: string, b: string): void;
    ay(a: string, b: (arg1: XmlPartManagerBase) => void, c?: boolean): void;
    private static ag;
    ao(a: string): string;
    az(a: string, b: (arg1: XmlPartManagerBase) => void, c?: boolean): void;
    ah(a: string): boolean;
    ai(a: string): boolean;
    y(a: UnknownElementCache, b: Stack$1<UnknownElementCache>): OverwriteRoundTripDataResult;
    a0(a: string): void;
    protected a1(): XmlReader;
    protected a2(): XmlWriter;
    protected t(): WorkItem$1<any>;
    protected abstract u(a: any): WorkItem;
    get s(): ContextStack;
    an: any;
    ae: boolean;
    get af(): boolean;
    protected get_aj(): boolean;
    protected get aj(): boolean;
    get ab(): XmlReadManager;
    get ad(): XmlWriteManager;
}
/**
 * @hidden
 */
export declare abstract class OfficeExtensibilityPartManagerBase extends XmlPartManagerBase {
    static $t: Type;
    protected get_m(): string;
    get m(): string;
    protected get_g(): boolean;
    get g(): boolean;
    f(a: IPackagePart, b: IPackageRelationship): PartManagerBase;
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    protected u(a: any): WorkItem;
    protected abstract get a3(): RoundTripControlData;
    protected abstract set a3(a: RoundTripControlData);
}
/**
 * @hidden
 */
export declare class Office2007ExtensibilityPartManager extends OfficeExtensibilityPartManagerBase {
    static $t: Type;
    private static readonly a7;
    static readonly a5: Office2007ExtensibilityPartManager;
    constructor();
    protected get_a3(): RoundTripControlData;
    protected set_a3(a: RoundTripControlData): void;
    protected get a3(): RoundTripControlData;
    protected set a3(a: RoundTripControlData);
    n(a: OfficeApplication): string;
    o(a: ST_ConformanceClass): string;
}
/**
 * @hidden
 */
export declare class Office2010ExtensibilityPartManager extends OfficeExtensibilityPartManagerBase {
    static $t: Type;
    private static readonly a7;
    static readonly a5: Office2010ExtensibilityPartManager;
    constructor();
    protected get_a3(): RoundTripControlData;
    protected set_a3(a: RoundTripControlData): void;
    protected get a3(): RoundTripControlData;
    protected set a3(a: RoundTripControlData);
    n(a: OfficeApplication): string;
    o(a: ST_ConformanceClass): string;
}
/**
 * @hidden
 */
export declare class JpegPartManager extends ImagePartManagerBase {
    static $t: Type;
    static readonly y: JpegPartManager;
    constructor();
    protected get_s(): string;
    get s(): string;
    protected get_t(): string;
    get t(): string;
    protected get_u(): string;
    get u(): string;
    protected get_m(): string;
    get m(): string;
    r(a: string): ImageFormat;
}
/**
 * @hidden
 */
export declare class RoundTripDataPartManager extends PartManagerBase {
    static $t: Type;
    private readonly u;
    private readonly v;
    private readonly w;
    private t;
    constructor(a: string, b: string, c: string, d: OfficeDocumentManager);
    a(): WorkItem$1<any>;
    b(a: any): WorkItem;
    n(a: OfficeApplication): string;
    o(a: ST_ConformanceClass): string;
    protected get_m(): string;
    get m(): string;
    protected get_g(): boolean;
    get g(): boolean;
    static r(a: OfficeDocumentManager, b: Stream, c: string): RoundTripControlData;
    static s(a: RoundTripControlData, b: OfficeDocumentManager, c: Stream, d?: boolean): WorkItem;
}
/**
 * @hidden
 */
export declare abstract class ThemePartManager extends XmlPartManagerBase {
    static $t: Type;
    static readonly a7: string;
    static readonly a9: string;
    static readonly a8: string;
    private readonly a3;
    constructor(a: boolean);
    protected get_m(): string;
    get m(): string;
    n(a: OfficeApplication): string;
    o(a: ST_ConformanceClass): string;
    protected get_g(): boolean;
    get g(): boolean;
    a(): WorkItem$1<any>;
}
/**
 * @hidden
 */
export declare abstract class XmlNamespaceDefinitionBase extends Base {
    static $t: Type;
    abstract s(a: ST_ConformanceClass): string;
    abstract get t(): string;
    static z(a: XmlPartManagerBase, b: AttributeValue): void;
    static y(a: XmlPartManagerBase): void;
    static q<T>($t: Type, a: T, b: T, c: boolean): string;
    static p<T>($t: Type, value_: T): string;
    protected static r(a: string): string;
    static b<T>($t: Type, a: string, b?: T): T;
    static c<T>($t: Type, a: AttributeValue, b: T, c: (arg1: string) => T): T;
    static g<T>($t: Type, a: string, b: (arg1: string) => T): List$1<T>;
    protected static e(a: XmlPartManagerBase, b: string): boolean;
    protected static aa(a: XmlPartManagerBase, b: string, c: string, d: boolean): void;
    protected static n(a: XmlPartManagerBase, b: string): number;
    protected static ab(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static h(a: XmlPartManagerBase, b: string): Date;
    protected static ac(a: XmlPartManagerBase, b: string, c: string, d: Date): void;
    protected static i(a: XmlPartManagerBase, b: string): number;
    protected static ad(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static j(a: XmlPartManagerBase, b: string): number;
    protected static ae(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static o(a: XmlPartManagerBase, b: string): number;
    protected static af(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static l(a: XmlPartManagerBase, b: string, c?: boolean): number;
    protected static ag(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static m(a: XmlPartManagerBase, b: string): number;
    protected static ah(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static k(a: XmlPartManagerBase, b: string): number;
    protected static ai(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    private static readonly a;
    private static d;
    protected static u(a: XmlPartManagerBase, b: string, c?: XmlNamespaceDefinitionBase_PreserveSpaceMode): string;
    protected static aj(a: XmlPartManagerBase, b: string, c: string, d: string, e?: () => void, f?: XmlNamespaceDefinitionBase_PreserveSpaceMode): void;
    protected static f(a: XmlPartManagerBase, b: string): number;
    protected static ak(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static w(a: XmlPartManagerBase, b: string): number;
    protected static al(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static x(a: XmlPartManagerBase, b: string): number;
    protected static am(a: XmlPartManagerBase, b: string, c: string, d: number): void;
    protected static v(a: XmlPartManagerBase, b: string): number;
    protected static an(a: XmlPartManagerBase, b: string, c: string, d: number): void;
}
/**
 * @hidden
 */
export declare class CoreProperties extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly av;
    static readonly aq: string;
    static readonly ar: string;
    static readonly as: string;
    static readonly at: string;
    static readonly au: string;
    static readonly aw: string;
    static readonly ax: string;
    static readonly ao: CoreProperties;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static ay(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static a5(a: XmlPartManagerBase, b: string): void;
    static az(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static a6(a: XmlPartManagerBase, b: string): void;
    static a0(a: XmlPartManagerBase): void;
    static a7(a: XmlPartManagerBase): void;
    static a1(a: XmlPartManagerBase, b: string, c: string): {
        p1: string;
        p2: string;
    };
    static a8(a: XmlPartManagerBase, b: string, c: string): void;
    static a2(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static a9(a: XmlPartManagerBase, b: string): void;
    static a3(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static ba(a: XmlPartManagerBase, b: string): void;
    static a4(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static bb(a: XmlPartManagerBase, b: string): void;
}
/**
 * @hidden
 */
export declare class DcDcmiType extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly ao: DcDcmiType;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
}
/**
 * @hidden
 */
export declare class DcElements extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly ar: string;
    static readonly ao: DcElements;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static av(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static az(a: XmlPartManagerBase, b: string): void;
    static aw(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static a0(a: XmlPartManagerBase, b: string): void;
    static ax(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static a1(a: XmlPartManagerBase, b: string): void;
    static ay(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static a2(a: XmlPartManagerBase, b: string): void;
}
/**
 * @hidden
 */
export declare class DcTerms extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly ao: DcTerms;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static au(a: XmlPartManagerBase, b: Date): {
        p1: Date;
    };
    static aw(a: XmlPartManagerBase, b: Date): void;
    static av(a: XmlPartManagerBase, b: Date): {
        p1: Date;
    };
    static ax(a: XmlPartManagerBase, b: Date): void;
}
/**
 * @hidden
 */
export declare class Drawing2010Main extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly aq;
    static readonly ao: Drawing2010Main;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
}
/**
 * @hidden
 */
export declare class Drawing2010Slicer extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly as;
    static readonly at: string;
    static readonly ao: Drawing2010Slicer;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static au(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static av(a: XmlPartManagerBase, b: string): void;
}
/**
 * @hidden
 */
export declare class DrawingMLChart extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly dy;
    private static readonly dx;
    static readonly aq: string;
    static readonly ar: string;
    static readonly as: string;
    static readonly at: string;
    static readonly au: string;
    static readonly av: string;
    static readonly aw: string;
    static readonly ax: string;
    static readonly ay: string;
    static readonly az: string;
    static readonly a0: string;
    static readonly a1: string;
    static readonly a2: string;
    static readonly a3: string;
    static readonly a4: string;
    static readonly a5: string;
    static readonly a6: string;
    static readonly a7: string;
    static readonly a8: string;
    static readonly a9: string;
    static readonly ba: string;
    static readonly bb: string;
    static readonly bc: string;
    static readonly bd: string;
    static readonly be: string;
    static readonly bf: string;
    static readonly bg: string;
    static readonly bh: string;
    static readonly bi: string;
    static readonly bj: string;
    static readonly bk: string;
    static readonly bl: string;
    static readonly bm: string;
    static readonly bn: string;
    static readonly bo: string;
    static readonly bp: string;
    static readonly bq: string;
    static readonly br: string;
    static readonly bs: string;
    static readonly bt: string;
    static readonly bu: string;
    static readonly bv: string;
    static readonly bw: string;
    static readonly bx: string;
    static readonly by: string;
    static readonly bz: string;
    static readonly b0: string;
    static readonly b1: string;
    static readonly b2: string;
    static readonly b3: string;
    static readonly b4: string;
    static readonly b5: string;
    static readonly b6: string;
    static readonly b7: string;
    static readonly b8: string;
    static readonly b9: string;
    static readonly ca: string;
    static readonly cb: string;
    static readonly cc: string;
    static readonly cd: string;
    static readonly ce: string;
    static readonly cf: string;
    static readonly cg: string;
    static readonly ch: string;
    static readonly ci: string;
    static readonly cj: string;
    static readonly ck: string;
    static readonly cl: string;
    static readonly cm: string;
    static readonly cn: string;
    static readonly co: string;
    static readonly cp: string;
    static readonly cq: string;
    static readonly cr: string;
    static readonly cs: string;
    static readonly ct: string;
    static readonly cu: string;
    static readonly cv: string;
    static readonly cw: string;
    static readonly cx: string;
    static readonly cy: string;
    static readonly cz: string;
    static readonly c0: string;
    static readonly c1: string;
    static readonly c2: string;
    static readonly c3: string;
    static readonly c4: string;
    static readonly c5: string;
    static readonly c6: string;
    static readonly c7: string;
    static readonly c8: string;
    static readonly c9: string;
    static readonly da: string;
    static readonly db: string;
    static readonly dc: string;
    static readonly dd: string;
    static readonly de: string;
    static readonly df: string;
    static readonly dg: string;
    static readonly dh: string;
    static readonly di: string;
    static readonly dj: string;
    static readonly dk: string;
    static readonly dl: string;
    static readonly dm: string;
    static readonly dn: string;
    static readonly dp: string;
    static readonly dq: string;
    static readonly dr: string;
    static readonly ds: string;
    static readonly dt: string;
    static readonly du: string;
    static readonly dv: string;
    static readonly dw: string;
    static readonly dz: string;
    static readonly d0: string;
    static readonly d1: string;
    static readonly d2: string;
    static readonly d3: string;
    static readonly d4: string;
    static readonly d5: string;
    static readonly d6: string;
    static readonly d7: string;
    static readonly d8: string;
    static readonly d9: string;
    static readonly ea: string;
    static readonly eb: string;
    static readonly ec: string;
    static readonly ed: string;
    static readonly ee: string;
    static readonly ef: string;
    static readonly eg: string;
    static readonly eh: string;
    static readonly ei: string;
    static readonly ej: string;
    static readonly ek: string;
    static readonly el: string;
    static readonly em: string;
    static readonly en: string;
    static readonly eo: string;
    static readonly ep: string;
    static readonly eq: string;
    static readonly er: string;
    static readonly es: string;
    static readonly et: string;
    static readonly eu: string;
    static readonly ev: string;
    static readonly ew: string;
    static readonly ex: string;
    static readonly ey: string;
    static readonly ez: string;
    static readonly e0: string;
    static readonly e1: string;
    static readonly e2: string;
    static readonly e3: string;
    static readonly e4: string;
    static readonly e5: string;
    static readonly e6: string;
    static readonly e7: string;
    static readonly e8: string;
    static readonly e9: string;
    static readonly fa: string;
    static readonly fb: string;
    static readonly fc: string;
    static readonly fd: string;
    static readonly fe: string;
    static readonly ff: string;
    static readonly fg: string;
    static readonly fh: string;
    static readonly fi: string;
    static readonly fj: string;
    static readonly fk: string;
    static readonly fl: string;
    static readonly fm: string;
    static readonly fn: string;
    static readonly fo: string;
    static readonly fp: string;
    static readonly fq: string;
    static readonly fr: string;
    static readonly fs: string;
    static readonly ft: string;
    static readonly fu: string;
    static readonly fv: string;
    static readonly fw: string;
    static readonly fx: string;
    static readonly fy: string;
    static readonly fz: string;
    static readonly f0: string;
    static readonly f1: string;
    static readonly f2: string;
    static readonly f3: string;
    static readonly f4: string;
    static readonly f5: string;
    static readonly f6: string;
    static readonly f7: string;
    static readonly f8: string;
    static readonly f9: string;
    static readonly ga: string;
    static readonly gb: string;
    static readonly gc: string;
    static readonly gd: string;
    static readonly ge: string;
    static readonly gf: string;
    static readonly gg: string;
    static readonly gh: string;
    static readonly gi: string;
    static readonly gj: string;
    static readonly gk: string;
    static readonly gl: string;
    static readonly gm: string;
    static readonly gn: string;
    static readonly go: string;
    static readonly gp: string;
    static readonly gq: string;
    static readonly gr: string;
    static readonly gs: string;
    static readonly gt: string;
    static readonly gu: string;
    static readonly gv: string;
    static readonly gw: string;
    static readonly gx: string;
    static readonly ao: DrawingMLChart;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static gy(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static gz(a: XmlPartManagerBase, b?: string): void;
}
/**
 * @hidden
 */
export declare class DrawingMLChart2014 extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly at;
    private static readonly as;
    static readonly ar: string;
    static readonly aq: string;
    static readonly ao: DrawingMLChart2014;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static au(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static av(a: XmlPartManagerBase, b?: string): void;
}
/**
 * @hidden
 */
export declare class DrawingMLChartEx2015_9_8 extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly as;
    private static readonly ar;
    static readonly aq: string;
    static readonly ao: DrawingMLChartEx2015_9_8;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
}
/**
 * @hidden
 */
export declare class DrawingMLChartEx2015_10_21 extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly as;
    private static readonly ar;
    static readonly aq: string;
    static readonly ao: DrawingMLChartEx2015_10_21;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
}
/**
 * @hidden
 */
export declare class DrawingMLChartEx2016_5_10 extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly as;
    private static readonly ar;
    static readonly aq: string;
    static readonly ao: DrawingMLChartEx2016_5_10;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
}
/**
 * @hidden
 */
export declare class DrawingMLMain extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly gq;
    private static readonly gp;
    static readonly ar: string;
    static readonly as: string;
    static readonly at: string;
    static readonly au: string;
    static readonly av: string;
    static readonly aw: string;
    static readonly az: string;
    static readonly a0: string;
    static readonly a2: string;
    static readonly a7: string;
    static readonly a9: string;
    static readonly bg: string;
    static readonly bh: string;
    static readonly bt: string;
    static readonly bu: string;
    static readonly bv: string;
    static readonly bw: string;
    static readonly bx: string;
    static readonly b0: string;
    static readonly ch: string;
    static readonly ci: string;
    static readonly cj: string;
    static readonly cn: string;
    static readonly cq: string;
    static readonly cu: string;
    static readonly cw: string;
    static readonly cx: string;
    static readonly cy: string;
    static readonly c0: string;
    static readonly da: string;
    static readonly db: string;
    static readonly df: string;
    static readonly dk: string;
    static readonly dr: string;
    static readonly ds: string;
    static readonly dt: string;
    static readonly du: string;
    static readonly dz: string;
    static readonly d0: string;
    static readonly d8: string;
    static readonly d9: string;
    static readonly ea: string;
    static readonly ec: string;
    static readonly ed: string;
    static readonly eh: string;
    static readonly el: string;
    static readonly em: string;
    static readonly en: string;
    static readonly eo: string;
    static readonly eq: string;
    static readonly er: string;
    static readonly es: string;
    static readonly et: string;
    static readonly ex: string;
    static readonly e2: string;
    static readonly e3: string;
    static readonly e9: string;
    static readonly fa: string;
    static readonly fb: string;
    static readonly fh: string;
    static readonly fr: string;
    static readonly fx: string;
    static readonly fy: string;
    static readonly f1: string;
    static readonly f2: string;
    static readonly f3: string;
    static readonly f4: string;
    static readonly f5: string;
    static readonly f6: string;
    static readonly f7: string;
    static readonly gi: string;
    static readonly gl: string;
    static readonly gn: string;
    static readonly gz: string;
    static readonly hb: string;
    static readonly hc: string;
    static readonly he: string;
    static readonly hj: string;
    static readonly hm: string;
    static readonly ho: string;
    static readonly hq: string;
    static readonly ht: string;
    static readonly hu: string;
    static readonly hv: string;
    static readonly hy: string;
    static readonly hz: string;
    static readonly h0: string;
    static readonly h8: string;
    static readonly ib: string;
    static readonly ic: string;
    static readonly id: string;
    static readonly ig: string;
    static readonly ij: string;
    static readonly ip: string;
    static readonly iz: string;
    static readonly i0: string;
    static readonly i1: string;
    static readonly i3: string;
    static readonly i9: string;
    static readonly jb: string;
    static readonly jf: string;
    static readonly jh: string;
    static readonly ji: string;
    static readonly jj: string;
    static readonly jn: string;
    static readonly j9: string;
    static readonly gs: string;
    static readonly g6: string;
    static readonly hs: string;
    static readonly ie: string;
    static readonly iq: string;
    static readonly ir: string;
    static readonly bj: string;
    static readonly bm: string;
    static readonly bn: string;
    static readonly ce: string;
    static readonly fu: string;
    static readonly hd: string;
    static readonly bd: string;
    static readonly g4: string;
    static readonly jz: string;
    static readonly h4: string;
    static readonly ct: string;
    static readonly dv: string;
    static readonly e8: string;
    static readonly ih: string;
    static readonly eg: string;
    static readonly fj: string;
    static readonly di: string;
    static readonly dj: string;
    static readonly ek: string;
    static readonly ez: string;
    static readonly e4: string;
    static readonly hi: string;
    static readonly i8: string;
    static readonly jv: string;
    static readonly jw: string;
    static readonly jx: string;
    static readonly jy: string;
    static readonly a3: string;
    static readonly a4: string;
    static readonly a5: string;
    static readonly a6: string;
    static readonly a8: string;
    static readonly bb: string;
    static readonly ba: string;
    static readonly bs: string;
    static readonly jk: string;
    static readonly bq: string;
    static readonly by: string;
    static readonly ck: string;
    static readonly cm: string;
    static readonly de: string;
    static readonly dh: string;
    static readonly dx: string;
    static readonly dy: string;
    static readonly ep: string;
    static readonly e7: string;
    static readonly cl: string;
    static readonly co: string;
    static readonly ej: string;
    static readonly fg: string;
    static readonly hr: string;
    static readonly h1: string;
    static readonly io: string;
    static readonly ev: string;
    static readonly fv: string;
    static readonly hg: string;
    static readonly jl: string;
    static readonly eu: string;
    static readonly im: string;
    static readonly bl: string;
    static readonly cz: string;
    static readonly hp: string;
    static readonly gm: string;
    static readonly h7: string;
    static readonly dd: string;
    static readonly bo: string;
    static readonly dw: string;
    static readonly ay: string;
    static readonly c3: string;
    static readonly ei: string;
    static readonly hh: string;
    static readonly hx: string;
    static readonly c2: string;
    static readonly hl: string;
    static readonly d3: string;
    static readonly bp: string;
    static readonly dm: string;
    static readonly d1: string;
    static readonly f0: string;
    static readonly cs: string;
    static readonly d2: string;
    static readonly dl: string;
    static readonly h2: string;
    static readonly c5: string;
    static readonly f9: string;
    static readonly ga: string;
    static readonly gb: string;
    static readonly gc: string;
    static readonly gd: string;
    static readonly ge: string;
    static readonly gf: string;
    static readonly gg: string;
    static readonly gh: string;
    static readonly fz: string;
    static readonly it: string;
    static readonly iu: string;
    static readonly ix: string;
    static readonly iy: string;
    static readonly b5: string;
    static readonly b6: string;
    static readonly b7: string;
    static readonly b8: string;
    static readonly ca: string;
    static readonly cb: string;
    static readonly cc: string;
    static readonly b2: string;
    static readonly b9: string;
    static readonly b3: string;
    static readonly b4: string;
    static readonly c6: string;
    static readonly jd: string;
    static readonly b1: string;
    static readonly d4: string;
    static readonly dn: string;
    static readonly je: string;
    static readonly ao: DrawingMLMain;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    private static kw;
    private static nx;
    private static kx;
    private static ny;
    private static ky;
    private static nz;
    private static kz;
    private static n0;
    static k0(a: XmlPartManagerBase, b: string, c: ST_DrawingElementId, d: string, e: string, f: boolean, g: string): {
        p2: ST_DrawingElementId;
        p3: string;
        p4: string;
        p5: boolean;
        p6: string;
    };
    static n1(a: XmlPartManagerBase, b: string, c: ST_DrawingElementId, d: string, e: string, f: boolean, g: string): void;
    private static k1;
    private static n2;
    static k2(a: XmlPartManagerBase, b: string, c: ST_Coordinate, d: ST_Coordinate): {
        p2: ST_Coordinate;
        p3: ST_Coordinate;
    };
    static n3(a: XmlPartManagerBase, b: string, c: ST_Coordinate, d: ST_Coordinate): void;
    private static k3;
    private static n4;
    private static k4;
    private static n5;
    private static k5;
    private static n6;
    static k6(a: XmlPartManagerBase, b: string, c: ST_PositiveCoordinate, d: ST_PositiveCoordinate): {
        p2: ST_PositiveCoordinate;
        p3: ST_PositiveCoordinate;
    };
    static n7(a: XmlPartManagerBase, b: string, c: ST_PositiveCoordinate, d: ST_PositiveCoordinate): void;
    private static k7;
    private static n8;
    static k8(a: XmlPartManagerBase, b: string, c: number): {
        p2: number;
    };
    static n9(a: XmlPartManagerBase, b: string, c: number): void;
    static k9(a: XmlPartManagerBase, b: string, c: string, d: ST_Panose, e: Nullable$1<number>, f: Nullable$1<number>, g?: boolean): {
        p2: string;
        p3: ST_Panose;
        p4: Nullable$1<number>;
        p5: Nullable$1<number>;
    };
    private static oa;
    static kb(a: XmlPartManagerBase): void;
    static nc(a: XmlPartManagerBase): void;
    static kc(a: XmlPartManagerBase): void;
    static nd(a: XmlPartManagerBase): void;
    static kd(a: XmlPartManagerBase): void;
    static ne(a: XmlPartManagerBase): void;
    static ke(a: XmlPartManagerBase): void;
    static nf(a: XmlPartManagerBase): void;
    static kf(a: XmlPartManagerBase): void;
    static ng(a: XmlPartManagerBase): void;
    static kg(a: XmlPartManagerBase): void;
    static nh(a: XmlPartManagerBase): void;
    static kh(a: XmlPartManagerBase, b: ST_PositiveFixedPercentage): {
        p1: ST_PositiveFixedPercentage;
    };
    static ni(a: XmlPartManagerBase, b: ST_PositiveFixedPercentage): void;
    static ki(a: XmlPartManagerBase, b: ST_PositivePercentage): {
        p1: ST_PositivePercentage;
    };
    static nj(a: XmlPartManagerBase, b: ST_PositivePercentage): void;
    static kj(a: XmlPartManagerBase, b: ST_FixedPercentage): {
        p1: ST_FixedPercentage;
    };
    static nk(a: XmlPartManagerBase, b: ST_FixedPercentage): void;
    static kk(a: XmlPartManagerBase): void;
    static nl(a: XmlPartManagerBase): void;
    static kl(a: XmlPartManagerBase, b: string, c: string, d: Nullable$1<ST_BlipCompression>, e?: boolean): {
        p1: string;
        p2: string;
        p3: Nullable$1<ST_BlipCompression>;
    };
    static nm(a: XmlPartManagerBase, b: string, c: string, d: Nullable$1<ST_BlipCompression>): void;
    static km(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<boolean>;
    };
    static nn(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: Nullable$1<boolean>): void;
    static kn(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static no(a: XmlPartManagerBase, b: ST_Percentage): void;
    static ko(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static np(a: XmlPartManagerBase, b: ST_Percentage): void;
    static kp(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static nq(a: XmlPartManagerBase, b: ST_Percentage): void;
    static kq(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<boolean>, d: Nullable$1<ST_TextVertOverflowType>, e: Nullable$1<ST_TextHorzOverflowType>, f: Nullable$1<ST_TextVerticalType>, g: Nullable$1<ST_TextWrappingType>, h: Nullable$1<ST_Coordinate32>, i: Nullable$1<ST_Coordinate32>, j: Nullable$1<ST_Coordinate32>, k: Nullable$1<ST_Coordinate32>, l: Nullable$1<number>, m: Nullable$1<number>, n: Nullable$1<boolean>, o: Nullable$1<boolean>, p: Nullable$1<ST_TextAnchoringType>, q: Nullable$1<boolean>, r: Nullable$1<boolean>, s: boolean, t: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<boolean>;
        p3: Nullable$1<ST_TextVertOverflowType>;
        p4: Nullable$1<ST_TextHorzOverflowType>;
        p5: Nullable$1<ST_TextVerticalType>;
        p6: Nullable$1<ST_TextWrappingType>;
        p7: Nullable$1<ST_Coordinate32>;
        p8: Nullable$1<ST_Coordinate32>;
        p9: Nullable$1<ST_Coordinate32>;
        p10: Nullable$1<ST_Coordinate32>;
        p11: Nullable$1<number>;
        p12: Nullable$1<number>;
        p13: Nullable$1<boolean>;
        p14: Nullable$1<boolean>;
        p15: Nullable$1<ST_TextAnchoringType>;
        p16: Nullable$1<boolean>;
        p17: Nullable$1<boolean>;
        p18: boolean;
        p19: Nullable$1<boolean>;
    };
    static nr(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: Nullable$1<boolean>, d?: Nullable$1<ST_TextVertOverflowType>, e?: Nullable$1<ST_TextHorzOverflowType>, f?: Nullable$1<ST_TextVerticalType>, g?: Nullable$1<ST_TextWrappingType>, h?: Nullable$1<ST_Coordinate32>, i?: Nullable$1<ST_Coordinate32>, j?: Nullable$1<ST_Coordinate32>, k?: Nullable$1<ST_Coordinate32>, l?: Nullable$1<number>, m?: Nullable$1<number>, n?: Nullable$1<boolean>, o?: Nullable$1<boolean>, p?: Nullable$1<ST_TextAnchoringType>, q?: Nullable$1<boolean>, r?: Nullable$1<boolean>, s?: boolean, t?: Nullable$1<boolean>): void;
    static kr(a: XmlPartManagerBase, b: ST_PositiveCoordinate, c: ST_PositiveCoordinate): {
        p1: ST_PositiveCoordinate;
        p2: ST_PositiveCoordinate;
    };
    static ns(a: XmlPartManagerBase, b: ST_PositiveCoordinate, c: ST_PositiveCoordinate): void;
    static ks(a: XmlPartManagerBase, b: ST_Coordinate, c: ST_Coordinate): {
        p1: ST_Coordinate;
        p2: ST_Coordinate;
    };
    static nt(a: XmlPartManagerBase, b: ST_Coordinate, c: ST_Coordinate): void;
    static kt(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static nu(a: XmlPartManagerBase, b: string): void;
    static ku(a: XmlPartManagerBase): void;
    static nv(a: XmlPartManagerBase): void;
    static kv(a: XmlPartManagerBase, b: string, c: ST_Panose, d: Nullable$1<number>, e: Nullable$1<number>, f?: boolean): {
        p1: string;
        p2: ST_Panose;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
    };
    static nw(a: XmlPartManagerBase, b: string, c?: ST_Panose, d?: Nullable$1<number>, e?: number): void;
    static la(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static ob(a: XmlPartManagerBase, b?: string): void;
    static lb(a: XmlPartManagerBase): void;
    static oc(a: XmlPartManagerBase): void;
    static lc(a: XmlPartManagerBase): void;
    static od(a: XmlPartManagerBase): void;
    static ld(a: XmlPartManagerBase): void;
    static oe(a: XmlPartManagerBase): void;
    static le(a: XmlPartManagerBase, b: string, c: ST_Panose, d: Nullable$1<number>, e: number): {
        p1: string;
        p2: ST_Panose;
        p3: Nullable$1<number>;
        p4: number;
    };
    static of(a: XmlPartManagerBase, b: string, c?: ST_Panose, d?: Nullable$1<number>, e?: number): void;
    static lf(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static og(a: XmlPartManagerBase, b: number): void;
    static lg(a: XmlPartManagerBase, b: ST_PositiveCoordinate, c: ST_PositiveCoordinate): {
        p1: ST_PositiveCoordinate;
        p2: ST_PositiveCoordinate;
    };
    static oh(a: XmlPartManagerBase, b: ST_PositiveCoordinate, c: ST_PositiveCoordinate): void;
    static lh(a: XmlPartManagerBase): void;
    static oi(a: XmlPartManagerBase): void;
    static li(a: XmlPartManagerBase): void;
    static oj(a: XmlPartManagerBase): void;
    static lj(a: XmlPartManagerBase): void;
    static ok(a: XmlPartManagerBase): void;
    static lk(a: XmlPartManagerBase, b: ST_Percentage, c: ST_Percentage, d: ST_Percentage, e: ST_Percentage): {
        p1: ST_Percentage;
        p2: ST_Percentage;
        p3: ST_Percentage;
        p4: ST_Percentage;
    };
    static ol(a: XmlPartManagerBase, b: ST_Percentage, c: ST_Percentage, d: ST_Percentage, e: ST_Percentage): void;
    static ll(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static om(a: XmlPartManagerBase, b: number): void;
    static lm(a: XmlPartManagerBase): void;
    static on(a: XmlPartManagerBase): void;
    static ln(a: XmlPartManagerBase, b: string, c: string): {
        p1: string;
        p2: string;
    };
    static oo(a: XmlPartManagerBase, b: string, c: string): void;
    static lo(a: XmlPartManagerBase, b: ST_FontCollectionIndex): {
        p1: ST_FontCollectionIndex;
    };
    static op(a: XmlPartManagerBase, b: ST_FontCollectionIndex): void;
    static lp(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static oq(a: XmlPartManagerBase, b: string): void;
    static lq(a: XmlPartManagerBase, b: string, c: string): {
        p1: string;
        p2: string;
    };
    static or(a: XmlPartManagerBase, b: string, c: string): void;
    static lr(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static os(a: XmlPartManagerBase, b: string): void;
    static ls(a: XmlPartManagerBase): void;
    static ot(a: XmlPartManagerBase): void;
    static lt(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean, f: boolean, g: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
    };
    static ou(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: boolean): void;
    static lu(a: XmlPartManagerBase): void;
    static ov(a: XmlPartManagerBase): void;
    static lv(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static ow(a: XmlPartManagerBase, b: ST_Percentage): void;
    static lw(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static ox(a: XmlPartManagerBase, b: ST_Percentage): void;
    static lx(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static oy(a: XmlPartManagerBase, b: ST_Percentage): void;
    static ly(a: XmlPartManagerBase): void;
    static oz(a: XmlPartManagerBase): void;
    static lz(a: XmlPartManagerBase, b: Nullable$1<ST_LineEndType>, c: Nullable$1<ST_LineEndWidth>, d: Nullable$1<ST_LineEndLength>): {
        p1: Nullable$1<ST_LineEndType>;
        p2: Nullable$1<ST_LineEndWidth>;
        p3: Nullable$1<ST_LineEndLength>;
    };
    static o0(a: XmlPartManagerBase, b: Nullable$1<ST_LineEndType>, c: Nullable$1<ST_LineEndWidth>, d: Nullable$1<ST_LineEndLength>): void;
    static l0(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: string, g: boolean, h: boolean, i: boolean): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
        p6: boolean;
        p7: boolean;
        p8: boolean;
    };
    static o1(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: string, f?: string, g?: boolean, h?: boolean, i?: boolean): void;
    static l1(a: XmlPartManagerBase): void;
    static o2(a: XmlPartManagerBase): void;
    static l2(a: XmlPartManagerBase, b: ST_PositiveFixedAngle): {
        p1: ST_PositiveFixedAngle;
    };
    static o3(a: XmlPartManagerBase, b: ST_PositiveFixedAngle): void;
    static l3(a: XmlPartManagerBase, b: ST_PositivePercentage): {
        p1: ST_PositivePercentage;
    };
    static o4(a: XmlPartManagerBase, b: ST_PositivePercentage): void;
    static l4(a: XmlPartManagerBase, b: ST_Angle): {
        p1: ST_Angle;
    };
    static o5(a: XmlPartManagerBase, b: ST_Angle): void;
    static l5(a: XmlPartManagerBase): void;
    static o6(a: XmlPartManagerBase): void;
    static l6(a: XmlPartManagerBase, b: string, c: ST_Panose, d: Nullable$1<number>, e: number): {
        p1: string;
        p2: ST_Panose;
        p3: Nullable$1<number>;
        p4: number;
    };
    static o7(a: XmlPartManagerBase, b: string, c?: ST_Panose, d?: Nullable$1<number>, e?: number): void;
    static l7(a: XmlPartManagerBase, b: Nullable$1<ST_LineWidth>, c: Nullable$1<ST_LineCap>, d: Nullable$1<ST_CompoundLine>, e: Nullable$1<ST_PenAlignment>): {
        p1: Nullable$1<ST_LineWidth>;
        p2: Nullable$1<ST_LineCap>;
        p3: Nullable$1<ST_CompoundLine>;
        p4: Nullable$1<ST_PenAlignment>;
    };
    static o8(a: XmlPartManagerBase, b: Nullable$1<ST_LineWidth>, c: Nullable$1<ST_LineCap>, d: Nullable$1<ST_CompoundLine>, e: Nullable$1<ST_PenAlignment>): void;
    static l8(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static o9(a: XmlPartManagerBase, b: number): void;
    static l9(a: XmlPartManagerBase): void;
    static pa(a: XmlPartManagerBase): void;
    static ma(a: XmlPartManagerBase): void;
    static pb(a: XmlPartManagerBase): void;
    static mb(a: XmlPartManagerBase): void;
    static pc(a: XmlPartManagerBase): void;
    static mc(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static pd(a: XmlPartManagerBase, b: ST_Percentage): void;
    static md(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static pe(a: XmlPartManagerBase, b: ST_Percentage): void;
    static me(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static pf(a: XmlPartManagerBase, b: ST_Percentage): void;
    static mf(a: XmlPartManagerBase): void;
    static pg(a: XmlPartManagerBase): void;
    static mg(a: XmlPartManagerBase): void;
    static ph(a: XmlPartManagerBase): void;
    static mh(a: XmlPartManagerBase): void;
    static pi(a: XmlPartManagerBase): void;
    static mi(a: XmlPartManagerBase): void;
    static pj(a: XmlPartManagerBase): void;
    static mj(a: XmlPartManagerBase, b: ST_Coordinate, c: ST_Coordinate): {
        p1: ST_Coordinate;
        p2: ST_Coordinate;
    };
    static pk(a: XmlPartManagerBase, b: ST_Coordinate, c: ST_Coordinate): void;
    static mk(a: XmlPartManagerBase): void;
    static pl(a: XmlPartManagerBase): void;
    static ml(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean, j: boolean, k: boolean, l: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: boolean;
        p11: boolean;
    };
    static pm(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: boolean, l?: boolean): void;
    static mm(a: XmlPartManagerBase, b: Nullable$1<ST_TextMargin>, c: Nullable$1<ST_TextMargin>, d: Nullable$1<ST_TextIndentLevelType>, e: Nullable$1<ST_TextIndent>, f: Nullable$1<ST_TextAlignType>, g: Nullable$1<ST_Coordinate32>, h: Nullable$1<boolean>, i: Nullable$1<boolean>, j: Nullable$1<ST_TextFontAlignType>, k: Nullable$1<boolean>, l: Nullable$1<boolean>): {
        p1: Nullable$1<ST_TextMargin>;
        p2: Nullable$1<ST_TextMargin>;
        p3: Nullable$1<ST_TextIndentLevelType>;
        p4: Nullable$1<ST_TextIndent>;
        p5: Nullable$1<ST_TextAlignType>;
        p6: Nullable$1<ST_Coordinate32>;
        p7: Nullable$1<boolean>;
        p8: Nullable$1<boolean>;
        p9: Nullable$1<ST_TextFontAlignType>;
        p10: Nullable$1<boolean>;
        p11: Nullable$1<boolean>;
    };
    static pn(a: XmlPartManagerBase, b?: Nullable$1<ST_TextMargin>, c?: Nullable$1<ST_TextMargin>, d?: Nullable$1<ST_TextIndentLevelType>, e?: Nullable$1<ST_TextIndent>, f?: Nullable$1<ST_TextAlignType>, g?: Nullable$1<ST_Coordinate32>, h?: Nullable$1<boolean>, i?: Nullable$1<boolean>, j?: Nullable$1<ST_TextFontAlignType>, k?: Nullable$1<boolean>, l?: Nullable$1<boolean>): void;
    static mn(a: XmlPartManagerBase, b: ST_PresetColorVal): {
        p1: ST_PresetColorVal;
    };
    static po(a: XmlPartManagerBase, b: ST_PresetColorVal): void;
    static mo(a: XmlPartManagerBase, b: ST_ShapeType): {
        p1: ST_ShapeType;
    };
    static pp(a: XmlPartManagerBase, b: ST_ShapeType): void;
    static mp(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static pq(a: XmlPartManagerBase, b: ST_Percentage): void;
    static mq(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static pr(a: XmlPartManagerBase, b: ST_Percentage): void;
    static mr(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static ps(a: XmlPartManagerBase, b: ST_Percentage): void;
    static ms(a: XmlPartManagerBase): void;
    static pt(a: XmlPartManagerBase): void;
    static mt(a: XmlPartManagerBase, b: Nullable$1<boolean>, c: string, d: string, e: Nullable$1<ST_TextFontSize>, f: Nullable$1<boolean>, g: Nullable$1<boolean>, h: Nullable$1<ST_TextUnderlineType>, i: Nullable$1<ST_TextStrikeType>, j: Nullable$1<number>, k: Nullable$1<ST_TextCapsType>, l: Nullable$1<ST_TextPoint>, m: Nullable$1<boolean>, n: Nullable$1<ST_Percentage>, o: Nullable$1<boolean>, p: Nullable$1<boolean>, q: Nullable$1<boolean>, r: Nullable$1<boolean>, s: Nullable$1<number>, t: string, u?: string, v?: boolean): {
        p1: Nullable$1<boolean>;
        p2: string;
        p3: string;
        p4: Nullable$1<ST_TextFontSize>;
        p5: Nullable$1<boolean>;
        p6: Nullable$1<boolean>;
        p7: Nullable$1<ST_TextUnderlineType>;
        p8: Nullable$1<ST_TextStrikeType>;
        p9: Nullable$1<number>;
        p10: Nullable$1<ST_TextCapsType>;
        p11: Nullable$1<ST_TextPoint>;
        p12: Nullable$1<boolean>;
        p13: Nullable$1<ST_Percentage>;
        p14: Nullable$1<boolean>;
        p15: Nullable$1<boolean>;
        p16: Nullable$1<boolean>;
        p17: Nullable$1<boolean>;
        p18: Nullable$1<number>;
        p19: string;
    };
    static pu(a: XmlPartManagerBase, b?: Nullable$1<boolean>, c?: string, d?: string, e?: Nullable$1<ST_TextFontSize>, f?: Nullable$1<boolean>, g?: Nullable$1<boolean>, h?: Nullable$1<ST_TextUnderlineType>, i?: Nullable$1<ST_TextStrikeType>, j?: Nullable$1<number>, k?: Nullable$1<ST_TextCapsType>, l?: Nullable$1<ST_TextPoint>, m?: Nullable$1<boolean>, n?: Nullable$1<ST_Percentage>, o?: Nullable$1<boolean>, p?: Nullable$1<boolean>, q?: Nullable$1<boolean>, r?: Nullable$1<boolean>, s?: Nullable$1<number>, t?: string): void;
    static mu(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static pv(a: XmlPartManagerBase, b: ST_Percentage): void;
    static mv(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static pw(a: XmlPartManagerBase, b: ST_Percentage): void;
    static mw(a: XmlPartManagerBase, b: ST_Percentage): {
        p1: ST_Percentage;
    };
    static px(a: XmlPartManagerBase, b: ST_Percentage): void;
    static mx(a: XmlPartManagerBase, b: ST_SchemeColorVal): {
        p1: ST_SchemeColorVal;
    };
    static py(a: XmlPartManagerBase, b: ST_SchemeColorVal): void;
    static my(a: XmlPartManagerBase, b: ST_PositiveFixedPercentage): {
        p1: ST_PositiveFixedPercentage;
    };
    static pz(a: XmlPartManagerBase, b: ST_PositiveFixedPercentage): void;
    static mz(a: XmlPartManagerBase): void;
    static p0(a: XmlPartManagerBase): void;
    static m0(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean, j: boolean, k: boolean, l: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: boolean;
        p11: boolean;
    };
    static p1(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: boolean, l?: boolean): void;
    static m1(a: XmlPartManagerBase, b: ST_Percentage, c: ST_Percentage, d: ST_Percentage, e: ST_Percentage): {
        p1: ST_Percentage;
        p2: ST_Percentage;
        p3: ST_Percentage;
        p4: ST_Percentage;
    };
    static p2(a: XmlPartManagerBase, b: ST_Percentage, c: ST_Percentage, d: ST_Percentage, e: ST_Percentage): void;
    static m2(a: XmlPartManagerBase, b: ST_HexColorRGB): {
        p1: ST_HexColorRGB;
    };
    static p3(a: XmlPartManagerBase, b: ST_HexColorRGB): void;
    static m3(a: XmlPartManagerBase): void;
    static p4(a: XmlPartManagerBase): void;
    static m4(a: XmlPartManagerBase, b: ST_SystemColorVal, c: ST_HexColorRGB): {
        p1: ST_SystemColorVal;
        p2: ST_HexColorRGB;
    };
    static p5(a: XmlPartManagerBase, b: ST_SystemColorVal, c: ST_HexColorRGB): void;
    static m5(a: XmlPartManagerBase, b: Nullable$1<ST_LineEndType>, c: Nullable$1<ST_LineEndWidth>, d: Nullable$1<ST_LineEndLength>): {
        p1: Nullable$1<ST_LineEndType>;
        p2: Nullable$1<ST_LineEndWidth>;
        p3: Nullable$1<ST_LineEndLength>;
    };
    static p6(a: XmlPartManagerBase, b: Nullable$1<ST_LineEndType>, c: Nullable$1<ST_LineEndWidth>, d: Nullable$1<ST_LineEndLength>): void;
    static m6(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static p7(a: XmlPartManagerBase, b: string): void;
    static m7(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static p8(a: XmlPartManagerBase, b: string): void;
    static m8(a: XmlPartManagerBase): void;
    static p9(a: XmlPartManagerBase): void;
    static m9(a: XmlPartManagerBase): void;
    static qa(a: XmlPartManagerBase): void;
    static na(a: XmlPartManagerBase, b: ST_PositiveFixedPercentage): {
        p1: ST_PositiveFixedPercentage;
    };
    static qb(a: XmlPartManagerBase, b: ST_PositiveFixedPercentage): void;
    static nb(a: XmlPartManagerBase, b: ST_Angle, c: boolean, d: boolean): {
        p1: ST_Angle;
        p2: boolean;
        p3: boolean;
    };
    static qc(a: XmlPartManagerBase, b?: ST_Angle, c?: boolean, d?: boolean): void;
}
/**
 * @hidden
 */
export declare abstract class DrawingNamespaceDefinitionBase extends XmlNamespaceDefinitionBase {
    static $t: Type;
    readonly ao: string;
    readonly aq: string;
    readonly ar: string;
    readonly as: string;
    readonly at: string;
    readonly au: string;
    readonly av: string;
    readonly aw: string;
    readonly ax: string;
    readonly az: string;
    readonly a4: string;
    readonly a5: string;
    readonly a6: string;
    readonly a7: string;
    readonly bo: string;
    readonly bp: string;
    readonly bq: string;
    readonly br: string;
    readonly bs: string;
    readonly bt: string;
    readonly bx: string;
    readonly by: string;
    readonly bz: string;
    readonly b0: string;
    readonly b2: string;
    readonly b4: string;
    constructor(a: string, b: string);
    s(a: ST_ConformanceClass): string;
    private cc;
    private c3;
    static db(a: XmlPartManagerBase, b: string): void;
    b5(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<boolean>;
    };
    cw(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<boolean>): void;
    b6(a: XmlPartManagerBase): void;
    cx(a: XmlPartManagerBase): void;
    b7(a: XmlPartManagerBase): void;
    cy(a: XmlPartManagerBase): void;
    b8(a: XmlPartManagerBase): void;
    cz(a: XmlPartManagerBase): void;
    b9(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    c0(a: XmlPartManagerBase, b?: boolean): void;
    ca(a: XmlPartManagerBase, b: ST_DrawingElementId, c: string, d: string, e: boolean, f: string): {
        p1: ST_DrawingElementId;
        p2: string;
        p3: string;
        p4: boolean;
        p5: string;
    };
    c1(a: XmlPartManagerBase, b: ST_DrawingElementId, c: string, d?: string, e?: boolean, f?: string): void;
    cb(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    c2(a: XmlPartManagerBase, b?: boolean): void;
    cd(a: XmlPartManagerBase, b: string, c: boolean): {
        p1: string;
        p2: boolean;
    };
    c4(a: XmlPartManagerBase, b?: string, c?: boolean): void;
    ce(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean, j: boolean, k: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: boolean;
    };
    c5(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: boolean): void;
    cf(a: XmlPartManagerBase, b: number, c: number): {
        p1: number;
        p2: number;
    };
    c6(a: XmlPartManagerBase, b?: number, c?: number): void;
    cg(a: XmlPartManagerBase, b: string, c: boolean): {
        p1: string;
        p2: boolean;
    };
    c7(a: XmlPartManagerBase, b?: string, c?: boolean): void;
    ch(a: XmlPartManagerBase): void;
    c8(a: XmlPartManagerBase): void;
    ci(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
    };
    c9(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: boolean, h?: boolean): void;
    cj(a: XmlPartManagerBase, b: Nullable$1<ST_BlackWhiteMode>): {
        p1: Nullable$1<ST_BlackWhiteMode>;
    };
    da(a: XmlPartManagerBase, b?: Nullable$1<ST_BlackWhiteMode>): void;
    ck(a: XmlPartManagerBase): void;
    dc(a: XmlPartManagerBase): void;
    cl(a: XmlPartManagerBase): void;
    dd(a: XmlPartManagerBase): void;
    cm(a: XmlPartManagerBase): void;
    de(a: XmlPartManagerBase): void;
    cn(a: XmlPartManagerBase): void;
    df(a: XmlPartManagerBase): void;
    co(a: XmlPartManagerBase): void;
    dg(a: XmlPartManagerBase): void;
    cp(a: XmlPartManagerBase, b: string, c: boolean): {
        p1: string;
        p2: boolean;
    };
    dh(a: XmlPartManagerBase, b?: string, c?: boolean): void;
    cq(a: XmlPartManagerBase, b: string, c: string, d: boolean, e: boolean): {
        p1: string;
        p2: string;
        p3: boolean;
        p4: boolean;
    };
    di(a: XmlPartManagerBase, b?: string, c?: string, d?: boolean, e?: boolean): void;
    cr(a: XmlPartManagerBase, b: Nullable$1<ST_BlackWhiteMode>): {
        p1: Nullable$1<ST_BlackWhiteMode>;
    };
    dj(a: XmlPartManagerBase, b?: Nullable$1<ST_BlackWhiteMode>): void;
    cs(a: XmlPartManagerBase, b: number, c: number): {
        p1: number;
        p2: number;
    };
    dk(a: XmlPartManagerBase, b?: number, c?: number): void;
    ct(a: XmlPartManagerBase): void;
    dl(a: XmlPartManagerBase): void;
    cu(a: XmlPartManagerBase): void;
    dm(a: XmlPartManagerBase): void;
    cv(a: XmlPartManagerBase, b: ST_Angle, c: boolean, d: boolean): {
        p1: ST_Angle;
        p2: boolean;
        p3: boolean;
    };
    dn(a: XmlPartManagerBase, b?: ST_Angle, c?: boolean, d?: boolean): void;
    protected readonly bb: string;
    protected readonly bc: string;
}
/**
 * @hidden
 */
export declare class EmptyNamespace extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly ao: EmptyNamespace;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static aq(a: XmlPartManagerBase): void;
    static ar(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: Nullable$1<number>): void;
}
/**
 * @hidden
 */
export declare class IGOfficeExtensions extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly as;
    static readonly aq: string;
    static readonly ar: string;
    static readonly at: string;
    static readonly au: string;
    static readonly ao: IGOfficeExtensions;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
}
/**
 * @hidden
 */
export declare class MarkupCompatibility2006 extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly au: string;
    static readonly aq: string;
    static readonly ar: string;
    static readonly as: string;
    static readonly at: string;
    static readonly ao: MarkupCompatibility2006;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static aw(a: XmlPartManagerBase): void;
    static az(a: XmlPartManagerBase): void;
    static ax(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static a0(a: XmlPartManagerBase, b: IEnumerable$1<XmlNamespaceDefinitionBase>): void;
    static a1(a: XmlPartManagerBase, b: string): void;
    static ay(a: XmlPartManagerBase): void;
    static a2(a: XmlPartManagerBase): void;
}
/**
 * @hidden
 */
export declare class OfficeDocumentDocPropsVTypes extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly a2;
    private static readonly a1;
    static readonly au: string;
    static readonly ap: string;
    static readonly av: string;
    static readonly aw: string;
    static readonly ax: string;
    static readonly ay: string;
    static readonly aq: string;
    static readonly a3: string;
    static readonly a4: string;
    static readonly a6: string;
    static readonly a7: string;
    static readonly a8: string;
    static readonly a9: string;
    static readonly as: string;
    static readonly az: string;
    static readonly a0: string;
    static readonly ba: string;
    static readonly bb: string;
    static readonly ao: OfficeDocumentDocPropsVTypes;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static bu(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cg(a: XmlPartManagerBase, b: number): void;
    static bv(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static ch(a: XmlPartManagerBase, b: number): void;
    static bw(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static ci(a: XmlPartManagerBase, b: number): void;
    static bx(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cj(a: XmlPartManagerBase, b: number): void;
    static by(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static ck(a: XmlPartManagerBase, b: number): void;
    static bz(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cl(a: XmlPartManagerBase, b: number): void;
    static b0(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cm(a: XmlPartManagerBase, b: number): void;
    static b1(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static cn(a: XmlPartManagerBase, b: string): void;
    static b2(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static co(a: XmlPartManagerBase, b: string): void;
    static b3(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cp(a: XmlPartManagerBase, b: number): void;
    static b4(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cq(a: XmlPartManagerBase, b: number): void;
    static b5(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cr(a: XmlPartManagerBase, b: number): void;
    static b6(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cs(a: XmlPartManagerBase, b: number): void;
    static b7(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static ct(a: XmlPartManagerBase, b: number): void;
    static b8(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cu(a: XmlPartManagerBase, b: number): void;
    static b9(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cv(a: XmlPartManagerBase, b: number): void;
    static ca(a: XmlPartManagerBase): void;
    static cw(a: XmlPartManagerBase): void;
    static cb(a: XmlPartManagerBase, b: ST_VectorBaseType, c: number): {
        p1: ST_VectorBaseType;
        p2: number;
    };
    static cx(a: XmlPartManagerBase, b: ST_VectorBaseType, c: number): void;
    private static bc;
    private static bd;
    private static be;
    private static bf;
    private static bg;
    private static bh;
    private static bi;
    private static bj;
    private static bk;
    private static bl;
    private static bm;
    private static bn;
    private static bo;
    private static bp;
    private static bq;
    private static br;
    private static bs;
    private static bt;
    static cc(a: XmlPartManagerBase): void;
    static cd(a: XmlPartManagerBase, b: any): void;
    static ce(a: XmlPartManagerBase, b: any): void;
    static cf(a: XmlPartManagerBase, b: CT_Vector): void;
}
/**
 * @hidden
 */
export declare class OfficeDocumentExtendedProperties extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly a5;
    private static readonly a4;
    static readonly aq: string;
    static readonly ar: string;
    static readonly as: string;
    static readonly at: string;
    static readonly au: string;
    static readonly av: string;
    static readonly aw: string;
    static readonly ax: string;
    static readonly ay: string;
    static readonly az: string;
    static readonly a0: string;
    static readonly a1: string;
    static readonly a2: string;
    static readonly a3: string;
    static readonly a6: string;
    static readonly a7: string;
    static readonly a8: string;
    static readonly ba: string;
    static readonly a9: string;
    static readonly bb: string;
    static readonly bc: string;
    static readonly bd: string;
    static readonly be: string;
    static readonly bf: string;
    static readonly bg: string;
    static readonly bh: string;
    static readonly ao: OfficeDocumentExtendedProperties;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static bi(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static b9(a: XmlPartManagerBase, b: string): void;
    static bj(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static ca(a: XmlPartManagerBase, b: string): void;
    static bk(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cb(a: XmlPartManagerBase, b: number): void;
    static bl(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cc(a: XmlPartManagerBase, b: number): void;
    static bm(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static cd(a: XmlPartManagerBase, b: string): void;
    static bn(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static ce(a: XmlPartManagerBase, b: number): void;
    static bo(a: XmlPartManagerBase): void;
    static cf(a: XmlPartManagerBase): void;
    static bp(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cg(a: XmlPartManagerBase, b: number): void;
    static bq(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static ch(a: XmlPartManagerBase, b: string): void;
    static br(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static ci(a: XmlPartManagerBase, b: boolean): void;
    static bs(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cj(a: XmlPartManagerBase, b: number): void;
    static bt(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static ck(a: XmlPartManagerBase, b: boolean): void;
    static bu(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static cl(a: XmlPartManagerBase, b: string): void;
    static bv(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cm(a: XmlPartManagerBase, b: number): void;
    static bw(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cn(a: XmlPartManagerBase, b: number): void;
    static bx(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static co(a: XmlPartManagerBase, b: number): void;
    static by(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cp(a: XmlPartManagerBase, b: number): void;
    static bz(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static cq(a: XmlPartManagerBase, b: string): void;
    static b0(a: XmlPartManagerBase): void;
    static cr(a: XmlPartManagerBase): void;
    static b1(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static cs(a: XmlPartManagerBase, b: boolean): void;
    static b2(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static ct(a: XmlPartManagerBase, b: boolean): void;
    static b3(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static b8(a: XmlPartManagerBase, b: number): void;
    static b4(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static cu(a: XmlPartManagerBase, b: string): void;
    static b5(a: XmlPartManagerBase): void;
    static cv(a: XmlPartManagerBase): void;
    static b6(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cw(a: XmlPartManagerBase, b: number): void;
    static b7(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static cx(a: XmlPartManagerBase, b: number): void;
}
/**
 * @hidden
 */
export declare class OfficeDocumentRelationships extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly av;
    private static readonly au;
    static readonly aq: string;
    static readonly ar: string;
    static readonly as: string;
    static readonly at: string;
    static readonly aw: string;
    static readonly ao: OfficeDocumentRelationships;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
}
/**
 * @hidden
 */
export declare class OfficeNamespace extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly bs: string;
    static readonly ap: string;
    static readonly b7: string;
    static readonly as: string;
    static readonly au: string;
    static readonly at: string;
    static readonly a2: string;
    static readonly a3: string;
    static readonly a4: string;
    static readonly aw: string;
    static readonly ax: string;
    static readonly ay: string;
    static readonly az: string;
    static readonly a0: string;
    static readonly a1: string;
    static readonly a5: string;
    static readonly a6: string;
    static readonly a7: string;
    static readonly a8: string;
    static readonly a9: string;
    static readonly ba: string;
    static readonly bd: string;
    static readonly be: string;
    static readonly bf: string;
    static readonly bg: string;
    static readonly bh: string;
    static readonly bi: string;
    static readonly bj: string;
    static readonly bk: string;
    static readonly bm: string;
    static readonly bn: string;
    static readonly bo: string;
    static readonly bp: string;
    static readonly bq: string;
    static readonly br: string;
    static readonly bt: string;
    static readonly bu: string;
    static readonly bw: string;
    static readonly bx: string;
    static readonly by: string;
    static readonly bz: string;
    static readonly b0: string;
    static readonly b2: string;
    static readonly b3: string;
    static readonly b4: string;
    static readonly b9: string;
    static readonly ca: string;
    static readonly cb: string;
    static readonly cd: string;
    static readonly cf: string;
    static readonly cg: string;
    static readonly ao: OfficeNamespace;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static ci(a: XmlPartManagerBase, b: Nullable$1<ST_Ext>, c: string): {
        p1: Nullable$1<ST_Ext>;
        p2: string;
    };
    static cl(a: XmlPartManagerBase, b?: Nullable$1<ST_Ext>, c?: string): void;
    static cj(a: XmlPartManagerBase, b: Nullable$1<ST_Ext>, c: Nullable$1<boolean>, d: Nullable$1<boolean>, e: Nullable$1<boolean>, f: Nullable$1<boolean>, g: Nullable$1<boolean>, h: Nullable$1<boolean>, i: Nullable$1<boolean>, j: Nullable$1<boolean>, k: Nullable$1<boolean>, l: Nullable$1<boolean>, m: Nullable$1<boolean>): {
        p1: Nullable$1<ST_Ext>;
        p2: Nullable$1<boolean>;
        p3: Nullable$1<boolean>;
        p4: Nullable$1<boolean>;
        p5: Nullable$1<boolean>;
        p6: Nullable$1<boolean>;
        p7: Nullable$1<boolean>;
        p8: Nullable$1<boolean>;
        p9: Nullable$1<boolean>;
        p10: Nullable$1<boolean>;
        p11: Nullable$1<boolean>;
        p12: Nullable$1<boolean>;
    };
    static cm(a: XmlPartManagerBase, b?: Nullable$1<ST_Ext>, c?: Nullable$1<boolean>, d?: Nullable$1<boolean>, e?: Nullable$1<boolean>, f?: Nullable$1<boolean>, g?: Nullable$1<boolean>, h?: Nullable$1<boolean>, i?: Nullable$1<boolean>, j?: Nullable$1<boolean>, k?: Nullable$1<boolean>, l?: Nullable$1<boolean>, m?: Nullable$1<boolean>): void;
    static ck(a: XmlPartManagerBase, b: Nullable$1<ST_Ext>): {
        p1: Nullable$1<ST_Ext>;
    };
    static cn(a: XmlPartManagerBase, b?: Nullable$1<ST_Ext>): void;
}
/**
 * @hidden
 */
export declare class VmlNamespace extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly ax: string;
    static readonly ao: VmlNamespace;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static dp(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<number>;
    };
    static dy(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: Nullable$1<number>): void;
    static dq(a: XmlPartManagerBase, b: string, c: Nullable$1<ST_FillType>, d: Nullable$1<boolean>, e: string, f: string, g: string, h: string, i: string, j: string, k: string, l: string, m: string, n: Nullable$1<ST_ImageAspect>, o: string, p: Nullable$1<number>, q: Nullable$1<boolean>, r: string, s: string, t: string, u: Nullable$1<ST_FillMethod>, v: Nullable$1<boolean>, w: string, x: string, y: Nullable$1<boolean>, z: Nullable$1<boolean>, aa: string, ab: string): {
        p1: string;
        p2: Nullable$1<ST_FillType>;
        p3: Nullable$1<boolean>;
        p4: string;
        p5: string;
        p6: string;
        p7: string;
        p8: string;
        p9: string;
        p10: string;
        p11: string;
        p12: string;
        p13: Nullable$1<ST_ImageAspect>;
        p14: string;
        p15: Nullable$1<number>;
        p16: Nullable$1<boolean>;
        p17: string;
        p18: string;
        p19: string;
        p20: Nullable$1<ST_FillMethod>;
        p21: Nullable$1<boolean>;
        p22: string;
        p23: string;
        p24: Nullable$1<boolean>;
        p25: Nullable$1<boolean>;
        p26: string;
        p27: string;
    };
    static dz(a: XmlPartManagerBase, b?: string, c?: Nullable$1<ST_FillType>, d?: Nullable$1<boolean>, e?: string, f?: string, g?: string, h?: string, i?: string, j?: string, k?: string, l?: string, m?: string, n?: Nullable$1<ST_ImageAspect>, o?: string, p?: Nullable$1<number>, q?: Nullable$1<boolean>, r?: string, s?: string, t?: string, u?: Nullable$1<ST_FillMethod>, v?: Nullable$1<boolean>, w?: string, x?: string, y?: Nullable$1<boolean>, z?: Nullable$1<boolean>, aa?: string, ab?: string): void;
    static dr(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: string, g: string, h: string, i: string, j: string, k: Nullable$1<boolean>, l: Nullable$1<boolean>, m: string, n: string, o: string, p: string, q: string, r: string, s: Nullable$1<number>, t: Nullable$1<boolean>, u: Nullable$1<number>, v: string, w: string, x: string, y: string): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
        p6: string;
        p7: string;
        p8: string;
        p9: string;
        p10: Nullable$1<boolean>;
        p11: Nullable$1<boolean>;
        p12: string;
        p13: string;
        p14: string;
        p15: string;
        p16: string;
        p17: string;
        p18: Nullable$1<number>;
        p19: Nullable$1<boolean>;
        p20: Nullable$1<number>;
        p21: string;
        p22: string;
        p23: string;
        p24: string;
    };
    static d0(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: string, f?: string, g?: string, h?: string, i?: string, j?: string, k?: Nullable$1<boolean>, l?: Nullable$1<boolean>, m?: string, n?: string, o?: string, p?: string, q?: string, r?: string, s?: Nullable$1<number>, t?: Nullable$1<boolean>, u?: Nullable$1<number>, v?: string, w?: string, x?: string, y?: string): void;
    static ds(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: Nullable$1<boolean>, g: Nullable$1<boolean>, h: Nullable$1<boolean>, i: Nullable$1<boolean>, j: Nullable$1<boolean>, k: Nullable$1<boolean>, l: Nullable$1<boolean>, m: Nullable$1<ST_ConnectType>, n: string, o: string, p: Nullable$1<boolean>): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: Nullable$1<boolean>;
        p6: Nullable$1<boolean>;
        p7: Nullable$1<boolean>;
        p8: Nullable$1<boolean>;
        p9: Nullable$1<boolean>;
        p10: Nullable$1<boolean>;
        p11: Nullable$1<boolean>;
        p12: Nullable$1<ST_ConnectType>;
        p13: string;
        p14: string;
        p15: Nullable$1<boolean>;
    };
    static d1(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: string, f?: Nullable$1<boolean>, g?: Nullable$1<boolean>, h?: Nullable$1<boolean>, i?: Nullable$1<boolean>, j?: Nullable$1<boolean>, k?: Nullable$1<boolean>, l?: Nullable$1<boolean>, m?: Nullable$1<ST_ConnectType>, n?: string, o?: string, p?: Nullable$1<boolean>): void;
    static dt(a: XmlPartManagerBase, b: string, c: Nullable$1<boolean>, d: Nullable$1<ST_ShadowType>, e: Nullable$1<boolean>, f: string, g: string, h: string, i: string, j: string, k: string, l: string): {
        p1: string;
        p2: Nullable$1<boolean>;
        p3: Nullable$1<ST_ShadowType>;
        p4: Nullable$1<boolean>;
        p5: string;
        p6: string;
        p7: string;
        p8: string;
        p9: string;
        p10: string;
        p11: string;
    };
    static d2(a: XmlPartManagerBase, b?: string, c?: Nullable$1<boolean>, d?: Nullable$1<ST_ShadowType>, e?: Nullable$1<boolean>, f?: string, g?: string, h?: string, i?: string, j?: string, k?: string, l?: string): void;
    static du(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: string, g: string, h: string, i: string, j: string, k: string, l: Nullable$1<boolean>, m: string, n: Nullable$1<boolean>, o: string, p: Nullable$1<boolean>, q: Nullable$1<boolean>, r: Nullable$1<boolean>, s: Nullable$1<boolean>, t: Nullable$1<boolean>, u: Nullable$1<boolean>, v: Nullable$1<boolean>, w: Nullable$1<number>, x: Nullable$1<ST_HrAlign>, y: Nullable$1<boolean>, z: Nullable$1<boolean>, aa: Nullable$1<boolean>, ab: string, ac: string, ad: string, ae: string, af: string, ag: string, ah: string, ai: Nullable$1<ST_InsetMode>, aj: string, ak: Nullable$1<boolean>, al: string, am: string, an: Nullable$1<boolean>, ao: string, ap: string, aq: Nullable$1<boolean>, ar: Nullable$1<number>, as: Nullable$1<ST_ConnectorType>, at: Nullable$1<ST_BWMode>, au: Nullable$1<ST_BWMode>, av: Nullable$1<ST_BWMode>, aw: Nullable$1<boolean>, ax: Nullable$1<boolean>, ay: Nullable$1<boolean>, az: Nullable$1<boolean>, a0: Nullable$1<boolean>, a1: Nullable$1<boolean>, a2: string, a3: string, a4: string, a5: string, a6: string): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
        p6: string;
        p7: string;
        p8: string;
        p9: string;
        p10: string;
        p11: Nullable$1<boolean>;
        p12: string;
        p13: Nullable$1<boolean>;
        p14: string;
        p15: Nullable$1<boolean>;
        p16: Nullable$1<boolean>;
        p17: Nullable$1<boolean>;
        p18: Nullable$1<boolean>;
        p19: Nullable$1<boolean>;
        p20: Nullable$1<boolean>;
        p21: Nullable$1<boolean>;
        p22: Nullable$1<number>;
        p23: Nullable$1<ST_HrAlign>;
        p24: Nullable$1<boolean>;
        p25: Nullable$1<boolean>;
        p26: Nullable$1<boolean>;
        p27: string;
        p28: string;
        p29: string;
        p30: string;
        p31: string;
        p32: string;
        p33: string;
        p34: Nullable$1<ST_InsetMode>;
        p35: string;
        p36: Nullable$1<boolean>;
        p37: string;
        p38: string;
        p39: Nullable$1<boolean>;
        p40: string;
        p41: string;
        p42: Nullable$1<boolean>;
        p43: Nullable$1<number>;
        p44: Nullable$1<ST_ConnectorType>;
        p45: Nullable$1<ST_BWMode>;
        p46: Nullable$1<ST_BWMode>;
        p47: Nullable$1<ST_BWMode>;
        p48: Nullable$1<boolean>;
        p49: Nullable$1<boolean>;
        p50: Nullable$1<boolean>;
        p51: Nullable$1<boolean>;
        p52: Nullable$1<boolean>;
        p53: Nullable$1<boolean>;
        p54: string;
        p55: string;
        p56: string;
        p57: string;
        p58: string;
    };
    static d3(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: string, f?: string, g?: string, h?: string, i?: string, j?: string, k?: string, l?: Nullable$1<boolean>, m?: string, n?: Nullable$1<boolean>, o?: string, p?: Nullable$1<boolean>, q?: Nullable$1<boolean>, r?: Nullable$1<boolean>, s?: Nullable$1<boolean>, t?: Nullable$1<boolean>, u?: Nullable$1<boolean>, v?: Nullable$1<boolean>, w?: Nullable$1<number>, x?: Nullable$1<ST_HrAlign>, y?: Nullable$1<boolean>, z?: Nullable$1<boolean>, aa?: Nullable$1<boolean>, ab?: string, ac?: string, ad?: string, ae?: string, af?: string, ag?: string, ah?: string, ai?: Nullable$1<ST_InsetMode>, aj?: string, ak?: Nullable$1<boolean>, al?: string, am?: string, an?: Nullable$1<boolean>, ao?: string, ap?: string, aq?: Nullable$1<boolean>, ar?: Nullable$1<number>, as?: Nullable$1<ST_ConnectorType>, at?: Nullable$1<ST_BWMode>, au?: Nullable$1<ST_BWMode>, av?: Nullable$1<ST_BWMode>, aw?: Nullable$1<boolean>, ax?: Nullable$1<boolean>, ay?: Nullable$1<boolean>, az?: Nullable$1<boolean>, a0?: Nullable$1<boolean>, a1?: Nullable$1<boolean>, a2?: string, a3?: string, a4?: string, a5?: string, a6?: string): void;
    static dv(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: string, g: string, h: string, i: string, j: string, k: string, l: Nullable$1<boolean>, m: string, n: Nullable$1<boolean>, o: string, p: Nullable$1<boolean>, q: Nullable$1<boolean>, r: Nullable$1<boolean>, s: Nullable$1<boolean>, t: Nullable$1<boolean>, u: Nullable$1<boolean>, v: Nullable$1<boolean>, w: Nullable$1<number>, x: Nullable$1<ST_HrAlign>, y: Nullable$1<boolean>, z: Nullable$1<boolean>, aa: Nullable$1<boolean>, ab: string, ac: string, ad: string, ae: string, af: string, ag: string, ah: string, ai: Nullable$1<ST_InsetMode>, aj: string, ak: Nullable$1<boolean>, al: string, am: string, an: Nullable$1<boolean>, ao: string, ap: string, aq: Nullable$1<boolean>, ar: Nullable$1<number>, as: Nullable$1<ST_ConnectorType>, at: Nullable$1<ST_BWMode>, au: Nullable$1<ST_BWMode>, av: Nullable$1<ST_BWMode>, aw: Nullable$1<boolean>, ax: Nullable$1<boolean>, ay: Nullable$1<boolean>, az: Nullable$1<boolean>, a0: Nullable$1<boolean>, a1: Nullable$1<boolean>, a2: string, a3: string, a4: string): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
        p6: string;
        p7: string;
        p8: string;
        p9: string;
        p10: string;
        p11: Nullable$1<boolean>;
        p12: string;
        p13: Nullable$1<boolean>;
        p14: string;
        p15: Nullable$1<boolean>;
        p16: Nullable$1<boolean>;
        p17: Nullable$1<boolean>;
        p18: Nullable$1<boolean>;
        p19: Nullable$1<boolean>;
        p20: Nullable$1<boolean>;
        p21: Nullable$1<boolean>;
        p22: Nullable$1<number>;
        p23: Nullable$1<ST_HrAlign>;
        p24: Nullable$1<boolean>;
        p25: Nullable$1<boolean>;
        p26: Nullable$1<boolean>;
        p27: string;
        p28: string;
        p29: string;
        p30: string;
        p31: string;
        p32: string;
        p33: string;
        p34: Nullable$1<ST_InsetMode>;
        p35: string;
        p36: Nullable$1<boolean>;
        p37: string;
        p38: string;
        p39: Nullable$1<boolean>;
        p40: string;
        p41: string;
        p42: Nullable$1<boolean>;
        p43: Nullable$1<number>;
        p44: Nullable$1<ST_ConnectorType>;
        p45: Nullable$1<ST_BWMode>;
        p46: Nullable$1<ST_BWMode>;
        p47: Nullable$1<ST_BWMode>;
        p48: Nullable$1<boolean>;
        p49: Nullable$1<boolean>;
        p50: Nullable$1<boolean>;
        p51: Nullable$1<boolean>;
        p52: Nullable$1<boolean>;
        p53: Nullable$1<boolean>;
        p54: string;
        p55: string;
        p56: string;
    };
    static d4(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: string, f?: string, g?: string, h?: string, i?: string, j?: string, k?: string, l?: Nullable$1<boolean>, m?: string, n?: Nullable$1<boolean>, o?: string, p?: Nullable$1<boolean>, q?: Nullable$1<boolean>, r?: Nullable$1<boolean>, s?: Nullable$1<boolean>, t?: Nullable$1<boolean>, u?: Nullable$1<boolean>, v?: Nullable$1<boolean>, w?: Nullable$1<number>, x?: Nullable$1<ST_HrAlign>, y?: Nullable$1<boolean>, z?: Nullable$1<boolean>, aa?: Nullable$1<boolean>, ab?: string, ac?: string, ad?: string, ae?: string, af?: string, ag?: string, ah?: string, ai?: Nullable$1<ST_InsetMode>, aj?: string, ak?: Nullable$1<boolean>, al?: string, am?: string, an?: Nullable$1<boolean>, ao?: string, ap?: string, aq?: Nullable$1<boolean>, ar?: Nullable$1<number>, as?: Nullable$1<ST_ConnectorType>, at?: Nullable$1<ST_BWMode>, au?: Nullable$1<ST_BWMode>, av?: Nullable$1<ST_BWMode>, aw?: Nullable$1<boolean>, ax?: Nullable$1<boolean>, ay?: Nullable$1<boolean>, az?: Nullable$1<boolean>, a0?: Nullable$1<boolean>, a1?: Nullable$1<boolean>, a2?: string, a3?: string, a4?: string): void;
    static dw(a: XmlPartManagerBase, b: string, c: Nullable$1<boolean>, d: string, e: string, f: string, g: Nullable$1<ST_StrokeLineStyle>, h: Nullable$1<number>, i: Nullable$1<ST_StrokeJoinStyle>, j: Nullable$1<ST_StrokeEndCap>, k: string, l: Nullable$1<ST_FillType>, m: string, n: Nullable$1<ST_ImageAspect>, o: string, p: Nullable$1<boolean>, q: string, r: Nullable$1<ST_StrokeArrowType>, s: Nullable$1<ST_StrokeArrowWidth>, t: Nullable$1<ST_StrokeArrowLength>, u: Nullable$1<ST_StrokeArrowType>, v: Nullable$1<ST_StrokeArrowWidth>, w: Nullable$1<ST_StrokeArrowLength>, x: string, y: string, z: string, aa: Nullable$1<boolean>, ab: string, ac: Nullable$1<boolean>, ad: string): {
        p1: string;
        p2: Nullable$1<boolean>;
        p3: string;
        p4: string;
        p5: string;
        p6: Nullable$1<ST_StrokeLineStyle>;
        p7: Nullable$1<number>;
        p8: Nullable$1<ST_StrokeJoinStyle>;
        p9: Nullable$1<ST_StrokeEndCap>;
        p10: string;
        p11: Nullable$1<ST_FillType>;
        p12: string;
        p13: Nullable$1<ST_ImageAspect>;
        p14: string;
        p15: Nullable$1<boolean>;
        p16: string;
        p17: Nullable$1<ST_StrokeArrowType>;
        p18: Nullable$1<ST_StrokeArrowWidth>;
        p19: Nullable$1<ST_StrokeArrowLength>;
        p20: Nullable$1<ST_StrokeArrowType>;
        p21: Nullable$1<ST_StrokeArrowWidth>;
        p22: Nullable$1<ST_StrokeArrowLength>;
        p23: string;
        p24: string;
        p25: string;
        p26: Nullable$1<boolean>;
        p27: string;
        p28: Nullable$1<boolean>;
        p29: string;
    };
    static d5(a: XmlPartManagerBase, b?: string, c?: Nullable$1<boolean>, d?: string, e?: string, f?: string, g?: Nullable$1<ST_StrokeLineStyle>, h?: Nullable$1<number>, i?: Nullable$1<ST_StrokeJoinStyle>, j?: Nullable$1<ST_StrokeEndCap>, k?: string, l?: Nullable$1<ST_FillType>, m?: string, n?: Nullable$1<ST_ImageAspect>, o?: string, p?: Nullable$1<boolean>, q?: string, r?: Nullable$1<ST_StrokeArrowType>, s?: Nullable$1<ST_StrokeArrowWidth>, t?: Nullable$1<ST_StrokeArrowLength>, u?: Nullable$1<ST_StrokeArrowType>, v?: Nullable$1<ST_StrokeArrowWidth>, w?: Nullable$1<ST_StrokeArrowLength>, x?: string, y?: string, z?: string, aa?: Nullable$1<boolean>, ab?: string, ac?: Nullable$1<boolean>, ad?: string): void;
    static dx(a: XmlPartManagerBase, b: string, c: string, d: string, e: Nullable$1<boolean>, f: Nullable$1<ST_InsetMode>): {
        p1: string;
        p2: string;
        p3: string;
        p4: Nullable$1<boolean>;
        p5: Nullable$1<ST_InsetMode>;
    };
    static d6(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: Nullable$1<boolean>, f?: Nullable$1<ST_InsetMode>): void;
}
/**
 * @hidden
 */
export declare class XmlNamespace extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly aq: string;
    static readonly as: string;
    static readonly ao: XmlNamespace;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static at(a: XmlWriteManager): void;
}
/**
 * @hidden
 */
export declare class XmlSchemaInstance extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly aq;
    static readonly ar: string;
    static readonly ao: XmlSchemaInstance;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
}
