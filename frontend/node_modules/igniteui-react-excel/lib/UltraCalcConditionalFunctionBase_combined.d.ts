import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcNumberStack } from "./ExcelCalcNumberStack";
import { UltraCalcConditionalFunctionBase_CriteriaEvaluator } from "./UltraCalcConditionalFunctionBase_CriteriaEvaluator";
import { ArrayProxy } from "./ArrayProxy";
import { Base, Type } from "igniteui-react-core";
import { ArrayValueContext } from "./ArrayValueContext";
/**
 * @hidden
 */
export declare abstract class UltraCalcConditionalFunctionBase extends BuiltInFunctionBase {
    static $t: Type;
    doesParameterAllowIntermediateResultArray(a: number, b: boolean): boolean;
    protected evaluate(a: ExcelCalcNumberStack, b: number): ExcelCalcValue;
    protected get_minArgs(): number;
    get minArgs(): number;
    protected get_maxArgs(): number;
    get maxArgs(): number;
    _v(a: number): boolean;
    protected abstract _al(a: number, b: number): ExcelCalcValue;
    protected get__am(): boolean;
    get _am(): boolean;
    protected get__an(): boolean;
    protected get _an(): boolean;
    static _ak(a: ExcelCalcNumberStack, b: number, c: number, d: (arg1: number, arg2: number) => ExcelCalcValue, e?: (arg1: number, arg2: number) => number): ExcelCalcValue;
}
/**
 * @hidden
 */
export declare class UltraCalcConditionalFunctionBase_EvaluateHelper extends Base {
    static $t: Type;
    private c;
    private b;
    private a;
    private d;
    private f;
    constructor(a: UltraCalcConditionalFunctionBase, b: UltraCalcConditionalFunctionBase_CriteriaEvaluator, c: ArrayProxy);
    h(a: ExcelCalcValue, b: ArrayValueContext): void;
    get e(): number;
    get g(): number;
}
