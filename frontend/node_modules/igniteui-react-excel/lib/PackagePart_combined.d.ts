import { Base, IEnumerable$1, Stream, Type } from "igniteui-react-core";
import { IPackagePart } from "./IPackagePart";
import { IPackagePartEx } from "./IPackagePartEx";
import { IPackage } from "./IPackage";
import { Uri } from "igniteui-react-core";
import { IZipEntry } from "./IZipEntry";
import { IPackageRelationship } from "./IPackageRelationship";
import { IZipFile } from "./IZipFile";
import { WorkItem$1 } from "./WorkItem$1";
import { FileMode } from "./FileMode";
import { FileAccess } from "./FileAccess";
import { RelationshipTargetMode } from "./RelationshipTargetMode";
import { IDictionary$2 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { WorkItem } from "./WorkItem";
/**
 * @hidden
 */
export declare class PackagePart extends Base implements IPackagePart, IPackagePartEx {
    static $t: Type;
    f: Stream;
    private d;
    constructor(a: IPackage, b: Uri, c: string);
    private _$package;
    get $package(): IPackage;
    set $package(a: IPackage);
    private _uri;
    get uri(): Uri;
    set uri(a: Uri);
    private _contentType;
    get contentType(): string;
    set contentType(a: string);
    b: IZipEntry;
    getStream(a: FileMode, b: FileAccess): WorkItem$1<Stream>;
    createRelationship(a: Uri, b: RelationshipTargetMode, c: string, d: string): IPackageRelationship;
    createExternalRelationship(a: string, b: string, c: string): IPackageRelationship;
    private a;
    getRelationships(): IEnumerable$1<IPackageRelationship>;
    getRelationship(a: string): IPackageRelationship;
    get e(): IEnumerable$1<IPackageRelationship>;
    c(): WorkItem;
    private j;
}
/**
 * @hidden
 */
export declare class Package extends Base implements IPackage {
    static $t: Type;
    private static readonly _v;
    private _i;
    private _j;
    private _s;
    private _t;
    private _r;
    private readonly _m;
    private _p;
    private _k;
    _l: Dictionary$2<string, string>;
    static staticInit(): void;
    constructor();
    get _o(): IEnumerable$1<IPackageRelationship>;
    get _n(): IDictionary$2<string, PackagePart>;
    _q: FileMode;
    _c: IZipFile;
    _b: IZipEntry;
    _a: IZipEntry;
    _h: WorkItem;
    static _d(a: Stream, b: FileMode): WorkItem$1<IPackage>;
    static _createUsingFile(a: Stream, b: FileMode, c: IZipFile): WorkItem$1<IPackage>;
    createPart(a: Uri, b: string): IPackagePart;
    createRelationship(a: Uri, b: RelationshipTargetMode, c: string, d: string): IPackageRelationship;
    getRelationships(): IEnumerable$1<IPackageRelationship>;
    getPart(a: Uri): IPackagePart;
    getParts(): IEnumerable$1<IPackagePart>;
    getRelationship(a: string): IPackageRelationship;
    private _aa;
    private _f;
    private _g;
    partExists(a: Uri): boolean;
    dispose(): void;
    private _ah;
    private _ai;
}
/**
 * @hidden
 */
export declare class ContentTypesWriter extends Base {
    static $t: Type;
    private static readonly d;
    private static readonly b;
    private static k;
    private static l;
    static j(a: Package, b: Stream): void;
}
