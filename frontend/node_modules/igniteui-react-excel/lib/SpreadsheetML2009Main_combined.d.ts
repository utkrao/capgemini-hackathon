import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_ConformanceClass } from "./ST_ConformanceClass";
import { XmlPartManagerBase } from "./XmlPartManagerBase";
import { ST_DataValidationType } from "./ST_DataValidationType";
import { ST_DataValidationErrorStyle } from "./ST_DataValidationErrorStyle";
import { ST_DataValidationImeMode } from "./ST_DataValidationImeMode";
import { ST_DataValidationOperator } from "./ST_DataValidationOperator";
import { Nullable$1, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { ST_CfType } from "./ST_CfType";
import { ST_ConditionalFormattingOperator } from "./ST_ConditionalFormattingOperator";
import { ST_TimePeriod } from "./ST_TimePeriod";
import { ST_CfvoType } from "./ST_CfvoType";
import { ST_DataBarDirection } from "./ST_DataBarDirection";
import { ST_DataBarAxisPosition } from "./ST_DataBarAxisPosition";
import { ST_IconSetType } from "./ST_IconSetType";
import { ST_BorderStyle } from "./ST_BorderStyle";
import { ST_UnsignedIntHex } from "./ST_UnsignedIntHex";
import { ST_HorizontalAlignment } from "./ST_HorizontalAlignment";
import { ST_VerticalAlignment } from "./ST_VerticalAlignment";
import { ST_CalcMode } from "./ST_CalcMode";
import { ST_RefMode } from "./ST_RefMode";
import { ST_CellType } from "./ST_CellType";
import { ST_UnsignedShortHex } from "./ST_UnsignedShortHex";
import { ST_Guid } from "./ST_Guid";
import { ST_SheetState } from "./ST_SheetState";
import { ST_FilterOperator } from "./ST_FilterOperator";
import { ST_SheetViewType } from "./ST_SheetViewType";
import { ST_Comments } from "./ST_Comments";
import { ST_Objects } from "./ST_Objects";
import { ST_DateTimeGrouping } from "./ST_DateTimeGrouping";
import { ST_DynamicFilterType } from "./ST_DynamicFilterType";
import { ST_CellFormulaType } from "./ST_CellFormulaType";
import { ST_CalendarType } from "./ST_CalendarType";
import { ST_GradientType } from "./ST_GradientType";
import { ST_PageOrder } from "./ST_PageOrder";
import { ST_Orientation } from "./ST_Orientation";
import { ST_CellComments } from "./ST_CellComments";
import { ST_PrintError } from "./ST_PrintError";
import { ST_Pane } from "./ST_Pane";
import { ST_PaneState } from "./ST_PaneState";
import { ST_PatternType } from "./ST_PatternType";
import { ST_FontScheme } from "./ST_FontScheme";
import { ST_SortBy } from "./ST_SortBy";
import { ST_SortMethod } from "./ST_SortMethod";
import { ST_TotalsRowFunction } from "./ST_TotalsRowFunction";
import { ST_TableType } from "./ST_TableType";
import { ST_TableStyleType } from "./ST_TableStyleType";
import { ST_UnderlineValues } from "./ST_UnderlineValues";
import { ST_VerticalAlignRun } from "./ST_VerticalAlignRun";
import { ST_UpdateLinks } from "./ST_UpdateLinks";
import { ST_Visibility } from "./ST_Visibility";
/**
 * @hidden
 */
export declare class SpreadsheetML2009Main extends XmlNamespaceDefinitionBase {
    static $t: Type;
    static readonly b1: string;
    static readonly as: string;
    static readonly av: string;
    static readonly a9: string;
    static readonly ba: string;
    static readonly aw: string;
    static readonly ax: string;
    static readonly ay: string;
    static readonly az: string;
    static readonly a7: string;
    static readonly bd: string;
    static readonly be: string;
    static readonly bf: string;
    static readonly bj: string;
    static readonly bn: string;
    static readonly bo: string;
    static readonly bp: string;
    static readonly bs: string;
    static readonly bu: string;
    static readonly bw: string;
    static readonly b4: string;
    static readonly b5: string;
    static readonly b6: string;
    static readonly b8: string;
    static readonly cg: string;
    static readonly ch: string;
    static readonly ci: string;
    static readonly ck: string;
    static readonly cm: string;
    static readonly cn: string;
    static readonly co: string;
    static readonly cp: string;
    static readonly cr: string;
    static readonly a0: string;
    static readonly a1: string;
    static readonly a2: string;
    static readonly a3: string;
    static readonly a4: string;
    static readonly a5: string;
    static readonly a6: string;
    static readonly a8: string;
    static readonly ao: SpreadsheetML2009Main;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    static cz(a: XmlPartManagerBase, b: ST_DataValidationType, c: ST_DataValidationErrorStyle, d: ST_DataValidationImeMode, e: ST_DataValidationOperator, f: boolean, g: boolean, h: boolean, i: boolean, j: string, k: string, l: string, m: string): {
        p1: ST_DataValidationType;
        p2: ST_DataValidationErrorStyle;
        p3: ST_DataValidationImeMode;
        p4: ST_DataValidationOperator;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: string;
        p10: string;
        p11: string;
        p12: string;
    };
    static dh(a: XmlPartManagerBase, b?: ST_DataValidationType, c?: ST_DataValidationErrorStyle, d?: ST_DataValidationImeMode, e?: ST_DataValidationOperator, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: string, k?: string, l?: string, m?: string): void;
    static c0(a: XmlPartManagerBase, b: boolean, c: Nullable$1<number>, d: Nullable$1<number>, e: Nullable$1<number>): {
        p1: boolean;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
    };
    static di(a: XmlPartManagerBase, b?: boolean, c?: Nullable$1<number>, d?: Nullable$1<number>, e?: Nullable$1<number>): void;
    static c1(a: XmlPartManagerBase): void;
    static dj(a: XmlPartManagerBase): void;
    static c2(a: XmlPartManagerBase): void;
    static dk(a: XmlPartManagerBase): void;
    static c3(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static dl(a: XmlPartManagerBase, b: string): void;
    static df(a: XmlPartManagerBase): void;
    static cx(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static de(a: XmlPartManagerBase, b: string, c: Nullable$1<boolean>): void;
    static dd(a: XmlPartManagerBase): void;
    static db(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_CfType>, d?: number, e?: boolean, f?: Nullable$1<ST_ConditionalFormattingOperator>, g?: Nullable$1<boolean>): void;
    static cw(a: XmlPartManagerBase, b: ST_CfvoType, c: string, d: boolean): {
        p1: ST_CfvoType;
        p2: string;
        p3: boolean;
    };
    static dc(a: XmlPartManagerBase, b: ST_CfvoType, c?: boolean): void;
    static cy(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>, d: Nullable$1<boolean>, e: Nullable$1<boolean>, f: Nullable$1<boolean>, g: Nullable$1<ST_DataBarDirection>, h: Nullable$1<boolean>, i: Nullable$1<boolean>, j: Nullable$1<ST_DataBarAxisPosition>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<number>;
        p3: Nullable$1<boolean>;
        p4: Nullable$1<boolean>;
        p5: Nullable$1<boolean>;
        p6: Nullable$1<ST_DataBarDirection>;
        p7: Nullable$1<boolean>;
        p8: Nullable$1<boolean>;
        p9: Nullable$1<ST_DataBarAxisPosition>;
    };
    static dg(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>, d: Nullable$1<boolean>, e: Nullable$1<boolean>, f: Nullable$1<boolean>, g: Nullable$1<ST_DataBarDirection>, h: Nullable$1<boolean>, i: Nullable$1<boolean>, j: Nullable$1<ST_DataBarAxisPosition>): void;
    static cv(a: XmlPartManagerBase, b: ST_IconSetType, c: number): {
        p1: ST_IconSetType;
        p2: number;
    };
    static da(a: XmlPartManagerBase, b: ST_IconSetType, c: number): void;
    static c4(a: XmlPartManagerBase, b: string, c: boolean, d: boolean, e: boolean): {
        p1: string;
        p2: boolean;
        p3: boolean;
        p4: boolean;
    };
    static dm(a: XmlPartManagerBase, b?: string, c?: boolean, d?: boolean, e?: boolean): void;
    static c5(a: XmlPartManagerBase): void;
    static dn(a: XmlPartManagerBase): void;
    static c8(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static dr(a: XmlPartManagerBase, b: string): void;
    static c6(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static dp(a: XmlPartManagerBase, b: string): void;
    static c7(a: XmlPartManagerBase): void;
    static dq(a: XmlPartManagerBase): void;
    static c9(a: XmlPartManagerBase): void;
    static ds(a: XmlPartManagerBase): void;
}
/**
 * @hidden
 */
export declare class SpreadsheetMLMain extends XmlNamespaceDefinitionBase {
    static $t: Type;
    private static readonly lh;
    private static readonly lg;
    static readonly ck: string;
    static readonly cp: string;
    static readonly c0: string;
    static readonly c2: string;
    static readonly c6: string;
    static readonly dd: string;
    static readonly dh: string;
    static readonly dk: string;
    static readonly dl: string;
    static readonly dn: string;
    static readonly dp: string;
    static readonly dr: string;
    static readonly du: string;
    static readonly d1: string;
    static readonly d2: string;
    static readonly d5: string;
    static readonly d8: string;
    static readonly d9: string;
    static readonly ea: string;
    static readonly eb: string;
    static readonly eg: string;
    static readonly eh: string;
    static readonly ej: string;
    static readonly eq: string;
    static readonly er: string;
    static readonly eu: string;
    static readonly ey: string;
    static readonly ev: string;
    static readonly ex: string;
    static readonly ez: string;
    static readonly e1: string;
    static readonly e3: string;
    static readonly e4: string;
    static readonly e7: string;
    static readonly e8: string;
    static readonly fd: string;
    static readonly fe: string;
    static readonly ff: string;
    static readonly fk: string;
    static readonly fl: string;
    static readonly fq: string;
    static readonly fr: string;
    static readonly ft: string;
    static readonly fu: string;
    static readonly fv: string;
    static readonly fy: string;
    static readonly fz: string;
    static readonly f2: string;
    static readonly f5: string;
    static readonly f6: string;
    static readonly f7: string;
    static readonly gh: string;
    static readonly gi: string;
    static readonly gr: string;
    static readonly gw: string;
    static readonly g2: string;
    static readonly g3: string;
    static readonly g6: string;
    static readonly g8: string;
    static readonly g9: string;
    static readonly hb: string;
    static readonly hi: string;
    static readonly hj: string;
    static readonly hk: string;
    static readonly hl: string;
    static readonly hm: string;
    static readonly hn: string;
    static readonly ho: string;
    static readonly hp: string;
    static readonly hq: string;
    static readonly hr: string;
    static readonly hs: string;
    static readonly ht: string;
    static readonly hu: string;
    static readonly hv: string;
    static readonly hw: string;
    static readonly hy: string;
    static readonly hz: string;
    static readonly h1: string;
    static readonly h4: string;
    static readonly h7: string;
    static readonly h8: string;
    static readonly ie: string;
    static readonly ih: string;
    static readonly ik: string;
    static readonly iq: string;
    static readonly ir: string;
    static readonly is: string;
    static readonly it: string;
    static readonly iy: string;
    static readonly i5: string;
    static readonly jh: string;
    static readonly jn: string;
    static readonly jo: string;
    static readonly jp: string;
    static readonly jr: string;
    static readonly jt: string;
    static readonly j2: string;
    static readonly b8: string;
    static readonly kd: string;
    static readonly kf: string;
    static readonly kg: string;
    static readonly k5: string;
    static readonly k6: string;
    static readonly le: string;
    static readonly li: string;
    static readonly lk: string;
    static readonly lm: string;
    static readonly ln: string;
    static readonly lp: string;
    static readonly lq: string;
    static readonly lr: string;
    static readonly lv: string;
    static readonly l0: string;
    static readonly l2: string;
    static readonly l4: string;
    static readonly l5: string;
    static readonly l6: string;
    static readonly mc: string;
    static readonly mi: string;
    static readonly ml: string;
    static readonly mm: string;
    static readonly mn: string;
    static readonly mt: string;
    static readonly mz: string;
    static readonly m0: string;
    static readonly m1: string;
    static readonly m8: string;
    static readonly nw: string;
    static readonly ny: string;
    static readonly n2: string;
    static readonly n5: string;
    static readonly n6: string;
    static readonly n7: string;
    static readonly of: string;
    static readonly oi: string;
    static readonly on: string;
    static readonly op: string;
    static readonly oq: string;
    static readonly or: string;
    static readonly os: string;
    static readonly ou: string;
    static readonly ov: string;
    static readonly ow: string;
    static readonly ox: string;
    static readonly oy: string;
    static readonly oz: string;
    static readonly o0: string;
    static readonly ol: string;
    static readonly pw: string;
    static readonly p2: string;
    static readonly p4: string;
    static readonly p8: string;
    static readonly p9: string;
    static readonly qd: string;
    static readonly qf: string;
    static readonly qh: string;
    static readonly qn: string;
    static readonly qo: string;
    static readonly qq: string;
    static readonly qr: string;
    static readonly qu: string;
    static readonly qv: string;
    static readonly qw: string;
    static readonly qx: string;
    static readonly qy: string;
    static readonly qz: string;
    static readonly q0: string;
    static readonly q1: string;
    static readonly q5: string;
    static readonly rf: string;
    static readonly rh: string;
    static readonly rn: string;
    static readonly ru: string;
    static readonly r4: string;
    static readonly r8: string;
    static readonly r9: string;
    static readonly sk: string;
    static readonly sp: string;
    static readonly sq: string;
    static readonly st: string;
    static readonly sv: string;
    static readonly sy: string;
    static readonly s1: string;
    static readonly ap: SpreadsheetMLMain;
    constructor();
    s(a: ST_ConformanceClass): string;
    protected get_t(): string;
    get t(): string;
    private static tk;
    private static hh;
    private static rw;
    private static ur;
    private static aac;
    static us(a: XmlPartManagerBase, b: string, c: ST_BorderStyle): {
        p2: ST_BorderStyle;
    };
    static aad(a: XmlPartManagerBase, b: string, c?: ST_BorderStyle): void;
    static ut(a: XmlPartManagerBase, b: string, c: Nullable$1<boolean>, d: Nullable$1<number>, e: Nullable$1<ST_UnsignedIntHex>, f: Nullable$1<number>, g: number): {
        p2: Nullable$1<boolean>;
        p3: Nullable$1<number>;
        p4: Nullable$1<ST_UnsignedIntHex>;
        p5: Nullable$1<number>;
        p6: number;
    };
    static aae(a: XmlPartManagerBase, b: string, c?: Nullable$1<boolean>, d?: Nullable$1<number>, e?: Nullable$1<ST_UnsignedIntHex>, f?: Nullable$1<number>, g?: number): void;
    private static uu;
    private static aaf;
    private static uv;
    private static aag;
    private static uw;
    private static aah;
    static tl(a: XmlPartManagerBase, b: Nullable$1<ST_HorizontalAlignment>, c: Nullable$1<ST_VerticalAlignment>, d: Nullable$1<number>, e: boolean, f: Nullable$1<number>, g: Nullable$1<number>, h: boolean, i: boolean, j: Nullable$1<number>): {
        p1: Nullable$1<ST_HorizontalAlignment>;
        p2: Nullable$1<ST_VerticalAlignment>;
        p3: Nullable$1<number>;
        p4: boolean;
        p5: Nullable$1<number>;
        p6: Nullable$1<number>;
        p7: boolean;
        p8: boolean;
        p9: Nullable$1<number>;
    };
    static y6(a: XmlPartManagerBase, b?: Nullable$1<ST_HorizontalAlignment>, c?: Nullable$1<ST_VerticalAlignment>, d?: Nullable$1<number>, e?: boolean, f?: Nullable$1<number>, g?: Nullable$1<number>, h?: boolean, i?: boolean, j?: Nullable$1<number>): void;
    static tm(a: XmlPartManagerBase, b: boolean, c: boolean): {
        p1: boolean;
        p2: boolean;
    };
    static y7(a: XmlPartManagerBase, b?: boolean, c?: boolean): void;
    static tn(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static y8(a: XmlPartManagerBase, b: string): void;
    static to(a: XmlPartManagerBase): void;
    static y9(a: XmlPartManagerBase): void;
    static tp(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static za(a: XmlPartManagerBase, b: string): void;
    static tq(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static zb(a: XmlPartManagerBase, b?: boolean): void;
    static tr(a: XmlPartManagerBase, b: Nullable$1<boolean>, c: Nullable$1<number>, d: Nullable$1<ST_UnsignedIntHex>, e: Nullable$1<number>, f: number): {
        p1: Nullable$1<boolean>;
        p2: Nullable$1<number>;
        p3: Nullable$1<ST_UnsignedIntHex>;
        p4: Nullable$1<number>;
        p5: number;
    };
    static zc(a: XmlPartManagerBase, b?: Nullable$1<boolean>, c?: Nullable$1<number>, d?: Nullable$1<ST_UnsignedIntHex>, e?: Nullable$1<number>, f?: number): void;
    static ts(a: XmlPartManagerBase): void;
    static zd(a: XmlPartManagerBase): void;
    static tt(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
    };
    static ze(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean): void;
    static tu(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static zf(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static tv(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static zg(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static tw(a: XmlPartManagerBase, b: number, c: Nullable$1<number>, d: Nullable$1<number>, e: boolean, f: boolean): {
        p1: number;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
        p4: boolean;
        p5: boolean;
    };
    static zh(a: XmlPartManagerBase, b?: number, c?: Nullable$1<number>, d?: Nullable$1<number>, e?: boolean, f?: boolean): void;
    static tx(a: XmlPartManagerBase, b: Nullable$1<number>, c: ST_CalcMode, d: boolean, e: ST_RefMode, f: boolean, g: number, h: number, i: boolean, j: boolean, k: boolean, l: boolean, m: Nullable$1<number>, n: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: ST_CalcMode;
        p3: boolean;
        p4: ST_RefMode;
        p5: boolean;
        p6: number;
        p7: number;
        p8: boolean;
        p9: boolean;
        p10: boolean;
        p11: boolean;
        p12: Nullable$1<number>;
        p13: Nullable$1<boolean>;
    };
    static zi(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: ST_CalcMode, d?: boolean, e?: ST_RefMode, f?: boolean, g?: number, h?: number, i?: boolean, j?: boolean, k?: boolean, l?: boolean, m?: Nullable$1<number>, n?: Nullable$1<boolean>): void;
    static ty(a: XmlPartManagerBase, b: string, c: boolean): {
        p1: string;
        p2: boolean;
    };
    static zj(a: XmlPartManagerBase, b: string, c?: boolean): void;
    static tz(a: XmlPartManagerBase, b: string, c: number, d: ST_CellType, e: number, f: number, g: boolean): {
        p1: string;
        p2: number;
        p3: ST_CellType;
        p4: number;
        p5: number;
        p6: boolean;
    };
    static ar(a: string): ST_CellType;
    static zk(a: XmlPartManagerBase, b: string, c?: number, d?: ST_CellType, e?: number, f?: number, g?: boolean): void;
    static t0(a: XmlPartManagerBase, b: string, c: ST_CellType, d: number): {
        p1: string;
        p2: ST_CellType;
        p3: number;
    };
    static zl(a: XmlPartManagerBase, b?: string, c?: ST_CellType, d?: number): void;
    static t1(a: XmlPartManagerBase, b: number, c: string, d: Nullable$1<number>, e: Nullable$1<number>, f: boolean, g: boolean): {
        p1: number;
        p2: string;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
        p5: boolean;
        p6: boolean;
    };
    static zm(a: XmlPartManagerBase, b: number, c?: string, d?: Nullable$1<number>, e?: Nullable$1<number>, f?: boolean, g?: boolean): void;
    static t2(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static zn(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static t3(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static zo(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static t4(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static zp(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static t5(a: XmlPartManagerBase, b: string, c: Nullable$1<ST_CfType>, d: Nullable$1<number>, e: Nullable$1<number>, f: Nullable$1<boolean>, g: boolean, h: boolean, i: boolean, j: Nullable$1<ST_ConditionalFormattingOperator>, k: string, l: Nullable$1<ST_TimePeriod>, m: Nullable$1<number>, n: Nullable$1<number>, o: boolean, p: string, q: Nullable$1<boolean>): {
        p2: Nullable$1<ST_CfType>;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
        p5: Nullable$1<boolean>;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: Nullable$1<ST_ConditionalFormattingOperator>;
        p10: string;
        p11: Nullable$1<ST_TimePeriod>;
        p12: Nullable$1<number>;
        p13: Nullable$1<number>;
        p14: boolean;
        p15: string;
        p16: Nullable$1<boolean>;
    };
    static zq(a: XmlPartManagerBase, b: string, c?: Nullable$1<ST_CfType>, d?: Nullable$1<number>, e?: number, f?: boolean, g?: Nullable$1<boolean>, h?: Nullable$1<boolean>, i?: Nullable$1<boolean>, j?: Nullable$1<ST_ConditionalFormattingOperator>, k?: string, l?: Nullable$1<ST_TimePeriod>, m?: Nullable$1<number>, n?: Nullable$1<number>, o?: Nullable$1<boolean>, p?: string, q?: Nullable$1<boolean>): void;
    static t6(a: XmlPartManagerBase, b: ST_CfvoType, c: string, d: boolean): {
        p1: ST_CfvoType;
        p2: string;
        p3: boolean;
    };
    static t7(a: XmlPartManagerBase, b: string, c: ST_CfvoType, d: string, e: boolean): {
        p2: ST_CfvoType;
        p3: string;
        p4: boolean;
    };
    static zr(a: XmlPartManagerBase, b: ST_CfvoType, c?: string, d?: boolean): void;
    static t8(a: XmlPartManagerBase): void;
    static zs(a: XmlPartManagerBase): void;
    static uc(a: XmlPartManagerBase, b: number, c: boolean, d: number, e: boolean): {
        p1: number;
        p2: boolean;
        p3: number;
        p4: boolean;
    };
    static zw(a: XmlPartManagerBase, b: number, c?: boolean, d?: number, e?: boolean): void;
    static t9(a: XmlPartManagerBase, b: boolean, c: string): {
        p1: boolean;
        p2: string;
    };
    static zt(a: XmlPartManagerBase, b?: boolean, c?: string): void;
    static ua(a: XmlPartManagerBase, b: Nullable$1<ST_UnsignedShortHex>, c: boolean, d: boolean): {
        p1: Nullable$1<ST_UnsignedShortHex>;
        p2: boolean;
        p3: boolean;
    };
    static zu(a: XmlPartManagerBase, b?: Nullable$1<ST_UnsignedShortHex>, c?: boolean, d?: boolean): void;
    static ub(a: XmlPartManagerBase, b: string, c: string, d: string, e: Nullable$1<number>, f: boolean, g: boolean): {
        p1: string;
        p2: string;
        p3: string;
        p4: Nullable$1<number>;
        p5: boolean;
        p6: boolean;
    };
    static zv(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: Nullable$1<number>, f?: boolean, g?: boolean): void;
    static ud(a: XmlPartManagerBase, b: number, c: number): {
        p1: number;
        p2: number;
    };
    static zx(a: XmlPartManagerBase, b: number, c: number): void;
    static ue(a: XmlPartManagerBase, b: number, c: number, d: Nullable$1<number>, e: number, f: boolean, g: boolean, h: boolean, i: boolean, j: number, k: boolean): {
        p1: number;
        p2: number;
        p3: Nullable$1<number>;
        p4: number;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: number;
        p10: boolean;
    };
    static zy(a: XmlPartManagerBase, b: number, c: number, d?: Nullable$1<number>, e?: number, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: number, k?: boolean): void;
    static uf(a: XmlPartManagerBase, b: Nullable$1<boolean>, c: Nullable$1<number>, d: Nullable$1<ST_UnsignedIntHex>, e: Nullable$1<number>, f: number): {
        p1: Nullable$1<boolean>;
        p2: Nullable$1<number>;
        p3: Nullable$1<ST_UnsignedIntHex>;
        p4: Nullable$1<number>;
        p5: number;
    };
    static zz(a: XmlPartManagerBase, b?: Nullable$1<boolean>, c?: Nullable$1<number>, d?: Nullable$1<ST_UnsignedIntHex>, e?: Nullable$1<number>, f?: number): void;
    static ug(a: XmlPartManagerBase, b: Nullable$1<number>, c: boolean): {
        p1: Nullable$1<number>;
        p2: boolean;
    };
    static z0(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: boolean): void;
    static z1(a: XmlPartManagerBase): void;
    static uh(a: XmlPartManagerBase): void;
    static z2(a: XmlPartManagerBase): void;
    static ui(a: XmlPartManagerBase): void;
    static z3(a: XmlPartManagerBase): void;
    static uj(a: XmlPartManagerBase, b: string, c: number, d: Nullable$1<ST_Guid>, e: Nullable$1<number>): {
        p1: string;
        p2: number;
        p3: Nullable$1<ST_Guid>;
        p4: Nullable$1<number>;
    };
    static z4(a: XmlPartManagerBase, b: string, c: number, d?: Nullable$1<ST_Guid>, e?: Nullable$1<number>): void;
    static uk(a: XmlPartManagerBase): void;
    static z5(a: XmlPartManagerBase): void;
    static ul(a: XmlPartManagerBase): void;
    static z6(a: XmlPartManagerBase): void;
    static um(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static z7(a: XmlPartManagerBase, b?: boolean): void;
    static un(a: XmlPartManagerBase, b: List$1<string>, c: boolean): {
        p1: List$1<string>;
        p2: boolean;
    };
    static z8(a: XmlPartManagerBase, b: List$1<string>, c?: boolean): void;
    static uo(a: XmlPartManagerBase, b: number, c: string, d: string): {
        p1: number;
        p2: string;
        p3: string;
    };
    static z9(a: XmlPartManagerBase, b: number, c: string, d?: string): void;
    static up(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean, j: boolean, k: string, l: string, m: string, n: string, o: string, p: string): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: string;
        p11: string;
        p12: string;
        p13: string;
        p14: string;
        p15: string;
    };
    static aaa(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: string, l?: string, m?: string, n?: string, o?: string, p?: string): void;
    static uq(a: XmlPartManagerBase): void;
    static aab(a: XmlPartManagerBase): void;
    static ux(a: XmlPartManagerBase, b: ST_Guid, c: number, d: ST_SheetState, e: boolean): {
        p1: ST_Guid;
        p2: number;
        p3: ST_SheetState;
        p4: boolean;
    };
    static aai(a: XmlPartManagerBase, b: ST_Guid, c?: number, d?: ST_SheetState, e?: boolean): void;
    static uy(a: XmlPartManagerBase, b: string, c: ST_FilterOperator): {
        p1: string;
        p2: ST_FilterOperator;
    };
    static aaj(a: XmlPartManagerBase, b: string, c?: ST_FilterOperator): void;
    static uz(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static aak(a: XmlPartManagerBase, b?: boolean): void;
    static u0(a: XmlPartManagerBase, b: ST_Guid, c: number, d: number, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean, j: boolean, k: boolean, l: boolean, m: boolean, n: boolean, o: boolean, p: boolean, q: ST_SheetState, r: boolean, s: ST_SheetViewType, t: boolean, u: string): {
        p1: ST_Guid;
        p2: number;
        p3: number;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: boolean;
        p11: boolean;
        p12: boolean;
        p13: boolean;
        p14: boolean;
        p15: boolean;
        p16: ST_SheetState;
        p17: boolean;
        p18: ST_SheetViewType;
        p19: boolean;
        p20: string;
    };
    static aal(a: XmlPartManagerBase, b: ST_Guid, c?: number, d?: number, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: boolean, l?: boolean, m?: boolean, n?: boolean, o?: boolean, p?: boolean, q?: ST_SheetState, r?: boolean, s?: ST_SheetViewType, t?: boolean, u?: string): void;
    static u1(a: XmlPartManagerBase): void;
    static aam(a: XmlPartManagerBase): void;
    static u2(a: XmlPartManagerBase, b: string, c: ST_Guid, d: number, e: number, f: number, g: boolean, h: Nullable$1<number>, i: boolean, j: boolean, k: boolean, l: boolean, m: boolean, n: boolean, o: boolean, p: boolean, q: boolean, r: boolean, s: number, t: number, u: number, v: boolean, w: boolean, x: ST_Comments, y: ST_Objects): {
        p1: string;
        p2: ST_Guid;
        p3: number;
        p4: number;
        p5: number;
        p6: boolean;
        p7: Nullable$1<number>;
        p8: boolean;
        p9: boolean;
        p10: boolean;
        p11: boolean;
        p12: boolean;
        p13: boolean;
        p14: boolean;
        p15: boolean;
        p16: boolean;
        p17: boolean;
        p18: number;
        p19: number;
        p20: number;
        p21: boolean;
        p22: boolean;
        p23: ST_Comments;
        p24: ST_Objects;
    };
    static aan(a: XmlPartManagerBase, b: string, c: ST_Guid, d: number, e: number, f: number, g?: boolean, h?: Nullable$1<number>, i?: boolean, j?: boolean, k?: boolean, l?: boolean, m?: boolean, n?: boolean, o?: boolean, p?: boolean, q?: boolean, r?: boolean, s?: number, t?: number, u?: number, v?: boolean, w?: boolean, x?: ST_Comments, y?: ST_Objects): void;
    static u3(a: XmlPartManagerBase): void;
    static aao(a: XmlPartManagerBase): void;
    static u4(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>, d: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<number>;
        p3: Nullable$1<boolean>;
    };
    static aap(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>, d: Nullable$1<boolean>): void;
    static u5(a: XmlPartManagerBase, b: List$1<string>, c: ST_DataValidationType, d: ST_DataValidationErrorStyle, e: ST_DataValidationImeMode, f: ST_DataValidationOperator, g: boolean, h: boolean, i: boolean, j: boolean, k: string, l: string, m: string, n: string): {
        p1: List$1<string>;
        p2: ST_DataValidationType;
        p3: ST_DataValidationErrorStyle;
        p4: ST_DataValidationImeMode;
        p5: ST_DataValidationOperator;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: string;
        p11: string;
        p12: string;
        p13: string;
    };
    static aaq(a: XmlPartManagerBase, b: List$1<string>, c?: ST_DataValidationType, d?: ST_DataValidationErrorStyle, e?: ST_DataValidationImeMode, f?: ST_DataValidationOperator, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: string, l?: string, m?: string, n?: string): void;
    static u6(a: XmlPartManagerBase, b: string, c: ST_DataValidationType, d: ST_DataValidationErrorStyle, e: ST_DataValidationImeMode, f: ST_DataValidationOperator, g: boolean, h: boolean, i: boolean, j: boolean, k: string, l: string, m: string, n: string): {
        p1: string;
        p2: ST_DataValidationType;
        p3: ST_DataValidationErrorStyle;
        p4: ST_DataValidationImeMode;
        p5: ST_DataValidationOperator;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: string;
        p11: string;
        p12: string;
        p13: string;
    };
    static aar(a: XmlPartManagerBase, b: string, c?: ST_DataValidationType, d?: ST_DataValidationErrorStyle, e?: ST_DataValidationImeMode, f?: ST_DataValidationOperator, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: string, l?: string, m?: string, n?: string): void;
    static u7(a: XmlPartManagerBase, b: boolean, c: Nullable$1<number>, d: Nullable$1<number>, e: Nullable$1<number>): {
        p1: boolean;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
    };
    static aas(a: XmlPartManagerBase, b?: boolean, c?: Nullable$1<number>, d?: Nullable$1<number>, e?: Nullable$1<number>): void;
    static u8(a: XmlPartManagerBase, b: ST_DateTimeGrouping, c: number, d: Nullable$1<number>, e: Nullable$1<number>, f: Nullable$1<number>, g: Nullable$1<number>, h: Nullable$1<number>): {
        p1: ST_DateTimeGrouping;
        p2: number;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
        p5: Nullable$1<number>;
        p6: Nullable$1<number>;
        p7: Nullable$1<number>;
    };
    static aat(a: XmlPartManagerBase, b: ST_DateTimeGrouping, c: number, d?: Nullable$1<number>, e?: Nullable$1<number>, f?: Nullable$1<number>, g?: Nullable$1<number>, h?: Nullable$1<number>): void;
    static u9(a: XmlPartManagerBase, b: string, c: boolean, d: boolean, e: boolean): {
        p1: string;
        p2: boolean;
        p3: boolean;
        p4: boolean;
    };
    static aau(a: XmlPartManagerBase, b?: string, c?: boolean, d?: boolean, e?: boolean): void;
    static va(a: XmlPartManagerBase): void;
    static aav(a: XmlPartManagerBase): void;
    static vb(a: XmlPartManagerBase, b: string, c: string): {
        p1: string;
        p2: string;
    };
    static aaw(a: XmlPartManagerBase, b?: string, c?: string): void;
    static vd(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: string, g: string, h: string, i: Nullable$1<number>, j: boolean, k: boolean, l: boolean, m: boolean, n: Nullable$1<number>, o: string, p: boolean, q: boolean): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
        p6: string;
        p7: string;
        p8: Nullable$1<number>;
        p9: boolean;
        p10: boolean;
        p11: boolean;
        p12: boolean;
        p13: Nullable$1<number>;
        p14: string;
        p15: boolean;
        p16: boolean;
    };
    static aay(a: XmlPartManagerBase, b: string, c: string, d?: string, e?: string, f?: string, g?: string, h?: string, i?: Nullable$1<number>, j?: boolean, k?: boolean, l?: boolean, m?: boolean, n?: Nullable$1<number>, o?: string, p?: boolean, q?: boolean): void;
    static vc(a: XmlPartManagerBase, b: string, c: string, d: Nullable$1<number>): {
        p1: string;
        p2: string;
        p3: Nullable$1<number>;
    };
    static aax(a: XmlPartManagerBase, b: string, c?: string, d?: Nullable$1<number>): void;
    static ve(a: XmlPartManagerBase): void;
    static aaz(a: XmlPartManagerBase): void;
    static vf(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static aa0(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static vg(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static aa1(a: XmlPartManagerBase, b: string): void;
    static vh(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static aa2(a: XmlPartManagerBase, b: string): void;
    static vi(a: XmlPartManagerBase, b: string, c: Nullable$1<number>, d: Nullable$1<number>, e: Nullable$1<number>, f: Nullable$1<number>, g: Nullable$1<number>, h: Nullable$1<number>, i: Nullable$1<number>, j: Nullable$1<number>, k: Nullable$1<number>, l: Nullable$1<number>, m: Nullable$1<number>, n: Nullable$1<number>, o: Nullable$1<number>, p: Nullable$1<number>, q: Nullable$1<number>, r: Nullable$1<number>, s: Nullable$1<number>, t: Nullable$1<number>): {
        p1: string;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
        p5: Nullable$1<number>;
        p6: Nullable$1<number>;
        p7: Nullable$1<number>;
        p8: Nullable$1<number>;
        p9: Nullable$1<number>;
        p10: Nullable$1<number>;
        p11: Nullable$1<number>;
        p12: Nullable$1<number>;
        p13: Nullable$1<number>;
        p14: Nullable$1<number>;
        p15: Nullable$1<number>;
        p16: Nullable$1<number>;
        p17: Nullable$1<number>;
        p18: Nullable$1<number>;
        p19: Nullable$1<number>;
    };
    static aa3(a: XmlPartManagerBase, b: string, c?: Nullable$1<number>, d?: Nullable$1<number>, e?: Nullable$1<number>, f?: Nullable$1<number>, g?: Nullable$1<number>, h?: Nullable$1<number>, i?: Nullable$1<number>, j?: Nullable$1<number>, k?: Nullable$1<number>, l?: Nullable$1<number>, m?: Nullable$1<number>, n?: Nullable$1<number>, o?: Nullable$1<number>, p?: Nullable$1<number>, q?: Nullable$1<number>, r?: Nullable$1<number>, s?: Nullable$1<number>, t?: Nullable$1<number>): void;
    static vj(a: XmlPartManagerBase, b?: string): void;
    static aa4(a: XmlPartManagerBase, b?: string): void;
    static vk(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static aa5(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static vl(a: XmlPartManagerBase, b: ST_DynamicFilterType, c: Nullable$1<number>, d: Nullable$1<number>): {
        p1: ST_DynamicFilterType;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
    };
    static aa6(a: XmlPartManagerBase, b: ST_DynamicFilterType, c?: Nullable$1<number>, d?: Nullable$1<number>): void;
    static vm(a: XmlPartManagerBase, b: ST_DynamicFilterType, c: Nullable$1<number>, d: Nullable$1<Date>, e: Nullable$1<Date>): {
        p1: ST_DynamicFilterType;
        p2: Nullable$1<number>;
        p3: Nullable$1<Date>;
        p4: Nullable$1<Date>;
    };
    static aa7(a: XmlPartManagerBase, b: ST_DynamicFilterType, c?: Nullable$1<number>, d?: Nullable$1<Date>, e?: Nullable$1<Date>): void;
    static vn(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static aa8(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static vo(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static aa9(a: XmlPartManagerBase, b: string): void;
    static vp(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static aba(a: XmlPartManagerBase, b: string): void;
    static vq(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static abb(a: XmlPartManagerBase, b: string, c?: string): void;
    static vr(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static abc(a: XmlPartManagerBase, b?: boolean): void;
    static vs(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static abd(a: XmlPartManagerBase, b: string): void;
    static vt(a: XmlPartManagerBase): void;
    static abe(a: XmlPartManagerBase): void;
    static vu(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static abf(a: XmlPartManagerBase, b: string): void;
    static vv(a: XmlPartManagerBase): void;
    static abg(a: XmlPartManagerBase): void;
    static vw(a: XmlPartManagerBase): void;
    static abh(a: XmlPartManagerBase): void;
    static vx(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static abi(a: XmlPartManagerBase, b: number): void;
    static vy(a: XmlPartManagerBase, b: ST_CellFormulaType, c: boolean, d: string, e: boolean, f: boolean, g: boolean, h: boolean, i: string, j: string, k: boolean, l: Nullable$1<number>, m: boolean, n: string): {
        p1: ST_CellFormulaType;
        p2: boolean;
        p3: string;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: string;
        p9: string;
        p10: boolean;
        p11: Nullable$1<number>;
        p12: boolean;
        p13: string;
    };
    static abj(a: XmlPartManagerBase, b: string, c?: ST_CellFormulaType, d?: boolean, e?: string, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: string, k?: string, l?: boolean, m?: Nullable$1<number>, n?: boolean): void;
    static vz(a: XmlPartManagerBase, b: Nullable$1<boolean>, c: Nullable$1<number>, d: Nullable$1<ST_UnsignedIntHex>, e: Nullable$1<number>, f: number): {
        p1: Nullable$1<boolean>;
        p2: Nullable$1<number>;
        p3: Nullable$1<ST_UnsignedIntHex>;
        p4: Nullable$1<number>;
        p5: number;
    };
    static abk(a: XmlPartManagerBase, b?: Nullable$1<boolean>, c?: Nullable$1<number>, d?: Nullable$1<ST_UnsignedIntHex>, e?: Nullable$1<number>, f?: number): void;
    static v1(a: XmlPartManagerBase, b: string, c: boolean, d: number): {
        p1: string;
        p2: boolean;
        p3: number;
    };
    static abm(a: XmlPartManagerBase, b: string, c?: boolean, d?: number): void;
    static v0(a: XmlPartManagerBase, b: string, c: boolean, d: string, e: number[], f: number[], g: Nullable$1<number>): {
        p1: string;
        p2: boolean;
        p3: string;
        p4: number[];
        p5: number[];
        p6: Nullable$1<number>;
    };
    static abl(a: XmlPartManagerBase, b: string, c?: boolean, d?: string, e?: number[], f?: number[], g?: Nullable$1<number>): void;
    static v2(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: string): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
    };
    static abn(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: string, f?: string): void;
    static v3(a: XmlPartManagerBase): void;
    static abo(a: XmlPartManagerBase): void;
    static v4(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static abp(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static v5(a: XmlPartManagerBase, b: number, c: boolean, d: boolean): {
        p1: number;
        p2: boolean;
        p3: boolean;
    };
    static abq(a: XmlPartManagerBase, b: number, c?: boolean, d?: boolean): void;
    static v6(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static abr(a: XmlPartManagerBase, b: string): void;
    static v7(a: XmlPartManagerBase, b: boolean, c: ST_CalendarType): {
        p1: boolean;
        p2: ST_CalendarType;
    };
    static abs(a: XmlPartManagerBase, b?: boolean, c?: ST_CalendarType): void;
    static v8(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static abt(a: XmlPartManagerBase, b: string): void;
    static v9(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static abu(a: XmlPartManagerBase, b: string): void;
    static wa(a: XmlPartManagerBase): void;
    static abv(a: XmlPartManagerBase): void;
    static wb(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static abw(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static we(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static abz(a: XmlPartManagerBase, b: string): void;
    static wc(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static abx(a: XmlPartManagerBase, b: string): void;
    static wd(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static aby(a: XmlPartManagerBase, b: string): void;
    static wf(a: XmlPartManagerBase, b: ST_GradientType, c: number, d: number, e: number, f: number, g: number): {
        p1: ST_GradientType;
        p2: number;
        p3: number;
        p4: number;
        p5: number;
        p6: number;
    };
    static ab0(a: XmlPartManagerBase, b?: ST_GradientType, c?: number, d?: number, e?: number, f?: number, g?: number): void;
    static wg(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
    };
    static ab1(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean): void;
    static wh(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static ab2(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static wi(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: string): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
    };
    static ab3(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: string, f?: string): void;
    static wj(a: XmlPartManagerBase): void;
    static ab4(a: XmlPartManagerBase): void;
    static wk(a: XmlPartManagerBase, b: ST_IconSetType, c: Nullable$1<number>): {
        p1: ST_IconSetType;
        p2: Nullable$1<number>;
    };
    static ab5(a: XmlPartManagerBase, b: ST_IconSetType, c?: Nullable$1<number>): void;
    private static ab6;
    static wl(a: XmlPartManagerBase, b: ST_IconSetType, c: boolean, d: boolean, e: Nullable$1<boolean>, f: boolean): {
        p1: ST_IconSetType;
        p2: boolean;
        p3: boolean;
        p4: Nullable$1<boolean>;
        p5: boolean;
    };
    static ab7(a: XmlPartManagerBase, b: string, c: Nullable$1<ST_IconSetType>, d: Nullable$1<boolean>, e: Nullable$1<boolean>, f: Nullable$1<boolean>, g: Nullable$1<boolean>): void;
    static wm(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static ab8(a: XmlPartManagerBase, b?: boolean): void;
    static wn(a: XmlPartManagerBase): void;
    static ab9(a: XmlPartManagerBase): void;
    static wo(a: XmlPartManagerBase): void;
    static aca(a: XmlPartManagerBase): void;
    static wp(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static acb(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static wq(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static acc(a: XmlPartManagerBase, b: string): void;
    static wr(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static acd(a: XmlPartManagerBase, b: string): void;
    static ws(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static ace(a: XmlPartManagerBase, b: string): void;
    static wt(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static acf(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static wu(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static acg(a: XmlPartManagerBase, b: string): void;
    static wv(a: XmlPartManagerBase, b: number, c: string): {
        p1: number;
        p2: string;
    };
    static ach(a: XmlPartManagerBase, b: number, c: string): void;
    static ww(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static aci(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static wx(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static acj(a: XmlPartManagerBase, b: string): void;
    static wy(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static ack(a: XmlPartManagerBase, b: string): void;
    static wz(a: XmlPartManagerBase, b: string, c: boolean, d: boolean, e: boolean): {
        p1: string;
        p2: boolean;
        p3: boolean;
        p4: boolean;
    };
    static acl(a: XmlPartManagerBase, b?: string, c?: boolean, d?: boolean, e?: boolean): void;
    static w0(a: XmlPartManagerBase): void;
    static acm(a: XmlPartManagerBase): void;
    static w1(a: XmlPartManagerBase, b: string, c: string): {
        p1: string;
        p2: string;
    };
    static acn(a: XmlPartManagerBase, b?: string, c?: string): void;
    static w2(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static aco(a: XmlPartManagerBase, b?: boolean): void;
    static w3(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
    };
    static acp(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean): void;
    static w4(a: XmlPartManagerBase, b: number, c: number, d: number, e: number, f: number, g: number): {
        p1: number;
        p2: number;
        p3: number;
        p4: number;
        p5: number;
        p6: number;
    };
    static acq(a: XmlPartManagerBase, b: number, c: number, d: number, e: number, f: number, g: number): void;
    static w5(a: XmlPartManagerBase, b: number, c: string, d: string, e: number, f: number, g: number, h: number, i: ST_PageOrder, j: ST_Orientation, k: boolean, l: boolean, m: boolean, n: ST_CellComments, o: boolean, p: ST_PrintError, q: number, r: number, s: number, t: string): {
        p1: number;
        p2: string;
        p3: string;
        p4: number;
        p5: number;
        p6: number;
        p7: number;
        p8: ST_PageOrder;
        p9: ST_Orientation;
        p10: boolean;
        p11: boolean;
        p12: boolean;
        p13: ST_CellComments;
        p14: boolean;
        p15: ST_PrintError;
        p16: number;
        p17: number;
        p18: number;
        p19: string;
    };
    static acr(a: XmlPartManagerBase, b?: number, c?: string, d?: string, e?: number, f?: number, g?: number, h?: number, i?: ST_PageOrder, j?: ST_Orientation, k?: boolean, l?: boolean, m?: boolean, n?: ST_CellComments, o?: boolean, p?: ST_PrintError, q?: number, r?: number, s?: number, t?: string): void;
    static w6(a: XmlPartManagerBase, b: boolean, c: boolean): {
        p1: boolean;
        p2: boolean;
    };
    static acs(a: XmlPartManagerBase, b?: boolean, c?: boolean): void;
    static w7(a: XmlPartManagerBase, b: number, c: number, d: string, e: ST_Pane, f: ST_PaneState): {
        p1: number;
        p2: number;
        p3: string;
        p4: ST_Pane;
        p5: ST_PaneState;
    };
    static act(a: XmlPartManagerBase, b?: number, c?: number, d?: string, e?: ST_Pane, f?: ST_PaneState): void;
    static w8(a: XmlPartManagerBase, b: Nullable$1<ST_PatternType>): {
        p1: Nullable$1<ST_PatternType>;
    };
    static acu(a: XmlPartManagerBase, b?: Nullable$1<ST_PatternType>): void;
    static w9(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static acv(a: XmlPartManagerBase, b: string): void;
    static xa(a: XmlPartManagerBase, b: number, c: string): {
        p1: number;
        p2: string;
    };
    static acw(a: XmlPartManagerBase, b: number, c: string): void;
    static xb(a: XmlPartManagerBase): void;
    static acx(a: XmlPartManagerBase): void;
    static xc(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: boolean, f: boolean): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
    };
    static acy(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: boolean, f?: boolean): void;
    static xd(a: XmlPartManagerBase, b: string, c: string, d: string, e: Nullable$1<ST_UnsignedShortHex>): {
        p1: string;
        p2: string;
        p3: string;
        p4: Nullable$1<ST_UnsignedShortHex>;
    };
    static xe(a: XmlPartManagerBase, b: string, c: string, d: string, e: string, f: string, g: string, h: Nullable$1<number>): {
        p1: string;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
        p6: string;
        p7: Nullable$1<number>;
    };
    static acz(a: XmlPartManagerBase, b: string, c: string, d: string, e?: Nullable$1<ST_UnsignedShortHex>): void;
    static ac0(a: XmlPartManagerBase, b: string, c: string, d: string, e?: string, f?: string, g?: string, h?: Nullable$1<number>): void;
    static xf(a: XmlPartManagerBase): void;
    static ac1(a: XmlPartManagerBase): void;
    static xg(a: XmlPartManagerBase, b: Nullable$1<boolean>, c: Nullable$1<boolean>): {
        p1: Nullable$1<boolean>;
        p2: Nullable$1<boolean>;
    };
    static ac2(a: XmlPartManagerBase, b?: Nullable$1<boolean>, c?: Nullable$1<boolean>): void;
    static xh(a: XmlPartManagerBase): void;
    static ac3(a: XmlPartManagerBase): void;
    static xi(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static ac4(a: XmlPartManagerBase, b: string): void;
    static xj(a: XmlPartManagerBase, b: Nullable$1<ST_UnsignedIntHex>): {
        p1: Nullable$1<ST_UnsignedIntHex>;
    };
    static ac5(a: XmlPartManagerBase, b?: Nullable$1<ST_UnsignedIntHex>): void;
    static xk(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static ac6(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static xl(a: XmlPartManagerBase, b: number, c: number): {
        p1: number;
        p2: number;
    };
    static ac7(a: XmlPartManagerBase, b: number, c: number): void;
    static xn(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static ac9(a: XmlPartManagerBase, b: number): void;
    static xm(a: XmlPartManagerBase, b: Nullable$1<number>, c: List$1<string>, d: number, e: boolean, f: Nullable$1<number>, g: boolean, h: boolean, i: number, j: boolean, k: boolean, l: boolean, m: boolean, n?: boolean): {
        p1: Nullable$1<number>;
        p2: List$1<string>;
        p3: number;
        p4: boolean;
        p5: Nullable$1<number>;
        p6: boolean;
        p7: boolean;
        p8: number;
        p9: boolean;
        p10: boolean;
        p11: boolean;
        p12: boolean;
    };
    static ac8(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: List$1<string>, d?: number, e?: boolean, f?: Nullable$1<number>, g?: boolean, h?: boolean, i?: number, j?: boolean, k?: boolean, l?: boolean, m?: boolean): void;
    static xo(a: XmlPartManagerBase): void;
    static ada(a: XmlPartManagerBase): void;
    static xp(a: XmlPartManagerBase, b: ST_FontScheme): {
        p1: ST_FontScheme;
    };
    static adb(a: XmlPartManagerBase, b: ST_FontScheme): void;
    static xq(a: XmlPartManagerBase, b: ST_Pane, c: string, d: number, e: List$1<string>): {
        p1: ST_Pane;
        p2: string;
        p3: number;
        p4: List$1<string>;
    };
    static adc(a: XmlPartManagerBase, b?: ST_Pane, c?: string, d?: number, e?: List$1<string>): void;
    static xr(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static add(a: XmlPartManagerBase, b?: boolean): void;
    static xs(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static ade(a: XmlPartManagerBase, b?: boolean): void;
    static xt(a: XmlPartManagerBase): void;
    static adf(a: XmlPartManagerBase): void;
    static xu(a: XmlPartManagerBase, b: number, c: boolean): {
        p1: number;
        p2: boolean;
    };
    static adg(a: XmlPartManagerBase, b: number, c?: boolean): void;
    static xv(a: XmlPartManagerBase): void;
    static adh(a: XmlPartManagerBase): void;
    static xw(a: XmlPartManagerBase, b: string, c: number, d: ST_SheetState, e: string): {
        p1: string;
        p2: number;
        p3: ST_SheetState;
        p4: string;
    };
    static adi(a: XmlPartManagerBase, b: string, c: number, d: ST_SheetState, e: string): void;
    static xx(a: XmlPartManagerBase, b: number, c: number, d: Nullable$1<number>, e: boolean, f: boolean, g: boolean, h: boolean, i: number, j: number): {
        p1: number;
        p2: number;
        p3: Nullable$1<number>;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: number;
        p9: number;
    };
    static adj(a: XmlPartManagerBase, b: number, c?: number, d?: Nullable$1<number>, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: number, j?: number): void;
    static xy(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static adk(a: XmlPartManagerBase, b: string): void;
    static xz(a: XmlPartManagerBase): void;
    static adl(a: XmlPartManagerBase): void;
    static x0(a: XmlPartManagerBase, b: boolean, c: boolean, d: string, e: boolean, f: boolean, g: boolean, h: string, i: boolean, j: boolean): {
        p1: boolean;
        p2: boolean;
        p3: string;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: string;
        p8: boolean;
        p9: boolean;
    };
    static adm(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: string, e?: boolean, f?: boolean, g?: boolean, h?: string, i?: boolean, j?: boolean): void;
    static x1(a: XmlPartManagerBase, b: Nullable$1<ST_UnsignedShortHex>, c: boolean, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean, j: boolean, k: boolean, l: boolean, m: boolean, n: boolean, o: boolean, p: boolean, q: boolean, r: boolean): {
        p1: Nullable$1<ST_UnsignedShortHex>;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: boolean;
        p11: boolean;
        p12: boolean;
        p13: boolean;
        p14: boolean;
        p15: boolean;
        p16: boolean;
        p17: boolean;
    };
    static adn(a: XmlPartManagerBase, b?: Nullable$1<ST_UnsignedShortHex>, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: boolean, l?: boolean, m?: boolean, n?: boolean, o?: boolean, p?: boolean, q?: boolean, r?: boolean): void;
    static b4(a: XmlPartManagerBase): boolean;
    static x2(a: XmlPartManagerBase, b: string, c: string, d: string, e: Nullable$1<number>, f: boolean, g: boolean, h: boolean, i: boolean, j: boolean, k: boolean, l: boolean, m: boolean, n: boolean, o: boolean, p: boolean, q: boolean, r: boolean, s: boolean, t: boolean, u: boolean): {
        p1: string;
        p2: string;
        p3: string;
        p4: Nullable$1<number>;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: boolean;
        p11: boolean;
        p12: boolean;
        p13: boolean;
        p14: boolean;
        p15: boolean;
        p16: boolean;
        p17: boolean;
        p18: boolean;
        p19: boolean;
        p20: boolean;
    };
    static ado(a: XmlPartManagerBase, b?: string, c?: string, d?: string, e?: Nullable$1<number>, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: boolean, l?: boolean, m?: boolean, n?: boolean, o?: boolean, p?: boolean, q?: boolean, r?: boolean, s?: boolean, t?: boolean, u?: boolean): void;
    static x3(a: XmlPartManagerBase): void;
    static adp(a: XmlPartManagerBase): void;
    static x4(a: XmlPartManagerBase, b: number, c: boolean, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean, j: boolean, k: boolean, l: boolean, m: boolean, n: ST_SheetViewType, o: string, p: number, q: number, r: number, s: number, t: number): {
        p1: number;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: boolean;
        p10: boolean;
        p11: boolean;
        p12: boolean;
        p13: ST_SheetViewType;
        p14: string;
        p15: number;
        p16: number;
        p17: number;
        p18: number;
        p19: number;
    };
    static adq(a: XmlPartManagerBase, b: number, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: boolean, k?: boolean, l?: boolean, m?: boolean, n?: ST_SheetViewType, o?: string, p?: number, q?: number, r?: number, s?: number, t?: number): void;
    static x5(a: XmlPartManagerBase): void;
    static adr(a: XmlPartManagerBase): void;
    static x6(a: XmlPartManagerBase): void;
    static ads(a: XmlPartManagerBase): void;
    static x7(a: XmlPartManagerBase, b: string, c: boolean, d: ST_SortBy, e: string, f: Nullable$1<number>, g: ST_IconSetType, h: Nullable$1<number>): {
        p1: string;
        p2: boolean;
        p3: ST_SortBy;
        p4: string;
        p5: Nullable$1<number>;
        p6: ST_IconSetType;
        p7: Nullable$1<number>;
    };
    static adt(a: XmlPartManagerBase, b: string, c?: boolean, d?: ST_SortBy, e?: string, f?: Nullable$1<number>, g?: ST_IconSetType, h?: Nullable$1<number>): void;
    private static adu;
    static x8(a: XmlPartManagerBase, b: string, c: boolean, d: boolean, e: ST_SortMethod): {
        p1: string;
        p2: boolean;
        p3: boolean;
        p4: ST_SortMethod;
    };
    static adv(a: XmlPartManagerBase, b: string, c?: boolean, d?: boolean, e?: ST_SortMethod): void;
    static x9(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<number>;
    };
    static adw(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: Nullable$1<number>): void;
    static ya(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static adx(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static yb(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static ady(a: XmlPartManagerBase, b: number): void;
    static yc(a: XmlPartManagerBase, b: boolean): {
        p1: boolean;
    };
    static adz(a: XmlPartManagerBase, b?: boolean): void;
    static yd(a: XmlPartManagerBase): void;
    static ad0(a: XmlPartManagerBase): void;
    static ye(a: XmlPartManagerBase, b: number): {
        p1: number;
    };
    static ad1(a: XmlPartManagerBase, b: number): void;
    static yf(a: XmlPartManagerBase, b: Nullable$1<boolean>, c: Nullable$1<number>, d: Nullable$1<ST_UnsignedIntHex>, e: Nullable$1<number>, f: number): {
        p1: Nullable$1<boolean>;
        p2: Nullable$1<number>;
        p3: Nullable$1<ST_UnsignedIntHex>;
        p4: Nullable$1<number>;
        p5: number;
    };
    static ad2(a: XmlPartManagerBase, b: Nullable$1<boolean>, c: Nullable$1<number>, d: Nullable$1<ST_UnsignedIntHex>, e: Nullable$1<number>, f: number): void;
    static yg(a: XmlPartManagerBase, b: number, c: string, d: string, e: ST_TotalsRowFunction, f: string, g: Nullable$1<number>, h: Nullable$1<number>, i: Nullable$1<number>, j: Nullable$1<number>, k: string, l: string, m: string): {
        p1: number;
        p2: string;
        p3: string;
        p4: ST_TotalsRowFunction;
        p5: string;
        p6: Nullable$1<number>;
        p7: Nullable$1<number>;
        p8: Nullable$1<number>;
        p9: Nullable$1<number>;
        p10: string;
        p11: string;
        p12: string;
    };
    static ad3(a: XmlPartManagerBase, b: number, c?: string, d?: string, e?: ST_TotalsRowFunction, f?: string, g?: Nullable$1<number>, h?: Nullable$1<number>, i?: Nullable$1<number>, j?: Nullable$1<number>, k?: string, l?: string, m?: string): void;
    static yh(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static ad4(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static yi(a: XmlPartManagerBase, b: number, c: string, d: string, e: string, f: string, g: ST_TableType, h: number, i: boolean, j: boolean, k: number, l: boolean, m: boolean, n: Nullable$1<number>, o: Nullable$1<number>, p: Nullable$1<number>, q: Nullable$1<number>, r: Nullable$1<number>, s: Nullable$1<number>, t: string, u: string, v: string, w: Nullable$1<number>): {
        p1: number;
        p2: string;
        p3: string;
        p4: string;
        p5: string;
        p6: ST_TableType;
        p7: number;
        p8: boolean;
        p9: boolean;
        p10: number;
        p11: boolean;
        p12: boolean;
        p13: Nullable$1<number>;
        p14: Nullable$1<number>;
        p15: Nullable$1<number>;
        p16: Nullable$1<number>;
        p17: Nullable$1<number>;
        p18: Nullable$1<number>;
        p19: string;
        p20: string;
        p21: string;
        p22: Nullable$1<number>;
    };
    static ad5(a: XmlPartManagerBase, b: number, c: string, d: string, e: string, f: string, g?: ST_TableType, h?: number, i?: boolean, j?: boolean, k?: number, l?: boolean, m?: boolean, n?: Nullable$1<number>, o?: Nullable$1<number>, p?: Nullable$1<number>, q?: Nullable$1<number>, r?: Nullable$1<number>, s?: Nullable$1<number>, t?: string, u?: string, v?: string, w?: Nullable$1<number>): void;
    static yj(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static ad6(a: XmlPartManagerBase, b?: string): void;
    static yk(a: XmlPartManagerBase, b: Nullable$1<number>): {
        p1: Nullable$1<number>;
    };
    static ad7(a: XmlPartManagerBase, b?: Nullable$1<number>): void;
    static yl(a: XmlPartManagerBase, b: string, c: boolean, d: boolean, e: Nullable$1<number>): {
        p1: string;
        p2: boolean;
        p3: boolean;
        p4: Nullable$1<number>;
    };
    static ad8(a: XmlPartManagerBase, b: string, c?: boolean, d?: boolean, e?: Nullable$1<number>): void;
    static ym(a: XmlPartManagerBase, b: ST_TableStyleType, c: number, d: Nullable$1<number>): {
        p1: ST_TableStyleType;
        p2: number;
        p3: Nullable$1<number>;
    };
    static ad9(a: XmlPartManagerBase, b: ST_TableStyleType, c?: number, d?: Nullable$1<number>): void;
    static yn(a: XmlPartManagerBase, b: string, c: Nullable$1<boolean>, d: Nullable$1<boolean>, e: Nullable$1<boolean>, f: Nullable$1<boolean>): {
        p1: string;
        p2: Nullable$1<boolean>;
        p3: Nullable$1<boolean>;
        p4: Nullable$1<boolean>;
        p5: Nullable$1<boolean>;
    };
    static aea(a: XmlPartManagerBase, b: string, c: Nullable$1<boolean>, d: Nullable$1<boolean>, e: Nullable$1<boolean>, f: Nullable$1<boolean>): void;
    static yo(a: XmlPartManagerBase, b: Nullable$1<number>, c: string, d: string): {
        p1: Nullable$1<number>;
        p2: string;
        p3: string;
    };
    static aeb(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: string, d?: string): void;
    static yp(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static aec(a: XmlPartManagerBase, b: string): void;
    static yq(a: XmlPartManagerBase): void;
    static aed(a: XmlPartManagerBase): void;
    static ys(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static aef(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static yr(a: XmlPartManagerBase, b: number, c: boolean, d: boolean, e: Nullable$1<number>): {
        p1: number;
        p2: boolean;
        p3: boolean;
        p4: Nullable$1<number>;
    };
    static aee(a: XmlPartManagerBase, b: number, c?: boolean, d?: boolean, e?: Nullable$1<number>): void;
    static yt(a: XmlPartManagerBase, b: string, c: boolean): {
        p1: string;
        p2: boolean;
    };
    static aeg(a: XmlPartManagerBase, b: string, c?: boolean): void;
    static yu(a: XmlPartManagerBase, b: ST_UnderlineValues): {
        p1: ST_UnderlineValues;
    };
    static aeh(a: XmlPartManagerBase, b?: ST_UnderlineValues): void;
    static yv(a: XmlPartManagerBase, b: string): {
        p1: string;
    };
    static aei(a: XmlPartManagerBase, b: string): void;
    static aej(a: XmlPartManagerBase, b: string, c: boolean): void;
    static yw(a: XmlPartManagerBase, b: ST_VerticalAlignRun): {
        p1: ST_VerticalAlignRun;
    };
    static aek(a: XmlPartManagerBase, b: ST_VerticalAlignRun): void;
    static yx(a: XmlPartManagerBase, b: ST_BorderStyle): {
        p1: ST_BorderStyle;
    };
    static ael(a: XmlPartManagerBase, b?: ST_BorderStyle): void;
    static yy(a: XmlPartManagerBase, b: ST_ConformanceClass): {
        p1: ST_ConformanceClass;
    };
    static aem(a: XmlPartManagerBase, b?: ST_ConformanceClass): void;
    static yz(a: XmlPartManagerBase, b: boolean, c: ST_Objects, d: boolean, e: boolean, f: boolean, g: boolean, h: boolean, i: boolean, j: ST_UpdateLinks, k: string, l: boolean, m: boolean, n: boolean, o: boolean, p: boolean, q: boolean, r: boolean, s: Nullable$1<number>, t: boolean): {
        p1: boolean;
        p2: ST_Objects;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: boolean;
        p7: boolean;
        p8: boolean;
        p9: ST_UpdateLinks;
        p10: string;
        p11: boolean;
        p12: boolean;
        p13: boolean;
        p14: boolean;
        p15: boolean;
        p16: boolean;
        p17: boolean;
        p18: Nullable$1<number>;
        p19: boolean;
    };
    static aen(a: XmlPartManagerBase, b?: boolean, c?: ST_Objects, d?: boolean, e?: boolean, f?: boolean, g?: boolean, h?: boolean, i?: boolean, j?: ST_UpdateLinks, k?: string, l?: boolean, m?: boolean, n?: boolean, o?: boolean, p?: boolean, q?: boolean, r?: boolean, s?: Nullable$1<number>, t?: boolean): void;
    static y0(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: Nullable$1<number>, f: Nullable$1<number>): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: Nullable$1<number>;
        p5: Nullable$1<number>;
    };
    static aeo(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: Nullable$1<number>, f?: Nullable$1<number>): void;
    static y1(a: XmlPartManagerBase, b: boolean, c: boolean, d: boolean, e: string, f: string, g: string, h: Nullable$1<number>, i: string, j: string, k: string, l: Nullable$1<number>): {
        p1: boolean;
        p2: boolean;
        p3: boolean;
        p4: string;
        p5: string;
        p6: string;
        p7: Nullable$1<number>;
        p8: string;
        p9: string;
        p10: string;
        p11: Nullable$1<number>;
    };
    static aep(a: XmlPartManagerBase, b?: boolean, c?: boolean, d?: boolean, e?: string, f?: string, g?: string, h?: Nullable$1<number>, i?: string, j?: string, k?: string, l?: Nullable$1<number>): void;
    static y2(a: XmlPartManagerBase, b: ST_Visibility, c: boolean, d: boolean, e: boolean, f: boolean, g: Nullable$1<number>, h: Nullable$1<number>, i: Nullable$1<number>, j: Nullable$1<number>, k: number, l: number, m: number, n: boolean): {
        p1: ST_Visibility;
        p2: boolean;
        p3: boolean;
        p4: boolean;
        p5: boolean;
        p6: Nullable$1<number>;
        p7: Nullable$1<number>;
        p8: Nullable$1<number>;
        p9: Nullable$1<number>;
        p10: number;
        p11: number;
        p12: number;
        p13: boolean;
    };
    static aeq(a: XmlPartManagerBase, b?: ST_Visibility, c?: boolean, d?: boolean, e?: boolean, f?: boolean, g?: Nullable$1<number>, h?: Nullable$1<number>, i?: Nullable$1<number>, j?: Nullable$1<number>, k?: number, l?: number, m?: number, n?: boolean): void;
    static y3(a: XmlPartManagerBase): void;
    static aer(a: XmlPartManagerBase): void;
    static y4(a: XmlPartManagerBase, b: Nullable$1<number>, c: Nullable$1<number>, d: Nullable$1<number>, e: Nullable$1<number>, f: Nullable$1<number>, g: boolean, h: boolean, i: Nullable$1<boolean>, j: Nullable$1<boolean>, k: Nullable$1<boolean>, l: Nullable$1<boolean>, m: Nullable$1<boolean>, n: Nullable$1<boolean>): {
        p1: Nullable$1<number>;
        p2: Nullable$1<number>;
        p3: Nullable$1<number>;
        p4: Nullable$1<number>;
        p5: Nullable$1<number>;
        p6: boolean;
        p7: boolean;
        p8: Nullable$1<boolean>;
        p9: Nullable$1<boolean>;
        p10: Nullable$1<boolean>;
        p11: Nullable$1<boolean>;
        p12: Nullable$1<boolean>;
        p13: Nullable$1<boolean>;
    };
    static aes(a: XmlPartManagerBase, b?: Nullable$1<number>, c?: Nullable$1<number>, d?: Nullable$1<number>, e?: Nullable$1<number>, f?: Nullable$1<number>, g?: boolean, h?: boolean, i?: Nullable$1<boolean>, j?: Nullable$1<boolean>, k?: Nullable$1<boolean>, l?: Nullable$1<boolean>, m?: Nullable$1<boolean>, n?: Nullable$1<boolean>): void;
    static y5(a: XmlPartManagerBase, b: number, c: string, d: string, e: boolean): {
        p1: number;
        p2: string;
        p3: string;
        p4: boolean;
    };
    static aet(a: XmlPartManagerBase, b: number, c: string, d: string, e?: boolean): void;
}
