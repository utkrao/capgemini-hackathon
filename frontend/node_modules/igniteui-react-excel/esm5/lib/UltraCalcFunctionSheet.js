/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { WorksheetCell } from "./WorksheetCell";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionSheet = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionSheet, _super);
    function UltraCalcFunctionSheet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionSheet.prototype.evaluate = function (a, b) {
        var c = null;
        if (b == 1) {
            c = a.pop();
        }
        var d = null;
        if (b == 0) {
            if (WorksheetCell.l_op_Inequality(a.owningCell, null)) {
                d = a.owningCell.worksheet;
            }
        }
        else if (c.isReference) {
            var e = c.toReference();
            d = e._u;
            if (d == null) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(7));
            }
        }
        else if (c.isString) {
            var f = c.toString();
            if (!a._r._worksheets$i.exists(f)) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(3));
            }
            d = c._o._worksheets$i._item1(f);
        }
        else if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        else {
            return new ExcelCalcValue(new ExcelCalcErrorValue(3));
        }
        if (d == null) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(0));
        }
        return new ExcelCalcValue(d.sheetIndex + 1);
    };
    UltraCalcFunctionSheet.prototype.get_maxArgs = function () {
        return 1;
    };
    Object.defineProperty(UltraCalcFunctionSheet.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSheet.prototype.get_minArgs = function () {
        return 0;
    };
    Object.defineProperty(UltraCalcFunctionSheet.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSheet.prototype.get_name = function () {
        return "sheet";
    };
    Object.defineProperty(UltraCalcFunctionSheet.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSheet.$t = markType(UltraCalcFunctionSheet, 'UltraCalcFunctionSheet', BuiltInFunctionBase.$);
    return UltraCalcFunctionSheet;
}(BuiltInFunctionBase));
export { UltraCalcFunctionSheet };
