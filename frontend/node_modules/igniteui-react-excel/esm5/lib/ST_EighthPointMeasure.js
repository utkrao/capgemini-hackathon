/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, Base, toNullable, typeCast, Number_$type, markStruct } from "igniteui-react-core";
import { ST_UnsignedDecimalNumber } from "./ST_UnsignedDecimalNumber";
import { DocCoreUtils } from "./DocCoreUtils";
import { nullableNotEquals } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_EighthPointMeasure = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_EighthPointMeasure, _super);
    function ST_EighthPointMeasure(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.d = new ST_UnsignedDecimalNumber();
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    _this.d = c;
                }
                break;
        }
        return _this;
    }
    ST_EighthPointMeasure.prototype.equals = function (a) {
        var b = toNullable(ST_EighthPointMeasure.$, typeCast(ST_EighthPointMeasure.$, a));
        if (ST_EighthPointMeasure.j(b, toNullable(ST_EighthPointMeasure.$, null))) {
            return false;
        }
        return ST_EighthPointMeasure.g(this, b.getValueOrDefault());
    };
    ST_EighthPointMeasure.prototype.getHashCode = function () {
        return Base.getHashCodeStatic(this.d);
    };
    ST_EighthPointMeasure.prototype.toString = function () {
        return this.d.toString();
    };
    ST_EighthPointMeasure.c = function (a) {
        var b = ST_EighthPointMeasure.p(a);
        if (ST_EighthPointMeasure.j(b, toNullable(ST_EighthPointMeasure.$, null))) {
            return b.getValueOrDefault();
        }
        throw DocCoreUtils.n(ST_EighthPointMeasure.$, a);
    };
    ST_EighthPointMeasure.p = function (a) {
        var b = ST_UnsignedDecimalNumber.f(a);
        if (nullableNotEquals(b, null)) {
            return toNullable(ST_EighthPointMeasure.$, ST_EighthPointMeasure.a(b.getValueOrDefault()));
        }
        return toNullable(ST_EighthPointMeasure.$, null);
    };
    ST_EighthPointMeasure.g = function (a, b) {
        return ST_UnsignedDecimalNumber.h(a.d) == ST_UnsignedDecimalNumber.h(b.d);
    };
    ST_EighthPointMeasure.h = function (a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return ST_EighthPointMeasure.g(a.value, b.value);
    };
    ST_EighthPointMeasure.i = function (a, b) {
        return !(ST_EighthPointMeasure.g(a, b));
    };
    ST_EighthPointMeasure.j = function (a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return ST_EighthPointMeasure.i(a.value, b.value);
    };
    ST_EighthPointMeasure.a = function (a) {
        return new ST_EighthPointMeasure(1, a);
    };
    ST_EighthPointMeasure.m = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_EighthPointMeasure.$, null);
        }
        return toNullable(ST_EighthPointMeasure.$, ST_EighthPointMeasure.a(a.value));
    };
    ST_EighthPointMeasure.e = function (a) {
        return a.d;
    };
    ST_EighthPointMeasure.n = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_UnsignedDecimalNumber.$, null);
        }
        return toNullable(ST_UnsignedDecimalNumber.$, ST_EighthPointMeasure.e(a.value));
    };
    ST_EighthPointMeasure.q = function (a) {
        return ST_UnsignedDecimalNumber.h(a.d);
    };
    ST_EighthPointMeasure.o = function (a) {
        if (!a.hasValue) {
            return toNullable(Number_$type, null);
        }
        return toNullable(Number_$type, ST_EighthPointMeasure.q(a.value));
    };
    ST_EighthPointMeasure.$t = markStruct(ST_EighthPointMeasure, 'ST_EighthPointMeasure');
    return ST_EighthPointMeasure;
}(ValueType));
export { ST_EighthPointMeasure };
