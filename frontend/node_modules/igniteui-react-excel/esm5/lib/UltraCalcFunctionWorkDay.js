/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { Dictionary$2 } from "igniteui-react-core";
import { Base, Date_$type, markType } from "igniteui-react-core";
import { dateGetDate, dateAddDays } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionWorkDay = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionWorkDay, _super);
    function UltraCalcFunctionWorkDay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionWorkDay.prototype.evaluate = function (a, b) {
        var c = this._getArguments(a, b - 2, true);
        var d;
        var e;
        var f = ((function () { var g = UltraCalcFunctionWorkDay._ak(c, d, e); d = g.p1; e = g.p2; return g.ret; })());
        if (f == false) {
            return e;
        }
        var g = a.pop()._toInt321();
        var h = dateGetDate(a.pop()._toDateTime1());
        var i = h;
        var j = Math.abs(g);
        var k = 0;
        if (g != 0) {
            var l = g < 0 ? -1 : 1;
            do {
                i = dateAddDays(i, l);
                k += this._an(i, d) ? 1 : 0;
            } while (k < j);
        }
        return new ExcelCalcValue(i);
    };
    UltraCalcFunctionWorkDay.prototype.canParameterBeEnumerable = function (a) {
        return a == 2;
    };
    UltraCalcFunctionWorkDay.prototype._an = function (a, b) {
        if (UltraCalcFunctionWorkDay._al(a)) {
            return false;
        }
        if (b != null && b.containsKey(a)) {
            return false;
        }
        return true;
    };
    UltraCalcFunctionWorkDay.prototype.get_name = function () {
        return "workday";
    };
    Object.defineProperty(UltraCalcFunctionWorkDay.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionWorkDay.prototype.get_minArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionWorkDay.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionWorkDay.prototype.get_maxArgs = function () {
        return 3;
    };
    Object.defineProperty(UltraCalcFunctionWorkDay.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionWorkDay._ak = function (a, b, c) {
        if (a.length > 0) {
            b = new Dictionary$2(Date_$type, Base.$, 1, a.length);
            for (var e = 0; e < a.length; e++) {
                var d = a[e];
                if (d.isError) {
                    c = new ExcelCalcValue(d.toErrorValue());
                    return {
                        ret: false,
                        p1: b,
                        p2: c
                    };
                }
                var f = dateGetDate(d._toDateTime1());
                if (UltraCalcFunctionWorkDay._al(f) == false) {
                    if (b.containsKey(f) == false) {
                        b.addItem(f, null);
                    }
                }
            }
        }
        else {
            b = null;
        }
        c = null;
        return {
            ret: true,
            p1: b,
            p2: c
        };
    };
    UltraCalcFunctionWorkDay._al = function (a) {
        return UltraCalcFunctionWorkDay._am(a.getDay());
    };
    UltraCalcFunctionWorkDay._am = function (a) {
        return a == 6 || a == 0;
    };
    UltraCalcFunctionWorkDay.prototype.doesParameterAllowIntermediateResultArray = function (a, b) {
        return (b == false);
    };
    UltraCalcFunctionWorkDay.$t = markType(UltraCalcFunctionWorkDay, 'UltraCalcFunctionWorkDay', BuiltInFunctionBase.$);
    return UltraCalcFunctionWorkDay;
}(BuiltInFunctionBase));
export { UltraCalcFunctionWorkDay };
