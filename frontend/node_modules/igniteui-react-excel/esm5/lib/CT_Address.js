/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_Address = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_Address, _super);
    function CT_Address() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = null;
        _this.i = null;
        _this.e = null;
        _this.g = null;
        _this.o = null;
        _this.m = null;
        _this.k = null;
        return _this;
    }
    Object.defineProperty(CT_Address.prototype, "b", {
        get: function () {
            return this.c;
        },
        set: function (a) {
            this.c = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_Address.prototype, "h", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_Address.prototype, "d", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            this.e = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_Address.prototype, "f", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_Address.prototype, "n", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_Address.prototype, "l", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_Address.prototype, "j", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_Address.a = function (a) {
        var b = null;
        var c = null;
        var d = null;
        var e = null;
        var f = null;
        var g = null;
        var h = null;
        var i = CT_Address.q(a, b, c, d, e, f, g, h);
        b = i.p1;
        c = i.p2;
        d = i.p3;
        e = i.p4;
        f = i.p5;
        g = i.p6;
        h = i.p7;
        return ((function () {
            var $ret = new CT_Address();
            $ret.b = b;
            $ret.h = c;
            $ret.d = d;
            $ret.f = e;
            $ret.j = h;
            $ret.n = f;
            $ret.l = g;
            return $ret;
        })());
    };
    CT_Address.q = function (a, b, c, d, e, f, g, h) {
        var e_1, _a;
        b = null;
        c = null;
        d = null;
        e = null;
        f = null;
        g = null;
        h = null;
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var i = _c.value;
                switch (i.a.e(a.d)) {
                    case "address1":
                        b = i.d;
                        break;
                    case "countryRegion":
                        c = i.d;
                        break;
                    case "adminDistrict1":
                        d = i.d;
                        break;
                    case "adminDistrict2":
                        e = i.d;
                        break;
                    case "postalCode":
                        f = i.d;
                        break;
                    case "locality":
                        g = i.d;
                        break;
                    case "isoCountryCode":
                        h = i.d;
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h
        };
    };
    CT_Address.r = function (a, b, c, d, e, f, g, h, i) {
        if (c === void 0) {
            c = null;
        }
        if (d === void 0) {
            d = null;
        }
        if (e === void 0) {
            e = null;
        }
        if (f === void 0) {
            f = null;
        }
        if (g === void 0) {
            g = null;
        }
        if (h === void 0) {
            h = null;
        }
        if (i === void 0) {
            i = null;
        }
        a.ad.p(b, "cx");
        var j = null;
        var k = null;
        if (c != null) {
            k = "address1";
            j = c;
            a.ad.h(k, j);
        }
        if (d != null) {
            k = "adminDistrict1";
            j = d;
            a.ad.h(k, j);
        }
        if (e != null) {
            k = "adminDistrict2";
            j = e;
            a.ad.h(k, j);
        }
        if (f != null) {
            k = "countryRegion";
            j = f;
            a.ad.h(k, j);
        }
        if (g != null) {
            k = "isoCountryCode";
            j = g;
            a.ad.h(k, j);
        }
        if (h != null) {
            k = "locality";
            j = h;
            a.ad.h(k, j);
        }
        if (i != null) {
            k = "postalCode";
            j = i;
            a.ad.h(k, j);
        }
        ;
    };
    CT_Address.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_Address.$t = markType(CT_Address, 'CT_Address');
    return CT_Address;
}(Base));
export { CT_Address };
