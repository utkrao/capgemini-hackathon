/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __read, __spreadArray } from "tslib";
import { Base, typeCast, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { StopInfo } from "./StopInfo";
import { CellFillLinearGradient } from "./CellFillLinearGradient";
import { CellFillRectangularGradient } from "./CellFillRectangularGradient";
import { CellFill } from "./CellFill";
/**
 * @hidden
 */
var GradientFillInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(GradientFillInfo, _super);
    function GradientFillInfo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.g = new List$1(StopInfo.$, 0);
        _this.i = 0;
        _this.v = 0;
        _this.t = 0;
        _this.r = 0;
        _this.p = 0;
        _this.d = 0;
        return _this;
    }
    GradientFillInfo.prototype.equals = function (a) {
        if (Base.referenceEquals(this, a)) {
            return true;
        }
        var b = typeCast(GradientFillInfo.$, a);
        if (b == null) {
            return false;
        }
        if (this.i != b.i || this.p != b.p || this.d != b.d || this.r != b.r || this.t != b.t || this.v != b.v || this.g.count != b.g.count) {
            return false;
        }
        for (var c = 0; c < this.g.count; c++) {
            if (Base.equalsStatic(this.g._inner[c], b.g._inner[c]) == false) {
                return false;
            }
        }
        return true;
    };
    GradientFillInfo.prototype.getHashCode = function () {
        var a = (this.i) ^ (this.v) ^ (this.t) ^ (this.r) ^ (this.p) ^ Base.getHashCodeStatic(this.d) ^ this.g.count;
        if (this.g.count != 0) {
            a ^= this.g._inner[0].getHashCode();
            a ^= this.g._inner[this.g.count - 1].getHashCode();
        }
        return a;
    };
    Object.defineProperty(GradientFillInfo.prototype, "h", {
        get: function () {
            return this.g;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GradientFillInfo.prototype, "j", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GradientFillInfo.prototype, "w", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GradientFillInfo.prototype, "s", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GradientFillInfo.prototype, "u", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GradientFillInfo.prototype, "q", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(GradientFillInfo.prototype, "e", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            this.d = a;
        },
        enumerable: false,
        configurable: true
    });
    GradientFillInfo.b = function (a, b) {
        var c = new GradientFillInfo();
        for (var d = 0; d < b.stops.count; d++) {
            c.h.add(StopInfo.d(a, b.stops.item(d)));
        }
        var e = typeCast(CellFillLinearGradient.$, b);
        var f = typeCast(CellFillRectangularGradient.$, b);
        if (e != null) {
            c.e = 0;
            c.q = e.angle;
        }
        else if (f != null) {
            c.e = 1;
            c.j = f.bottom;
            c.s = f.left;
            c.u = f.right;
            c.w = f.top;
        }
        else {
        }
        return c;
    };
    GradientFillInfo.prototype.a = function (a) {
        var b = new Array(this.h.count);
        for (var c = 0; c < b.length; c++) {
            b[c] = this.h._inner[c].a(a);
        }
        switch (this.e) {
            case 0: return CellFill._createLinearGradientFill.apply(CellFill, __spreadArray([this.q], __read(b), false));
            case 1: return CellFill._createRectangularGradientFill1.apply(CellFill, __spreadArray([this.s, this.w, this.u, this.j], __read(b), false));
            default: return null;
        }
    };
    GradientFillInfo.$t = markType(GradientFillInfo, 'GradientFillInfo');
    return GradientFillInfo;
}(Base));
export { GradientFillInfo };
