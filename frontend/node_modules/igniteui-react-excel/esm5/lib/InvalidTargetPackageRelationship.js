/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { PackageRelationship } from "./PackageRelationship";
import { IInvalidPackageRelationshipTarget_$type } from "./IInvalidPackageRelationshipTarget";
import { Uri } from "igniteui-react-core";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
var InvalidTargetPackageRelationship = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(InvalidTargetPackageRelationship, _super);
    function InvalidTargetPackageRelationship(a, b, c, d, e) {
        var _this = _super.call(this, 1, a, null, c, d, e) || this;
        _this._targetString = null;
        _this.targetString = b;
        return _this;
    }
    InvalidTargetPackageRelationship.prototype.get_targetUri = function () {
        if (this.targetString != null && _super.prototype.get_targetUri.call(this) == null) {
            this.targetUri = new Uri(1, this.targetString, 0);
        }
        return _super.prototype.get_targetUri.call(this);
    };
    InvalidTargetPackageRelationship.prototype.set_targetUri = function (a) {
        _super.prototype.set_targetUri.call(this, a);
    };
    Object.defineProperty(InvalidTargetPackageRelationship.prototype, "targetString", {
        get: function () {
            return this._targetString;
        },
        set: function (a) {
            this._targetString = a;
        },
        enumerable: false,
        configurable: true
    });
    InvalidTargetPackageRelationship.$t = markType(InvalidTargetPackageRelationship, 'InvalidTargetPackageRelationship', PackageRelationship.$, [IInvalidPackageRelationshipTarget_$type]);
    return InvalidTargetPackageRelationship;
}(PackageRelationship));
export { InvalidTargetPackageRelationship };
