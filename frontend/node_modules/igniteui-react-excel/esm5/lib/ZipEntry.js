/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ExternalEventWorkItem$1 } from "./ExternalEventWorkItem$1";
import { BaseError, Base, Stream, markType } from "igniteui-react-core";
import { IZipEntry_$type } from "./IZipEntry";
import { IOPath } from "igniteui-react-core";
import { MemoryStream } from "igniteui-react-core";
import { WorkItem } from "./WorkItem";
import { stringReplace } from "igniteui-react-core";
import * as JSZip from "jszip/dist/jszip";
/**
 * @hidden
 */
var ZipEntry = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ZipEntry, _super);
    function ZipEntry(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.c = null;
        _this.b = null;
        _this._name = null;
        _this._isDirectory = false;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this.c = c;
                    _this.isDirectory = (_this.c.dir);
                    _this.name = (_this.c.name);
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.name = c;
                    _this.b = d;
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(ZipEntry.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (a) {
            this._name = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZipEntry.prototype, "isDirectory", {
        get: function () {
            return this._isDirectory;
        },
        set: function (a) {
            this._isDirectory = a;
        },
        enumerable: false,
        configurable: true
    });
    ZipEntry.a = function (a, b, c) {
        return new ZipEntry(1, stringReplace(IOPath.combine1(b, a), '\\', '/'), c);
    };
    ZipEntry.prototype.openReader = function () {
        if (this.c != null) {
            var a = (JSZip.support.uint8array);
            var b_1 = new ExternalEventWorkItem$1(Stream.$);
            var c = a ? "uint8array" : "binarystring";
            var d = function (e) { return b_1.ag(new MemoryStream(2, e)); };
            var e = function (f) { return b_1.ag(null, new BaseError(1, f != null ? f.toString() : "Open ZipObject Error")); };
            this.c.async(c).then(d, e);
            return b_1;
        }
        return WorkItem.g(Stream.$, this.b);
    };
    ZipEntry.$t = markType(ZipEntry, 'ZipEntry', Base.$, [IZipEntry_$type]);
    return ZipEntry;
}(Base));
export { ZipEntry };
