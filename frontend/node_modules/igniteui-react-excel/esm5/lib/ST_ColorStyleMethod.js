/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, toNullable, EnumUtil, markType } from "igniteui-react-core";
import { ST_ColorStyleMethodEnum_$type } from "./ST_ColorStyleMethodEnum";
/**
 * @hidden
 */
var ST_ColorStyleMethod = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_ColorStyleMethod, _super);
    function ST_ColorStyleMethod() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = toNullable(ST_ColorStyleMethodEnum_$type, null);
        _this.e = null;
        return _this;
    }
    Object.defineProperty(ST_ColorStyleMethod.prototype, "d", {
        get: function () {
            return this.c;
        },
        set: function (a) {
            this.c = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ST_ColorStyleMethod.prototype, "h", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            this.e = a;
        },
        enumerable: false,
        configurable: true
    });
    ST_ColorStyleMethod.a = function (a) {
        return ST_ColorStyleMethod.b(a);
    };
    ST_ColorStyleMethod.prototype.f = function () {
        return this.g();
    };
    ST_ColorStyleMethod.b = function (a) {
        var b = new ST_ColorStyleMethod();
        var c;
        if (((function () { var d = EnumUtil.tryParse$1(ST_ColorStyleMethodEnum_$type, a, true, c); c = d.p2; return d.ret; })())) {
            b.d = toNullable(ST_ColorStyleMethodEnum_$type, c);
        }
        else {
            b.h = a;
        }
        return b;
    };
    ST_ColorStyleMethod.prototype.g = function () {
        return this.d.hasValue ? EnumUtil.getName(ST_ColorStyleMethodEnum_$type, this.d.value) : this.h;
    };
    ST_ColorStyleMethod.$t = markType(ST_ColorStyleMethod, 'ST_ColorStyleMethod');
    return ST_ColorStyleMethod;
}(Base));
export { ST_ColorStyleMethod };
