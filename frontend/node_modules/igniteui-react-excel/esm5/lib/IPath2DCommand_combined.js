/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Type, Base, markType } from "igniteui-react-core";
import { ISaveToXLSX_$type } from "./ISaveToXLSX";
import { ST_AdjCoordinate } from "./ST_AdjCoordinate";
import { ST_AdjAngle } from "./ST_AdjAngle";
import { DrawingMLMain } from "./DrawingMLMain";
/**
 * @hidden
 */
export var IPath2DCommand_$type = /*@__PURE__*/ new Type(null, 'IPath2DCommand');
/**
 * @hidden
 */
var CT_Path2DArcTo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_Path2DArcTo, _super);
    function CT_Path2DArcTo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.d = new ST_AdjCoordinate();
        _this.c = new ST_AdjCoordinate();
        _this.a = new ST_AdjAngle();
        _this.b = new ST_AdjAngle();
        return _this;
    }
    CT_Path2DArcTo.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        if (b === void 0) {
            b = Type.getDefaultValue($tArg);
        }
        return a._visitCT_Path2DArcTo$i(this, b);
    };
    Object.defineProperty(CT_Path2DArcTo.prototype, "elementName", {
        get: function () {
            return DrawingMLMain.bg;
        },
        enumerable: false,
        configurable: true
    });
    CT_Path2DArcTo.prototype.saveX = function (a, b, c, d) {
        CT_Path2DArcTo.e(a, c, this);
    };
    CT_Path2DArcTo.e = function (a, b, c) {
        var d = a.ad;
        d.p(b, null);
        var e = null;
        var f = null;
        f = "hR";
        e = ST_AdjCoordinate.f(c.c);
        a.ad.h(f, e);
        f = "stAng";
        e = ST_AdjAngle.f(c.a);
        a.ad.h(f, e);
        f = "swAng";
        e = ST_AdjAngle.f(c.b);
        a.ad.h(f, e);
        f = "wR";
        e = ST_AdjCoordinate.f(c.d);
        a.ad.h(f, e);
        d.k();
    };
    CT_Path2DArcTo.$t = markType(CT_Path2DArcTo, 'CT_Path2DArcTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DArcTo;
}(Base));
export { CT_Path2DArcTo };
/**
 * @hidden
 */
var CT_Path2DClose = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_Path2DClose, _super);
    function CT_Path2DClose() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CT_Path2DClose.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        if (b === void 0) {
            b = Type.getDefaultValue($tArg);
        }
        return a._visitCT_Path2DClose$i(this, b);
    };
    Object.defineProperty(CT_Path2DClose.prototype, "elementName", {
        get: function () {
            return DrawingMLMain.cj;
        },
        enumerable: false,
        configurable: true
    });
    CT_Path2DClose.prototype.saveX = function (a, b, c, d) {
        b.o(c);
        b.k();
    };
    CT_Path2DClose.$t = markType(CT_Path2DClose, 'CT_Path2DClose', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DClose;
}(Base));
export { CT_Path2DClose };
/**
 * @hidden
 */
var CT_Path2DCubicBezierTo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_Path2DCubicBezierTo, _super);
    function CT_Path2DCubicBezierTo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = null;
        _this.b = null;
        _this.c = null;
        return _this;
    }
    CT_Path2DCubicBezierTo.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        if (b === void 0) {
            b = Type.getDefaultValue($tArg);
        }
        return a._visitCT_Path2DCubicBezierTo$i(this, b);
    };
    Object.defineProperty(CT_Path2DCubicBezierTo.prototype, "elementName", {
        get: function () {
            return DrawingMLMain.cw;
        },
        enumerable: false,
        configurable: true
    });
    CT_Path2DCubicBezierTo.prototype.saveX = function (a, b, c, d) {
        b.o(c);
        if (this.a != null) {
            this.a.c(a, DrawingMLMain.ht);
        }
        if (this.b != null) {
            this.b.c(a, DrawingMLMain.ht);
        }
        if (this.c != null) {
            this.c.c(a, DrawingMLMain.ht);
        }
        b.k();
    };
    CT_Path2DCubicBezierTo.$t = markType(CT_Path2DCubicBezierTo, 'CT_Path2DCubicBezierTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DCubicBezierTo;
}(Base));
export { CT_Path2DCubicBezierTo };
/**
 * @hidden
 */
var CT_Path2DLineTo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_Path2DLineTo, _super);
    function CT_Path2DLineTo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = null;
        return _this;
    }
    CT_Path2DLineTo.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        if (b === void 0) {
            b = Type.getDefaultValue($tArg);
        }
        return a._visitCT_Path2DLineTo$i(this, b);
    };
    Object.defineProperty(CT_Path2DLineTo.prototype, "elementName", {
        get: function () {
            return DrawingMLMain.f1;
        },
        enumerable: false,
        configurable: true
    });
    CT_Path2DLineTo.prototype.saveX = function (a, b, c, d) {
        b.o(c);
        if (this.a != null) {
            this.a.c(a, DrawingMLMain.ht);
        }
        b.k();
    };
    CT_Path2DLineTo.$t = markType(CT_Path2DLineTo, 'CT_Path2DLineTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DLineTo;
}(Base));
export { CT_Path2DLineTo };
/**
 * @hidden
 */
var CT_Path2DMoveTo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_Path2DMoveTo, _super);
    function CT_Path2DMoveTo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = null;
        return _this;
    }
    CT_Path2DMoveTo.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        if (b === void 0) {
            b = Type.getDefaultValue($tArg);
        }
        return a._visitCT_Path2DMoveTo$i(this, b);
    };
    Object.defineProperty(CT_Path2DMoveTo.prototype, "elementName", {
        get: function () {
            return DrawingMLMain.gn;
        },
        enumerable: false,
        configurable: true
    });
    CT_Path2DMoveTo.prototype.saveX = function (a, b, c, d) {
        b.o(c);
        if (this.a != null) {
            this.a.c(a, DrawingMLMain.ht);
        }
        b.k();
    };
    CT_Path2DMoveTo.$t = markType(CT_Path2DMoveTo, 'CT_Path2DMoveTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DMoveTo;
}(Base));
export { CT_Path2DMoveTo };
/**
 * @hidden
 */
var CT_Path2DQuadBezierTo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_Path2DQuadBezierTo, _super);
    function CT_Path2DQuadBezierTo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = null;
        _this.b = null;
        return _this;
    }
    CT_Path2DQuadBezierTo.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        if (b === void 0) {
            b = Type.getDefaultValue($tArg);
        }
        return a._visitCT_Path2DQuadBezierTo$i(this, b);
    };
    Object.defineProperty(CT_Path2DQuadBezierTo.prototype, "elementName", {
        get: function () {
            return DrawingMLMain.hu;
        },
        enumerable: false,
        configurable: true
    });
    CT_Path2DQuadBezierTo.prototype.saveX = function (a, b, c, d) {
        b.o(c);
        if (this.a != null) {
            this.a.c(a, DrawingMLMain.ht);
        }
        if (this.b != null) {
            this.b.c(a, DrawingMLMain.ht);
        }
        b.k();
    };
    CT_Path2DQuadBezierTo.$t = markType(CT_Path2DQuadBezierTo, 'CT_Path2DQuadBezierTo', Base.$, [IPath2DCommand_$type, ISaveToXLSX_$type]);
    return CT_Path2DQuadBezierTo;
}(Base));
export { CT_Path2DQuadBezierTo };
/**
 * @hidden
 */
export var IPath2DCommandVisitor$2_$type = /*@__PURE__*/ new Type(null, 'IPath2DCommandVisitor$2');
