/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, markStruct } from "igniteui-react-core";
import { ST_TextPointUnqualified } from "./ST_TextPointUnqualified";
import { ST_UniversalMeasure } from "./ST_UniversalMeasure";
import { DocCoreUtils } from "./DocCoreUtils";
import { nullableNotEquals } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_TextPoint = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_TextPoint, _super);
    function ST_TextPoint(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.b = toNullable(ST_TextPointUnqualified.$, null);
        _this.c = toNullable(ST_UniversalMeasure.$, null);
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    _this.b = toNullable(ST_TextPointUnqualified.$, c);
                    _this.c = toNullable(ST_UniversalMeasure.$, null);
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    _this.b = toNullable(ST_TextPointUnqualified.$, null);
                    _this.c = toNullable(ST_UniversalMeasure.$, c);
                }
                break;
        }
        return _this;
    }
    ST_TextPoint.prototype.toString = function () {
        if (nullableNotEquals(this.b, null)) {
            return this.b.toString();
        }
        if (ST_UniversalMeasure.f(this.c, toNullable(ST_UniversalMeasure.$, null))) {
            return this.c.toString();
        }
        return stringEmpty();
    };
    ST_TextPoint.a = function (a) {
        var b = ST_TextPointUnqualified.i(a);
        if (nullableNotEquals(b, null)) {
            return new ST_TextPoint(1, b.value);
        }
        var c = ST_UniversalMeasure.o(a);
        if (ST_UniversalMeasure.f(c, toNullable(ST_UniversalMeasure.$, null))) {
            return new ST_TextPoint(2, c.value);
        }
        throw DocCoreUtils.n(ST_TextPoint.$, a);
    };
    ST_TextPoint.$t = markStruct(ST_TextPoint, 'ST_TextPoint');
    return ST_TextPoint;
}(ValueType));
export { ST_TextPoint };
