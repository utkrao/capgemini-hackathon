/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Type, Base, markType, fromEnum } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IEG_ColorTransform_$type } from "./IEG_ColorTransform";
import { ST_HexColorRGB } from "./ST_HexColorRGB";
/**
 * @hidden
 */
export var IEG_ColorChoice_$type = /*@__PURE__*/ new Type(null, 'IEG_ColorChoice');
/**
 * @hidden
 */
var EG_ColorChoice = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(EG_ColorChoice, _super);
    function EG_ColorChoice() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = new List$1(IEG_ColorTransform_$type, 0);
        return _this;
    }
    Object.defineProperty(EG_ColorChoice.prototype, "b", {
        get: function () {
            return this.a;
        },
        enumerable: false,
        configurable: true
    });
    EG_ColorChoice.$t = markType(EG_ColorChoice, 'EG_ColorChoice', Base.$, [IEG_ColorChoice_$type]);
    return EG_ColorChoice;
}(Base));
export { EG_ColorChoice };
/**
 * @hidden
 */
var CT_PresetColor_Core = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_PresetColor_Core, _super);
    function CT_PresetColor_Core() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = 0;
        return _this;
    }
    CT_PresetColor_Core.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitCT_PresetColor$i(this, b);
    };
    CT_PresetColor_Core.$t = markType(CT_PresetColor_Core, 'CT_PresetColor_Core', EG_ColorChoice.$, [IEG_ColorChoice_$type]);
    return CT_PresetColor_Core;
}(EG_ColorChoice));
export { CT_PresetColor_Core };
/**
 * @hidden
 */
var CT_SchemeColor = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_SchemeColor, _super);
    function CT_SchemeColor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = 0;
        return _this;
    }
    CT_SchemeColor.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitCT_SchemeColor$i(this, b);
    };
    CT_SchemeColor.$t = markType(CT_SchemeColor, 'CT_SchemeColor', EG_ColorChoice.$, [IEG_ColorChoice_$type]);
    return CT_SchemeColor;
}(EG_ColorChoice));
export { CT_SchemeColor };
/**
 * @hidden
 */
var CT_SRgbColor = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_SRgbColor, _super);
    function CT_SRgbColor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = new ST_HexColorRGB();
        return _this;
    }
    CT_SRgbColor.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        if (b === void 0) {
            b = Type.getDefaultValue($tArg);
        }
        return a._visitCT_SRgbColor$i(this, b);
    };
    CT_SRgbColor.d = function (a, b) {
        var e_1, _a;
        b = new ST_HexColorRGB(0);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                switch (c.a.e(a.d)) {
                    case "val":
                        b = ST_HexColorRGB.d(c.d);
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return {
            p1: b
        };
    };
    CT_SRgbColor.$t = markType(CT_SRgbColor, 'CT_SRgbColor', EG_ColorChoice.$, [IEG_ColorChoice_$type]);
    return CT_SRgbColor;
}(EG_ColorChoice));
export { CT_SRgbColor };
/**
 * @hidden
 */
var CT_SysColor = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_SysColor, _super);
    function CT_SysColor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = new ST_HexColorRGB();
        _this.d = 0;
        return _this;
    }
    CT_SysColor.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        if (b === void 0) {
            b = Type.getDefaultValue($tArg);
        }
        return a._visitCT_SysColor$i(this, b);
    };
    CT_SysColor.$t = markType(CT_SysColor, 'CT_SysColor', EG_ColorChoice.$, [IEG_ColorChoice_$type]);
    return CT_SysColor;
}(EG_ColorChoice));
export { CT_SysColor };
/**
 * @hidden
 */
export var IEG_ColorChoiceVisitor$2_$type = /*@__PURE__*/ new Type(null, 'IEG_ColorChoiceVisitor$2');
