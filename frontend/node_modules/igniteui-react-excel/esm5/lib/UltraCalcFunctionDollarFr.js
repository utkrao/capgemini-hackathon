/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { MathUtilities } from "./MathUtilities";
import { markType } from "igniteui-react-core";
import { truncate, log10 } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionDollarFr = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionDollarFr, _super);
    function UltraCalcFunctionDollarFr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionDollarFr.prototype.evaluate = function (a, b) {
        var c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var d = c._toDecimal2();
        if (d < 0) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(4));
        }
        var e = truncate(d);
        if (e == 0) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(2));
        }
        c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var f = c._toDouble3();
        var g = MathUtilities.j(f);
        var h = f - g;
        h *= e;
        var i = UltraCalcFunctionDollarFr._ak(e);
        h /= i;
        f = g + h;
        return new ExcelCalcValue(f);
    };
    UltraCalcFunctionDollarFr._ak = function (a) {
        var b = log10(a);
        var c = Math.round(b);
        var d = Math.pow(10, c);
        if (d < a) {
            d *= 10;
        }
        var e = round10N(d, 0);
        return e;
    };
    UltraCalcFunctionDollarFr.prototype.get_name = function () {
        return "dollarfr";
    };
    Object.defineProperty(UltraCalcFunctionDollarFr.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDollarFr.prototype.get_minArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionDollarFr.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDollarFr.prototype.get_maxArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionDollarFr.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDollarFr.$t = markType(UltraCalcFunctionDollarFr, 'UltraCalcFunctionDollarFr', BuiltInFunctionBase.$);
    return UltraCalcFunctionDollarFr;
}(BuiltInFunctionBase));
export { UltraCalcFunctionDollarFr };
