/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { UltraCalcFunctionConvert_UnitInfo } from "./UltraCalcFunctionConvert_UnitInfo";
import { markType } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { MathUtilities } from "./MathUtilities";
import { ArgumentException } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
import { timeSpanInit2, timeSpanTotalDays, timeSpanTotalHours, timeSpanTotalMinutes, timeSpanTotalSeconds } from "igniteui-react-core";
import { stringCompare } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionConvert = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionConvert, _super);
    function UltraCalcFunctionConvert() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionConvert.prototype.evaluate = function (a, b) {
        var c = a.pop().toString();
        var d = a.pop().toString();
        var e = a.pop();
        if (e.isError) {
            return new ExcelCalcValue(e.toErrorValue());
        }
        var f = e._toDouble3();
        var g = UltraCalcFunctionConvert_UnitInfo.d(d);
        var h = UltraCalcFunctionConvert_UnitInfo.d(c);
        if (g == null || h == null) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(3));
        }
        var i = h.c;
        var j = g.c;
        if (i == 0 || j == 0 || i != j) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(3));
        }
        d = g.l;
        c = h.l;
        f *= g.j;
        var k;
        switch (i) {
            case 1:
                k = UltraCalcFunctionConvert._at(f, d, c);
                break;
            case 2:
                k = UltraCalcFunctionConvert._ak(f, d, c);
                break;
            case 3:
                k = UltraCalcFunctionConvert._as(f, d, c);
                break;
            case 4:
                k = UltraCalcFunctionConvert._aq(f, d, c);
                break;
            case 5:
                k = UltraCalcFunctionConvert._am(f, d, c);
                break;
            case 6:
                k = UltraCalcFunctionConvert._al(f, d, c);
                break;
            case 7:
                k = UltraCalcFunctionConvert._ap(f, d, c);
                break;
            case 8:
                k = UltraCalcFunctionConvert._ao(f, d, c);
                break;
            case 9:
                k = UltraCalcFunctionConvert._ar(f, d, c);
                break;
            case 10:
                k = UltraCalcFunctionConvert._an(f, d, c);
                break;
            default: return new ExcelCalcValue(new ExcelCalcErrorValue(3));
        }
        k /= h.j;
        k = MathUtilities.i(k);
        return new ExcelCalcValue(k);
    };
    UltraCalcFunctionConvert.prototype.get_name = function () {
        return "convert";
    };
    Object.defineProperty(UltraCalcFunctionConvert.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionConvert.prototype.get_minArgs = function () {
        return 3;
    };
    Object.defineProperty(UltraCalcFunctionConvert.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionConvert.prototype.get_maxArgs = function () {
        return 3;
    };
    Object.defineProperty(UltraCalcFunctionConvert.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionConvert._as = function (a, b, c) {
        var d = 365.25;
        var e = 24;
        var f = 60;
        var g = 60;
        var h = 0;
        switch (b) {
            case "yr":
                h = a * d * e * f * g;
                break;
            case "day":
                h = a * e * f * g;
                break;
            case "hr":
                h = a * f * g;
                break;
            case "mn":
                h = a * g;
                break;
            case "sec":
                h = a;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        var i = truncate(round10N(h, 0));
        var j = truncate(((h - i) * 1000));
        var k = timeSpanInit2(0, 0, 0, i, j);
        switch (c) {
            case "yr": return timeSpanTotalDays(k) / d;
            case "day": return timeSpanTotalDays(k);
            case "hr": return timeSpanTotalHours(k);
            case "mn": return timeSpanTotalMinutes(k);
            case "sec": return timeSpanTotalSeconds(k);
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._at = function (a, b, c) {
        var d = 14593.9029372064;
        var e = 453.59237;
        var f = 28.349523125;
        var g = 1.66053100460465E-24;
        var h = 0;
        switch (b) {
            case "sg":
                h = a * d;
                break;
            case "lbm":
                h = a * e;
                break;
            case "ozm":
                h = a * f;
                break;
            case "g":
                h = a;
                break;
            case "u":
                h = a * g;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        switch (c) {
            case "u": return h / g;
            case "g": return h;
            case "ozm": return h / f;
            case "lbm": return h / e;
            case "sg": return h / d;
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._ak = function (a, b, c) {
        var d = 72913.3858267717;
        var e = 63360;
        var f = 39.3700787401575;
        var g = 36;
        var h = 12;
        var i = 0.0138888888888889;
        var j = 0.166666666666667;
        var k = 3.93700787401575E-09;
        var l = 0;
        switch (b) {
            case "Nmi":
                l = a * d;
                break;
            case "mi":
                l = a * e;
                break;
            case "m":
                l = a * f;
                break;
            case "yd":
                l = a * g;
                break;
            case "ft":
                l = a * h;
                break;
            case "in":
                l = a;
                break;
            case "pica":
                l = a * j;
                break;
            case "Pica":
                l = a * i;
                break;
            case "ang":
                l = a * k;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        switch (c) {
            case "ang": return l / k;
            case "pica": return l / j;
            case "Pica": return l / i;
            case "in": return l;
            case "ft": return l / h;
            case "yd": return l / g;
            case "m": return l / f;
            case "mi": return l / e;
            case "Nmi": return l / d;
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._aq = function (a, b, c) {
        var d = 760;
        var e = 0.0075006168270417;
        var f = 0;
        switch (b) {
            case "Pa":
            case "p":
                f = a * e;
                break;
            case "atm":
            case "at":
                f = a * d;
                break;
            case "mmHg":
                f = a;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        switch (c) {
            case "mmHg": return f;
            case "Pa":
            case "p": return f / e;
            case "atm":
            case "at": return f / d;
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._am = function (a, b, c) {
        var d = 4.4482216152605;
        var e = 1E-05;
        var f = 0;
        switch (b) {
            case "lbf":
                f = a * d;
                break;
            case "N":
                f = a;
                break;
            case "dyn":
            case "dy":
                f = a * e;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        switch (c) {
            case "dyn":
            case "dy": return f / e;
            case "N": return f;
            case "lbf": return f / d;
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._al = function (a, b, c) {
        var d = 26845195376961.7;
        var e = 36000000000;
        var f = 10550558526.2;
        var g = 41868000;
        var h = 41840000;
        var i = 10000000;
        var j = 13558179.483314;
        var k = 1.60219000146921E-12;
        var l;
        switch (b) {
            case "HPh":
            case "hh":
                l = a * d;
                break;
            case "Wh":
            case "wh":
                l = a * e;
                break;
            case "BTU":
            case "btu":
                l = a * f;
                break;
            case "cal":
                l = a * g;
                break;
            case "c":
                l = a * h;
                break;
            case "J":
                l = a * i;
                break;
            case "flb":
                l = a * j;
                break;
            case "e":
                l = a;
                break;
            case "eV":
            case "ev":
                l = a * k;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        switch (c) {
            case "eV":
            case "ev": return l / k;
            case "e": return l;
            case "flb": return l / j;
            case "J": return l / i;
            case "c": return l / h;
            case "cal": return l / g;
            case "BTU":
            case "btu": return l / f;
            case "Wh":
            case "wh": return l / e;
            case "HPh":
            case "hh": return l / d;
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._ap = function (a, b, c) {
        var d = 745.69987158227;
        var e;
        switch (b) {
            case "HP":
            case "h":
                e = a * d;
                break;
            case "W":
            case "w":
                e = a;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        switch (c) {
            case "W":
            case "w": return e;
            case "HP":
            case "h": return e / d;
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._ao = function (a, b, c) {
        var d = 10000;
        var e;
        switch (b) {
            case "T":
                e = a * d;
                break;
            case "ga":
                e = a;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        switch (c) {
            case "ga": return e;
            case "T": return e / d;
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._an = function (a, b, c) {
        var d = 768;
        var e = 202.884136211058;
        var f = 192;
        var g = 115.291192848466;
        var h = 96;
        var i = 48;
        var j = 6;
        var k = 3;
        var l;
        switch (b) {
            case "gal":
                l = a * d;
                break;
            case "l":
            case "lt":
                l = a * e;
                break;
            case "qt":
                l = a * f;
                break;
            case "uk_pt":
                l = a * g;
                break;
            case "pt":
            case "us_pt":
                l = a * h;
                break;
            case "cup":
                l = a * i;
                break;
            case "oz":
                l = a * j;
                break;
            case "tbs":
                l = a * k;
                break;
            case "tsp":
                l = a;
                break;
            default: throw new ArgumentException(1, "fromUnit");
        }
        switch (c) {
            case "tsp": return l;
            case "tbs": return l / k;
            case "oz": return l / j;
            case "cup": return l / i;
            case "pt":
            case "us_pt": return l / h;
            case "uk_pt": return l / g;
            case "qt": return l / f;
            case "l":
            case "lt": return l / e;
            case "gal": return l / d;
            default: throw new ArgumentException(1, "toUnit");
        }
    };
    UltraCalcFunctionConvert._ar = function (a, b, c) {
        b = UltraCalcFunctionConvert._au(b);
        c = UltraCalcFunctionConvert._au(c);
        if (stringCompare(b, c) == 0) {
            return a;
        }
        var d;
        switch (b) {
            case "C": switch (c) {
                case "F": return ((a * 9) / 5) + 32;
                case "K": return a + 273.15;
                default: throw new ArgumentException(1, "toUnit");
            }
            case "F":
                d = ((a - 32) / 9) * 5;
                switch (c) {
                    case "C": return d;
                    case "K": return d + 273.15;
                    default: throw new ArgumentException(1, "toUnit");
                }
            case "K":
                d = (a - 273.15);
                switch (c) {
                    case "C": return d;
                    case "F": return ((d * 9) / 5) + 32;
                    default: throw new ArgumentException(1, "toUnit");
                }
            default: throw new ArgumentException(1, "fromUnit");
        }
    };
    UltraCalcFunctionConvert._au = function (a) {
        switch (a) {
            case "C":
            case "cel": return "C";
            case "F":
            case "fah": return "F";
            case "K":
            case "kel": return "K";
            default: throw new ArgumentException(1, "unit");
        }
    };
    UltraCalcFunctionConvert.prototype.doesParameterAllowIntermediateResultArray = function (a, b) {
        return (b == false);
    };
    UltraCalcFunctionConvert.$t = markType(UltraCalcFunctionConvert, 'UltraCalcFunctionConvert', BuiltInFunctionBase.$);
    return UltraCalcFunctionConvert;
}(BuiltInFunctionBase));
export { UltraCalcFunctionConvert };
