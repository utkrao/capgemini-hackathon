/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Boolean_$type, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_ObjectType_$type } from "./ST_ObjectType";
import { ST_Checked_$type } from "./ST_Checked";
import { ST_DropStyle_$type } from "./ST_DropStyle";
import { ST_SelType_$type } from "./ST_SelType";
import { ST_TextHAlign_$type } from "./ST_TextHAlign";
import { ST_TextVAlign_$type } from "./ST_TextVAlign";
import { ST_EditValidation_$type } from "./ST_EditValidation";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { CultureInfo } from "igniteui-react-core";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_FormControlPr = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_FormControlPr, _super);
    function CT_FormControlPr() {
        var _this = _super.call(this) || this;
        _this.d = null;
        _this.b = null;
        _this.ay = toNullable(ST_ObjectType_$type, null);
        _this.s = toNullable(ST_Checked_$type, null);
        _this.u = toNullable(Boolean_$type, null);
        _this.w = toNullable(Number_$type, null);
        _this.y = toNullable(ST_DropStyle_$type, null);
        _this.aa = toNullable(Number_$type, null);
        _this.ae = toNullable(Boolean_$type, null);
        _this.bi = null;
        _this.bk = null;
        _this.bm = null;
        _this.bo = null;
        _this.ag = toNullable(Boolean_$type, null);
        _this.ai = toNullable(Number_$type, null);
        _this.ak = toNullable(Boolean_$type, null);
        _this.am = toNullable(Boolean_$type, null);
        _this.ao = toNullable(Number_$type, null);
        _this.aq = toNullable(Number_$type, null);
        _this.bq = null;
        _this.aw = toNullable(Boolean_$type, null);
        _this.av = toNullable(Boolean_$type, null);
        _this.a0 = toNullable(Number_$type, null);
        _this.a4 = toNullable(Number_$type, null);
        _this.a6 = toNullable(ST_SelType_$type, null);
        _this.a8 = toNullable(ST_TextHAlign_$type, null);
        _this.ba = toNullable(ST_TextVAlign_$type, null);
        _this.bc = toNullable(Number_$type, null);
        _this.bg = toNullable(Number_$type, null);
        _this.ac = toNullable(ST_EditValidation_$type, null);
        _this.as = toNullable(Boolean_$type, null);
        _this.be = toNullable(Boolean_$type, null);
        _this.a2 = toNullable(Boolean_$type, null);
        return _this;
    }
    Object.defineProperty(CT_FormControlPr.prototype, "c", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            this.d = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "ax", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "r", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "t", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "v", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "x", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "z", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "ad", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "bh", {
        get: function () {
            return this.bi;
        },
        set: function (a) {
            this.bi = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "bj", {
        get: function () {
            return this.bk;
        },
        set: function (a) {
            this.bk = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "bl", {
        get: function () {
            return this.bm;
        },
        set: function (a) {
            this.bm = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "bn", {
        get: function () {
            return this.bo;
        },
        set: function (a) {
            this.bo = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "af", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "ah", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "aj", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "al", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "an", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "ap", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            this.aq = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "bp", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            this.bq = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "at", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            this.aw = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "au", {
        get: function () {
            return this.av;
        },
        set: function (a) {
            this.av = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "az", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "a3", {
        get: function () {
            return this.a4;
        },
        set: function (a) {
            this.a4 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "a5", {
        get: function () {
            return this.a6;
        },
        set: function (a) {
            this.a6 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "a7", {
        get: function () {
            return this.a8;
        },
        set: function (a) {
            this.a8 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "a9", {
        get: function () {
            return this.ba;
        },
        set: function (a) {
            this.ba = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "bb", {
        get: function () {
            return this.bc;
        },
        set: function (a) {
            this.bc = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "bf", {
        get: function () {
            return this.bg;
        },
        set: function (a) {
            this.bg = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "ab", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "ar", {
        get: function () {
            return this.as;
        },
        set: function (a) {
            this.as = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "bd", {
        get: function () {
            return this.be;
        },
        set: function (a) {
            this.be = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FormControlPr.prototype, "a1", {
        get: function () {
            return this.a2;
        },
        set: function (a) {
            this.a2 = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_FormControlPr.bv = function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af) {
        var e_1, _a;
        b = toNullable(ST_ObjectType_$type, null);
        c = toNullable(ST_Checked_$type, null);
        d = toNullable(Boolean_$type, null);
        e = toNullable(Number_$type, null);
        f = toNullable(ST_DropStyle_$type, null);
        g = toNullable(Number_$type, null);
        h = toNullable(Boolean_$type, null);
        i = null;
        j = null;
        k = null;
        l = null;
        m = toNullable(Boolean_$type, null);
        n = toNullable(Number_$type, null);
        o = toNullable(Boolean_$type, null);
        p = toNullable(Boolean_$type, null);
        q = toNullable(Number_$type, null);
        r = toNullable(Number_$type, null);
        s = null;
        t = toNullable(Boolean_$type, null);
        u = toNullable(Boolean_$type, null);
        v = toNullable(Number_$type, null);
        w = toNullable(Number_$type, null);
        x = toNullable(ST_SelType_$type, null);
        y = toNullable(ST_TextHAlign_$type, null);
        z = toNullable(ST_TextVAlign_$type, null);
        aa = toNullable(Number_$type, null);
        ab = toNullable(Number_$type, null);
        ac = toNullable(ST_EditValidation_$type, null);
        ad = toNullable(Boolean_$type, null);
        ae = toNullable(Boolean_$type, null);
        af = toNullable(Boolean_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var ag = _c.value;
                switch (ag.a.e(a.d)) {
                    case "objectType":
                        b = toNullable(ST_ObjectType_$type, XmlNamespaceDefinitionBase.b(ST_ObjectType_$type, ag.d));
                        break;
                    case "checked":
                        c = toNullable(ST_Checked_$type, XmlNamespaceDefinitionBase.b(ST_Checked_$type, ag.d));
                        break;
                    case "colored":
                        d = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "dropLines":
                        e = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "dropStyle":
                        f = toNullable(ST_DropStyle_$type, XmlNamespaceDefinitionBase.b(ST_DropStyle_$type, ag.d));
                        break;
                    case "dx":
                        g = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "firstButton":
                        h = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "fmlaGroup":
                        i = ag.d;
                        break;
                    case "fmlaLink":
                        j = ag.d;
                        break;
                    case "fmlaRange":
                        k = ag.d;
                        break;
                    case "fmlaTxbx":
                        l = ag.d;
                        break;
                    case "horiz":
                        m = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "inc":
                        n = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "justLastX":
                        o = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "lockText":
                        p = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "max":
                        q = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "min":
                        r = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "multiSel":
                        s = ag.d;
                        break;
                    case "noThreeD":
                        t = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "noThreeD2":
                        u = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "page":
                        v = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "sel":
                        w = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "seltype":
                        x = toNullable(ST_SelType_$type, XmlNamespaceDefinitionBase.b(ST_SelType_$type, ag.d));
                        break;
                    case "textHAlign":
                        y = toNullable(ST_TextHAlign_$type, XmlNamespaceDefinitionBase.b(ST_TextHAlign_$type, ag.d));
                        break;
                    case "textVAlign":
                        z = toNullable(ST_TextVAlign_$type, XmlNamespaceDefinitionBase.b(ST_TextVAlign_$type, ag.d));
                        break;
                    case "val":
                        aa = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "widthMin":
                        ab = toNullable(Number_$type, parseUInt32_1(ag.d, CultureInfo.invariantCulture));
                        break;
                    case "editVal":
                        ac = toNullable(ST_EditValidation_$type, XmlNamespaceDefinitionBase.b(ST_EditValidation_$type, ag.d));
                        break;
                    case "multiLine":
                        ad = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "verticalBar":
                        ae = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    case "passwordEdit":
                        af = toNullable(Boolean_$type, ST_OnOff.e(ag.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i,
            p9: j,
            p10: k,
            p11: l,
            p12: m,
            p13: n,
            p14: o,
            p15: p,
            p16: q,
            p17: r,
            p18: s,
            p19: t,
            p20: u,
            p21: v,
            p22: w,
            p23: x,
            p24: y,
            p25: z,
            p26: aa,
            p27: ab,
            p28: ac,
            p29: ad,
            p30: ae,
            p31: af
        };
    };
    CT_FormControlPr.bw = function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af, ag) {
        if (c === void 0) {
            c = toNullable(ST_Checked_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Boolean_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Number_$type, null);
        }
        if (f === void 0) {
            f = toNullable(ST_DropStyle_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Number_$type, null);
        }
        if (h === void 0) {
            h = toNullable(ST_EditValidation_$type, null);
        }
        if (i === void 0) {
            i = toNullable(Boolean_$type, null);
        }
        if (j === void 0) {
            j = null;
        }
        if (k === void 0) {
            k = null;
        }
        if (l === void 0) {
            l = null;
        }
        if (m === void 0) {
            m = null;
        }
        if (n === void 0) {
            n = toNullable(Boolean_$type, null);
        }
        if (o === void 0) {
            o = toNullable(Number_$type, null);
        }
        if (p === void 0) {
            p = toNullable(Boolean_$type, null);
        }
        if (q === void 0) {
            q = toNullable(Boolean_$type, null);
        }
        if (r === void 0) {
            r = toNullable(Number_$type, null);
        }
        if (s === void 0) {
            s = toNullable(Number_$type, null);
        }
        if (t === void 0) {
            t = toNullable(Boolean_$type, null);
        }
        if (u === void 0) {
            u = null;
        }
        if (v === void 0) {
            v = toNullable(Boolean_$type, null);
        }
        if (w === void 0) {
            w = toNullable(Boolean_$type, null);
        }
        if (x === void 0) {
            x = toNullable(ST_ObjectType_$type, null);
        }
        if (y === void 0) {
            y = toNullable(Number_$type, null);
        }
        if (z === void 0) {
            z = toNullable(Boolean_$type, null);
        }
        if (aa === void 0) {
            aa = toNullable(Number_$type, null);
        }
        if (ab === void 0) {
            ab = toNullable(ST_SelType_$type, null);
        }
        if (ac === void 0) {
            ac = toNullable(ST_TextHAlign_$type, null);
        }
        if (ad === void 0) {
            ad = toNullable(ST_TextVAlign_$type, null);
        }
        if (ae === void 0) {
            ae = toNullable(Number_$type, null);
        }
        if (af === void 0) {
            af = toNullable(Boolean_$type, null);
        }
        if (ag === void 0) {
            ag = toNullable(Number_$type, null);
        }
        a.ad.p(b, null);
        var ah = null;
        var ai = null;
        if (c.hasValue) {
            ai = "checked";
            ah = XmlNamespaceDefinitionBase.p(ST_Checked_$type, c.value);
            a.ad.h(ai, ah);
        }
        if (d.hasValue) {
            ai = "colored";
            ah = ST_OnOff.g(d.value);
            a.ad.h(ai, ah);
        }
        if (e.hasValue) {
            ai = "dropLines";
            ah = e.value.toString();
            a.ad.h(ai, ah);
        }
        if (f.hasValue) {
            ai = "dropStyle";
            ah = XmlNamespaceDefinitionBase.p(ST_DropStyle_$type, f.value);
            a.ad.h(ai, ah);
        }
        if (g.hasValue) {
            ai = "dx";
            ah = g.value.toString();
            a.ad.h(ai, ah);
        }
        if (h.hasValue) {
            ai = "editVal";
            ah = XmlNamespaceDefinitionBase.p(ST_EditValidation_$type, h.value);
            a.ad.h(ai, ah);
        }
        if (i.hasValue) {
            ai = "firstButton";
            ah = ST_OnOff.g(i.value);
            a.ad.h(ai, ah);
        }
        if (j != null) {
            ai = "fmlaGroup";
            ah = j;
            a.ad.h(ai, ah);
        }
        if (k != null) {
            ai = "fmlaLink";
            ah = k;
            a.ad.h(ai, ah);
        }
        if (l != null) {
            ai = "fmlaRange";
            ah = l;
            a.ad.h(ai, ah);
        }
        if (m != null) {
            ai = "fmlaTxbx";
            ah = m;
            a.ad.h(ai, ah);
        }
        if (n.hasValue) {
            ai = "horiz";
            ah = ST_OnOff.g(n.value);
            a.ad.h(ai, ah);
        }
        if (o.hasValue) {
            ai = "inc";
            ah = o.value.toString();
            a.ad.h(ai, ah);
        }
        if (p.hasValue) {
            ai = "justLastX";
            ah = ST_OnOff.g(p.value);
            a.ad.h(ai, ah);
        }
        if (q.hasValue) {
            ai = "lockText";
            ah = ST_OnOff.g(q.value);
            a.ad.h(ai, ah);
        }
        if (r.hasValue) {
            ai = "max";
            ah = r.value.toString();
            a.ad.h(ai, ah);
        }
        if (s.hasValue) {
            ai = "min";
            ah = s.value.toString();
            a.ad.h(ai, ah);
        }
        if (t.hasValue) {
            ai = "multiLine";
            ah = ST_OnOff.g(t.value);
            a.ad.h(ai, ah);
        }
        if (u != null) {
            ai = "multiSel";
            ah = u;
            a.ad.h(ai, ah);
        }
        if (v.hasValue) {
            ai = "noThreeD";
            ah = ST_OnOff.g(v.value);
            a.ad.h(ai, ah);
        }
        if (w.hasValue) {
            ai = "noThreeD2";
            ah = ST_OnOff.g(w.value);
            a.ad.h(ai, ah);
        }
        if (x.hasValue) {
            ai = "objectType";
            ah = XmlNamespaceDefinitionBase.p(ST_ObjectType_$type, x.value);
            a.ad.h(ai, ah);
        }
        if (y.hasValue) {
            ai = "page";
            ah = y.value.toString();
            a.ad.h(ai, ah);
        }
        if (z.hasValue) {
            ai = "passwordEdit";
            ah = ST_OnOff.g(z.value);
            a.ad.h(ai, ah);
        }
        if (aa.hasValue) {
            ai = "sel";
            ah = aa.value.toString();
            a.ad.h(ai, ah);
        }
        if (ab.hasValue) {
            ai = "seltype";
            ah = XmlNamespaceDefinitionBase.p(ST_SelType_$type, ab.value);
            a.ad.h(ai, ah);
        }
        if (ac.hasValue) {
            ai = "textHAlign";
            ah = XmlNamespaceDefinitionBase.p(ST_TextHAlign_$type, ac.value);
            a.ad.h(ai, ah);
        }
        if (ad.hasValue) {
            ai = "textVAlign";
            ah = XmlNamespaceDefinitionBase.p(ST_TextVAlign_$type, ad.value);
            a.ad.h(ai, ah);
        }
        if (ae.hasValue) {
            ai = "val";
            ah = ae.value.toString();
            a.ad.h(ai, ah);
        }
        if (af.hasValue) {
            ai = "verticalBar";
            ah = ST_OnOff.g(af.value);
            a.ad.h(ai, ah);
        }
        if (ag.hasValue) {
            ai = "widthMin";
            ah = ag.value.toString();
            a.ad.h(ai, ah);
        }
        ;
    };
    CT_FormControlPr.$t = markType(CT_FormControlPr, 'CT_FormControlPr');
    return CT_FormControlPr;
}(Base));
export { CT_FormControlPr };
