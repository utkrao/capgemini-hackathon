/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, typeCast, Number_$type, markStruct } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { CultureInfo } from "igniteui-react-core";
import { tryParseInt64_2 } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_PositiveCoordinate = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_PositiveCoordinate, _super);
    function ST_PositiveCoordinate(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.m = 0;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    DocCoreUtils.aw(ST_PositiveCoordinate.$, c, "emus", 0, 27273042316900);
                    _this.m = c;
                }
                break;
        }
        return _this;
    }
    ST_PositiveCoordinate.prototype.equals = function (a) {
        var b = toNullable(ST_PositiveCoordinate.$, typeCast(ST_PositiveCoordinate.$, a));
        if (ST_PositiveCoordinate.g(b, toNullable(ST_PositiveCoordinate.$, null))) {
            return false;
        }
        return ST_PositiveCoordinate.d(this, b.getValueOrDefault());
    };
    ST_PositiveCoordinate.prototype.getHashCode = function () {
        return (this.m);
    };
    ST_PositiveCoordinate.prototype.toString = function () {
        return this.m.toString();
    };
    ST_PositiveCoordinate.prototype.n = function () {
        return this.m;
    };
    ST_PositiveCoordinate.prototype.j = function () {
        return DocCoreUtils.i(this.m);
    };
    ST_PositiveCoordinate.c = function (a) {
        var b = ST_PositiveCoordinate.s(a);
        if (ST_PositiveCoordinate.g(b, toNullable(ST_PositiveCoordinate.$, null))) {
            return b.getValueOrDefault();
        }
        throw DocCoreUtils.n(ST_PositiveCoordinate.$, a);
    };
    ST_PositiveCoordinate.s = function (a) {
        var b;
        if (((function () { var c = tryParseInt64_2(a, 7, CultureInfo.invariantCulture, b); b = c.p3; return c.ret; })()) == false) {
            return toNullable(ST_PositiveCoordinate.$, null);
        }
        return toNullable(ST_PositiveCoordinate.$, ST_PositiveCoordinate.a(b));
    };
    ST_PositiveCoordinate.d = function (a, b) {
        return a.m == b.m;
    };
    ST_PositiveCoordinate.e = function (a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return ST_PositiveCoordinate.d(a.value, b.value);
    };
    ST_PositiveCoordinate.f = function (a, b) {
        return !(ST_PositiveCoordinate.d(a, b));
    };
    ST_PositiveCoordinate.g = function (a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return ST_PositiveCoordinate.f(a.value, b.value);
    };
    ST_PositiveCoordinate.a = function (a) {
        return new ST_PositiveCoordinate(1, a);
    };
    ST_PositiveCoordinate.r = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_PositiveCoordinate.$, null);
        }
        return toNullable(ST_PositiveCoordinate.$, ST_PositiveCoordinate.a(a.value));
    };
    ST_PositiveCoordinate.o = function (a) {
        return a.m;
    };
    ST_PositiveCoordinate.q = function (a) {
        if (!a.hasValue) {
            return toNullable(Number_$type, null);
        }
        return toNullable(Number_$type, ST_PositiveCoordinate.o(a.value));
    };
    ST_PositiveCoordinate.$t = markStruct(ST_PositiveCoordinate, 'ST_PositiveCoordinate');
    return ST_PositiveCoordinate;
}(ValueType));
export { ST_PositiveCoordinate };
