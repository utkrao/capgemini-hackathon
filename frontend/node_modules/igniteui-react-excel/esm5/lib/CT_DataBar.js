/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { List$1 } from "igniteui-react-core";
import { CT_Cfvo } from "./CT_Cfvo";
import { ColorInfo } from "./ColorInfo";
import { CultureInfo } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_DataBar = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_DataBar, _super);
    function CT_DataBar() {
        var _this = _super.call(this) || this;
        _this.c = null;
        _this.a = null;
        _this.e = toNullable(Number_$type, null);
        _this.d = toNullable(Number_$type, null);
        _this.f = toNullable(Boolean_$type, null);
        _this.c = new List$1(CT_Cfvo.$, 0);
        return _this;
    }
    CT_DataBar.j = function (a, b, c, d) {
        var e_1, _a;
        b = toNullable(Number_$type, null);
        c = toNullable(Number_$type, null);
        d = toNullable(Boolean_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                switch (e.a.e(a.d)) {
                    case "minLength":
                        b = toNullable(Number_$type, parseUInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "maxLength":
                        c = toNullable(Number_$type, parseUInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "showValue":
                        d = toNullable(Boolean_$type, ST_OnOff.e(e.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return {
            p1: b,
            p2: c,
            p3: d
        };
    };
    CT_DataBar.k = function (a, b, c, d, e) {
        if (c === void 0) {
            c = toNullable(Number_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Number_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Boolean_$type, null);
        }
        a.ad.p(b, null);
        var f = null;
        var g = null;
        if (c.hasValue) {
            g = "maxLength";
            f = c.value.toString();
            a.ad.h(g, f);
        }
        if (d.hasValue) {
            g = "minLength";
            f = d.value.toString();
            a.ad.h(g, f);
        }
        if (e.hasValue) {
            g = "showValue";
            f = ST_OnOff.g(e.value);
            a.ad.h(g, f);
        }
    };
    CT_DataBar.prototype.setProperty = function (a, b) {
        switch (a) {
            case 252:
                this.c.add(typeCast(CT_Cfvo.$, b));
                break;
            case 302:
                this.a = typeCast(ColorInfo.$, b);
                break;
            default: break;
        }
    };
    CT_DataBar.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_DataBar.$t = markType(CT_DataBar, 'CT_DataBar', Base.$, [ISupportSetProperty_$type]);
    return CT_DataBar;
}(Base));
export { CT_DataBar };
