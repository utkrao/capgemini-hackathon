/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_OfficeArtExtensionList } from "./CT_OfficeArtExtensionList";
import { ST_OnOffStyleType_$type } from "./ST_OnOffStyleType";
import { EG_ThemeableFontStyles } from "./EG_ThemeableFontStyles";
import { EG_ColorChoice_DML } from "./EG_ColorChoice_DML";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
/**
 * @hidden
 */
var CT_TableStyleTextStyle = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_TableStyleTextStyle, _super);
    function CT_TableStyleTextStyle() {
        var _this = _super.call(this) || this;
        _this.b = null;
        _this.j = toNullable(ST_OnOffStyleType_$type, null);
        _this.l = toNullable(ST_OnOffStyleType_$type, null);
        _this.e = null;
        _this.c = null;
        return _this;
    }
    Object.defineProperty(CT_TableStyleTextStyle.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableStyleTextStyle.prototype, "i", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableStyleTextStyle.prototype, "k", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableStyleTextStyle.prototype, "f", {
        get: function () {
            if (this.e == null) {
                this.e = new EG_ThemeableFontStyles();
            }
            return this.e;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableStyleTextStyle.prototype, "d", {
        get: function () {
            if (this.c == null) {
                this.c = new EG_ColorChoice_DML();
            }
            return this.c;
        },
        enumerable: false,
        configurable: true
    });
    CT_TableStyleTextStyle.n = function (a, b, c) {
        var e_1, _a;
        b = toNullable(ST_OnOffStyleType_$type, null);
        c = toNullable(ST_OnOffStyleType_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var d = _c.value;
                switch (d.a.e(a.d)) {
                    case "b":
                        b = toNullable(ST_OnOffStyleType_$type, XmlNamespaceDefinitionBase.b(ST_OnOffStyleType_$type, d.d));
                        break;
                    case "i":
                        c = toNullable(ST_OnOffStyleType_$type, XmlNamespaceDefinitionBase.b(ST_OnOffStyleType_$type, d.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c
        };
    };
    CT_TableStyleTextStyle.o = function (a, b, c, d) {
        if (c === void 0) {
            c = toNullable(ST_OnOffStyleType_$type, null);
        }
        if (d === void 0) {
            d = toNullable(ST_OnOffStyleType_$type, null);
        }
        a.ad.p(b, "a");
        var e = null;
        var f = null;
        if (c.hasValue) {
            f = "b";
            e = XmlNamespaceDefinitionBase.p(ST_OnOffStyleType_$type, c.value);
            a.ad.h(f, e);
        }
        if (d.hasValue) {
            f = "i";
            e = XmlNamespaceDefinitionBase.p(ST_OnOffStyleType_$type, d.value);
            a.ad.h(f, e);
        }
        ;
    };
    CT_TableStyleTextStyle.prototype.setProperty = function (a, b) {
        switch (a) {
            case 601:
                this.a = typeCast(CT_OfficeArtExtensionList.$, b);
                break;
            default:
                if (this.f.c(a)) {
                    this.f.e(a, b);
                    return;
                }
                else if (this.d.g(a)) {
                    this.d.i(a, b);
                    return;
                }
                break;
        }
    };
    CT_TableStyleTextStyle.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_TableStyleTextStyle.$t = markType(CT_TableStyleTextStyle, 'CT_TableStyleTextStyle', Base.$, [ISupportSetProperty_$type]);
    return CT_TableStyleTextStyle;
}(Base));
export { CT_TableStyleTextStyle };
