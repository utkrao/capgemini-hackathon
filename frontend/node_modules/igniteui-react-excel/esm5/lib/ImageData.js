/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
/**
 * @hidden
 */
var ImageData = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ImageData, _super);
    function ImageData(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.c = null;
        _this.e = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.a = d;
                    _this.c = c;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.c = c;
                    _this.a = DocCoreUtils.c(d);
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(ImageData.prototype, "b", {
        get: function () {
            return this.a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageData.prototype, "d", {
        get: function () {
            return this.c;
        },
        enumerable: false,
        configurable: true
    });
    ImageData.prototype.f = function (a) {
        a.write(this.a, 0, this.a.length);
    };
    ImageData.$t = markType(ImageData, 'ImageData');
    return ImageData;
}(Base));
export { ImageData };
