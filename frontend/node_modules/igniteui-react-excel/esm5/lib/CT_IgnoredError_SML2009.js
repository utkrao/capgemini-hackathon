/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
var CT_IgnoredError_SML2009 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_IgnoredError_SML2009, _super);
    function CT_IgnoredError_SML2009() {
        var _this = _super.call(this) || this;
        _this.b = null;
        _this.q = toNullable(Boolean_$type, null);
        _this.aa = toNullable(Boolean_$type, null);
        _this.y = toNullable(Boolean_$type, null);
        _this.s = toNullable(Boolean_$type, null);
        _this.u = toNullable(Boolean_$type, null);
        _this.ac = toNullable(Boolean_$type, null);
        _this.o = toNullable(Boolean_$type, null);
        _this.w = toNullable(Boolean_$type, null);
        _this.m = toNullable(Boolean_$type, null);
        return _this;
    }
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "p", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "z", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "x", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "r", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "t", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "ab", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "n", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "v", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_IgnoredError_SML2009.prototype, "l", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_IgnoredError_SML2009.ad = function (a, b, c, d, e, f, g, h, i, j) {
        var e_1, _a;
        b = toNullable(Boolean_$type, null);
        c = toNullable(Boolean_$type, null);
        d = toNullable(Boolean_$type, null);
        e = toNullable(Boolean_$type, null);
        f = toNullable(Boolean_$type, null);
        g = toNullable(Boolean_$type, null);
        h = toNullable(Boolean_$type, null);
        i = toNullable(Boolean_$type, null);
        j = toNullable(Boolean_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var k = _c.value;
                switch (k.a.e(a.d)) {
                    case "evalError":
                        b = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "twoDigitTextYear":
                        c = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "numberStoredAsText":
                        d = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "formula":
                        e = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "formulaRange":
                        f = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "unlockedFormula":
                        g = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "emptyCellReference":
                        h = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "listDataValidation":
                        i = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "calculatedColumn":
                        j = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i,
            p9: j
        };
    };
    CT_IgnoredError_SML2009.ae = function (a, b, c, d, e, f, g, h, i, j, k) {
        if (c === void 0) {
            c = toNullable(Boolean_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Boolean_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Boolean_$type, null);
        }
        if (f === void 0) {
            f = toNullable(Boolean_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Boolean_$type, null);
        }
        if (h === void 0) {
            h = toNullable(Boolean_$type, null);
        }
        if (i === void 0) {
            i = toNullable(Boolean_$type, null);
        }
        if (j === void 0) {
            j = toNullable(Boolean_$type, null);
        }
        if (k === void 0) {
            k = toNullable(Boolean_$type, null);
        }
        a.ad.p(b, null);
        var l = null;
        var m = null;
        if (c.hasValue) {
            m = "calculatedColumn";
            l = ST_OnOff.g(c.value);
            a.ad.h(m, l);
        }
        if (d.hasValue) {
            m = "emptyCellReference";
            l = ST_OnOff.g(d.value);
            a.ad.h(m, l);
        }
        if (e.hasValue) {
            m = "evalError";
            l = ST_OnOff.g(e.value);
            a.ad.h(m, l);
        }
        if (f.hasValue) {
            m = "formula";
            l = ST_OnOff.g(f.value);
            a.ad.h(m, l);
        }
        if (g.hasValue) {
            m = "formulaRange";
            l = ST_OnOff.g(g.value);
            a.ad.h(m, l);
        }
        if (h.hasValue) {
            m = "listDataValidation";
            l = ST_OnOff.g(h.value);
            a.ad.h(m, l);
        }
        if (i.hasValue) {
            m = "numberStoredAsText";
            l = ST_OnOff.g(i.value);
            a.ad.h(m, l);
        }
        if (j.hasValue) {
            m = "twoDigitTextYear";
            l = ST_OnOff.g(j.value);
            a.ad.h(m, l);
        }
        if (k.hasValue) {
            m = "unlockedFormula";
            l = ST_OnOff.g(k.value);
            a.ad.h(m, l);
        }
        ;
    };
    CT_IgnoredError_SML2009.$t = markType(CT_IgnoredError_SML2009, 'CT_IgnoredError_SML2009');
    return CT_IgnoredError_SML2009;
}(Base));
export { CT_IgnoredError_SML2009 };
