/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
/**
 * Exposes the information necessary for drawing an icon for a specific cell.
 * @see [[CellConditionalFormat]]
 */
var CellIconInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CellIconInfo, _super);
    function CellIconInfo(a, b, c, d) {
        var _this = _super.call(this) || this;
        _this._e = false;
        _this._g = 0;
        _this._a = 0;
        _this._c = 0;
        _this._c = a;
        _this._a = b;
        _this._g = c;
        _this._e = d;
        return _this;
    }
    Object.defineProperty(CellIconInfo.prototype, "icon", {
        /**
         * The icon to be drawn (read-only).
         */
        get: function () {
            return this._a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellIconInfo.prototype, "iconIndex", {
        /**
         * The index of the icon in the icon set (read-only).
         */
        get: function () {
            return this._g;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellIconInfo.prototype, "iconSet", {
        /**
         * The icon set (read-only).
         */
        get: function () {
            return this._c;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellIconInfo.prototype, "showValue", {
        /**
         * Returns whether the cell value is to be shown along with the data bar (read-only).
         */
        get: function () {
            return this._e;
        },
        enumerable: false,
        configurable: true
    });
    CellIconInfo.$t = markType(CellIconInfo, 'CellIconInfo');
    return CellIconInfo;
}(Base));
export { CellIconInfo };
