/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { List$1 } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
import { markType } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
/**
 * @hidden
 */
var UltraCalcFunctionConcatEx = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionConcatEx, _super);
    function UltraCalcFunctionConcatEx() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionConcatEx.prototype.evaluate = function (a, b) {
        var c = new List$1(ExcelCalcValue.$, 0);
        this._ad(c, a, b, true);
        var d = new StringBuilder(0);
        for (var e = 0; e < c.count; e++) {
            var f = c._inner[e];
            if (f.isError) {
                return new ExcelCalcValue(f.toErrorValue());
            }
            d.l(f.toString());
        }
        if (d.c > 32767) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(1));
        }
        return new ExcelCalcValue(d.toString());
    };
    UltraCalcFunctionConcatEx.prototype.get_name = function () {
        return "concat";
    };
    Object.defineProperty(UltraCalcFunctionConcatEx.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionConcatEx.prototype.get_minArgs = function () {
        return 1;
    };
    Object.defineProperty(UltraCalcFunctionConcatEx.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionConcatEx.prototype.get_maxArgs = function () {
        return 0x7FFFFFFF;
    };
    Object.defineProperty(UltraCalcFunctionConcatEx.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionConcatEx.$t = markType(UltraCalcFunctionConcatEx, 'UltraCalcFunctionConcatEx', BuiltInFunctionBase.$);
    return UltraCalcFunctionConcatEx;
}(BuiltInFunctionBase));
export { UltraCalcFunctionConcatEx };
