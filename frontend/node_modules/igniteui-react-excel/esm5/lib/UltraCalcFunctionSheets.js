/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { typeCast, fromEnum, markType } from "igniteui-react-core";
import { NamedCalcReferenceUnconnected } from "./NamedCalcReferenceUnconnected";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
/**
 * @hidden
 */
var UltraCalcFunctionSheets = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionSheets, _super);
    function UltraCalcFunctionSheets() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionSheets.prototype.evaluate = function (a, b) {
        var e_1, _a;
        var c = null;
        if (b == 1) {
            c = a.pop();
        }
        var d;
        if (b == 0) {
            d = a._r._sheets$i.count;
        }
        else if (c.isReference) {
            var e = c.toReference();
            if (typeCast(NamedCalcReferenceUnconnected.$, e) !== null) {
                d = new ExcelCalcErrorValue(1);
            }
            else {
                var f = e._am();
                if (f.count == 1) {
                    d = 1;
                }
                else {
                    var g = 0x7FFFFFFF;
                    var h = -2147483648;
                    try {
                        for (var _b = __values(fromEnum(f)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var i = _c.value;
                            var j = i.worksheet.sheetIndex;
                            if (j < g) {
                                g = j;
                            }
                            if (j > h) {
                                h = j;
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return))
                                _a.call(_b);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                    d = (h - g) + 1;
                }
            }
        }
        else if (c.isString || c.isBoolean) {
            d = new ExcelCalcErrorValue(1);
        }
        else if (c.isError) {
            d = c.toErrorValue();
        }
        else {
            d = new ExcelCalcErrorValue(3);
        }
        return new ExcelCalcValue(d);
    };
    UltraCalcFunctionSheets.prototype.get_maxArgs = function () {
        return 1;
    };
    Object.defineProperty(UltraCalcFunctionSheets.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSheets.prototype.get_minArgs = function () {
        return 0;
    };
    Object.defineProperty(UltraCalcFunctionSheets.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSheets.prototype.get_name = function () {
        return "sheets";
    };
    Object.defineProperty(UltraCalcFunctionSheets.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSheets.$t = markType(UltraCalcFunctionSheets, 'UltraCalcFunctionSheets', BuiltInFunctionBase.$);
    return UltraCalcFunctionSheets;
}(BuiltInFunctionBase));
export { UltraCalcFunctionSheets };
