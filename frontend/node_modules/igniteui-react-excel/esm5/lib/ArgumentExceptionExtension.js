/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ArgumentException } from "igniteui-react-core";
import { BaseError, typeCast, markType } from "igniteui-react-core";
/**
 * Extend the class ArgumentException to add a constructor
 */
var ArgumentExceptionExtension = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ArgumentExceptionExtension, _super);
    function ArgumentExceptionExtension() {
        var _rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _rest[_i] = arguments[_i];
        }
        var _this = this;
        var a;
        if (arguments.length === 0) {
            a = 0;
        }
        else if (arguments.length === 1) {
            a = 0;
        }
        else if (arguments.length === 2) {
            if (typeof arguments[1] === 'string') {
                a = 1;
            }
            else if (typeCast(BaseError.$, arguments[1]) !== null) {
                a = 0;
            }
            else if (arguments[1] == null) {
                a = 0;
            }
        }
        else if (arguments.length === 3) {
            a = 1;
        }
        switch (a) {
            case 0:
                {
                    var message = _rest[0];
                    var innerException = _rest[1];
                    _this = _super.call(this, 3, message, innerException) || this;
                    message = (message !== void 0 ? message : null);
                    innerException = (innerException !== void 0 ? innerException : null);
                }
                break;
            case 1:
                {
                    var message = _rest[0];
                    var paramName = _rest[1];
                    var innerException = _rest[2];
                    _this = _super.call(this, 3, message, innerException) || this;
                    innerException = (innerException !== void 0 ? innerException : null);
                }
                break;
            default: throw new Error('Invalid arguments');
        }
        return _this;
    }
    ArgumentExceptionExtension.$t = markType(ArgumentExceptionExtension, 'ArgumentExceptionExtension', ArgumentException.$);
    return ArgumentExceptionExtension;
}(ArgumentException));
export { ArgumentExceptionExtension };
