/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_DataBarDirection_$type } from "./ST_DataBarDirection";
import { ST_DataBarAxisPosition_$type } from "./ST_DataBarAxisPosition";
import { CultureInfo } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { parseUInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_DataBar_SML2009 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_DataBar_SML2009, _super);
    function CT_DataBar_SML2009() {
        var _this = _super.call(this) || this;
        _this.q = null;
        _this.f = null;
        _this.d = null;
        _this.j = null;
        _this.h = null;
        _this.b = null;
        _this.ac = toNullable(Number_$type, null);
        _this.aa = toNullable(Number_$type, null);
        _this.ai = toNullable(Boolean_$type, null);
        _this.u = toNullable(Boolean_$type, null);
        _this.y = toNullable(Boolean_$type, null);
        _this.w = toNullable(ST_DataBarDirection_$type, null);
        _this.ag = toNullable(Boolean_$type, null);
        _this.ae = toNullable(Boolean_$type, null);
        _this.s = toNullable(ST_DataBarAxisPosition_$type, null);
        return _this;
    }
    Object.defineProperty(CT_DataBar_SML2009.prototype, "p", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "e", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "c", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            this.d = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "i", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "g", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "ab", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "z", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "ah", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "t", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "x", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "v", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "af", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "ad", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataBar_SML2009.prototype, "r", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_DataBar_SML2009.al = function (a, b, c, d, e, f, g, h, i, j) {
        var e_1, _a;
        b = toNullable(Number_$type, null);
        c = toNullable(Number_$type, null);
        d = toNullable(Boolean_$type, null);
        e = toNullable(Boolean_$type, null);
        f = toNullable(Boolean_$type, null);
        g = toNullable(ST_DataBarDirection_$type, null);
        h = toNullable(Boolean_$type, null);
        i = toNullable(Boolean_$type, null);
        j = toNullable(ST_DataBarAxisPosition_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var k = _c.value;
                switch (k.a.e(a.d)) {
                    case "minLength":
                        b = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "maxLength":
                        c = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "showValue":
                        d = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "border":
                        e = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "gradient":
                        f = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "direction":
                        g = toNullable(ST_DataBarDirection_$type, XmlNamespaceDefinitionBase.b(ST_DataBarDirection_$type, k.d));
                        break;
                    case "negativeBarColorSameAsPositive":
                        h = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "negativeBarBorderColorSameAsPositive":
                        i = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "axisPosition":
                        j = toNullable(ST_DataBarAxisPosition_$type, XmlNamespaceDefinitionBase.b(ST_DataBarAxisPosition_$type, k.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i,
            p9: j
        };
    };
    CT_DataBar_SML2009.am = function (a, b, c, d, e, f, g, h, i, j, k) {
        if (c === void 0) {
            c = toNullable(ST_DataBarAxisPosition_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Boolean_$type, null);
        }
        if (e === void 0) {
            e = toNullable(ST_DataBarDirection_$type, null);
        }
        if (f === void 0) {
            f = toNullable(Boolean_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Number_$type, null);
        }
        if (h === void 0) {
            h = toNullable(Number_$type, null);
        }
        if (i === void 0) {
            i = toNullable(Boolean_$type, null);
        }
        if (j === void 0) {
            j = toNullable(Boolean_$type, null);
        }
        if (k === void 0) {
            k = toNullable(Boolean_$type, null);
        }
        a.ad.p(b, null);
        var l = null;
        var m = null;
        if (c.hasValue) {
            m = "axisPosition";
            l = XmlNamespaceDefinitionBase.p(ST_DataBarAxisPosition_$type, c.value);
            a.ad.h(m, l);
        }
        if (d.hasValue) {
            m = "border";
            l = ST_OnOff.g(d.value);
            a.ad.h(m, l);
        }
        if (e.hasValue) {
            m = "direction";
            l = XmlNamespaceDefinitionBase.p(ST_DataBarDirection_$type, e.value);
            a.ad.h(m, l);
        }
        if (f.hasValue) {
            m = "gradient";
            l = ST_OnOff.g(f.value);
            a.ad.h(m, l);
        }
        if (g.hasValue) {
            m = "maxLength";
            l = g.value.toString();
            a.ad.h(m, l);
        }
        if (h.hasValue) {
            m = "minLength";
            l = h.value.toString();
            a.ad.h(m, l);
        }
        if (i.hasValue) {
            m = "negativeBarBorderColorSameAsPositive";
            l = ST_OnOff.g(i.value);
            a.ad.h(m, l);
        }
        if (j.hasValue) {
            m = "negativeBarColorSameAsPositive";
            l = ST_OnOff.g(j.value);
            a.ad.h(m, l);
        }
        if (k.hasValue) {
            m = "showValue";
            l = ST_OnOff.g(k.value);
            a.ad.h(m, l);
        }
        ;
    };
    CT_DataBar_SML2009.$t = markType(CT_DataBar_SML2009, 'CT_DataBar_SML2009');
    return CT_DataBar_SML2009;
}(Base));
export { CT_DataBar_SML2009 };
