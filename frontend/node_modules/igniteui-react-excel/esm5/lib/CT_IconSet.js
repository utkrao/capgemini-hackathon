/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { List$1 } from "igniteui-react-core";
import { CT_Cfvo } from "./CT_Cfvo";
import { ST_IconSetType_$type } from "./ST_IconSetType";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
var CT_IconSet = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_IconSet, _super);
    function CT_IconSet() {
        var _this = _super.call(this) || this;
        _this.e = null;
        _this.f = toNullable(ST_IconSetType_$type, null);
        _this.h = toNullable(Boolean_$type, null);
        _this.d = false;
        _this.g = toNullable(Boolean_$type, null);
        _this.e = new List$1(CT_Cfvo.$, 0);
        return _this;
    }
    CT_IconSet.j = function (a, b, c, d, e) {
        var e_1, _a;
        b = toNullable(ST_IconSetType_$type, null);
        c = toNullable(Boolean_$type, null);
        d = false;
        e = toNullable(Boolean_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var f = _c.value;
                switch (f.a.e(a.d)) {
                    case "iconSet":
                        b = toNullable(ST_IconSetType_$type, XmlNamespaceDefinitionBase.b(ST_IconSetType_$type, f.d));
                        break;
                    case "showValue":
                        c = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    case "percent":
                        d = ST_OnOff.e(f.d);
                        break;
                    case "reverse":
                        e = toNullable(Boolean_$type, ST_OnOff.e(f.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e
        };
    };
    CT_IconSet.k = function (a, b, c, d, e, f) {
        a.ad.p(b, null);
        var g = null;
        var h = null;
        if (c.hasValue) {
            h = "iconSet";
            g = XmlNamespaceDefinitionBase.p(ST_IconSetType_$type, c.value);
            a.ad.h(h, g);
        }
        if (d.hasValue) {
            h = "reverse";
            g = ST_OnOff.g(d.value);
            a.ad.h(h, g);
        }
        if (e.hasValue) {
            h = "showValue";
            g = ST_OnOff.g(e.value);
            a.ad.h(h, g);
        }
        h = "percent";
        g = ST_OnOff.g(f);
        a.ad.h(h, g);
    };
    CT_IconSet.prototype.setProperty = function (a, b) {
        switch (a) {
            case 252:
                this.e.add(typeCast(CT_Cfvo.$, b));
                break;
            default: break;
        }
    };
    CT_IconSet.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_IconSet.$t = markType(CT_IconSet, 'CT_IconSet', Base.$, [ISupportSetProperty_$type]);
    return CT_IconSet;
}(Base));
export { CT_IconSet };
