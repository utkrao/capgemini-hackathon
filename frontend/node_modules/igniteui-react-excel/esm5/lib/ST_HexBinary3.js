/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { tryParseInt32_1, intToString1 } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_HexBinary3 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_HexBinary3, _super);
    function ST_HexBinary3(a, b, c) {
        var _this = _super.call(this) || this;
        _this.d = 0;
        _this.c = 0;
        _this.b = 0;
        _this.d = a;
        _this.c = b;
        _this.b = c;
        return _this;
    }
    ST_HexBinary3.a = function (a) {
        if (stringIsNullOrEmpty(a)) {
            return null;
        }
        if (a.length != 6) {
            return null;
        }
        var b, c, d;
        if (((function () { var e = tryParseInt32_1(a.substr(0, 2), b); b = e.p1; return e.ret; })()) && ((function () { var e = tryParseInt32_1(a.substr(2, 2), c); c = e.p1; return e.ret; })()) && ((function () { var e = tryParseInt32_1(a.substr(4, 2), d); d = e.p1; return e.ret; })())) {
            return new ST_HexBinary3(b, c, d);
        }
        else {
        }
        return null;
    };
    ST_HexBinary3.prototype.f = function () {
        var a = new StringBuilder(1, 6);
        a.l(intToString1(this.d, "X"));
        a.l(intToString1(this.c, "X"));
        a.l(intToString1(this.b, "X"));
        return a.toString();
    };
    ST_HexBinary3.prototype.toString = function () {
        return this.f();
    };
    ST_HexBinary3.$t = markType(ST_HexBinary3, 'ST_HexBinary3');
    return ST_HexBinary3;
}(Base));
export { ST_HexBinary3 };
