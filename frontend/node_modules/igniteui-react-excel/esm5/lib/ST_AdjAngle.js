/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, markStruct } from "igniteui-react-core";
import { ST_GeomGuideName } from "./ST_GeomGuideName";
import { ST_Angle } from "./ST_Angle";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_AdjAngle = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_AdjAngle, _super);
    function ST_AdjAngle(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.b = toNullable(ST_Angle.$, null);
        _this.c = toNullable(ST_GeomGuideName.$, null);
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    _this.b = toNullable(ST_Angle.$, null);
                    _this.c = toNullable(ST_GeomGuideName.$, new ST_GeomGuideName(1, c));
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    _this.b = toNullable(ST_Angle.$, c);
                    _this.c = toNullable(ST_GeomGuideName.$, null);
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(ST_AdjAngle.prototype, "e", {
        get: function () {
            return this.c;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ST_AdjAngle.prototype, "d", {
        get: function () {
            return this.b;
        },
        enumerable: false,
        configurable: true
    });
    ST_AdjAngle.a = function (a) {
        var b = ST_Angle.m(a);
        if (b.hasValue) {
            return new ST_AdjAngle(2, b.value);
        }
        return new ST_AdjAngle(1, a);
    };
    ST_AdjAngle.f = function (a) {
        if (a.d.hasValue) {
            return a.d.value.toString();
        }
        else if (a.e.hasValue) {
            return a.e.value.toString();
        }
        else {
            return stringEmpty();
        }
    };
    ST_AdjAngle.$t = markStruct(ST_AdjAngle, 'ST_AdjAngle');
    return ST_AdjAngle;
}(ValueType));
export { ST_AdjAngle };
