/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_DataValidationType_$type } from "./ST_DataValidationType";
import { ST_DataValidationErrorStyle_$type } from "./ST_DataValidationErrorStyle";
import { ST_DataValidationImeMode_$type } from "./ST_DataValidationImeMode";
import { ST_DataValidationOperator_$type } from "./ST_DataValidationOperator";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
var CT_DataValidation_SML2009 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_DataValidation_SML2009, _super);
    function CT_DataValidation_SML2009() {
        var _this = _super.call(this) || this;
        _this.d = null;
        _this.f = null;
        _this.b = null;
        _this.z = toNullable(ST_DataValidationType_$type, null);
        _this.n = toNullable(ST_DataValidationErrorStyle_$type, null);
        _this.p = toNullable(ST_DataValidationImeMode_$type, null);
        _this.r = toNullable(ST_DataValidationOperator_$type, null);
        _this.l = toNullable(Boolean_$type, null);
        _this.t = toNullable(Boolean_$type, null);
        _this.x = toNullable(Boolean_$type, null);
        _this.v = toNullable(Boolean_$type, null);
        _this.ad = null;
        _this.ab = null;
        _this.ah = null;
        _this.af = null;
        return _this;
    }
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "c", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            this.d = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "e", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "y", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "m", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "o", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "q", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "k", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "s", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "w", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "u", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "ac", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "aa", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "ag", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_DataValidation_SML2009.prototype, "ae", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_DataValidation_SML2009.ai = function (a, b, c, d, e, f, g, h, i, j, k, l, m) {
        var e_1, _a;
        b = toNullable(ST_DataValidationType_$type, null);
        c = toNullable(ST_DataValidationErrorStyle_$type, null);
        d = toNullable(ST_DataValidationImeMode_$type, null);
        e = toNullable(ST_DataValidationOperator_$type, null);
        f = toNullable(Boolean_$type, null);
        g = toNullable(Boolean_$type, null);
        h = toNullable(Boolean_$type, null);
        i = toNullable(Boolean_$type, null);
        j = null;
        k = null;
        l = null;
        m = null;
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var n = _c.value;
                switch (n.a.e(a.d)) {
                    case "type":
                        b = toNullable(ST_DataValidationType_$type, XmlNamespaceDefinitionBase.b(ST_DataValidationType_$type, n.d));
                        break;
                    case "errorStyle":
                        c = toNullable(ST_DataValidationErrorStyle_$type, XmlNamespaceDefinitionBase.b(ST_DataValidationErrorStyle_$type, n.d));
                        break;
                    case "imeMode":
                        d = toNullable(ST_DataValidationImeMode_$type, XmlNamespaceDefinitionBase.b(ST_DataValidationImeMode_$type, n.d));
                        break;
                    case "operator":
                        e = toNullable(ST_DataValidationOperator_$type, XmlNamespaceDefinitionBase.b(ST_DataValidationOperator_$type, n.d));
                        break;
                    case "allowBlank":
                        f = toNullable(Boolean_$type, ST_OnOff.e(n.d));
                        break;
                    case "showDropDown":
                        g = toNullable(Boolean_$type, ST_OnOff.e(n.d));
                        break;
                    case "showInputMessage":
                        h = toNullable(Boolean_$type, ST_OnOff.e(n.d));
                        break;
                    case "showErrorMessage":
                        i = toNullable(Boolean_$type, ST_OnOff.e(n.d));
                        break;
                    case "errorTitle":
                        j = n.d;
                        break;
                    case "error":
                        k = n.d;
                        break;
                    case "promptTitle":
                        l = n.d;
                        break;
                    case "prompt":
                        m = n.d;
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i,
            p9: j,
            p10: k,
            p11: l,
            p12: m
        };
    };
    CT_DataValidation_SML2009.aj = function (a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
        if (c === void 0) {
            c = toNullable(ST_DataValidationOperator_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Boolean_$type, null);
        }
        if (e === void 0) {
            e = null;
        }
        if (f === void 0) {
            f = toNullable(ST_DataValidationErrorStyle_$type, null);
        }
        if (g === void 0) {
            g = null;
        }
        if (h === void 0) {
            h = toNullable(ST_DataValidationImeMode_$type, null);
        }
        if (i === void 0) {
            i = null;
        }
        if (j === void 0) {
            j = null;
        }
        if (k === void 0) {
            k = toNullable(Boolean_$type, null);
        }
        if (l === void 0) {
            l = toNullable(Boolean_$type, null);
        }
        if (m === void 0) {
            m = toNullable(Boolean_$type, null);
        }
        if (n === void 0) {
            n = toNullable(ST_DataValidationType_$type, null);
        }
        a.ad.p(b, null);
        var o = null;
        var p = null;
        if (c.hasValue) {
            p = "operator";
            o = XmlNamespaceDefinitionBase.p(ST_DataValidationOperator_$type, c.value);
            a.ad.h(p, o);
        }
        if (d.hasValue) {
            p = "allowBlank";
            o = ST_OnOff.g(d.value);
            a.ad.h(p, o);
        }
        if (e != null) {
            p = "error";
            o = e;
            a.ad.h(p, o);
        }
        if (f.hasValue) {
            p = "errorStyle";
            o = XmlNamespaceDefinitionBase.p(ST_DataValidationErrorStyle_$type, f.value);
            a.ad.h(p, o);
        }
        if (g != null) {
            p = "errorTitle";
            o = g;
            a.ad.h(p, o);
        }
        if (h.hasValue) {
            p = "imeMode";
            o = XmlNamespaceDefinitionBase.p(ST_DataValidationImeMode_$type, h.value);
            a.ad.h(p, o);
        }
        if (i != null) {
            p = "prompt";
            o = i;
            a.ad.h(p, o);
        }
        if (j != null) {
            p = "promptTitle";
            o = j;
            a.ad.h(p, o);
        }
        if (k.hasValue) {
            p = "showDropDown";
            o = ST_OnOff.g(k.value);
            a.ad.h(p, o);
        }
        if (l.hasValue) {
            p = "showErrorMessage";
            o = ST_OnOff.g(l.value);
            a.ad.h(p, o);
        }
        if (m.hasValue) {
            p = "showInputMessage";
            o = ST_OnOff.g(m.value);
            a.ad.h(p, o);
        }
        if (n.hasValue) {
            p = "type";
            o = XmlNamespaceDefinitionBase.p(ST_DataValidationType_$type, n.value);
            a.ad.h(p, o);
        }
        ;
    };
    CT_DataValidation_SML2009.$t = markType(CT_DataValidation_SML2009, 'CT_DataValidation_SML2009');
    return CT_DataValidation_SML2009;
}(Base));
export { CT_DataValidation_SML2009 };
