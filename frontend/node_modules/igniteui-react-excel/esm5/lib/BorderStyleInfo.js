/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, typeCast, markType } from "igniteui-react-core";
import { ColorInfo } from "./ColorInfo";
/**
 * @hidden
 */
var BorderStyleInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BorderStyleInfo, _super);
    function BorderStyleInfo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = null;
        _this.b = -1;
        return _this;
    }
    BorderStyleInfo.prototype.equals = function (a) {
        if (Base.referenceEquals(this, a)) {
            return true;
        }
        var b = typeCast(BorderStyleInfo.$, a);
        if (b == null) {
            return false;
        }
        return this.b == b.b && Base.equalsStatic(this.c, b.c);
    };
    BorderStyleInfo.prototype.getHashCode = function () {
        var a = Base.getHashCodeStatic(this.b);
        if (this.c != null) {
            a ^= this.c.getHashCode();
        }
        return a;
    };
    Object.defineProperty(BorderStyleInfo.prototype, "f", {
        get: function () {
            if (this.c != null && this.c.f == false) {
                return false;
            }
            if (this.b != -1) {
                return false;
            }
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderStyleInfo.prototype, "d", {
        get: function () {
            if (this.c == null) {
                this.c = new ColorInfo();
            }
            return this.c;
        },
        set: function (a) {
            this.c = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderStyleInfo.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    BorderStyleInfo.$t = markType(BorderStyleInfo, 'BorderStyleInfo');
    return BorderStyleInfo;
}(Base));
export { BorderStyleInfo };
