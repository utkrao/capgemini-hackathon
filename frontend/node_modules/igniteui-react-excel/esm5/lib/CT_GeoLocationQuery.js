/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_EntityType_$type } from "./ST_EntityType";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
/**
 * @hidden
 */
var CT_GeoLocationQuery = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_GeoLocationQuery, _super);
    function CT_GeoLocationQuery() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.h = null;
        _this.d = null;
        _this.f = null;
        _this.j = null;
        _this.b = 0;
        return _this;
    }
    Object.defineProperty(CT_GeoLocationQuery.prototype, "g", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_GeoLocationQuery.prototype, "c", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            this.d = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_GeoLocationQuery.prototype, "e", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_GeoLocationQuery.prototype, "i", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_GeoLocationQuery.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_GeoLocationQuery.l = function (a, b, c, d, e, f) {
        var e_1, _a;
        b = null;
        c = null;
        d = null;
        e = null;
        f = 0;
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var g = _c.value;
                switch (g.a.e(a.d)) {
                    case "countryRegion":
                        b = g.d;
                        break;
                    case "adminDistrict1":
                        c = g.d;
                        break;
                    case "adminDistrict2":
                        d = g.d;
                        break;
                    case "postalCode":
                        e = g.d;
                        break;
                    case "entityType":
                        f = XmlNamespaceDefinitionBase.b(ST_EntityType_$type, g.d);
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f
        };
    };
    CT_GeoLocationQuery.m = function (a, b, c, d, e, f, g) {
        a.ad.p(b, "cx");
        var h = null;
        var i = null;
        if (c != null) {
            i = "adminDistrict1";
            h = c;
            a.ad.h(i, h);
        }
        if (d != null) {
            i = "adminDistrict2";
            h = d;
            a.ad.h(i, h);
        }
        if (e != null) {
            i = "countryRegion";
            h = e;
            a.ad.h(i, h);
        }
        if (f != null) {
            i = "postalCode";
            h = f;
            a.ad.h(i, h);
        }
        i = "entityType";
        h = XmlNamespaceDefinitionBase.p(ST_EntityType_$type, g);
        a.ad.h(i, h);
        ;
    };
    CT_GeoLocationQuery.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_GeoLocationQuery.$t = markType(CT_GeoLocationQuery, 'CT_GeoLocationQuery');
    return CT_GeoLocationQuery;
}(Base));
export { CT_GeoLocationQuery };
