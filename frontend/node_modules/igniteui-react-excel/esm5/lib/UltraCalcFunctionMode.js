/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { Base, runOn, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { CalcFunctionUtilities } from "./CalcFunctionUtilities";
import { CalcArgumentHelper } from "./CalcArgumentHelper";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
/**
 * @hidden
 */
var UltraCalcFunctionMode = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionMode, _super);
    function UltraCalcFunctionMode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionMode.prototype.evaluate = function (a, b) {
        return UltraCalcFunctionMode._ak(a, b, false);
    };
    UltraCalcFunctionMode._ak = function (a, b, c) {
        var e_1, _a;
        var d = CalcFunctionUtilities.p(b);
        var e = CalcFunctionUtilities.o(b);
        try {
            for (var f = 0; f < b; f++) {
                d.add(a.pop());
            }
            d.w();
            for (var g = 0; g < d.count; g++) {
                var h = d._inner[g];
                if (h.isError) {
                    return new ExcelCalcValue(h.toErrorValue());
                }
                var i = h.isArray || h.isArrayGroup || (h.isReference && h.toReference().isEnumerable);
                if (i) {
                    var j = CalcArgumentHelper.c(h, 0, 1101, runOn(e, e.add));
                    if (j != null) {
                        return j;
                    }
                    continue;
                }
                if (h.isBoolean || h.isString || h.isNull) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
                e.add(h._toDouble3());
            }
            var k_1 = new Dictionary$2(Number_$type, Number_$type, 0);
            var l = 0;
            var _loop_1 = function (m) {
                var n = e._inner[m];
                var o;
                if (!((function () { var p = k_1.tryGetValue(n, o); o = p.p1; return p.ret; })())) {
                    k_1.item(n, 1);
                }
                else {
                    k_1.item(n, o + 1);
                    if (o + 1 > l) {
                        l = o + 1;
                    }
                }
            };
            for (var m = 0; m < e.count; m++) {
                _loop_1(m);
            }
            if (l == 0) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(3));
            }
            var p_1 = new List$1(Number_$type, 0);
            try {
                for (var _b = __values(fromEnum(k_1)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var q = _c.value;
                    if (q.value == l) {
                        p_1.add(q.key);
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            if (p_1.count > 1) {
                p_1.aa(function (r, s) {
                    var t = e.indexOf(r);
                    var u = e.indexOf(s);
                    return Base.compareSimple(t, u);
                });
                if (c) {
                    var r = ((function () {
                        var $firstRank;
                        var $ret = new Array($firstRank = 1);
                        var $currRet = $ret;
                        for (var $rankInit = 0; $rankInit < $firstRank; $rankInit++) {
                            $currRet[$rankInit] = new Array(p_1.count);
                        }
                        return $ret;
                    })());
                    for (var s = 0; s < p_1.count; s++) {
                        r[0][s] = new ExcelCalcValue(p_1._inner[s]);
                    }
                    return new ExcelCalcValue(r);
                }
            }
            return new ExcelCalcValue(p_1._inner[0]);
        }
        finally {
            CalcFunctionUtilities.ac(e);
            CalcFunctionUtilities.ad(d);
        }
    };
    UltraCalcFunctionMode.prototype.get_name = function () {
        return "mode";
    };
    Object.defineProperty(UltraCalcFunctionMode.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionMode.prototype.get_minArgs = function () {
        return 1;
    };
    Object.defineProperty(UltraCalcFunctionMode.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionMode.prototype.get_maxArgs = function () {
        return 0x7FFFFFFF;
    };
    Object.defineProperty(UltraCalcFunctionMode.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionMode.prototype.doesParameterAllowIntermediateResultArray = function (a, b) {
        return _super.prototype.doesParameterAllowIntermediateResultArray.call(this, a, b);
    };
    UltraCalcFunctionMode.$t = markType(UltraCalcFunctionMode, 'UltraCalcFunctionMode', BuiltInFunctionBase.$);
    return UltraCalcFunctionMode;
}(BuiltInFunctionBase));
export { UltraCalcFunctionMode };
