/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, markType } from "igniteui-react-core";
import { ST_SparklineType_$type } from "./ST_SparklineType";
import { ST_DispBlanksAs_$type } from "./ST_DispBlanksAs";
import { ST_SparklineAxisMinMax_$type } from "./ST_SparklineAxisMinMax";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { parseNumber } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_SparklineGroup = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_SparklineGroup, _super);
    function CT_SparklineGroup() {
        var _this = _super.call(this) || this;
        _this.p = null;
        _this.n = null;
        _this.b = null;
        _this.l = null;
        _this.d = null;
        _this.h = null;
        _this.f = null;
        _this.j = null;
        _this.bg = null;
        _this.af = null;
        _this.a0 = toNullable(Number_$type, null);
        _this.a2 = toNullable(Number_$type, null);
        _this.aw = toNullable(Number_$type, null);
        _this.be = toNullable(ST_SparklineType_$type, null);
        _this.ai = toNullable(Boolean_$type, null);
        _this.ak = toNullable(ST_DispBlanksAs_$type, null);
        _this.a4 = toNullable(Boolean_$type, null);
        _this.as = toNullable(Boolean_$type, null);
        _this.ay = toNullable(Boolean_$type, null);
        _this.aq = toNullable(Boolean_$type, null);
        _this.au = toNullable(Boolean_$type, null);
        _this.ba = toNullable(Boolean_$type, null);
        _this.ao = toNullable(Boolean_$type, null);
        _this.am = toNullable(Boolean_$type, null);
        _this.a8 = toNullable(ST_SparklineAxisMinMax_$type, null);
        _this.a6 = toNullable(ST_SparklineAxisMinMax_$type, null);
        _this.bc = toNullable(Boolean_$type, null);
        return _this;
    }
    Object.defineProperty(CT_SparklineGroup.prototype, "o", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "m", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "k", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "c", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            this.d = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "g", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "e", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "i", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "bf", {
        get: function () {
            return this.bg;
        },
        set: function (a) {
            this.bg = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "ae", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "az", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "a1", {
        get: function () {
            return this.a2;
        },
        set: function (a) {
            this.a2 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "av", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            this.aw = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "bd", {
        get: function () {
            return this.be;
        },
        set: function (a) {
            this.be = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "ah", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "aj", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "a3", {
        get: function () {
            return this.a4;
        },
        set: function (a) {
            this.a4 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "ar", {
        get: function () {
            return this.as;
        },
        set: function (a) {
            this.as = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "ax", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "ap", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            this.aq = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "at", {
        get: function () {
            return this.au;
        },
        set: function (a) {
            this.au = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "a9", {
        get: function () {
            return this.ba;
        },
        set: function (a) {
            this.ba = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "an", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "al", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "a7", {
        get: function () {
            return this.a8;
        },
        set: function (a) {
            this.a8 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "a5", {
        get: function () {
            return this.a6;
        },
        set: function (a) {
            this.a6 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SparklineGroup.prototype, "bb", {
        get: function () {
            return this.bc;
        },
        set: function (a) {
            this.bc = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_SparklineGroup.bh = function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
        var e_1, _a;
        b = toNullable(Number_$type, null);
        c = toNullable(Number_$type, null);
        d = toNullable(Number_$type, null);
        e = toNullable(ST_SparklineType_$type, null);
        f = toNullable(Boolean_$type, null);
        g = toNullable(ST_DispBlanksAs_$type, null);
        h = toNullable(Boolean_$type, null);
        i = toNullable(Boolean_$type, null);
        j = toNullable(Boolean_$type, null);
        k = toNullable(Boolean_$type, null);
        l = toNullable(Boolean_$type, null);
        m = toNullable(Boolean_$type, null);
        n = toNullable(Boolean_$type, null);
        o = toNullable(Boolean_$type, null);
        p = toNullable(ST_SparklineAxisMinMax_$type, null);
        q = toNullable(ST_SparklineAxisMinMax_$type, null);
        r = toNullable(Boolean_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var s = _c.value;
                switch (s.a.e(a.d)) {
                    case "manualMax":
                        b = toNullable(Number_$type, parseNumber(s.d, CultureInfo.invariantCulture));
                        break;
                    case "manualMin":
                        c = toNullable(Number_$type, parseNumber(s.d, CultureInfo.invariantCulture));
                        break;
                    case "lineWeight":
                        d = toNullable(Number_$type, parseNumber(s.d, CultureInfo.invariantCulture));
                        break;
                    case "type":
                        e = toNullable(ST_SparklineType_$type, XmlNamespaceDefinitionBase.b(ST_SparklineType_$type, s.d));
                        break;
                    case "dateAxis":
                        f = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "displayEmptyCellsAs":
                        g = toNullable(ST_DispBlanksAs_$type, XmlNamespaceDefinitionBase.b(ST_DispBlanksAs_$type, s.d));
                        break;
                    case "markers":
                        h = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "high":
                        i = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "low":
                        j = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "first":
                        k = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "last":
                        l = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "negative":
                        m = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "displayXAxis":
                        n = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "displayHidden":
                        o = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    case "minAxisType":
                        p = toNullable(ST_SparklineAxisMinMax_$type, XmlNamespaceDefinitionBase.b(ST_SparklineAxisMinMax_$type, s.d));
                        break;
                    case "maxAxisType":
                        q = toNullable(ST_SparklineAxisMinMax_$type, XmlNamespaceDefinitionBase.b(ST_SparklineAxisMinMax_$type, s.d));
                        break;
                    case "rightToLeft":
                        r = toNullable(Boolean_$type, ST_OnOff.e(s.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i,
            p9: j,
            p10: k,
            p11: l,
            p12: m,
            p13: n,
            p14: o,
            p15: p,
            p16: q,
            p17: r
        };
    };
    CT_SparklineGroup.bi = function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
        if (c === void 0) {
            c = toNullable(Boolean_$type, null);
        }
        if (d === void 0) {
            d = toNullable(ST_DispBlanksAs_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Boolean_$type, null);
        }
        if (f === void 0) {
            f = toNullable(Boolean_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Boolean_$type, null);
        }
        if (h === void 0) {
            h = toNullable(Boolean_$type, null);
        }
        if (i === void 0) {
            i = toNullable(Boolean_$type, null);
        }
        if (j === void 0) {
            j = toNullable(Number_$type, null);
        }
        if (k === void 0) {
            k = toNullable(Boolean_$type, null);
        }
        if (l === void 0) {
            l = toNullable(Number_$type, null);
        }
        if (m === void 0) {
            m = toNullable(Number_$type, null);
        }
        if (n === void 0) {
            n = toNullable(Boolean_$type, null);
        }
        if (o === void 0) {
            o = toNullable(ST_SparklineAxisMinMax_$type, null);
        }
        if (p === void 0) {
            p = toNullable(ST_SparklineAxisMinMax_$type, null);
        }
        if (q === void 0) {
            q = toNullable(Boolean_$type, null);
        }
        if (r === void 0) {
            r = toNullable(Boolean_$type, null);
        }
        if (s === void 0) {
            s = toNullable(ST_SparklineType_$type, null);
        }
        a.ad.p(b, null);
        var t = null;
        var u = null;
        if (c.hasValue) {
            u = "dateAxis";
            t = ST_OnOff.g(c.value);
            a.ad.h(u, t);
        }
        if (d.hasValue) {
            u = "displayEmptyCellsAs";
            t = XmlNamespaceDefinitionBase.p(ST_DispBlanksAs_$type, d.value);
            a.ad.h(u, t);
        }
        if (e.hasValue) {
            u = "displayHidden";
            t = ST_OnOff.g(e.value);
            a.ad.h(u, t);
        }
        if (f.hasValue) {
            u = "displayXAxis";
            t = ST_OnOff.g(f.value);
            a.ad.h(u, t);
        }
        if (g.hasValue) {
            u = "first";
            t = ST_OnOff.g(g.value);
            a.ad.h(u, t);
        }
        if (h.hasValue) {
            u = "high";
            t = ST_OnOff.g(h.value);
            a.ad.h(u, t);
        }
        if (i.hasValue) {
            u = "last";
            t = ST_OnOff.g(i.value);
            a.ad.h(u, t);
        }
        if (j.hasValue) {
            u = "lineWeight";
            t = j.value.toString();
            a.ad.h(u, t);
        }
        if (k.hasValue) {
            u = "low";
            t = ST_OnOff.g(k.value);
            a.ad.h(u, t);
        }
        if (l.hasValue) {
            u = "manualMax";
            t = l.value.toString();
            a.ad.h(u, t);
        }
        if (m.hasValue) {
            u = "manualMin";
            t = m.value.toString();
            a.ad.h(u, t);
        }
        if (n.hasValue) {
            u = "markers";
            t = ST_OnOff.g(n.value);
            a.ad.h(u, t);
        }
        if (o.hasValue) {
            u = "maxAxisType";
            t = XmlNamespaceDefinitionBase.p(ST_SparklineAxisMinMax_$type, o.value);
            a.ad.h(u, t);
        }
        if (p.hasValue) {
            u = "minAxisType";
            t = XmlNamespaceDefinitionBase.p(ST_SparklineAxisMinMax_$type, p.value);
            a.ad.h(u, t);
        }
        if (q.hasValue) {
            u = "negative";
            t = ST_OnOff.g(q.value);
            a.ad.h(u, t);
        }
        if (r.hasValue) {
            u = "rightToLeft";
            t = ST_OnOff.g(r.value);
            a.ad.h(u, t);
        }
        if (s.hasValue) {
            u = "type";
            t = XmlNamespaceDefinitionBase.p(ST_SparklineType_$type, s.value);
            a.ad.h(u, t);
        }
        ;
    };
    CT_SparklineGroup.$t = markType(CT_SparklineGroup, 'CT_SparklineGroup');
    return CT_SparklineGroup;
}(Base));
export { CT_SparklineGroup };
