/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { UltraCalcFunctionFact } from "./UltraCalcFunctionFact";
import { markType } from "igniteui-react-core";
import { truncate, log10 } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionPoisson = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionPoisson, _super);
    function UltraCalcFunctionPoisson() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionPoisson.prototype.evaluate = function (a, b) {
        var c = a.pop();
        var d = a.pop();
        var e = a.pop();
        if (e.isError) {
            return new ExcelCalcValue(e.toErrorValue());
        }
        if (d.isError) {
            return new ExcelCalcValue(d.toErrorValue());
        }
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var f = e._toDecimal2();
        var g = d._toDouble3();
        var h = c._toBoolean1();
        if (f < 0 || (f >= 1 && g < 0)) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(4));
        }
        var i = g;
        var j = truncate(f);
        var k = 0;
        if (j > 170 || j * log10(i) >= 290) {
            var l = 0;
            var m = 0;
            var n = truncate(i);
            l = l + 1;
            if (n == j) {
                m++;
            }
            if (h && n < j) {
                m++;
            }
            var o = n * 2;
            var p = 1;
            var q = false;
            var r = n + 1;
            while (!q && r <= o) {
                var s = p * i / r;
                l = l + s;
                if (r == j) {
                    m += s;
                }
                if (h && r < j) {
                    m += s;
                }
                p = s;
                r = r + 1;
            }
            p = 1;
            q = false;
            r = n - 1;
            while (!q && r >= 0) {
                var t = p * (r + 1) / i;
                l = l + t;
                if (r == j) {
                    m += t;
                }
                if (h && r < j) {
                    m += t;
                }
                p = t;
                r = r - 1;
            }
            k = m / l;
        }
        else {
            var u = h ? 0 : j;
            var v = UltraCalcFunctionFact._ak(u);
            var w = Math.exp(-i);
            for (var x = u; x <= j; x++) {
                k += w * Math.pow(i, x) / v;
                v *= (x + 1);
            }
        }
        return new ExcelCalcValue(k);
    };
    UltraCalcFunctionPoisson.prototype.get_name = function () {
        return "poisson";
    };
    Object.defineProperty(UltraCalcFunctionPoisson.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionPoisson.prototype.get_minArgs = function () {
        return 3;
    };
    Object.defineProperty(UltraCalcFunctionPoisson.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionPoisson.prototype.get_maxArgs = function () {
        return 3;
    };
    Object.defineProperty(UltraCalcFunctionPoisson.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionPoisson.$t = markType(UltraCalcFunctionPoisson, 'UltraCalcFunctionPoisson', BuiltInFunctionBase.$);
    return UltraCalcFunctionPoisson;
}(BuiltInFunctionBase));
export { UltraCalcFunctionPoisson };
