/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, markStruct } from "igniteui-react-core";
import { ST_UniversalMeasure } from "./ST_UniversalMeasure";
import { DocCoreUtils } from "./DocCoreUtils";
import { nullableNotEquals } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_PositiveUniversalMeasure = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_PositiveUniversalMeasure, _super);
    function ST_PositiveUniversalMeasure(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.b = 0;
        _this.c = 0;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.c = c;
                    _this.b = d;
                }
                break;
        }
        return _this;
    }
    ST_PositiveUniversalMeasure.prototype.toString = function () {
        return ST_UniversalMeasure.p(this.c, this.b);
    };
    ST_PositiveUniversalMeasure.prototype.d = function () {
        return ST_UniversalMeasure.l(this.c, this.b);
    };
    ST_PositiveUniversalMeasure.a = function (a) {
        var b = ST_PositiveUniversalMeasure.e(a);
        if (nullableNotEquals(b, null)) {
            return b.getValueOrDefault();
        }
        throw DocCoreUtils.n(ST_PositiveUniversalMeasure.$, a);
    };
    ST_PositiveUniversalMeasure.e = function (a) {
        var b;
        var c;
        if (((function () { var d = ST_UniversalMeasure.i(a, b, c); b = d.p1; c = d.p2; return d.ret; })()) == false) {
            return toNullable(ST_PositiveUniversalMeasure.$, null);
        }
        return toNullable(ST_PositiveUniversalMeasure.$, new ST_PositiveUniversalMeasure(1, b, c));
    };
    ST_PositiveUniversalMeasure.$t = markStruct(ST_PositiveUniversalMeasure, 'ST_PositiveUniversalMeasure');
    return ST_PositiveUniversalMeasure;
}(ValueType));
export { ST_PositiveUniversalMeasure };
