/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, Base, typeCast, enumGetBox, markStruct } from "igniteui-react-core";
import { FormatConditionValueType_$type } from "./FormatConditionValueType";
import { stringFormat } from "igniteui-react-core";
/**
 * @hidden
 */
var ConditionValueInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ConditionValueInfo, _super);
    function ConditionValueInfo(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.h = 0;
        _this.a = 0;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.h = c;
                    _this.a = d;
                }
                break;
        }
        return _this;
    }
    ConditionValueInfo.prototype.equals = function (a) {
        if (typeCast(ConditionValueInfo.$, a) !== null) {
            return a.h == this.h && a.a == this.a;
        }
        return false;
    };
    ConditionValueInfo.prototype.getHashCode = function () {
        return (this.h) ^ Base.getHashCodeStatic(this.a);
    };
    ConditionValueInfo.prototype.toString = function () {
        return stringFormat("Value: {0}, ValueType: {1}", this.h, enumGetBox(FormatConditionValueType_$type, this.a));
    };
    ConditionValueInfo.b = function (a, b) {
        return a.equals(b);
    };
    ConditionValueInfo.c = function (a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return ConditionValueInfo.b(a.value, b.value);
    };
    ConditionValueInfo.d = function (a, b) {
        return !(ConditionValueInfo.b(a, b));
    };
    ConditionValueInfo.e = function (a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return ConditionValueInfo.d(a.value, b.value);
    };
    ConditionValueInfo.$t = markStruct(ConditionValueInfo, 'ConditionValueInfo');
    return ConditionValueInfo;
}(ValueType));
export { ConditionValueInfo };
