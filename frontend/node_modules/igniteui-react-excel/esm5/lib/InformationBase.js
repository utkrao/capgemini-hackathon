/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, Number_$type, typeGetValue, String_$type, typeCast, Array_$type, fromEnum, markType } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { Encoding } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { BinaryReader } from "igniteui-react-core";
import { InformationBase_PropertySectionDefinition } from "./InformationBase_PropertySectionDefinition";
import { Guid } from "igniteui-react-core";
import { InformationBase_PropertyDefinition } from "./InformationBase_PropertyDefinition";
import { VariantUtilities } from "./VariantUtilities";
import { BinaryWriter } from "igniteui-react-core";
import { arrayGetValue } from "igniteui-react-core";
/**
 * @hidden
 */
var InformationBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(InformationBase, _super);
    function InformationBase() {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.g = DocCoreUtils.ae;
        _this.c = new Guid();
        _this.a = new Dictionary$2(Number_$type, Base.$, 0);
        return _this;
    }
    InformationBase.h = function (a) {
        var b = DocCoreUtils.ae;
        for (var c = 0; c < a.count; c++) {
            var d = a._inner[c];
            if (d != b.getString(b.getBytes1(d))) {
                return Encoding.uTF8;
            }
        }
        return b;
    };
    InformationBase.prototype.k = function (a) {
        var b = new BinaryReader(1, a);
        var c = b.readUInt16();
        if (c != 65534) {
            a.position = 0;
            return;
        }
        var d = b.readUInt16();
        b.readInt32();
        this.c = new Guid(1, b.readBytes(16));
        var e = new List$1(InformationBase_PropertySectionDefinition.$, 0);
        var f = b.readInt32();
        for (var g = 0; g < f; g++) {
            var h = new InformationBase_PropertySectionDefinition();
            h.b = new Guid(1, b.readBytes(16));
            h.c = b.readInt32();
            e.add(h);
        }
        for (var i = 0; i < f; i++) {
            this.m(b, e._inner[i]);
        }
    };
    InformationBase.prototype.l = function (a) {
        var b = new InformationBase_PropertySectionDefinition();
        b.b = new Guid(3, this.f);
        a.add(b);
    };
    InformationBase.prototype.e = function (a, b) {
        a.baseStream.position = b.a;
        return VariantUtilities.b(a, this.g);
    };
    InformationBase.prototype.m = function (a, b) {
        a.baseStream.position = b.c;
        b.e = a.readInt32();
        b.d = a.readInt32();
        b.a = new List$1(InformationBase_PropertyDefinition.$, 2, b.d);
        for (var c = 0; c < b.d; c++) {
            var d = new InformationBase_PropertyDefinition();
            d.b = a.readInt32();
            d.a = b.c + a.readInt32();
            b.a.add(d);
        }
        this.n(a, b);
    };
    InformationBase.prototype.i = function (a, b) {
        for (var c = 0; c < b.d; c++) {
            var d = b.a._inner[c];
            if (d.b == 1) {
                return DocCoreUtils.af(typeGetValue(this.e(a, d)));
            }
        }
        return DocCoreUtils.ae;
    };
    InformationBase.prototype.n = function (a, b) {
        var c = b.b.toString2("N");
        if (c == this.f) {
            this.a = new Dictionary$2(Number_$type, Base.$, 0);
            this.g = this.i(a, b);
            for (var d = 0; d < b.d; d++) {
                var e = b.a._inner[d];
                if (a.baseStream.length < (e.a + 4)) {
                    continue;
                }
                if (e.b != 1) {
                    this.a.addItem(e.b, this.e(a, e));
                }
            }
        }
        else {
        }
    };
    InformationBase.prototype.o = function (a) {
        this.p();
        var b = new BinaryWriter(1, a);
        b.v(65534);
        b.v(0);
        var c = 0;
        b.q(c);
        b.h(this.c.toByteArray());
        var d = new List$1(InformationBase_PropertySectionDefinition.$, 0);
        this.l(d);
        a.position += 4 + (20 * d.count);
        for (var e = 0; e < d.count; e++) {
            var f = d._inner[e];
            f.c = a.position;
            this.q(b, f);
        }
        a.position = 24;
        b.q(d.count);
        for (var g = 0; g < d.count; g++) {
            var h = d._inner[g];
            b.h(h.b.toByteArray());
            b.q(h.c);
        }
        a.position = a.length;
    };
    InformationBase.prototype.p = function () {
        var e_1, _a;
        var a = new List$1(String_$type, 0);
        try {
            for (var _b = __values(fromEnum(this.a.values)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                var c = typeCast(String_$type, b);
                if (c != null) {
                    a.add(c);
                    continue;
                }
                var d = typeCast(Array_$type, b);
                if (d != null) {
                    for (var e = 0; e < d.length; e++) {
                        c = typeCast(String_$type, arrayGetValue(d, e));
                        if (c != null) {
                            a.add(c);
                        }
                    }
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        this.g = InformationBase.h(a);
    };
    InformationBase.prototype.q = function (a, b) {
        a.c.position += 8;
        this.r(a, b);
        while (a.c.position % 4 != 0) {
            a.m(0);
        }
        b.e = (a.c.position - b.c);
        a.c.position = b.c;
        a.q(b.e);
        a.q(b.a.count);
        for (var c = 0; c < b.a.count; c++) {
            var d = b.a._inner[c];
            a.q(d.b);
            a.q(d.a - b.c);
        }
        a.c.position = b.c + b.e;
    };
    InformationBase.prototype.r = function (a, b) {
        var e_2, _a;
        var c = b.b.toString2("N");
        if (c == this.f) {
            b.d = this.a.count + 1;
            b.a = new List$1(InformationBase_PropertyDefinition.$, 0);
            a.c.position += b.d * 8;
            var d = new InformationBase_PropertyDefinition();
            d.a = a.c.position;
            d.b = 1;
            VariantUtilities.f(a, this.g, DocCoreUtils.r(this.g));
            b.a.add(d);
            try {
                for (var _b = __values(fromEnum(this.a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var e = _c.value;
                    var f = new InformationBase_PropertyDefinition();
                    f.a = a.c.position;
                    f.b = e.key;
                    VariantUtilities.f(a, this.g, e.value);
                    b.a.add(f);
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
        }
        else {
        }
    };
    Object.defineProperty(InformationBase.prototype, "b", {
        get: function () {
            return this.a;
        },
        enumerable: false,
        configurable: true
    });
    InformationBase.$t = markType(InformationBase, 'InformationBase');
    return InformationBase;
}(Base));
export { InformationBase };
