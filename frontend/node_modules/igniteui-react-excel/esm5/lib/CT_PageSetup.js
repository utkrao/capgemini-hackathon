/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_PageOrientation_$type } from "./ST_PageOrientation";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { parseUInt32_1, parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_PageSetup = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_PageSetup, _super);
    function CT_PageSetup() {
        var _this = _super.call(this) || this;
        _this.u = toNullable(Number_$type, null);
        _this.o = toNullable(Number_$type, null);
        _this.s = toNullable(ST_PageOrientation_$type, null);
        _this.i = toNullable(Boolean_$type, null);
        _this.m = toNullable(Boolean_$type, null);
        _this.w = toNullable(Boolean_$type, null);
        _this.q = toNullable(Number_$type, null);
        _this.y = toNullable(Number_$type, null);
        _this.k = toNullable(Number_$type, null);
        return _this;
    }
    Object.defineProperty(CT_PageSetup.prototype, "t", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_PageSetup.prototype, "n", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_PageSetup.prototype, "r", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_PageSetup.prototype, "h", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_PageSetup.prototype, "l", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_PageSetup.prototype, "v", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_PageSetup.prototype, "p", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_PageSetup.prototype, "x", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_PageSetup.prototype, "j", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_PageSetup.a = function (a) {
        var b = toNullable(Number_$type, null);
        var c = toNullable(Number_$type, null);
        var d = toNullable(ST_PageOrientation_$type, null);
        var e = toNullable(Boolean_$type, null);
        var f = toNullable(Boolean_$type, null);
        var g = toNullable(Boolean_$type, null);
        var h = toNullable(Number_$type, null);
        var i = toNullable(Number_$type, null);
        var j = toNullable(Number_$type, null);
        var k = CT_PageSetup.ad(a, b, c, d, e, f, g, h, i, j);
        b = k.p1;
        c = k.p2;
        d = k.p3;
        e = k.p4;
        f = k.p5;
        g = k.p6;
        h = k.p7;
        i = k.p8;
        j = k.p9;
        return ((function () {
            var $ret = new CT_PageSetup();
            $ret.t = b;
            $ret.n = c;
            $ret.r = d;
            $ret.h = e;
            $ret.j = j;
            $ret.l = f;
            $ret.v = g;
            $ret.p = h;
            $ret.x = i;
            return $ret;
        })());
    };
    CT_PageSetup.ad = function (a, b, c, d, e, f, g, h, i, j) {
        var e_1, _a;
        b = toNullable(Number_$type, null);
        c = toNullable(Number_$type, null);
        d = toNullable(ST_PageOrientation_$type, null);
        e = toNullable(Boolean_$type, null);
        f = toNullable(Boolean_$type, null);
        g = toNullable(Boolean_$type, null);
        h = toNullable(Number_$type, null);
        i = toNullable(Number_$type, null);
        j = toNullable(Number_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var k = _c.value;
                switch (k.a.e(a.d)) {
                    case "paperSize":
                        b = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "firstPageNumber":
                        c = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "orientation":
                        d = toNullable(ST_PageOrientation_$type, XmlNamespaceDefinitionBase.b(ST_PageOrientation_$type, k.d));
                        break;
                    case "blackAndWhite":
                        e = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "draft":
                        f = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "useFirstPageNumber":
                        g = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "horizontalDpi":
                        h = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "verticalDpi":
                        i = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "copies":
                        j = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i,
            p9: j
        };
    };
    CT_PageSetup.ae = function (a, b, c, d, e, f, g, h, i, j, k) {
        if (c === void 0) {
            c = toNullable(Boolean_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Number_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Boolean_$type, null);
        }
        if (f === void 0) {
            f = toNullable(Number_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Number_$type, null);
        }
        if (h === void 0) {
            h = toNullable(ST_PageOrientation_$type, null);
        }
        if (i === void 0) {
            i = toNullable(Number_$type, null);
        }
        if (j === void 0) {
            j = toNullable(Boolean_$type, null);
        }
        if (k === void 0) {
            k = toNullable(Number_$type, null);
        }
        a.ad.p(b, "cx");
        var l = null;
        var m = null;
        if (c.hasValue) {
            m = "blackAndWhite";
            l = ST_OnOff.g(c.value);
            a.ad.h(m, l);
        }
        if (d.hasValue) {
            m = "copies";
            l = d.value.toString();
            a.ad.h(m, l);
        }
        if (e.hasValue) {
            m = "draft";
            l = ST_OnOff.g(e.value);
            a.ad.h(m, l);
        }
        if (f.hasValue) {
            m = "firstPageNumber";
            l = f.value.toString();
            a.ad.h(m, l);
        }
        if (g.hasValue) {
            m = "horizontalDpi";
            l = g.value.toString();
            a.ad.h(m, l);
        }
        if (h.hasValue) {
            m = "orientation";
            l = XmlNamespaceDefinitionBase.p(ST_PageOrientation_$type, h.value);
            a.ad.h(m, l);
        }
        if (i.hasValue) {
            m = "paperSize";
            l = i.value.toString();
            a.ad.h(m, l);
        }
        if (j.hasValue) {
            m = "useFirstPageNumber";
            l = ST_OnOff.g(j.value);
            a.ad.h(m, l);
        }
        if (k.hasValue) {
            m = "verticalDpi";
            l = k.value.toString();
            a.ad.h(m, l);
        }
        ;
    };
    CT_PageSetup.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_PageSetup.$t = markType(CT_PageSetup, 'CT_PageSetup');
    return CT_PageSetup;
}(Base));
export { CT_PageSetup };
