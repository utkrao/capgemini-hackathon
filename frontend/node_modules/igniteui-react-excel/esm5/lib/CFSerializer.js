/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, String_$type, fromEnum, markType } from "igniteui-react-core";
import { CONDFMTSerializer } from "./CONDFMTSerializer";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
/**
 * @hidden
 */
var CFSerializer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CFSerializer, _super);
    function CFSerializer(a) {
        var _this = _super.call(this) || this;
        _this.d = null;
        _this.b = null;
        _this.b = a;
        return _this;
    }
    CFSerializer.a = function (a) {
        if (a == null || a._conditionalFormats$i.count == 0) {
            return null;
        }
        var b = new CFSerializer(a);
        b.e(a._conditionalFormats$i);
        return b;
    };
    CFSerializer.prototype.e = function (a) {
        var e_1, _a, e_2, _b;
        var b = new Dictionary$2(String_$type, CONDFMTSerializer.$, 0);
        var _loop_1 = function (c) {
            var d = c._a0(1);
            var e = null;
            if (((function () { var f = b.tryGetValue(d, e); e = f.p1; return f.ret; })()) == false) {
                e = new CONDFMTSerializer();
                e.d = b.count + 1;
                e.c = c.regions;
                e.a = e.g();
                b.addItem(d, e);
            }
            e.h.add(c);
            e.e = e.h.count;
        };
        try {
            for (var _c = __values(fromEnum(a)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var c = _d.value;
                _loop_1(c);
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        this.d = new List$1(CONDFMTSerializer.$, 2, b.count);
        try {
            for (var _e = __values(fromEnum(b.values)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var f = _f.value;
                this.d.add(f);
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    Object.defineProperty(CFSerializer.prototype, "c", {
        get: function () {
            return this.d;
        },
        enumerable: false,
        configurable: true
    });
    CFSerializer.$t = markType(CFSerializer, 'CFSerializer');
    return CFSerializer;
}(Base));
export { CFSerializer };
