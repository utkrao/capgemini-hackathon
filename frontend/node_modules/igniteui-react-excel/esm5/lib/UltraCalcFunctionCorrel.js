/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { UltraCalcFunctionTwoMatrixFunction } from "./UltraCalcFunctionTwoMatrixFunction";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionCorrel = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionCorrel, _super);
    function UltraCalcFunctionCorrel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionCorrel.prototype.evaluate = function (a, b) {
        var c;
        var d;
        var e;
        var f = UltraCalcFunctionTwoMatrixFunction._ao(a, c, d, e);
        c = f.p1;
        d = f.p2;
        e = f.p3;
        if (c != null) {
            return new ExcelCalcValue(c);
        }
        var g;
        var h;
        var i;
        var j = UltraCalcFunctionTwoMatrixFunction._ar(d, e, g, h, i);
        g = j.p2;
        h = j.p3;
        i = j.p4;
        var k = function (l) { return l * l; };
        var l = UltraCalcFunctionTwoMatrixFunction._an(d, k);
        var m = UltraCalcFunctionTwoMatrixFunction._an(e, k);
        var n = l - ((h * h) / g);
        var o = m - ((i * i) / g);
        var p = UltraCalcFunctionTwoMatrixFunction._am(d, e, function (q, r) { return q * r; });
        var q = p - ((h * i) / g);
        if (n == 0 || o == 0) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(2));
        }
        var r = q / (Math.sqrt(n) * Math.sqrt(o));
        return new ExcelCalcValue(r);
    };
    UltraCalcFunctionCorrel.prototype.get_name = function () {
        return "correl";
    };
    Object.defineProperty(UltraCalcFunctionCorrel.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionCorrel.$t = markType(UltraCalcFunctionCorrel, 'UltraCalcFunctionCorrel', UltraCalcFunctionTwoMatrixFunction.$);
    return UltraCalcFunctionCorrel;
}(UltraCalcFunctionTwoMatrixFunction));
export { UltraCalcFunctionCorrel };
