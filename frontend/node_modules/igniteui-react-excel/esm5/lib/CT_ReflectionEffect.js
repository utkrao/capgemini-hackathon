/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_RectAlignment_$type } from "./ST_RectAlignment";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { parseInt64_1, parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_ReflectionEffect = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_ReflectionEffect, _super);
    function CT_ReflectionEffect() {
        var _this = _super.call(this) || this;
        _this.r = toNullable(Number_$type, null);
        _this.aj = toNullable(Number_$type, null);
        _this.al = toNullable(Number_$type, null);
        _this.x = toNullable(Number_$type, null);
        _this.z = toNullable(Number_$type, null);
        _this.v = toNullable(Number_$type, null);
        _this.t = toNullable(Number_$type, null);
        _this.ab = toNullable(Number_$type, null);
        _this.an = toNullable(Number_$type, null);
        _this.ap = toNullable(Number_$type, null);
        _this.ad = toNullable(Number_$type, null);
        _this.af = toNullable(Number_$type, null);
        _this.p = toNullable(ST_RectAlignment_$type, null);
        _this.ah = toNullable(Boolean_$type, null);
        return _this;
    }
    Object.defineProperty(CT_ReflectionEffect.prototype, "q", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "ai", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "ak", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "w", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "y", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "u", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "s", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "aa", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "am", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "ao", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "ac", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "ae", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "o", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_ReflectionEffect.prototype, "ag", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_ReflectionEffect.a = function (a) {
        var b = toNullable(Number_$type, null);
        var c = toNullable(Number_$type, null);
        var d = toNullable(Number_$type, null);
        var e = toNullable(Number_$type, null);
        var f = toNullable(Number_$type, null);
        var g = toNullable(Number_$type, null);
        var h = toNullable(Number_$type, null);
        var i = toNullable(Number_$type, null);
        var j = toNullable(Number_$type, null);
        var k = toNullable(Number_$type, null);
        var l = toNullable(Number_$type, null);
        var m = toNullable(Number_$type, null);
        var n = toNullable(ST_RectAlignment_$type, null);
        var o = toNullable(Boolean_$type, null);
        var p = CT_ReflectionEffect.ar(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
        b = p.p1;
        c = p.p2;
        d = p.p3;
        e = p.p4;
        f = p.p5;
        g = p.p6;
        h = p.p7;
        i = p.p8;
        j = p.p9;
        k = p.p10;
        l = p.p11;
        m = p.p12;
        n = p.p13;
        o = p.p14;
        return ((function () {
            var $ret = new CT_ReflectionEffect();
            $ret.o = n;
            $ret.q = b;
            $ret.s = h;
            $ret.w = e;
            $ret.u = g;
            $ret.y = f;
            $ret.aa = i;
            $ret.ac = l;
            $ret.ae = m;
            $ret.ag = o;
            $ret.ai = c;
            $ret.ak = d;
            $ret.am = j;
            $ret.ao = k;
            return $ret;
        })());
    };
    CT_ReflectionEffect.ar = function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
        var e_1, _a;
        b = toNullable(Number_$type, null);
        c = toNullable(Number_$type, null);
        d = toNullable(Number_$type, null);
        e = toNullable(Number_$type, null);
        f = toNullable(Number_$type, null);
        g = toNullable(Number_$type, null);
        h = toNullable(Number_$type, null);
        i = toNullable(Number_$type, null);
        j = toNullable(Number_$type, null);
        k = toNullable(Number_$type, null);
        l = toNullable(Number_$type, null);
        m = toNullable(Number_$type, null);
        n = toNullable(ST_RectAlignment_$type, null);
        o = toNullable(Boolean_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                switch (p.a.e(a.d)) {
                    case "blurRad":
                        b = toNullable(Number_$type, parseInt64_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "stA":
                        c = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "stPos":
                        d = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "endA":
                        e = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "endPos":
                        f = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "dist":
                        g = toNullable(Number_$type, parseInt64_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "dir":
                        h = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "fadeDir":
                        i = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "sx":
                        j = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "sy":
                        k = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "kx":
                        l = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "ky":
                        m = toNullable(Number_$type, parseInt32_1(p.d, CultureInfo.invariantCulture));
                        break;
                    case "algn":
                        n = toNullable(ST_RectAlignment_$type, XmlNamespaceDefinitionBase.b(ST_RectAlignment_$type, p.d));
                        break;
                    case "rotWithShape":
                        o = toNullable(Boolean_$type, ST_OnOff.e(p.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i,
            p9: j,
            p10: k,
            p11: l,
            p12: m,
            p13: n,
            p14: o
        };
    };
    CT_ReflectionEffect.as = function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
        if (c === void 0) {
            c = toNullable(ST_RectAlignment_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Number_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Number_$type, null);
        }
        if (f === void 0) {
            f = toNullable(Number_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Number_$type, null);
        }
        if (h === void 0) {
            h = toNullable(Number_$type, null);
        }
        if (i === void 0) {
            i = toNullable(Number_$type, null);
        }
        if (j === void 0) {
            j = toNullable(Number_$type, null);
        }
        if (k === void 0) {
            k = toNullable(Number_$type, null);
        }
        if (l === void 0) {
            l = toNullable(Boolean_$type, null);
        }
        if (m === void 0) {
            m = toNullable(Number_$type, null);
        }
        if (n === void 0) {
            n = toNullable(Number_$type, null);
        }
        if (o === void 0) {
            o = toNullable(Number_$type, null);
        }
        if (p === void 0) {
            p = toNullable(Number_$type, null);
        }
        a.ad.p(b, "a");
        var q = null;
        var r = null;
        if (c.hasValue) {
            r = "algn";
            q = XmlNamespaceDefinitionBase.p(ST_RectAlignment_$type, c.value);
            a.ad.h(r, q);
        }
        if (d.hasValue) {
            r = "blurRad";
            q = d.value.toString();
            a.ad.h(r, q);
        }
        if (e.hasValue) {
            r = "dir";
            q = e.value.toString();
            a.ad.h(r, q);
        }
        if (f.hasValue) {
            r = "dist";
            q = f.value.toString();
            a.ad.h(r, q);
        }
        if (g.hasValue) {
            r = "endA";
            q = g.value.toString();
            a.ad.h(r, q);
        }
        if (h.hasValue) {
            r = "endPos";
            q = h.value.toString();
            a.ad.h(r, q);
        }
        if (i.hasValue) {
            r = "fadeDir";
            q = i.value.toString();
            a.ad.h(r, q);
        }
        if (j.hasValue) {
            r = "kx";
            q = j.value.toString();
            a.ad.h(r, q);
        }
        if (k.hasValue) {
            r = "ky";
            q = k.value.toString();
            a.ad.h(r, q);
        }
        if (l.hasValue) {
            r = "rotWithShape";
            q = ST_OnOff.g(l.value);
            a.ad.h(r, q);
        }
        if (m.hasValue) {
            r = "stA";
            q = m.value.toString();
            a.ad.h(r, q);
        }
        if (n.hasValue) {
            r = "stPos";
            q = n.value.toString();
            a.ad.h(r, q);
        }
        if (o.hasValue) {
            r = "sx";
            q = o.value.toString();
            a.ad.h(r, q);
        }
        if (p.hasValue) {
            r = "sy";
            q = p.value.toString();
            a.ad.h(r, q);
        }
        ;
    };
    CT_ReflectionEffect.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_ReflectionEffect.$t = markType(CT_ReflectionEffect, 'CT_ReflectionEffect');
    return CT_ReflectionEffect;
}(Base));
export { CT_ReflectionEffect };
