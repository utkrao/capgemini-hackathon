/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, IComparable$1_$type, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var PropertyTableBase_PropertyValue = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(PropertyTableBase_PropertyValue, _super);
    function PropertyTableBase_PropertyValue(a) {
        var _rest = [];
        for (var _j = 1; _j < arguments.length; _j++) {
            _rest[_j - 1] = arguments[_j];
        }
        var _this = _super.call(this) || this;
        _this._a = 0;
        _this._e = false;
        _this._c = false;
        _this._h = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = [c, d, false, false];
                    {
                        var g = e[0];
                        var h = e[1];
                        var i = e[2];
                        var j = e[3];
                        _this._a = g;
                        _this._h = h;
                        _this._e = i;
                        _this._c = j;
                    }
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = _rest[2];
                    var f = _rest[3];
                    _this._a = c;
                    _this._h = d;
                    _this._e = e;
                    _this._c = f;
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(PropertyTableBase_PropertyValue.prototype, "_d", {
        get: function () {
            return this._c;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyTableBase_PropertyValue.prototype, "_f", {
        get: function () {
            return this._e;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyTableBase_PropertyValue.prototype, "_g", {
        get: function () {
            if (this._e == false) {
                return false;
            }
            switch (this._a) {
                case 1728:
                case 1729:
                case 1284:
                case 407:
                case 341:
                case 337:
                case 338:
                case 345:
                case 342:
                case 343:
                case 326:
                case 325:
                case 899:
                case 1551:
                case 1615:
                case 1349:
                case 1487:
                case 1423:
                case 463: return true;
            }
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyTableBase_PropertyValue.prototype, "_b", {
        get: function () {
            return this._a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PropertyTableBase_PropertyValue.prototype, "_i", {
        get: function () {
            return this._h;
        },
        set: function (a) {
            this._h = a;
        },
        enumerable: false,
        configurable: true
    });
    PropertyTableBase_PropertyValue.prototype.compareTo = function (a) {
        return this._a - a._a;
    };
    PropertyTableBase_PropertyValue.$t = markType(PropertyTableBase_PropertyValue, 'PropertyTableBase_PropertyValue', Base.$, [IComparable$1_$type.specialize(-1)]).initSelfReferences();
    return PropertyTableBase_PropertyValue;
}(Base));
export { PropertyTableBase_PropertyValue };
