/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Type, markType } from "igniteui-react-core";
import { CT_PositiveFixedPercentage } from "./CT_PositiveFixedPercentage";
import { CT_FixedPercentage } from "./CT_FixedPercentage";
import { CT_PositivePercentage } from "./CT_PositivePercentage";
import { CT_Percentage } from "./CT_Percentage";
import { CT_ComplementTransform } from "./CT_ComplementTransform";
import { CT_GrayscaleTransform } from "./CT_GrayscaleTransform";
import { CT_PositiveFixedAngle } from "./CT_PositiveFixedAngle";
import { CT_Angle } from "./CT_Angle";
import { CT_InverseTransform } from "./CT_InverseTransform";
/**
 * @hidden
 */
export var IEG_ColorTransform_$type = /*@__PURE__*/ new Type(null, 'IEG_ColorTransform');
/**
 * @hidden
 */
export var IEG_ColorTransformVisitor$2_$type = /*@__PURE__*/ new Type(null, 'IEG_ColorTransformVisitor$2');
/**
 * @hidden
 */
var ColorTransform_Alpha = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Alpha, _super);
    function ColorTransform_Alpha() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Alpha.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Alpha$i(this, b);
    };
    ColorTransform_Alpha.$t = markType(ColorTransform_Alpha, 'ColorTransform_Alpha', CT_PositiveFixedPercentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Alpha;
}(CT_PositiveFixedPercentage));
export { ColorTransform_Alpha };
/**
 * @hidden
 */
var ColorTransform_AlphaOff = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_AlphaOff, _super);
    function ColorTransform_AlphaOff() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_AlphaOff.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_AlphaOff$i(this, b);
    };
    ColorTransform_AlphaOff.$t = markType(ColorTransform_AlphaOff, 'ColorTransform_AlphaOff', CT_FixedPercentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_AlphaOff;
}(CT_FixedPercentage));
export { ColorTransform_AlphaOff };
/**
 * @hidden
 */
var ColorTransform_AlphaMod = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_AlphaMod, _super);
    function ColorTransform_AlphaMod() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_AlphaMod.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_AlphaMod$i(this, b);
    };
    ColorTransform_AlphaMod.$t = markType(ColorTransform_AlphaMod, 'ColorTransform_AlphaMod', CT_PositivePercentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_AlphaMod;
}(CT_PositivePercentage));
export { ColorTransform_AlphaMod };
/**
 * @hidden
 */
var ColorTransform_Blue = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Blue, _super);
    function ColorTransform_Blue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Blue.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Blue$i(this, b);
    };
    ColorTransform_Blue.$t = markType(ColorTransform_Blue, 'ColorTransform_Blue', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Blue;
}(CT_Percentage));
export { ColorTransform_Blue };
/**
 * @hidden
 */
var ColorTransform_BlueOff = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_BlueOff, _super);
    function ColorTransform_BlueOff() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_BlueOff.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_BlueOff$i(this, b);
    };
    ColorTransform_BlueOff.$t = markType(ColorTransform_BlueOff, 'ColorTransform_BlueOff', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_BlueOff;
}(CT_Percentage));
export { ColorTransform_BlueOff };
/**
 * @hidden
 */
var ColorTransform_BlueMod = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_BlueMod, _super);
    function ColorTransform_BlueMod() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_BlueMod.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_BlueMod$i(this, b);
    };
    ColorTransform_BlueMod.$t = markType(ColorTransform_BlueMod, 'ColorTransform_BlueMod', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_BlueMod;
}(CT_Percentage));
export { ColorTransform_BlueMod };
/**
 * @hidden
 */
var ColorTransform_Comp = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Comp, _super);
    function ColorTransform_Comp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Comp.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Comp$i(this, b);
    };
    ColorTransform_Comp.$t = markType(ColorTransform_Comp, 'ColorTransform_Comp', CT_ComplementTransform.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Comp;
}(CT_ComplementTransform));
export { ColorTransform_Comp };
/**
 * @hidden
 */
var ColorTransform_Gray = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Gray, _super);
    function ColorTransform_Gray() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Gray.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Gray$i(this, b);
    };
    ColorTransform_Gray.$t = markType(ColorTransform_Gray, 'ColorTransform_Gray', CT_GrayscaleTransform.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Gray;
}(CT_GrayscaleTransform));
export { ColorTransform_Gray };
/**
 * @hidden
 */
var ColorTransform_Green = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Green, _super);
    function ColorTransform_Green() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Green.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Green$i(this, b);
    };
    ColorTransform_Green.$t = markType(ColorTransform_Green, 'ColorTransform_Green', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Green;
}(CT_Percentage));
export { ColorTransform_Green };
/**
 * @hidden
 */
var ColorTransform_GreenOff = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_GreenOff, _super);
    function ColorTransform_GreenOff() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_GreenOff.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_GreenOff$i(this, b);
    };
    ColorTransform_GreenOff.$t = markType(ColorTransform_GreenOff, 'ColorTransform_GreenOff', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_GreenOff;
}(CT_Percentage));
export { ColorTransform_GreenOff };
/**
 * @hidden
 */
var ColorTransform_GreenMod = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_GreenMod, _super);
    function ColorTransform_GreenMod() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_GreenMod.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_GreenMod$i(this, b);
    };
    ColorTransform_GreenMod.$t = markType(ColorTransform_GreenMod, 'ColorTransform_GreenMod', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_GreenMod;
}(CT_Percentage));
export { ColorTransform_GreenMod };
/**
 * @hidden
 */
var ColorTransform_Hue = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Hue, _super);
    function ColorTransform_Hue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Hue.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Hue$i(this, b);
    };
    ColorTransform_Hue.$t = markType(ColorTransform_Hue, 'ColorTransform_Hue', CT_PositiveFixedAngle.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Hue;
}(CT_PositiveFixedAngle));
export { ColorTransform_Hue };
/**
 * @hidden
 */
var ColorTransform_HueOff = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_HueOff, _super);
    function ColorTransform_HueOff() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_HueOff.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_HueOff$i(this, b);
    };
    ColorTransform_HueOff.$t = markType(ColorTransform_HueOff, 'ColorTransform_HueOff', CT_Angle.$, [IEG_ColorTransform_$type]);
    return ColorTransform_HueOff;
}(CT_Angle));
export { ColorTransform_HueOff };
/**
 * @hidden
 */
var ColorTransform_HueMod = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_HueMod, _super);
    function ColorTransform_HueMod() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_HueMod.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_HueMod$i(this, b);
    };
    ColorTransform_HueMod.$t = markType(ColorTransform_HueMod, 'ColorTransform_HueMod', CT_PositivePercentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_HueMod;
}(CT_PositivePercentage));
export { ColorTransform_HueMod };
/**
 * @hidden
 */
var ColorTransform_Inv = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Inv, _super);
    function ColorTransform_Inv() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Inv.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Inv$i(this, b);
    };
    ColorTransform_Inv.$t = markType(ColorTransform_Inv, 'ColorTransform_Inv', CT_InverseTransform.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Inv;
}(CT_InverseTransform));
export { ColorTransform_Inv };
/**
 * @hidden
 */
var ColorTransform_Lum = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Lum, _super);
    function ColorTransform_Lum() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Lum.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Lum$i(this, b);
    };
    ColorTransform_Lum.$t = markType(ColorTransform_Lum, 'ColorTransform_Lum', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Lum;
}(CT_Percentage));
export { ColorTransform_Lum };
/**
 * @hidden
 */
var ColorTransform_LumOff = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_LumOff, _super);
    function ColorTransform_LumOff() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_LumOff.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_LumOff$i(this, b);
    };
    ColorTransform_LumOff.$t = markType(ColorTransform_LumOff, 'ColorTransform_LumOff', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_LumOff;
}(CT_Percentage));
export { ColorTransform_LumOff };
/**
 * @hidden
 */
var ColorTransform_LumMod = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_LumMod, _super);
    function ColorTransform_LumMod() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_LumMod.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_LumMod$i(this, b);
    };
    ColorTransform_LumMod.$t = markType(ColorTransform_LumMod, 'ColorTransform_LumMod', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_LumMod;
}(CT_Percentage));
export { ColorTransform_LumMod };
/**
 * @hidden
 */
var ColorTransform_Red = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Red, _super);
    function ColorTransform_Red() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Red.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Red$i(this, b);
    };
    ColorTransform_Red.$t = markType(ColorTransform_Red, 'ColorTransform_Red', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Red;
}(CT_Percentage));
export { ColorTransform_Red };
/**
 * @hidden
 */
var ColorTransform_RedOff = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_RedOff, _super);
    function ColorTransform_RedOff() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_RedOff.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_RedOff$i(this, b);
    };
    ColorTransform_RedOff.$t = markType(ColorTransform_RedOff, 'ColorTransform_RedOff', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_RedOff;
}(CT_Percentage));
export { ColorTransform_RedOff };
/**
 * @hidden
 */
var ColorTransform_RedMod = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_RedMod, _super);
    function ColorTransform_RedMod() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_RedMod.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_RedMod$i(this, b);
    };
    ColorTransform_RedMod.$t = markType(ColorTransform_RedMod, 'ColorTransform_RedMod', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_RedMod;
}(CT_Percentage));
export { ColorTransform_RedMod };
/**
 * @hidden
 */
var ColorTransform_Sat = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Sat, _super);
    function ColorTransform_Sat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Sat.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Sat$i(this, b);
    };
    ColorTransform_Sat.$t = markType(ColorTransform_Sat, 'ColorTransform_Sat', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Sat;
}(CT_Percentage));
export { ColorTransform_Sat };
/**
 * @hidden
 */
var ColorTransform_SatOff = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_SatOff, _super);
    function ColorTransform_SatOff() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_SatOff.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_SatOff$i(this, b);
    };
    ColorTransform_SatOff.$t = markType(ColorTransform_SatOff, 'ColorTransform_SatOff', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_SatOff;
}(CT_Percentage));
export { ColorTransform_SatOff };
/**
 * @hidden
 */
var ColorTransform_SatMod = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_SatMod, _super);
    function ColorTransform_SatMod() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_SatMod.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_SatMod$i(this, b);
    };
    ColorTransform_SatMod.$t = markType(ColorTransform_SatMod, 'ColorTransform_SatMod', CT_Percentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_SatMod;
}(CT_Percentage));
export { ColorTransform_SatMod };
/**
 * @hidden
 */
var ColorTransform_Shade = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Shade, _super);
    function ColorTransform_Shade() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Shade.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Shade$i(this, b);
    };
    ColorTransform_Shade.$t = markType(ColorTransform_Shade, 'ColorTransform_Shade', CT_PositiveFixedPercentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Shade;
}(CT_PositiveFixedPercentage));
export { ColorTransform_Shade };
/**
 * @hidden
 */
var ColorTransform_Tint = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColorTransform_Tint, _super);
    function ColorTransform_Tint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorTransform_Tint.prototype._accept$2$i = function ($tArg, $tResult, a, b) {
        return a._visitColorTransform_Tint$i(this, b);
    };
    ColorTransform_Tint.$t = markType(ColorTransform_Tint, 'ColorTransform_Tint', CT_PositiveFixedPercentage.$, [IEG_ColorTransform_$type]);
    return ColorTransform_Tint;
}(CT_PositiveFixedPercentage));
export { ColorTransform_Tint };
