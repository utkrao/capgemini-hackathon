/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, typeCast, markType } from "igniteui-react-core";
import { BorderStyleInfo } from "./BorderStyleInfo";
import { ColorInfo } from "./ColorInfo";
import { ExcelUtils } from "./ExcelUtils";
/**
 * @hidden
 */
var BorderInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BorderInfo, _super);
    function BorderInfo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.h = new BorderStyleInfo();
        _this.j = new BorderStyleInfo();
        _this.l = new BorderStyleInfo();
        _this.b = new BorderStyleInfo();
        _this.d = new BorderStyleInfo();
        _this.f = new BorderStyleInfo();
        _this.n = new BorderStyleInfo();
        _this.p = false;
        _this.r = false;
        _this.u = false;
        return _this;
    }
    BorderInfo.prototype.equals = function (a) {
        if (Base.referenceEquals(this, a)) {
            return true;
        }
        var b = typeCast(BorderInfo.$, a);
        if (b == null) {
            return false;
        }
        return this.p == b.p && this.r == b.r && this.u == b.u && Base.equalsStatic(this.b, b.b) && Base.equalsStatic(this.d, b.d) && Base.equalsStatic(this.f, b.f) && Base.equalsStatic(this.h, b.h) && Base.equalsStatic(this.j, b.j) && Base.equalsStatic(this.l, b.l) && Base.equalsStatic(this.n, b.n);
    };
    BorderInfo.prototype.getHashCode = function () {
        var a = Base.getHashCodeStatic(this.p) ^ Base.getHashCodeStatic(this.r) ^ Base.getHashCodeStatic(this.u);
        if (this.b != null) {
            a ^= this.b.getHashCode();
        }
        if (this.d != null) {
            a ^= this.d.getHashCode();
        }
        if (this.f != null) {
            a ^= this.f.getHashCode();
        }
        if (this.h != null) {
            a ^= this.h.getHashCode();
        }
        if (this.j != null) {
            a ^= this.j.getHashCode();
        }
        if (this.l != null) {
            a ^= this.l.getHashCode();
        }
        if (this.n != null) {
            a ^= this.n.getHashCode();
        }
        return a;
    };
    Object.defineProperty(BorderInfo.prototype, "i", {
        get: function () {
            return this.h;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "k", {
        get: function () {
            return this.j;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "m", {
        get: function () {
            return this.l;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "c", {
        get: function () {
            return this.b;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "e", {
        get: function () {
            return this.d;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "g", {
        get: function () {
            return this.f;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "o", {
        get: function () {
            return this.n;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "q", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "s", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BorderInfo.prototype, "v", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
        },
        enumerable: false,
        configurable: true
    });
    BorderInfo.prototype.x = function (a, b) {
        if (this.c != null && this.c.f == false) {
            a.bottomBorderColorInfo = this.c.d.c(b);
            a.bottomBorderStyle = this.c.a;
        }
        if (this.m != null && this.m.f == false) {
            a.topBorderColorInfo = this.m.d.c(b);
            a.topBorderStyle = this.m.a;
        }
        if (this.i != null && this.i.f == false) {
            a.leftBorderColorInfo = this.i.d.c(b);
            a.leftBorderStyle = this.i.a;
        }
        if (this.k != null && this.k.f == false) {
            a.rightBorderColorInfo = this.k.d.c(b);
            a.rightBorderStyle = this.k.a;
        }
        if (this.e != null && this.e.f == false) {
            a.diagonalBorderColorInfo = this.e.d.c(b);
            a.diagonalBorderStyle = this.e.a;
        }
        var c = 1;
        if (this.q) {
            c |= 3;
        }
        if (this.s) {
            c |= 5;
        }
        a.diagonalBorders = c;
    };
    BorderInfo.a = function (a, b) {
        var c = new BorderInfo();
        var d = b._b1 == 2;
        BorderInfo.y(a, c.c, d ? b.bottomBorderStyle : b._al, b.bottomBorderColorInfo, b._bf);
        BorderInfo.y(a, c.m, d ? b.topBorderStyle : b._ap, b.topBorderColorInfo, b._bm);
        BorderInfo.y(a, c.i, d ? b.leftBorderStyle : b._an, b.leftBorderColorInfo, b._bk);
        BorderInfo.y(a, c.k, d ? b.rightBorderStyle : b._ao, b.rightBorderColorInfo, b._bl);
        BorderInfo.y(a, c.e, d ? b.diagonalBorderStyle : b._am, b.diagonalBorderColorInfo, b._bg);
        var e = d ? b.diagonalBorders : b._aw;
        if (ExcelUtils.az(e)) {
            c.q = true;
        }
        if (ExcelUtils.a0(e)) {
            c.s = true;
        }
        return c;
    };
    BorderInfo.y = function (a, b, c, d, e) {
        var f = (c == -1 || c == 0) ? d : e;
        b.a = c;
        b.d = ColorInfo.a(a, f, 0);
    };
    BorderInfo.$t = markType(BorderInfo, 'BorderInfo');
    return BorderInfo;
}(Base));
export { BorderInfo };
