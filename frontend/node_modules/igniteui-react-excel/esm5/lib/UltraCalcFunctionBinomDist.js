/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { UltraCalcFunctionCombin } from "./UltraCalcFunctionCombin";
import { markType } from "igniteui-react-core";
import { truncate, isNaN_ } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionBinomDist = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionBinomDist, _super);
    function UltraCalcFunctionBinomDist() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionBinomDist.prototype.evaluate = function (a, b) {
        var c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var d = c._toBoolean1();
        c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var e = c._toDouble3();
        c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var f = truncate(c._toDecimal2());
        c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var g = truncate(c._toDecimal2());
        return UltraCalcFunctionBinomDist._ak(f, e, d ? 0 : g, g);
    };
    UltraCalcFunctionBinomDist._ak = function (a, b, c, d) {
        if (c < 0 || c > a || b < 0 || b > 1 || c > d || d > a) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(4));
        }
        var e = 0;
        if (a >= 1030) {
            var f = Math.pow(10, -12);
            var g = 0;
            var h = 0;
            var i = c;
            var j = d;
            var k = a;
            var l = b;
            var m = truncate((k * l));
            var n = c != d;
            g++;
            if (i <= m && m <= j) {
                h++;
            }
            var o = 1;
            var p = false;
            var q = m + 1;
            while (!p && q <= k) {
                var r = o * (k - q + 1) * l / (q * (1 - l));
                g += r;
                if (i <= q && q <= j) {
                    h += r;
                }
                if (r <= f) {
                    p = true;
                }
                o = r;
                q++;
            }
            o = 1;
            p = false;
            q = m - 1;
            while (!p && q >= 0) {
                var s = o * (q + 1) * (1 - l) / ((k - q) * l);
                g += s;
                if (i <= q && q <= j) {
                    h += s;
                }
                if (s <= f) {
                    p = true;
                }
                o = s;
                q--;
            }
            e = h / g;
        }
        else {
            for (var t = c; t <= d && !isNaN_(e); t++) {
                e += UltraCalcFunctionBinomDist._al(t, a, b);
            }
        }
        if (isNaN_(e)) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(4));
        }
        return new ExcelCalcValue(e);
    };
    UltraCalcFunctionBinomDist._al = function (a, b, c) {
        var d = UltraCalcFunctionCombin._am(b, a, false);
        return d * Math.pow(c, a) * Math.pow(1 - c, b - a);
    };
    UltraCalcFunctionBinomDist.prototype.get_name = function () {
        return "binomdist";
    };
    Object.defineProperty(UltraCalcFunctionBinomDist.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionBinomDist.prototype.get_minArgs = function () {
        return 4;
    };
    Object.defineProperty(UltraCalcFunctionBinomDist.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionBinomDist.prototype.get_maxArgs = function () {
        return 4;
    };
    Object.defineProperty(UltraCalcFunctionBinomDist.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionBinomDist.$t = markType(UltraCalcFunctionBinomDist, 'UltraCalcFunctionBinomDist', BuiltInFunctionBase.$);
    return UltraCalcFunctionBinomDist;
}(BuiltInFunctionBase));
export { UltraCalcFunctionBinomDist };
