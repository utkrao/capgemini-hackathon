/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, typeCast, markStruct } from "igniteui-react-core";
import { ST_Percentage } from "./ST_Percentage";
import { ST_DecimalNumber } from "./ST_DecimalNumber";
import { nullableNotEquals } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_DecimalNumberOrPercent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_DecimalNumberOrPercent, _super);
    function ST_DecimalNumberOrPercent(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.b = false;
        _this.a = new ST_Percentage();
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.b = d;
                    _this.a = c;
                }
                break;
        }
        return _this;
    }
    ST_DecimalNumberOrPercent.prototype.equals = function (a) {
        var b = toNullable(ST_DecimalNumberOrPercent.$, typeCast(ST_DecimalNumberOrPercent.$, a));
        if (ST_DecimalNumberOrPercent.f(b, toNullable(ST_DecimalNumberOrPercent.$, null))) {
            return false;
        }
        return ST_DecimalNumberOrPercent.c(this, b.getValueOrDefault());
    };
    ST_DecimalNumberOrPercent.prototype.getHashCode = function () {
        return this.a.getHashCode();
    };
    ST_DecimalNumberOrPercent.prototype.toString = function () {
        return this.k(0);
    };
    ST_DecimalNumberOrPercent.prototype.k = function (a) {
        if (this.b) {
            return (ST_Percentage.l(this.a)).toString();
        }
        return this.a.r(a);
    };
    ST_DecimalNumberOrPercent.prototype.i = function (a) {
        a = this.b;
        return {
            ret: ST_Percentage.l(this.a),
            p0: a
        };
    };
    ST_DecimalNumberOrPercent.j = function (a, b) {
        var c = ST_DecimalNumber.j(a);
        if (nullableNotEquals(c, null)) {
            return toNullable(ST_DecimalNumberOrPercent.$, new ST_DecimalNumberOrPercent(1, new ST_Percentage(1, ST_DecimalNumber.f(c.getValueOrDefault())), true));
        }
        var d = ST_Percentage.q(a, b);
        if (ST_Percentage.h(d, toNullable(ST_Percentage.$, null))) {
            return toNullable(ST_DecimalNumberOrPercent.$, new ST_DecimalNumberOrPercent(1, d.getValueOrDefault(), false));
        }
        return toNullable(ST_DecimalNumberOrPercent.$, null);
    };
    ST_DecimalNumberOrPercent.c = function (a, b) {
        return ST_Percentage.e(a.a, b.a);
    };
    ST_DecimalNumberOrPercent.d = function (a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return ST_DecimalNumberOrPercent.c(a.value, b.value);
    };
    ST_DecimalNumberOrPercent.e = function (a, b) {
        return !(ST_DecimalNumberOrPercent.c(a, b));
    };
    ST_DecimalNumberOrPercent.f = function (a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return ST_DecimalNumberOrPercent.e(a.value, b.value);
    };
    ST_DecimalNumberOrPercent.$t = markStruct(ST_DecimalNumberOrPercent, 'ST_DecimalNumberOrPercent');
    return ST_DecimalNumberOrPercent;
}(ValueType));
export { ST_DecimalNumberOrPercent };
