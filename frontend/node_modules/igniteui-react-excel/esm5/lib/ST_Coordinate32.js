/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, markStruct } from "igniteui-react-core";
import { ST_Coordinate32Unqualified } from "./ST_Coordinate32Unqualified";
import { ST_UniversalMeasure } from "./ST_UniversalMeasure";
import { DocCoreUtils } from "./DocCoreUtils";
import { nullableNotEquals } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_Coordinate32 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_Coordinate32, _super);
    function ST_Coordinate32(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.k = toNullable(ST_Coordinate32Unqualified.$, null);
        _this.l = toNullable(ST_UniversalMeasure.$, null);
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    _this.k = toNullable(ST_Coordinate32Unqualified.$, c);
                    _this.l = toNullable(ST_UniversalMeasure.$, null);
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    _this.k = toNullable(ST_Coordinate32Unqualified.$, null);
                    _this.l = toNullable(ST_UniversalMeasure.$, c);
                }
                break;
        }
        return _this;
    }
    ST_Coordinate32.prototype.j = function () {
        if (nullableNotEquals(this.k, null)) {
            return this.k.value.g;
        }
        if (ST_UniversalMeasure.f(this.l, toNullable(ST_UniversalMeasure.$, null))) {
            return this.l.value.m();
        }
        return 0;
    };
    ST_Coordinate32.g = function (a) {
        var b = ST_Coordinate32.q(a);
        if (nullableNotEquals(b, null)) {
            return b.getValueOrDefault();
        }
        throw DocCoreUtils.n(ST_Coordinate32.$, a);
    };
    ST_Coordinate32.q = function (a) {
        var b = ST_Coordinate32Unqualified.j(a);
        if (nullableNotEquals(b, null)) {
            return toNullable(ST_Coordinate32.$, ST_Coordinate32.b(b.getValueOrDefault()));
        }
        var c = ST_UniversalMeasure.o(a);
        if (ST_UniversalMeasure.f(c, toNullable(ST_UniversalMeasure.$, null))) {
            return toNullable(ST_Coordinate32.$, ST_Coordinate32.c(c.getValueOrDefault()));
        }
        return toNullable(ST_Coordinate32.$, null);
    };
    ST_Coordinate32.prototype.toString = function () {
        if (nullableNotEquals(this.k, null)) {
            return this.k.getValueOrDefault().toString();
        }
        if (ST_UniversalMeasure.f(this.l, toNullable(ST_UniversalMeasure.$, null))) {
            return this.l.getValueOrDefault().toString();
        }
        return stringEmpty();
    };
    ST_Coordinate32.a = function (a) {
        return new ST_Coordinate32(1, ST_Coordinate32Unqualified.a(a));
    };
    ST_Coordinate32.n = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_Coordinate32.$, null);
        }
        return toNullable(ST_Coordinate32.$, ST_Coordinate32.a(a.value));
    };
    ST_Coordinate32.b = function (a) {
        return new ST_Coordinate32(1, a);
    };
    ST_Coordinate32.o = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_Coordinate32.$, null);
        }
        return toNullable(ST_Coordinate32.$, ST_Coordinate32.b(a.value));
    };
    ST_Coordinate32.h = function (a) {
        return a.k.value;
    };
    ST_Coordinate32.m = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_Coordinate32Unqualified.$, null);
        }
        return toNullable(ST_Coordinate32Unqualified.$, ST_Coordinate32.h(a.value));
    };
    ST_Coordinate32.c = function (a) {
        return new ST_Coordinate32(2, a);
    };
    ST_Coordinate32.p = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_Coordinate32.$, null);
        }
        return toNullable(ST_Coordinate32.$, ST_Coordinate32.c(a.value));
    };
    ST_Coordinate32.$t = markStruct(ST_Coordinate32, 'ST_Coordinate32');
    return ST_Coordinate32;
}(ValueType));
export { ST_Coordinate32 };
