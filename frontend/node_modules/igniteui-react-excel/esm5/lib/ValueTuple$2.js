/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, IEquatable$1_$type, toNullable, typeCast, markStruct } from "igniteui-react-core";
import { EqualityComparer$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var ValueTuple$2 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ValueTuple$2, _super);
    function ValueTuple$2($t1, $t2, a) {
        var _rest = [];
        for (var _g = 3; _g < arguments.length; _g++) {
            _rest[_g - 3] = arguments[_g];
        }
        var _this = _super.call(this) || this;
        _this.$t1 = null;
        _this.$t2 = null;
        _this._a = null;
        _this._b = null;
        _this._k = 0;
        _this.$t1 = $t1;
        _this.$t2 = $t2;
        _this.$type = _this.$type.specialize(_this.$t1, _this.$t2);
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this._a = c;
                    _this._b = d;
                    _this._k = (_this.$type.getStaticFields()._i.getHashCodeC(_this._a) << 5) ^ _this.$type.getStaticFields()._j.getHashCodeC(_this._b);
                }
                break;
        }
        return _this;
    }
    ValueTuple$2.prototype.equals = function (a) {
        return this.$type.getStaticFields()._i.equalsC(this._a, a._a) && this.$type.getStaticFields()._j.equalsC(this._b, a._b);
    };
    ValueTuple$2.prototype.equals1 = function (a) {
        var b = toNullable(ValueTuple$2.$.specialize(this.$t1, this.$t2), typeCast(ValueTuple$2.$.specialize(this.$t1, this.$t2), a));
        return ValueTuple$2._f(this.$t1, this.$t2, b, toNullable(ValueTuple$2.$.specialize(this.$t1, this.$t2), null)) && this.equals(b.value);
    };
    ValueTuple$2.prototype.getHashCode = function () {
        return this._k;
    };
    ValueTuple$2._c = function ($t1, $t2, a, b) {
        return a.equals(b);
    };
    ValueTuple$2._d = function ($t1, $t2, a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return ValueTuple$2._c($t1, $t2, a.value, b.value);
    };
    ValueTuple$2._e = function ($t1, $t2, a, b) {
        return !a.equals(b);
    };
    ValueTuple$2._f = function ($t1, $t2, a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return ValueTuple$2._e($t1, $t2, a.value, b.value);
    };
    ValueTuple$2.$t = markStruct(ValueTuple$2, 'ValueTuple$2', ValueType.$, [IEquatable$1_$type.specialize(-1)], function () {
        this._i = EqualityComparer$1.defaultEqualityComparerValue(arguments[0]);
        this._j = EqualityComparer$1.defaultEqualityComparerValue(arguments[1]);
    }).initSelfReferences();
    return ValueTuple$2;
}(ValueType));
export { ValueTuple$2 };
