/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_GeoPolygon = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_GeoPolygon, _super);
    function CT_GeoPolygon() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.d = null;
        _this.b = 0;
        _this.c = null;
        return _this;
    }
    CT_GeoPolygon.a = function (a) {
        var b = null;
        var c = 0;
        var d = null;
        var e = CT_GeoPolygon.f(a, b, c, d);
        b = e.p1;
        c = e.p2;
        d = e.p3;
        return ((function () {
            var $ret = new CT_GeoPolygon();
            $ret.b = c;
            $ret.c = d;
            $ret.d = b;
            return $ret;
        })());
    };
    CT_GeoPolygon.f = function (a, b, c, d) {
        var e_1, _a;
        b = null;
        c = 0;
        d = null;
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                switch (e.a.e(a.d)) {
                    case "polygonId":
                        b = e.d;
                        break;
                    case "numPoints":
                        c = parseInt32_1(e.d, CultureInfo.invariantCulture);
                        break;
                    case "pcaRings":
                        d = e.d;
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d
        };
    };
    CT_GeoPolygon.g = function (a, b, c, d, e) {
        a.ad.p(b, "cx");
        var f = null;
        var g = null;
        g = "numPoints";
        f = c.toString();
        a.ad.h(g, f);
        if (d != null) {
            g = "pcaRings";
            f = d;
            a.ad.h(g, f);
        }
        if (e != null) {
            g = "polygonId";
            f = e;
            a.ad.h(g, f);
        }
    };
    CT_GeoPolygon.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_GeoPolygon.$t = markType(CT_GeoPolygon, 'CT_GeoPolygon');
    return CT_GeoPolygon;
}(Base));
export { CT_GeoPolygon };
