/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
import { Convert } from "igniteui-react-core";
import { Encoding } from "igniteui-react-core";
import { BitConverter } from "igniteui-react-core";
import { intSToU } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var CryptoUtilities = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CryptoUtilities, _super);
    function CryptoUtilities() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CryptoUtilities.d = function ($t, a, b) {
        for (var c = 0; c < a.length; c++) {
            a[c] = b;
        }
    };
    CryptoUtilities.c = function (a) {
        return Convert.toBase64String(a);
    };
    CryptoUtilities.a = function (a) {
        var b = a.readUInt32();
        var c = a.readBytes(b);
        while (b % 4 != 0) {
            a.readByte();
            b++;
        }
        return Encoding.unicode.getString1(c, 0, c.length);
    };
    CryptoUtilities.g = function (a, b) {
        var c = Encoding.unicode.getBytes1(a);
        b.w(intSToU(c.length));
        b.h(c);
        for (var d = c.length; d % 4 != 0; d++) {
            b.m(0);
        }
    };
    CryptoUtilities.b = function (a) {
        var b = a.readUInt32();
        if (b == 0) {
            return null;
        }
        if (b == 4) {
            return stringEmpty();
        }
        var c = a.readBytes(b);
        while (b % 4 != 0) {
            a.readByte();
            b++;
        }
        return Encoding.uTF8.getString(c);
    };
    CryptoUtilities.h = function (a, b) {
        if (a == null) {
            b.w(intSToU(0));
            return;
        }
        if (a.length == 0) {
            b.w(intSToU(4));
            return;
        }
        var c = Encoding.uTF8.getBytes1(a);
        b.w(intSToU(c.length));
        b.h(c);
        for (var d = c.length; d % 4 != 0; d++) {
            b.m(0);
        }
    };
    CryptoUtilities.e = function (a, b) {
        a.write(BitConverter.h(b), 0, 2);
    };
    CryptoUtilities.f = function (a, b) {
        a.write(BitConverter.i(b), 0, 4);
    };
    CryptoUtilities.$t = markType(CryptoUtilities, 'CryptoUtilities');
    return CryptoUtilities;
}(Base));
export { CryptoUtilities };
