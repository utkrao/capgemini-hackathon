/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ChartFillBase } from "./ChartFillBase";
import { BaseError, markType } from "igniteui-react-core";
import { GradientStop } from "./GradientStop";
import { ArgumentNullException } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { GradientStop_SortComparer } from "./GradientStop_SortComparer";
/**
 * Represents a gradient fill for a chart element.
 * @see [[GradientStop]]
 * @see [[GradientType]]
 */
var ChartGradientFill = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ChartGradientFill, _super);
    function ChartGradientFill() {
        var _rest = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _rest[_i] = arguments[_i];
        }
        var _this = _super.call(this, null) || this;
        _this._z = null;
        _this._w = 0;
        _this._aa = 0;
        var gradientType = _rest[0];
        var stops = _rest[1];
        var angle = _rest[2];
        angle = (angle !== void 0 ? angle : 0);
        if (stops == null) {
            throw new ArgumentNullException(0, "stops");
        }
        _this._w = gradientType;
        _this._aa = angle;
        _this._ac(stops);
        return _this;
    }
    Object.defineProperty(ChartGradientFill.prototype, "angle", {
        /**
         * Returns the angle defining the path along which the gradient extends;
         * applicable only for linear gradients.
         * <p class="body">
         * This property only applies to linear gradients.
         * </p>
         * <p class="body">
         * This property defines the angle the gradient path makes with the horizontal plane.
         * </p>
         * <p class="body">
         * For example, a gradient which extends from left to right can be changed to extend from
         * bottom to top by setting this property to 90 degrees.
         * </p>
         * <p class="body">
         * A value of 45 degrees yields a gradient which extends from the bottom left corner
         * of the containing element to the top right corner.
         * </p>
         */
        get: function () {
            return this._aa;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ChartGradientFill.prototype, "gradientType", {
        /**
         * Defines the style for the gradient.
         */
        get: function () {
            return this._w;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns an enumerable list containing each [[GradientStop]]
     * associated with this gradient, ordered by their [[GradientStop.position]].
     * @return An array of [[GradientStop]] instances.
     */
    ChartGradientFill.prototype.getStops = function () {
        return this._z.toArray();
    };
    /**
     * @hidden
     */
    ChartGradientFill.prototype._ac = function (a) {
        this._z = a == null ? null : new List$1(GradientStop.$, 1, a);
        if (this._z == null || this._z.count < 1) {
            throw new BaseError(1, DocCoreUtils.aa("LE_ChartGradientFill_EmptyStops"));
        }
        DocCoreUtils.as(GradientStop.$, this._z, new GradientStop_SortComparer());
    };
    ChartGradientFill.$t = markType(ChartGradientFill, 'ChartGradientFill', ChartFillBase.$);
    return ChartGradientFill;
}(ChartFillBase));
export { ChartGradientFill };
