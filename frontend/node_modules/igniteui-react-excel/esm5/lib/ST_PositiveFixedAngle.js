/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, typeCast, markStruct } from "igniteui-react-core";
import { ST_Angle } from "./ST_Angle";
import { DocCoreUtils } from "./DocCoreUtils";
/**
 * @hidden
 */
var ST_PositiveFixedAngle = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_PositiveFixedAngle, _super);
    function ST_PositiveFixedAngle(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.a = new ST_Angle();
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    DocCoreUtils.aw(ST_PositiveFixedAngle.$, c.n(), "value", 0, 21600000);
                    _this.a = c;
                }
                break;
        }
        return _this;
    }
    ST_PositiveFixedAngle.prototype.equals = function (a) {
        var b = toNullable(ST_PositiveFixedAngle.$, typeCast(ST_PositiveFixedAngle.$, a));
        if (ST_PositiveFixedAngle.k(b, toNullable(ST_PositiveFixedAngle.$, null))) {
            return false;
        }
        return ST_PositiveFixedAngle.h(this, b.getValueOrDefault());
    };
    ST_PositiveFixedAngle.prototype.getHashCode = function () {
        return this.a.getHashCode();
    };
    ST_PositiveFixedAngle.prototype.toString = function () {
        return this.a.toString();
    };
    ST_PositiveFixedAngle.d = function (a) {
        return ST_PositiveFixedAngle.e(ST_Angle.a(a));
    };
    ST_PositiveFixedAngle.prototype.q = function () {
        return this.a.n();
    };
    ST_PositiveFixedAngle.g = function (a) {
        var b = ST_PositiveFixedAngle.p(a);
        if (ST_PositiveFixedAngle.k(b, toNullable(ST_PositiveFixedAngle.$, null))) {
            return b.getValueOrDefault();
        }
        throw DocCoreUtils.n(ST_PositiveFixedAngle.$, a);
    };
    ST_PositiveFixedAngle.p = function (a) {
        return ST_PositiveFixedAngle.o(ST_Angle.m(a));
    };
    ST_PositiveFixedAngle.h = function (a, b) {
        return ST_Angle.c(a.a, b.a);
    };
    ST_PositiveFixedAngle.i = function (a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return ST_PositiveFixedAngle.h(a.value, b.value);
    };
    ST_PositiveFixedAngle.j = function (a, b) {
        return !(ST_PositiveFixedAngle.h(a, b));
    };
    ST_PositiveFixedAngle.k = function (a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return ST_PositiveFixedAngle.j(a.value, b.value);
    };
    ST_PositiveFixedAngle.e = function (a) {
        return new ST_PositiveFixedAngle(1, a);
    };
    ST_PositiveFixedAngle.o = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_PositiveFixedAngle.$, null);
        }
        return toNullable(ST_PositiveFixedAngle.$, ST_PositiveFixedAngle.e(a.value));
    };
    ST_PositiveFixedAngle.b = function (a) {
        return a.a;
    };
    ST_PositiveFixedAngle.n = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_Angle.$, null);
        }
        return toNullable(ST_Angle.$, ST_PositiveFixedAngle.b(a.value));
    };
    ST_PositiveFixedAngle.$t = markStruct(ST_PositiveFixedAngle, 'ST_PositiveFixedAngle');
    return ST_PositiveFixedAngle;
}(ValueType));
export { ST_PositiveFixedAngle };
