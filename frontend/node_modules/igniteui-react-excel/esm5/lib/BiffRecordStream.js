/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Stream, typeCast, toNullable, Number_$type, fromEnum, markType } from "igniteui-react-core";
import { IBiffRecordStream_$type } from "./IBiffRecordStream";
import { List$1 } from "igniteui-react-core";
import { BiffRecordStream_RecordBlockInfo } from "./BiffRecordStream_RecordBlockInfo";
import { InPlaceTransform } from "./InPlaceTransform";
import { MemoryStream } from "igniteui-react-core";
import { Buffer } from "igniteui-react-core";
import { EndOfStreamException } from "./EndOfStreamException";
import { BitConverter } from "igniteui-react-core";
import { StringElement } from "./StringElement";
import { BiffRecordStream_FormattedStringInfo } from "./BiffRecordStream_FormattedStringInfo";
import { FormattedStringElement } from "./FormattedStringElement";
import { Async } from "./Async";
import { CellAddress } from "./CellAddress";
import { CellAddressRange } from "./CellAddressRange";
import { Encoding } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Workbook } from "./Workbook";
import { FormattedStringRun } from "./FormattedStringRun";
import { ExcelUtils } from "./ExcelUtils";
import { truncate, intDivide } from "igniteui-react-core";
/**
 * @hidden
 */
var BiffRecordStream = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BiffRecordStream, _super);
    function BiffRecordStream(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._aj = false;
        _this._bi = 0;
        _this._bm = null;
        _this._bl = null;
        _this._a4 = 0;
        _this._a7 = 0;
        _this._am = new List$1(BiffRecordStream_RecordBlockInfo.$, 0);
        _this._aw = 0;
        _this._ah = false;
        _this._a8 = 0;
        _this._au = 0;
        _this._at = 0;
        _this._w = null;
        _this._ap = null;
        _this._o = null;
        _this._ai = false;
        _this._q = null;
        _this._loadManager_1 = null;
        _this._saveManager = null;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    _this._o = new Array(8);
                    _this._q = c || InPlaceTransform.b;
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = _rest[2];
                    var f = _rest[3];
                    var g = [f];
                    {
                        var i = g[0];
                        _this._o = new Array(8);
                        _this._q = i || InPlaceTransform.b;
                    }
                    _this._ai = true;
                    _this._aj = true;
                    _this._loadManager = c;
                    _this._bm = d;
                    _this._bl = e;
                    _this._au = _this._bb(e);
                    if (_this._au == _this._a1()) {
                        _this._am.add(_this._aa(_this._bm.position, 0));
                        return _this;
                    }
                    var h = _this._ba(_this._bl);
                    _this._bi = _this._bm.position;
                    _this._a4 = h;
                    _this._am.add(_this._aa(_this._bm.position, h));
                    _this._bm.position = _this._bi + _this._a4;
                    _this._bw();
                    _this._bm.position = _this._bi;
                    _this._b8(0);
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = _rest[2];
                    var f = _rest[3];
                    var g = [f];
                    {
                        var i = g[0];
                        _this._o = new Array(8);
                        _this._q = i || InPlaceTransform.b;
                    }
                    _this._aj = true;
                    _this.saveManager = c;
                    _this._bm = d;
                    _this._au = e;
                    _this._am.add(_this._aa(_this._bm.position + _this._ax() + _this._bj(), 0));
                    _this._bi = _this._bm.position;
                    _this._b8(0);
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(BiffRecordStream.prototype, "parentStreamRaw", {
        get: function () {
            return this._w;
        },
        set: function (a) {
            this._w = typeCast(BiffRecordStream.$, a);
        },
        enumerable: false,
        configurable: true
    });
    BiffRecordStream.prototype.writeByte = function (a) {
        this._write9(a);
    };
    BiffRecordStream.prototype.writeByteArray = function (a) {
        this._write2(a);
    };
    BiffRecordStream.prototype.writeDouble = function (a) {
        this._write10(a);
    };
    BiffRecordStream.prototype.writeString = function (a, b) {
        this._write15(a, b);
    };
    BiffRecordStream.prototype.get_canRead = function () {
        return true;
    };
    Object.defineProperty(BiffRecordStream.prototype, "canRead", {
        get: function () {
            return this.get_canRead();
        },
        enumerable: false,
        configurable: true
    });
    BiffRecordStream.prototype.get_canSeek = function () {
        return true;
    };
    Object.defineProperty(BiffRecordStream.prototype, "canSeek", {
        get: function () {
            return this.get_canSeek();
        },
        enumerable: false,
        configurable: true
    });
    BiffRecordStream.prototype.get_canWrite = function () {
        return true;
    };
    Object.defineProperty(BiffRecordStream.prototype, "canWrite", {
        get: function () {
            return this.get_canWrite();
        },
        enumerable: false,
        configurable: true
    });
    BiffRecordStream.prototype.disposeCore = function (a) {
        try {
            if (a) {
                this._b1();
                if (this._q.d && this._q.c == false) {
                    for (var b = 0; b < this._am.count; b++) {
                        var c = this._am._inner[b];
                        this._bm.position = c.g;
                        this._q.g(this._bm, c.b);
                    }
                    this._q.f();
                }
                this._bm.position = this.endUnderlyingStreamPosition;
                if (this._w != null) {
                    this._w._aj = true;
                }
            }
            this._aj = false;
        }
        finally {
            _super.prototype.disposeCore.call(this, a);
        }
    };
    BiffRecordStream.prototype.get_length = function () {
        return this._a4;
    };
    Object.defineProperty(BiffRecordStream.prototype, "length", {
        get: function () {
            return this.get_length();
        },
        enumerable: false,
        configurable: true
    });
    BiffRecordStream.prototype.flush = function () {
    };
    BiffRecordStream.prototype.get_position = function () {
        return this._a7;
    };
    BiffRecordStream.prototype.set_position = function (a) {
        if (this._aj == false) {
            return;
        }
        if (this._a7 == a) {
            return;
        }
        if (a < 0) {
            return;
        }
        var b = (a - this._a7);
        var c = this._a8 + b;
        this._a7 = a;
        if (this._bi == this._bm.position && 0 <= c && c < this._am._inner[this._aw].b) {
            this._a8 = c;
            this._bi += b;
            this._bm.position = this._bi;
        }
        else {
            this._b9();
        }
    };
    Object.defineProperty(BiffRecordStream.prototype, "position", {
        get: function () {
            return this.get_position();
        },
        set: function (a) {
            this.set_position(a);
        },
        enumerable: false,
        configurable: true
    });
    BiffRecordStream.prototype.read = function (a, b, c) {
        if (this._aj == false) {
            return 0;
        }
        if (a == null) {
            return 0;
        }
        if (b < 0) {
            return 0;
        }
        if (c < 0) {
            return 0;
        }
        if (b + c > a.length) {
            return 0;
        }
        var d = Math.min(c, (this._a4 - this._a7));
        if (d < 0) {
            return 0;
        }
        var e = 0;
        while (e < d) {
            e += this._bc(a, b + e, d - e);
        }
        return e;
    };
    BiffRecordStream.prototype.seek = function (a, b) {
        switch (b) {
            case 0:
                this.position = a;
                break;
            case 1:
                this.position += a;
                break;
            case 2:
                this.position = this.length + a;
                break;
            default: break;
        }
        return this._a7;
    };
    BiffRecordStream.prototype.setLength = function (a) {
        if (a == this._a4) {
            return;
        }
        if (a < this._a4) {
            return;
        }
        var b = a - this._a4;
        this._a4 = a;
        var c = false;
        var d = this._bm.position;
        while (true) {
            var e = this._am.count - 1;
            var f = this._am._inner[e];
            var g = f.b;
            if (g + b <= f.d) {
                f.b = (g + b);
                break;
            }
            else {
                var h = f.d - f.b;
                b -= h;
                f.b = f.d;
                this._bm.position += h;
                this._cz(this._a3());
                c = true;
            }
        }
        if (c) {
            this._bm.position = d;
        }
    };
    BiffRecordStream.prototype.write = function (a, b, c) {
        if (a == null) {
            return;
        }
        if (b < 0) {
            return;
        }
        if (c < 0) {
            return;
        }
        if (b + c > a.length) {
            return;
        }
        var d = 0;
        var e = true;
        if (this._ai == false) {
            this._cx(Math.min(c, this._am._inner[0].d));
            e = false;
        }
        var f = this._a7 + c;
        if (f > this.length) {
            this.setLength(f);
        }
        while (d < c) {
            d += this._bh(a, b + d, c - d);
        }
        if (e == false) {
            this._ah = false;
        }
    };
    BiffRecordStream.prototype._addSubStream = function (a) {
        var b = typeCast(BiffRecordStream.$, a);
        if (this._ap == null) {
            this._ap = new List$1(IBiffRecordStream_$type, 0);
        }
        this._ap.add(a);
        b.parentStreamRaw = this;
        this._aj = false;
        this._am._inner[this._aw].h();
    };
    BiffRecordStream.prototype._appendNextRecordIfType = function (a) {
        if (this._af(a) == false) {
            return false;
        }
        this._bm.seek(this._am._inner[this._am.count - 1].b, 1);
        this._bw();
        return true;
    };
    BiffRecordStream.prototype._capCurrentBlock = function () {
        this._syncWorkbookStreamPosition();
        this._am._inner[this._aw].h();
    };
    BiffRecordStream.prototype._getDataSize = function (a, b, c) {
        var d = this.position;
        try {
            this.position = a;
            {
                var e = new MemoryStream(0);
                try {
                    var f = this._x(e, -a);
                    if (f._a4 < a) {
                        f.setLength(a);
                    }
                    f.position = a;
                    f._write15(c, b);
                    return e.position;
                }
                finally {
                    if (e != null) {
                        e.dispose();
                    }
                }
            }
        }
        finally {
            this.position = d;
        }
    };
    BiffRecordStream.prototype._getStartOfRecord = function () {
        return this._am._inner[0].g - this._ax() - this._bj();
    };
    BiffRecordStream.prototype.readByteFromBuffer = function (a, b) {
        if (b == a.length) {
            var c = this._by(a, b);
            a = c.p0;
            b = c.p1;
        }
        return {
            ret: a[b++],
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._readBytes = function (a) {
        if (a < 0) {
            return new Array(0);
        }
        var b = new Array(a);
        var c = this.read(b, 0, a);
        if (c == a) {
            return b;
        }
        if (c == 0) {
            return new Array(0);
        }
        var d = new Array(c);
        Buffer.c(b, 0, d, 0, c);
        return d;
    };
    BiffRecordStream.prototype.readBytesFromBuffer = function (a, b, c) {
        if (a < 0) {
            return {
                ret: new Array(0),
                p1: b,
                p2: c
            };
        }
        var d = new Array(a);
        var e = 0;
        while (true) {
            var f = Math.min(a - e, b.length - c);
            Buffer.c(b, c, d, e, f);
            c += f;
            e += f;
            if (e == a) {
                return {
                    ret: d,
                    p1: b,
                    p2: c
                };
            }
            if (this.position == this.length) {
                var g = new Array(e);
                Buffer.c(d, 0, g, 0, e);
                return {
                    ret: g,
                    p1: b,
                    p2: c
                };
            }
            var h = this._by(b, c);
            b = h.p0;
            c = h.p1;
        }
    };
    BiffRecordStream.prototype._readDouble = function () {
        if (this.read(this._o, 0, 8) != 8) {
            throw new EndOfStreamException(null, null);
        }
        return BitConverter.o(this._o, 0);
    };
    BiffRecordStream.prototype.readDoubleFromBuffer = function (a, b) {
        if (b + 8 > a.length) {
            var c = this._by(a, b);
            a = c.p0;
            b = c.p1;
        }
        var d = BitConverter.o(a, b);
        b += 8;
        return {
            ret: d,
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._readFormattedString = function (a) {
        if (a != 0 && a != 1) {
            return null;
        }
        var b = a == 0 ? this.readByte() : this._readUInt16();
        return this._readFormattedString1(b);
    };
    BiffRecordStream.prototype._readFormattedString1 = function (a) {
        var _this = this;
        var b;
        if (((function () { var c = _this._tryReadFormattedString(a, b); b = c.p1; return c.ret; })()) == false) {
            throw new EndOfStreamException(null, null);
        }
        return b;
    };
    BiffRecordStream.prototype._tryReadFormattedString = function (a, b) {
        b = null;
        var c = this._z(a);
        if (c == null) {
            return {
                ret: false,
                p1: b
            };
        }
        if (c.a) {
            var d = new FormattedStringElement(1, c.c);
            this._b6(d, c.d);
            b = d;
        }
        else {
            b = new StringElement(c.c);
        }
        this._b4(c.b);
        return {
            ret: true,
            p1: b
        };
    };
    BiffRecordStream.prototype._readFormattedStringBlock = function (a, b) {
        var _this = this;
        if (a == 0) {
            return null;
        }
        var c = new Array(0);
        var d = 0;
        var e = this._by(c, d);
        c = e.p0;
        d = e.p1;
        var f = 0;
        return Async.f(0, a, 1, function (g) {
            b.add(((function () { var h = _this.readFormattedStringFromBuffer(1, c, d); c = h.p1; d = h.p2; return h.ret; })()));
            f++;
            if (1000 < f) {
                f = 0;
                return false;
            }
            return true;
        });
    };
    BiffRecordStream.prototype.readFormattedStringFromBuffer = function (a, b, c) {
        var _this = this;
        var d = a == 0 ? ((function () { var e = _this.readByteFromBuffer(b, c); b = e.p0; c = e.p1; return e.ret; })()) : ((function () { var e = _this._readUInt16FromBuffer(b, c); b = e.p0; c = e.p1; return e.ret; })());
        return {
            ret: ((function () { var e = _this._readFormattedStringFromBuffer1(d, b, c); b = e.p1; c = e.p2; return e.ret; })()),
            p1: b,
            p2: c
        };
    };
    BiffRecordStream.prototype._readFormattedStringFromBuffer1 = function (a, b, c) {
        var _this = this;
        var d = ((function () { var e = _this._y(a, b, c); b = e.p1; c = e.p2; return e.ret; })());
        var e;
        if (d.a) {
            var f = new FormattedStringElement(1, d.c);
            var g = this._readFormattingRunsFromBuffer(f, d.d, b, c);
            b = g.p2;
            c = g.p3;
            e = f;
        }
        else {
            e = new StringElement(d.c);
        }
        var h = this._b5(b, c, d.b);
        b = h.p0;
        c = h.p1;
        return {
            ret: e,
            p1: b,
            p2: c
        };
    };
    BiffRecordStream.prototype._readFormulaCellAddressFromBuffer = function (a, b) {
        var _this = this;
        var c = ((function () { var d = _this._readUInt16FromBuffer(a, b); a = d.p0; b = d.p1; return d.ret; })());
        var d = ((function () { var e = _this._readUInt16FromBuffer(a, b); a = e.p0; b = e.p1; return e.ret; })());
        return {
            ret: BiffRecordStream._t(c, d),
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._readFormulaCellAddressRangeFromBuffer = function (a, b) {
        var _this = this;
        var c = ((function () { var d = _this._readUInt16FromBuffer(a, b); a = d.p0; b = d.p1; return d.ret; })());
        var d = ((function () { var e = _this._readUInt16FromBuffer(a, b); a = e.p0; b = e.p1; return e.ret; })());
        var e = ((function () { var f = _this._readUInt16FromBuffer(a, b); a = f.p0; b = f.p1; return f.ret; })());
        var f = ((function () { var g = _this._readUInt16FromBuffer(a, b); a = g.p0; b = g.p1; return g.ret; })());
        var g = BiffRecordStream._t(c, e);
        var h = BiffRecordStream._t(d, f);
        return {
            ret: new CellAddressRange(1, g, h),
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._ao = function (a, b) {
        var _this = this;
        var c = ((function () { var d = _this._readUInt16FromBuffer(a, b); a = d.p0; b = d.p1; return d.ret; })());
        var d = new List$1(CellAddressRange.$, 2, c);
        for (var e = 0; e < c; e++) {
            d.add(((function () { var f = _this._readFormulaCellAddressRangeFromBuffer(a, b); a = f.p0; b = f.p1; return f.ret; })()));
        }
        return {
            ret: d,
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._readInt16 = function () {
        if (this.read(this._o, 0, 2) != 2) {
            throw new EndOfStreamException(null, null);
        }
        return BitConverter.p(this._o, 0);
    };
    BiffRecordStream.prototype._readInt32 = function () {
        if (this.read(this._o, 0, 4) != 4) {
            throw new EndOfStreamException(null, null);
        }
        return BitConverter.q(this._o, 0);
    };
    BiffRecordStream.prototype._readInt16FromBuffer = function (a, b) {
        if (b + 2 > a.length) {
            var c = this._by(a, b);
            a = c.p0;
            b = c.p1;
        }
        var d = BitConverter.p(a, b);
        b += 2;
        return {
            ret: d,
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._readInt32FromBuffer = function (a, b) {
        if (b + 4 > a.length) {
            var c = this._by(a, b);
            a = c.p0;
            b = c.p1;
        }
        var d = BitConverter.q(a, b);
        b += 4;
        return {
            ret: d,
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._readNextBlockType = function () {
        if (this._bm.position >= this._bm.length - 1) {
            return toNullable(Number_$type, null);
        }
        var a = this._bm.position;
        var b = this._bb(this._bl);
        this._bm.position = a;
        return toNullable(Number_$type, b);
    };
    BiffRecordStream.prototype._readNullTerminatedUnicodeString = function () {
        var a = new List$1(Number_$type, 0);
        while (true) {
            var b = this.readByte();
            var c = this.readByte();
            if (b <= 0 && c <= 0) {
                break;
            }
            a.add(b);
            a.add(c);
        }
        return Encoding.unicode.getString(a.toArray());
    };
    BiffRecordStream.prototype._writeNullTerminatedUnicodeString = function (a) {
        this._write2(Encoding.unicode.getBytes1(a));
        this.writeByte(0);
        this.writeByte(0);
    };
    BiffRecordStream.prototype._readRect = function () {
        var a = this._readInt32();
        var b = this._readInt32();
        var c = this._readInt32();
        var d = this._readInt32();
        return new Rect(0, a, b, c - a, d - b);
    };
    BiffRecordStream.prototype._readUInt16 = function () {
        if (this.read(this._o, 0, 2) != 2) {
            throw new EndOfStreamException(null, null);
        }
        return BitConverter.w(this._o, 0);
    };
    BiffRecordStream.prototype._readUInt16FromBuffer = function (a, b) {
        if (b + 2 > a.length) {
            var c = this._by(a, b);
            a = c.p0;
            b = c.p1;
        }
        var d = BitConverter.w(a, b);
        b += 2;
        return {
            ret: d,
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._readUInt32 = function () {
        if (this.read(this._o, 0, 4) != 4) {
            throw new EndOfStreamException(null, null);
        }
        return BitConverter.x(this._o, 0);
    };
    BiffRecordStream.prototype._readUInt32FromBuffer = function (a, b) {
        if (b + 4 > a.length) {
            var c = this._by(a, b);
            a = c.p0;
            b = c.p1;
        }
        var d = BitConverter.x(a, b);
        b += 4;
        return {
            ret: d,
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._syncWorkbookStreamPosition = function () {
        if (this._bi == this._bm.position) {
            return;
        }
        this._b9();
    };
    BiffRecordStream.prototype._write9 = function (a) {
        var b = new Array(1);
        b[0] = a;
        this._write2(b);
    };
    BiffRecordStream.prototype._write2 = function (a) {
        if (a == null) {
            return;
        }
        this.write(a, 0, a.length);
    };
    BiffRecordStream.prototype._write10 = function (a) {
        this._write2(BitConverter.c(a));
    };
    BiffRecordStream.prototype._write12 = function (a) {
        this._write2(BitConverter.e(a));
    };
    BiffRecordStream.prototype._write11 = function (a) {
        this._write2(BitConverter.d(a));
    };
    BiffRecordStream.prototype._write17 = function (a) {
        this._write2(BitConverter.h(a));
    };
    BiffRecordStream.prototype._write18 = function (a) {
        this._write2(BitConverter.i(a));
    };
    BiffRecordStream.prototype._write19 = function (a) {
        this._write2(BitConverter.j(a));
    };
    BiffRecordStream.prototype._write14 = function (a) {
        this._write5(new StringElement(a));
    };
    BiffRecordStream.prototype._write15 = function (a, b) {
        this._write6(new StringElement(a), b);
    };
    BiffRecordStream.prototype._write16 = function (a, b, c) {
        this._write7(new StringElement(a), b, c);
    };
    BiffRecordStream.prototype._write3 = function (a) {
        var b;
        var c;
        var d = BiffRecordStream._b0(a, b, c);
        b = d.p1;
        c = d.p2;
        this._write17(b);
        this._write17(c);
    };
    BiffRecordStream.prototype._write4 = function (a) {
        var b;
        var c;
        var d;
        var e;
        var f = BiffRecordStream._b0(a.d, b, d);
        b = f.p1;
        d = f.p2;
        var g = BiffRecordStream._b0(a.b, c, e);
        c = g.p1;
        e = g.p2;
        this._write17(b);
        this._write17(c);
        this._write17(d);
        this._write17(e);
    };
    BiffRecordStream.prototype._write1 = function (a, b) {
        if (b === void 0) {
            b = true;
        }
        var c = this.position;
        this._write17(0);
        var d;
        for (d = 0; d < a.count; d++) {
            if (b == false && this._bytesAvailableInCurrentBlock < 8) {
                break;
            }
            this._write4(a._inner[d]);
        }
        var e = this.position;
        this.position = c;
        this._write17(d);
        this.position = e;
        return d;
    };
    BiffRecordStream.prototype._write5 = function (a) {
        this._write8(a, true);
    };
    BiffRecordStream.prototype._write8 = function (a, b) {
        this._cy(a, 0, true, false, 0, true, b);
    };
    BiffRecordStream.prototype._write6 = function (a, b) {
        this._write7(a, b, true);
    };
    BiffRecordStream.prototype._write7 = function (a, b, c) {
        if (b != 0 && b != 1) {
            return;
        }
        this._cy(a, 0, true, true, b, c, true);
    };
    BiffRecordStream.prototype._write13 = function (a) {
        var b = a.length;
        var c = this._am._inner[0];
        if (this._ai || a.length > c.d) {
            this.write(a.getBuffer(), 0, b);
            return;
        }
        var d = this._getStartOfRecord();
        if (this._bi != d || this._bi != this._bm.position) {
            this._bi = d;
            this._bm.position = d;
        }
        var e = new Array(4 + b);
        Buffer.c(BitConverter.d(this._au), 0, e, 0, 2);
        Buffer.c(BitConverter.d(b), 0, e, 2, 2);
        Buffer.c(a.getBuffer(), 0, e, 4, b);
        this._q.l(this._bm.position + 4, e, 4, b);
        this._bm.write(e, 0, e.length);
        this._ai = true;
        this._bi += e.length;
        this._a4 = this._a7 = this._a8 = c.b = b;
    };
    BiffRecordStream.prototype._writeEMURect = function (a) {
        this._write12(truncate(a.left));
        this._write12(truncate(a.top));
        this._write12(truncate(a.right));
        this._write12(truncate(a.bottom));
    };
    BiffRecordStream.prototype._bw = function () {
        var a = this._a3();
        while (true) {
            if (this._af(a) == false) {
                break;
            }
            this._bm.position += this._am._inner[this._am.count - 1].b;
        }
    };
    BiffRecordStream.prototype._af = function (a) {
        if (this._bm.position >= this._bm.length - 1) {
            return false;
        }
        var b = this._bm.position;
        var c = this._bb(this._bl);
        if (this._ak(a, c) == false) {
            this._bm.position = b;
            return false;
        }
        var d = this._ba(this._bl);
        var e = this._ay(c);
        d -= e;
        this._bn.position += e;
        this._a4 += d;
        this._am.add(this._aa(this._bm.position, d));
        return true;
    };
    BiffRecordStream.prototype._ay = function (a) {
        switch (a) {
            case 2165: return 12;
            default: return 0;
        }
    };
    BiffRecordStream.prototype._aa = function (a, b) {
        return new BiffRecordStream_RecordBlockInfo(a, b, this._a2());
    };
    BiffRecordStream.prototype._b3 = function (a, b, c) {
        var e_1, _a;
        a._bi = -1;
        a._a4 = this._a4;
        a._a7 = this._a7;
        a._am = new List$1(BiffRecordStream_RecordBlockInfo.$, 0);
        var d = c - this._am._inner[0].g;
        try {
            for (var _c = __values(fromEnum(this._am)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var e = _d.value;
                a._am.add(new BiffRecordStream_RecordBlockInfo(e.g + d, e.b, e.d));
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        a._aw = this._aw;
        a._a8 = this._a8;
        a._au = this._au;
        a._aj = this._aj;
        a._loadManager = this._loadManager;
        a._bm = b;
        a._w = this._w;
        a.saveManager = this.saveManager;
        if (this._ap != null) {
            a._ap = new List$1(IBiffRecordStream_$type, 1, this._ap);
        }
        a._at = this._at;
        a._ai = this._ai;
    };
    BiffRecordStream.prototype._z = function (a) {
        if (this.position == this.length) {
            return null;
        }
        var b = this.readByte();
        var c = (b & 1) == 0;
        var d = (b & 4) == 4;
        var e = (b & 8) == 8;
        if (e && this.position + 1 >= this.length) {
            return null;
        }
        var f = e ? this._readUInt16() : 0;
        var g = 0;
        if (d) {
            if (this.position + 3 >= this.length) {
                return null;
            }
            g = this._readInt32();
        }
        var h = c ? Workbook._g1 : Encoding.unicode;
        var i = a;
        if (c == false) {
            i *= 2;
        }
        var j = new Array(i);
        var k = this._bc(j, 0, i);
        var l = h.getString1(j, 0, k);
        if (l.length != a && this._bytesAvailableInCurrentBlock == 0) {
            var m = this._z(a - l.length);
            if (m == null) {
                return null;
            }
            l += m.c;
        }
        var n = new BiffRecordStream_FormattedStringInfo();
        n.b = g;
        n.a = e;
        n.d = f;
        n.c = l;
        return n;
    };
    BiffRecordStream.prototype._ak = function (a, b) {
        return a == b;
    };
    BiffRecordStream.prototype._bh = function (a, b, c) {
        this._syncWorkbookStreamPosition();
        var d = this._am._inner[this._aw];
        if (this._a8 == d.d) {
            this._b2();
            d = this._am._inner[this._aw];
            this._a8 = 0;
            this._bm.position = d.g;
            this._bi = this._bm.position;
            this._ct(this._au);
        }
        var e = Math.min(c, d.d - this._a8);
        this._q.l(this._bm.position, a, b, e);
        this._bm.write(a, b, e);
        var f = (this._bm.position - this._bi);
        if (f > 0) {
            this._ah = true;
        }
        this._a8 += f;
        this._a7 += f;
        this._bi += f;
        return f;
    };
    BiffRecordStream.prototype._ct = function (a) {
    };
    BiffRecordStream.prototype._bv = function (a, b, c) {
        if (b + c > a.length) {
            var d = this._by(a, b);
            a = d.p0;
            b = d.p1;
        }
        b += c;
        return {
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._bx = function () {
        this._cz(this._a3());
        this._bi += 4;
        this._b2();
        this._a8 = 0;
    };
    BiffRecordStream.prototype._by = function (a, b) {
        var c = 0;
        if (b < a.length) {
            c = a.length - b;
        }
        var d = this._am._inner[this._aw];
        var e = d.b;
        var f;
        if (this._a8 == e) {
            f = this._am._inner[this._aw + 1].b;
        }
        else {
            f = e - this._a8;
        }
        var g = new Array(c + f);
        if (c != 0) {
            Buffer.c(a, b, g, 0, c);
        }
        this._bc(g, c, f);
        b = 0;
        a = g;
        return {
            p0: a,
            p1: b
        };
    };
    BiffRecordStream._t = function (a, b) {
        var c = (b & 16384) == 16384;
        var d = (b & 32768) == 32768;
        var e = (b & 255);
        return new CellAddress(1, a, d, e, c);
    };
    BiffRecordStream._b0 = function (a, b, c) {
        c = a.r;
        if (a.g) {
            c |= 16384;
        }
        if (a.p) {
            c |= 32768;
        }
        b = a.t;
        return {
            p1: b,
            p2: c
        };
    };
    BiffRecordStream.prototype._b1 = function () {
        if (this._ah) {
            var a = this._bm.position;
            var b = this._am._inner[this._aw];
            this._bm.position = b.g - this._ax();
            this._cu(this._bm, b.b, false);
            this._bm.position = a;
            this._ah = false;
        }
        else if (this._ai == false) {
            this._cx(0);
        }
    };
    BiffRecordStream.prototype._a3 = function () {
        var a = this._nextBlockTypeInternal;
        if (a == this._a1()) {
            return this._a0();
        }
        this._nextBlockTypeInternal = this._a1();
        return a;
    };
    BiffRecordStream.prototype._b2 = function () {
        this._b1();
        this._b8(this._aw + 1);
    };
    BiffRecordStream.prototype._b4 = function (a) {
        this.seek(a, 1);
    };
    BiffRecordStream.prototype._b5 = function (a, b, c) {
        var d = this._bv(a, b, c);
        a = d.p0;
        b = d.p1;
        return {
            p0: a,
            p1: b
        };
    };
    BiffRecordStream.prototype._y = function (a, b, c) {
        var _this = this;
        var d = ((function () { var e = _this.readByteFromBuffer(b, c); b = e.p0; c = e.p1; return e.ret; })());
        var e = (d & 1) == 0;
        var f = (d & 4) == 4;
        var g = (d & 8) == 8;
        var h = g ? ((function () { var i = _this._readUInt16FromBuffer(b, c); b = i.p0; c = i.p1; return i.ret; })()) : 0;
        var i = 0;
        if (f) {
            i = ((function () { var j = _this._readInt32FromBuffer(b, c); b = j.p0; c = j.p1; return j.ret; })());
        }
        var j = e ? Workbook._g1 : Encoding.unicode;
        var k = a;
        if (e == false) {
            k *= 2;
        }
        var l = Math.min(k, b.length - c);
        var m = j.getString1(b, c, l);
        c += l;
        if (m.length != a && c >= b.length) {
            var n = this._by(b, c);
            b = n.p0;
            c = n.p1;
            var o = ((function () { var p = _this._y(a - m.length, b, c); b = p.p1; c = p.p2; return p.ret; })());
            m += o.c;
        }
        var p = new BiffRecordStream_FormattedStringInfo();
        p.b = i;
        p.a = g;
        p.d = h;
        p.c = m;
        return {
            ret: p,
            p1: b,
            p2: c
        };
    };
    BiffRecordStream.prototype._b6 = function (a, b) {
        var c = this._loadManager._b;
        for (var d = 0; d < b; d++) {
            var e = this._readUInt16();
            var f = this._readUInt16();
            var g = new FormattedStringRun(a, e);
            g.f(c).setFontFormatting(this._loadManager._h._inner[f]);
            a._ah.add(g);
        }
    };
    BiffRecordStream.prototype._readFormattingRunsFromBuffer = function (a, b, c, d) {
        var _this = this;
        var e = this._loadManager;
        var f = e._b;
        for (var g = 0; g < b; g++) {
            var h = ((function () { var i = _this._readUInt16FromBuffer(c, d); c = i.p0; d = i.p1; return i.ret; })());
            var i = ((function () { var j = _this._readUInt16FromBuffer(c, d); c = j.p0; d = j.p1; return j.ret; })());
            if (h < a._w) {
                var j = new FormattedStringRun(a, h);
                j.d(f).setFontFormatting(e._h._inner[i]);
                a._ah.add(j);
            }
        }
        return {
            p2: c,
            p3: d
        };
    };
    BiffRecordStream.prototype._bc = function (a, b, c) {
        if (c == 0) {
            return 0;
        }
        this._syncWorkbookStreamPosition();
        var d = this._am._inner[this._aw];
        var e = d.b;
        if (this._a8 == e) {
            if (this._aw == this._am.count - 1) {
                return 0;
            }
            else {
                this._b2();
                d = this._am._inner[this._aw];
                this._a8 = 0;
                this._bm.position = d.g;
                this._bi = this._bm.position;
                e = d.b;
            }
        }
        var f = Math.min(c, e - this._a8);
        var g = this._bm.read(a, b, f);
        this._q.l(this._bi, a, b, g);
        this._a8 += g;
        this._a7 += g;
        this._bi += g;
        return f;
    };
    BiffRecordStream.prototype._b8 = function (a) {
        this._aw = a;
        if (this._aw < this._am.count) {
            this._q.j(this._am._inner[this._aw].b);
        }
    };
    BiffRecordStream.prototype._b9 = function () {
        this._b1();
        this._b8(0);
        var a = 0;
        while (true) {
            if (this._aw == this._am.count) {
                this._bi = -1;
                return;
            }
            var b = this._am._inner[this._aw];
            var c = b.b;
            var d = b.g;
            this._a8 = (this._a7 - a);
            if (this._a8 <= c) {
                d += this._a8;
                this._bi = d;
                this._bm.position = this._bi;
                return;
            }
            a += c;
            this._b2();
        }
    };
    BiffRecordStream.prototype._cx = function (a) {
        var b = this._getStartOfRecord();
        if (this._bi != b || this._bi != this._bm.position) {
            this._bm.position = b;
            this._bi = b;
        }
        this._cv(this._bm, this._au);
        this._cu(this._bm, a, false);
        this._ai = true;
        this._bi = this._bm.position;
    };
    BiffRecordStream.prototype._cy = function (a, b, c, d, e, f, g) {
        var h = typeCast(FormattedStringElement.$, a);
        var i = 0;
        var j = 0;
        if (h != null) {
            i = h._ah.count;
            if (i != 0) {
                var k = h._ah._inner[0];
                if (k.i == 0) {
                    var l = k.f(this.saveManager._b);
                    if (l._r.getValueOrDefault() == 0) {
                        j++;
                        i--;
                    }
                }
            }
        }
        var m = 0;
        var n = false;
        if (c) {
            if (d) {
                if (e == 0) {
                    m += 1;
                }
                else {
                    m += 2;
                }
            }
            if (g) {
                n = i != 0;
            }
        }
        m++;
        if (n) {
            m += 2;
        }
        var o = m;
        if (b < a._y.length) {
            if (f == false || ExcelUtils.be(a._y.substr(b, 1))) {
                o += 2;
            }
            else {
                o += 1;
            }
        }
        if (this._bytesAvailableInCurrentBlock < o) {
            this._syncWorkbookStreamPosition();
            this._b1();
            this._bx();
        }
        var p = this._bytesAvailableInCurrentBlock - m;
        if (c) {
            if (d) {
                if (e == 0) {
                    this._write9(a._y.length);
                }
                else {
                    this._write17(a._y.length);
                }
            }
        }
        var q = a._y.length - b;
        var r;
        var s;
        if (f) {
            r = a._y.substr(b, Math.min(q, p));
            s = true;
            if (ExcelUtils.be(r)) {
                r = a._y.substr(b, Math.min(q, intDivide(p, 2)));
                s = false;
            }
        }
        else {
            r = a._y.substr(b, Math.min(q, intDivide(p, 2)));
            s = false;
        }
        var t = 0;
        {
            if (s == false) {
                t |= 1;
            }
            if (n) {
                t |= 8;
            }
        }
        this._write9(t);
        if (n) {
            this._write17(i);
        }
        var u = s ? Workbook._g1 : Encoding.unicode;
        this._write2(u.getBytes1(r));
        var v = b + r.length;
        if (v < a._y.length) {
            this._cy(a, v, false, false, e, f, g);
        }
        if (n) {
            for (var w = j; w < h._ah.count; w++) {
                var x = h._ah._inner[w];
                if (this._bytesAvailableInCurrentBlock < 4) {
                    this._b1();
                    this._bx();
                }
                this._write17(x.i);
                var y = 0;
                if (x.h) {
                    var z = x.f(this.saveManager._b)._r;
                    y = z.getValueOrDefault();
                }
                this._write17(y);
            }
        }
    };
    BiffRecordStream.prototype._cz = function (a) {
        this._cv(this._bm, a);
        this._cu(this._bm, 0, false);
        this._am.add(this._aa(this._bm.position, 0));
    };
    Object.defineProperty(BiffRecordStream.prototype, "_an", {
        get: function () {
            return this._am;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "_bytesAvailableInCurrentBlock", {
        get: function () {
            this._syncWorkbookStreamPosition();
            return this._am._inner[this._aw].d - this._a8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "endUnderlyingStreamPosition", {
        get: function () {
            var e_2, _a;
            var a = this._am._inner[this._am.count - 1].e;
            if (this._ap != null) {
                try {
                    for (var _c = __values(fromEnum(this._ap)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var b = _d.value;
                        a = Math.max(a, b.endUnderlyingStreamPosition);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return))
                            _a.call(_c);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
            }
            return a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "_loadManager", {
        get: function () {
            return this._loadManager_1;
        },
        set: function (a) {
            this._loadManager_1 = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "_nextBlockTypeInternal", {
        get: function () {
            return this._at;
        },
        set: function (a) {
            this._at = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "_bn", {
        get: function () {
            return this._bm;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "_positionInCurrentBlock", {
        get: function () {
            return this._a8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "_bf", {
        get: function () {
            return this._au;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "saveManager", {
        get: function () {
            return this._saveManager;
        },
        set: function (a) {
            this._saveManager = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BiffRecordStream.prototype, "_transform", {
        get: function () {
            return this._q;
        },
        enumerable: false,
        configurable: true
    });
    BiffRecordStream.$t = markType(BiffRecordStream, 'BiffRecordStream', Stream.$, [IBiffRecordStream_$type]);
    return BiffRecordStream;
}(Stream));
export { BiffRecordStream };
