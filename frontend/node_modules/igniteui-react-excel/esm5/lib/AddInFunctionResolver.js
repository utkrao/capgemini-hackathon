/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { FormulaTokenEvaluator$1 } from "./FormulaTokenEvaluator$1";
import { FormulaToken } from "./FormulaToken";
import { NameToken } from "./NameToken";
import { Function } from "./Function";
import { typeCast, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var AddInFunctionResolver = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AddInFunctionResolver, _super);
    function AddInFunctionResolver() {
        return _super.call(this, FormulaToken.$) || this;
    }
    AddInFunctionResolver.prototype.a5 = function (a, b, c) {
        return a;
    };
    AddInFunctionResolver.prototype.a6 = function (a, b, c) {
        if (a.$function == Function._q) {
            var d = typeCast(NameToken.$, b);
            if (d != null && d.w != null) {
                a.$function = Function._g0(d.w);
                var e = d.u;
                if (e._g == 0) {
                    d.u = this.c.f._a9.c(e.name, e.scope, true);
                }
            }
        }
        return a.formulaToken;
    };
    AddInFunctionResolver.prototype.a7 = function (a) {
        return a;
    };
    AddInFunctionResolver.prototype.a8 = function (a, b) {
        return a;
    };
    AddInFunctionResolver.prototype.a9 = function (a, b) {
        return a;
    };
    AddInFunctionResolver.bi = function (a) {
        if (AddInFunctionResolver.bh == null) {
            AddInFunctionResolver.bh = new AddInFunctionResolver();
        }
        AddInFunctionResolver.bh.c = a;
        return AddInFunctionResolver.bh;
    };
    AddInFunctionResolver.$t = markType(AddInFunctionResolver, 'AddInFunctionResolver', FormulaTokenEvaluator$1.$.specialize(FormulaToken.$));
    AddInFunctionResolver.bh = null;
    return AddInFunctionResolver;
}(FormulaTokenEvaluator$1));
export { AddInFunctionResolver };
