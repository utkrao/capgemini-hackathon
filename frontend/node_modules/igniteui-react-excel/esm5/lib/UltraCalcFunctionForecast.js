/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { UltraCalcFunctionTwoMatrixFunction } from "./UltraCalcFunctionTwoMatrixFunction";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionForecast = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionForecast, _super);
    function UltraCalcFunctionForecast() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionForecast.prototype.evaluate = function (a, b) {
        var c;
        var d;
        var e;
        var f = UltraCalcFunctionTwoMatrixFunction._ao(a, c, d, e);
        c = f.p1;
        d = f.p2;
        e = f.p3;
        var g = a.pop();
        if (g.isError) {
            return g;
        }
        var h = g._toDouble3();
        if (c != null) {
            return new ExcelCalcValue(c);
        }
        var i;
        var j;
        var k;
        var l;
        var m = UltraCalcFunctionTwoMatrixFunction._ap(d, e, i, j, k, l, c);
        i = m.p2;
        j = m.p3;
        k = m.p4;
        l = m.p5;
        c = m.p6;
        if (c != null) {
            return new ExcelCalcValue(c);
        }
        return new ExcelCalcValue(l + (k * h));
    };
    UltraCalcFunctionForecast.prototype.get_name = function () {
        return "forecast";
    };
    Object.defineProperty(UltraCalcFunctionForecast.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionForecast.prototype.get_minArgs = function () {
        return 3;
    };
    UltraCalcFunctionForecast.prototype.get_maxArgs = function () {
        return 3;
    };
    UltraCalcFunctionForecast.prototype.doesParameterAllowIntermediateResultArray = function (a, b) {
        return true;
    };
    UltraCalcFunctionForecast.$t = markType(UltraCalcFunctionForecast, 'UltraCalcFunctionForecast', UltraCalcFunctionTwoMatrixFunction.$);
    return UltraCalcFunctionForecast;
}(UltraCalcFunctionTwoMatrixFunction));
export { UltraCalcFunctionForecast };
