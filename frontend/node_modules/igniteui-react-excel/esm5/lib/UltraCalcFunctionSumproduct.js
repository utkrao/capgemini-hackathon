/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { MatrixUtilities } from "./MatrixUtilities";
import { markType } from "igniteui-react-core";
import { arrayGetLength } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionSumproduct = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionSumproduct, _super);
    function UltraCalcFunctionSumproduct() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionSumproduct.prototype.evaluate = function (a, b) {
        var c = new Array(b);
        var d = 0;
        var e = 0;
        var f = 0;
        try {
            var _loop_1 = function () {
                var g = a.pop();
                if (g.isError) {
                    return { value: g };
                }
                var h;
                var i = ((function () { var j = MatrixUtilities.b(g.toArrayProxy(), 1, h); h = j.p2; return j.ret; })());
                if (h != null) {
                    return { value: new ExcelCalcValue(h) };
                }
                if (f == 0) {
                    d = arrayGetLength(i, 0);
                    e = arrayGetLength(i, 1);
                }
                else {
                    if (d != arrayGetLength(i, 0) || e != arrayGetLength(i, 1)) {
                        return { value: new ExcelCalcValue(new ExcelCalcErrorValue(1)) };
                    }
                }
                c[f] = i;
            };
            for (; f < b; f++) {
                var state_1 = _loop_1();
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        finally {
            for (f++; f < b; f++) {
                a.pop();
            }
        }
        var j = 0;
        for (var k = 0; k < d; k++) {
            for (var l = 0; l < e; l++) {
                var m = 1;
                for (var n = 0; n < b; n++) {
                    m *= c[n][k][l];
                }
                j += m;
            }
        }
        return new ExcelCalcValue(j);
    };
    UltraCalcFunctionSumproduct.prototype.get_name = function () {
        return "sumproduct";
    };
    Object.defineProperty(UltraCalcFunctionSumproduct.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSumproduct.prototype.get_minArgs = function () {
        return 1;
    };
    Object.defineProperty(UltraCalcFunctionSumproduct.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSumproduct.prototype.get_maxArgs = function () {
        return 0x7FFFFFFF;
    };
    Object.defineProperty(UltraCalcFunctionSumproduct.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionSumproduct.prototype.doesParameterAllowIntermediateResultArray = function (a, b) {
        return true;
    };
    UltraCalcFunctionSumproduct.$t = markType(UltraCalcFunctionSumproduct, 'UltraCalcFunctionSumproduct', BuiltInFunctionBase.$);
    return UltraCalcFunctionSumproduct;
}(BuiltInFunctionBase));
export { UltraCalcFunctionSumproduct };
