/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcNumberStack } from "./ExcelCalcNumberStack";
import { UltraCalcConditionalFunctionBase_CriteriaEvaluator } from "./UltraCalcConditionalFunctionBase_CriteriaEvaluator";
import { ArrayProxy } from "./ArrayProxy";
import { CellCalcReference } from "./CellCalcReference";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { Base, typeCast, runOn, markType } from "igniteui-react-core";
import { ErrorValue } from "./ErrorValue";
import { List$1 } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { Tuple } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcConditionalFunctionBase = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcConditionalFunctionBase, _super);
    function UltraCalcConditionalFunctionBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcConditionalFunctionBase.prototype.doesParameterAllowIntermediateResultArray = function (a, b) {
        if (a == 1) {
            return (b == false);
        }
        return false;
    };
    UltraCalcConditionalFunctionBase.prototype.evaluate = function (a, b) {
        var c = null;
        if (this._an && b == 3) {
            c = a.pop();
        }
        var d = a.pop();
        var e = a.pop();
        if (e.isError) {
            return e;
        }
        if (d.isError) {
            return d;
        }
        if (c != null && c.isError) {
            return c;
        }
        if (e.isArrayGroup || (e.isReference == false && !e.isArray)) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(1));
        }
        var f = new UltraCalcConditionalFunctionBase_CriteriaEvaluator(a, d._getResolvedValue());
        if (c != null && (c.isArrayGroup || (c.isReference == false && !c.isArray))) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(1));
        }
        var g = e.toArrayProxy();
        var h = null;
        if (c != null) {
            h = typeCast(CellCalcReference.$, c._d(false).item(0, 0).value);
            if (h == null) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
        }
        var i = new UltraCalcConditionalFunctionBase_EvaluateHelper(this, f, g);
        if (h == null) {
            g._n(false, runOn(i, i.h));
        }
        else {
            var j = h._ao;
            var k = h._w.index;
            var l = h._u;
            var m = l._columns$i.maxCount - 1;
            var n = Math.min(m, j + g.getLength(0) - 1);
            var o = l._rows$i.maxCount - 1;
            var p = Math.min(o, k + g.getLength(1) - 1);
            var q = l._cx(k, j, p, n);
            var r = new ExcelCalcValue(q._c);
            r._n = c._n;
            r._y = true;
            var s = r._d(false);
            s._n(false, runOn(i, i.h));
        }
        return this._al(i.e, i.g);
    };
    UltraCalcConditionalFunctionBase.prototype.get_minArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcConditionalFunctionBase.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcConditionalFunctionBase.prototype.get_maxArgs = function () {
        if (this._an) {
            return 3;
        }
        return 2;
    };
    Object.defineProperty(UltraCalcConditionalFunctionBase.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcConditionalFunctionBase.prototype._v = function (a) {
        if (a == 2) {
            return false;
        }
        return true;
    };
    UltraCalcConditionalFunctionBase.prototype.get__am = function () {
        return true;
    };
    Object.defineProperty(UltraCalcConditionalFunctionBase.prototype, "_am", {
        get: function () {
            return this.get__am();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcConditionalFunctionBase.prototype.get__an = function () {
        return true;
    };
    Object.defineProperty(UltraCalcConditionalFunctionBase.prototype, "_an", {
        get: function () {
            return this.get__an();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcConditionalFunctionBase._ak = function (a, b, c, d, e) {
        if (e === void 0) {
            e = null;
        }
        if (e == null && b % 2 == 1) {
            return new ExcelCalcValue(ErrorValue.argumentOrFunctionNotAvailable);
        }
        else if (e != null && b % 2 == 0) {
            return new ExcelCalcValue(ErrorValue.argumentOrFunctionNotAvailable);
        }
        var f = 0;
        var g = 0;
        var h = new List$1(Tuple$2.$.specialize(UltraCalcConditionalFunctionBase_CriteriaEvaluator.$, ArrayProxy.$), 0);
        while (b > 1) {
            var i = a.pop();
            var j = a.pop();
            if (j.isArrayGroup || j.isReference == false) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            var k = j.toArrayProxy();
            var l = new UltraCalcConditionalFunctionBase_CriteriaEvaluator(a, i._getResolvedValue());
            if (h.count == 0) {
                f = k.getLength(0);
                g = k.getLength(1);
            }
            else if (f != k.getLength(0) || g != k.getLength(1)) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            h.add(Tuple.a(UltraCalcConditionalFunctionBase_CriteriaEvaluator.$, ArrayProxy.$, l, k));
            b -= 2;
        }
        h.w();
        var m = null;
        if (e != null) {
            var n = a.pop();
            if (n.isArrayGroup || n.isReference == false) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
            m = n.toArrayProxy();
            if (f != m.getLength(0) || g != m.getLength(1)) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(1));
            }
        }
        var o = a._w;
        var p = 0;
        var q = c;
        var r = null;
        var s = function (t, u) {
            if (r == null) {
                var v = true;
                for (var w = 0; w < h.count; w++) {
                    var x = h._inner[w];
                    var y = w == 0 ? t : x.d._c(u);
                    if (!h._inner[w].c.d(y)) {
                        v = false;
                        break;
                    }
                    if (w > 0 && x.d._h) {
                        ExcelCalcNumberStack._ad(y);
                    }
                }
                if (v) {
                    if (e == null) {
                        p++;
                    }
                    else {
                        var z_1 = m._c(u);
                        if (z_1.isError) {
                            r = z_1.toErrorValue();
                        }
                        else if (z_1.isBoolean || z_1.isString || z_1.isNull) {
                        }
                        else {
                            var aa_1 = z_1._getResolvedValue3(false);
                            var ab_1;
                            var ac_1;
                            if (((function () { var ad = z_1._ao(aa_1, ac_1, o, ab_1); ac_1 = ad.p1; ab_1 = ad.p3; return ad.ret; })())) {
                                p++;
                                q = e(q, ac_1);
                            }
                        }
                        if (m._h) {
                            ExcelCalcNumberStack._ad(z_1);
                        }
                    }
                }
            }
        };
        h._inner[0].d._n(false, s);
        if (r != null) {
            return new ExcelCalcValue(r);
        }
        return d(q, p);
    };
    UltraCalcConditionalFunctionBase.$t = markType(UltraCalcConditionalFunctionBase, 'UltraCalcConditionalFunctionBase', BuiltInFunctionBase.$);
    return UltraCalcConditionalFunctionBase;
}(BuiltInFunctionBase));
export { UltraCalcConditionalFunctionBase };
/**
 * @hidden
 */
var UltraCalcConditionalFunctionBase_EvaluateHelper = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcConditionalFunctionBase_EvaluateHelper, _super);
    function UltraCalcConditionalFunctionBase_EvaluateHelper(a, b, c) {
        var _this = _super.call(this) || this;
        _this.c = null;
        _this.b = null;
        _this.a = null;
        _this.d = 0;
        _this.f = 0;
        _this.b = a;
        _this.c = b;
        _this.a = c;
        return _this;
    }
    UltraCalcConditionalFunctionBase_EvaluateHelper.prototype.h = function (a, b) {
        var c = this.a._c(b);
        if (this.c.d(c)) {
            this.f++;
            if (this.b._am) {
                var d_1;
                if (((function () { var e = a._toDouble1(d_1); d_1 = e.p0; return e.ret; })())) {
                    this.d += d_1;
                }
            }
        }
        if (this.a._h) {
            ExcelCalcNumberStack._ad(c);
        }
    };
    Object.defineProperty(UltraCalcConditionalFunctionBase_EvaluateHelper.prototype, "e", {
        get: function () {
            return this.d;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UltraCalcConditionalFunctionBase_EvaluateHelper.prototype, "g", {
        get: function () {
            return this.f;
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcConditionalFunctionBase_EvaluateHelper.$t = markType(UltraCalcConditionalFunctionBase_EvaluateHelper, 'UltraCalcConditionalFunctionBase_EvaluateHelper');
    return UltraCalcConditionalFunctionBase_EvaluateHelper;
}(Base));
export { UltraCalcConditionalFunctionBase_EvaluateHelper };
