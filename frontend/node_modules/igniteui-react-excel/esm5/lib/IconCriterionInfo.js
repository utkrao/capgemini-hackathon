/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, Base, typeCast, enumGetBox, markStruct } from "igniteui-react-core";
import { FormatConditionIcon_$type } from "./FormatConditionIcon";
import { FormatConditionIconSet_$type } from "./FormatConditionIconSet";
import { stringFormat } from "igniteui-react-core";
/**
 * @hidden
 */
var IconCriterionInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IconCriterionInfo, _super);
    function IconCriterionInfo(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.a = 0;
        _this.b = 0;
        _this.i = 0;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = _rest[2];
                    _this.a = c;
                    _this.b = d;
                    _this.i = e;
                }
                break;
        }
        return _this;
    }
    IconCriterionInfo.prototype.equals = function (a) {
        if (typeCast(IconCriterionInfo.$, a) !== null) {
            return a.a == this.a && a.b == this.b;
        }
        return false;
    };
    IconCriterionInfo.prototype.getHashCode = function () {
        return Base.getHashCodeStatic(this.a) ^ Base.getHashCodeStatic(this.b);
    };
    IconCriterionInfo.prototype.toString = function () {
        return stringFormat("Icon: {0}, Set: {1}", enumGetBox(FormatConditionIcon_$type, this.a), enumGetBox(FormatConditionIconSet_$type, this.b));
    };
    IconCriterionInfo.c = function (a, b) {
        return a.equals(b);
    };
    IconCriterionInfo.d = function (a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return IconCriterionInfo.c(a.value, b.value);
    };
    IconCriterionInfo.e = function (a, b) {
        return !(IconCriterionInfo.c(a, b));
    };
    IconCriterionInfo.f = function (a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return IconCriterionInfo.e(a.value, b.value);
    };
    IconCriterionInfo.$t = markStruct(IconCriterionInfo, 'IconCriterionInfo');
    return IconCriterionInfo;
}(ValueType));
export { IconCriterionInfo };
