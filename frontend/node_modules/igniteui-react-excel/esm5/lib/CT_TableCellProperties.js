/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_LineProperties_DML } from "./CT_LineProperties_DML";
import { CT_Cell3D } from "./CT_Cell3D";
import { CT_OfficeArtExtensionList } from "./CT_OfficeArtExtensionList";
import { ST_TextVerticalType_$type } from "./ST_TextVerticalType";
import { ST_TextAnchoringType_$type } from "./ST_TextAnchoringType";
import { ST_TextHorzOverflowType_$type } from "./ST_TextHorzOverflowType";
import { EG_FillProperties } from "./EG_FillProperties";
import { CultureInfo } from "igniteui-react-core";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { ST_OnOff } from "./ST_OnOff";
import { parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_TableCellProperties = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_TableCellProperties, _super);
    function CT_TableCellProperties() {
        var _this = _super.call(this) || this;
        _this.h = null;
        _this.j = null;
        _this.l = null;
        _this.d = null;
        _this.n = null;
        _this.f = null;
        _this.b = null;
        _this.p = null;
        _this.ag = toNullable(Number_$type, null);
        _this.ai = toNullable(Number_$type, null);
        _this.ak = toNullable(Number_$type, null);
        _this.ae = toNullable(Number_$type, null);
        _this.am = toNullable(ST_TextVerticalType_$type, null);
        _this.aa = toNullable(ST_TextAnchoringType_$type, null);
        _this.z = toNullable(Boolean_$type, null);
        _this.ac = toNullable(ST_TextHorzOverflowType_$type, null);
        _this.q = null;
        return _this;
    }
    Object.defineProperty(CT_TableCellProperties.prototype, "g", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "i", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "k", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "c", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            this.d = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "m", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "e", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "o", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "af", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "ah", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "aj", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "ad", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "al", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "x", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "y", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "ab", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_TableCellProperties.prototype, "r", {
        get: function () {
            if (this.q == null) {
                this.q = new EG_FillProperties();
            }
            return this.q;
        },
        enumerable: false,
        configurable: true
    });
    CT_TableCellProperties.ao = function (a, b, c, d, e, f, g, h, i) {
        var e_1, _a;
        b = toNullable(Number_$type, null);
        c = toNullable(Number_$type, null);
        d = toNullable(Number_$type, null);
        e = toNullable(Number_$type, null);
        f = toNullable(ST_TextVerticalType_$type, null);
        g = toNullable(ST_TextAnchoringType_$type, null);
        h = toNullable(Boolean_$type, null);
        i = toNullable(ST_TextHorzOverflowType_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var j = _c.value;
                switch (j.a.e(a.d)) {
                    case "marL":
                        b = toNullable(Number_$type, parseInt32_1(j.d, CultureInfo.invariantCulture));
                        break;
                    case "marR":
                        c = toNullable(Number_$type, parseInt32_1(j.d, CultureInfo.invariantCulture));
                        break;
                    case "marT":
                        d = toNullable(Number_$type, parseInt32_1(j.d, CultureInfo.invariantCulture));
                        break;
                    case "marB":
                        e = toNullable(Number_$type, parseInt32_1(j.d, CultureInfo.invariantCulture));
                        break;
                    case "vert":
                        f = toNullable(ST_TextVerticalType_$type, XmlNamespaceDefinitionBase.b(ST_TextVerticalType_$type, j.d));
                        break;
                    case "anchor":
                        g = toNullable(ST_TextAnchoringType_$type, XmlNamespaceDefinitionBase.b(ST_TextAnchoringType_$type, j.d));
                        break;
                    case "anchorCtr":
                        h = toNullable(Boolean_$type, ST_OnOff.e(j.d));
                        break;
                    case "horzOverflow":
                        i = toNullable(ST_TextHorzOverflowType_$type, XmlNamespaceDefinitionBase.b(ST_TextHorzOverflowType_$type, j.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i
        };
    };
    CT_TableCellProperties.ap = function (a, b, c, d, e, f, g, h, i, j) {
        if (c === void 0) {
            c = toNullable(ST_TextAnchoringType_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Boolean_$type, null);
        }
        if (e === void 0) {
            e = toNullable(ST_TextHorzOverflowType_$type, null);
        }
        if (f === void 0) {
            f = toNullable(Number_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Number_$type, null);
        }
        if (h === void 0) {
            h = toNullable(Number_$type, null);
        }
        if (i === void 0) {
            i = toNullable(Number_$type, null);
        }
        if (j === void 0) {
            j = toNullable(ST_TextVerticalType_$type, null);
        }
        a.ad.p(b, "a");
        var k = null;
        var l = null;
        if (c.hasValue) {
            l = "anchor";
            k = XmlNamespaceDefinitionBase.p(ST_TextAnchoringType_$type, c.value);
            a.ad.h(l, k);
        }
        if (d.hasValue) {
            l = "anchorCtr";
            k = ST_OnOff.g(d.value);
            a.ad.h(l, k);
        }
        if (e.hasValue) {
            l = "horzOverflow";
            k = XmlNamespaceDefinitionBase.p(ST_TextHorzOverflowType_$type, e.value);
            a.ad.h(l, k);
        }
        if (f.hasValue) {
            l = "marB";
            k = f.value.toString();
            a.ad.h(l, k);
        }
        if (g.hasValue) {
            l = "marL";
            k = g.value.toString();
            a.ad.h(l, k);
        }
        if (h.hasValue) {
            l = "marR";
            k = h.value.toString();
            a.ad.h(l, k);
        }
        if (i.hasValue) {
            l = "marT";
            k = i.value.toString();
            a.ad.h(l, k);
        }
        if (j.hasValue) {
            l = "vert";
            k = XmlNamespaceDefinitionBase.p(ST_TextVerticalType_$type, j.value);
            a.ad.h(l, k);
        }
        ;
    };
    CT_TableCellProperties.prototype.setProperty = function (a, b) {
        switch (a) {
            case 922:
                this.g = typeCast(CT_LineProperties_DML.$, b);
                break;
            case 924:
                this.i = typeCast(CT_LineProperties_DML.$, b);
                break;
            case 928:
                this.k = typeCast(CT_LineProperties_DML.$, b);
                break;
            case 919:
                this.c = typeCast(CT_LineProperties_DML.$, b);
                break;
            case 929:
                this.m = typeCast(CT_LineProperties_DML.$, b);
                break;
            case 920:
                this.e = typeCast(CT_LineProperties_DML.$, b);
                break;
            case 235:
                this.a = typeCast(CT_Cell3D.$, b);
                break;
            case 601:
                this.o = typeCast(CT_OfficeArtExtensionList.$, b);
                break;
            default:
                if (this.r.f(a)) {
                    this.r.j(a, b);
                    return;
                }
                break;
        }
    };
    CT_TableCellProperties.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_TableCellProperties.$t = markType(CT_TableCellProperties, 'CT_TableCellProperties', Base.$, [ISupportSetProperty_$type]);
    return CT_TableCellProperties;
}(Base));
export { CT_TableCellProperties };
