/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CodePageEncoding } from "./CodePageEncoding";
import { String_$type, Number_$type, markType } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { ArgumentNullException } from "igniteui-react-core";
import { ArgumentOutOfRangeException } from "igniteui-react-core";
import { StringBuilder } from "igniteui-react-core";
import { nullableNotEquals, unwrapNullable } from "igniteui-react-core";
/**
 * @hidden
 */
var CodePageSingleByte = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CodePageSingleByte, _super);
    function CodePageSingleByte(a, b) {
        var _this = _super.call(this) || this;
        _this._ae = null;
        _this._af = null;
        _this._ag = 0;
        _this._ag = a;
        _this._ae = b;
        if (b == null) {
            return _this;
        }
        if (_this._af != null) {
            return _this;
        }
        _this._af = new Dictionary$2(String_$type, Number_$type, 0);
        for (var c = 0; c < b.length; c++) {
            var d = b[c];
            if (nullableNotEquals(d, null)) {
                _this._af.addItem(d.value, c);
            }
        }
        return _this;
    }
    CodePageSingleByte.prototype.get__codePage = function () {
        return this._ag;
    };
    Object.defineProperty(CodePageSingleByte.prototype, "_codePage", {
        get: function () {
            return this.get__codePage();
        },
        enumerable: false,
        configurable: true
    });
    CodePageSingleByte.prototype.getChars = function (a, b, c, d, e) {
        if ((a == null) || (d == null)) {
            throw new ArgumentNullException(0, (a == null) ? "bytes are Null" : "chars are Null");
        }
        if ((b < 0) || (c < 0)) {
            throw new ArgumentOutOfRangeException(1, (b < 0) ? "byteIndex is out of Range" : "byteCount is out of Range");
        }
        if ((a.length - b) < c) {
            throw new ArgumentOutOfRangeException(1, "bytes");
        }
        if ((e < 0) || (e > d.length)) {
            throw new ArgumentOutOfRangeException(1, "charIndex");
        }
        if (a.length == 0) {
            return 0;
        }
        if (d.length == 0) {
            return 0;
        }
        var f = this._ae;
        var g = this._af;
        var h = 0;
        var i = 0;
        for (var j = b; j < b + c; j++) {
            var k = f[a[j]];
            if (nullableNotEquals(k, null)) {
                if (g.containsKey(k.value)) {
                    if (e <= k.value.charCodeAt(0)) {
                        if (i < d.length) {
                            d[i] = k.value;
                            i++;
                        }
                        h++;
                    }
                }
            }
        }
        return h;
    };
    CodePageSingleByte.prototype.getMaxByteCount = function (a) {
        return a;
    };
    CodePageSingleByte.prototype.getMaxCharCount = function (a) {
        return a;
    };
    CodePageSingleByte.prototype.getByteCount = function (a, b, c) {
        return c;
    };
    CodePageSingleByte.prototype.getBytes2 = function (a, b, c, d, e) {
        var f = this._af;
        var _loop_1 = function (g) {
            var h;
            if (((function () { var i = f.tryGetValue(a[g], h); h = i.p1; return i.ret; })()) == false && ((function () { var i = f.tryGetValue('?', h); h = i.p1; return i.ret; })()) == false) {
                return "continue";
            }
            d[e + g - b] = h;
        };
        for (var g = b; g < b + c; g++) {
            _loop_1(g);
        }
        return c;
    };
    CodePageSingleByte.prototype.getCharCount1 = function (a, b, c) {
        return c;
    };
    CodePageSingleByte.prototype.getString1 = function (a, b, c) {
        var d = this._ae;
        var e = new StringBuilder(0);
        for (var f = b; f < b + c; f++) {
            e.k(unwrapNullable(d[a[f]]));
        }
        return e.toString();
    };
    CodePageSingleByte.$t = markType(CodePageSingleByte, 'CodePageSingleByte', CodePageEncoding.$);
    return CodePageSingleByte;
}(CodePageEncoding));
export { CodePageSingleByte };
