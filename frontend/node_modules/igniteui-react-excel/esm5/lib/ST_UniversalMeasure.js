/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, Base, toNullable, typeCast, Number_$type, markStruct } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { CultureInfo } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
import { tryParseNumber1 } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_UniversalMeasure = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_UniversalMeasure, _super);
    function ST_UniversalMeasure(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.a = 0;
        _this.j = 0;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.j = c;
                    _this.a = d;
                }
                break;
        }
        return _this;
    }
    ST_UniversalMeasure.prototype.equals = function (a) {
        var b = toNullable(ST_UniversalMeasure.$, typeCast(ST_UniversalMeasure.$, a));
        if (ST_UniversalMeasure.f(b, toNullable(ST_UniversalMeasure.$, null))) {
            return false;
        }
        return ST_UniversalMeasure.c(this, b.getValueOrDefault());
    };
    ST_UniversalMeasure.prototype.getHashCode = function () {
        return Base.getHashCodeStatic(this.a) << 16 ^ (this.j);
    };
    ST_UniversalMeasure.prototype.toString = function () {
        return ST_UniversalMeasure.p(this.j, this.a);
    };
    ST_UniversalMeasure.prototype.n = function () {
        return toNullable(Number_$type, this.k());
    };
    ST_UniversalMeasure.prototype.m = function () {
        return DocCoreUtils.u(this.k());
    };
    ST_UniversalMeasure.prototype.k = function () {
        return ST_UniversalMeasure.l(this.j, this.a);
    };
    ST_UniversalMeasure.o = function (a) {
        var b;
        var c;
        if (((function () { var d = ST_UniversalMeasure.i(a, b, c); b = d.p1; c = d.p2; return d.ret; })()) == false || b < 0) {
            return toNullable(ST_UniversalMeasure.$, null);
        }
        return toNullable(ST_UniversalMeasure.$, new ST_UniversalMeasure(1, b, c));
    };
    ST_UniversalMeasure.l = function (a, b) {
        var c = 20;
        var d = 72;
        var e = 2.54;
        var f = 10;
        var g = 12;
        var t1 = b;
        L0: while (true) {
            switch (t1) {
                case 0:
                    a /= e;
                    t1 = 2;
                    continue L0;
                case 2:
                    a *= d;
                    t1 = 3;
                    continue L0;
                case 1:
                    a /= f;
                    t1 = 0;
                    continue L0;
                case 3: return (a * c);
                case 4:
                case 5:
                    a /= g;
                    t1 = 3;
                    continue L0;
                default: return truncate((a));
            }
            break;
        }
    };
    ST_UniversalMeasure.i = function (a, b, c) {
        b = 0;
        c = 0;
        if (a.length < 3) {
            return {
                ret: false,
                p1: b,
                p2: c
            };
        }
        var d = a.substr(0, a.length - 2);
        var e = a.substr(a.length - 2);
        switch (e) {
            case "cm":
                c = 0;
                break;
            case "mm":
                c = 1;
                break;
            case "in":
                c = 2;
                break;
            case "pt":
                c = 3;
                break;
            case "pc":
                c = 4;
                break;
            case "pi":
                c = 5;
                break;
            default: return {
                ret: false,
                p1: b,
                p2: c
            };
        }
        if (((function () { var f = tryParseNumber1(d, 167 | 64, CultureInfo.invariantCulture, b); b = f.p3; return f.ret; })()) == false) {
            return {
                ret: false,
                p1: b,
                p2: c
            };
        }
        return {
            ret: true,
            p1: b,
            p2: c
        };
    };
    ST_UniversalMeasure.p = function (a, b) {
        var c;
        switch (b) {
            case 0:
                c = "cm";
                break;
            case 2:
                c = "in";
                break;
            case 1:
                c = "mm";
                break;
            case 3:
                c = "pt";
                break;
            case 4:
                c = "pc";
                break;
            case 5:
                c = "pi";
                break;
            default:
                c = "pt";
                break;
        }
        return a.toString() + c;
    };
    ST_UniversalMeasure.b = function (a, b) {
        return a.a == b.a && a.j == b.j;
    };
    ST_UniversalMeasure.c = function (a, b) {
        return a.a == b.a && a.j == b.j;
    };
    ST_UniversalMeasure.d = function (a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return ST_UniversalMeasure.c(a.value, b.value);
    };
    ST_UniversalMeasure.e = function (a, b) {
        return !(ST_UniversalMeasure.c(a, b));
    };
    ST_UniversalMeasure.f = function (a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return ST_UniversalMeasure.e(a.value, b.value);
    };
    ST_UniversalMeasure.$t = markStruct(ST_UniversalMeasure, 'ST_UniversalMeasure');
    return ST_UniversalMeasure;
}(ValueType));
export { ST_UniversalMeasure };
