/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { MathUtilities } from "./MathUtilities";
import { markType } from "igniteui-react-core";
import { truncate } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionRound = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionRound, _super);
    function UltraCalcFunctionRound() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionRound.prototype.evaluate = function (a, b) {
        var c = null;
        if (b == 3) {
            c = a.pop();
        }
        var d = a.pop();
        var e = a.pop();
        if (d.isError) {
            return new ExcelCalcValue(d.toErrorValue());
        }
        if (e.isError) {
            return new ExcelCalcValue(e.toErrorValue());
        }
        if (c != null && c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var f;
        if (!((function () { var g = d._toDouble1(f); f = g.p0; return g.ret; })())) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(4));
        }
        var g;
        if (!((function () { var h = e._toDouble1(g); g = h.p0; return h.ret; })())) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(4));
        }
        if (true) {
            g = MathUtilities.i(g);
        }
        var h = 0;
        if (c != null) {
            if (!((function () { var i = c._toDouble1(h); h = i.p0; return i.ret; })())) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            if (truncate(h) < 0 || truncate(h) > 1) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
        }
        return new ExcelCalcValue(UltraCalcFunctionRound._al(g, truncate(f), truncate(h)));
    };
    UltraCalcFunctionRound.prototype.get_name = function () {
        return "round";
    };
    Object.defineProperty(UltraCalcFunctionRound.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionRound.prototype.get_minArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionRound.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionRound.prototype.get_maxArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionRound.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionRound._ak = function (a, b) {
        return UltraCalcFunctionRound._al(a, b, 0);
    };
    UltraCalcFunctionRound._al = function (a, b, c) {
        if (c == 0) {
            return MathUtilities.g(a, b);
        }
        if (b <= 15) {
            return round10N(a, b);
        }
        var d = Math.pow(10, b);
        var e = MathUtilities.i(a * d);
        return Math.round(e) / d;
    };
    UltraCalcFunctionRound.prototype.doesParameterAllowIntermediateResultArray = function (a, b) {
        return true;
    };
    UltraCalcFunctionRound.$t = markType(UltraCalcFunctionRound, 'UltraCalcFunctionRound', BuiltInFunctionBase.$);
    return UltraCalcFunctionRound;
}(BuiltInFunctionBase));
export { UltraCalcFunctionRound };
