/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { parseNumber } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_FontSize = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_FontSize, _super);
    function CT_FontSize() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = 0;
        return _this;
    }
    CT_FontSize.c = function (a, b) {
        var e_1, _a;
        b = 0;
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                switch (c.a.e(a.d)) {
                    case "val":
                        b = parseNumber(c.d, CultureInfo.invariantCulture);
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return {
            p1: b
        };
    };
    CT_FontSize.d = function (a, b, c) {
        a.ad.p(b, null);
        var d = null;
        var e = null;
        e = "val";
        d = c.toString();
        a.ad.h(e, d);
    };
    CT_FontSize.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_FontSize.$t = markType(CT_FontSize, 'CT_FontSize');
    return CT_FontSize;
}(Base));
export { CT_FontSize };
