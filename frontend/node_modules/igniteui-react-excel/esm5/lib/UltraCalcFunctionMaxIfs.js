/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType } from "igniteui-react-core";
import { UltraCalcConditionalFunctionBase } from "./UltraCalcConditionalFunctionBase";
/**
 * @hidden
 */
var UltraCalcFunctionMaxIfs = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionMaxIfs, _super);
    function UltraCalcFunctionMaxIfs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionMaxIfs.prototype.evaluate = function (a, b) {
        return UltraCalcConditionalFunctionBase._ak(a, b, -1.7976931348623157E+308, function (c, d) { return new ExcelCalcValue(d == 0 ? 0 : c); }, function (c, d) { return d > c ? d : c; });
    };
    UltraCalcFunctionMaxIfs.prototype.get_name = function () {
        return "maxifs";
    };
    Object.defineProperty(UltraCalcFunctionMaxIfs.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionMaxIfs.prototype.get_minArgs = function () {
        return 3;
    };
    Object.defineProperty(UltraCalcFunctionMaxIfs.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionMaxIfs.prototype.get_maxArgs = function () {
        return 0x7FFFFFFF;
    };
    Object.defineProperty(UltraCalcFunctionMaxIfs.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionMaxIfs.$t = markType(UltraCalcFunctionMaxIfs, 'UltraCalcFunctionMaxIfs', BuiltInFunctionBase.$);
    return UltraCalcFunctionMaxIfs;
}(BuiltInFunctionBase));
export { UltraCalcFunctionMaxIfs };
