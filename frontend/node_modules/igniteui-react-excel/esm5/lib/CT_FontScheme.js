/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, fromEnum, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_FontCollection } from "./CT_FontCollection";
import { CT_OfficeArtExtensionList } from "./CT_OfficeArtExtensionList";
/**
 * @hidden
 */
var CT_FontScheme = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_FontScheme, _super);
    function CT_FontScheme() {
        var _this = _super.call(this) || this;
        _this.b = null;
        _this.d = null;
        _this.f = null;
        _this.h = null;
        return _this;
    }
    Object.defineProperty(CT_FontScheme.prototype, "a", {
        get: function () {
            return this.b;
        },
        set: function (a) {
            this.b = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FontScheme.prototype, "c", {
        get: function () {
            return this.d;
        },
        set: function (a) {
            this.d = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FontScheme.prototype, "e", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_FontScheme.prototype, "g", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_FontScheme.j = function (a, b) {
        var e_1, _a;
        b = null;
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                switch (c.a.e(a.d)) {
                    case "name":
                        b = c.d;
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b
        };
    };
    CT_FontScheme.k = function (a, b, c) {
        a.ad.p(b, "a");
        var d = null;
        var e = null;
        if (c != null) {
            e = "name";
            d = c;
            a.ad.h(e, d);
        }
        ;
    };
    CT_FontScheme.prototype.setProperty = function (a, b) {
        switch (a) {
            case 962:
                this.a = typeCast(CT_FontCollection.$, b);
                break;
            case 1010:
                this.c = typeCast(CT_FontCollection.$, b);
                break;
            case 601:
                this.e = typeCast(CT_OfficeArtExtensionList.$, b);
                break;
            default: break;
        }
    };
    CT_FontScheme.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_FontScheme.$t = markType(CT_FontScheme, 'CT_FontScheme', Base.$, [ISupportSetProperty_$type]);
    return CT_FontScheme;
}(Base));
export { CT_FontScheme };
