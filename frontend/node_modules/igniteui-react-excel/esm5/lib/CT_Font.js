/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, typeCast, markType, getInstanceType } from "igniteui-react-core";
import { ISupportSetProperty_$type } from "./ISupportSetProperty";
import { CT_FontName } from "./CT_FontName";
import { CT_IntProperty } from "./CT_IntProperty";
import { CT_BooleanProperty } from "./CT_BooleanProperty";
import { ColorInfo } from "./ColorInfo";
import { CT_FontSize } from "./CT_FontSize";
import { CT_UnderlineProperty } from "./CT_UnderlineProperty";
import { CT_VerticalAlignFontProperty } from "./CT_VerticalAlignFontProperty";
import { CT_FontScheme_SML } from "./CT_FontScheme_SML";
/**
 * @hidden
 */
var CT_Font = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_Font, _super);
    function CT_Font() {
        var _this = _super.call(this) || this;
        _this.i = null;
        _this.l = null;
        _this.m = null;
        _this.b = null;
        _this.e = null;
        _this.h = null;
        _this.f = null;
        _this.g = null;
        _this.c = null;
        _this.d = null;
        _this.a = null;
        _this.k = null;
        _this.n = null;
        _this.o = null;
        _this.j = null;
        return _this;
    }
    CT_Font.prototype.setProperty = function (a, b) {
        switch (a) {
            case 1045:
                this.i = typeCast(CT_FontName.$, b);
                break;
            case 260:
                this.l = typeCast(CT_IntProperty.$, b);
                break;
            case 617:
                this.m = typeCast(CT_IntProperty.$, b);
                break;
            case 86:
                this.b = typeCast(CT_BooleanProperty.$, b);
                break;
            case 808:
                this.e = typeCast(CT_BooleanProperty.$, b);
                break;
            case 1610:
                this.h = typeCast(CT_BooleanProperty.$, b);
                break;
            case 1143:
                this.f = typeCast(CT_BooleanProperty.$, b);
                break;
            case 1460:
                this.g = typeCast(CT_BooleanProperty.$, b);
                break;
            case 332:
                this.c = typeCast(CT_BooleanProperty.$, b);
                break;
            case 600:
                this.d = typeCast(CT_BooleanProperty.$, b);
                break;
            case 302:
                this.a = typeCast(ColorInfo.$, b);
                break;
            case 1653:
                this.k = typeCast(CT_FontSize.$, b);
                break;
            case 1789:
                this.n = typeCast(CT_UnderlineProperty.$, b);
                break;
            case 1836:
                this.o = typeCast(CT_VerticalAlignFontProperty.$, b);
                break;
            case 1428:
                this.j = typeCast(CT_FontScheme_SML.$, b);
                break;
            default: break;
        }
    };
    CT_Font.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_Font.$t = markType(CT_Font, 'CT_Font', Base.$, [ISupportSetProperty_$type]);
    return CT_Font;
}(Base));
export { CT_Font };
