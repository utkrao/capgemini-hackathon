/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, typeCast, markStruct } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { CultureInfo } from "igniteui-react-core";
import { tryParseInt32_2, intToString1 } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_HexColorRGB = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_HexColorRGB, _super);
    function ST_HexColorRGB(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.m = 0;
        _this.l = 0;
        _this.k = 0;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    var d = [c.o, c.n, c.m];
                    {
                        var f = d[0];
                        var g = d[1];
                        var h = d[2];
                        _this.m = f;
                        _this.l = g;
                        _this.k = h;
                    }
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    var e = _rest[2];
                    _this.m = c;
                    _this.l = d;
                    _this.k = e;
                }
                break;
        }
        return _this;
    }
    ST_HexColorRGB.prototype.equals = function (a) {
        var b = toNullable(ST_HexColorRGB.$, typeCast(ST_HexColorRGB.$, a));
        if (ST_HexColorRGB.h(b, toNullable(ST_HexColorRGB.$, null))) {
            return false;
        }
        return ST_HexColorRGB.e(this, b.getValueOrDefault());
    };
    ST_HexColorRGB.prototype.getHashCode = function () {
        return (this.m << 16) | (this.l << 8) | this.k;
    };
    ST_HexColorRGB.d = function (a) {
        var b = ST_HexColorRGB.p(a);
        if (ST_HexColorRGB.h(b, toNullable(ST_HexColorRGB.$, null))) {
            return b.getValueOrDefault();
        }
        throw DocCoreUtils.n(ST_HexColorRGB.$, a);
    };
    ST_HexColorRGB.p = function (a) {
        var b;
        if (((function () { var c = tryParseInt32_2(a, 515, CultureInfo.invariantCulture, b); b = c.p3; return c.ret; })()) == false) {
            return toNullable(ST_HexColorRGB.$, null);
        }
        var c = ((b & 16711680) >> 16);
        var d = ((b & 65280) >> 8);
        var e = ((b & 255) >> 0);
        return toNullable(ST_HexColorRGB.$, new ST_HexColorRGB(2, c, d, e));
    };
    ST_HexColorRGB.prototype.toString = function () {
        return intToString1(this.m, "X2", CultureInfo.invariantCulture) + intToString1(this.l, "X2", CultureInfo.invariantCulture) + intToString1(this.k, "X2", CultureInfo.invariantCulture);
    };
    Object.defineProperty(ST_HexColorRGB.prototype, "r", {
        get: function () {
            return Color.u(255, this.m, this.l, this.k);
        },
        enumerable: false,
        configurable: true
    });
    ST_HexColorRGB.prototype.q = function () {
        return this.toString();
    };
    ST_HexColorRGB.e = function (a, b) {
        return a.k == b.k && a.l == b.l && a.m == b.m;
    };
    ST_HexColorRGB.f = function (a, b) {
        if (!a.hasValue) {
            return !b.hasValue;
        }
        else if (!b.hasValue) {
            return false;
        }
        return ST_HexColorRGB.e(a.value, b.value);
    };
    ST_HexColorRGB.g = function (a, b) {
        return !(ST_HexColorRGB.e(a, b));
    };
    ST_HexColorRGB.h = function (a, b) {
        if (!a.hasValue) {
            return b.hasValue;
        }
        else if (!b.hasValue) {
            return true;
        }
        return ST_HexColorRGB.g(a.value, b.value);
    };
    ST_HexColorRGB.s = function (a) {
        return a.r;
    };
    ST_HexColorRGB.n = function (a) {
        if (!a.hasValue) {
            return toNullable(Color.$, null);
        }
        return toNullable(Color.$, ST_HexColorRGB.s(a.value));
    };
    ST_HexColorRGB.b = function (a) {
        return new ST_HexColorRGB(2, a.o, a.n, a.m);
    };
    ST_HexColorRGB.o = function (a) {
        if (!a.hasValue) {
            return toNullable(ST_HexColorRGB.$, null);
        }
        return toNullable(ST_HexColorRGB.$, ST_HexColorRGB.b(a.value));
    };
    ST_HexColorRGB.$t = markStruct(ST_HexColorRGB, 'ST_HexColorRGB');
    ST_HexColorRGB.a = new ST_HexColorRGB(0);
    return ST_HexColorRGB;
}(ValueType));
export { ST_HexColorRGB };
