/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Number_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { CultureInfo } from "igniteui-react-core";
import { parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_HSLEffect = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_HSLEffect, _super);
    function CT_HSLEffect() {
        var _this = _super.call(this) || this;
        _this.e = toNullable(Number_$type, null);
        _this.i = toNullable(Number_$type, null);
        _this.g = toNullable(Number_$type, null);
        return _this;
    }
    Object.defineProperty(CT_HSLEffect.prototype, "d", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            this.e = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_HSLEffect.prototype, "h", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_HSLEffect.prototype, "f", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_HSLEffect.k = function (a, b, c, d) {
        var e_1, _a;
        b = toNullable(Number_$type, null);
        c = toNullable(Number_$type, null);
        d = toNullable(Number_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                switch (e.a.e(a.d)) {
                    case "hue":
                        b = toNullable(Number_$type, parseInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "sat":
                        c = toNullable(Number_$type, parseInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    case "lum":
                        d = toNullable(Number_$type, parseInt32_1(e.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d
        };
    };
    CT_HSLEffect.l = function (a, b, c, d, e) {
        if (c === void 0) {
            c = toNullable(Number_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Number_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Number_$type, null);
        }
        a.ad.p(b, "a");
        var f = null;
        var g = null;
        if (c.hasValue) {
            g = "hue";
            f = c.value.toString();
            a.ad.h(g, f);
        }
        if (d.hasValue) {
            g = "lum";
            f = d.value.toString();
            a.ad.h(g, f);
        }
        if (e.hasValue) {
            g = "sat";
            f = e.value.toString();
            a.ad.h(g, f);
        }
        ;
    };
    CT_HSLEffect.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_HSLEffect.$t = markType(CT_HSLEffect, 'CT_HSLEffect');
    return CT_HSLEffect;
}(Base));
export { CT_HSLEffect };
