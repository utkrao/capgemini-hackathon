/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType } from "igniteui-react-core";
import { ErrorValue } from "./ErrorValue";
import { truncate } from "igniteui-react-core";
import { nullableAdd, nullableSubtract } from "igniteui-react-core";
import { dateGetMonth, dateFromValues } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionDateDif = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionDateDif, _super);
    function UltraCalcFunctionDateDif() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionDateDif.prototype.evaluate = function (a, b) {
        var c;
        c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var d = c.toString().toLowerCase();
        c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var e = Math.floor(c._toDouble3());
        c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var f = Math.floor(c._toDouble3());
        if (f > e || f < 0) {
            return new ExcelCalcValue(ErrorValue.valueRangeOverflow);
        }
        var g = a._r;
        var h = ExcelCalcValue._excelDateToDateTime(g, f).value;
        var i = ExcelCalcValue._excelDateToDateTime(g, e).value;
        var j = h.getFullYear();
        var k = dateGetMonth(h);
        var l = h.getDate();
        var m = i.getFullYear();
        var n = dateGetMonth(i);
        var o = i.getDate();
        var p = 0;
        switch (d) {
            case "y":
                p = m - j;
                if (n < k || (n == k && o < l)) {
                    p--;
                }
                break;
            case "m":
                p = (m * 12 + n) - (j * 12 + k);
                if (o < l) {
                    p--;
                }
                break;
            case "d":
                p = truncate((e - f));
                break;
            case "md":
                if (l <= o) {
                    p = o - l;
                }
                else {
                    var q = n == 1 ? m - 1 : m;
                    var r = n == 1 ? 12 : n - 1;
                    var s = dateFromValues(q, r, 1, 0, 0, 0, 0);
                    var t = nullableSubtract(nullableAdd(ExcelCalcValue._dateTimeToExcelDate(g, s), l), 1);
                    p = (nullableSubtract(e, t)).value;
                }
                break;
            case "ym":
                p = (n + 12) - k;
                if (o < l) {
                    p--;
                }
                p = p % 12;
                break;
            case "yd":
                if (k == n && l <= o) {
                    p = o - l;
                }
                else {
                    var u = n < k || k == n ? j + 1 : j;
                    var v = dateFromValues(u, n, 1, 0, 0, 0, 0);
                    var w = nullableSubtract(nullableAdd(ExcelCalcValue._dateTimeToExcelDate(g, v), o), 1);
                    p = (nullableSubtract(w, f)).value;
                }
                break;
            default: return new ExcelCalcValue(ErrorValue.valueRangeOverflow);
        }
        return new ExcelCalcValue(p);
    };
    UltraCalcFunctionDateDif.prototype.get_name = function () {
        return "datedif";
    };
    Object.defineProperty(UltraCalcFunctionDateDif.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDateDif.prototype.get_minArgs = function () {
        return 3;
    };
    Object.defineProperty(UltraCalcFunctionDateDif.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDateDif.prototype.get_maxArgs = function () {
        return 3;
    };
    Object.defineProperty(UltraCalcFunctionDateDif.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDateDif.$t = markType(UltraCalcFunctionDateDif, 'UltraCalcFunctionDateDif', BuiltInFunctionBase.$);
    return UltraCalcFunctionDateDif;
}(BuiltInFunctionBase));
export { UltraCalcFunctionDateDif };
