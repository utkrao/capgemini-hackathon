/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, Type, markType } from "igniteui-react-core";
import { LruCache_LruCacheNode$2 } from "./LruCache_LruCacheNode$2";
import { ArgumentOutOfRangeException } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { LinkedList } from "./LinkedList";
import { EqualityComparer$1 } from "igniteui-react-core";
/**
 * @hidden
 */
var LruCache$2 = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LruCache$2, _super);
    function LruCache$2($tKey, $tValue, a, b) {
        var _this = _super.call(this) || this;
        _this.$tKey = null;
        _this.$tValue = null;
        _this.e = 0;
        _this.d = null;
        _this.a = null;
        _this.$tKey = $tKey;
        _this.$tValue = $tValue;
        _this.$type = _this.$type.specialize(_this.$tKey, _this.$tValue);
        if (b == null) {
            b = EqualityComparer$1.defaultEqualityComparerValue(_this.$tKey);
        }
        _this.d = new Dictionary$2(_this.$tKey, LruCache_LruCacheNode$2.$.specialize(_this.$tKey, _this.$tValue), 2, b);
        _this.a = new LinkedList();
        _this.f = a;
        return _this;
    }
    Object.defineProperty(LruCache$2.prototype, "f", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            if (a <= 0) {
                throw new ArgumentOutOfRangeException(0);
            }
            this.e = a;
            for (var b = this.d.count - a; b > 0; b--) {
                var c = this.a.d;
                this.d.removeItem(c.n);
                c.m();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LruCache$2.prototype, "g", {
        get: function () {
            return this.d.count;
        },
        enumerable: false,
        configurable: true
    });
    LruCache$2.prototype.item = function (a) {
        var _this = this;
        var b;
        var c;
        if (((function () { var d = _this.d.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
            b = c.o;
            c.i();
        }
        else {
            b = Type.getDefaultValue(this.$tValue);
        }
        return b;
    };
    LruCache$2.prototype.h = function (a, b) {
        var _this = this;
        var c;
        if (((function () { var d = _this.d.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
            c.o = b;
            c.i();
        }
        else {
            c = new LruCache_LruCacheNode$2(this.$tKey, this.$tValue);
            c.n = a;
            c.o = b;
            c.j(this.a);
            this.d.addItem(a, c);
            if (this.d.count > this.e) {
                this.d.removeItem(this.a.d.n);
                this.a.d.m();
            }
        }
    };
    LruCache$2.prototype.i = function () {
        this.d.clear();
        this.a.e();
    };
    LruCache$2.prototype.c = function (a) {
        var _this = this;
        var b;
        var c;
        b = ((function () { var d = _this.d.tryGetValue(a, c); c = d.p1; return d.ret; })());
        if (b) {
            c.m();
            this.d.removeItem(a);
        }
        return b;
    };
    LruCache$2.$t = markType(LruCache$2, 'LruCache$2');
    return LruCache$2;
}(Base));
export { LruCache$2 };
