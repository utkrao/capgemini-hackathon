/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { ValueType, toNullable, Number_$type, markStruct } from "igniteui-react-core";
import { ST_UniversalMeasure } from "./ST_UniversalMeasure";
import { CultureInfo } from "igniteui-react-core";
import { DocCoreUtils } from "./DocCoreUtils";
import { truncate, intDivide } from "igniteui-react-core";
import { nullableNotEquals } from "igniteui-react-core";
import { tryParseInt32_2 } from "igniteui-react-core";
import { stringEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
var ST_SignedHpsMeasure = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ST_SignedHpsMeasure, _super);
    function ST_SignedHpsMeasure(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.c = toNullable(Number_$type, null);
        _this.d = toNullable(ST_UniversalMeasure.$, null);
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0: break;
            case 1:
                {
                    var c = _rest[0];
                    _this.c = toNullable(Number_$type, truncate((c * 2)));
                    _this.d = toNullable(ST_UniversalMeasure.$, null);
                }
                break;
            case 2:
                {
                    var c = _rest[0];
                    _this.c = toNullable(Number_$type, null);
                    _this.d = toNullable(ST_UniversalMeasure.$, c);
                }
                break;
        }
        return _this;
    }
    ST_SignedHpsMeasure.prototype.toString = function () {
        if (nullableNotEquals(this.c, null)) {
            return this.c.value.toString();
        }
        if (ST_UniversalMeasure.f(this.d, toNullable(ST_UniversalMeasure.$, null))) {
            return this.d.toString();
        }
        return stringEmpty();
    };
    ST_SignedHpsMeasure.prototype.b = function () {
        if (nullableNotEquals(this.c, null)) {
            return this.c.value * 10;
        }
        if (ST_UniversalMeasure.f(this.d, toNullable(ST_UniversalMeasure.$, null))) {
            return this.d.value.k();
        }
        return 0;
    };
    ST_SignedHpsMeasure.a = function (a) {
        var b;
        if (((function () { var c = tryParseInt32_2(a, 7, CultureInfo.invariantCulture, b); b = c.p3; return c.ret; })())) {
            return new ST_SignedHpsMeasure(1, intDivide(b, 2));
        }
        var c = ST_UniversalMeasure.o(a);
        if (ST_UniversalMeasure.f(c, toNullable(ST_UniversalMeasure.$, null))) {
            return new ST_SignedHpsMeasure(2, c.value);
        }
        throw DocCoreUtils.n(ST_SignedHpsMeasure.$, a);
    };
    ST_SignedHpsMeasure.$t = markStruct(ST_SignedHpsMeasure, 'ST_SignedHpsMeasure');
    return ST_SignedHpsMeasure;
}(ValueType));
export { ST_SignedHpsMeasure };
