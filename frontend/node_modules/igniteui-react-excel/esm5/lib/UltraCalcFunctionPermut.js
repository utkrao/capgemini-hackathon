/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { markType } from "igniteui-react-core";
import { truncate, intDivide } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionPermut = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionPermut, _super);
    function UltraCalcFunctionPermut() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionPermut.prototype.evaluate = function (a, b) {
        var c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var d = truncate(c._toDecimal2());
        c = a.pop();
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var e = truncate(c._toDecimal2());
        if (e < 0 || d < 0 || d > e) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(4));
        }
        var f = UltraCalcFunctionPermut._ak(e, d);
        return new ExcelCalcValue(f);
    };
    UltraCalcFunctionPermut.prototype.get_name = function () {
        return "permut";
    };
    Object.defineProperty(UltraCalcFunctionPermut.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionPermut.prototype.get_minArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionPermut.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionPermut.prototype.get_maxArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionPermut.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionPermut._ak = function (a, b) {
        if (b > a) {
            return NaN;
        }
        var c = 1;
        while (true) {
            if (b == 0) {
                break;
            }
            if (b < 0) {
                break;
            }
            if (b > intDivide(a, 2)) {
                b = a - b;
            }
            else {
                c *= a;
                a--;
                b--;
            }
        }
        return c;
    };
    UltraCalcFunctionPermut.$t = markType(UltraCalcFunctionPermut, 'UltraCalcFunctionPermut', BuiltInFunctionBase.$);
    return UltraCalcFunctionPermut;
}(BuiltInFunctionBase));
export { UltraCalcFunctionPermut };
