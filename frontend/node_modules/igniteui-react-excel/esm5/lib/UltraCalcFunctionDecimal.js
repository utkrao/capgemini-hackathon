/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
/**
 * @hidden
 */
var UltraCalcFunctionDecimal = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionDecimal, _super);
    function UltraCalcFunctionDecimal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionDecimal.prototype.evaluate = function (a, b) {
        var c = a.pop();
        var d = a.pop();
        if (d.isError) {
            return new ExcelCalcValue(d.toErrorValue());
        }
        if (c.isError) {
            return new ExcelCalcValue(c.toErrorValue());
        }
        var e = d.toString();
        var f = c._toInt641();
        if (e.length > 255) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(1));
        }
        if (f < 2 || f > 36) {
            return new ExcelCalcValue(new ExcelCalcErrorValue(4));
        }
        if (Math.pow(f, e.length) > 0x7FFFFFFFFFFFFFFF) {
            var g = 1;
            var h = 0;
            for (var i = e.length - 1; i >= 0; i--) {
                var j = e.charAt(i);
                var k = void 0;
                if ('0'.charCodeAt(0) <= j.charCodeAt(0) && j.charCodeAt(0) <= '9'.charCodeAt(0)) {
                    k = j.charCodeAt(0) - 48;
                }
                else if ('a'.charCodeAt(0) <= j.charCodeAt(0) && j.charCodeAt(0) <= 'z'.charCodeAt(0)) {
                    k = j.charCodeAt(0) - 87;
                }
                else if ('A'.charCodeAt(0) <= j.charCodeAt(0) && j.charCodeAt(0) <= 'Z'.charCodeAt(0)) {
                    k = j.charCodeAt(0) - 55;
                }
                else {
                    k = 0x7FFFFFFF;
                }
                if (k > f) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                }
                h += (g * k);
                g *= f;
            }
            return new ExcelCalcValue(h);
        }
        else {
            var l = 1;
            var m = 0;
            for (var n = e.length - 1; n >= 0; n--) {
                var o = e.charAt(n);
                var p = void 0;
                if ('0'.charCodeAt(0) <= o.charCodeAt(0) && o.charCodeAt(0) <= '9'.charCodeAt(0)) {
                    p = o.charCodeAt(0) - 48;
                }
                else if ('a'.charCodeAt(0) <= o.charCodeAt(0) && o.charCodeAt(0) <= 'z'.charCodeAt(0)) {
                    p = o.charCodeAt(0) - 87;
                }
                else if ('A'.charCodeAt(0) <= o.charCodeAt(0) && o.charCodeAt(0) <= 'Z'.charCodeAt(0)) {
                    p = o.charCodeAt(0) - 55;
                }
                else {
                    p = 0x7FFFFFFF;
                }
                if (p > f) {
                    return new ExcelCalcValue(new ExcelCalcErrorValue(4));
                }
                m += (l * p);
                l *= f;
            }
            return new ExcelCalcValue(m);
        }
    };
    UltraCalcFunctionDecimal.prototype.get_maxArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionDecimal.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDecimal.prototype.get_minArgs = function () {
        return 2;
    };
    Object.defineProperty(UltraCalcFunctionDecimal.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDecimal.prototype.get_name = function () {
        return "decimal";
    };
    Object.defineProperty(UltraCalcFunctionDecimal.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionDecimal.$t = markType(UltraCalcFunctionDecimal, 'UltraCalcFunctionDecimal', BuiltInFunctionBase.$);
    return UltraCalcFunctionDecimal;
}(BuiltInFunctionBase));
export { UltraCalcFunctionDecimal };
