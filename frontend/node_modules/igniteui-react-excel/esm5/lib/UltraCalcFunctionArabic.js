/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { BuiltInFunctionBase } from "./BuiltInFunctionBase";
import { ExcelCalcValue } from "./ExcelCalcValue";
import { markType } from "igniteui-react-core";
import { ExcelCalcErrorValue } from "./ExcelCalcErrorValue";
import { stringIsNullOrWhiteSpace } from "igniteui-react-core";
/**
 * @hidden
 */
var UltraCalcFunctionArabic = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(UltraCalcFunctionArabic, _super);
    function UltraCalcFunctionArabic() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UltraCalcFunctionArabic.prototype.evaluate = function (a, b) {
        var c = a.pop();
        var d = c.toString();
        var e = 0;
        if (!stringIsNullOrWhiteSpace(d)) {
            d = d.trim();
            var f = d.charAt(0) == '-';
            if (f && d.length == 1) {
                return new ExcelCalcValue(new ExcelCalcErrorValue(4));
            }
            var g = f ? 1 : 0;
            var h = 0;
            for (var i = d.length - 1; i >= g; i--) {
                var j = d.charAt(i);
                var k = -1;
                switch (j) {
                    case 'm':
                    case 'M':
                        k = 1000;
                        break;
                    case 'D':
                    case 'd':
                        k = 500;
                        break;
                    case 'C':
                    case 'c':
                        k = 100;
                        break;
                    case 'L':
                    case 'l':
                        k = 50;
                        break;
                    case 'X':
                    case 'x':
                        k = 10;
                        break;
                    case 'V':
                    case 'v':
                        k = 5;
                        break;
                    case 'I':
                    case 'i':
                        k = 1;
                        break;
                    default: return new ExcelCalcValue(new ExcelCalcErrorValue(1));
                }
                e += h <= k ? k : -k;
                if (k > h) {
                    h = k;
                }
            }
            if (f) {
                e = -e;
            }
        }
        return new ExcelCalcValue(e);
    };
    UltraCalcFunctionArabic.prototype.get_maxArgs = function () {
        return 1;
    };
    Object.defineProperty(UltraCalcFunctionArabic.prototype, "maxArgs", {
        get: function () {
            return this.get_maxArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionArabic.prototype.get_minArgs = function () {
        return 1;
    };
    Object.defineProperty(UltraCalcFunctionArabic.prototype, "minArgs", {
        get: function () {
            return this.get_minArgs();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionArabic.prototype.get_name = function () {
        return "arabic";
    };
    Object.defineProperty(UltraCalcFunctionArabic.prototype, "name", {
        get: function () {
            return this.get_name();
        },
        enumerable: false,
        configurable: true
    });
    UltraCalcFunctionArabic.$t = markType(UltraCalcFunctionArabic, 'UltraCalcFunctionArabic', BuiltInFunctionBase.$);
    return UltraCalcFunctionArabic;
}(BuiltInFunctionBase));
export { UltraCalcFunctionArabic };
