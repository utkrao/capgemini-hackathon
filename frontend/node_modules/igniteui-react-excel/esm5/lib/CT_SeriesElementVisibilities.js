/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
/**
 * @hidden
 */
var CT_SeriesElementVisibilities = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_SeriesElementVisibilities, _super);
    function CT_SeriesElementVisibilities() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.c = toNullable(Boolean_$type, null);
        _this.e = toNullable(Boolean_$type, null);
        _this.g = toNullable(Boolean_$type, null);
        _this.i = toNullable(Boolean_$type, null);
        _this.k = toNullable(Boolean_$type, null);
        return _this;
    }
    Object.defineProperty(CT_SeriesElementVisibilities.prototype, "b", {
        get: function () {
            return this.c;
        },
        set: function (a) {
            this.c = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SeriesElementVisibilities.prototype, "d", {
        get: function () {
            return this.e;
        },
        set: function (a) {
            this.e = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SeriesElementVisibilities.prototype, "f", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SeriesElementVisibilities.prototype, "h", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CT_SeriesElementVisibilities.prototype, "j", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
        },
        enumerable: false,
        configurable: true
    });
    CT_SeriesElementVisibilities.a = function (a) {
        var b = toNullable(Boolean_$type, null);
        var c = toNullable(Boolean_$type, null);
        var d = toNullable(Boolean_$type, null);
        var e = toNullable(Boolean_$type, null);
        var f = toNullable(Boolean_$type, null);
        var g = CT_SeriesElementVisibilities.m(a, b, c, d, e, f);
        b = g.p1;
        c = g.p2;
        d = g.p3;
        e = g.p4;
        f = g.p5;
        return ((function () {
            var $ret = new CT_SeriesElementVisibilities();
            $ret.b = b;
            $ret.d = c;
            $ret.f = d;
            $ret.h = e;
            $ret.j = f;
            return $ret;
        })());
    };
    CT_SeriesElementVisibilities.m = function (a, b, c, d, e, f) {
        var e_1, _a;
        b = toNullable(Boolean_$type, null);
        c = toNullable(Boolean_$type, null);
        d = toNullable(Boolean_$type, null);
        e = toNullable(Boolean_$type, null);
        f = toNullable(Boolean_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var g = _c.value;
                switch (g.a.e(a.d)) {
                    case "connectorLines":
                        b = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "meanLine":
                        c = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "meanMarker":
                        d = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "nonoutliers":
                        e = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    case "outliers":
                        f = toNullable(Boolean_$type, ST_OnOff.e(g.d));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        ;
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f
        };
    };
    CT_SeriesElementVisibilities.n = function (a, b, c, d, e, f, g) {
        if (c === void 0) {
            c = toNullable(Boolean_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Boolean_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Boolean_$type, null);
        }
        if (f === void 0) {
            f = toNullable(Boolean_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Boolean_$type, null);
        }
        a.ad.p(b, "cx");
        var h = null;
        var i = null;
        if (c.hasValue) {
            i = "connectorLines";
            h = ST_OnOff.g(c.value);
            a.ad.h(i, h);
        }
        if (d.hasValue) {
            i = "meanLine";
            h = ST_OnOff.g(d.value);
            a.ad.h(i, h);
        }
        if (e.hasValue) {
            i = "meanMarker";
            h = ST_OnOff.g(e.value);
            a.ad.h(i, h);
        }
        if (f.hasValue) {
            i = "nonoutliers";
            h = ST_OnOff.g(f.value);
            a.ad.h(i, h);
        }
        if (g.hasValue) {
            i = "outliers";
            h = ST_OnOff.g(g.value);
            a.ad.h(i, h);
        }
        ;
    };
    CT_SeriesElementVisibilities.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_SeriesElementVisibilities.$t = markType(CT_SeriesElementVisibilities, 'CT_SeriesElementVisibilities');
    return CT_SeriesElementVisibilities;
}(Base));
export { CT_SeriesElementVisibilities };
