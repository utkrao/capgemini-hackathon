/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, toNullable, Number_$type, Boolean_$type, fromEnum, markType, getInstanceType } from "igniteui-react-core";
import { ST_HorizontalAlignment_$type } from "./ST_HorizontalAlignment";
import { ST_VerticalAlignment_$type } from "./ST_VerticalAlignment";
import { XmlNamespaceDefinitionBase } from "./XmlNamespaceDefinitionBase";
import { CultureInfo } from "igniteui-react-core";
import { ST_OnOff } from "./ST_OnOff";
import { parseUInt32_1, parseInt32_1 } from "igniteui-react-core";
/**
 * @hidden
 */
var CT_CellAlignment = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CT_CellAlignment, _super);
    function CT_CellAlignment() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.a = toNullable(ST_HorizontalAlignment_$type, null);
        _this.h = toNullable(ST_VerticalAlignment_$type, null);
        _this.g = toNullable(Number_$type, null);
        _this.i = toNullable(Boolean_$type, null);
        _this.b = toNullable(Number_$type, null);
        _this.e = toNullable(Number_$type, null);
        _this.c = toNullable(Boolean_$type, null);
        _this.f = toNullable(Boolean_$type, null);
        _this.d = toNullable(Number_$type, null);
        return _this;
    }
    CT_CellAlignment.k = function (a, b, c, d, e, f, g, h, i, j) {
        var e_1, _a;
        b = toNullable(ST_HorizontalAlignment_$type, null);
        c = toNullable(ST_VerticalAlignment_$type, null);
        d = toNullable(Number_$type, null);
        e = toNullable(Boolean_$type, null);
        f = toNullable(Number_$type, null);
        g = toNullable(Number_$type, null);
        h = toNullable(Boolean_$type, null);
        i = toNullable(Boolean_$type, null);
        j = toNullable(Number_$type, null);
        try {
            for (var _b = __values(fromEnum(a.ab.u)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var k = _c.value;
                switch (k.a.e(a.d)) {
                    case "horizontal":
                        b = toNullable(ST_HorizontalAlignment_$type, XmlNamespaceDefinitionBase.b(ST_HorizontalAlignment_$type, k.d));
                        break;
                    case "vertical":
                        c = toNullable(ST_VerticalAlignment_$type, XmlNamespaceDefinitionBase.b(ST_VerticalAlignment_$type, k.d));
                        break;
                    case "textRotation":
                        d = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "wrapText":
                        e = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "indent":
                        f = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "relativeIndent":
                        g = toNullable(Number_$type, parseInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    case "justifyLastLine":
                        h = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "shrinkToFit":
                        i = toNullable(Boolean_$type, ST_OnOff.e(k.d));
                        break;
                    case "readingOrder":
                        j = toNullable(Number_$type, parseUInt32_1(k.d, CultureInfo.invariantCulture));
                        break;
                    default: break;
                }
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return {
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f,
            p6: g,
            p7: h,
            p8: i,
            p9: j
        };
    };
    CT_CellAlignment.l = function (a, b, c, d, e, f, g, h, i, j, k) {
        if (c === void 0) {
            c = toNullable(ST_HorizontalAlignment_$type, null);
        }
        if (d === void 0) {
            d = toNullable(Number_$type, null);
        }
        if (e === void 0) {
            e = toNullable(Boolean_$type, null);
        }
        if (f === void 0) {
            f = toNullable(Number_$type, null);
        }
        if (g === void 0) {
            g = toNullable(Number_$type, null);
        }
        if (h === void 0) {
            h = toNullable(Boolean_$type, null);
        }
        if (i === void 0) {
            i = toNullable(Number_$type, null);
        }
        if (j === void 0) {
            j = toNullable(ST_VerticalAlignment_$type, null);
        }
        if (k === void 0) {
            k = toNullable(Boolean_$type, null);
        }
        a.ad.p(b, null);
        var l = null;
        var m = null;
        if (c.hasValue) {
            m = "horizontal";
            l = XmlNamespaceDefinitionBase.p(ST_HorizontalAlignment_$type, c.value);
            a.ad.h(m, l);
        }
        if (d.hasValue) {
            m = "indent";
            l = d.value.toString();
            a.ad.h(m, l);
        }
        if (e.hasValue) {
            m = "justifyLastLine";
            l = ST_OnOff.g(e.value);
            a.ad.h(m, l);
        }
        if (f.hasValue) {
            m = "readingOrder";
            l = f.value.toString();
            a.ad.h(m, l);
        }
        if (g.hasValue) {
            m = "relativeIndent";
            l = g.value.toString();
            a.ad.h(m, l);
        }
        if (h.hasValue) {
            m = "shrinkToFit";
            l = ST_OnOff.g(h.value);
            a.ad.h(m, l);
        }
        if (i.hasValue) {
            m = "textRotation";
            l = i.value.toString();
            a.ad.h(m, l);
        }
        if (j.hasValue) {
            m = "vertical";
            l = XmlNamespaceDefinitionBase.p(ST_VerticalAlignment_$type, j.value);
            a.ad.h(m, l);
        }
        if (k.hasValue) {
            m = "wrapText";
            l = ST_OnOff.g(k.value);
            a.ad.h(m, l);
        }
    };
    CT_CellAlignment.prototype.toString = function () {
        var a = getInstanceType(this);
        return a != null ? a.typeName : _super.prototype.toString.call(this);
    };
    CT_CellAlignment.$t = markType(CT_CellAlignment, 'CT_CellAlignment');
    return CT_CellAlignment;
}(Base));
export { CT_CellAlignment };
