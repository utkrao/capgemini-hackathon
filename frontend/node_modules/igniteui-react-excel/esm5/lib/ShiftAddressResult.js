/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "igniteui-react-core";
/**
 * @hidden
 */
var ShiftAddressResult = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ShiftAddressResult, _super);
    function ShiftAddressResult(a) {
        var _rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _rest[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.a = 0;
        _this.e = false;
        a = (a == void 0) ? 0 : a;
        switch (a) {
            case 0:
                {
                    var c = _rest[0];
                    var d = [c, 0];
                    {
                        var f = d[0];
                        var g = d[1];
                        _this.e = f;
                        _this.a = g;
                    }
                }
                break;
            case 1:
                {
                    var c = _rest[0];
                    var d = _rest[1];
                    _this.e = c;
                    _this.a = d;
                }
                break;
        }
        return _this;
    }
    Object.defineProperty(ShiftAddressResult.prototype, "b", {
        get: function () {
            return this.a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShiftAddressResult.prototype, "f", {
        get: function () {
            return this.e;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShiftAddressResult.prototype, "g", {
        get: function () {
            return this.a != 0;
        },
        enumerable: false,
        configurable: true
    });
    ShiftAddressResult.$t = markType(ShiftAddressResult, 'ShiftAddressResult');
    ShiftAddressResult.d = new ShiftAddressResult(0, false);
    ShiftAddressResult.c = new ShiftAddressResult(0, true);
    return ShiftAddressResult;
}(Base));
export { ShiftAddressResult };
