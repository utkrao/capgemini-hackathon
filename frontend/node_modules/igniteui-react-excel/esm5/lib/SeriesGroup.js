/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, Number_$type, markType } from "igniteui-react-core";
import { ComboChartGroup } from "./ComboChartGroup";
import { List$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { Dictionary$2 } from "igniteui-react-core";
import { intSToU } from "igniteui-react-core";
import { stringFormat } from "igniteui-react-core";
/**
 * @hidden
 */
var SeriesGroup = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SeriesGroup, _super);
    function SeriesGroup(a, b) {
        var _this = _super.call(this) || this;
        _this.c = null;
        _this.d = null;
        _this.b = 0;
        _this.a = 0;
        _this.b = a;
        _this.a = b;
        _this.d = new List$1(Series.$, 0);
        _this.c = new Dictionary$2(Series.$, Number_$type, 0);
        return _this;
    }
    Object.defineProperty(SeriesGroup.prototype, "e", {
        get: function () {
            return ComboChartGroup._at(this.b, this.a);
        },
        enumerable: false,
        configurable: true
    });
    SeriesGroup.prototype.toString = function () {
        return stringFormat("{0}; {1} series", this.e, this.d.count);
    };
    SeriesGroup.prototype.h = function (a, b, c) {
        this.d.add(a);
        this.c.addItem(a, b);
    };
    SeriesGroup.prototype.g = function (a) {
        var _this = this;
        var b = 0;
        if (((function () { var c = _this.c.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
            return intSToU(b);
        }
        else {
        }
        return 0;
    };
    SeriesGroup.$t = markType(SeriesGroup, 'SeriesGroup');
    return SeriesGroup;
}(Base));
export { SeriesGroup };
