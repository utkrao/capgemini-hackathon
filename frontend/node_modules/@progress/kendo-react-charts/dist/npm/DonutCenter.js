"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DonutCenter = void 0;
var React = require("react");
var kendo_charts_1 = require("@progress/kendo-charts");
var ChartContext_1 = require("./ChartContext");
/**
 * @hidden
 */
var DonutCenter = /** @class */ (function (_super) {
    __extends(DonutCenter, _super);
    function DonutCenter(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.context = null;
        _this.state = {
            donutCenterStyles: null
        };
        _this.chartObserver = new kendo_charts_1.InstanceObserver(_this, {
            render: 'onRender'
        });
        context.observersStore.dispatch({
            type: 'add',
            payload: _this.chartObserver
        });
        return _this;
    }
    DonutCenter.prototype.render = function () {
        var render = this.props.render;
        var donutCenterStyles = this.state.donutCenterStyles;
        var renderer = null;
        if (render && donutCenterStyles) {
            renderer = (React.createElement("div", { className: "k-chart-donut-center", style: donutCenterStyles }, render()));
        }
        return renderer;
    };
    DonutCenter.prototype.onRender = function (event) {
        var _a;
        var series = (_a = this.context) === null || _a === void 0 ? void 0 : _a.optionsStore.getState().series;
        var firstSeries = Array.isArray(series) ? series[0] : null;
        var charts = event.sender._plotArea.charts;
        if (!firstSeries || firstSeries.type !== 'donut' || charts[0].points.length === 0) {
            return;
        }
        var sector = charts[0].points[0].sector;
        var radius = sector.innerRadius;
        var top = sector.center.y - radius;
        var left = sector.center.x - radius;
        var size = radius * 2;
        this.setState({
            donutCenterStyles: {
                height: size,
                left: left,
                top: top,
                width: size
            }
        });
    };
    DonutCenter.contextType = ChartContext_1.ChartContext;
    return DonutCenter;
}(React.Component));
exports.DonutCenter = DonutCenter;
