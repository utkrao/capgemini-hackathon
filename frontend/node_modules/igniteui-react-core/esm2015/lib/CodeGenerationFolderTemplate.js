/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, typeCast, fromEnum, Number_$type, markType } from "./type";
import { ICodeGenerationRendererTemplate_$type } from "./ICodeGenerationRendererTemplate";
import { List$1 } from "./List$1";
import { JsonDictionaryObject } from "./JsonDictionaryObject";
import { JsonDictionaryArray } from "./JsonDictionaryArray";
import { JsonDictionaryItem } from "./JsonDictionaryItem";
import { JsonDictionaryValue } from "./JsonDictionaryValue";
import { JsonDictionaryParser } from "./JsonDictionaryParser";
import { HashSet$1 } from "./HashSet$1";
import { CodeGeneratingImportManager } from "./CodeGeneratingImportManager";
import { CodeGeneratingRegexHelper } from "./CodeGeneratingRegexHelper";
import { Tuple$3 } from "./Tuple$3";
import { StringBuilder } from "./StringBuilder";
import { stringReplace, stringStartsWith } from "./string";
/**
 * @hidden
 */
export let CodeGenerationFolderTemplate = /*@__PURE__*/ (() => {
    class CodeGenerationFolderTemplate extends Base {
        constructor() {
            super(...arguments);
            this.d = new List$1(String_$type, 0);
            this.b = new List$1(String_$type, 0);
            this.c = new List$1(String_$type, 0);
        }
        addFile(a, b) {
            this.d.add(a);
            this.b.add(b);
        }
        getFilePaths() {
            return this.d.toArray();
        }
        getFileOuutput(a) {
            for (let b = 0; b < this.d.count; b++) {
                if (this.d._inner[b] == a) {
                    return this.c._inner[b];
                }
            }
            return null;
        }
        saveTemplateToJson() {
            let a = new JsonDictionaryObject();
            let b = new JsonDictionaryArray();
            let c = new List$1(JsonDictionaryItem.$, 0);
            for (let d = 0; d < this.d.count; d++) {
                let e = new JsonDictionaryObject();
                let f = ((() => {
                    let $ret = new JsonDictionaryValue();
                    $ret.e = 2;
                    $ret.value = this.d._inner[d];
                    return $ret;
                })());
                let g = ((() => {
                    let $ret = new JsonDictionaryValue();
                    $ret.e = 2;
                    $ret.value = this.b._inner[d];
                    return $ret;
                })());
                e.item("path", f);
                e.item("content", g);
                c.add(e);
            }
            b.items = c.toArray();
            a.item("files", b);
            return a.b();
        }
        loadTemplateFromJson(a) {
            let b = new JsonDictionaryParser();
            let c = b.parse(a);
            if (typeCast(JsonDictionaryObject.$, c) !== null) {
                let d = c;
                if (d.g("files")) {
                    let e = d.item("Files");
                    if (typeCast(JsonDictionaryArray.$, e) !== null) {
                        let f = e;
                        for (let g = 0; g < f.items.length; g++) {
                            let h = f.items[g];
                            if (typeCast(JsonDictionaryObject.$, h) !== null) {
                                let i = h;
                                if (i.g("path") && i.g("content")) {
                                    this.d.add(i.item("path").value.toString());
                                    this.b.add(i.item("content").value.toString());
                                }
                            }
                        }
                    }
                }
            }
        }
        execute(a) {
            this.c.clear();
            for (let b = 0; b < this.b.count; b++) {
                this.c.add(this.b._inner[b]);
            }
            let c = a.getKeys();
            let d = new HashSet$1(String_$type, 0);
            for (let e = 0; e < c.length; e++) {
                d.add_1(c[e]);
            }
            let f = a.getImportsKeys();
            for (let g = 0; g < f.length; g++) {
                d.add_1(f[g]);
            }
            let h = a.getStringNames();
            for (let i = 0; i < h.length; i++) {
                d.add_1(h[i]);
            }
            let j = a.getPackages();
            for (let k = 0; k < j.length; k++) {
                d.add_1(j[k]);
            }
            for (let l = 0; l < this.b.count; l++) {
                let m = this.c._inner[l];
                m = this.h(m, d);
                this.c._inner[l] = m;
            }
            for (let n = 0; n < this.b.count; n++) {
                let o = new List$1(String_$type, 0);
                let r = a.getImportsKeys();
                for (let q = 0; q < r.length; q++) {
                    let p = r[q];
                    o.add(p);
                }
                let s = this.c._inner[n];
                s = this.j(s, o.toArray(), a);
                this.c._inner[n] = s;
            }
            let v = a.getKeys();
            for (let u = 0; u < v.length; u++) {
                let t = v[u];
                for (let w = 0; w < this.b.count; w++) {
                    let x = this.c._inner[w];
                    let y = a.getContentForKey(t);
                    x = this.i(x, t, y, a);
                    this.c._inner[w] = x;
                }
            }
            let ab = a.getStringNames();
            for (let aa = 0; aa < ab.length; aa++) {
                let z = ab[aa];
                for (let ac = 0; ac < this.b.count; ac++) {
                    let ad = this.c._inner[ac];
                    ad = stringReplace(ad, "$$" + z, a.getString(z));
                    this.c._inner[ac] = ad;
                }
            }
            for (let ae of fromEnum(a.getNewFiles())) {
                let af = a.getNewFileContent(ae);
                let ag = "";
                for (let ah of fromEnum(this.d)) {
                    if (stringStartsWith(ah, "src")) {
                        ag = "src/";
                    }
                }
                this.d.add(ag + ae);
                this.c.add(af);
            }
        }
        h(a, b) {
            return a;
        }
        j(a, b, c) {
            let d = new List$1(Tuple$3.$.specialize(Number_$type, String_$type, CodeGeneratingImportManager.$), 0);
            for (let f = 0; f < b.length; f++) {
                let e = b[f];
                let g = new CodeGeneratingRegexHelper("(?:(<!--)|(\\/\\/))\\s*insert " + e + "(?:(\\s*-->)?)[\\w\\W\\r\\n]*?(?:(<!--)|(\\/\\/))\\s*end " + e + "(?:(\\s*-->)?)((\\r\\n)|(\\n))");
                a = g.b(a, (h, i, j) => {
                    let k = c.r(e);
                    let l = new CodeGeneratingImportManager();
                    for (let m of fromEnum(k)) {
                        l = CodeGeneratingImportManager.merge(l, m);
                    }
                    d.add(new Tuple$3(Number_$type, String_$type, CodeGeneratingImportManager.$, i, e, l));
                    return null;
                });
            }
            d.aa((h, i) => Base.compareSimple(h.c, i.c));
            let h = new CodeGeneratingImportManager();
            for (let i of fromEnum(d)) {
                let j = i.d;
                let k = i.e;
                let l = k.removeDuplicates(h);
                h = CodeGeneratingImportManager.merge(h, k);
                let m = new CodeGeneratingRegexHelper("(?:(<!--)|(\\/\\/))\\s*insert " + j + "(?:(\\s*-->)?)[\\w\\W\\r\\n]*?(?:(<!--)|(\\/\\/))\\s*end " + j + "(?:(\\s*-->)?)((\\r\\n)|(\\n))");
                a = m.b(a, (n, o, p) => {
                    let q = this.g(l, c);
                    if (q != null && q.length > 0) {
                        q = this.e(q, a, o, c);
                    }
                    return q;
                });
            }
            return a;
        }
        e(a, b, c, d) {
            let e = c;
            let f = 0;
            let g = 0;
            let h = "";
            while (e > 0) {
                if (b.charAt(e) == ' ') {
                    h += ' ';
                }
                if (b.charAt(e) == '\t') {
                    h += '\t';
                }
                if (b.charAt(e) == '\n') {
                    break;
                }
                e--;
            }
            let i = new StringBuilder(0);
            let j = stringReplace(a, "\r\n", "\n").split('\n');
            for (let k = 0; k < j.length; k++) {
                if (k == j.length - 1 && j[k].length == 0) {
                    continue;
                }
                let l = j[k];
                if (k > 0) {
                    i.l(h);
                }
                i.u(l);
            }
            return i.toString();
        }
        g(a, b) {
            if (a.hasPackageImports) {
                return a.packageImportsToString();
            }
            else {
                return a.usingsToString();
            }
        }
        i(a, b, c, d) {
            let e = new CodeGeneratingRegexHelper("(?:(<!--)|(\\/\\/))\\s*insert " + b + "(?:(\\s*-->)?)[\\w\\W\\r\\n]*?(?:(<!--)|(\\/\\/))\\s*end " + b + "(?:(\\s*-->)?)((\\r\\n)|(\\n))");
            a = e.b(a, (f, g, h) => {
                if (c != null && c.length > 0) {
                    c = this.e(c, a, g, d);
                }
                return c;
            });
            return a;
        }
    }
    CodeGenerationFolderTemplate.$t = /*@__PURE__*/ markType(CodeGenerationFolderTemplate, 'CodeGenerationFolderTemplate', Base.$, [ICodeGenerationRendererTemplate_$type]);
    return CodeGenerationFolderTemplate;
})();
