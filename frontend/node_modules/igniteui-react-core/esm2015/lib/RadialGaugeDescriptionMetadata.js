/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { FormatRadialGaugeLabelEventArgsDescriptionMetadata } from "./FormatRadialGaugeLabelEventArgsDescriptionMetadata";
import { AlignRadialGaugeLabelEventArgsDescriptionMetadata } from "./AlignRadialGaugeLabelEventArgsDescriptionMetadata";
import { DoubleValueChangedEventArgsDescriptionMetadata } from "./DoubleValueChangedEventArgsDescriptionMetadata";
import { RadialGaugeDescription } from "./RadialGaugeDescription";
/**
 * @hidden
 */
export let RadialGaugeDescriptionMetadata = /*@__PURE__*/ (() => {
    class RadialGaugeDescriptionMetadata extends Base {
        static e(a) {
            a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:TextStyle/FontFamilyTransform)String");
            a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:TextStyle/FontSizeTransform)Number:double");
            a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontStyle/FontStyleTransform,wf:FontStyle/FontStyleTransform,web:TextStyle/FontStyleTransform)String");
            a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontStyle/FontWeightTransform,wf:FontStyle/FontWeightTransform,web:TextStyle/FontWeightTransform)String");
            a.item("_qualifiedName", "String:Infragistics.Controls.Gauges.XamRadialGauge");
            a.item("Width", "(w:Width/DimensionTransform,xam:Width/DimensionTransform)String");
            a.item("Height", "(w:Height/DimensionTransform,xam:Height/DimensionTransform)String");
            a.item("LegendRef", "(w:Legend)DataRef:String");
            a.item("Background", "(wf:BackColor/ColorTransform)Brush");
        }
        static b(a) {
            if (RadialGaugeDescriptionMetadata.a == null) {
                RadialGaugeDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                RadialGaugeDescriptionMetadata.c(RadialGaugeDescriptionMetadata.a);
            }
            if (a.g(RadialGaugeDescriptionMetadata.a)) {
                return;
            }
            a.s(RadialGaugeDescriptionMetadata.a);
            FormatRadialGaugeLabelEventArgsDescriptionMetadata.d(a);
            AlignRadialGaugeLabelEventArgsDescriptionMetadata.d(a);
            DoubleValueChangedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("RangeBrushes", "BrushCollection:string");
            a.item("RangeOutlines", "BrushCollection:string");
            a.item("MinimumValue", "Number:double");
            a.item("ActualMinimumValue", "Number:double");
            a.item("MaximumValue", "Number:double");
            a.item("ActualMaximumValue", "Number:double");
            a.item("Interval", "Number:double");
            a.item("CenterX", "Number:double");
            a.item("CenterY", "Number:double");
            a.item("Value", "Number:double");
            a.item("ScaleStartAngle", "Number:double");
            a.item("ScaleEndAngle", "Number:double");
            a.item("ScaleSweepDirection", "ExportedType:string:SweepDirection");
            a.item("ScaleSweepDirection@names", "Counterclockwise;Clockwise");
            a.item("TransitionDuration", "Number:int");
            a.item("TransitionEasingFunctionRef", "(w:TransitionEasingFunction,wf:TransitionEasingFunction)MethodRef");
            a.item("NeedleBrush", "Brush");
            a.item("NeedleOutline", "Brush");
            a.item("NeedleStartExtent", "Number:double");
            a.item("NeedleEndExtent", "Number:double");
            a.item("NeedleShape", "ExportedType:string:RadialGaugeNeedleShape");
            a.item("NeedleShape@names", "None;Rectangle;Triangle;Needle;Trapezoid;RectangleWithBulb;TriangleWithBulb;NeedleWithBulb;TrapezoidWithBulb");
            a.item("NeedleStartWidthRatio", "Number:double");
            a.item("NeedleEndWidthRatio", "Number:double");
            a.item("NeedleBaseFeatureWidthRatio", "Number:double");
            a.item("NeedleBaseFeatureExtent", "Number:double");
            a.item("NeedlePointFeatureWidthRatio", "Number:double");
            a.item("NeedlePointFeatureExtent", "Number:double");
            a.item("NeedlePivotWidthRatio", "Number:double");
            a.item("NeedlePivotInnerWidthRatio", "Number:double");
            a.item("NeedlePivotShape", "ExportedType:string:RadialGaugePivotShape");
            a.item("NeedlePivotShape@names", "None;Circle;CircleWithHole;CircleOverlay;CircleOverlayWithHole;CircleUnderlay;CircleUnderlayWithHole");
            a.item("ScaleStartExtent", "Number:double");
            a.item("NeedlePivotBrush", "Brush");
            a.item("NeedlePivotOutline", "Brush");
            a.item("NeedleStrokeThickness", "Number:double");
            a.item("NeedlePivotStrokeThickness", "Number:double");
            a.item("ScaleEndExtent", "Number:double");
            a.item("LabelExtent", "Number:double");
            a.item("LabelInterval", "Number:double");
            a.item("TickStartExtent", "Number:double");
            a.item("TickEndExtent", "Number:double");
            a.item("TickStrokeThickness", "Number:double");
            a.item("TickBrush", "Brush");
            a.item("FontBrush", "Brush");
            a.item("MinorTickStartExtent", "Number:double");
            a.item("MinorTickEndExtent", "Number:double");
            a.item("MinorTickStrokeThickness", "Number:double");
            a.item("MinorTickBrush", "Brush");
            a.item("MinorTickCount", "Number:double");
            a.item("ScaleBrush", "Brush");
            a.item("BackingBrush", "Brush");
            a.item("BackingOutline", "Brush");
            a.item("BackingStrokeThickness", "Number:double");
            a.item("BackingOuterExtent", "Number:double");
            a.item("BackingOversweep", "Number:double");
            a.item("ScaleOversweep", "Number:double");
            a.item("ScaleOversweepShape", "ExportedType:string:RadialGaugeScaleOversweepShape");
            a.item("ScaleOversweepShape@names", "Auto;Circular;Fitted");
            a.item("BackingCornerRadius", "Number:double");
            a.item("BackingInnerExtent", "Number:double");
            a.item("BackingShape", "ExportedType:string:RadialGaugeBackingShape");
            a.item("BackingShape@names", "Circular;Fitted");
            a.item("Ranges", "Collection:RadialGaugeRange:RadialGaugeRangeCollection:RadialGaugeRange");
            a.item("RadiusMultiplier", "Number:double");
            a.item("DuplicateLabelOmissionStrategy", "ExportedType:string:RadialGaugeDuplicateLabelOmissionStrategy");
            a.item("DuplicateLabelOmissionStrategy@names", "OmitLast;OmitFirst;OmitNeither;OmitBoth");
            a.item("IsNeedleDraggingEnabled", "Boolean");
            a.item("IsNeedleDraggingConstrained", "Boolean");
            a.item("Font", "String");
            a.item("LabelFormat", "String");
            a.item("LabelFormatSpecifiers", "Collection:FormatSpecifier:FormatSpecifierCollection:FormatSpecifier");
            a.item("TransitionProgress", "Number:double");
            a.item("PixelScalingRatio", "Number:double");
            a.item("ActualPixelScalingRatio", "Number:double");
            a.item("FormatLabelRef", "EventRef::formatLabel");
            a.item("AlignLabelRef", "EventRef::alignLabel");
            a.item("ValueChangedRef", "EventRef::valueChanged");
            a.item("ActualMinimumValueChangeRef", "EventRef::actualMinimumValueChange");
            a.item("ActualMaximumValueChangeRef", "EventRef::actualMaximumValueChange");
            RadialGaugeDescriptionMetadata.e(a);
        }
        static d(a) {
            RadialGaugeDescriptionMetadata.b(a);
            a.u("RadialGauge", () => new RadialGaugeDescription());
            a.t("RadialGauge", RadialGaugeDescriptionMetadata.a);
        }
    }
    RadialGaugeDescriptionMetadata.$t = /*@__PURE__*/ markType(RadialGaugeDescriptionMetadata, 'RadialGaugeDescriptionMetadata');
    RadialGaugeDescriptionMetadata.a = null;
    return RadialGaugeDescriptionMetadata;
})();
