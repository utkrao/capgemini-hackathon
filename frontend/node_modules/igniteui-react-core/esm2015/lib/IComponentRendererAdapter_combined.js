/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Type, String_$type, Delegate_$type, fromEnum, EnumUtil, markType } from "./type";
import { TypeDescriptionMetadata } from "./TypeDescriptionMetadata";
import { Dictionary$2 } from "./Dictionary$2";
import { HashSet$1 } from "./HashSet$1";
import { List$1 } from "./List$1";
import { TypeDescriptionWellKnownType_$type } from "./TypeDescriptionWellKnownType";
import { stringReplace } from "./string";
/**
 * @hidden
 */
export let IComponentRendererAdapter_$type = /*@__PURE__*/ new Type(null, 'IComponentRendererAdapter');
/**
 * @hidden
 */
export let TypeDescriptionContext = /*@__PURE__*/ (() => {
    class TypeDescriptionContext extends Base {
        constructor(a, b) {
            super();
            this.j = new Dictionary$2(String_$type, Base.$, 0);
            this.i = new Dictionary$2(String_$type, Delegate_$type, 0);
            this.d = null;
            this.f = 0;
            this.k = new HashSet$1(Dictionary$2.$.specialize(String_$type, String_$type), 0);
            this.d = a;
            this.f = b;
        }
        s(a) {
            if (!this.k.contains(a)) {
                this.k.add_1(a);
            }
        }
        g(a) {
            return this.k.contains(a);
        }
        t(a, b) {
            this.k.add_1(b);
            this.j.item(a, b);
        }
        u(a, b) {
            this.i.item(a, b);
        }
        static r(key_) {
            if (key_ == null) {
                return null;
            }
            return key_.substr(0, 1).toUpperCase() + key_.substr(1);
        }
        static q(key_) {
            if (key_ == null) {
                return null;
            }
            return key_.substr(0, 1).toLowerCase() + key_.substr(1);
        }
        a() {
            let a = new List$1(String_$type, 0);
            for (let b of fromEnum(this.j.keys)) {
                a.add(b);
            }
            return a.toArray();
        }
        b(a) {
            if (this.j.containsKey(a)) {
                let b = this.j.item(a);
                return new List$1(String_$type, 1, b.keys).toArray();
            }
            else {
                return null;
            }
        }
        getMetadata(a, b) {
            if (this.j.containsKey(a + "@@" + b)) {
                return this.j.item(a + "@@" + b);
            }
            if (this.j.containsKey(a)) {
                let c = new TypeDescriptionMetadata();
                c.owningType = a;
                c.propertyName = b;
                let d = this.j.item(a);
                if (!d.containsKey(b)) {
                    this.j.item(a + "@@" + b, null);
                    return null;
                }
                let e = d.item(b);
                let f = "Unknown";
                let g = null;
                let h = null;
                let i = null;
                let j = e.split(')');
                if (j.length > 1) {
                    let k = j[0];
                    e = j[1];
                    k = stringReplace(k, "(", "");
                    let l = k.split(',');
                    for (let n = 0; n < l.length; n++) {
                        let m = l[n];
                        let o = m.split(':');
                        let p = o[0];
                        let q = o[1];
                        let r = 3;
                        switch (p) {
                            case "web":
                                c.n(3, q);
                                c.n(2, q);
                                c.n(4, q);
                                c.n(1, q);
                                continue;
                            case "xam":
                                c.n(6, q);
                                c.n(7, q);
                                c.n(5, q);
                                c.n(9, q);
                                c.n(10, q);
                                continue;
                            case "w":
                                r = 0;
                                break;
                            case "a":
                                r = 3;
                                break;
                            case "r":
                                r = 2;
                                break;
                            case "j":
                                r = 1;
                                break;
                            case "wc":
                                r = 4;
                                break;
                            case "xf":
                                r = 5;
                                break;
                            case "xa":
                                r = 6;
                                break;
                            case "xi":
                                r = 7;
                                break;
                            case "wf":
                                r = 8;
                                break;
                            case "uwp":
                                r = 9;
                                break;
                            case "winui":
                                r = 10;
                                break;
                        }
                        c.n(r, q);
                    }
                }
                let s = e.split(':');
                if (s.length >= 4) {
                    i = s[3];
                }
                if (s.length >= 3) {
                    g = s[2];
                }
                if (s.length >= 2) {
                    h = s[1];
                }
                if (s.length >= 1) {
                    f = s[0];
                }
                c.knownType = EnumUtil.getEnumValue(TypeDescriptionWellKnownType_$type, EnumUtil.parse(TypeDescriptionWellKnownType_$type, f, true));
                c.specificExternalType = h;
                c.specificType = g;
                c.collectionElementType = i;
                this.j.item(a + "@@" + b, c);
                return c;
            }
            return null;
        }
        o(a) {
            if (this.i.containsKey(a)) {
                return this.i.item(a)();
            }
            return null;
        }
        v(a, b, c, d) {
            if (TypeDescriptionMetadata.shouldCamelize(this.f)) {
                b = TypeDescriptionContext.q(b);
            }
            else {
                b = TypeDescriptionContext.r(b);
            }
            this.d.setPropertyValue(a, b, c, d, null, null);
        }
        w(a, b, c, d) {
            b = TypeDescriptionContext.r(b);
            this.d.setPropertyValue(a, b, c, d, null, null);
        }
        n(a) {
            return this.d.createColorCollection(a);
        }
        m(a) {
            return this.d.createBrushCollection(a);
        }
        p(a, b) {
            return this.d.createObject(a, b, this);
        }
        l(a, b) {
            return this.d.coerceToEnum(a, this, b);
        }
        c(a, b) {
            if (this.j.containsKey(a + "@@" + b + "@names")) {
                return this.j.item(a + "@@" + b + "@names");
            }
            if (this.j.containsKey(a)) {
                let c = this.j.item(a);
                if (!c.containsKey(b + "@names")) {
                    this.j.item(a + "@@" + b + "@names", null);
                    return null;
                }
                let d = c.item(b + "@names");
                let e = d.split(';');
                this.j.item(a + "@@" + b + "@names", e);
                return e;
            }
            else {
                return null;
            }
        }
        h(a, b) {
            if (this.j.containsKey(a + "@@" + b + "@nameBinding")) {
                return this.j.item(a + "@@" + b + "@nameBinding") == "true";
            }
            if (this.j.containsKey(a)) {
                let c = this.j.item(a);
                if (!c.containsKey(b + "@nameBinding")) {
                    this.j.item(a + "@@" + b + "@nameBinding", null);
                    return false;
                }
                let d = c.item(b + "@nameBinding");
                this.j.item(a + "@@" + b + "@names", d);
                return d == "true";
            }
            else {
                return false;
            }
        }
    }
    TypeDescriptionContext.$t = /*@__PURE__*/ markType(TypeDescriptionContext, 'TypeDescriptionContext');
    return TypeDescriptionContext;
})();
