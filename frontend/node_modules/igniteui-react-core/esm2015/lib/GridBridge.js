/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { PanelBridge } from "./PanelBridge";
import { INativeUIGridBridge_$type } from "./INativeUIGridBridge";
import { List$1 } from "./List$1";
import { GridBridgeColumnDefinition } from "./GridBridgeColumnDefinition";
import { GridBridgeRowDefinition } from "./GridBridgeRowDefinition";
import { markType } from "./type";
/**
 * @hidden
 */
export let GridBridge = /*@__PURE__*/ (() => {
    class GridBridge extends PanelBridge {
        constructor() {
            super();
            this.i = new List$1(GridBridgeColumnDefinition.$, 0);
            this.j = new List$1(GridBridgeRowDefinition.$, 0);
        }
        addColumnDefinition(a, b, c, d) {
            let e = new GridBridgeColumnDefinition();
            e.a = c;
            e.b = d;
            this.i.add(e);
            this.k(a);
        }
        k(a) {
            let b = "";
            for (let c = 0; c < this.i.count; c++) {
                if (c > 0) {
                    b += " ";
                }
                b += this.i._inner[c].c();
            }
            a.setStyleProperty("grid-template-columns", b);
        }
        l(a) {
            let b = "";
            for (let c = 0; c < this.j.count; c++) {
                if (c > 0) {
                    b += " ";
                }
                b += this.j._inner[c].c();
            }
            a.setStyleProperty("grid-template-rows", b);
        }
        addHandler(a, b, c, d) {
        }
        addRowDefinition(a, b, c, d) {
            let e = new GridBridgeRowDefinition();
            e.a = c;
            e.b = d;
            this.j.add(e);
            this.l(a);
        }
        getColumn(a, b) {
            let c = b.v.getStyleProperty("grid-column");
            let d = parseInt(c);
            return d - 1;
        }
        getColumnDefinitionsCount(a) {
            return this.i.count;
        }
        getRow(a, b) {
            let c = b.v.getStyleProperty("grid-row");
            let d = parseInt(c);
            return d - 1;
        }
        getRowDefinitionsCount(a) {
            return this.j.count;
        }
        getValue(a, b) {
            switch (b) {
            }
            return null;
        }
        removeColumnDefinition(a, b) {
            this.i.removeAt(b);
            this.k(a);
        }
        removeHandler(a, b, c, d) {
        }
        removeRowDefinition(a, b) {
            this.j.removeAt(b);
            this.l(a);
        }
        setColumn(a, b, c) {
            b.v.setStyleProperty("grid-column", (c + 1).toString());
        }
        setRow(a, b, c) {
            b.v.setStyleProperty("grid-row", (c + 1).toString());
        }
        setValue(a, b, c) {
            switch (b) {
            }
        }
        updateColumnDefinition(a, b, c, d) {
            let e = this.i._inner[b];
            e.a = c;
            e.b = d;
            this.l(a);
        }
        updateRowDefinition(a, b, c, d) {
            let e = this.j._inner[b];
            e.a = c;
            e.b = d;
            this.l(a);
        }
        getChildAt(a, b) {
            return this.c.apply(this, arguments);
        }
        removeChildAt(a, b) {
            this.h.apply(this, arguments);
        }
        addChild(a, b) {
            this.f.apply(this, arguments);
        }
        removeChild(a, b) {
            this.g.apply(this, arguments);
        }
        getChildrenCount(a) {
            return this.e.apply(this, arguments);
        }
    }
    GridBridge.$t = /*@__PURE__*/ markType(GridBridge, 'GridBridge', PanelBridge.$, [INativeUIGridBridge_$type]);
    return GridBridge;
})();
