/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AxisDescription } from "./AxisDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let NumericAxisBaseDescription = /*@__PURE__*/ (() => {
    class NumericAxisBaseDescription extends AxisDescription {
        constructor() {
            super();
            this.ei = null;
            this.dx = 0;
            this.dr = 0;
            this.du = 0;
            this.dw = 0;
            this.dq = 0;
            this.dt = 0;
            this.dv = 0;
            this.dp = 0;
            this.dy = 0;
            this.ds = 0;
            this.dz = 0;
            this.di = false;
            this.df = false;
            this.dg = false;
            this.eb = 0;
            this.ej = null;
            this.ed = null;
            this.dc = null;
            this.dh = false;
            this.de = false;
            this.eg = null;
            this.ef = null;
            this.ee = null;
            this.eh = null;
        }
        get_type() {
            return "NumericAxisBase";
        }
        get autoRangeBufferMode() {
            return this.ei;
        }
        set autoRangeBufferMode(a) {
            this.ei = a;
            this.e("AutoRangeBufferMode");
        }
        get minimumValue() {
            return this.dx;
        }
        set minimumValue(a) {
            this.dx = a;
            this.e("MinimumValue");
        }
        get actualMinimumValue() {
            return this.dr;
        }
        set actualMinimumValue(a) {
            this.dr = a;
            this.e("ActualMinimumValue");
        }
        get actualVisibleMinimumValue() {
            return this.du;
        }
        set actualVisibleMinimumValue(a) {
            this.du = a;
            this.e("ActualVisibleMinimumValue");
        }
        get maximumValue() {
            return this.dw;
        }
        set maximumValue(a) {
            this.dw = a;
            this.e("MaximumValue");
        }
        get actualMaximumValue() {
            return this.dq;
        }
        set actualMaximumValue(a) {
            this.dq = a;
            this.e("ActualMaximumValue");
        }
        get actualVisibleMaximumValue() {
            return this.dt;
        }
        set actualVisibleMaximumValue(a) {
            this.dt = a;
            this.e("ActualVisibleMaximumValue");
        }
        get interval() {
            return this.dv;
        }
        set interval(a) {
            this.dv = a;
            this.e("Interval");
        }
        get actualInterval() {
            return this.dp;
        }
        set actualInterval(a) {
            this.dp = a;
            this.e("ActualInterval");
        }
        get minorInterval() {
            return this.dy;
        }
        set minorInterval(a) {
            this.dy = a;
            this.e("MinorInterval");
        }
        get actualMinorInterval() {
            return this.ds;
        }
        set actualMinorInterval(a) {
            this.ds = a;
            this.e("ActualMinorInterval");
        }
        get referenceValue() {
            return this.dz;
        }
        set referenceValue(a) {
            this.dz = a;
            this.e("ReferenceValue");
        }
        get isLogarithmic() {
            return this.di;
        }
        set isLogarithmic(a) {
            this.di = a;
            this.e("IsLogarithmic");
        }
        get actualIsLogarithmic() {
            return this.df;
        }
        set actualIsLogarithmic(a) {
            this.df = a;
            this.e("ActualIsLogarithmic");
        }
        get favorLabellingScaleEnd() {
            return this.dg;
        }
        set favorLabellingScaleEnd(a) {
            this.dg = a;
            this.e("FavorLabellingScaleEnd");
        }
        get logarithmBase() {
            return this.eb;
        }
        set logarithmBase(a) {
            this.eb = a;
            this.e("LogarithmBase");
        }
        get formatAbbreviatedLabelRef() {
            return this.ej;
        }
        set formatAbbreviatedLabelRef(a) {
            this.ej = a;
            this.e("FormatAbbreviatedLabelRef");
        }
        get abbreviatedLabelFormat() {
            return this.ed;
        }
        set abbreviatedLabelFormat(a) {
            this.ed = a;
            this.e("AbbreviatedLabelFormat");
        }
        get abbreviatedLabelFormatSpecifiers() {
            return this.dc;
        }
        set abbreviatedLabelFormatSpecifiers(a) {
            this.dc = a;
            this.e("AbbreviatedLabelFormatSpecifiers");
        }
        get isFormattingAbbreviatedLargeNumber() {
            return this.dh;
        }
        set isFormattingAbbreviatedLargeNumber(a) {
            this.dh = a;
            this.e("IsFormattingAbbreviatedLargeNumber");
        }
        get abbreviateLargeNumbers() {
            return this.de;
        }
        set abbreviateLargeNumbers(a) {
            this.de = a;
            this.e("AbbreviateLargeNumbers");
        }
        get actualMinimumValueChangeRef() {
            return this.eg;
        }
        set actualMinimumValueChangeRef(a) {
            this.eg = a;
            this.e("ActualMinimumValueChangeRef");
        }
        get actualMaximumValueChangeRef() {
            return this.ef;
        }
        set actualMaximumValueChangeRef(a) {
            this.ef = a;
            this.e("ActualMaximumValueChangeRef");
        }
        get actualIntervalChangeRef() {
            return this.ee;
        }
        set actualIntervalChangeRef(a) {
            this.ee = a;
            this.e("ActualIntervalChangeRef");
        }
        get actualMinorIntervalChangeRef() {
            return this.eh;
        }
        set actualMinorIntervalChangeRef(a) {
            this.eh = a;
            this.e("ActualMinorIntervalChangeRef");
        }
    }
    NumericAxisBaseDescription.$t = /*@__PURE__*/ markType(NumericAxisBaseDescription, 'NumericAxisBaseDescription', AxisDescription.$);
    return NumericAxisBaseDescription;
})();
