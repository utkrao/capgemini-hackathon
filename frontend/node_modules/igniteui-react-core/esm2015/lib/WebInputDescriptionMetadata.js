/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebComponentValueChangedEventArgsDescriptionMetadata } from "./WebComponentValueChangedEventArgsDescriptionMetadata";
import { WebInputBaseDescriptionMetadata } from "./WebInputBaseDescriptionMetadata";
import { WebInputDescription } from "./WebInputDescription";
/**
 * @hidden
 */
export let WebInputDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebInputDescriptionMetadata extends Base {
        static b(a) {
            if (WebInputDescriptionMetadata.a == null) {
                WebInputDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebInputDescriptionMetadata.c(WebInputDescriptionMetadata.a);
            }
            if (a.g(WebInputDescriptionMetadata.a)) {
                return;
            }
            a.s(WebInputDescriptionMetadata.a);
            WebComponentValueChangedEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            WebInputBaseDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:Input");
            a.item("Value", "String");
            a.item("DisplayType", "(wc:Type)ExportedType:string:InputType");
            a.item("DisplayType@names", "Number;Email;Password;Search;Tel;Text;Url");
            a.item("Inputmode", "ExportedType:string:InputInputmode");
            a.item("Inputmode@names", "None;Email;Search;Tel;Url;Txt;Decimal;Numeric");
            a.item("Pattern", "String");
            a.item("Invalid", "Boolean");
            a.item("Minlength", "Number:double");
            a.item("Maxlength", "Number:double");
            a.item("Min", "String");
            a.item("Max", "String");
            a.item("Step", "Number:double");
            a.item("Autofocus", "Boolean");
            a.item("Autocomplete", "String");
            a.item("ChangeRef", "EventRef::change");
        }
        static d(a) {
            WebInputDescriptionMetadata.b(a);
            a.u("WebInput", () => new WebInputDescription());
            a.t("WebInput", WebInputDescriptionMetadata.a);
        }
    }
    WebInputDescriptionMetadata.$t = /*@__PURE__*/ markType(WebInputDescriptionMetadata, 'WebInputDescriptionMetadata');
    WebInputDescriptionMetadata.a = null;
    return WebInputDescriptionMetadata;
})();
