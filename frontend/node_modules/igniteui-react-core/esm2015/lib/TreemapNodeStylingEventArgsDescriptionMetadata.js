/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { TreemapNodeStyleDescriptionMetadata } from "./TreemapNodeStyleDescriptionMetadata";
import { TreemapNodeStylingEventArgsDescription } from "./TreemapNodeStylingEventArgsDescription";
/**
 * @hidden
 */
export let TreemapNodeStylingEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class TreemapNodeStylingEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (TreemapNodeStylingEventArgsDescriptionMetadata.a == null) {
                TreemapNodeStylingEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                TreemapNodeStylingEventArgsDescriptionMetadata.c(TreemapNodeStylingEventArgsDescriptionMetadata.a);
            }
            if (a.g(TreemapNodeStylingEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.s(TreemapNodeStylingEventArgsDescriptionMetadata.a);
            TreemapNodeStyleDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("Value", "Number:double");
            a.item("Sum", "Number:double");
            a.item("CustomValueRef", "(w:CustomValue,wf:CustomValue)DataRef");
            a.item("ItemRef", "(w:Item,wf:Item)DataRef");
            a.item("ParentItemRef", "(w:ParentItem,wf:ParentItem)DataRef");
            a.item("Label", "String");
            a.item("ParentValue", "Number:double");
            a.item("ParentLabel", "String");
            a.item("ParentSum", "Number:double");
            a.item("IsParent", "Boolean");
            a.item("Style", "ExportedType:TreemapNodeStyle");
        }
        static d(a) {
            TreemapNodeStylingEventArgsDescriptionMetadata.b(a);
            a.u("TreemapNodeStylingEventArgs", () => new TreemapNodeStylingEventArgsDescription());
            a.t("TreemapNodeStylingEventArgs", TreemapNodeStylingEventArgsDescriptionMetadata.a);
        }
    }
    TreemapNodeStylingEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(TreemapNodeStylingEventArgsDescriptionMetadata, 'TreemapNodeStylingEventArgsDescriptionMetadata');
    TreemapNodeStylingEventArgsDescriptionMetadata.a = null;
    return TreemapNodeStylingEventArgsDescriptionMetadata;
})();
