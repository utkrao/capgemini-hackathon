/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { IconDescription } from "./IconDescription";
/**
 * @hidden
 */
export let IconDescriptionMetadata = /*@__PURE__*/ (() => {
    class IconDescriptionMetadata extends Base {
        static b(a) {
            if (IconDescriptionMetadata.a == null) {
                IconDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                IconDescriptionMetadata.c(IconDescriptionMetadata.a);
            }
            if (a.g(IconDescriptionMetadata.a)) {
                return;
            }
            a.s(IconDescriptionMetadata.a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:XIcon");
            a.item("ActualFill", "Brush");
            a.item("ActualTextColor", "Brush");
            a.item("ActualHoverFill", "Brush");
            a.item("ActualHoverStroke", "Brush");
            a.item("ActualStroke", "Brush");
            a.item("ActualHoverStrokeThickness", "Number:double");
            a.item("ActualStrokeThickness", "Number:double");
            a.item("Fill", "Brush");
            a.item("TextColor", "Brush");
            a.item("SvgPath", "(w:SVGPath,wf:SVGPath)String");
            a.item("HoverFill", "Brush");
            a.item("HoverStroke", "Brush");
            a.item("Stroke", "Brush");
            a.item("HoverStrokeThickness", "Number:double");
            a.item("StrokeThickness", "Number:double");
            a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
            a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
            a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
            a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
            a.item("HoverTextColor", "Brush");
            a.item("Id", "String");
            a.item("TabIndex", "Number:int");
            a.item("AriaLabel", "String");
            a.item("IsHover", "Boolean");
            a.item("Disabled", "(w:IsDisabled,xam:IsDisabled,wf:IsDisabled)Boolean");
            a.item("Opacity", "Number:double");
        }
        static d(a) {
            IconDescriptionMetadata.b(a);
            a.u("Icon", () => new IconDescription());
            a.t("Icon", IconDescriptionMetadata.a);
        }
    }
    IconDescriptionMetadata.$t = /*@__PURE__*/ markType(IconDescriptionMetadata, 'IconDescriptionMetadata');
    IconDescriptionMetadata.a = null;
    return IconDescriptionMetadata;
})();
