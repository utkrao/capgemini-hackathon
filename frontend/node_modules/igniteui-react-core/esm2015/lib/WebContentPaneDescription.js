/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { WebDockManagerPaneDescription } from "./WebDockManagerPaneDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let WebContentPaneDescription = /*@__PURE__*/ (() => {
    class WebContentPaneDescription extends WebDockManagerPaneDescription {
        constructor() {
            super();
            this.ai = null;
            this.aj = null;
            this.ae = null;
            this.ag = null;
            this.ah = null;
            this.ak = null;
            this.al = null;
            this.af = null;
            this.z = 0;
            this.h = false;
            this.k = false;
            this.l = false;
            this.i = false;
            this.j = false;
            this.aa = 0;
            this.p = false;
            this.am = null;
            this.o = false;
            this.m = false;
            this.n = false;
        }
        get_type() {
            return "WebContentPane";
        }
        get id() {
            return this.ai;
        }
        set id(a) {
            this.ai = a;
            this.e("Id");
        }
        get paneType() {
            return this.aj;
        }
        set paneType(a) {
            this.aj = a;
            this.e("PaneType");
        }
        get contentId() {
            return this.ae;
        }
        set contentId(a) {
            this.ae = a;
            this.e("ContentId");
        }
        get header() {
            return this.ag;
        }
        set header(a) {
            this.ag = a;
            this.e("Header");
        }
        get headerId() {
            return this.ah;
        }
        set headerId(a) {
            this.ah = a;
            this.e("HeaderId");
        }
        get tabHeaderId() {
            return this.ak;
        }
        set tabHeaderId(a) {
            this.ak = a;
            this.e("TabHeaderId");
        }
        get unpinnedHeaderId() {
            return this.al;
        }
        set unpinnedHeaderId(a) {
            this.al = a;
            this.e("UnpinnedHeaderId");
        }
        get floatingHeaderId() {
            return this.af;
        }
        set floatingHeaderId(a) {
            this.af = a;
            this.e("FloatingHeaderId");
        }
        get size() {
            return this.z;
        }
        set size(a) {
            this.z = a;
            this.e("Size");
        }
        get allowClose() {
            return this.h;
        }
        set allowClose(a) {
            this.h = a;
            this.e("AllowClose");
        }
        get allowMaximize() {
            return this.k;
        }
        set allowMaximize(a) {
            this.k = a;
            this.e("AllowMaximize");
        }
        get allowPinning() {
            return this.l;
        }
        set allowPinning(a) {
            this.l = a;
            this.e("AllowPinning");
        }
        get allowDocking() {
            return this.i;
        }
        set allowDocking(a) {
            this.i = a;
            this.e("AllowDocking");
        }
        get allowFloating() {
            return this.j;
        }
        set allowFloating(a) {
            this.j = a;
            this.e("AllowFloating");
        }
        get unpinnedSize() {
            return this.aa;
        }
        set unpinnedSize(a) {
            this.aa = a;
            this.e("UnpinnedSize");
        }
        get isPinned() {
            return this.p;
        }
        set isPinned(a) {
            this.p = a;
            this.e("IsPinned");
        }
        get unpinnedLocation() {
            return this.am;
        }
        set unpinnedLocation(a) {
            this.am = a;
            this.e("UnpinnedLocation");
        }
        get hidden() {
            return this.o;
        }
        set hidden(a) {
            this.o = a;
            this.e("Hidden");
        }
        get disabled() {
            return this.m;
        }
        set disabled(a) {
            this.m = a;
            this.e("Disabled");
        }
        get documentOnly() {
            return this.n;
        }
        set documentOnly(a) {
            this.n = a;
            this.e("DocumentOnly");
        }
    }
    WebContentPaneDescription.$t = /*@__PURE__*/ markType(WebContentPaneDescription, 'WebContentPaneDescription', WebDockManagerPaneDescription.$);
    WebContentPaneDescription.__marshalByValue = true;
    WebContentPaneDescription.__marshalByValueAlias = "ContentPane";
    return WebContentPaneDescription;
})();
