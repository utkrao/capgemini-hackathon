import { XYChartDescription } from "./XYChartDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class CategoryChartDescription extends XYChartDescription {
    static $t: Type;
    private uo;
    get tooltipTemplateRef(): string;
    set tooltipTemplateRef(a: string);
    private us;
    get width(): string;
    set width(a: string);
    private um;
    get height(): string;
    set height(a: string);
    private uk;
    get background(): string;
    set background(a: string);
    protected get_type(): string;
    constructor();
    private uf;
    get transitionInDuration(): number;
    set transitionInDuration(a: number);
    private up;
    get transitionInEasingFunctionRef(): string;
    set transitionInEasingFunctionRef(a: string);
    private ul;
    get chartType(): string;
    set chartType(a: string);
    private un;
    get markerCollisionAvoidance(): string;
    set markerCollisionAvoidance(a: string);
    private s7;
    get isSplineShapePartOfRange(): boolean;
    set isSplineShapePartOfRange(a: boolean);
    private s8;
    get isTransitionInEnabled(): boolean;
    set isTransitionInEnabled(a: boolean);
    private uq;
    get transitionInMode(): string;
    set transitionInMode(a: string);
    private ur;
    get transitionInSpeedType(): string;
    set transitionInSpeedType(a: string);
    private tu;
    get xAxisInterval(): number;
    set xAxisInterval(a: number);
    private tx;
    get xAxisMinorInterval(): number;
    set xAxisMinorInterval(a: number);
    private tt;
    get xAxisGap(): number;
    set xAxisGap(a: number);
    private tw;
    get xAxisMinimumGapSize(): number;
    set xAxisMinimumGapSize(a: number);
    private tv;
    get xAxisMaximumGap(): number;
    set xAxisMaximumGap(a: number);
    private ty;
    get xAxisOverlap(): number;
    set xAxisOverlap(a: number);
    private tz;
    get yAxisInterval(): number;
    set yAxisInterval(a: number);
    private uj;
    get autoMarginAndAngleUpdateMode(): string;
    set autoMarginAndAngleUpdateMode(a: string);
    private s9;
    get shouldAutoExpandMarginForInitialLabels(): boolean;
    set shouldAutoExpandMarginForInitialLabels(a: boolean);
    private ta;
    get shouldConsiderAutoRotationForInitialLabels(): boolean;
    set shouldConsiderAutoRotationForInitialLabels(a: boolean);
    private tr;
    get autoExpandMarginExtraPadding(): number;
    set autoExpandMarginExtraPadding(a: number);
    private ts;
    get autoExpandMarginMaximumValue(): number;
    set autoExpandMarginMaximumValue(a: number);
    private te;
    get yAxisFavorLabellingScaleEnd(): boolean;
    set yAxisFavorLabellingScaleEnd(a: boolean);
    private tb;
    get xAxisEnhancedIntervalPreferMoreCategoryLabels(): boolean;
    set xAxisEnhancedIntervalPreferMoreCategoryLabels(a: boolean);
    private td;
    get yAxisEnhancedIntervalPreferMoreCategoryLabels(): boolean;
    set yAxisEnhancedIntervalPreferMoreCategoryLabels(a: boolean);
    private ut;
    get yAxisAutoRangeBufferMode(): string;
    set yAxisAutoRangeBufferMode(a: string);
    private tf;
    get yAxisIsLogarithmic(): boolean;
    set yAxisIsLogarithmic(a: boolean);
    private ug;
    get yAxisLogarithmBase(): number;
    set yAxisLogarithmBase(a: number);
    private t1;
    get yAxisMinimumValue(): number;
    set yAxisMinimumValue(a: number);
    private t0;
    get yAxisMaximumValue(): number;
    set yAxisMaximumValue(a: number);
    private t2;
    get yAxisMinorInterval(): number;
    set yAxisMinorInterval(a: number);
    private s1;
    get negativeBrushes(): string[];
    set negativeBrushes(a: string[]);
    private s2;
    get negativeOutlines(): string[];
    set negativeOutlines(a: string[]);
    private tc;
    get yAxisAbbreviateLargeNumbers(): boolean;
    set yAxisAbbreviateLargeNumbers(a: boolean);
    private s5;
    get isCategoryHighlightingEnabled(): boolean;
    set isCategoryHighlightingEnabled(a: boolean);
    private s6;
    get isItemHighlightingEnabled(): boolean;
    set isItemHighlightingEnabled(a: boolean);
}
