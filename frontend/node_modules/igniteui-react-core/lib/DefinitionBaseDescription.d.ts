import { Description } from "./Description";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class DefinitionBaseDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private av;
    get background(): string;
    set background(a: string);
    private aw;
    get border(): string;
    set border(a: string);
    private al;
    get activationBorder(): string;
    set activationBorder(a: string);
    private a0;
    get errorBorder(): string;
    set errorBorder(a: string);
    private ao;
    get actualBorder(): string;
    set actualBorder(a: string);
    private s;
    get borderLeftWidth(): number;
    set borderLeftWidth(a: number);
    private u;
    get borderTopWidth(): number;
    set borderTopWidth(a: number);
    private t;
    get borderRightWidth(): number;
    set borderRightWidth(a: number);
    private r;
    get borderBottomWidth(): number;
    set borderBottomWidth(a: number);
    private o;
    get activationBorderLeftWidth(): number;
    set activationBorderLeftWidth(a: number);
    private q;
    get activationBorderTopWidth(): number;
    set activationBorderTopWidth(a: number);
    private p;
    get activationBorderRightWidth(): number;
    set activationBorderRightWidth(a: number);
    private n;
    get activationBorderBottomWidth(): number;
    set activationBorderBottomWidth(a: number);
    private w;
    get errorBorderLeftWidth(): number;
    set errorBorderLeftWidth(a: number);
    private y;
    get errorBorderTopWidth(): number;
    set errorBorderTopWidth(a: number);
    private x;
    get errorBorderRightWidth(): number;
    set errorBorderRightWidth(a: number);
    private v;
    get errorBorderBottomWidth(): number;
    set errorBorderBottomWidth(a: number);
    private an;
    get actualBackground(): string;
    set actualBackground(a: string);
    private am;
    get actualActivationBorder(): string;
    set actualActivationBorder(a: string);
    private ap;
    get actualErrorBorder(): string;
    set actualErrorBorder(a: string);
    private a8;
    get stickyRowBackground(): string;
    set stickyRowBackground(a: string);
    private at;
    get actualStickyRowBackground(): string;
    set actualStickyRowBackground(a: string);
    private a7;
    get pinnedRowBackground(): string;
    set pinnedRowBackground(a: string);
    private as;
    get actualPinnedRowBackground(): string;
    set actualPinnedRowBackground(a: string);
    private a5;
    get lastStickyRowBackground(): string;
    set lastStickyRowBackground(a: string);
    private aq;
    get actualLastStickyRowBackground(): string;
    set actualLastStickyRowBackground(a: string);
    private g;
    get contentOpacity(): number;
    set contentOpacity(a: number);
    private a4;
    get horizontalAlignment(): string;
    set horizontalAlignment(a: string);
    private ba;
    get verticalAlignment(): string;
    set verticalAlignment(a: string);
    private a6;
    get lineBreakMode(): string;
    set lineBreakMode(a: string);
    private ar;
    get actualLineBreakMode(): string;
    set actualLineBreakMode(a: string);
    private a9;
    get textColor(): string;
    set textColor(a: string);
    private au;
    get actualTextColor(): string;
    set actualTextColor(a: string);
    private i;
    get pinnedRowOpacity(): number;
    set pinnedRowOpacity(a: number);
    private f;
    get actualPinnedRowOpacity(): number;
    set actualPinnedRowOpacity(a: number);
    private a1;
    get fontFamily(): string;
    set fontFamily(a: string);
    private h;
    get fontSize(): number;
    set fontSize(a: number);
    private a2;
    get fontStyle(): string;
    set fontStyle(a: string);
    private a3;
    get fontWeight(): string;
    set fontWeight(a: string);
    private ay;
    get dataBindingRef(): string;
    set dataBindingRef(a: string);
    private az;
    get dataBoundRef(): string;
    set dataBoundRef(a: string);
    private ax;
    get cellStyleKeyRequestedRef(): string;
    set cellStyleKeyRequestedRef(a: string);
}
