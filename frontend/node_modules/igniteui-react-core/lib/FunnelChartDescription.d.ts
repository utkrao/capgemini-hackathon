import { Description } from "./Description";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class FunnelChartDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private a4;
    get valueMemberPath(): string;
    set valueMemberPath(a: string);
    private f;
    get brushes(): string[];
    set brushes(a: string[]);
    private g;
    get outlines(): string[];
    set outlines(a: string[]);
    private t;
    get bottomEdgeWidth(): number;
    set bottomEdgeWidth(a: number);
    private am;
    get innerLabelMemberPath(): string;
    set innerLabelMemberPath(a: string);
    private aq;
    get outerLabelMemberPath(): string;
    set outerLabelMemberPath(a: string);
    private an;
    get innerLabelVisibility(): string;
    set innerLabelVisibility(a: string);
    private at;
    get outerLabelVisibility(): string;
    set outerLabelVisibility(a: string);
    private ap;
    get outerLabelAlignment(): string;
    set outerLabelAlignment(a: string);
    private al;
    get funnelSliceDisplay(): string;
    set funnelSliceDisplay(a: string);
    private aj;
    get formatInnerLabelRef(): string;
    set formatInnerLabelRef(a: string);
    private ak;
    get formatOuterLabelRef(): string;
    set formatOuterLabelRef(a: string);
    private ah;
    get transitionDuration(): number;
    set transitionDuration(a: number);
    private k;
    get isInverted(): boolean;
    set isInverted(a: boolean);
    private l;
    get useBezierCurve(): boolean;
    set useBezierCurve(a: boolean);
    private j;
    get allowSliceSelection(): boolean;
    set allowSliceSelection(a: boolean);
    private n;
    get useUnselectedStyle(): boolean;
    set useUnselectedStyle(a: boolean);
    private au;
    get selectedSliceFill(): string;
    set selectedSliceFill(a: string);
    private av;
    get selectedSliceStroke(): string;
    set selectedSliceStroke(a: string);
    private x;
    get selectedSliceStrokeThickness(): number;
    set selectedSliceStrokeThickness(a: number);
    private w;
    get selectedSliceOpacity(): number;
    set selectedSliceOpacity(a: number);
    private a2;
    get unselectedSliceFill(): string;
    set unselectedSliceFill(a: string);
    private a3;
    get unselectedSliceStroke(): string;
    set unselectedSliceStroke(a: string);
    private z;
    get unselectedSliceStrokeThickness(): number;
    set unselectedSliceStrokeThickness(a: number);
    private y;
    get unselectedSliceOpacity(): number;
    set unselectedSliceOpacity(a: number);
    private ao;
    get legendItemBadgeTemplateRef(): string;
    set legendItemBadgeTemplateRef(a: string);
    private m;
    get useOuterLabelsForLegend(): boolean;
    set useOuterLabelsForLegend(a: boolean);
    private a1;
    get textStyle(): string;
    set textStyle(a: string);
    private as;
    get outerLabelTextStyle(): string;
    set outerLabelTextStyle(a: string);
    private u;
    get outlineThickness(): number;
    set outlineThickness(a: number);
    private v;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private ar;
    get outerLabelTextColor(): string;
    set outerLabelTextColor(a: string);
    private a0;
    get textColor(): string;
    set textColor(a: string);
    private aw;
    get sliceClickedRef(): string;
    set sliceClickedRef(a: string);
    private ax;
    get sliceEnterRef(): string;
    set sliceEnterRef(a: string);
    private az;
    get sliceLeaveRef(): string;
    set sliceLeaveRef(a: string);
    private ay;
    get sliceHoverRef(): string;
    set sliceHoverRef(a: string);
}
