import { Base, IList, Type } from "./type";
import { ISupportsDataChangeNotifications } from "./ISupportsDataChangeNotifications";
import { ISummaryResult } from "./ISummaryResult";
import { List$1 } from "./List$1";
import { IDataSource } from "./IDataSource";
import { DataSourcePropertiesComparer } from "./DataSourcePropertiesComparer";
import { IComparer$1 } from "./IComparer$1";
import { ISupportsExpansionChangeNotifications } from "./ISupportsExpansionChangeNotifications";
import { SortDescriptionCollection } from "./SortDescriptionCollection";
import { SummaryDescriptionCollection } from "./SummaryDescriptionCollection";
import { DataSourceSummaryScope } from "./DataSourceSummaryScope";
import { DataSourceSectionHeaderDisplayMode } from "./DataSourceSectionHeaderDisplayMode";
import { SectionData } from "./SectionData";
import { IDataSourceSupportsIndexedAccess } from "./IDataSourceSupportsIndexedAccess";
/**
 * @hidden
 */
export declare class RearrangedListView extends Base implements ISupportsDataChangeNotifications {
    static $t: Type;
    private n;
    private a4;
    private z;
    private e;
    private a;
    private b;
    private c;
    private d;
    private a8;
    private a7;
    get bk(): number;
    get i(): ISummaryResult[];
    get a6(): IList;
    am: boolean;
    as: boolean;
    get aq(): boolean;
    constructor(a: IDataSourceSupportsIndexedAccess);
    w(a: number): SectionData;
    v(): SectionData;
    private o;
    get p(): DataSourcePropertiesComparer;
    set p(a: DataSourcePropertiesComparer);
    private a0;
    get a2(): IComparer$1<any>;
    set a2(a: IComparer$1<any>);
    private az;
    get a1(): IComparer$1<any>;
    set a1(a: IComparer$1<any>);
    private s;
    get t(): (item: any) => boolean;
    set t(a: (item: any) => boolean);
    private aa;
    get ab(): ISupportsDataChangeNotifications;
    set ab(a: ISupportsDataChangeNotifications);
    private ac;
    get ad(): ISupportsExpansionChangeNotifications;
    set ad(a: ISupportsExpansionChangeNotifications);
    m: IDataSource;
    ae: SortDescriptionCollection;
    af: SortDescriptionCollection;
    ag: SummaryDescriptionCollection;
    ap: boolean;
    private k;
    get l(): DataSourceSummaryScope;
    set l(a: DataSourceSummaryScope);
    j: DataSourceSectionHeaderDisplayMode;
    private get ar();
    b6(): void;
    private bl;
    get a5(): List$1<SectionData>;
    av: boolean;
    au: boolean;
    aw: boolean;
    private ah;
    private b1;
    private bs;
    ba(): number;
    private bd;
    private bc;
    private ao;
    private an;
    private bb;
    private bv;
    private q;
    private r;
    private bf;
    private bg;
    private bh;
    private bi;
    private bj;
    private bw;
    private bx;
    private bz;
    private be;
    private by;
    private f;
    private g;
    private bt;
    private x;
    cb(a: List$1<any[]>): void;
    private b2;
    notifySetItem(a: number, b: any, c: any): void;
    private bp;
    private b3;
    private b0;
    private ce;
    private cm;
    private b7;
    private ai;
    private h;
    private at;
    private a9;
    private b9;
    private b4;
    private y;
    private aj;
    private bo;
    private a3;
    b5(a: any[]): void;
    cc(a: any[]): void;
    private u;
    private b8;
    private ax;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
    private ay;
    ca(a: number, b: boolean): void;
    ak(a: number): boolean;
    private al;
    private bm;
    private bn;
    private br;
    private bu;
    private bq;
    private cg;
    private cf;
    ci(a: number, b: any, c: boolean, d: SectionData): void;
    cl(a: number, b: number, c: any, d: boolean, e: SectionData): void;
    private cj;
    private ck;
    private ch;
    private cd;
}
