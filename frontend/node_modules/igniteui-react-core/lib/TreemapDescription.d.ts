import { Description } from "./Description";
import { TreemapNodeStyleMappingDescription } from "./TreemapNodeStyleMappingDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class TreemapDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private cu;
    get valueMemberPath(): string;
    set valueMemberPath(a: string);
    private cs;
    get rootTitle(): string;
    set rootTitle(a: string);
    private bq;
    get breadcrumbSequence(): string;
    set breadcrumbSequence(a: string);
    private cr;
    get parentIdMemberPath(): string;
    set parentIdMemberPath(a: string);
    private cd;
    get labelMemberPath(): string;
    set labelMemberPath(a: string);
    private br;
    get customValueMemberPath(): string;
    set customValueMemberPath(a: string);
    private ca;
    get idMemberPath(): string;
    set idMemberPath(a: string);
    private bt;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private f;
    get fillBrushes(): string[];
    set fillBrushes(a: string[]);
    private g;
    get styleMappings(): TreemapNodeStyleMappingDescription[];
    set styleMappings(a: TreemapNodeStyleMappingDescription[]);
    private bu;
    get fillScaleMode(): string;
    set fillScaleMode(a: string);
    private j;
    get isFillScaleLogarithmic(): boolean;
    set isFillScaleLogarithmic(a: boolean);
    private bl;
    get fillScaleLogarithmBase(): number;
    set fillScaleLogarithmBase(a: number);
    private o;
    get fillScaleMinimumValue(): number;
    set fillScaleMinimumValue(a: number);
    private n;
    get fillScaleMaximumValue(): number;
    set fillScaleMaximumValue(a: number);
    private cf;
    get labelVerticalFitMode(): string;
    set labelVerticalFitMode(a: string);
    private cc;
    get labelHorizontalFitMode(): string;
    set labelHorizontalFitMode(a: string);
    private cq;
    get overlayHeaderHoverBackground(): string;
    set overlayHeaderHoverBackground(a: string);
    private b5;
    get headerHoverBackground(): string;
    set headerHoverBackground(a: string);
    private bz;
    get headerBackground(): string;
    set headerBackground(a: string);
    private cp;
    get overlayHeaderBackground(): string;
    set overlayHeaderBackground(a: string);
    private b8;
    get headerTextColor(): string;
    set headerTextColor(a: string);
    private b0;
    get headerDarkTextColor(): string;
    set headerDarkTextColor(a: string);
    private ct;
    get textColor(): string;
    set textColor(a: string);
    private bs;
    get darkTextColor(): string;
    set darkTextColor(a: string);
    private b7;
    get headerHoverTextColor(): string;
    set headerHoverTextColor(a: string);
    private b6;
    get headerHoverDarkTextColor(): string;
    set headerHoverDarkTextColor(a: string);
    private bw;
    get fontFamily(): string;
    set fontFamily(a: string);
    private p;
    get fontSize(): number;
    set fontSize(a: number);
    private bx;
    get fontStyle(): string;
    set fontStyle(a: string);
    private by;
    get fontWeight(): string;
    set fontWeight(a: string);
    private b2;
    get headerFontFamily(): string;
    set headerFontFamily(a: string);
    private q;
    get headerFontSize(): number;
    set headerFontSize(a: number);
    private b3;
    get headerFontStyle(): string;
    set headerFontStyle(a: string);
    private b4;
    get headerFontWeight(): string;
    set headerFontWeight(a: string);
    private b1;
    get headerDisplayMode(): string;
    set headerDisplayMode(a: string);
    private t;
    get headerLabelLeftMargin(): number;
    set headerLabelLeftMargin(a: number);
    private v;
    get headerLabelTopMargin(): number;
    set headerLabelTopMargin(a: number);
    private u;
    get headerLabelRightMargin(): number;
    set headerLabelRightMargin(a: number);
    private s;
    get headerLabelBottomMargin(): number;
    set headerLabelBottomMargin(a: number);
    private ad;
    get overlayHeaderLabelLeftMargin(): number;
    set overlayHeaderLabelLeftMargin(a: number);
    private af;
    get overlayHeaderLabelTopMargin(): number;
    set overlayHeaderLabelTopMargin(a: number);
    private ae;
    get overlayHeaderLabelRightMargin(): number;
    set overlayHeaderLabelRightMargin(a: number);
    private ac;
    get overlayHeaderLabelBottomMargin(): number;
    set overlayHeaderLabelBottomMargin(a: number);
    private y;
    get labelLeftMargin(): number;
    set labelLeftMargin(a: number);
    private aa;
    get labelTopMargin(): number;
    set labelTopMargin(a: number);
    private z;
    get labelRightMargin(): number;
    set labelRightMargin(a: number);
    private x;
    get labelBottomMargin(): number;
    set labelBottomMargin(a: number);
    private ai;
    get parentNodeLeftMargin(): number;
    set parentNodeLeftMargin(a: number);
    private am;
    get parentNodeTopMargin(): number;
    set parentNodeTopMargin(a: number);
    private ak;
    get parentNodeRightMargin(): number;
    set parentNodeRightMargin(a: number);
    private ag;
    get parentNodeBottomMargin(): number;
    set parentNodeBottomMargin(a: number);
    private aj;
    get parentNodeLeftPadding(): number;
    set parentNodeLeftPadding(a: number);
    private an;
    get parentNodeTopPadding(): number;
    set parentNodeTopPadding(a: number);
    private al;
    get parentNodeRightPadding(): number;
    set parentNodeRightPadding(a: number);
    private ah;
    get parentNodeBottomPadding(): number;
    set parentNodeBottomPadding(a: number);
    private cb;
    get labelHorizontalAlignment(): string;
    set labelHorizontalAlignment(a: string);
    private ce;
    get labelVerticalAlignment(): string;
    set labelVerticalAlignment(a: string);
    private r;
    get headerHeight(): number;
    set headerHeight(a: number);
    private co;
    get outline(): string;
    set outline(a: string);
    private ap;
    get strokeThickness(): number;
    set strokeThickness(a: number);
    private cg;
    get layoutOrientation(): string;
    set layoutOrientation(a: string);
    private ch;
    get layoutType(): string;
    set layoutType(a: string);
    private ab;
    get minimumDisplaySize(): number;
    set minimumDisplaySize(a: number);
    private bm;
    get transitionDuration(): number;
    set transitionDuration(a: number);
    private ao;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private m;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(a: number);
    private w;
    get interactionPixelScalingRatio(): number;
    set interactionPixelScalingRatio(a: number);
    private l;
    get actualInteractionPixelScalingRatio(): number;
    set actualInteractionPixelScalingRatio(a: number);
    private bv;
    get focusItemRef(): string;
    set focusItemRef(a: string);
    private cn;
    get nodeStylingRef(): string;
    set nodeStylingRef(a: string);
    private ck;
    get nodePointerOverRef(): string;
    set nodePointerOverRef(a: string);
    private ci;
    get nodePointerEnterRef(): string;
    set nodePointerEnterRef(a: string);
    private cj;
    get nodePointerLeaveRef(): string;
    set nodePointerLeaveRef(a: string);
    private cl;
    get nodePointerPressedRef(): string;
    set nodePointerPressedRef(a: string);
    private cm;
    get nodePointerReleasedRef(): string;
    set nodePointerReleasedRef(a: string);
    private cv;
    get width(): string;
    set width(a: string);
    private b9;
    get height(): string;
    set height(a: string);
    private bp;
    get background(): string;
    set background(a: string);
}
