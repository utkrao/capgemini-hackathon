import { Description } from "./Description";
import { RectDescription } from "./RectDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class ZoomSliderDescription extends Description {
    static $t: Type;
    private bv;
    get width(): string;
    set width(a: string);
    private a6;
    get height(): string;
    set height(a: string);
    private a3;
    get background(): string;
    set background(a: string);
    protected get_type(): string;
    get type(): string;
    constructor();
    private a1;
    get panTransitionDuration(): number;
    set panTransitionDuration(a: number);
    private x;
    get maxZoomWidth(): number;
    set maxZoomWidth(a: number);
    private z;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private j;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(a: number);
    private f;
    get windowRect(): RectDescription;
    set windowRect(a: RectDescription);
    private y;
    get minZoomWidth(): number;
    set minZoomWidth(a: number);
    private ab;
    get startInset(): number;
    set startInset(a: number);
    private m;
    get endInset(): number;
    set endInset(a: number);
    private ae;
    get trackStartInset(): number;
    set trackStartInset(a: number);
    private ad;
    get trackEndInset(): number;
    set trackEndInset(a: number);
    private k;
    get barExtent(): number;
    set barExtent(a: number);
    private bn;
    get orientation(): string;
    set orientation(a: string);
    private bk;
    get lowerThumbBrush(): string;
    set lowerThumbBrush(a: string);
    private v;
    get lowerThumbStrokeThickness(): number;
    set lowerThumbStrokeThickness(a: number);
    private q;
    get higherThumbStrokeThickness(): number;
    set higherThumbStrokeThickness(a: number);
    private bc;
    get higherThumbBrush(): string;
    set higherThumbBrush(a: string);
    private bl;
    get lowerThumbOutline(): string;
    set lowerThumbOutline(a: string);
    private bd;
    get higherThumbOutline(): string;
    set higherThumbOutline(a: string);
    private bm;
    get lowerThumbRidgesBrush(): string;
    set lowerThumbRidgesBrush(a: string);
    private be;
    get higherThumbRidgesBrush(): string;
    set higherThumbRidgesBrush(a: string);
    private w;
    get lowerThumbWidth(): number;
    set lowerThumbWidth(a: number);
    private r;
    get higherThumbWidth(): number;
    set higherThumbWidth(a: number);
    private u;
    get lowerThumbHeight(): number;
    set lowerThumbHeight(a: number);
    private p;
    get higherThumbHeight(): number;
    set higherThumbHeight(a: number);
    private bi;
    get lowerShadeBrush(): string;
    set lowerShadeBrush(a: string);
    private bj;
    get lowerShadeOutline(): string;
    set lowerShadeOutline(a: string);
    private t;
    get lowerShadeStrokeThickness(): number;
    set lowerShadeStrokeThickness(a: number);
    private ba;
    get higherShadeBrush(): string;
    set higherShadeBrush(a: string);
    private bb;
    get higherShadeOutline(): string;
    set higherShadeOutline(a: string);
    private o;
    get higherShadeStrokeThickness(): number;
    set higherShadeStrokeThickness(a: number);
    private a4;
    get barBrush(): string;
    set barBrush(a: string);
    private a5;
    get barOutline(): string;
    set barOutline(a: string);
    private l;
    get barStrokeThickness(): number;
    set barStrokeThickness(a: number);
    private bo;
    get rangeThumbBrush(): string;
    set rangeThumbBrush(a: string);
    private bp;
    get rangeThumbOutline(): string;
    set rangeThumbOutline(a: string);
    private aa;
    get rangeThumbStrokeThickness(): number;
    set rangeThumbStrokeThickness(a: number);
    private bq;
    get rangeThumbRidgesBrush(): string;
    set rangeThumbRidgesBrush(a: string);
    private bf;
    get lowerCalloutBrush(): string;
    set lowerCalloutBrush(a: string);
    private bh;
    get lowerCalloutTextColor(): string;
    set lowerCalloutTextColor(a: string);
    private bg;
    get lowerCalloutOutline(): string;
    set lowerCalloutOutline(a: string);
    private s;
    get lowerCalloutStrokeThickness(): number;
    set lowerCalloutStrokeThickness(a: number);
    private a7;
    get higherCalloutBrush(): string;
    set higherCalloutBrush(a: string);
    private a9;
    get higherCalloutTextColor(): string;
    set higherCalloutTextColor(a: string);
    private a8;
    get higherCalloutOutline(): string;
    set higherCalloutOutline(a: string);
    private n;
    get higherCalloutStrokeThickness(): number;
    set higherCalloutStrokeThickness(a: number);
    private h;
    get areThumbCalloutsEnabled(): boolean;
    set areThumbCalloutsEnabled(a: boolean);
    private bs;
    get thumbCalloutFontFamily(): string;
    set thumbCalloutFontFamily(a: string);
    private ac;
    get thumbCalloutFontSize(): number;
    set thumbCalloutFontSize(a: number);
    private bt;
    get thumbCalloutFontStyle(): string;
    set thumbCalloutFontStyle(a: string);
    private bu;
    get thumbCalloutFontWeight(): string;
    set thumbCalloutFontWeight(a: string);
    private br;
    get resolvingAxisValueRef(): string;
    set resolvingAxisValueRef(a: string);
    private bw;
    get windowRectChangedRef(): string;
    set windowRectChangedRef(a: string);
}
