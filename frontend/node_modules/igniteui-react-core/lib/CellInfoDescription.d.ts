import { Description } from "./Description";
import { CellActionManagerDescription } from "./CellActionManagerDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class CellInfoDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    private static __marshalByValue;
    private static __marshalByValueAlias;
    constructor();
    private ef;
    get styleKey(): string;
    set styleKey(a: string);
    private b6;
    get dataRow(): number;
    set dataRow(a: number);
    private w;
    get isPositionDirty(): boolean;
    set isPositionDirty(a: boolean);
    private aa;
    get isSizeDirty(): boolean;
    set isSizeDirty(a: boolean);
    private k;
    get isContentDirty(): boolean;
    set isContentDirty(a: boolean);
    private i;
    get isBorderDirty(): boolean;
    set isBorderDirty(a: boolean);
    private u;
    get isLayerDirty(): boolean;
    set isLayerDirty(a: boolean);
    private ab;
    get isStateDirty(): boolean;
    set isStateDirty(a: boolean);
    private l;
    get isDataDirty(): boolean;
    set isDataDirty(a: boolean);
    private v;
    get isPlaceholdContentNeeded(): boolean;
    set isPlaceholdContentNeeded(a: boolean);
    private f;
    get actionManager(): CellActionManagerDescription;
    set actionManager(a: CellActionManagerDescription);
    private q;
    get isHitTestVisible(): boolean;
    set isHitTestVisible(a: boolean);
    private x_1;
    get isRowPinned(): boolean;
    set isRowPinned(a: boolean);
    private y_1;
    get isRowSticky(): boolean;
    set isRowSticky(a: boolean);
    private t;
    get isLastStickyRow(): boolean;
    set isLastStickyRow(a: boolean);
    private p;
    get isFilterRow(): boolean;
    set isFilterRow(a: boolean);
    private cd;
    get indent(): number;
    set indent(a: number);
    private ea;
    get rowItemRef(): string;
    set rowItemRef(a: string);
    private a9;
    get x(): number;
    set x(a: number);
    private ba;
    get y(): number;
    set y(a: number);
    private ci;
    get snappedX(): number;
    set snappedX(a: number);
    private cj;
    get snappedY(): number;
    set snappedY(a: number);
    private a2;
    get editOpacity(): number;
    set editOpacity(a: number);
    private a0;
    get contentOpacity(): number;
    set contentOpacity(a: number);
    private ax;
    get actualContentOpacity(): number;
    set actualContentOpacity(a: number);
    private a5;
    get opacity(): number;
    set opacity(a: number);
    private az;
    get actualOpacity(): number;
    set actualOpacity(a: number);
    private cc;
    get height(): number;
    set height(a: number);
    private ck;
    get width(): number;
    set width(a: number);
    private z;
    get isSelected(): boolean;
    set isSelected(a: boolean);
    private a7;
    get selectedStatus(): number;
    set selectedStatus(a: number);
    private aw;
    get activationStatus(): number;
    set activationStatus(a: number);
    private a4;
    get hoverStatus(): number;
    set hoverStatus(a: number);
    private r;
    get isHoverable(): boolean;
    set isHoverable(a: boolean);
    private d1;
    get horizontalAlignment(): string;
    set horizontalAlignment(a: string);
    private eh;
    get verticalAlignment(): string;
    set verticalAlignment(a: string);
    private dp;
    get background(): string;
    set background(a: string);
    private dq;
    get border(): string;
    set border(a: string);
    private di;
    get actualBackground(): string;
    set actualBackground(a: string);
    private dj;
    get actualBorder(): string;
    set actualBorder(a: string);
    private dh;
    get activationBorder(): string;
    set activationBorder(a: string);
    private dw;
    get errorBorder(): string;
    set errorBorder(a: string);
    private eb;
    get selectedBackground(): string;
    set selectedBackground(a: string);
    private d2;
    get hoverBackground(): string;
    set hoverBackground(a: string);
    private d3;
    get hoverTextColor(): string;
    set hoverTextColor(a: string);
    private ed;
    get sortIndicatorColor(): string;
    set sortIndicatorColor(a: string);
    private ee;
    get stickyRowBackground(): string;
    set stickyRowBackground(a: string);
    private d8;
    get pinnedRowBackground(): string;
    set pinnedRowBackground(a: string);
    private d4;
    get lastStickyRowBackground(): string;
    set lastStickyRowBackground(a: string);
    private dx;
    get filterRowBackground(): string;
    set filterRowBackground(a: string);
    private a6;
    get pinnedRowOpacity(): number;
    set pinnedRowOpacity(a: number);
    private d6;
    get originalValueRef(): string;
    set originalValueRef(a: string);
    private d9;
    get renderValue(): string;
    set renderValue(a: string);
    private eg;
    get textColor(): string;
    set textColor(a: string);
    private dn;
    get actualTextColor(): string;
    set actualTextColor(a: string);
    private dr;
    get deletedTextColor(): string;
    set deletedTextColor(a: string);
    private dy;
    get fontFamily(): string;
    set fontFamily(a: string);
    private a3;
    get fontSize(): number;
    set fontSize(a: number);
    private dz;
    get fontStyle(): string;
    set fontStyle(a: string);
    private d0;
    get fontWeight(): string;
    set fontWeight(a: string);
    private dk;
    get actualFontFamily(): string;
    set actualFontFamily(a: string);
    private ay;
    get actualFontSize(): number;
    set actualFontSize(a: number);
    private dl;
    get actualFontStyle(): string;
    set actualFontStyle(a: string);
    private dm;
    get actualFontWeight(): string;
    set actualFontWeight(a: string);
    private d5;
    get lineBreakMode(): string;
    set lineBreakMode(a: string);
    private a8;
    get virtualizationPercentage(): number;
    set virtualizationPercentage(a: number);
    private cf;
    get paddingLeft(): number;
    set paddingLeft(a: number);
    private ch;
    get paddingTop(): number;
    set paddingTop(a: number);
    private cg;
    get paddingRight(): number;
    set paddingRight(a: number);
    private ce;
    get paddingBottom(): number;
    set paddingBottom(a: number);
    private bz;
    get actualPaddingLeft(): number;
    set actualPaddingLeft(a: number);
    private b1;
    get actualPaddingTop(): number;
    set actualPaddingTop(a: number);
    private b0;
    get actualPaddingRight(): number;
    set actualPaddingRight(a: number);
    private by;
    get actualPaddingBottom(): number;
    set actualPaddingBottom(a: number);
    private b3;
    get borderLeftWidth(): number;
    set borderLeftWidth(a: number);
    private b5;
    get borderTopWidth(): number;
    set borderTopWidth(a: number);
    private b4;
    get borderRightWidth(): number;
    set borderRightWidth(a: number);
    private b2;
    get borderBottomWidth(): number;
    set borderBottomWidth(a: number);
    private br;
    get activationBorderLeftWidth(): number;
    set activationBorderLeftWidth(a: number);
    private bt;
    get activationBorderTopWidth(): number;
    set activationBorderTopWidth(a: number);
    private bs;
    get activationBorderRightWidth(): number;
    set activationBorderRightWidth(a: number);
    private bq;
    get activationBorderBottomWidth(): number;
    set activationBorderBottomWidth(a: number);
    private b9;
    get errorBorderLeftWidth(): number;
    set errorBorderLeftWidth(a: number);
    private cb;
    get errorBorderTopWidth(): number;
    set errorBorderTopWidth(a: number);
    private ca;
    get errorBorderRightWidth(): number;
    set errorBorderRightWidth(a: number);
    private b8;
    get errorBorderBottomWidth(): number;
    set errorBorderBottomWidth(a: number);
    private bv;
    get actualBorderLeftWidth(): number;
    set actualBorderLeftWidth(a: number);
    private bx;
    get actualBorderTopWidth(): number;
    set actualBorderTopWidth(a: number);
    private bw;
    get actualBorderRightWidth(): number;
    set actualBorderRightWidth(a: number);
    private bu;
    get actualBorderBottomWidth(): number;
    set actualBorderBottomWidth(a: number);
    private ec;
    get sortDirection(): string;
    set sortDirection(a: string);
    private o;
    get isExpanded(): boolean;
    set isExpanded(a: boolean);
    private j;
    get isCollapsable(): boolean;
    set isCollapsable(a: boolean);
    private d7;
    get pinned(): string;
    set pinned(a: string);
    private dt;
    get editFontFamily(): string;
    set editFontFamily(a: string);
    private a1;
    get editFontSize(): number;
    set editFontSize(a: number);
    private du;
    get editFontStyle(): string;
    set editFontStyle(a: string);
    private dv;
    get editFontWeight(): string;
    set editFontWeight(a: string);
    private n;
    get isEdited(): boolean;
    set isEdited(a: boolean);
    private m;
    get isDeleted(): boolean;
    set isDeleted(a: boolean);
    private ds;
    get editError(): string;
    set editError(a: string);
    private s;
    get isInEditMode(): boolean;
    set isInEditMode(a: boolean);
    private b7;
    get editID(): number;
    set editID(a: number);
}
