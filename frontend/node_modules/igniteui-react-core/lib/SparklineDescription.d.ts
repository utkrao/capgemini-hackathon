import { Description } from "./Description";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class SparklineDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private aq;
    get brush(): string;
    set brush(a: string);
    private ba;
    get negativeBrush(): string;
    set negativeBrush(a: string);
    private a8;
    get markerBrush(): string;
    set markerBrush(a: string);
    private bb;
    get negativeMarkerBrush(): string;
    set negativeMarkerBrush(a: string);
    private at;
    get firstMarkerBrush(): string;
    set firstMarkerBrush(a: string);
    private a4;
    get lastMarkerBrush(): string;
    set lastMarkerBrush(a: string);
    private ax;
    get highMarkerBrush(): string;
    set highMarkerBrush(a: string);
    private a6;
    get lowMarkerBrush(): string;
    set lowMarkerBrush(a: string);
    private bf;
    get trendLineBrush(): string;
    set trendLineBrush(a: string);
    private az;
    get horizontalAxisBrush(): string;
    set horizontalAxisBrush(a: string);
    private bj;
    get verticalAxisBrush(): string;
    set verticalAxisBrush(a: string);
    private bd;
    get normalRangeFill(): string;
    set normalRangeFill(a: string);
    private a1;
    get horizontalAxisVisibility(): string;
    set horizontalAxisVisibility(a: string);
    private bl;
    get verticalAxisVisibility(): string;
    set verticalAxisVisibility(a: string);
    private a9;
    get markerVisibility(): string;
    set markerVisibility(a: string);
    private bc;
    get negativeMarkerVisibility(): string;
    set negativeMarkerVisibility(a: string);
    private au;
    get firstMarkerVisibility(): string;
    set firstMarkerVisibility(a: string);
    private a5;
    get lastMarkerVisibility(): string;
    set lastMarkerVisibility(a: string);
    private a7;
    get lowMarkerVisibility(): string;
    set lowMarkerVisibility(a: string);
    private ay;
    get highMarkerVisibility(): string;
    set highMarkerVisibility(a: string);
    private be;
    get normalRangeVisibility(): string;
    set normalRangeVisibility(a: string);
    private j;
    get displayNormalRangeInFront(): boolean;
    set displayNormalRangeInFront(a: boolean);
    private r;
    get markerSize(): number;
    set markerSize(a: number);
    private m;
    get firstMarkerSize(): number;
    set firstMarkerSize(a: number);
    private o;
    get lastMarkerSize(): number;
    set lastMarkerSize(a: number);
    private n;
    get highMarkerSize(): number;
    set highMarkerSize(a: number);
    private q;
    get lowMarkerSize(): number;
    set lowMarkerSize(a: number);
    private u;
    get negativeMarkerSize(): number;
    set negativeMarkerSize(a: number);
    private p;
    get lineThickness(): number;
    set lineThickness(a: number);
    private t;
    get minimum(): number;
    set minimum(a: number);
    private s;
    get maximum(): number;
    set maximum(a: number);
    private ar;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private bi;
    get valueMemberPath(): string;
    set valueMemberPath(a: string);
    private a3;
    get labelMemberPath(): string;
    set labelMemberPath(a: string);
    private bg;
    get trendLineType(): string;
    set trendLineType(a: string);
    private an;
    get trendLinePeriod(): number;
    set trendLinePeriod(a: number);
    private y;
    get trendLineThickness(): number;
    set trendLineThickness(a: number);
    private w;
    get normalRangeMinimum(): number;
    set normalRangeMinimum(a: number);
    private v;
    get normalRangeMaximum(): number;
    set normalRangeMaximum(a: number);
    private as;
    get displayType(): string;
    set displayType(a: string);
    private bh;
    get unknownValuePlotting(): string;
    set unknownValuePlotting(a: string);
    private bk;
    get verticalAxisLabelRef(): string;
    set verticalAxisLabelRef(a: string);
    private a0;
    get horizontalAxisLabelRef(): string;
    set horizontalAxisLabelRef(a: string);
    private av;
    get formatLabelRef(): string;
    set formatLabelRef(a: string);
    private a2;
    get horizontalLabelFormat(): string;
    set horizontalLabelFormat(a: string);
    private f;
    get horizontalLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set horizontalLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private bm;
    get verticalLabelFormat(): string;
    set verticalLabelFormat(a: string);
    private g;
    get verticalLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set verticalLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private x;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private l;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(a: number);
    private bn;
    get width(): string;
    set width(a: string);
    private aw;
    get height(): string;
    set height(a: string);
    private ap;
    get background(): string;
    set background(a: string);
}
