/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var CategoryChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryChartDescription, _super);
    function CategoryChartDescription() {
        var _this = _super.call(this) || this;
        _this.uo = null;
        _this.us = null;
        _this.um = null;
        _this.uk = null;
        _this.uf = 0;
        _this.up = null;
        _this.ul = null;
        _this.un = null;
        _this.s7 = false;
        _this.s8 = false;
        _this.uq = null;
        _this.ur = null;
        _this.tu = 0;
        _this.tx = 0;
        _this.tt = 0;
        _this.tw = 0;
        _this.tv = 0;
        _this.ty = 0;
        _this.tz = 0;
        _this.uj = null;
        _this.s9 = false;
        _this.ta = false;
        _this.tr = 0;
        _this.ts = 0;
        _this.te = false;
        _this.tb = false;
        _this.td = false;
        _this.ut = null;
        _this.tf = false;
        _this.ug = 0;
        _this.t1 = 0;
        _this.t0 = 0;
        _this.t2 = 0;
        _this.s1 = null;
        _this.s2 = null;
        _this.tc = false;
        _this.s5 = false;
        _this.s6 = false;
        return _this;
    }
    Object.defineProperty(CategoryChartDescription.prototype, "tooltipTemplateRef", {
        get: function () {
            return this.uo;
        },
        set: function (a) {
            this.uo = a;
            this.e("TooltipTemplateRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "width", {
        get: function () {
            return this.us;
        },
        set: function (a) {
            this.us = a;
            this.e("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "height", {
        get: function () {
            return this.um;
        },
        set: function (a) {
            this.um = a;
            this.e("Height");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "background", {
        get: function () {
            return this.uk;
        },
        set: function (a) {
            this.uk = a;
            this.e("Background");
        },
        enumerable: false,
        configurable: true
    });
    CategoryChartDescription.prototype.get_type = function () {
        return "CategoryChart";
    };
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInDuration", {
        get: function () {
            return this.uf;
        },
        set: function (a) {
            this.uf = a;
            this.e("TransitionInDuration");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInEasingFunctionRef", {
        get: function () {
            return this.up;
        },
        set: function (a) {
            this.up = a;
            this.e("TransitionInEasingFunctionRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "chartType", {
        get: function () {
            return this.ul;
        },
        set: function (a) {
            this.ul = a;
            this.e("ChartType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "markerCollisionAvoidance", {
        get: function () {
            return this.un;
        },
        set: function (a) {
            this.un = a;
            this.e("MarkerCollisionAvoidance");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isSplineShapePartOfRange", {
        get: function () {
            return this.s7;
        },
        set: function (a) {
            this.s7 = a;
            this.e("IsSplineShapePartOfRange");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isTransitionInEnabled", {
        get: function () {
            return this.s8;
        },
        set: function (a) {
            this.s8 = a;
            this.e("IsTransitionInEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInMode", {
        get: function () {
            return this.uq;
        },
        set: function (a) {
            this.uq = a;
            this.e("TransitionInMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "transitionInSpeedType", {
        get: function () {
            return this.ur;
        },
        set: function (a) {
            this.ur = a;
            this.e("TransitionInSpeedType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisInterval", {
        get: function () {
            return this.tu;
        },
        set: function (a) {
            this.tu = a;
            this.e("XAxisInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisMinorInterval", {
        get: function () {
            return this.tx;
        },
        set: function (a) {
            this.tx = a;
            this.e("XAxisMinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisGap", {
        get: function () {
            return this.tt;
        },
        set: function (a) {
            this.tt = a;
            this.e("XAxisGap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisMinimumGapSize", {
        get: function () {
            return this.tw;
        },
        set: function (a) {
            this.tw = a;
            this.e("XAxisMinimumGapSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisMaximumGap", {
        get: function () {
            return this.tv;
        },
        set: function (a) {
            this.tv = a;
            this.e("XAxisMaximumGap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisOverlap", {
        get: function () {
            return this.ty;
        },
        set: function (a) {
            this.ty = a;
            this.e("XAxisOverlap");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisInterval", {
        get: function () {
            return this.tz;
        },
        set: function (a) {
            this.tz = a;
            this.e("YAxisInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "autoMarginAndAngleUpdateMode", {
        get: function () {
            return this.uj;
        },
        set: function (a) {
            this.uj = a;
            this.e("AutoMarginAndAngleUpdateMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "shouldAutoExpandMarginForInitialLabels", {
        get: function () {
            return this.s9;
        },
        set: function (a) {
            this.s9 = a;
            this.e("ShouldAutoExpandMarginForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "shouldConsiderAutoRotationForInitialLabels", {
        get: function () {
            return this.ta;
        },
        set: function (a) {
            this.ta = a;
            this.e("ShouldConsiderAutoRotationForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "autoExpandMarginExtraPadding", {
        get: function () {
            return this.tr;
        },
        set: function (a) {
            this.tr = a;
            this.e("AutoExpandMarginExtraPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "autoExpandMarginMaximumValue", {
        get: function () {
            return this.ts;
        },
        set: function (a) {
            this.ts = a;
            this.e("AutoExpandMarginMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisFavorLabellingScaleEnd", {
        get: function () {
            return this.te;
        },
        set: function (a) {
            this.te = a;
            this.e("YAxisFavorLabellingScaleEnd");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "xAxisEnhancedIntervalPreferMoreCategoryLabels", {
        get: function () {
            return this.tb;
        },
        set: function (a) {
            this.tb = a;
            this.e("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisEnhancedIntervalPreferMoreCategoryLabels", {
        get: function () {
            return this.td;
        },
        set: function (a) {
            this.td = a;
            this.e("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisAutoRangeBufferMode", {
        get: function () {
            return this.ut;
        },
        set: function (a) {
            this.ut = a;
            this.e("YAxisAutoRangeBufferMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisIsLogarithmic", {
        get: function () {
            return this.tf;
        },
        set: function (a) {
            this.tf = a;
            this.e("YAxisIsLogarithmic");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisLogarithmBase", {
        get: function () {
            return this.ug;
        },
        set: function (a) {
            this.ug = a;
            this.e("YAxisLogarithmBase");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMinimumValue", {
        get: function () {
            return this.t1;
        },
        set: function (a) {
            this.t1 = a;
            this.e("YAxisMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMaximumValue", {
        get: function () {
            return this.t0;
        },
        set: function (a) {
            this.t0 = a;
            this.e("YAxisMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisMinorInterval", {
        get: function () {
            return this.t2;
        },
        set: function (a) {
            this.t2 = a;
            this.e("YAxisMinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "negativeBrushes", {
        get: function () {
            return this.s1;
        },
        set: function (a) {
            this.s1 = a;
            this.e("NegativeBrushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "negativeOutlines", {
        get: function () {
            return this.s2;
        },
        set: function (a) {
            this.s2 = a;
            this.e("NegativeOutlines");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "yAxisAbbreviateLargeNumbers", {
        get: function () {
            return this.tc;
        },
        set: function (a) {
            this.tc = a;
            this.e("YAxisAbbreviateLargeNumbers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isCategoryHighlightingEnabled", {
        get: function () {
            return this.s5;
        },
        set: function (a) {
            this.s5 = a;
            this.e("IsCategoryHighlightingEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryChartDescription.prototype, "isItemHighlightingEnabled", {
        get: function () {
            return this.s6;
        },
        set: function (a) {
            this.s6 = a;
            this.e("IsItemHighlightingEnabled");
        },
        enumerable: false,
        configurable: true
    });
    CategoryChartDescription.$t = markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
}(XYChartDescription));
export { CategoryChartDescription };
