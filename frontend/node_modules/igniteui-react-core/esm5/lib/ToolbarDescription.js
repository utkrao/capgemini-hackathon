/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var ToolbarDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolbarDescription, _super);
    function ToolbarDescription() {
        var _this = _super.call(this) || this;
        _this.h = null;
        _this.f = null;
        _this.g = null;
        _this.o = null;
        _this.l = 0;
        _this.p = null;
        _this.q = null;
        _this.n = null;
        _this.s = null;
        _this.t = null;
        _this.r = null;
        return _this;
    }
    ToolbarDescription.prototype.get_type = function () {
        return "Toolbar";
    };
    Object.defineProperty(ToolbarDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "autoGeneratedActions", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.e("AutoGeneratedActions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "actions", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("Actions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "actualActions", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("ActualActions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "cellFontFamily", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("CellFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "cellFontSize", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("CellFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "cellFontStyle", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("CellFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "cellFontWeight", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("CellFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "backgroundColor", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("BackgroundColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "targetRef", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("TargetRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "textColor", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.e("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolbarDescription.prototype, "orientation", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("Orientation");
        },
        enumerable: false,
        configurable: true
    });
    ToolbarDescription.$t = markType(ToolbarDescription, 'ToolbarDescription', Description.$);
    return ToolbarDescription;
}(Description));
export { ToolbarDescription };
