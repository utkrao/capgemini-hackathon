/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { BaseDataSource } from "./BaseDataSource";
import { Base, typeCast, Array_$type, Number_$type, fromEnum, markType } from "./type";
import { RearrangedListView } from "./RearrangedListView";
import { DataSourcePropertiesComparer } from "./DataSourcePropertiesComparer";
import { List$1 } from "./List$1";
import { DataSourceExecutionContext } from "./DataSourceExecutionContext";
import { DataSourceLocalDataProvider } from "./DataSourceLocalDataProvider";
import { DataSourceSpecialRow } from "./DataSourceSpecialRow";
import { ISupportsDataChangeNotifications_$type } from "./ISupportsDataChangeNotifications";
import { TransactionType, TransactionType_$type } from "./TransactionType";
import { ISupportsExpansionChangeNotifications_$type } from "./ISupportsExpansionChangeNotifications";
/**
 * @hidden
 */
var LocalDataSource = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LocalDataSource, _super);
    function LocalDataSource() {
        var _this = _super.call(this) || this;
        _this.cx = null;
        _this.cw = null;
        _this.dx = null;
        _this.c2 = null;
        _this.c6 = null;
        _this.c8 = null;
        _this.c4 = null;
        _this.di = new List$1(Array_$type, 0);
        _this.c9 = false;
        _this.cv = null;
        _this.dr = -1;
        _this.dj = -1;
        _this.dt = -1;
        _this.dl = -1;
        _this.du = -1;
        _this.dm = -1;
        _this.ds = -1;
        _this.dk = -1;
        _this.dw = -1;
        _this.dv = -1;
        _this.dp = -1;
        _this.dn = -1;
        _this.dq = -1;
        _this.executionContext = new DataSourceExecutionContext();
        _this.u.l = false;
        return _this;
    }
    LocalDataSource.prototype.get_actualBaseDataProvider = function () {
        return this.actualDataProvider;
    };
    Object.defineProperty(LocalDataSource.prototype, "actualBaseDataProvider", {
        get: function () {
            return this.get_actualBaseDataProvider();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalDataSource.prototype, "dataProvider", {
        get: function () {
            return this.cx;
        },
        set: function (a) {
            var b = this.cx;
            this.cx = a;
            if (b != this.cx) {
                this.onPropertyUpdated("DataProvider", b, this.cx);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalDataSource.prototype, "actualDataProvider", {
        get: function () {
            if (this.cw == null) {
                this.actualDataProvider = this.resolveDataProvider();
            }
            return this.cw;
        },
        set: function (a) {
            var b = this.cw;
            this.cw = a;
            if (b != this.cw) {
                this.onPropertyUpdated("ActualDataProvider", b, this.cw);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalDataSource.prototype, "dataSource", {
        get: function () {
            return this.dx;
        },
        set: function (a) {
            var b = this.dx;
            this.dx = a;
            if (b != this.dx) {
                this.onPropertyUpdated("ItemsSource", b, this.dx);
            }
        },
        enumerable: false,
        configurable: true
    });
    LocalDataSource.prototype.canInitialize = function () {
        var a = _super.prototype.canInitialize.call(this);
        if (!a) {
            return false;
        }
        return this.dataSource != null;
    };
    Object.defineProperty(LocalDataSource.prototype, "c3", {
        get: function () {
            return this.c2;
        },
        set: function (a) {
            this.c2 = a;
            this.actualDataProvider = this.resolveDataProvider();
        },
        enumerable: false,
        configurable: true
    });
    LocalDataSource.prototype.resolveDataProvider = function () {
        var provider_ = new DataSourceLocalDataProvider();
        provider_.executionContext = new DataSourceExecutionContext();
        return provider_;
    };
    LocalDataSource.prototype.propertyUpdatedOverride = function (a, b, c) {
        _super.prototype.propertyUpdatedOverride.call(this, a, b, c);
        switch (a) {
            case "DataProvider":
                this.actualDataProvider = this.dataProvider;
                break;
            case "ActualDataProvider":
                if (this.actualDataProvider != null) {
                    this.actualDataProvider.dataSource = this.dataSource;
                    this.actualSchema = this.actualDataProvider.actualSchema;
                    this.actualCount = this.resolveFullCount(this.actualDataProvider.actualCount);
                }
                this.queueAutoRefresh();
                break;
            case "ItemsSource":
                if (this.actualDataProvider != null) {
                    this.actualDataProvider.dataSource = this.dataSource;
                    this.actualSchema = this.actualDataProvider.actualSchema;
                    this.actualCount = this.resolveFullCount(this.actualDataProvider.actualCount);
                }
                this.queueAutoRefresh();
                break;
        }
    };
    LocalDataSource.prototype.getItemAtIndex = function (a) {
        if (this.c6 != null && this.c6.a6 != null) {
            return this.c6.a6.item(a);
        }
        else {
            return this.actualDataProvider.getItemAtIndex(a);
        }
    };
    LocalDataSource.prototype.getItemFromKey = function (a) {
        var b = this.actualPrimaryKey;
        if (b == null || b.length < 1 || this.actualBaseDataProvider == null) {
            return a[0];
        }
        var c = this.c5();
        var d;
        if (this.c6 != null) {
            var e = this.c6.a6.count;
            for (var f = 0; f < e; f++) {
                d = this.c6.a6.item(f);
                if (typeCast(DataSourceSpecialRow.$, d) !== null) {
                    var g = d;
                    if (g.rowType == 1 && !this.isSectionContentVisible && this.isSectionHeaderNormalRow) {
                        if (c.i(d, a) == 0) {
                            return d;
                        }
                    }
                }
                else if (c.i(d, a) == 0) {
                    return d;
                }
            }
            return null;
        }
        if (this.actualDataProvider != null && this.actualDataProvider.isKeyIndexLookupSupported) {
            var h = this.actualDataProvider.indexOfKey(a);
            return this.actualDataProvider.getItemAtIndex(h);
        }
        if (this.actualDataProvider != null) {
            var i = this.actualDataProvider.actualCount;
            for (var j = 0; j < i; j++) {
                d = this.actualDataProvider.getItemAtIndex(j);
                if (c.i(d, a) == 0) {
                    return d;
                }
            }
        }
        return null;
    };
    LocalDataSource.prototype.getItemPropertyAtIndex = function (a, b) {
        var c;
        if (this.c6 != null) {
            c = this.c6.a6.item(a);
        }
        else {
            c = this.actualDataProvider.getItemAtIndex(a);
        }
        if (c == null) {
            return null;
        }
        var item_ = c;
        if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
            return this.getSpecialRowItemValue(c, b);
        }
        if (this.aq()) {
            var d = this.an(c, b);
            if (d) {
                var e = this.a1(c, b);
                return e;
            }
        }
        return this.actualDataProvider.getItemValue(c, b);
    };
    LocalDataSource.prototype.c1 = function () {
        return this.actualDataProvider;
    };
    LocalDataSource.prototype.db = function () {
        return this.di != null && this.di.count > 0;
    };
    LocalDataSource.prototype.refreshInternalOverride = function () {
        _super.prototype.refreshInternalOverride.call(this);
        if (this.actualDataProvider != null) {
            if (this.dc() || this.dd() || this.de() || this.df() || this.db()) {
                if (this.c6 == null) {
                    if (this.c8 == null) {
                        this.c8 = new LocalDataSourceViewUpdateNotifier(this);
                    }
                    this.c6 = new RearrangedListView(this.actualDataProvider);
                    this.c6.ab = this.c8;
                    this.c6.ad = new LocalDataSourceViewExpansionNotifier(this);
                }
                this.ensureComparables(this.actualDataProvider.actualSchema);
                this.c6.av = this.shouldEmitSectionHeaders && this.ap;
                this.c6.au = this.shouldEmitSectionFooters && this.ap;
                this.c6.aw = this.shouldEmitShiftedRows;
                this.c6.cb(this.di);
                this.c6.a2 = this.dh();
                this.c6.a1 = this.dg();
                this.c6.p = this.c5();
                this.c6.ae = this.groupDescriptions;
                this.c6.af = this.sortDescriptions;
                this.c6.ag = this.summaryDescriptions;
                this.c6.l = this.summaryScope;
                this.c6.am = this.includeSummaryRowsInSection;
                this.c6.as = this.isSectionSummaryRowsAtBottom;
                this.c6.j = this.sectionHeaderDisplayMode;
                this.c6.m = this;
                this.c6.ap = this.groupDescriptions != null && this.groupDescriptions.k.count > 0;
                this.c6.t = this.c7();
                this.c6.b6();
                this.actualSchema = this.actualDataProvider.actualSchema;
                this.actualCount = this.c6.a6.count;
            }
            else {
                var a = this.c1();
                this.actualSchema = this.actualDataProvider.actualSchema;
                if (a != null) {
                    this.actualCount = a.actualCount;
                }
                else {
                    this.actualCount = 0;
                }
                if (this.c6 != null) {
                    this.c6.ab = null;
                    this.c6 = null;
                    this.onBroadcastClearItems();
                }
            }
        }
        else {
            this.actualCount = 0;
            this.actualSchema = null;
        }
    };
    LocalDataSource.prototype.get_isItemIndexLookupSupported = function () {
        return true;
    };
    LocalDataSource.prototype.get_isKeyIndexLookupSupported = function () {
        return true;
    };
    LocalDataSource.prototype.indexOfItem = function (a) {
        if (this.c6 != null) {
            return this.c6.a6.indexOf(a);
        }
        if (this.actualDataProvider != null && this.actualDataProvider.isItemIndexLookupSupported) {
            return this.actualDataProvider.indexOfItem(a);
        }
        if (this.actualDataProvider != null) {
            var b = this.actualDataProvider.actualCount;
            var c = void 0;
            for (var d = 0; d < b; d++) {
                c = this.actualDataProvider.getItemAtIndex(d);
                if (this.da(c, a)) {
                    return d;
                }
            }
        }
        return -1;
    };
    LocalDataSource.prototype.da = function (a, b) {
        if (a == null && b == null) {
            return true;
        }
        if (a == null || b == null) {
            return false;
        }
        return Base.equalsStatic(a, b);
    };
    LocalDataSource.prototype.indexOfKey = function (a) {
        var b = this.actualPrimaryKey;
        if (b == null || b.length < 1 || this.actualBaseDataProvider == null) {
            return this.indexOfItem(a[0]);
        }
        var c = this.c5();
        var d;
        if (this.c6 != null) {
            var e = this.c6.a6.count;
            for (var f = 0; f < e; f++) {
                d = this.c6.a6.item(f);
                if (typeCast(DataSourceSpecialRow.$, d) !== null) {
                    var g = d;
                    if (g.rowType == 1 && !this.isSectionContentVisible && this.isSectionHeaderNormalRow) {
                        if (c.i(d, a) == 0) {
                            return f;
                        }
                    }
                }
                else if (c.i(d, a) == 0) {
                    return f;
                }
            }
            return -1;
        }
        if (this.actualDataProvider != null && this.actualDataProvider.isKeyIndexLookupSupported) {
            return this.actualDataProvider.indexOfKey(a);
        }
        if (this.actualDataProvider != null) {
            var h = this.actualDataProvider.actualCount;
            for (var i = 0; i < h; i++) {
                d = this.actualDataProvider.getItemAtIndex(i);
                if (c.i(d, a) == 0) {
                    return i;
                }
            }
        }
        return -1;
    };
    LocalDataSource.prototype.onActualPrimaryKeyChangedOverrride = function (a, b) {
        _super.prototype.onActualPrimaryKeyChangedOverrride.call(this, a, b);
        this.c4 = null;
    };
    LocalDataSource.prototype.c5 = function () {
        if (this.c4 != null) {
            return this.c4;
        }
        if (this.actualPrimaryKey == null) {
            this.c4 = new DataSourcePropertiesComparer(null, null, null, this);
            return this.c4;
        }
        var a = new Array(this.actualPrimaryKey.length);
        for (var b = 0; b < a.length; b++) {
            a[b] = 0;
        }
        this.c4 = new DataSourcePropertiesComparer(this.actualPrimaryKey, a, this.d, this);
        return this.c4;
    };
    LocalDataSource.prototype.c7 = function () {
        if (this.filterExpressions.k.count == 0) {
            return null;
        }
        var a = this.actualDataProvider;
        var b = this.actualDataProvider.actualSchema;
        var c = this.filterExpressions.k;
        var d = function (e) {
            for (var f = 0; f < c.count; f++) {
                if (!c.item(f).match(e, a, b)) {
                    return false;
                }
            }
            return true;
        };
        return d;
    };
    LocalDataSource.prototype.dh = function () {
        var a = 0;
        if (this.sortDescriptions.k.count == 0 && (this.groupDescriptions == null || this.groupDescriptions.k.count == 0)) {
            return null;
        }
        a = this.sortDescriptions.k.count;
        if (this.groupDescriptions != null) {
            a += this.groupDescriptions.k.count;
        }
        var b = new Array(a);
        var c = new Array(a);
        var d = 0;
        if (this.groupDescriptions != null) {
            for (var e = 0; e < this.groupDescriptions.k.count; e++) {
                b[e] = this.groupDescriptions.k.item(e).propertyName;
                c[e] = this.groupDescriptions.k.item(e).direction;
                d++;
            }
        }
        for (var f = 0; f < this.sortDescriptions.k.count; f++) {
            b[f + d] = this.sortDescriptions.k.item(f).propertyName;
            c[f + d] = this.sortDescriptions.k.item(f).direction;
        }
        return new DataSourcePropertiesComparer(b, c, this.d, this);
    };
    LocalDataSource.prototype.dg = function () {
        if (this.groupDescriptions == null || this.groupDescriptions.k.count < 1) {
            return null;
        }
        var a = 0;
        a = this.groupDescriptions.k.count;
        var b = new Array(a);
        var c = new Array(a);
        if (this.groupDescriptions != null) {
            for (var d = 0; d < this.groupDescriptions.k.count; d++) {
                b[d] = this.groupDescriptions.k.item(d).propertyName;
                c[d] = this.groupDescriptions.k.item(d).direction;
            }
        }
        return new DataSourcePropertiesComparer(b, c, this.d, this);
    };
    LocalDataSource.prototype.dd = function () {
        if (this.groupDescriptions == null || this.groupDescriptions.k.count < 1) {
            return false;
        }
        if (this.actualDataProvider == null) {
            return false;
        }
        if (this.actualDataProvider.isGroupingSupported) {
            return false;
        }
        return true;
    };
    LocalDataSource.prototype.de = function () {
        if (this.sortDescriptions == null || this.sortDescriptions.k.count < 1) {
            return false;
        }
        if (this.actualDataProvider == null) {
            return false;
        }
        if (this.actualDataProvider.isSortingSupported) {
            return false;
        }
        return true;
    };
    LocalDataSource.prototype.dc = function () {
        return this.filterExpressions != null && this.filterExpressions.k.count > 0;
    };
    LocalDataSource.prototype.df = function () {
        if (this.summaryDescriptions == null || this.summaryDescriptions.k.count < 1) {
            return false;
        }
        return true;
    };
    LocalDataSource.prototype.onClearItemsOverride = function () {
        if (this.c6 != null) {
            this.c6.notifyClearItems();
            this.queueAutoRefresh();
        }
        else {
            _super.prototype.onClearItemsOverride.call(this);
        }
    };
    LocalDataSource.prototype.onSetItemOverride = function (a, b, c) {
        if (this.c6 != null) {
            this.c6.notifySetItem(a, b, c);
        }
        else {
            _super.prototype.onSetItemOverride.call(this, a, b, c);
        }
    };
    LocalDataSource.prototype.onInsertItemOverride = function (a, b) {
        if (this.c6 != null) {
            this.c6.notifyInsertItem(a, b);
        }
        else {
            _super.prototype.onInsertItemOverride.call(this, a, b);
        }
    };
    LocalDataSource.prototype.onRemoveItemOverride = function (a, b) {
        if (this.c6 != null) {
            this.c6.notifyRemoveItem(a, b);
        }
        else {
            _super.prototype.onRemoveItemOverride.call(this, a, b);
        }
    };
    LocalDataSource.prototype.d2 = function () {
        this.actualCount = this.c6.a6.count;
        this.onBroadcastClearItems();
    };
    LocalDataSource.prototype.d5 = function (a, b, c) {
        this.actualCount = this.c6.a6.count;
        this.onBroadcastSetItem(a, b, c);
    };
    LocalDataSource.prototype.d3 = function (a, b) {
        this.actualCount = this.c6.a6.count;
        this.onBroadcastInsertItem(a, b);
    };
    LocalDataSource.prototype.d4 = function (a, b) {
        this.actualCount = this.c6.a6.count;
        this.onBroadcastRemoveItem(a, b);
    };
    LocalDataSource.prototype.pinRow = function (a) {
        _super.prototype.pinRow.call(this, a);
        this.dr = -1;
        this.dj = -1;
        if (this.c6 != null) {
            this.di.add(a);
            this.c6.b5(a);
        }
        else {
            this.di.add(a);
            this.queueAutoRefresh();
        }
    };
    LocalDataSource.prototype.unpinRow = function (a) {
        _super.prototype.unpinRow.call(this, a);
        var b = this.c5();
        if (this.c6 != null) {
            for (var c = this.di.count - 1; c >= 0; c--) {
                var d = this.di._inner[c];
                if (d.length != a.length) {
                    continue;
                }
                if (b.h(d, a) == 0) {
                    this.di.removeAt(c);
                    this.c6.cc(d);
                }
            }
        }
        else {
            for (var e = this.di.count - 1; e >= 0; e--) {
                var f = this.di._inner[e];
                if (f.length != a.length) {
                    continue;
                }
                if (b.h(f, a) == 0) {
                    this.di.removeAt(e);
                }
            }
            this.queueAutoRefresh();
        }
        this.dr = -1;
        this.dj = -1;
    };
    LocalDataSource.prototype.clearPinnedRows = function () {
        for (var a = this.di.count - 1; a >= 0; a--) {
            this.unpinRow(this.di._inner[a]);
        }
    };
    LocalDataSource.prototype.isRowPinned = function (a) {
        if (this.c6 == null) {
            return false;
        }
        var b = this.getItemAtIndex(a);
        if (b == null) {
            return false;
        }
        var item_ = b;
        if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
            if (item_.rowType == 3) {
                return true;
            }
        }
        var c = this.c5();
        var d;
        if (this.actualPrimaryKey == null) {
            d = new Array(1);
            d[0] = b;
        }
        else {
            var e = this.actualPrimaryKey;
            var f = e.length;
            d = new Array(f);
            for (var g = 0; g < f; g++) {
                d[g] = this.getItemProperty(b, e[g]);
            }
        }
        for (var h = 0; h < this.di.count; h++) {
            if (c.h(this.di._inner[h], d) == 0) {
                return true;
            }
        }
        return false;
    };
    LocalDataSource.prototype.get_isSortingSupported = function () {
        if (this.externalDataSource != null && !this.c9) {
            this.c9 = true;
            var a = this.externalDataSource.isSortingSupportedOverride;
            this.c9 = false;
            return a;
        }
        return true;
    };
    LocalDataSource.prototype.get_isFilteringSupported = function () {
        if (this.externalDataSource != null && !this.c9) {
            this.c9 = true;
            var a = this.externalDataSource.isFilteringSupportedOverride;
            this.c9 = false;
            return a;
        }
        return true;
    };
    LocalDataSource.prototype.get_isGroupingSupported = function () {
        if (this.externalDataSource != null && !this.c9) {
            this.c9 = true;
            var a = this.externalDataSource.isGroupingSupportedOverride;
            this.c9 = false;
            return a;
        }
        return true;
    };
    LocalDataSource.prototype.getStickyRowPriority = function (a) {
        var b = this.getRowType(a);
        switch (b) {
            case 1: return 100 - this.getRowLevel(a);
            case 2: return 99 - this.getRowLevel(a);
            case 3:
            case 5: return 2;
            case 4: return 3;
        }
        return 1;
    };
    LocalDataSource.prototype.getStickyRowsInRange = function (a, b) {
        if (this.c6 == null || ((this.groupDescriptions == null || this.groupDescriptions.k.count == 0) && (this.summaryDescriptions == null || this.summaryDescriptions.k.count == 0) && !this.db())) {
            return null;
        }
        var c = null;
        var d = null;
        if (this.c6.a5.count == 1) {
            c = this.c6.a5._inner[0];
            d = this.c6.a5._inner[0];
        }
        else {
            c = this.c6.w(a);
            if (c != null) {
                while (c.z != -1) {
                    c = this.c6.a5._inner[c.z];
                }
            }
            d = this.c6.w(b);
            if (b >= this.c6.a6.count - this.c6.bk) {
                d = this.c6.v();
            }
        }
        if (c == null || d == null) {
            return null;
        }
        if (c.ae == this.dr && c.aa == this.dt && c.af == this.du && c.ad == this.ds && c.ah == this.dw && c.ag == this.dv && d.ae == this.dj && d.aa == this.dl && d.af == this.dm && d.ad == this.dk && d.ah == this.dp && d.ag == this.dn && this.c6.bk == this.dq) {
            return this.cv;
        }
        this.dr = c.ae;
        this.dj = d.ae;
        this.dt = c.aa;
        this.dl = d.aa;
        this.du = c.af;
        this.dm = d.af;
        this.ds = c.ad;
        this.dk = d.ad;
        this.dw = c.ah;
        this.dv = c.ag;
        this.dp = d.ah;
        this.dn = d.ag;
        this.dq = this.c6.bk;
        if (this.c6.a5.count == 1) {
            this.dj = d.ad;
        }
        var e = 0;
        if (this.shouldEmitSectionHeaders && this.ap) {
            e = 1;
        }
        var f = this.c6.ba();
        var g = new List$1(Number_$type, 0);
        for (var h = c.ae; h <= d.ae; h++) {
            var i = this.c6.a5._inner[h];
            var j = this.c6.a5._inner[h].c.length;
            var k = this.c6.a5._inner[h].v();
            if (this.shouldEmitSectionHeaders && this.ap) {
                for (var l = 0; l < j; l++) {
                    if (this.c6.a5._inner[h].a[l] != null) {
                        var m = i.af + i.b[l];
                        g.add(m);
                        if (this.summaryScope == 0 || this.summaryScope == 2) {
                            if (i.c[l] && this.includeSummaryRowsInSection && !this.isSectionSummaryRowsAtBottom) {
                                for (var n = 0; n < f; n++) {
                                    g.add(m + 1 + n);
                                }
                            }
                        }
                    }
                    if (!this.c6.a5._inner[h].c[l]) {
                        break;
                    }
                }
            }
            if (this.c6.a5._inner[h].p) {
                if (this.shouldEmitShiftedRows) {
                    for (var o = 0; o < this.c6.a5._inner[h].aa; o++) {
                        g.add(this.c6.a5._inner[h].af + this.c6.a5._inner[h].ah + o + k);
                    }
                }
            }
            if (this.summaryScope == 0 || this.summaryScope == 2) {
                if (this.includeSummaryRowsInSection && this.isSectionSummaryRowsAtBottom) {
                    for (var p = this.c6.a5._inner[h].ag - 1; p >= 0; p--) {
                        if (this.shouldEmitSectionFooters) {
                            g.add(this.c6.a5._inner[h].ad - k - p);
                        }
                        else {
                            g.add(this.c6.a5._inner[h].ad - p);
                        }
                    }
                }
            }
            if (this.shouldEmitSectionFooters && this.ap) {
                for (var q = j - 1; q >= 0; q--) {
                    if (!this.c6.a5._inner[h].c[q]) {
                        break;
                    }
                    g.add(this.c6.a5._inner[h].ad - q);
                }
            }
        }
        for (var r = this.c6.a6.count - this.c6.bk; r < this.c6.a6.count; r++) {
            g.add(r);
        }
        this.cv = g.toArray();
        return this.cv;
    };
    LocalDataSource.prototype.isExclusivelySticky = function (a) {
        var b = this.getRowType(a);
        return b == 1 || b == 2 || b == 4 || (this.isSectionSummaryRowsAtBottom && b == 5);
    };
    LocalDataSource.prototype.getRowType = function (a) {
        if (a < 0) {
            return 0;
        }
        var b = this.getItemAtIndex(a);
        var item_ = b;
        if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
            var c = b.rowType;
            if (this.isSectionHeaderNormalRow && c == 1) {
                return 0;
            }
            return c;
        }
        return 0;
    };
    LocalDataSource.prototype.setIsRowExpandedAtIndex = function (a, b) {
        if (this.isSectionCollapsable && this.c6 != null && this.c6.a6.count > 0 && this.c6.a6.count > a) {
            this.c6.ca(a, b);
        }
    };
    LocalDataSource.prototype.getIsRowExpandedAtIndex = function (a) {
        if (this.c6 != null && this.c6.a6.count > 0 && this.c6.a6.count > a) {
            return this.c6.ak(a);
        }
        return true;
    };
    LocalDataSource.prototype.getRowLevel = function (a) {
        if (a < 0) {
            return 0;
        }
        var b = this.getItemAtIndex(a);
        var item_ = b;
        if ((item_ != null && item_.$$isSpecialRow !== undefined)) {
            return b.level;
        }
        if (this.sectionHeaderDisplayMode == 1) {
            return this.groupDescriptions.k.count;
        }
        else if (this.groupDescriptions.k.count > 0) {
            return 1;
        }
        return 0;
    };
    LocalDataSource.prototype.getRootSummaryRowCount = function () {
        if (this.c6 != null) {
            return this.c6.bk;
        }
        return 0;
    };
    LocalDataSource.prototype.getRootSummaryResults = function () {
        if (this.c6 != null) {
            return this.c6.i;
        }
        return null;
    };
    LocalDataSource.prototype.getSectionSummaryResults = function (a) {
        if (this.c6 != null && this.c6.a5.count > 0 && a >= 0 && a < this.c6.a5.count) {
            return this.c6.a5._inner[a].i;
        }
        return null;
    };
    LocalDataSource.prototype.clone = function () {
        var a = new LocalDataSource();
        a.dataSource = this.dataSource;
        _super.prototype.cloneProperties.call(this, a);
        return a;
    };
    LocalDataSource.prototype.aq = function () {
        return !this.isReadOnly && this.actualBaseDataProvider != null && this.u != null;
    };
    LocalDataSource.prototype.co = function (a, b) {
        var e_1, _a, e_2, _b;
        if (a == 5) {
            var c = new List$1(TransactionType_$type, 0);
            var d = new List$1(Base.$, 0);
            var e = b;
            var f = e.a;
            for (var g = 0; g < f.length; g++) {
                if (f[g].transactionType == 1) {
                    var h = f[g].id;
                    var i = this.getItemFromKey(h);
                    if (i != null) {
                        var j = f[g].value;
                        var k = this.indexOfItem(i);
                        var l = null;
                        if (this.c6 != null && k > -1) {
                            l = this.c6.w(k);
                            for (var m = 0; m < this.summaryDescriptions.k.count; m++) {
                                var n = this.summaryDescriptions.k.item(m);
                                if (n.operand == 5 || j.containsKey(n.propertyName)) {
                                    this.c6.cl(m, k, i, false, l);
                                }
                            }
                        }
                        try {
                            for (var _c = (e_1 = void 0, __values(fromEnum(j))), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var o = _d.value;
                                this.actualDataProvider.setItemValue(i, o.key, o.value);
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (_d && !_d.done && (_a = _c.return))
                                    _a.call(_c);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                        if (l != null && this.c6 != null && k > -1) {
                            for (var p = 0; p < this.summaryDescriptions.k.count; p++) {
                                var q = this.summaryDescriptions.k.item(p);
                                if (q.operand == 5 || j.containsKey(q.propertyName)) {
                                    this.c6.cl(p, k, i, true, l);
                                }
                            }
                        }
                        if (k > -1) {
                            this.onBroadcastSetItem(k, i, i);
                        }
                        d.add1(i);
                        c.add(1);
                        if (this.di.count > 0) {
                            var r = this.c5();
                            for (var s = 0; s < this.di.count; s++) {
                                if (r.h(this.di._inner[s], h) == 0) {
                                    var t = this.getStickyRows();
                                    for (var u = 0; u < t.length; u++) {
                                        var v = t[u];
                                        var w = typeCast(DataSourceSpecialRow.$, this.c6.a6.item(v));
                                        if (w != null && w.rowType == 3 && w.targetRow == i) {
                                            this.onBroadcastSetItem(v, w, w);
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                else if (f[g].transactionType == TransactionType.Delete) {
                    var x = f[g].id;
                    var y = this.indexOfKey(x);
                    if (y > -1) {
                        var z = this.getItemAtIndex(y);
                        this.actualDataProvider.removeItem(z);
                        this.notifyRemoveItem(y, z);
                        d.add1(z);
                        c.add(TransactionType.Delete);
                    }
                }
                else if (f[g].transactionType == 0) {
                    var aa = f[g].id[0];
                    if (f[g].value != null) {
                        var ab = f[g].value;
                        try {
                            for (var _e = (e_2 = void 0, __values(fromEnum(ab))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var ac = _f.value;
                                this.actualDataProvider.setItemValue(aa, ac.key, ac.value);
                            }
                        }
                        catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return))
                                    _b.call(_e);
                            }
                            finally {
                                if (e_2)
                                    throw e_2.error;
                            }
                        }
                    }
                    this.actualDataProvider.addItem(aa);
                    d.add1(aa);
                    c.add(0);
                }
            }
            if (f.length > 0) {
                this.b0(e.id, this.getAggregatedChanges(e.id));
            }
        }
    };
    LocalDataSource.$t = markType(LocalDataSource, 'LocalDataSource', BaseDataSource.$);
    return LocalDataSource;
}(BaseDataSource));
export { LocalDataSource };
/**
 * @hidden
 */
var LocalDataSourceViewUpdateNotifier = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LocalDataSourceViewUpdateNotifier, _super);
    function LocalDataSourceViewUpdateNotifier(a) {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.a = a;
        return _this;
    }
    LocalDataSourceViewUpdateNotifier.prototype.notifyClearItems = function () {
        this.a.d2();
    };
    LocalDataSourceViewUpdateNotifier.prototype.notifyInsertItem = function (a, b) {
        this.a.d3(a, b);
    };
    LocalDataSourceViewUpdateNotifier.prototype.notifyRemoveItem = function (a, b) {
        this.a.d4(a, b);
    };
    LocalDataSourceViewUpdateNotifier.prototype.notifySetItem = function (a, b, c) {
        this.a.d5(a, b, c);
    };
    LocalDataSourceViewUpdateNotifier.$t = markType(LocalDataSourceViewUpdateNotifier, 'LocalDataSourceViewUpdateNotifier', Base.$, [ISupportsDataChangeNotifications_$type]);
    return LocalDataSourceViewUpdateNotifier;
}(Base));
export { LocalDataSourceViewUpdateNotifier };
/**
 * @hidden
 */
var LocalDataSourceViewExpansionNotifier = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LocalDataSourceViewExpansionNotifier, _super);
    function LocalDataSourceViewExpansionNotifier(a) {
        var _this = _super.call(this) || this;
        _this.a = null;
        _this.a = a;
        return _this;
    }
    LocalDataSourceViewExpansionNotifier.prototype.notifyRowExpansionChanged = function (a, b, c) {
        this.a.onRowExpansionChanged(a, b, c);
    };
    LocalDataSourceViewExpansionNotifier.$t = markType(LocalDataSourceViewExpansionNotifier, 'LocalDataSourceViewExpansionNotifier', Base.$, [ISupportsExpansionChangeNotifications_$type]);
    return LocalDataSourceViewExpansionNotifier;
}(Base));
export { LocalDataSourceViewExpansionNotifier };
