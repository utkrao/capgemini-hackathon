/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { AxisDescription } from "./AxisDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var NumericAxisBaseDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NumericAxisBaseDescription, _super);
    function NumericAxisBaseDescription() {
        var _this = _super.call(this) || this;
        _this.ei = null;
        _this.dx = 0;
        _this.dr = 0;
        _this.du = 0;
        _this.dw = 0;
        _this.dq = 0;
        _this.dt = 0;
        _this.dv = 0;
        _this.dp = 0;
        _this.dy = 0;
        _this.ds = 0;
        _this.dz = 0;
        _this.di = false;
        _this.df = false;
        _this.dg = false;
        _this.eb = 0;
        _this.ej = null;
        _this.ed = null;
        _this.dc = null;
        _this.dh = false;
        _this.de = false;
        _this.eg = null;
        _this.ef = null;
        _this.ee = null;
        _this.eh = null;
        return _this;
    }
    NumericAxisBaseDescription.prototype.get_type = function () {
        return "NumericAxisBase";
    };
    Object.defineProperty(NumericAxisBaseDescription.prototype, "autoRangeBufferMode", {
        get: function () {
            return this.ei;
        },
        set: function (a) {
            this.ei = a;
            this.e("AutoRangeBufferMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "minimumValue", {
        get: function () {
            return this.dx;
        },
        set: function (a) {
            this.dx = a;
            this.e("MinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMinimumValue", {
        get: function () {
            return this.dr;
        },
        set: function (a) {
            this.dr = a;
            this.e("ActualMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualVisibleMinimumValue", {
        get: function () {
            return this.du;
        },
        set: function (a) {
            this.du = a;
            this.e("ActualVisibleMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "maximumValue", {
        get: function () {
            return this.dw;
        },
        set: function (a) {
            this.dw = a;
            this.e("MaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMaximumValue", {
        get: function () {
            return this.dq;
        },
        set: function (a) {
            this.dq = a;
            this.e("ActualMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualVisibleMaximumValue", {
        get: function () {
            return this.dt;
        },
        set: function (a) {
            this.dt = a;
            this.e("ActualVisibleMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "interval", {
        get: function () {
            return this.dv;
        },
        set: function (a) {
            this.dv = a;
            this.e("Interval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualInterval", {
        get: function () {
            return this.dp;
        },
        set: function (a) {
            this.dp = a;
            this.e("ActualInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "minorInterval", {
        get: function () {
            return this.dy;
        },
        set: function (a) {
            this.dy = a;
            this.e("MinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMinorInterval", {
        get: function () {
            return this.ds;
        },
        set: function (a) {
            this.ds = a;
            this.e("ActualMinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "referenceValue", {
        get: function () {
            return this.dz;
        },
        set: function (a) {
            this.dz = a;
            this.e("ReferenceValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "isLogarithmic", {
        get: function () {
            return this.di;
        },
        set: function (a) {
            this.di = a;
            this.e("IsLogarithmic");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualIsLogarithmic", {
        get: function () {
            return this.df;
        },
        set: function (a) {
            this.df = a;
            this.e("ActualIsLogarithmic");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "favorLabellingScaleEnd", {
        get: function () {
            return this.dg;
        },
        set: function (a) {
            this.dg = a;
            this.e("FavorLabellingScaleEnd");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "logarithmBase", {
        get: function () {
            return this.eb;
        },
        set: function (a) {
            this.eb = a;
            this.e("LogarithmBase");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "formatAbbreviatedLabelRef", {
        get: function () {
            return this.ej;
        },
        set: function (a) {
            this.ej = a;
            this.e("FormatAbbreviatedLabelRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "abbreviatedLabelFormat", {
        get: function () {
            return this.ed;
        },
        set: function (a) {
            this.ed = a;
            this.e("AbbreviatedLabelFormat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "abbreviatedLabelFormatSpecifiers", {
        get: function () {
            return this.dc;
        },
        set: function (a) {
            this.dc = a;
            this.e("AbbreviatedLabelFormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "isFormattingAbbreviatedLargeNumber", {
        get: function () {
            return this.dh;
        },
        set: function (a) {
            this.dh = a;
            this.e("IsFormattingAbbreviatedLargeNumber");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "abbreviateLargeNumbers", {
        get: function () {
            return this.de;
        },
        set: function (a) {
            this.de = a;
            this.e("AbbreviateLargeNumbers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMinimumValueChangeRef", {
        get: function () {
            return this.eg;
        },
        set: function (a) {
            this.eg = a;
            this.e("ActualMinimumValueChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMaximumValueChangeRef", {
        get: function () {
            return this.ef;
        },
        set: function (a) {
            this.ef = a;
            this.e("ActualMaximumValueChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualIntervalChangeRef", {
        get: function () {
            return this.ee;
        },
        set: function (a) {
            this.ee = a;
            this.e("ActualIntervalChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericAxisBaseDescription.prototype, "actualMinorIntervalChangeRef", {
        get: function () {
            return this.eh;
        },
        set: function (a) {
            this.eh = a;
            this.e("ActualMinorIntervalChangeRef");
        },
        enumerable: false,
        configurable: true
    });
    NumericAxisBaseDescription.$t = markType(NumericAxisBaseDescription, 'NumericAxisBaseDescription', AxisDescription.$);
    return NumericAxisBaseDescription;
}(AxisDescription));
export { NumericAxisBaseDescription };
