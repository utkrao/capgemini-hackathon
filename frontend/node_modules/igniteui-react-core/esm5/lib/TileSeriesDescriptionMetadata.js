/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GeographicMapImageryDescriptionMetadata } from "./GeographicMapImageryDescriptionMetadata";
import { ShapeSeriesBaseDescriptionMetadata } from "./ShapeSeriesBaseDescriptionMetadata";
import { TileSeriesDescription } from "./TileSeriesDescription";
/**
 * @hidden
 */
var TileSeriesDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TileSeriesDescriptionMetadata, _super);
    function TileSeriesDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TileSeriesDescriptionMetadata.b = function (a) {
        if (TileSeriesDescriptionMetadata.a == null) {
            TileSeriesDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            TileSeriesDescriptionMetadata.c(TileSeriesDescriptionMetadata.a);
        }
        if (a.g(TileSeriesDescriptionMetadata.a)) {
            return;
        }
        a.s(TileSeriesDescriptionMetadata.a);
        GeographicMapImageryDescriptionMetadata.d(a);
    };
    TileSeriesDescriptionMetadata.c = function (a) {
        ShapeSeriesBaseDescriptionMetadata.c(a);
        a.item("TileImagery", "ExportedType:GeographicMapImagery");
    };
    TileSeriesDescriptionMetadata.d = function (a) {
        TileSeriesDescriptionMetadata.b(a);
        a.u("TileSeries", function () { return new TileSeriesDescription(); });
        a.t("TileSeries", TileSeriesDescriptionMetadata.a);
    };
    TileSeriesDescriptionMetadata.$t = markType(TileSeriesDescriptionMetadata, 'TileSeriesDescriptionMetadata');
    TileSeriesDescriptionMetadata.a = null;
    return TileSeriesDescriptionMetadata;
}(Base));
export { TileSeriesDescriptionMetadata };
