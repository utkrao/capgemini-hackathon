/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CellInfoDescription } from "./CellInfoDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var NumericCellInfoDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(NumericCellInfoDescription, _super);
    function NumericCellInfoDescription() {
        var _this = _super.call(this) || this;
        _this.fq = 0;
        _this.fm = false;
        _this.f0 = null;
        _this.fj = null;
        _this.fz = null;
        _this.f1 = null;
        _this.f3 = null;
        _this.f2 = null;
        _this.f4 = null;
        _this.fs = 0;
        _this.ft = 0;
        _this.fu = 0;
        _this.fn = false;
        return _this;
    }
    NumericCellInfoDescription.prototype.get_type = function () {
        return "NumericCellInfo";
    };
    Object.defineProperty(NumericCellInfoDescription.prototype, "numericValue", {
        get: function () {
            return this.fq;
        },
        set: function (a) {
            this.fq = a;
            this.e("NumericValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "hasDecimalValue", {
        get: function () {
            return this.fm;
        },
        set: function (a) {
            this.fm = a;
            this.e("HasDecimalValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "formatStringOverride", {
        get: function () {
            return this.f0;
        },
        set: function (a) {
            this.f0 = a;
            this.e("FormatStringOverride");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "formatSpecifiers", {
        get: function () {
            return this.fj;
        },
        set: function (a) {
            this.fj = a;
            this.e("FormatSpecifiers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "formatOverrideRef", {
        get: function () {
            return this.fz;
        },
        set: function (a) {
            this.fz = a;
            this.e("FormatOverrideRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "negativePrefix", {
        get: function () {
            return this.f1;
        },
        set: function (a) {
            this.f1 = a;
            this.e("NegativePrefix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "positivePrefix", {
        get: function () {
            return this.f3;
        },
        set: function (a) {
            this.f3 = a;
            this.e("PositivePrefix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "negativeSuffix", {
        get: function () {
            return this.f2;
        },
        set: function (a) {
            this.f2 = a;
            this.e("NegativeSuffix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "positiveSuffix", {
        get: function () {
            return this.f4;
        },
        set: function (a) {
            this.f4 = a;
            this.e("PositiveSuffix");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "maxFractionDigits", {
        get: function () {
            return this.fs;
        },
        set: function (a) {
            this.fs = a;
            this.e("MaxFractionDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "minFractionDigits", {
        get: function () {
            return this.ft;
        },
        set: function (a) {
            this.ft = a;
            this.e("MinFractionDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "minIntegerDigits", {
        get: function () {
            return this.fu;
        },
        set: function (a) {
            this.fu = a;
            this.e("MinIntegerDigits");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NumericCellInfoDescription.prototype, "showGroupingSeparator", {
        get: function () {
            return this.fn;
        },
        set: function (a) {
            this.fn = a;
            this.e("ShowGroupingSeparator");
        },
        enumerable: false,
        configurable: true
    });
    NumericCellInfoDescription.$t = markType(NumericCellInfoDescription, 'NumericCellInfoDescription', CellInfoDescription.$);
    NumericCellInfoDescription.__marshalByValue1 = true;
    NumericCellInfoDescription.__marshalByValueAlias1 = "NumericCellModel";
    return NumericCellInfoDescription;
}(CellInfoDescription));
export { NumericCellInfoDescription };
