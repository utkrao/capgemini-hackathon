/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ListPanelContentRefreshedEventArgsDescriptionMetadata } from "./ListPanelContentRefreshedEventArgsDescriptionMetadata";
import { ListPanelTemplateItemUpdatingEventArgsDescriptionMetadata } from "./ListPanelTemplateItemUpdatingEventArgsDescriptionMetadata";
import { ListPanelTemplateWidthRequestedEventArgsDescriptionMetadata } from "./ListPanelTemplateWidthRequestedEventArgsDescriptionMetadata";
import { ListPanelTemplateHeightRequestedEventArgsDescriptionMetadata } from "./ListPanelTemplateHeightRequestedEventArgsDescriptionMetadata";
import { ListPanelDescription } from "./ListPanelDescription";
/**
 * @hidden
 */
var ListPanelDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ListPanelDescriptionMetadata, _super);
    function ListPanelDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ListPanelDescriptionMetadata.b = function (a) {
        if (ListPanelDescriptionMetadata.a == null) {
            ListPanelDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ListPanelDescriptionMetadata.c(ListPanelDescriptionMetadata.a);
        }
        if (a.g(ListPanelDescriptionMetadata.a)) {
            return;
        }
        a.s(ListPanelDescriptionMetadata.a);
        ListPanelContentRefreshedEventArgsDescriptionMetadata.d(a);
        ListPanelTemplateItemUpdatingEventArgsDescriptionMetadata.d(a);
        ListPanelTemplateWidthRequestedEventArgsDescriptionMetadata.d(a);
        ListPanelTemplateHeightRequestedEventArgsDescriptionMetadata.d(a);
    };
    ListPanelDescriptionMetadata.c = function (a) {
        a.item("DataSourceRef", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)DataRef::object");
        a.item("DataSource", "(w:ItemsSource,xam:ItemsSource,wf:ItemsSource)ExportedType:BaseDataSource:BaseDataSource");
        a.item("RowHeight", "Number:int");
        a.item("ActualRowHeight", "Number:double");
        a.item("CellFontFamily", "(w:CellFontFamily/FontFamilyTransform,xam:CellFontFamily,wf:CellFontFamily,web:cellTextStyle/FontFamilyTransform)String");
        a.item("CellFontSize", "(w:CellFontSize,xam:CellFontSize,wf:CellFontSize,web:cellTextStyle/FontSizeTransform)Number:double");
        a.item("CellFontStyle", "(w:CellFontStyle/FontStyleTransform,xam:CellFontFamily/FontStyleTransform,wf:CellFontFamily/FontStyleTransform,web:cellTextStyle/FontStyleTransform)String");
        a.item("CellFontWeight", "(w:CellFontWeight/FontWeightTransform,xam:CellFontFamily/FontWeightTransform,wf:CellFontFamily/FontWeightTransform,web:cellTextStyle/FontWeightTransform)String");
        a.item("BackgroundColor", "Brush");
        a.item("Orientation", "ExportedType:string:ListPanelOrientation");
        a.item("Orientation@names", "Vertical;Horiztonal");
        a.item("IsCustomRowHeightEnabled", "Boolean");
        a.item("TextColor", "Brush");
        a.item("ContentRefreshedRef", "EventRef::contentRefreshed");
        a.item("RowUpdatingRef", "EventRef::rowUpdating");
        a.item("ItemWidthRequestedRef", "EventRef::itemWidthRequested");
        a.item("ItemHeightRequestedRef", "EventRef::itemHeightRequested");
    };
    ListPanelDescriptionMetadata.d = function (a) {
        ListPanelDescriptionMetadata.b(a);
        a.u("ListPanel", function () { return new ListPanelDescription(); });
        a.t("ListPanel", ListPanelDescriptionMetadata.a);
    };
    ListPanelDescriptionMetadata.$t = markType(ListPanelDescriptionMetadata, 'ListPanelDescriptionMetadata');
    ListPanelDescriptionMetadata.a = null;
    return ListPanelDescriptionMetadata;
}(Base));
export { ListPanelDescriptionMetadata };
