/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var CellInfoDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CellInfoDescription, _super);
    function CellInfoDescription() {
        var _this = _super.call(this) || this;
        _this.ef = null;
        _this.b6 = 0;
        _this.w = false;
        _this.aa = false;
        _this.k = false;
        _this.i = false;
        _this.u = false;
        _this.ab = false;
        _this.l = false;
        _this.v = false;
        _this.f = null;
        _this.q = false;
        _this.x_1 = false;
        _this.y_1 = false;
        _this.t = false;
        _this.p = false;
        _this.cd = 0;
        _this.ea = null;
        _this.a9 = 0;
        _this.ba = 0;
        _this.ci = 0;
        _this.cj = 0;
        _this.a2 = 0;
        _this.a0 = 0;
        _this.ax = 0;
        _this.a5 = 0;
        _this.az = 0;
        _this.cc = 0;
        _this.ck = 0;
        _this.z = false;
        _this.a7 = 0;
        _this.aw = 0;
        _this.a4 = 0;
        _this.r = false;
        _this.d1 = null;
        _this.eh = null;
        _this.dp = null;
        _this.dq = null;
        _this.di = null;
        _this.dj = null;
        _this.dh = null;
        _this.dw = null;
        _this.eb = null;
        _this.d2 = null;
        _this.d3 = null;
        _this.ed = null;
        _this.ee = null;
        _this.d8 = null;
        _this.d4 = null;
        _this.dx = null;
        _this.a6 = 0;
        _this.d6 = null;
        _this.d9 = null;
        _this.eg = null;
        _this.dn = null;
        _this.dr = null;
        _this.dy = null;
        _this.a3 = 0;
        _this.dz = null;
        _this.d0 = null;
        _this.dk = null;
        _this.ay = 0;
        _this.dl = null;
        _this.dm = null;
        _this.d5 = null;
        _this.a8 = 0;
        _this.cf = 0;
        _this.ch = 0;
        _this.cg = 0;
        _this.ce = 0;
        _this.bz = 0;
        _this.b1 = 0;
        _this.b0 = 0;
        _this.by = 0;
        _this.b3 = 0;
        _this.b5 = 0;
        _this.b4 = 0;
        _this.b2 = 0;
        _this.br = 0;
        _this.bt = 0;
        _this.bs = 0;
        _this.bq = 0;
        _this.b9 = 0;
        _this.cb = 0;
        _this.ca = 0;
        _this.b8 = 0;
        _this.bv = 0;
        _this.bx = 0;
        _this.bw = 0;
        _this.bu = 0;
        _this.ec = null;
        _this.o = false;
        _this.j = false;
        _this.d7 = null;
        _this.dt = null;
        _this.a1 = 0;
        _this.du = null;
        _this.dv = null;
        _this.n = false;
        _this.m = false;
        _this.ds = null;
        _this.s = false;
        _this.b7 = 0;
        return _this;
    }
    CellInfoDescription.prototype.get_type = function () {
        return "CellInfo";
    };
    Object.defineProperty(CellInfoDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "styleKey", {
        get: function () {
            return this.ef;
        },
        set: function (a) {
            this.ef = a;
            this.e("StyleKey");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "dataRow", {
        get: function () {
            return this.b6;
        },
        set: function (a) {
            this.b6 = a;
            this.e("DataRow");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isPositionDirty", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.e("IsPositionDirty");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isSizeDirty", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.e("IsSizeDirty");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isContentDirty", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e("IsContentDirty");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isBorderDirty", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.e("IsBorderDirty");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isLayerDirty", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.e("IsLayerDirty");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isStateDirty", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.e("IsStateDirty");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isDataDirty", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("IsDataDirty");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isPlaceholdContentNeeded", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.e("IsPlaceholdContentNeeded");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actionManager", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("ActionManager");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isHitTestVisible", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("IsHitTestVisible");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isRowPinned", {
        get: function () {
            return this.x_1;
        },
        set: function (a) {
            this.x_1 = a;
            this.e("IsRowPinned");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isRowSticky", {
        get: function () {
            return this.y_1;
        },
        set: function (a) {
            this.y_1 = a;
            this.e("IsRowSticky");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isLastStickyRow", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.e("IsLastStickyRow");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isFilterRow", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("IsFilterRow");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "indent", {
        get: function () {
            return this.cd;
        },
        set: function (a) {
            this.cd = a;
            this.e("Indent");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "rowItemRef", {
        get: function () {
            return this.ea;
        },
        set: function (a) {
            this.ea = a;
            this.e("RowItemRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "x", {
        get: function () {
            return this.a9;
        },
        set: function (a) {
            this.a9 = a;
            this.e("X");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "y", {
        get: function () {
            return this.ba;
        },
        set: function (a) {
            this.ba = a;
            this.e("Y");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "snappedX", {
        get: function () {
            return this.ci;
        },
        set: function (a) {
            this.ci = a;
            this.e("SnappedX");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "snappedY", {
        get: function () {
            return this.cj;
        },
        set: function (a) {
            this.cj = a;
            this.e("SnappedY");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "editOpacity", {
        get: function () {
            return this.a2;
        },
        set: function (a) {
            this.a2 = a;
            this.e("EditOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "contentOpacity", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
            this.e("ContentOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualContentOpacity", {
        get: function () {
            return this.ax;
        },
        set: function (a) {
            this.ax = a;
            this.e("ActualContentOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "opacity", {
        get: function () {
            return this.a5;
        },
        set: function (a) {
            this.a5 = a;
            this.e("Opacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualOpacity", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            this.az = a;
            this.e("ActualOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "height", {
        get: function () {
            return this.cc;
        },
        set: function (a) {
            this.cc = a;
            this.e("Height");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "width", {
        get: function () {
            return this.ck;
        },
        set: function (a) {
            this.ck = a;
            this.e("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isSelected", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.e("IsSelected");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "selectedStatus", {
        get: function () {
            return this.a7;
        },
        set: function (a) {
            this.a7 = a;
            this.e("SelectedStatus");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "activationStatus", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            this.aw = a;
            this.e("ActivationStatus");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "hoverStatus", {
        get: function () {
            return this.a4;
        },
        set: function (a) {
            this.a4 = a;
            this.e("HoverStatus");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isHoverable", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("IsHoverable");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "horizontalAlignment", {
        get: function () {
            return this.d1;
        },
        set: function (a) {
            this.d1 = a;
            this.e("HorizontalAlignment");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "verticalAlignment", {
        get: function () {
            return this.eh;
        },
        set: function (a) {
            this.eh = a;
            this.e("VerticalAlignment");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "background", {
        get: function () {
            return this.dp;
        },
        set: function (a) {
            this.dp = a;
            this.e("Background");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "border", {
        get: function () {
            return this.dq;
        },
        set: function (a) {
            this.dq = a;
            this.e("Border");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualBackground", {
        get: function () {
            return this.di;
        },
        set: function (a) {
            this.di = a;
            this.e("ActualBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualBorder", {
        get: function () {
            return this.dj;
        },
        set: function (a) {
            this.dj = a;
            this.e("ActualBorder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "activationBorder", {
        get: function () {
            return this.dh;
        },
        set: function (a) {
            this.dh = a;
            this.e("ActivationBorder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "errorBorder", {
        get: function () {
            return this.dw;
        },
        set: function (a) {
            this.dw = a;
            this.e("ErrorBorder");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "selectedBackground", {
        get: function () {
            return this.eb;
        },
        set: function (a) {
            this.eb = a;
            this.e("SelectedBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "hoverBackground", {
        get: function () {
            return this.d2;
        },
        set: function (a) {
            this.d2 = a;
            this.e("HoverBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "hoverTextColor", {
        get: function () {
            return this.d3;
        },
        set: function (a) {
            this.d3 = a;
            this.e("HoverTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "sortIndicatorColor", {
        get: function () {
            return this.ed;
        },
        set: function (a) {
            this.ed = a;
            this.e("SortIndicatorColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "stickyRowBackground", {
        get: function () {
            return this.ee;
        },
        set: function (a) {
            this.ee = a;
            this.e("StickyRowBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "pinnedRowBackground", {
        get: function () {
            return this.d8;
        },
        set: function (a) {
            this.d8 = a;
            this.e("PinnedRowBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "lastStickyRowBackground", {
        get: function () {
            return this.d4;
        },
        set: function (a) {
            this.d4 = a;
            this.e("LastStickyRowBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "filterRowBackground", {
        get: function () {
            return this.dx;
        },
        set: function (a) {
            this.dx = a;
            this.e("FilterRowBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "pinnedRowOpacity", {
        get: function () {
            return this.a6;
        },
        set: function (a) {
            this.a6 = a;
            this.e("PinnedRowOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "originalValueRef", {
        get: function () {
            return this.d6;
        },
        set: function (a) {
            this.d6 = a;
            this.e("OriginalValueRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "renderValue", {
        get: function () {
            return this.d9;
        },
        set: function (a) {
            this.d9 = a;
            this.e("RenderValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "textColor", {
        get: function () {
            return this.eg;
        },
        set: function (a) {
            this.eg = a;
            this.e("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualTextColor", {
        get: function () {
            return this.dn;
        },
        set: function (a) {
            this.dn = a;
            this.e("ActualTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "deletedTextColor", {
        get: function () {
            return this.dr;
        },
        set: function (a) {
            this.dr = a;
            this.e("DeletedTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "fontFamily", {
        get: function () {
            return this.dy;
        },
        set: function (a) {
            this.dy = a;
            this.e("FontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "fontSize", {
        get: function () {
            return this.a3;
        },
        set: function (a) {
            this.a3 = a;
            this.e("FontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "fontStyle", {
        get: function () {
            return this.dz;
        },
        set: function (a) {
            this.dz = a;
            this.e("FontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "fontWeight", {
        get: function () {
            return this.d0;
        },
        set: function (a) {
            this.d0 = a;
            this.e("FontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualFontFamily", {
        get: function () {
            return this.dk;
        },
        set: function (a) {
            this.dk = a;
            this.e("ActualFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualFontSize", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
            this.e("ActualFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualFontStyle", {
        get: function () {
            return this.dl;
        },
        set: function (a) {
            this.dl = a;
            this.e("ActualFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualFontWeight", {
        get: function () {
            return this.dm;
        },
        set: function (a) {
            this.dm = a;
            this.e("ActualFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "lineBreakMode", {
        get: function () {
            return this.d5;
        },
        set: function (a) {
            this.d5 = a;
            this.e("LineBreakMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "virtualizationPercentage", {
        get: function () {
            return this.a8;
        },
        set: function (a) {
            this.a8 = a;
            this.e("VirtualizationPercentage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "paddingLeft", {
        get: function () {
            return this.cf;
        },
        set: function (a) {
            this.cf = a;
            this.e("PaddingLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "paddingTop", {
        get: function () {
            return this.ch;
        },
        set: function (a) {
            this.ch = a;
            this.e("PaddingTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "paddingRight", {
        get: function () {
            return this.cg;
        },
        set: function (a) {
            this.cg = a;
            this.e("PaddingRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "paddingBottom", {
        get: function () {
            return this.ce;
        },
        set: function (a) {
            this.ce = a;
            this.e("PaddingBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualPaddingLeft", {
        get: function () {
            return this.bz;
        },
        set: function (a) {
            this.bz = a;
            this.e("ActualPaddingLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualPaddingTop", {
        get: function () {
            return this.b1;
        },
        set: function (a) {
            this.b1 = a;
            this.e("ActualPaddingTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualPaddingRight", {
        get: function () {
            return this.b0;
        },
        set: function (a) {
            this.b0 = a;
            this.e("ActualPaddingRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualPaddingBottom", {
        get: function () {
            return this.by;
        },
        set: function (a) {
            this.by = a;
            this.e("ActualPaddingBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "borderLeftWidth", {
        get: function () {
            return this.b3;
        },
        set: function (a) {
            this.b3 = a;
            this.e("BorderLeftWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "borderTopWidth", {
        get: function () {
            return this.b5;
        },
        set: function (a) {
            this.b5 = a;
            this.e("BorderTopWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "borderRightWidth", {
        get: function () {
            return this.b4;
        },
        set: function (a) {
            this.b4 = a;
            this.e("BorderRightWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "borderBottomWidth", {
        get: function () {
            return this.b2;
        },
        set: function (a) {
            this.b2 = a;
            this.e("BorderBottomWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "activationBorderLeftWidth", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            this.br = a;
            this.e("ActivationBorderLeftWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "activationBorderTopWidth", {
        get: function () {
            return this.bt;
        },
        set: function (a) {
            this.bt = a;
            this.e("ActivationBorderTopWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "activationBorderRightWidth", {
        get: function () {
            return this.bs;
        },
        set: function (a) {
            this.bs = a;
            this.e("ActivationBorderRightWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "activationBorderBottomWidth", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            this.bq = a;
            this.e("ActivationBorderBottomWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "errorBorderLeftWidth", {
        get: function () {
            return this.b9;
        },
        set: function (a) {
            this.b9 = a;
            this.e("ErrorBorderLeftWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "errorBorderTopWidth", {
        get: function () {
            return this.cb;
        },
        set: function (a) {
            this.cb = a;
            this.e("ErrorBorderTopWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "errorBorderRightWidth", {
        get: function () {
            return this.ca;
        },
        set: function (a) {
            this.ca = a;
            this.e("ErrorBorderRightWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "errorBorderBottomWidth", {
        get: function () {
            return this.b8;
        },
        set: function (a) {
            this.b8 = a;
            this.e("ErrorBorderBottomWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualBorderLeftWidth", {
        get: function () {
            return this.bv;
        },
        set: function (a) {
            this.bv = a;
            this.e("ActualBorderLeftWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualBorderTopWidth", {
        get: function () {
            return this.bx;
        },
        set: function (a) {
            this.bx = a;
            this.e("ActualBorderTopWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualBorderRightWidth", {
        get: function () {
            return this.bw;
        },
        set: function (a) {
            this.bw = a;
            this.e("ActualBorderRightWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "actualBorderBottomWidth", {
        get: function () {
            return this.bu;
        },
        set: function (a) {
            this.bu = a;
            this.e("ActualBorderBottomWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "sortDirection", {
        get: function () {
            return this.ec;
        },
        set: function (a) {
            this.ec = a;
            this.e("SortDirection");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isExpanded", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("IsExpanded");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isCollapsable", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("IsCollapsable");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "pinned", {
        get: function () {
            return this.d7;
        },
        set: function (a) {
            this.d7 = a;
            this.e("Pinned");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "editFontFamily", {
        get: function () {
            return this.dt;
        },
        set: function (a) {
            this.dt = a;
            this.e("EditFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "editFontSize", {
        get: function () {
            return this.a1;
        },
        set: function (a) {
            this.a1 = a;
            this.e("EditFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "editFontStyle", {
        get: function () {
            return this.du;
        },
        set: function (a) {
            this.du = a;
            this.e("EditFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "editFontWeight", {
        get: function () {
            return this.dv;
        },
        set: function (a) {
            this.dv = a;
            this.e("EditFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isEdited", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("IsEdited");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isDeleted", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.e("IsDeleted");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "editError", {
        get: function () {
            return this.ds;
        },
        set: function (a) {
            this.ds = a;
            this.e("EditError");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "isInEditMode", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("IsInEditMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CellInfoDescription.prototype, "editID", {
        get: function () {
            return this.b7;
        },
        set: function (a) {
            this.b7 = a;
            this.e("EditID");
        },
        enumerable: false,
        configurable: true
    });
    CellInfoDescription.$t = markType(CellInfoDescription, 'CellInfoDescription', Description.$);
    CellInfoDescription.__marshalByValue = true;
    CellInfoDescription.__marshalByValueAlias = "CellModel";
    return CellInfoDescription;
}(Description));
export { CellInfoDescription };
