/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { TileGeneratorDescription } from "./TileGeneratorDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var HeatTileGeneratorDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(HeatTileGeneratorDescription, _super);
    function HeatTileGeneratorDescription() {
        var _this = _super.call(this) || this;
        _this.k = null;
        _this.j = null;
        _this.i = null;
        _this.al = null;
        _this.ak = null;
        _this.h = null;
        _this.g = null;
        _this.aa = 0;
        _this.ac = 0;
        _this.q = false;
        _this.r = false;
        _this.s = false;
        _this.ae = 0;
        _this.ad = 0;
        _this.ab = 0;
        _this.t = false;
        _this.u = false;
        _this.an = null;
        _this.am = null;
        return _this;
    }
    HeatTileGeneratorDescription.prototype.get_type = function () {
        return "HeatTileGenerator";
    };
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "yValues", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e("YValues");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "xValues", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("XValues");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "values", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.e("Values");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "minimumColor", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.e("MinimumColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "maximumColor", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            this.e("MaximumColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "scaleColors", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.e("ScaleColors");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "scaleColorOffsets", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("ScaleColorOffsets");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "blurRadius", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.e("BlurRadius");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "maxBlurRadius", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.e("MaxBlurRadius");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useBlurRadiusAdjustedForZoom", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("UseBlurRadiusAdjustedForZoom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useGlobalMinMax", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("UseGlobalMinMax");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useGlobalMinMaxAdjustedForZoom", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("UseGlobalMinMaxAdjustedForZoom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "minimumValue", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.e("MinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "maximumValue", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.e("MaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "logarithmBase", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.e("LogarithmBase");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useLogarithmicScale", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.e("UseLogarithmicScale");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "useWebWorkers", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.e("UseWebWorkers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "webWorkerScriptPath", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.e("WebWorkerScriptPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HeatTileGeneratorDescription.prototype, "webWorkerInstanceRef", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.e("WebWorkerInstanceRef");
        },
        enumerable: false,
        configurable: true
    });
    HeatTileGeneratorDescription.$t = markType(HeatTileGeneratorDescription, 'HeatTileGeneratorDescription', TileGeneratorDescription.$);
    return HeatTileGeneratorDescription;
}(TileGeneratorDescription));
export { HeatTileGeneratorDescription };
