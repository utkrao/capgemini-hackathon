/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CellInfoDescription } from "./CellInfoDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var EditorCellInfoDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(EditorCellInfoDescription, _super);
    function EditorCellInfoDescription() {
        var _this = _super.call(this) || this;
        _this.fl = null;
        _this.fr = null;
        _this.fx = null;
        _this.fw = null;
        _this.fv = null;
        _this.ft = null;
        _this.fu = null;
        _this.fj = null;
        _this.fs = null;
        _this.fo = false;
        return _this;
    }
    EditorCellInfoDescription.prototype.get_type = function () {
        return "EditorCellInfo";
    };
    Object.defineProperty(EditorCellInfoDescription.prototype, "editTarget", {
        get: function () {
            return this.fl;
        },
        set: function (a) {
            this.fl = a;
            this.e("EditTarget");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "dataType", {
        get: function () {
            return this.fr;
        },
        set: function (a) {
            this.fr = a;
            this.e("DataType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "errorMessage", {
        get: function () {
            return this.fx;
        },
        set: function (a) {
            this.fx = a;
            this.e("ErrorMessage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "editValueRef", {
        get: function () {
            return this.fw;
        },
        set: function (a) {
            this.fw = a;
            this.e("EditValueRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "editorType", {
        get: function () {
            return this.fv;
        },
        set: function (a) {
            this.fv = a;
            this.e("EditorType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "editorDataSourceRef", {
        get: function () {
            return this.ft;
        },
        set: function (a) {
            this.ft = a;
            this.e("EditorDataSourceRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "editorTextField", {
        get: function () {
            return this.fu;
        },
        set: function (a) {
            this.fu = a;
            this.e("EditorTextField");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "editorValueField", {
        get: function () {
            return this.fj;
        },
        set: function (a) {
            this.fj = a;
            this.e("EditorValueField");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "dateFormatString", {
        get: function () {
            return this.fs;
        },
        set: function (a) {
            this.fs = a;
            this.e("DateFormatString");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EditorCellInfoDescription.prototype, "showTodayButton", {
        get: function () {
            return this.fo;
        },
        set: function (a) {
            this.fo = a;
            this.e("ShowTodayButton");
        },
        enumerable: false,
        configurable: true
    });
    EditorCellInfoDescription.$t = markType(EditorCellInfoDescription, 'EditorCellInfoDescription', CellInfoDescription.$);
    EditorCellInfoDescription.__marshalByValue1 = true;
    EditorCellInfoDescription.__marshalByValueAlias1 = "EditorCellModel";
    return EditorCellInfoDescription;
}(CellInfoDescription));
export { EditorCellInfoDescription };
