/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var ToolActionDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolActionDescription, _super);
    function ToolActionDescription() {
        var _this = _super.call(this) || this;
        _this.w = null;
        _this.q = null;
        _this.p = null;
        _this.n = null;
        _this.g = 0;
        _this.h = 0;
        _this.f = 0;
        _this.i = 0;
        _this.u = null;
        _this.t = null;
        _this.s = null;
        _this.r = null;
        _this.v = null;
        _this.x = null;
        return _this;
    }
    ToolActionDescription.prototype.get_type = function () {
        return "ToolAction";
    };
    Object.defineProperty(ToolActionDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "parentId", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.e("ParentId");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "commandId", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("CommandId");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "commandArgument", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("CommandArgument");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "commandArgumentValue", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("CommandArgumentValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "paddingLeft", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("PaddingLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "paddingRight", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.e("PaddingRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "paddingBottom", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("PaddingBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "paddingTop", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.e("PaddingTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "name", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.e("Name");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "label", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.e("Label");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "iconName", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("IconName");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "iconCollectionName", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("IconCollectionName");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "onCommandRef", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.e("OnCommandRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionDescription.prototype, "performedRef", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
            this.e("PerformedRef");
        },
        enumerable: false,
        configurable: true
    });
    ToolActionDescription.$t = markType(ToolActionDescription, 'ToolActionDescription', Description.$);
    return ToolActionDescription;
}(Description));
export { ToolActionDescription };
