/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var ToolPanelDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolPanelDescription, _super);
    function ToolPanelDescription() {
        var _this = _super.call(this) || this;
        _this.f = null;
        _this.k = null;
        _this.h = 0;
        _this.l = null;
        _this.m = null;
        _this.j = null;
        _this.q = null;
        _this.p = null;
        _this.n = null;
        _this.o = null;
        return _this;
    }
    ToolPanelDescription.prototype.get_type = function () {
        return "ToolPanel";
    };
    Object.defineProperty(ToolPanelDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "actions", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("Actions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "cellFontFamily", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e("CellFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "cellFontSize", {
        get: function () {
            return this.h;
        },
        set: function (a) {
            this.h = a;
            this.e("CellFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "cellFontStyle", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("CellFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "cellFontWeight", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.e("CellFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "backgroundColor", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("BackgroundColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "textColor", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "orientation", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("Orientation");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "contentRefreshedRef", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("ContentRefreshedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolPanelDescription.prototype, "onCommandRef", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("OnCommandRef");
        },
        enumerable: false,
        configurable: true
    });
    ToolPanelDescription.$t = markType(ToolPanelDescription, 'ToolPanelDescription', Description.$);
    return ToolPanelDescription;
}(Description));
export { ToolPanelDescription };
