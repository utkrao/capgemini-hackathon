/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var FunnelChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FunnelChartDescription, _super);
    function FunnelChartDescription() {
        var _this = _super.call(this) || this;
        _this.a4 = null;
        _this.f = null;
        _this.g = null;
        _this.t = 0;
        _this.am = null;
        _this.aq = null;
        _this.an = null;
        _this.at = null;
        _this.ap = null;
        _this.al = null;
        _this.aj = null;
        _this.ak = null;
        _this.ah = 0;
        _this.k = false;
        _this.l = false;
        _this.j = false;
        _this.n = false;
        _this.au = null;
        _this.av = null;
        _this.x = 0;
        _this.w = 0;
        _this.a2 = null;
        _this.a3 = null;
        _this.z = 0;
        _this.y = 0;
        _this.ao = null;
        _this.m = false;
        _this.a1 = null;
        _this.as = null;
        _this.u = 0;
        _this.v = 0;
        _this.ar = null;
        _this.a0 = null;
        _this.aw = null;
        _this.ax = null;
        _this.az = null;
        _this.ay = null;
        return _this;
    }
    FunnelChartDescription.prototype.get_type = function () {
        return "FunnelChart";
    };
    Object.defineProperty(FunnelChartDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "valueMemberPath", {
        get: function () {
            return this.a4;
        },
        set: function (a) {
            this.a4 = a;
            this.e("ValueMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "brushes", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("Brushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outlines", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("Outlines");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "bottomEdgeWidth", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.e("BottomEdgeWidth");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "innerLabelMemberPath", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.e("InnerLabelMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelMemberPath", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            this.aq = a;
            this.e("OuterLabelMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "innerLabelVisibility", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.e("InnerLabelVisibility");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelVisibility", {
        get: function () {
            return this.at;
        },
        set: function (a) {
            this.at = a;
            this.e("OuterLabelVisibility");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelAlignment", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.e("OuterLabelAlignment");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "funnelSliceDisplay", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.e("FunnelSliceDisplay");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "formatInnerLabelRef", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
            this.e("FormatInnerLabelRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "formatOuterLabelRef", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            this.e("FormatOuterLabelRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "transitionDuration", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.e("TransitionDuration");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "isInverted", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e("IsInverted");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "useBezierCurve", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("UseBezierCurve");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "allowSliceSelection", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("AllowSliceSelection");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "useUnselectedStyle", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("UseUnselectedStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedSliceFill", {
        get: function () {
            return this.au;
        },
        set: function (a) {
            this.au = a;
            this.e("SelectedSliceFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedSliceStroke", {
        get: function () {
            return this.av;
        },
        set: function (a) {
            this.av = a;
            this.e("SelectedSliceStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedSliceStrokeThickness", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
            this.e("SelectedSliceStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "selectedSliceOpacity", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.e("SelectedSliceOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "unselectedSliceFill", {
        get: function () {
            return this.a2;
        },
        set: function (a) {
            this.a2 = a;
            this.e("UnselectedSliceFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "unselectedSliceStroke", {
        get: function () {
            return this.a3;
        },
        set: function (a) {
            this.a3 = a;
            this.e("UnselectedSliceStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "unselectedSliceStrokeThickness", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.e("UnselectedSliceStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "unselectedSliceOpacity", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
            this.e("UnselectedSliceOpacity");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "legendItemBadgeTemplateRef", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.e("LegendItemBadgeTemplateRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "useOuterLabelsForLegend", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.e("UseOuterLabelsForLegend");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "textStyle", {
        get: function () {
            return this.a1;
        },
        set: function (a) {
            this.a1 = a;
            this.e("TextStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelTextStyle", {
        get: function () {
            return this.as;
        },
        set: function (a) {
            this.as = a;
            this.e("OuterLabelTextStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outlineThickness", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.e("OutlineThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "pixelScalingRatio", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.e("PixelScalingRatio");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "outerLabelTextColor", {
        get: function () {
            return this.ar;
        },
        set: function (a) {
            this.ar = a;
            this.e("OuterLabelTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "textColor", {
        get: function () {
            return this.a0;
        },
        set: function (a) {
            this.a0 = a;
            this.e("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "sliceClickedRef", {
        get: function () {
            return this.aw;
        },
        set: function (a) {
            this.aw = a;
            this.e("SliceClickedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "sliceEnterRef", {
        get: function () {
            return this.ax;
        },
        set: function (a) {
            this.ax = a;
            this.e("SliceEnterRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "sliceLeaveRef", {
        get: function () {
            return this.az;
        },
        set: function (a) {
            this.az = a;
            this.e("SliceLeaveRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FunnelChartDescription.prototype, "sliceHoverRef", {
        get: function () {
            return this.ay;
        },
        set: function (a) {
            this.ay = a;
            this.e("SliceHoverRef");
        },
        enumerable: false,
        configurable: true
    });
    FunnelChartDescription.$t = markType(FunnelChartDescription, 'FunnelChartDescription', Description.$);
    return FunnelChartDescription;
}(Description));
export { FunnelChartDescription };
