/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var TreemapDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(TreemapDescription, _super);
    function TreemapDescription() {
        var _this = _super.call(this) || this;
        _this.cu = null;
        _this.cs = null;
        _this.bq = null;
        _this.cr = null;
        _this.cd = null;
        _this.br = null;
        _this.ca = null;
        _this.bt = null;
        _this.f = null;
        _this.g = null;
        _this.bu = null;
        _this.j = false;
        _this.bl = 0;
        _this.o = 0;
        _this.n = 0;
        _this.cf = null;
        _this.cc = null;
        _this.cq = null;
        _this.b5 = null;
        _this.bz = null;
        _this.cp = null;
        _this.b8 = null;
        _this.b0 = null;
        _this.ct = null;
        _this.bs = null;
        _this.b7 = null;
        _this.b6 = null;
        _this.bw = null;
        _this.p = 0;
        _this.bx = null;
        _this.by = null;
        _this.b2 = null;
        _this.q = 0;
        _this.b3 = null;
        _this.b4 = null;
        _this.b1 = null;
        _this.t = 0;
        _this.v = 0;
        _this.u = 0;
        _this.s = 0;
        _this.ad = 0;
        _this.af = 0;
        _this.ae = 0;
        _this.ac = 0;
        _this.y = 0;
        _this.aa = 0;
        _this.z = 0;
        _this.x = 0;
        _this.ai = 0;
        _this.am = 0;
        _this.ak = 0;
        _this.ag = 0;
        _this.aj = 0;
        _this.an = 0;
        _this.al = 0;
        _this.ah = 0;
        _this.cb = null;
        _this.ce = null;
        _this.r = 0;
        _this.co = null;
        _this.ap = 0;
        _this.cg = null;
        _this.ch = null;
        _this.ab = 0;
        _this.bm = 0;
        _this.ao = 0;
        _this.m = 0;
        _this.w = 0;
        _this.l = 0;
        _this.bv = null;
        _this.cn = null;
        _this.ck = null;
        _this.ci = null;
        _this.cj = null;
        _this.cl = null;
        _this.cm = null;
        _this.cv = null;
        _this.b9 = null;
        _this.bp = null;
        return _this;
    }
    TreemapDescription.prototype.get_type = function () {
        return "Treemap";
    };
    Object.defineProperty(TreemapDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "valueMemberPath", {
        get: function () {
            return this.cu;
        },
        set: function (a) {
            this.cu = a;
            this.e("ValueMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "rootTitle", {
        get: function () {
            return this.cs;
        },
        set: function (a) {
            this.cs = a;
            this.e("RootTitle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "breadcrumbSequence", {
        get: function () {
            return this.bq;
        },
        set: function (a) {
            this.bq = a;
            this.e("BreadcrumbSequence");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentIdMemberPath", {
        get: function () {
            return this.cr;
        },
        set: function (a) {
            this.cr = a;
            this.e("ParentIdMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelMemberPath", {
        get: function () {
            return this.cd;
        },
        set: function (a) {
            this.cd = a;
            this.e("LabelMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "customValueMemberPath", {
        get: function () {
            return this.br;
        },
        set: function (a) {
            this.br = a;
            this.e("CustomValueMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "idMemberPath", {
        get: function () {
            return this.ca;
        },
        set: function (a) {
            this.ca = a;
            this.e("IdMemberPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "dataSourceRef", {
        get: function () {
            return this.bt;
        },
        set: function (a) {
            this.bt = a;
            this.e("DataSourceRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fillBrushes", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("FillBrushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "styleMappings", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("StyleMappings");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fillScaleMode", {
        get: function () {
            return this.bu;
        },
        set: function (a) {
            this.bu = a;
            this.e("FillScaleMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "isFillScaleLogarithmic", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("IsFillScaleLogarithmic");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fillScaleLogarithmBase", {
        get: function () {
            return this.bl;
        },
        set: function (a) {
            this.bl = a;
            this.e("FillScaleLogarithmBase");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fillScaleMinimumValue", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("FillScaleMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fillScaleMaximumValue", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("FillScaleMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelVerticalFitMode", {
        get: function () {
            return this.cf;
        },
        set: function (a) {
            this.cf = a;
            this.e("LabelVerticalFitMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelHorizontalFitMode", {
        get: function () {
            return this.cc;
        },
        set: function (a) {
            this.cc = a;
            this.e("LabelHorizontalFitMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "overlayHeaderHoverBackground", {
        get: function () {
            return this.cq;
        },
        set: function (a) {
            this.cq = a;
            this.e("OverlayHeaderHoverBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerHoverBackground", {
        get: function () {
            return this.b5;
        },
        set: function (a) {
            this.b5 = a;
            this.e("HeaderHoverBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerBackground", {
        get: function () {
            return this.bz;
        },
        set: function (a) {
            this.bz = a;
            this.e("HeaderBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "overlayHeaderBackground", {
        get: function () {
            return this.cp;
        },
        set: function (a) {
            this.cp = a;
            this.e("OverlayHeaderBackground");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerTextColor", {
        get: function () {
            return this.b8;
        },
        set: function (a) {
            this.b8 = a;
            this.e("HeaderTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerDarkTextColor", {
        get: function () {
            return this.b0;
        },
        set: function (a) {
            this.b0 = a;
            this.e("HeaderDarkTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "textColor", {
        get: function () {
            return this.ct;
        },
        set: function (a) {
            this.ct = a;
            this.e("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "darkTextColor", {
        get: function () {
            return this.bs;
        },
        set: function (a) {
            this.bs = a;
            this.e("DarkTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerHoverTextColor", {
        get: function () {
            return this.b7;
        },
        set: function (a) {
            this.b7 = a;
            this.e("HeaderHoverTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerHoverDarkTextColor", {
        get: function () {
            return this.b6;
        },
        set: function (a) {
            this.b6 = a;
            this.e("HeaderHoverDarkTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fontFamily", {
        get: function () {
            return this.bw;
        },
        set: function (a) {
            this.bw = a;
            this.e("FontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fontSize", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            this.p = a;
            this.e("FontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fontStyle", {
        get: function () {
            return this.bx;
        },
        set: function (a) {
            this.bx = a;
            this.e("FontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "fontWeight", {
        get: function () {
            return this.by;
        },
        set: function (a) {
            this.by = a;
            this.e("FontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerFontFamily", {
        get: function () {
            return this.b2;
        },
        set: function (a) {
            this.b2 = a;
            this.e("HeaderFontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerFontSize", {
        get: function () {
            return this.q;
        },
        set: function (a) {
            this.q = a;
            this.e("HeaderFontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerFontStyle", {
        get: function () {
            return this.b3;
        },
        set: function (a) {
            this.b3 = a;
            this.e("HeaderFontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerFontWeight", {
        get: function () {
            return this.b4;
        },
        set: function (a) {
            this.b4 = a;
            this.e("HeaderFontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerDisplayMode", {
        get: function () {
            return this.b1;
        },
        set: function (a) {
            this.b1 = a;
            this.e("HeaderDisplayMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerLabelLeftMargin", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            this.t = a;
            this.e("HeaderLabelLeftMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerLabelTopMargin", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.e("HeaderLabelTopMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerLabelRightMargin", {
        get: function () {
            return this.u;
        },
        set: function (a) {
            this.u = a;
            this.e("HeaderLabelRightMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerLabelBottomMargin", {
        get: function () {
            return this.s;
        },
        set: function (a) {
            this.s = a;
            this.e("HeaderLabelBottomMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "overlayHeaderLabelLeftMargin", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.e("OverlayHeaderLabelLeftMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "overlayHeaderLabelTopMargin", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
            this.e("OverlayHeaderLabelTopMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "overlayHeaderLabelRightMargin", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.e("OverlayHeaderLabelRightMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "overlayHeaderLabelBottomMargin", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.e("OverlayHeaderLabelBottomMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelLeftMargin", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
            this.e("LabelLeftMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelTopMargin", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.e("LabelTopMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelRightMargin", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.e("LabelRightMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelBottomMargin", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
            this.e("LabelBottomMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentNodeLeftMargin", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
            this.e("ParentNodeLeftMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentNodeTopMargin", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.e("ParentNodeTopMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentNodeRightMargin", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            this.e("ParentNodeRightMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentNodeBottomMargin", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
            this.e("ParentNodeBottomMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentNodeLeftPadding", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
            this.e("ParentNodeLeftPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentNodeTopPadding", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.e("ParentNodeTopPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentNodeRightPadding", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.e("ParentNodeRightPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "parentNodeBottomPadding", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.e("ParentNodeBottomPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelHorizontalAlignment", {
        get: function () {
            return this.cb;
        },
        set: function (a) {
            this.cb = a;
            this.e("LabelHorizontalAlignment");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "labelVerticalAlignment", {
        get: function () {
            return this.ce;
        },
        set: function (a) {
            this.ce = a;
            this.e("LabelVerticalAlignment");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "headerHeight", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            this.r = a;
            this.e("HeaderHeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "outline", {
        get: function () {
            return this.co;
        },
        set: function (a) {
            this.co = a;
            this.e("Outline");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "strokeThickness", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            this.ap = a;
            this.e("StrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "layoutOrientation", {
        get: function () {
            return this.cg;
        },
        set: function (a) {
            this.cg = a;
            this.e("LayoutOrientation");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "layoutType", {
        get: function () {
            return this.ch;
        },
        set: function (a) {
            this.ch = a;
            this.e("LayoutType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "minimumDisplaySize", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.e("MinimumDisplaySize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "transitionDuration", {
        get: function () {
            return this.bm;
        },
        set: function (a) {
            this.bm = a;
            this.e("TransitionDuration");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "pixelScalingRatio", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            this.ao = a;
            this.e("PixelScalingRatio");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "actualPixelScalingRatio", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.e("ActualPixelScalingRatio");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "interactionPixelScalingRatio", {
        get: function () {
            return this.w;
        },
        set: function (a) {
            this.w = a;
            this.e("InteractionPixelScalingRatio");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "actualInteractionPixelScalingRatio", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("ActualInteractionPixelScalingRatio");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "focusItemRef", {
        get: function () {
            return this.bv;
        },
        set: function (a) {
            this.bv = a;
            this.e("FocusItemRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "nodeStylingRef", {
        get: function () {
            return this.cn;
        },
        set: function (a) {
            this.cn = a;
            this.e("NodeStylingRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "nodePointerOverRef", {
        get: function () {
            return this.ck;
        },
        set: function (a) {
            this.ck = a;
            this.e("NodePointerOverRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "nodePointerEnterRef", {
        get: function () {
            return this.ci;
        },
        set: function (a) {
            this.ci = a;
            this.e("NodePointerEnterRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "nodePointerLeaveRef", {
        get: function () {
            return this.cj;
        },
        set: function (a) {
            this.cj = a;
            this.e("NodePointerLeaveRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "nodePointerPressedRef", {
        get: function () {
            return this.cl;
        },
        set: function (a) {
            this.cl = a;
            this.e("NodePointerPressedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "nodePointerReleasedRef", {
        get: function () {
            return this.cm;
        },
        set: function (a) {
            this.cm = a;
            this.e("NodePointerReleasedRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "width", {
        get: function () {
            return this.cv;
        },
        set: function (a) {
            this.cv = a;
            this.e("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "height", {
        get: function () {
            return this.b9;
        },
        set: function (a) {
            this.b9 = a;
            this.e("Height");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TreemapDescription.prototype, "background", {
        get: function () {
            return this.bp;
        },
        set: function (a) {
            this.bp = a;
            this.e("Background");
        },
        enumerable: false,
        configurable: true
    });
    TreemapDescription.$t = markType(TreemapDescription, 'TreemapDescription', Description.$);
    return TreemapDescription;
}(Description));
export { TreemapDescription };
