/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, markType } from "./type";
/**
 * @hidden
 */
var ToolActionInfo = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolActionInfo, _super);
    function ToolActionInfo() {
        var _this = _super.call(this) || this;
        _this._parentId = null;
        _this._commandId = null;
        _this._commandArgument = null;
        _this._commandArgumentValue = null;
        _this._paddingLeft = 0;
        _this._paddingRight = 0;
        _this._paddingBottom = 0;
        _this._paddingTop = 0;
        _this._name = null;
        _this._label = null;
        _this._iconName = null;
        _this._iconCollectionName = null;
        _this.iconCollectionName = "default";
        return _this;
    }
    Object.defineProperty(ToolActionInfo.prototype, "parentId", {
        get: function () {
            return this._parentId;
        },
        set: function (a) {
            this._parentId = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "commandId", {
        get: function () {
            return this._commandId;
        },
        set: function (a) {
            this._commandId = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "commandArgument", {
        get: function () {
            return this._commandArgument;
        },
        set: function (a) {
            this._commandArgument = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "commandArgumentValue", {
        get: function () {
            return this._commandArgumentValue;
        },
        set: function (a) {
            this._commandArgumentValue = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "paddingLeft", {
        get: function () {
            return this._paddingLeft;
        },
        set: function (a) {
            this._paddingLeft = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "paddingRight", {
        get: function () {
            return this._paddingRight;
        },
        set: function (a) {
            this._paddingRight = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "paddingBottom", {
        get: function () {
            return this._paddingBottom;
        },
        set: function (a) {
            this._paddingBottom = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "paddingTop", {
        get: function () {
            return this._paddingTop;
        },
        set: function (a) {
            this._paddingTop = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (a) {
            this._name = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (a) {
            this._label = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "iconName", {
        get: function () {
            return this._iconName;
        },
        set: function (a) {
            this._iconName = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ToolActionInfo.prototype, "iconCollectionName", {
        get: function () {
            return this._iconCollectionName;
        },
        set: function (a) {
            this._iconCollectionName = a;
        },
        enumerable: false,
        configurable: true
    });
    ToolActionInfo.prototype.get_a = function () {
        return 0;
    };
    Object.defineProperty(ToolActionInfo.prototype, "a", {
        get: function () {
            return this.get_a();
        },
        enumerable: false,
        configurable: true
    });
    ToolActionInfo.$t = markType(ToolActionInfo, 'ToolActionInfo');
    return ToolActionInfo;
}(Base));
export { ToolActionInfo };
