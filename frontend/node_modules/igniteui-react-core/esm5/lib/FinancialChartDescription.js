/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var FinancialChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialChartDescription, _super);
    function FinancialChartDescription() {
        var _this = _super.call(this) || this;
        _this.vl = null;
        _this.vn = null;
        _this.vk = null;
        _this.vi = null;
        _this.uh = 0;
        _this.tt = false;
        _this.ul = 0;
        _this.t1 = false;
        _this.va = 0;
        _this.un = 0;
        _this.up = 0;
        _this.uo = 0;
        _this.uq = 0;
        _this.vm = null;
        _this.vo = null;
        _this.vq = null;
        _this.tv = false;
        _this.vj = null;
        _this.vp = null;
        _this.tx = false;
        _this.s5 = null;
        _this.ta = null;
        _this.tz = false;
        _this.uk = 0;
        _this.ty = false;
        _this.t0 = false;
        _this.vr = null;
        _this.s6 = null;
        _this.s7 = null;
        _this.s8 = null;
        _this.s9 = null;
        _this.td = null;
        _this.tc = null;
        _this.s4 = null;
        _this.s2 = null;
        _this.um = 0;
        _this.uj = 0;
        _this.ui = 0;
        _this.ug = 0;
        _this.s3 = null;
        _this.u6 = 0;
        _this.uf = 0;
        _this.u9 = 0;
        _this.u7 = 0;
        _this.u5 = 0;
        _this.u8 = 0;
        _this.tb = null;
        _this.s1 = null;
        _this.tw = false;
        _this.vs = null;
        _this.ur = 0;
        _this.tu = false;
        _this.uc = new Date();
        _this.ub = new Date();
        _this.te = null;
        _this.vh = null;
        return _this;
    }
    Object.defineProperty(FinancialChartDescription.prototype, "tooltipTemplateRef", {
        get: function () {
            return this.vl;
        },
        set: function (a) {
            this.vl = a;
            this.e("TooltipTemplateRef");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "width", {
        get: function () {
            return this.vn;
        },
        set: function (a) {
            this.vn = a;
            this.e("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "height", {
        get: function () {
            return this.vk;
        },
        set: function (a) {
            this.vk = a;
            this.e("Height");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "background", {
        get: function () {
            return this.vi;
        },
        set: function (a) {
            this.vi = a;
            this.e("Background");
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartDescription.prototype.get_type = function () {
        return "FinancialChart";
    };
    Object.defineProperty(FinancialChartDescription.prototype, "leftMargin", {
        get: function () {
            return this.uh;
        },
        set: function (a) {
            this.uh = a;
            this.e("LeftMargin");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "isHorizontalZoomEnabled", {
        get: function () {
            return this.tt;
        },
        set: function (a) {
            this.tt = a;
            this.e("IsHorizontalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "toolbarHeight", {
        get: function () {
            return this.ul;
        },
        set: function (a) {
            this.ul = a;
            this.e("ToolbarHeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisIsLogarithmic", {
        get: function () {
            return this.t1;
        },
        set: function (a) {
            this.t1 = a;
            this.e("YAxisIsLogarithmic");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisLogarithmBase", {
        get: function () {
            return this.va;
        },
        set: function (a) {
            this.va = a;
            this.e("YAxisLogarithmBase");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisInterval", {
        get: function () {
            return this.un;
        },
        set: function (a) {
            this.un = a;
            this.e("YAxisInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisMinimumValue", {
        get: function () {
            return this.up;
        },
        set: function (a) {
            this.up = a;
            this.e("YAxisMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisMaximumValue", {
        get: function () {
            return this.uo;
        },
        set: function (a) {
            this.uo = a;
            this.e("YAxisMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisMinorInterval", {
        get: function () {
            return this.uq;
        },
        set: function (a) {
            this.uq = a;
            this.e("YAxisMinorInterval");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "volumeType", {
        get: function () {
            return this.vm;
        },
        set: function (a) {
            this.vm = a;
            this.e("VolumeType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "xAxisMode", {
        get: function () {
            return this.vo;
        },
        set: function (a) {
            this.vo = a;
            this.e("XAxisMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisMode", {
        get: function () {
            return this.vq;
        },
        set: function (a) {
            this.vq = a;
            this.e("YAxisMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "isToolbarVisible", {
        get: function () {
            return this.tv;
        },
        set: function (a) {
            this.tv = a;
            this.e("IsToolbarVisible");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "chartType", {
        get: function () {
            return this.vj;
        },
        set: function (a) {
            this.vj = a;
            this.e("ChartType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisLabelHorizontalAlignment", {
        get: function () {
            return this.vp;
        },
        set: function (a) {
            this.vp = a;
            this.e("YAxisLabelHorizontalAlignment");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "isWindowSyncedToVisibleRange", {
        get: function () {
            return this.tx;
        },
        set: function (a) {
            this.tx = a;
            this.e("IsWindowSyncedToVisibleRange");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorTypes", {
        get: function () {
            return this.s5;
        },
        set: function (a) {
            this.s5 = a;
            this.e("IndicatorTypes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "overlayTypes", {
        get: function () {
            return this.ta;
        },
        set: function (a) {
            this.ta = a;
            this.e("OverlayTypes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisAbbreviateLargeNumbers", {
        get: function () {
            return this.tz;
        },
        set: function (a) {
            this.tz = a;
            this.e("YAxisAbbreviateLargeNumbers");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "resolution", {
        get: function () {
            return this.uk;
        },
        set: function (a) {
            this.uk = a;
            this.e("Resolution");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "xAxisEnhancedIntervalPreferMoreCategoryLabels", {
        get: function () {
            return this.ty;
        },
        set: function (a) {
            this.ty = a;
            this.e("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "yAxisEnhancedIntervalPreferMoreCategoryLabels", {
        get: function () {
            return this.t0;
        },
        set: function (a) {
            this.t0 = a;
            this.e("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "zoomSliderType", {
        get: function () {
            return this.vr;
        },
        set: function (a) {
            this.vr = a;
            this.e("ZoomSliderType");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "negativeBrushes", {
        get: function () {
            return this.s6;
        },
        set: function (a) {
            this.s6 = a;
            this.e("NegativeBrushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "negativeOutlines", {
        get: function () {
            return this.s7;
        },
        set: function (a) {
            this.s7 = a;
            this.e("NegativeOutlines");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "overlayBrushes", {
        get: function () {
            return this.s8;
        },
        set: function (a) {
            this.s8 = a;
            this.e("OverlayBrushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "overlayOutlines", {
        get: function () {
            return this.s9;
        },
        set: function (a) {
            this.s9 = a;
            this.e("OverlayOutlines");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "volumeOutlines", {
        get: function () {
            return this.td;
        },
        set: function (a) {
            this.td = a;
            this.e("VolumeOutlines");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "volumeBrushes", {
        get: function () {
            return this.tc;
        },
        set: function (a) {
            this.tc = a;
            this.e("VolumeBrushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorNegativeBrushes", {
        get: function () {
            return this.s4;
        },
        set: function (a) {
            this.s4 = a;
            this.e("IndicatorNegativeBrushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorBrushes", {
        get: function () {
            return this.s2;
        },
        set: function (a) {
            this.s2 = a;
            this.e("IndicatorBrushes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "volumeThickness", {
        get: function () {
            return this.um;
        },
        set: function (a) {
            this.um = a;
            this.e("VolumeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "overlayThickness", {
        get: function () {
            return this.uj;
        },
        set: function (a) {
            this.uj = a;
            this.e("OverlayThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "overlayMultiplier", {
        get: function () {
            return this.ui;
        },
        set: function (a) {
            this.ui = a;
            this.e("OverlayMultiplier");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorThickness", {
        get: function () {
            return this.ug;
        },
        set: function (a) {
            this.ug = a;
            this.e("IndicatorThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorDisplayTypes", {
        get: function () {
            return this.s3;
        },
        set: function (a) {
            this.s3 = a;
            this.e("IndicatorDisplayTypes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorPeriod", {
        get: function () {
            return this.u6;
        },
        set: function (a) {
            this.u6 = a;
            this.e("IndicatorPeriod");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorMultiplier", {
        get: function () {
            return this.uf;
        },
        set: function (a) {
            this.uf = a;
            this.e("IndicatorMultiplier");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorSmoothingPeriod", {
        get: function () {
            return this.u9;
        },
        set: function (a) {
            this.u9 = a;
            this.e("IndicatorSmoothingPeriod");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorShortPeriod", {
        get: function () {
            return this.u7;
        },
        set: function (a) {
            this.u7 = a;
            this.e("IndicatorShortPeriod");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorLongPeriod", {
        get: function () {
            return this.u5;
        },
        set: function (a) {
            this.u5 = a;
            this.e("IndicatorLongPeriod");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "indicatorSignalPeriod", {
        get: function () {
            return this.u8;
        },
        set: function (a) {
            this.u8 = a;
            this.e("IndicatorSignalPeriod");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "rangeSelectorOptions", {
        get: function () {
            return this.tb;
        },
        set: function (a) {
            this.tb = a;
            this.e("RangeSelectorOptions");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "customIndicatorNames", {
        get: function () {
            return this.s1;
        },
        set: function (a) {
            this.s1 = a;
            this.e("CustomIndicatorNames");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "isVerticalZoomEnabled", {
        get: function () {
            return this.tw;
        },
        set: function (a) {
            this.tw = a;
            this.e("IsVerticalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "zoomSliderXAxisMajorStroke", {
        get: function () {
            return this.vs;
        },
        set: function (a) {
            this.vs = a;
            this.e("ZoomSliderXAxisMajorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "zoomSliderXAxisMajorStrokeThickness", {
        get: function () {
            return this.ur;
        },
        set: function (a) {
            this.ur = a;
            this.e("ZoomSliderXAxisMajorStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "isLegendVisible", {
        get: function () {
            return this.tu;
        },
        set: function (a) {
            this.tu = a;
            this.e("IsLegendVisible");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "xAxisMinimumValue", {
        get: function () {
            return this.uc;
        },
        set: function (a) {
            this.uc = a;
            this.e("XAxisMinimumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "xAxisMaximumValue", {
        get: function () {
            return this.ub;
        },
        set: function (a) {
            this.ub = a;
            this.e("XAxisMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "xAxisBreaks", {
        get: function () {
            return this.te;
        },
        set: function (a) {
            this.te = a;
            this.e("XAxisBreaks");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartDescription.prototype, "applyCustomIndicatorsRef", {
        get: function () {
            return this.vh;
        },
        set: function (a) {
            this.vh = a;
            this.e("ApplyCustomIndicatorsRef");
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartDescription.$t = markType(FinancialChartDescription, 'FinancialChartDescription', XYChartDescription.$);
    return FinancialChartDescription;
}(XYChartDescription));
export { FinancialChartDescription };
