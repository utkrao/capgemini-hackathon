/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { GridColumnAnimationSettingsDescriptionMetadata } from "./GridColumnAnimationSettingsDescriptionMetadata";
import { ColumnWidthDescriptionMetadata } from "./ColumnWidthDescriptionMetadata";
import { ColumnFilterConditionDescriptionMetadata } from "./ColumnFilterConditionDescriptionMetadata";
import { FilterExpressionDescriptionMetadata } from "./FilterExpressionDescriptionMetadata";
import { HeaderDescriptionMetadata } from "./HeaderDescriptionMetadata";
import { DefinitionBaseDescriptionMetadata } from "./DefinitionBaseDescriptionMetadata";
/**
 * @hidden
 */
var ColumnDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ColumnDescriptionMetadata, _super);
    function ColumnDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnDescriptionMetadata.b = function (a) {
        if (ColumnDescriptionMetadata.a == null) {
            ColumnDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ColumnDescriptionMetadata.c(ColumnDescriptionMetadata.a);
        }
        if (a.g(ColumnDescriptionMetadata.a)) {
            return;
        }
        a.s(ColumnDescriptionMetadata.a);
        GridColumnAnimationSettingsDescriptionMetadata.d(a);
        ColumnWidthDescriptionMetadata.d(a);
        ColumnFilterConditionDescriptionMetadata.d(a);
        FilterExpressionDescriptionMetadata.d(a);
        HeaderDescriptionMetadata.d(a);
    };
    ColumnDescriptionMetadata.c = function (a) {
        DefinitionBaseDescriptionMetadata.c(a);
        a.item("PaddingLeft", "Number:int");
        a.item("PaddingTop", "Number:int");
        a.item("PaddingRight", "Number:int");
        a.item("PaddingBottom", "Number:int");
        a.item("Name", "String");
        a.item("Field", "String");
        a.item("HeaderText", "String");
        a.item("ActualHeaderText", "String");
        a.item("SelectedBackground", "Brush");
        a.item("ActualSelectedBackground", "Brush");
        a.item("RowHoverBackground", "Brush");
        a.item("ActualHoverBackground", "Brush");
        a.item("RowHoverTextColor", "Brush");
        a.item("ActualRowHoverTextColor", "Brush");
        a.item("AnimationSettings", "ExportedType:GridColumnAnimationSettings");
        a.item("Width", "ExportedType:ColumnWidth");
        a.item("MinWidth", "Number:double");
        a.item("IsFromMarkup", "Boolean");
        a.item("IsAutoGenerated", "Boolean");
        a.item("Filter", "ExportedType:ColumnFilterCondition");
        a.item("FilterExpression", "ExportedType:IFilterExpression");
        a.item("Header", "ExportedType:Header");
        a.item("IsFilteringEnabled", "Boolean");
        a.item("IsResizingEnabled", "Boolean");
        a.item("IsHidden", "Boolean");
        a.item("ShouldRemoveWhenHidden", "Boolean");
        a.item("SortDirection", "ExportedType:string:ColumnSortDirection");
        a.item("SortDirection@names", "None;Ascending;Descending");
        a.item("Pinned", "ExportedType:string:PinnedPositions");
        a.item("Pinned@names", "None;Left;Right");
        a.item("ActualColumnOptionsIconAlignment", "ExportedType:string:ColumnOptionsIconAlignment");
        a.item("ActualColumnOptionsIconAlignment@names", "Unset;None;Opposite");
        a.item("ColumnOptionsIconAlignment", "ExportedType:string:ColumnOptionsIconAlignment");
        a.item("ColumnOptionsIconAlignment@names", "Unset;None;Opposite");
        a.item("ActualColumnOptionsIconColor", "Brush");
        a.item("ColumnOptionsIconColor", "Brush");
        a.item("ColumnOptionsIconBehavior", "ExportedType:string:ColumnOptionsIconBehavior");
        a.item("ColumnOptionsIconBehavior@names", "Unset;AlwaysVisible;AppearOnHover;AppearOnHoverAnimate");
        a.item("ActualColumnOptionsIconBehavior", "ExportedType:string:ColumnOptionsIconBehavior");
        a.item("ActualColumnOptionsIconBehavior@names", "Unset;AlwaysVisible;AppearOnHover;AppearOnHoverAnimate");
        a.item("ActualIsColumnOptionsEnabled", "Boolean");
        a.item("IsColumnOptionsEnabled", "Boolean");
        a.item("ActualIsColumnOptionsSummariesEnabled", "Boolean");
        a.item("IsColumnOptionsSummariesEnabled", "Boolean");
        a.item("ActualIsColumnOptionsGroupingEnabled", "Boolean");
        a.item("IsColumnOptionsGroupingEnabled", "Boolean");
        a.item("IsEditable", "Boolean");
        a.item("DeletedTextColor", "Brush");
        a.item("ActualDeletedTextColor", "Brush");
        a.item("EditOpacity", "Number:double");
        a.item("ActualEditOpacity", "Number:double");
        a.item("EditFontFamily", "(w:EditFontFamily/FontFamilyTransform,xam:EditFontFamily,wf:EditFontFamily,web:textEditStyle/FontFamilyTransform)String");
        a.item("EditFontSize", "(w:EditFontSize,xam:EditFontSize,wf:EditFontSize,web:textEditStyle/FontSizeTransform)Number:double");
        a.item("EditFontStyle", "(w:EditFontStyle/FontStyleTransform,xam:EditFontFamily/FontStyleTransform,wf:EditFontFamily/FontStyleTransform,web:textEditStyle/FontStyleTransform)String");
        a.item("EditFontWeight", "(w:EditFontWeight/FontWeightTransform,xam:EditFontFamily/FontWeightTransform,wf:EditFontFamily/FontWeightTransform,web:textEditStyle/FontWeightTransform)String");
        a.item("MergedCellMode", "ExportedType:string:MergedCellMode");
        a.item("MergedCellMode@names", "Default;Never;Always;OnlyWhenSorted");
        a.item("MergedCellEvaluationCriteria", "ExportedType:string:MergedCellEvaluationCriteria");
        a.item("MergedCellEvaluationCriteria@names", "Default;RawValue;FormattedText");
        a.item("MergedCellVerticalAlignment", "ExportedType:string:CellContentVerticalAlignment");
        a.item("MergedCellVerticalAlignment@names", "Top;Center;Bottom;Stretch;Auto");
        a.item("MergedCellPaddingLeft", "Number:int");
        a.item("MergedCellPaddingTop", "Number:int");
        a.item("MergedCellPaddingRight", "Number:int");
        a.item("MergedCellPaddingBottom", "Number:int");
        a.item("FilterComparisonType", "ExportedType:string:FilterComparisonType");
        a.item("FilterComparisonType@names", "Default;CaseInsensitive;CaseSensitive");
        a.item("FilterOperands", "Collection:FilterOperand:GridFilterOperandsCollection:FilterOperand");
        a.item("ActualHeaderTextChangeRef", "EventRef::actualHeaderTextChange");
    };
    ColumnDescriptionMetadata.d = function (a) {
        ColumnDescriptionMetadata.b(a);
        a.t("Column", ColumnDescriptionMetadata.a);
    };
    ColumnDescriptionMetadata.$t = markType(ColumnDescriptionMetadata, 'ColumnDescriptionMetadata');
    ColumnDescriptionMetadata.a = null;
    return ColumnDescriptionMetadata;
}(Base));
export { ColumnDescriptionMetadata };
