/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
var IconDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IconDescription, _super);
    function IconDescription() {
        var _this = _super.call(this) || this;
        _this.x = null;
        _this.ab = null;
        _this.y = null;
        _this.z = null;
        _this.aa = null;
        _this.j = 0;
        _this.k = 0;
        _this.ad = null;
        _this.an = null;
        _this.am = null;
        _this.ah = null;
        _this.ai = null;
        _this.al = null;
        _this.m = 0;
        _this.o = 0;
        _this.ae = null;
        _this.l = 0;
        _this.af = null;
        _this.ag = null;
        _this.aj = null;
        _this.ak = null;
        _this.v = 0;
        _this.ac = null;
        _this.g = false;
        _this.f = false;
        _this.n = 0;
        return _this;
    }
    IconDescription.prototype.get_type = function () {
        return "Icon";
    };
    Object.defineProperty(IconDescription.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualFill", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            this.x = a;
            this.e("ActualFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualTextColor", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            this.ab = a;
            this.e("ActualTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualHoverFill", {
        get: function () {
            return this.y;
        },
        set: function (a) {
            this.y = a;
            this.e("ActualHoverFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualHoverStroke", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            this.z = a;
            this.e("ActualHoverStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualStroke", {
        get: function () {
            return this.aa;
        },
        set: function (a) {
            this.aa = a;
            this.e("ActualStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualHoverStrokeThickness", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("ActualHoverStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "actualStrokeThickness", {
        get: function () {
            return this.k;
        },
        set: function (a) {
            this.k = a;
            this.e("ActualStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fill", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            this.ad = a;
            this.e("Fill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "textColor", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            this.an = a;
            this.e("TextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "svgPath", {
        get: function () {
            return this.am;
        },
        set: function (a) {
            this.am = a;
            this.e("SvgPath");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "hoverFill", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            this.ah = a;
            this.e("HoverFill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "hoverStroke", {
        get: function () {
            return this.ai;
        },
        set: function (a) {
            this.ai = a;
            this.e("HoverStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "stroke", {
        get: function () {
            return this.al;
        },
        set: function (a) {
            this.al = a;
            this.e("Stroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "hoverStrokeThickness", {
        get: function () {
            return this.m;
        },
        set: function (a) {
            this.m = a;
            this.e("HoverStrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "strokeThickness", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("StrokeThickness");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fontFamily", {
        get: function () {
            return this.ae;
        },
        set: function (a) {
            this.ae = a;
            this.e("FontFamily");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fontSize", {
        get: function () {
            return this.l;
        },
        set: function (a) {
            this.l = a;
            this.e("FontSize");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fontStyle", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            this.af = a;
            this.e("FontStyle");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "fontWeight", {
        get: function () {
            return this.ag;
        },
        set: function (a) {
            this.ag = a;
            this.e("FontWeight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "hoverTextColor", {
        get: function () {
            return this.aj;
        },
        set: function (a) {
            this.aj = a;
            this.e("HoverTextColor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "id", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            this.ak = a;
            this.e("Id");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "tabIndex", {
        get: function () {
            return this.v;
        },
        set: function (a) {
            this.v = a;
            this.e("TabIndex");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "ariaLabel", {
        get: function () {
            return this.ac;
        },
        set: function (a) {
            this.ac = a;
            this.e("AriaLabel");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "isHover", {
        get: function () {
            return this.g;
        },
        set: function (a) {
            this.g = a;
            this.e("IsHover");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "disabled", {
        get: function () {
            return this.f;
        },
        set: function (a) {
            this.f = a;
            this.e("Disabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IconDescription.prototype, "opacity", {
        get: function () {
            return this.n;
        },
        set: function (a) {
            this.n = a;
            this.e("Opacity");
        },
        enumerable: false,
        configurable: true
    });
    IconDescription.$t = markType(IconDescription, 'IconDescription', Description.$);
    return IconDescription;
}(Description));
export { IconDescription };
