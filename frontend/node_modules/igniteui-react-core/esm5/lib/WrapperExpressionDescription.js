/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { FilterExpressionDescription } from "./FilterExpressionDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var WrapperExpressionDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(WrapperExpressionDescription, _super);
    function WrapperExpressionDescription() {
        var _this = _super.call(this) || this;
        _this.j = null;
        _this.i = null;
        _this.o = null;
        return _this;
    }
    WrapperExpressionDescription.prototype.get_type = function () {
        return "WrapperExpression";
    };
    Object.defineProperty(WrapperExpressionDescription.prototype, "innerExpression", {
        get: function () {
            return this.j;
        },
        set: function (a) {
            this.j = a;
            this.e("InnerExpression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WrapperExpressionDescription.prototype, "expression", {
        get: function () {
            return this.i;
        },
        set: function (a) {
            this.i = a;
            this.e("Expression");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WrapperExpressionDescription.prototype, "propertyName", {
        get: function () {
            return this.o;
        },
        set: function (a) {
            this.o = a;
            this.e("PropertyName");
        },
        enumerable: false,
        configurable: true
    });
    WrapperExpressionDescription.$t = markType(WrapperExpressionDescription, 'WrapperExpressionDescription', FilterExpressionDescription.$);
    WrapperExpressionDescription.__marshalByValue1 = true;
    WrapperExpressionDescription.__marshalByValueAlias1 = "WrapperExpression";
    return WrapperExpressionDescription;
}(FilterExpressionDescription));
export { WrapperExpressionDescription };
